//# 1 ".hello.eobjs/jsoo/hello.bc.runtime.js"
// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=unknown, use-js-string=true, version=5.8.2+5.8.2
//# 3 ".hello.eobjs/jsoo/hello.bc.runtime.js"

//# 7 ".hello.eobjs/jsoo/hello.bc.runtime.js"
(function
  (Object){
   typeof globalThis !== "object"
   &&
    (this
      ? get()
      : (Object.defineProperty
         (Object.prototype, "_T_", {configurable: true, get: get}),
        _T_));
   function get(){
    var global = this || self;
    global.globalThis = global;
    delete Object.prototype._T_;
   }
  }
  (Object));
(function(globalThis){
   (function(a){
      typeof globalThis !== "object"
      &&
       (this
         ? b()
         : (a.defineProperty
            (a.prototype, "_T_", {configurable: true, get: b}),
           _T_));
      function b(){
       var b = this || self;
       b.globalThis = b;
       delete a.prototype._T_;
      }
     }
     (Object));
   (function(c){
      "use strict";
      function a(a, b){
       if(c.jsoo_create_file)
        c.jsoo_create_file(a, b);
       else{
        if(! c.caml_fs_tmp) c.caml_fs_tmp = [];
        c.caml_fs_tmp.push({name: a, content: b});
       }
       return 0;
      }
      a
       ("/static/assets/frog.png",
        '\x89PNG\r\n\x1a\n\0\0\0\rIHDR\0\0\x01\xae\0\0\x01\x81\b\x06\0\0\0>\x0fUy\0\0\0\x19tEXtSoftware\0Adobe ImageReadyq\xc9e<\0\0\x03!iTXtXML:com.adobe.xmp\0\0\0\0\0<?xpacket begin="\xef\xbb\xbf" id="W5M0MpCehiHzreSzNTczkc9d"?> <x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.5-c014 79.151481, 2013/03/13-12:09:15        "> <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"> <rdf:Description rdf:about="" xmlns:xmp="http://ns.adobe.com/xap/1.0/" xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/" xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#" xmp:CreatorTool="Adobe Photoshop CC (Windows)" xmpMM:InstanceID="xmp.iid:B52F0C93403F11E58B72BA79AD22DF83" xmpMM:DocumentID="xmp.did:B52F0C94403F11E58B72BA79AD22DF83"> <xmpMM:DerivedFrom stRef:instanceID="xmp.iid:B52F0C91403F11E58B72BA79AD22DF83" stRef:documentID="xmp.did:B52F0C92403F11E58B72BA79AD22DF83"/> <\/rdf:Description> <\/rdf:RDF> <\/x:xmpmeta> <?xpacket end="r"?>\xfe^\xef\x1e\0\x01\x81`IDATx\xda\xec\xbd\t\xb4\xaegY%\xf8|\xf3\xf0\x8fg>\xe7\x9e;\xdf\x9b\xdc\x84\x9b\x84\x10+!\xa0-C!\x04\x81*\x04\xc5\x81\x02AQ\xbbb;`\x8b\xa5\xa5EA5\xba\xb4\xbb\xcaj\xa5E-\xc4 \nKQJ4 \x8a\xcad \x81\x90@\x80\x90\xe9&\xb9\xf3=\xf3?~\xf3\xd4\xcf~\xdes\x93\xd4\xea\xd5\xb5j\xf5\x82&\xb9y7\xfc\xeb\xdc\x9c\xf3\x0f\xdf\xff\xfd\xe7\xbc\xfb\xdb\xcf\xbb\x9f\xfd\x18M\xd3\x90\x86\x86\x86\x86\x86\xc6S\x05\xa6>\x05\x1a\x1a\x1a\x1a\x1a\x9a\xb84444444qihhhhhh\xe2\xd2\xd0\xd0\xd0\xd0\xd0\xc4\xa5\xa1\xa1\xa1\xa1\xa1\xa1\x89KCCCCCC\x13\x97\x86\x86\x86\x86\x86&.\r\r\r\r\r\rM\\\x1a\x1a\x1a\x1a\x1a\x1a\x9a\xb8444444qihhhhhh\xe2\xd2\xd0\xd0\xd0\xd0\xd0\xd0\xc4\xa5\xa1\xa1\xa1\xa1\xa1\x89KCCCCCC\x13\x97\x86\x86\x86\x86\x86\x86&.\r\r\r\r\rM\\\x1a\x1a\x1a\x1a\x1a\x1a\x9a\xb84444444qihhhhh\xe2\xd2\xd0\xd0\xd0\xd0\xd0\xd0\xc4\xa5\xa1\xa1\xa1\xa1\xa1\xa1\x89KCCCCC\x13\x97\x86\x86\x86\x86\x86\x86&.\r\r\r\r\r\rM\\\x1a\x1a\x1a\x1a\x1a\x9a\xb84444444qihhhhhh\xe2\xd2\xd0\xd0\xd0\xd0\xd0\xc4\xa5\xa1\xa1\xa1\xa1\xa1\xa1\x89KCCCCCC\x13\x97\x86\x86\x86\x86\x86&.\r\r\r\r\r\rM\\\x1a\x1a\x1a\x1a\x1a\x1a\x9a\xb8444444qihhhhhh\xe2\xd2\xd0\xd0\xd0\xd0\xd0\xd0\xc4\xa5\xa1\xa1\xa1\xa1\xa1\x89KCCCCCC\x13\x97\x86\x86\x86\x86\x86\x86&.\r\r\r\r\rM\\\x1a\x1a\x1a\x1a\x1a\x1a\x9a\xb84444444qihhhhh\xe2\xd2\xd0\xd0\xd0\xd0\xd0\xd0\xc4\xa5\xa1\xa1\xa1\xa1\xa1\xa1\x89KCCCCC\x13\x97\x86\x86\x86\x86\x86\x86&.\r\r\r\r\r\rM\\\x1a\x1a\x1a\x1a\x1a\x9a\xb84444444qihhhhhh\xe2\xd2\xd0\xd0\xd0\xd0\xd0\xc4\xa5\xa1\xa1\xa1\xa1\xa1\xa1\x89KCCCCCC\x13\x97\x86\x86\x86\x86\x86&.\r\r\r\r\r\rM\\\x1a\x1a\x1a\x1a\x1a\x1a\x9a\xb8444444qihhhhhh\xe2\xd2\xd0\xd0\xd0\xd0\xd0\xd0\xc4\xa5\xa1\xa1\xa1\xa1\xa1\x89KCCCCCC\x13\x97\x86\x86\x86\x86\x86\x86&.\r\r\r\r\x8d\xa7\x11l}\n444\x1a\xbeeY\x1d\x16\x05\x85\xa6eT\xbeg\x8c-\x93*}f44qih\xfc\xf7\x16\xcf\xa6\xa1\xd1h\xbc4\x9dN\xe6\xd76\x86W\xdc\xf9\xe5\xc9\x0f\xdew\xd2|\xe1(n\xcd\x18uE\xdd`:8z0\xfc\xec\xd5\xc7g?\xf6\xac\xab\x16>\xd4\xef\x86\xeb\xfa\xac\xfd\x7f\xc7\xb9\xf5\xf1\xf1\xdb\xbf\xb8\xf5\xba\xcf}a\xe3\r\xf7\xdd\xb7\xb94\x18\xe5\x14\')\x99\xcd\x1a\xcd\xcfL\xe9\xeac\xad\xf5\xeb\x9f\xb5\xfa\xc1\xb9\xb9\xd9\xd3\xf3\xf3\x0b\x8f\x1e=z\xf4\xb6^\xaf\xab\xcf\xb9\xc6\xb7\x1c\x06\x16\x0b\r\x8do\x15&\x93\xe9\xfcm\xb7\xdd\xf6\xa3\x9f\xfc\xd4\'o\xfe\xeaW\xbe\xba\xff\xf4\xe9\xd3\xc4\xc4\xc5\xdf\x8f)N\x1b2\x9d>\xb9\xfd\x1b\xa9\xb7\xe7_\x92\xe5\xed\xa5\xc9pH\xf9\xf8\x1c\x1d>\xe8\xd0\x0b\x9e\xbf\xb4\xfe\xfaW_\xf3\xa6k\x8f\xef\xf9\x88>\x93\xff\xe3\xf8\xea\xfd\x9b/\xfd\x83?\xbd\xef}\x1f\xff\xc4\x85\xf9\xb3\xa7K"\xb3\xa2V\x10S\x9d\xddO\xd3\xadOS\x95\x9e \xaa\x13*J\b.\x83\x1c\xc7\xa6 \bh\xff\xfe\x03t\xe5\x95\xcf\xa0\x9bn\xba\xe9\xbd/{\xd9\xcb\xfe\xc3\xe2\xe2\xc2\xa3\xfaljh\xe2\xd2x\xda\xe0\xc4\x89\x137\xder\xcb{o\xf9\xe8G?r\xc5\xd7\xbf\xfeu*\x8a\xe2\xbf\xf9\xb9i\xf0/\xa7\x89e\x93\x95X\xcd\xffmw\xa8\xbb\xf2\x12Z~\xc6\x8fPc\x1d\xa0\xb5\x87\xbeFy\xb1F\xbd\xd9\x82^\xfe\xa2C\xd9\xcf\xfd\xf8w\xbe\xe8\xf2\xc3\xf3\xb7\xe93\xfb\xff\x8e\xf5\xad\xf8\xe8o\xbe\xfb\xae\x8f\x7f\xf0\xaf\x1f>4\xd8v\xc96<\xf2[|\x86\x8b{h\xb2\xfe\xb7\x14\xef|\x89U/\x7f\x0e\x86A\xbbg\x9e..\x0f\xf8zq\xad0\xf8\xe7G\x8e\x1c\xa1\xefy\xd5\xabO\xff\xcf?\xf1\xe3\xdf{\xf8\xf0\xe1;\xf5\xd9\xd5\xd0\xc4\xa5q\xc9b0\x18\xeey\xd7\xbb\xde\xf5\xe1\xdf\xfd\xddw]\x7f\xee\xdc9\xb2,\x9bl\xdb\xa6\xba\xae\xf8V\xef\xde\xeb\xf1\x05\xd30\x1a\xb5\x882{\xd5\r\bl/\xed\xbb\xee\xdf\xd0\xdc\x81W\xd0\xd9\xaf\xdfEEv\x96jc@\x8b\x0b\x1e\xbd\xf5\xe7^\xfc\xae\xd7\xbe\xea\xba\x9f\xd4g\xf9\xff\x89\xcf~q\xed\r\xbf\xf0\xab\x9f\xba\xe5\x81\x13Cr\xcc\x0e_\x18t\xa9\xd53i\xe7\xcc\x7f\xa5\xed\x93\x7f\xce\x0b\xc1\x84LK\x11\xd6\xe3$\xf5\xf8\xda`\x18\x17\x7f\xc6*\x98/(\xeaZ}F\xfb\xf7\xef\xa7\x9f\xff\xf9\xb7|\xe4Mo\xfa\xd1\x1fbU6\xd1gZC\x13\x97\xc6\xa5\xb5x~\xf6so\xe0E\xee\x96;\xee\xf8\x1cu{\xb3\xb4g\xf5\0\x05\xed6\x05^HY\x9a\xd0\xe9S\'h2\xde\xe1\x85\xd1\x94\x1b~7\xcb\xb2\xe0[IUU\x8b\x100L\x8b\xea*\xa0\xd5k\x7f\x89\xf6_\xfbZ:\xf9\xa5\x7f\xa2"=O\xb6\x1b\xf3}Jz\xcd+\xaf\x9f\xfco\xff\xe6%W\xcct\xfd\xf3\xfa\x8c+\xbc\xe7O\xef\x7f\xdf\xaf\xbd\xf3\xf3\xafK\xb3\x94\\\'\xe4\x93\xd8!\xcf7h\xeb\xd1\x0f1i}\x90?\x87\x15!\xa9\x9d\x9dM\xb9@\xf0}\x9f<\xcf\xe3\x8b\nK\xbe\x9f\xe7\x05e\xfc\xd8,\xcb\x1f\xbb\xb8\xb0mS\xc8\x0b?\x03^\xfe\xf2W\xd0o\xff\xf6o\xdfp\xe8\xd0A\xad\xbe44qi\\\x1ax\xff\xfb?\xf0;LZ7omm\xd1\xca\xea~Z\xddw\x98\x17\xc8\x90Zm\\\xfd[T\xf2\x82Xfc\xaa\xf21\xb9\xae\xc3$e\xca"\t\xd2\x8a\xa2\x88\x17\xd5\x1d\xda\xdc\xdc\xa4\xd1x"?\xab\xca\x90.\x7f\xfe\xef\xd0\xec\xbek\xe9\xe1\xbbn%\xa3\x9e2y\xd5\xbc\xb86t\xed3\x8f\xd0o\xbe\xfd\xe5\xdf}\xcd\x15K\x1f{:\x9f\xf3\xbc\xac\xbdw\xfc\xf6\x97\xeez\xcf\xfb\xbfz\xdc\xb6\x12r<\x9f\xdcV\x9fl\nh\xe7\xec\xa7\xe8\xdc\xbd\xbfE\xf3\x8bst\xc3\xb3\x9f\xcf\xe7\xbf\xa44\xda"\xdb\xac)\bBQ\xc1PY\xb8\x80\xc0\xe7P\xb1"~\xe4\x91G\xe9\x81\xfb\x1f\x90\xef9\xae-\xf5C\x10WU\xb1Zf\x82\xbb\xfa\xaak\xe8\x0f\xde\xfd\xee\xef\xbf\xe1\x86\xeb?\xa8\x7f\xe354qi<\xa5\xf1\xfb\xff\xe5\xdd\x7f\xf6\xcb\xff\xf6\x97_\x13\xc5\x89\xa8\xac\xa3\xc7\x8e\x93\xe3\xb8B@\xa8;a\x0f\x0b{\\\x9eU\x90\xef6\xa2\xb4.\xde\xe4\x97tw\x01][[\xa3\xcf\xdfq\x07/\xb2([Ud\xbaW\xd3\xb3^\xf1\xfb\xac\xb8\x86t\xf6\xfeO\xf3b[\xf2\xcd\xe2\x85\xd4\xa6\xde\\\x8f~\xf5\x97n\xfa\xd5W\xddt\xfcW\x9e\x8e\xe7|};9\xfa\xf3\xef\xf8\xc2C\x9f\xfc\xcc\xc3\xac\xb2R>\xcf\ru\xe6\xf7\x93e\x06\x14\xef<D\x0f\xdd\xf1\x1f\xf9\x14\x9e\xa2g\xfe\xb3\xe7\xd1\xfc\xfc\x82\x90S\xcb\xab\xc9\xb6\x9a\xc7T\x95\x94\x07\xf9\xff\x16\xab\xdc\xb2\xac\xe9\x91G\x1f\xa53g\xceR\xab\x15\x8aY\x03\xe5]\\T\xc4\xd3)A\xcd\xe13\xbc\xfc\xf2+\xe8\x8f\xff\xf8\x8f\xbe\xff\xfa\xeb5yi|\xf3`\xbd\xedmo\xd3gA\xe3\x9b\x86\x0f\x7f\xf8\xaf\xde\xfe\xe6\x9f}\xf3\xcdi\x96\xd3\xd2\xca^\xba\xf2\xaak\xa9\xcd*\xcbs]\xf2|\x9f\xba\xdd\x0e/\x84-&&\x83\x9a\xaad\x12+d\x0f\xe5\xf1\x0b\xaa\xc7\x17\xd23g\xce\xd0\xda\xfa\xba\xec{YNHez\x9e\x17\xcb\x1e\x1d\xb8\xeaE\x14\r\xb6(\x9dn\x91a\x96\xb2\xf8\x16\xac\xd4\xfe\xe6\x93\x8f|\xa7aZ\xcf}\xceu\xfb\xfe\xe4\xe9t\xceO\x9c\x9a\xdc\xf8\xe3\xbf\xf8\xb9{\xee\xbc\xfb$\x85^\xc6j)\xa3\xa0\xbbBA{\x86\x8ah@\xe7\x1f\xf8(%\xc3\xdbXm\xed\xa7#\x97]AA\x18\xca~U\xcd\xe7\xdf2U\xeb\x16.\x14\xa4T\xc8\xdf\x87\xaa\xba\xf8q\xa0<\xe8y\xae\xfc\xcc0m&E\x97?\xc3.\x7f\xcf\xa7\x92\x89kcc\x8d\xee\xba\xebK\xdf\xf7\x92\x97\xbc\xe4\xd6~\xbfwA\xff\x05h|3\xa0\x9334\xbei\xb8\xeb\xae\xbb_\xfd\x96\xb7\xfc\xc2[\x0b\xbeZ_X\\\xa2\xa3\xbcH\x86LR\x15\x88\xc8v\xa8\xcd\x0b^\xa7\xd3\'\xd7\xf5(d\x12\xebu[\xac\xc4\x1c\x8a\xe3\x9c\xa6|\x15\x1f\xc7S^43\xd9\xdb\xca\xb2\x8c.\\\xb8\xb8\x0e\xd6\x8a\xe0x]\xdd>y+M\x06\x9b4\xb7\xef\x1a^c\xbbT\x15%\x93\xd9\x98I0!\xd7\xca\xe9\xd7\xdf\xf9\xa9\x17\xbf\xed?}\xe2\x9e\xa7\xcb9\xbf\xef\xc4\xe0\x85ox\xf3gn\xbf\xef\x81\x0b|Ns*\xab\x88Ou@\xdd\x85#\x94\xc5\x19%\x93\x0b4Z\xbb]\xfe\xf4\xf7\x1f<J\x0bKK\xfc\x19\xf4\x98x\x98\xbc\xc8&8\xe0\xf3\xbc\xa6\xe1hJ\'O\x9e\xa4\x07\x1ex\x80\xbf\x9e\xe2s\xadJ\x86PY%\xdf\t\x17\x1f7\xdc\xf0l\xba\xf2\x19\xc7\xa9bRku:\xb4o\xff~\x9a\x9d\xed\xd3W\xee\xb9\x9b\xde\xf2\x96\xb7\xdc\x95ey\xa8\xff\n4\xbe\x19\xd0\r\xc8\x1a\xdf\x14\xe4y\xee\xfd\xfb\xb7\xbd\xed/\xd6\xd77\xa8?;G~\xd8b\xba1)N\x12&\xaf\x0e\x05~\xc8W\xed.U\xbc\xea\x19R\x97\xe2\xff\xf3U|E\x16m\x0fc:}\xf2\x04E\x93m^t\x99\xe0\xdam\xb9\xc2\x1f\x8f\xc7\xf2\xdc\xfd^\x8f\x0e\x1d\xb9\x8c\xee\x7f\xf0$E\xe3\x87\xe9\xc2Cw\xd2\x91\x1b^Eag\x0f%\xe3)?U\xcc\xe4\x95\x90e\xdb\xd4\xf2l\xfa\x9d?\xbc\xed\x1a\xcf\xa9o\xff\xa5\x9f~\xd1s.\xe5s\xfe\xc8\xe9\xe1\xf5?\xf6\x96\xdb\xfe\xf1\xecZJ\x81WS\x91ODE\xf5\x96\x0f1\xf1\xf8DUN\x83\xf3_fR_\xe3s5C\x97]~\x05_,\xcc\x8a\xe9\x02=[E\x91\xd2x\x12K\xf9o4dev\xe6\x04\xff,\x96}H(X\x81a\xd1\xfc\xc2\x02=\xfb97\xd2\xb1\xcb\x8e\xf1\x85B!J\xeb\x81\x07\xee\x97~\xaf\xc5\xa5e\xfej\xd2G>r+\xbd\xe7=\xefy\xdf\xcd7\xff\xeb\xef\xd5\x7f\r\x1aZqi<%\xf0G\xef\xfb\xe3[>\xf7\xd9\xdbYU\xf5\xa8a\xc9\xe4\x07\x1dq\x04\xe2\x8a\xfc\xf0\x81=\xb4gi\x96fz>/\xb0\x06\xb9\x8e\xba%iI0\xa9y~@\x8e\xeb\xf3\xbf+$i\x10l\xf3r\xd5o\x9at\xed\xb5\xd7\xd2\x1b\x7f\xe4G\xe9\xf5\xaf{\x1d\xed\xdb\xbb\x8f_\xa9\xa0\xc1\xd9\xdbxM\xce)\x9cY%\xcb\xe93\x19:\xbc83y\xe5S\xe2\x7fP\x9bU\xde\xff\xf9_>{\xe3\xfb\xfe\xfc\x8b\xbfw\xa9\x9e\xef\xc18\xdf\xf33o\xfd\xfc\x17N\x9f\xcf\xf9\xa2\xc0\xe0s\x101iE\xe4x]j\xcf.\xd3d{C\xf6\x02\xa7\xdb\xf7\xcb9\xdb\xbbw/=\xeb\xea\xa3\xb4g\xb1M\xcb\x0bmZ\x9a\xefS+\f\x98\xe0l>\xcf\x16\xd9\xaeCA\xab-\xed\n\xfd\xfe\x8c\xa8-\x90\x1b\xca\x82\xdf\xfe\xdc\xe7\xd2\xd1\xc3G\xe4{\xb8\xdf\r\xcf\xbe\x91:\xfc9CyU\xb5A3\xb3\xf3\x14\x06\x1e\xbd\xeb]\xefz\xf5\xa9S\xa7\xae\xd3\x7f\r\x1a\x9a\xb84\x9e\xf4\x18\x0e\x87K\xef\xbd\xe5\xbd?h\xb1ZB\'\xf1\xdc\xec\x02--\xadH\x19p~n\x96:\xed\x90|\xdf\xe6\x05\xd6\xa6n\xc7\xe3\xefux\x81d\x9d\x94Ly\xb1\xad)\f\x95\xdb\x10\xfb&PZXH\x81v\xbbE/}\xe9Mt\xd9e\x97\x8b]{yyY\xbe\x9f\x8e\xef\xa3h\xb0F\xad>+\xb9\xde<?\xa6\xc3\xcfc\xb2\x1a\xc8\xa9\xcc\x13&\xaf\x8c\\\xdb\xa1\xb7\xfe\xfa?\xfc\xc4\xdf\x7f\xe6\x817_j\xe7\xbb\xacj\xeb\x17\xde\xf1\x85\xd3w}eH\xa1\xdf\xf0{\x1eSSg\xd4\x90O\xad\x99},\x92\xf8\\\xc0\xb1YL)O\xce\xcac\xf6\xef[e\xe5\xeaS\xa7e\xd1\xe2\\HG\x0e\xcc\xf1\x85D(d\xa4<\x19\x06_@\x84\xacx\xdd\xc7\x8c4&\xff KSqz:|>U\xbbBMs\x0b\x8b\xb4o\xff\x01B\x05\x18\xfa\xb9\xe4s?;7OHAy\xcf\x1f\xde\xf2>\xfd\x17\xa1\xa1\x89K\xe3I\x8f\x0f}\xe8\xbf\xfe\x1f\x0f>t\x82\xaf\xf6\xd5&\xbe+\x04d3!\x05\xd4\xeb\xb5UY\x90\t\xcd0,)\xe7EqJ\x1b\x9bC^\x143*\x8b\x98\xb0\xfc\xf9A\xc0?sX\x01\xa8^"\xa8\xad\xd1hD\x9f\xfd\xecm\x94\xf2\xe2\x89\xf2\xe2\xd2\xe2<?\x91KM\xb9I\xe3\x8d\xd3\xac,fy\xa1\rYy\xadPU:|+Yu\xe5\xac\xc6\n\xb2\xf8\xf1\x19+\xba7\xff\xca_\xfd\xe6]_9\xf3\xeaK\xe9|\xff\x87\xff|\xf7=\x1f\xfd\xfbSV\xbbeS\xcd\xaa\xa8*\xb3]5\xb4(e\xc2,\x1a\xa3\x1b\x8b\x92\xc9:\x0b\xd0\x01a\x87`a~N\x8c\x16\xb8\xe1\xfc\xc2<\xb33\x18\xa9sV\xa8\xde9\x9c\x7f\xcf\x0b\xc4\xa9\xa9\x924L>\xf7\x19\xfa\xf1\xe8\xc2\xda\x9a"4>\xaf\xb0\xce\x1f\xe5\x8b\t\x9b\xef\x8fRb\xd3\x18R\x06\xee\xf7\xfbt\xeb_\xdfz|cc\xe3\x90\xfe\xab\xd0\xd0\xc4\xa5\xf1\xa4\xc6\xad\x1f\xf9\xe8\xeb@8EQ\xf2B\xc8W\xe5U\xc3K\xa3E33}\xf2\xdc\x80\x97@VQ\x86M6\x93Y\x9a\x16t\xf2\xf4y\x9aDS\xd9G\x11[u6%\xdf\xb5\x15qI#\xb2\xb2f\xa3\xe9\xf5\xf3\x9f\xff\x02=\xf8\xe0\x83b\x16\xe8\xf5\xbad\xd8L\\\xcd\x98\xa2\xe1)\xb2\xbc\x165\x86C\xdd\xc5=d9(o1yUL\x86y\xc6\xc7\x91\xb2J\xb0hg\'\xa77\xfd\xec\x07\xff\xe2\xf3w\x9f\xfa\xc1K\xe1\\\xff\xda;\xef\xba\xfd\x96?{\xf88T*\f+e\x99\xf3\xc9*\x99PX}v\x96X\x81vX\x8d\x8e\xc9\xf1]\x8a\'k|\xeea\x8dw\xa8\xd3i\xf3\xfd/:7\r&\xad1\x8d\'\x91\x90V\x0e\xb2\x87\xc3\x93\x7f\x8c\xe7\xc5\x05\x86\xe4\x97\xf0\xc5\x06>\x93\xc1pL\xff\xf4O\xb7S\x94d\xfc\xf9xT\xd5&\xed?p\x98VV\xf6\xf2\xbf\xf9\xb3F\xef\x17\xdf\x1fn\xd1\x0b\x17\xce\xd3\xa7?\xfd\x99\x9b\xf5_\x85\x86&.\x8d\'-\xee\xbb\xef\xbe\x17\xf2M\x16\xba\xaa\xac\xa5t\x04W\x9b\xc5W\xe733\x0b\xbc\xb0yT6>\xd5\x8dCi^\ni\r\x06\x03&\x97\x82j&\xb8Jz\xbar\n\xf8\xe2\xddu\xb0\xdf\xa2\xfcC(%\xa2\\\x05#\xc1\x17\xbe\xf0\x05\xf9\x1a\x04>\x93\x9f\xc3\xafPP2>\x83\xa6D\xbe\x7fG\xac\xf5\xfd\xc5U~>^\xccK41\xa7\xac\xe4\x98D\xe1Dd\xe1\xb0\xb9\x15\xd1\x1b\x7f\xe6\x03\x1f\xb8\xf5\xe3\xf7\xbe\xf5\xa9z\x9e\xb3\xbc\n\x7f\xe9\xd7\xefx\xe8w\xff\xe8\xfe\x1b=\x07*\x07\x17\t\x85\xbcW\xec%:n\x8f\xba\x0b\xf3|NjJ\xc7L0\xd0\\\xf1\x0e\xb3O%\x17\x03(\xb5\xe2r\x02\x17\x04\xb8\xc0\xd8\xde\x19\xf1\xf9\xaaD=Y\x96\xb9\xfb\xd5b\xf2i?\xe1UU\x80\xa4\xe3\xf8t\xe6\xcc9\xba\xeb\xae\xaf\xb0\x92\x85\x1b\xb1Ea0G\xd7>\xeb:e\x93\x97h(u_8F\xff\xf1\x13\x9f\xf8)\xfd\x97\xa1\xa1\x89K\xe3I\x8b/}\xf9\x9eW\xc2PQ\xe4\xaa\xdcD\xb2\x88\x06\xbc\xb0\x05\xd4\r\x97\xc9\x88z\xe4\x16\x0b\xac\xb9\xba\xb4\xbe9\xa5\x0b\xeb\x03VZ\x8d\xa4g\xf8\xbc \xb6\x82\x0e/\x8c\x81\x90\x0f\x16d\x10\x17\x16ZE^\x96\xa4j\xdc\x7f\xff\x03t\xf6\xec\x19\xfe\xb7\xab\x92x\xa9\x16#F\x91Y\xe4\xf9K\x94E\x0e\xcd\xef=D\x8e\xd7\xe1E\xd5\xa5\x1a\xa4\xc5\xb7\xbaJ\xc5\xce\x8d\x85u:\xad\xe8\x7f\xf9\xc5\xbfz\xfb\xdb\xff\xe3\xdf\xde\x93\xa6O-\xdb\xf6\xe9s\xa3k\xde\xf8\xe6OE\x7f\xf2\x17\'\x8f\xfa\x9e\xa3\xf6\x96j\x981r>\x8f5\x93R\x97\xbc\xd6\f\xb5\xfb+LV\xac\xa0\xe2\xa9\xb87\xebR\x95a\xb1\x89\x85\xa6b\x9c;\x18gR\xbeP\x18O\'\xf2y\x81\xd0\x90h\x02\x8b|\x10@\xc1\x9a\xf4\xb8.#y,. l\xcb\xa5\xfb\xbf\xfe(\r.T\xd4M\x17\xc9H\xfbt\xe8\xe03hqa\x8f*?\xf2\xfdj\xbe\x90\x80b\xfb\xda\xd7\xee\xf5\xa2(\x9a\xd1\x7f\x1d\x1a\x9a\xb84\x9e\x94\xb8\xf7k_\xfb.\xec\xafHC+/`\xb8:\xc7\xbe\x87et\xa8\xdb,\xd3w\x1c\xbe\x8e\xf6\x86\x07\xa8\xcaB\x1a\xec\xc4\xbc\xe0bl\x86G6\x93\x90\xc1\n\x0bj\x01\xa5\xa98C\x06^E\x8em>\xb6l\xc2\xa4\x01\xe2\x8a\xe3\x88\x1ez\xe8!\xd5\x98,uD\xd6\x0e0b\xa4\ry\x1d\xfe\xf9\xa8\xa4\xa0\xb3H=^Dm\xa7\xc7\x8f\r\xf8\xe7\x89\x90\x17J`,LX\x895\b\x93\xa0\xdf\xbd\xe5\xf3\xd7|\xdf\x8f\xbd/\xfa\xc2\x97N\xbd\xe6\xc9~n\xa1\x90\xfe\xf2oO\xbc\xe35?\xfe\xf1{>{\xfb\xba82\xab\x82\t\x892!-\x0b\xee\xcd\xd6\x12\x9f\x83U\n{K\xb2\xe7\x94\x8c\x12\n\xba>A\x07\x95i\xac2\xdfY\r\xe5L\xf46\x93\xdd\xa2[P\xdf\xca\xf8\xb1%_`XLX\xbe\xdcP\xea\xad$\x8b0\x97s,\xfbaX0\xe4B\x81?37\xa4xb\xd1\xf0\xcc\x90^\xfa\x82\xebi\xa5\xb7B\x81\xbb@\xfb\xf6\x1e\xdc]V\x84\xe6\xa4\xc9|}m\x8dN\x9cx\xf8\xdb\xf5_\x87\x86&.\x8d\'%\x1ey\xe4\xd1+\xa4\\d\\\xe4\x1bU\xde\x9bNm\xdasp?=\xef\x87\x8f\xd2\x0b^~9u\xf8\x8a\x1d+a\xe0{\xb4\x7f\xef\x1c\xdffi\xcfr\x87\x96\xe6\x03&\'VDQ"\x8b&\xdc\x87\xeaB\xdfP\xa3N\xe4\x8a\xdf\xa0S\xa7NQ\x14\xc5\x8f\':\x141\xa5\xe3\x01\x05\xad\x80\xca,\xe6E:\xa2\xd5\xcb.\xa3\xd9\xd5\xc3L^\x1d^F\x03bIAMU\xec\xee{1\x81\xe55\x05\xbc\xb8\x7f\xe9\xcb\xeb\xf4\x03?\xfeg\x7f\xf6\xef~\xfdo\xbe\xb6\xb15~R\x1a\t\xee;\xb1\xf9\xc2\x1fy\xf3\xdf7?\xfb\xef\xee\xf8\xe5\xad\xcd\x8a\xcf\x8b#\xfdSu\rb\xc9\xc9\xe1s\xee\xb7g\xa8\xd5\x9d!\xbf3\xcbj\xc9!\xb3\x9eR\x1aAe\xdaLp\x15\x9f\xabT\x94\x10\xf6\xb6.\x9cz\x80\x06g\xbfJ\x83s_\xa3\xf1\xe6#\xe4\x98)\xf5\xbb\x16\xad.\x07t`\xa5E\x07\xf9f\xf3\xa9O\xd3D\xa5h \xf8\x98T\xa2\x89\xecw\xf1\xe7\x87\x8b\x02c!\xa0\x85\xab]\xba\xfa\xdb\x0f\xf2\xe7\x06\xf7\xe8^1\xe2\xc8\xeb4$%\xc7\x82\xaf\x14\xce_8\x7f\\\xffuh|\xa3\xa0\x1b\x905\xbea\xc8\xf2<\xdc\xdc\xda\x94\x85\xcb\xf3L\x89\x1aJ\xa3\x894\x03\xaf\xaf]\xa0\x7f\xba\xff^:r\xd2\xa7\xaf~\xf9\x04}\xea\x8e\xcf\xd1\xc6\xf8$\x15\xf5\x90\xf2\xd4!\xd7\xaey\xf1l$\xe4\xd5l*~\xae\x98&LL\x9ec\x8b\xab\ri\r9+\xa6\x8b\xa1\xaf\xc8-<}\xea\xccn\x1c\x14\x16\xc9L\xf6y\x1c\x94\xce\xc8\xa5\xd1\xc6\x0e\xed\xbdb\x99\x96\x0e\x1e&\xa32h\xeb\xf4Ix\x13\x99\xbc"jLW\xd2;\x9a\x06y{\x9e\xd8\xf4\xb1\xb9\xf6\x87\xef\xbf\xfb\xf8\xdf}\xf2\x81G^\xfb\xbd\xd7~\xec\x07^\xf9\xcf~zi\xa1s\xe2[\xae`\x1f\xdcx\xf1\xfb>x\xcf\xef}\xf4\x1f\xce\x1c\x9a\xb0\xc2\xf1=>\xe6\xb2\x11\xc5T\xf3\xf95\x1d\x97\xcf]En\xb0D\xae\xbf@\xed\x999\xfe7\x9fC\x83\xcfG\x15R\x96\x14\xa2\x98,\xb7\xcd_$KK\x88\xff\xab\xf7\x9d\xa4S\xa7\xcf\xf0\x05BJ)\x9fW\x9c\x1b\x9cJ4\x11c\x8f\xab\xd7\x0e\xa9HJ\x11N\xb6\xc7j\x98\x1f\x8b\n\xa0x\x10\xc5\xac\x81\xd8-\x93\xee|\xe8\f}\xe4\xae\x87)\x1f\x1b\xf4\xd0\xc3\'d\xbf\x12\xfbZEQ\x8b\x99\xc3\xe3\x7f\xa34\xbb\xb3\xbd\xb3_\xff\x85hh\xe2\xd2x\xd2\xa1\xc8\x0b/\x8e\x13Q[~\x10R\xd5\xc0>\x1d\xd3\xf6\xf6\x06YL*\xb7~\xf8o\xe9\xef\xee\xf8"M\xd76\xa8\xd89\xc7\x0b\xe0\x06\xaf\xa3\t=\xd2\x14\xbclV,\x9bJ)\x88\xb9\x8e)+$\xca\x8cuSS\xb7\xdb\x7f\xc2|\xa8F\x16\xc6$\x89\xe9\x8b_\xfc\xa2\n\xea\x85\xc9\xc0j\x91i\xb5\x99\xb8B\xb2y\x91\x1en\x8fh1-\xa8\xdd\xf5\xc9<z\xb9\x94\xba\xb6\xcf\x9fW\x83\x12\xb1H39R\x15\xf1\xe3K\xca3\x8f\xac\xb2&\xdf-hk\xab\xa2\xff\xfd\x9d\x9fx\xe9\x1f\x7f\xf0\xce\x87^\xfa\xcf\xaf\xbc\xf7\xd5\xafx\xd6/^s\xe5\x9e\x8f\\\xdcg\xfb\xef!N\xf3\xce\xf6N|h\x8bo\x93I2_\xd7\x95\xdd\xee\x84[\x0b\xb3\xadG\x17\xe6Z\x0f\x85\x81\xfb?4\xafj4N\x96>s\xfb\xa3?\xf1\xe1\xbf\xbd\xff\xed\xb7\x7f\xf1\f+Kbr\xf2\x98\xc4=\xaa\xb0Oe\xe0=\x94L\x1c\x169~@~\xd8%7\\\xa5V\xa7Ka\x87I\xa6\xde\x16\xc3E\xc6\xef\xa9f\x85)o\x15\x1cd8\x8a\xb8\xf8\xad\x9c\xbd0`\xd5\xa6\x8a.(\xff\xa9Q2\x06D\xa9\xecM\rG\x89\xb8>=\x84\xe9V\x8d\xb42\xd40\\@&\x9bP[\x1e+:\xa2\x9d\xd3\xe7\xe9W\xdf\xfe\x01\xaa\xa7#>\x01\x17(\xcd\xf1\xb96\xb2\x97\x88\xecI\xb40\xec\xf6~y\xfa/DC\x13\x97\xc6\x93\x10O\x1c\0i\xf0b\xd7R\xd3ty\xe5\f[&\xab\xa9\x98\xaa\x8du\n\xaa1\xf9\x1d\xbe\xaf\x81\x86W\xa4\xc3\xe7\xa8\xf5\xf1\xd7J\x11\x14\x93\x15k(\xea\xb4])5\xed>\xa1\xfaB\x8f\xff\xe7\xda\xc6X\xee+\xdb\\f\x9b,\x9bI\xca`\x12r\x1b\x8a\x99\xb8\x86\xfc\xf3n\xbf\x10+\xf8\xf2\x91U&\xd6\x8a&\x83\x82\xaa"\x92\xa6\xdc\x86\x8f\xab.*~,^\x9b\xc9\xac(X]\xf0\xb1\xfa-\x1a\x0eFt\xcb\x9f|\xee\xf8\x07\xff\xf2\x9e[\xaf<\xb6H7\\\xb7\xef\x8e\xab\xaeX\xfe\xd8\xf2b\xff\xfe \xf0\'EY\xb9\xc3Q\xb4\xba\xb6\x11]\xf1\xd0\xc3\xdb\xcf;\xf1\xe8\xfa5\xeb\x1b\t\r\x86\xb9\xd8\xc4\xd1\x06\0R6\f~\xbe\xc0\xa1\xd9\x99\x16\xedYn\xd3\xe1\x83s\xf7^vd\xf1\xd3+\x8b\x9d\xfb\xfb\xfd\xeey\xd7\xf1\xe2,\xab\xc2\xc1h|\xe0\xe4\xe9\xedg\xdf\xfd\x95\xb5W|\xf5\xbe\xed\xe0\xecy&\x02&Y\xb4\x0fx\xb6\'cE\x8c&\x95=A\x9c\x04\x90\x8c\x13\xb8\xe4\x85=\xf2[\xb3\x14\x80\xb4\xda99v,{}\x8d\xe1\xb2\x92M\xe4\xfc\xc0\xb1Yf%\x1fK\xa8\x9c\x84|\xc2\x90L2?\xdf}\xc2\xacH\xe3\xf1\x8f\x11\xc6\n\x19)S\xc9\xe78\x9dN\b\x17$\xa2XEu\x99R*4iD\x96\xd1fV\xdcar\x1d\x92i\xe7\xac\x8ac\x9ab\xa6\x9aQ\x93e\xa8A\xa0US\xeb?\r\rM\\\x1aON8\x8e\x9b\xe1\xca\\\xf6Ax\xa1E\xaf\x15\xec\xd4H_h(\xa3<_cb\xf0\x99`\n\xbe\n\x8f\xa4\xb4\xd7P)\xf75\xea\'\x8c1!\xb50\x0bi5\xca\x94p\xb1\xc4\xb5\xbb\xc3"e\xad\xb2\xdcUa\x98\x8clu\x99,rV\x07\xac\x14X\x89`OggmH\xd3\xad\x01\xffwI-\x94\xd0|S\x9af\xeb<\xbax\xc4\xb2@\x9b|ld\xfa\xbc\xd8#\xe1\\\xf5 \xa1\\\xe6{\xc8R\xb4\xe8\xcb_Y\xa3\xbb\xee>u\xa3e\x1b7\xa2\xac\xe8x\x81\x90eYA\xd1\xe0hl&\fC%N\x18\xb0\x94\xfb\xa2\x1a\x9b\xc6\x92f\xe04\x99\xd0\x19^\xf8O\x9d\xd9\xa0\xdb\xeex\xf8x]\xe5\xc7\xd1Oe[\xca~^V\xca\bQ5=~/\x1e?WH\x8ea\xcb;-J>.Y\xf8\x1b)\xb9\x99&\x9f+~~\x9b\xc9\xd5k\xf1\xeb\xba\xfc.|\x83\xdf[\xca\n\xac\xc5\xc7\x83\x92\xa9-{| \xac\n\xe4\x83\xe6\xef\xee,\xff|\x96\nVMP\\9\xf6\xf8\x8aF\xda\f\x1e\xe7\xad\xe61"S\n\x8c\xe4\xb5\xe5\xac\xcb\x1bm\x94\x13\x11\xba\xab\xcaw\x1f\x97Q\x921\xa9\xb1\nL"|-Y\xc9y|\xd7R\xac\xf8x<\x1c\x8c\xedv{K\xff\x85hh\xe2\xd2x\xd2\xc1\xf3\xdcxnnV\x9aX\xd1\xa8\x8a\x80W\xac~Ei\xf0\x02:\x95\xc6\xe3\xac\x9c\x90\r\xa3\x05\xab\x9d\xaa\xa9D\xf5\x18M\xf58i]\\\xec,\x87\x9e8+N\xa6\xedJ\x12\x06/\xb8U%\x0b/\xf6Q\xc4Q\b\xe2\xf0WY}\xb4(\xe3+\xff\xba\xc8e!\x9el\x0f\xf8\x81\x86\x94\xc8\xbc!\xbe\xbfAy\x16\xcb*m\xf2\xb1\x90\xe5\xa9f\xdd:\xe5\xa7\xc1c\xb0\xe0\x1a\xa2\xbe\x90\x92\xde4LRv\xcd$\xe40\xaf\x85\xfc\xa8\\JtF\xc5\xa4\xc3D\xe5\x98\x1e\xf3\fz\xc9,\xf9~Y\xa8?\xa9\xa6\xc2s\xd7RU\xc3\x1e\x1a\x18\xcdf\xc2\xb1\xbdZ\xed\x0f\xf1\xfb\xaa\x8a\x94j~@Qd\xa2\x8ap<\x96\x89R\x1e\x1f8+\xd0\nI\xed\xb5-\r\xc3\x922"\xe5P9\x9d\x84(-\xcb6\xe5|"+\xd0vAr\x15_\f\x10eS>\x02\x19\x11\x93\xb3\xca\xe2\xff\xa0\x84\x8a,\x17\xd5\xe9\x86+\x94\fU\x12\t\xd4\xd4\xe6\xf6X\x9a\xbaU\xdf\x96%D\r\x17\xe7\xc5\xf3\x0e\x93M]?q6Z\xfdX\xb9V\xca\xadT\xb0\xcaBy\x91?[\x89\x8a*\xe5<\xe03\xa5\xc7\x1e\xd3\xc8\xf3\xcc\xcd\xcd=\xaa\xffB44qi<)q\xf4\xc8\xd1\x13\x9f\xf8\xc4\xa7\x8e60?\xec^\xcc\xd7|\xf5\x8dVd\xf4\x12\xb7{}^\\\'j\xefEz\xaa\x9a\x8b\xadE\xbb_\xd5"j>fKl\x88\xc5\x13\r\')\xc5Q,\nb\xb76\xa8\xdck\xbc\xc8\x9b\xd6\x1c\xab\x8f\xa3\x14\xb6-\xbe\xeao\x94q\xc0VA\xbb\x15\x93\xa6\x1dt\x84T<X\xf3\x1b&%3\x97\xf2\xa4Q\xef\x12\x11,\xf8f#\xfb_\x05\x93\x96\x03\xfb"\x16\xe0\x12\x93\x99\xf9\x8f\xc4\xe2\xfb\x99;|\x1f&\tV(\xa6\x8d\xa6gO\xe2\x8e\x88\x89\xa5\x91\xf7\x02\xf5\xd6\xe1\xf7\xea\xf2\xcf*V<k|\x8cL(\xf6\xac,\xf2M\x8d\xfb\xd5\xa2P\xf0\xdcB@\xae\'\xea\f=Ve\xc5g\xa2LA\x17*$XJ\xac|\f|\xd2j&h\xd8\xd3-\x0b\xaaS\xc5g\xd9\xa2\x88\xd0\xef\x16\x8aq\xa2\x8c3\x9aN\xb6\xc5E\xc8\xa2\x97\xcf\xcb\x84*\xdc\xc7F?\x15"\xa0J\n\xda{il\xa0<8\x95\xf4\x8c,\xab$\xc8X\x94\x14\x7fB\xb0\xcf\xcf\xf4Z\x14x\xea\xa2\x01\xc7h\xdb\xae*\x01\xa3L(\x9f\x89\xea\xcf\xc2\xa8\x1a|z~\xe03\x91\x97\x94\xc7\x99\x10\x96\xa8C\\|\x90*\xf9\xe2y{H\xf3?t\xe8N\xfd\xd7\xa1\xa1\x89K\xe3I\x89\xe3\xc7\x9f\xf1q\xbe\x82?\xaa\xf6\xbb\xf8*\\L\x7fJ\x19\xa1\xda\x14G\x13Q\x1aMU\xed\xaa\x07\x9b\x97D[\xf6B\x84\x90\xe4*\x9d\x17@q\xfd\xa9=\xb3q\x94S\x92\xe6\xaa$\b\xaa\x83%\x1e,\x88=*V?\x96w\x8c:\x0b\x07yq/i\xcc*\x0b\xafc\xf9\x01UIIm\x8cT\xe9/\xb3\xfaH\xc8c\x15\x174#\x9a\f\xd7\x98\xd0\\~\r&\x85Z\x995\xb0\x98\xc3\xec`\xf3\xb1b\x96\x17\xcak\x06\x9cy\xa8I2\x91\xd5L& \r8\x12M\xdb\x12\x85S\xd7\xb1z\x0e$\x81\xd4.\x93c\xc2\xefmSJq&\x13\x07\xf6\xf0\x9aj\xaa\xce\x03\x7f\xb3R\xfd\xd8\xa4|\x1e\x99\xa4XX\xc6\xae\xb2d\x92b\xfa\x91C\xa9e\x96\xa3)&\x07\x83_C\x06:\xca1\xe0\xdb!Y\x15J\xa5|,\x05\x13Ft\x8ayp\x85\xb2\xb8\xa4\xc1N$6\x7fcv\x86\x1c\xaf\xa1x4\x91\xbd6\x98/ \x82\xc2\xfe*\xf3\xd5a~\xdc\x17\xf98\x02\xf5\xde\x1aes\x87\t\x06&\x8a\x01\bk\xb6#nN)\xa3\x9a\xc6n+\x82\xda[\xc3\xa7c\xb1\xf43]K\xc8+\x8dF\xf2\x99\x80\x18\xd5\x85H\xfd\xd8n\x19.\\\xc0]\xfb\x0f\x1c\xa0\xbd{W\xef\xd1\x7f\x1d\x1a\x9a\xb84\x9e\x94\xb8\xee\xba\xeb>\xd4\xedvo\xc6\xd4\\\xf8\xa7\xa5m\x15\xe57,\xca\x18{\x91#\xb5\x90\x17KI\xc5P\x8a\xaa\xd95X`\xbb\xa5n\xea\xdd\x85\\\x95\xab\xa6L>I\x92K)J\xbe\x05u\xd4\x98j\xdfE\xae\xf0\x89\xdc\xee\x8d4\xb7wE\x02z\xebj\xa4\b\x0e6\xee\xce\f\xcd,\x1f%\xbf\xdb\x96d\xf4r\xeaQ\x91\x05\xe4\xf8\xfc|\x85+\xb3\xa4\x8czK\xac\xf0u\xd5\x91\xe6d\xdb\x9c\xf2\xd1E\xbc\xb83i\xb1\n\xc3\x98\x8f\xa6\t%\x85\xc3t\x03I\xf8(Av\x06\xc8\xd5\x13\xc7]\xdd \xc8\x97\x9f?\xdf\x96fk\xaa\xa1\xec\x02\xc9QD9\x0fF\t\x83\xd5\\\x83R`\xc5\xc4]3\x11X\x8e<\x07BmM&/)\x13\xe2\xbfAr\x16\x93z\x93\xa0\xce\xa8l\xe8\x15H\x86\x9f\xaf\xc6\xf3M\xa8\xb4Y\xed4h\xda\xc6^\x9e\'\xfdh\xe9tH\xc9p$C \xc1\x16\x9d\xf96\xe5i\xb1\xab\x80J\x9a\x0e\xb7i\xf1\xd0\xe5\xb4\xf6\xc8\xb7Q\xbc\xc5\xc4\xd5\xc0f\xe8HOWm(\xc3\x05\xd4\x11>\xb7\xc94#\xb3kJ\tT\xc8\x0b{\x8b\xc6\xc5=F\xda\x95\xc6&\xb9\x8e\xb5k\xf6\xe0\xef\xbbP\x86\x8d\xf4\x96\xc9\xc9\xe7\xef;\bP\x8e"\xfa\xb6\xeb\xae\xbb\x97\xc9\xb7\xd2\x7f\x1d\x1a\xdf(\xe8\x06d\x8do(\x8e\x1d\xbb\xfc\x13\xc7\x8e\x1d\x93\xf8 \xdb2e\xf1mv\xf7F\xea\xdda\x91\xd8\x1f2/Z\xa6!#v\xcbK\xaa\'kwad\xc4\xbc\bO\xe2\x9cUL\xa9\xf6Z\xc4\xfanK\xb9\xca\x10\x05\x97\xf2\xf3-Qg\xe99\xe4\xb2\xc2\x18\xac\x9d\xa3,\xda\x10\x03\x03\x8c\n\xdd\xc5\x83\xd4\x9e\x9b\xa3\xcel\x97\xba\xf3s\xe4u<Vg\x0e\xb9\xe1^!"\xcb\x86k1\x14#\x02\xf6g\xa0J\xca\xca\x95r\x1d\x1c\x8a ,\x8c\x061\x98x@`\x06\xab\xa4\x8a\xd5\x98ra\xc0\xdd\xed\xaa\x84\x902\x13g\xa2\xed\xf5\xf8\xa1K\xfcW5\xcb\xef\x18\xfdV\x96\xdc\xdf4br\x9cX\xd4\x17\xca\x82x~\xec\x9f\x19\xfc\xdc&\xf6\x94\xf8yMC\xed\xcb\x91$\xb6c\x8f\xcd\x93}>>\x10&JG\x12\xee\xeb:e\x8e\xcd\xa9Hc\xca\x93\x1d\xbeE\x92\x82\x9fg\x03&\xe4\x1dr}\x83\xc2\x96C\xf1\x18\xbdq\xb5\xf4x\x95%\xcc*\x15\xc5\x93u\xf2\xdb\r\xb5\xe6\xaf\xe1\xf7\xb2\xc2\xc7\x96\xc89\x94\xff5\xcdceZ9\xefqF#&/\xf4wIj\xc6\xee~\xd5cI%R\x06\xac\xd4\x1ef]\xcb^e\xc6_\xb1\xf7\xe6\xb8\x8e\xba"\x96&tC\xca\x9a/x\xc1\xf3\xdf\xa5\xff244qi<y\x7f\xa1\x98\x04^\xf6\xb2\xef\xfeP\x9eg\xb2\xe9\x8f2\x17\xec\0\xc8\x1dD\b\xec\x88\xaf\xc0\x13^\xf0\xa4\x8f\x8a\x1e/\x0f6\xb5"\xaezWEao)JJ\t\xc7U\x9b\xfc\xfc,\x8d\x9a\xcbe\xa0\x9c\x87}\xb3*#\'|\x01u\x17\x0eP29Eit\x81U\x88/e\xbc\xd6\xcc<\xf5\x96\xf6Qg\xa6E\xad\x90\xef\xe7\xdbd\xb7ZL\\\xa1\xecQaQ\xb7\x1c\x94\xb8\x02q\x14\xdaLh&\x93\x95a\xf7\xa86\xf7Pi\x1c!\xcb\xdf\'\x83)\r7\xe4\xef\xf92\xc1\xd9\xb0@d\x1d^\xf8Y\xe9\x80\x98\x9a\xae\xfc72\x11\xcb\xc2\x17e\x05C\x85\xebe|,%\xbf\x7f\xb5\x9f\x86\xb4\x0e\xf4\xa95\xcd\f\xbf\xc7.\x1f\xbb-\xee\xbf\x06%?\xf0\x95\xa9\x1a|k<\x1e\x86\x11&\xd4\xac\x9cc\x02\xe3\xe7\xc7>\x96\x01\x0eK$(\xb8\xcc`\xe8\x88%5\xa3,F\xe2ZD\xbf\x9c\xd7\xf2ia_\x87\xba\xb3m\x8a\x87#I\xc4\x177"\x13y\x91\xae\xd1h\xf3<\xcd\xaf\x1e$+|\xae"\xa1\xbaP%Z\xc3\x94\x98-5\x85\x8b\xe4\xb3HY\xe5B}\xc1\b\xa3"\xbc\xea]u\xdc<v\xa1\x01#\rl\xfaS\xfe\x8c&I\xca\xf7-Dey\x9e+%F\x8c\x9f\xb9\xe2\x8ac\xf4\xdc\xe7>\xe7\xbd\xfa/CC\x13\x97\xc6\x93\x1a\xff\xe2\x15\xaf\xf8\xf7\xfb\xf6\xee\x95YXP]\xb0\xa0\x8b\xaa\x01)1yMxAL\xabJ\x16\xbe\xc7\x16\xc3\xdd\x92!\x06Ib\xa1\x8c\x13X\xe6se\xde\xb8\x986N\xbb\xf6l&\xae\xb2\x982\xd1\xec\xa3\xf6\xd2\xf7P\x18\xd6\xaal\xc8\x0bp\x91E\xac<\x02\xea,.P\xbb\xeb\x90\x17\xba\x94\x15-\xd9\x1fr\xfd6\xab\xad\x19&)[\x8c\x15h\x90.*(\x9e@l\xecPF\xb0\xf0\x83$\xf0o\xc2\xcdf\x82\xaa0\x1e\xa5\x16\xa2\xa9\xa9-\x16\xf5\xb2v\xa5|\x06\x05h8s\xcc*{\x98\f\x99`l~-c\x8e\xef\x13\xf0s\xf7\x14Q\xd56\xe5|\f\xc4\xa4(#?P\xa63A|\x81\xd8\xe5\xab"\x11g\x1eH\x02\xc7\x84ra]l\x91\x81\xb2g]*\xb7^3eeU\xb0\x92*%\x9b\x90\f8!wX\x89m3iO\xa4\xd4\x87\x9f\x17LtK\x87\x0e0qZ\xfc\xfd)\x0b#\x83\xca<\x96\xe4\x8c\xf1\xf6\x16\xcd\xad\xceS\x7f\xcfw\xf1\xb9;,\xcd\xcc0\x92(3\x85\x98\xed\xd5\x05\x02\xa8\x9fU.\xe6\x97U\x952\\\\\x9c\xddu\xd1a(\xceH\xfe\xfe\xa4\xa8()\xe1\xcc\xacDAW\x12\xa9U\xcag\x88\xa8\xaf\xef\xfb\xbe\xef\xfb\xa0\xef\xfb\xb1\xfe\xab\xd0\xd0\xc4\xa5\xf1\xa4\xc6\xea\xea\x9e{\x7f\xf8\x87_\xff\xb18Iv\t\xa9zl\xbe\x93\xecv\xf1\x958\xe2\x9c\x8a\xaaz\xac\xf4\xf4\xc4d\fl\xfaCm)\x83\x86!\xb3\xbcT\x1d\rN\xb7ZJ\x84`"o\xe65\xd4[9Jn`\x89I\xa0(\f!\x8e\xb0\x1dR\xab\x15H\x10l\x96\xda4\x1d\xf1\xe2\x1a\xe5\x14MR\x99\x88\fC\x06fx\x99\xd6\x94\xd5A,=HU\xdd\x15E\x85\x99V\xa6\x99\x8b\x1b\xaf\xb1\xe7\xf9/\xa4\xcd*\x8b\x15\x17u\x84\x90\x1aqW\x94\xfc\xd8L\x92$`r\xcc\xf3\x94\t$\x96\b\xa9\x8a\x96EQa\x7f)O\x86\xac\\"\xd9\xd3Re8&6\xcbS\xfbf\x94\xc8{!+\x10\x87_\x99\xef0G\xad\xf3}&bf\x11=Zo2\x81l\xf1\x05\xc0\x8e\x10Z\xdd@-\xb2J2#~\xddT\x1c\x96(!\x96\xe9X\xe2\x9cr\x90=+Z\xaf\xd5\xa6\x95\xcb\x0e\xf3\xf7Y\xb1f\x13i\x1b\0\xa9g\xac\xcc\xb28\xa5\xe5#\x97\x93\xd7}\x99\x1c\x0f\xfa\xdep!@\xffM\x93\xb0j4NS\xccG+w\xf7 \x1f\xbf\x89\x02\xc3\xc5\x05\x13S\x02\xf5\x87\x92"\x7f\x1e\x8f\xab\xb3\x86\xf0\xd9_{\xed3\xe9\xf5\xaf\xffWo\xd2\x7f\x11\x1a\x9a\xb84\x9e\x12x\xc3\x1b~\xf8\x8dW\x1d?\xfe\xd8\xb4be\xa9n$o\xd0b\x12\xeb\xc0\x9cA\xca\xbc\xd1<\xb6h\xaa\x05>\xc9j^l\x1b)\r\x1a\x92\xafw\xb1\xb7\xa8\x924\t$_\xd8\xed\x9b\xa8\xb5\xf0"\xea\xce9\x14O\x06\x12/\x84\xc5\xd4r;\x14t;L^-\xb1\xaf\xc7\x93-\xca\xa6C\x1a\\\x18P:\x19J\xff\x13\xc2h\x83\xde\n\xd9~(*\t}\xceH\xdb\x80\x12s}VtN\x9f*c\x96\x17\xe3L\xf6\x82d\x9c=\xc1\x059\xe6\xff\xde\x90)\xc2\xa2T\f\x97\x1f\x88w\xe1\x88b1\x8d\x84\x9f\x0bV\xf7\x86\xfc\xd0a\xa5\x99\xf1\x8d\xef[\xaf\xab\xe7j\f!1\f^\x14\x97!\b\x94<r[\xab|;,\xff.\xf3\x11\xab-\x10\x18\xbf\xae3\xc3\xc7\x87\xa6\xe3\x88\xffR\x99\xb0,\x90\x88\xcb\xaa\x92\x1f[XLBL\xd8q\xa3z\xb9\xac\\\x9a\x82\xb34\xa6\xe1\xc6&\xb5\xfa\xb3\xb4|\xe8 \xdf\x0f\xa7\xcf\x93\xfd0\x94\x06\x87\x1b[\xd4\xea\xb5\xa8\xbd\xf0Lr\xba\xdf-3\xb8`\xd5\'C\x99_\x9a\xdddwc7\x8c\x17\xca\xb7\xac\x9eHZ\xd5c7\x8f\xef\xda\xb1`\xb8\xc9e\b\xa8A\xf5c{a\xb8\xfd\xcc\xcf\xfc\xf4\xaf\x04A0\xd1\x7f\r\x1a\xdfhXo{\xdb\xdb\xf4Y\xd0\xf8\x86\xc3\xf7\xfdh\xdf\xfe};\x7f\xf9\x97\x1f~\xa9\x9a\xffdHc,\x16\xbc\x9c\x95\x02\xfe\x1b{`O\b\x1a\x92\xc5.\xe1\xab\xfcI\\Qs\xb1\xd7\x95v\xb3\b\xb1\xefc\xe4\xbc\xb0\x8f\xc9\x0eo$\x7f\xfe\x8d\xb4p`\x1f?GLy6eu1b5\x12P\x7fq\x85zs\xab\xe4\x04\x1d\x1amNi\xb45\xa2h\x87\x17\xedj\xc4\x84e\xf3"\x0f\xb7\x1cI\xdf\x96!\xbdZ\xea\x98\x1a\xc9\xebC\x03\xb0\xbf\xdbc\x96\xf0MY\xbc\xa5W\xab>\xcb$\xb0!)\x19d\xb6XA\x06\xbcL\x87\xd28,\xceA\x1c\xa5\xd1Se\xcdr &\x0b\xdb\x9d%38\xcc\x84\xb3 =]\xb0\xd3\xcbk\x98\xb5\x84\x02\x1b \xa7j\xc8\xca\t*\xcb\xe7\xef/\xa3\x9b\xea\xe2N\x93"k~-\xec\x83\x89\xa7\x03m\0H\xa4\x10s\x87\xb9[\xba\xcb\xe4\xf8-\xa7\x96\xb1/ui\xd3d\x98\x89\x93s\xdf\x95\x87\x99\xdc\x12&\xee\xb1\x94\x1a\xa1\xb8,\xa7Gn\x18\xd0\xdc\xca2_\x1c\xf4Y\xa1\xe5Te\x0f)\xd5eZ\x8f\x91\x96\x1c\x83\xd8\xd9U\x89P\x1a\xa0\xcd\xc7{\xeb\xb0\x1f\x87\xcf1\xca\n\xb9\0\xe9\xf8\x0ey\xb0\xed\xf3c\xa3\xe9\x84\x95\xd6\xebO\xff\xe4O\xde\xfc*\xfd\x97\xa0\xa1\x89K\xe3)\x85\xc3\x87\x0e}\x81\x95\xc5s?\xfd\xa9O\x1d\x91\x04v^\xd4\x1c\x186\xf8k\x86\x11\xf12s\x8b\x84\xc4P5\x84\x13q\xc2\x0biY\x1a\xaa\'V\xf6\xb6*1b \xed\\\x94V\xf8\x1d\x14\xcc\xbf\x89\xba\x0b{\xa87o\x8b\r\xbcLsI\xcb\b;34\xbbt\x88\xc2\xee\x1c\x8d\xb6\x0b\xda>\xb7N\x93\x9d\x1d\xb1\x83;\x1e\xab!\xb7\x90=\xa5\x9c\xef_\xf0k\xd7\xa5\n\xab\x95\xc4\xf9\x92U^2\xe4c\xda\xe1c\x81\xf1\xc1R\xa1\xbf\xcd&\x1fv\xcajl\x96lg\x0f\x99\xeeQ\xfey\x8f\x17\xf4L\x1a\x96A>\xe8\xf72\xadF\x14\x978\xf6\xd1\xf8k1!2I\xd5e\xc4\xb7\xc9.\xf1&\xd2#\x86F\xe3\xba\x1c\xcb\xf0G\x83\xe06\x9c\x88\xb3\xd0\x90\xf0\\\x97I\xc1SM\xc8B\x1a\xa4\xe2\xae\x1a\xb8\x1d=Qs\x86\xf9\xf8x\x11\x1cC\xd3\xe4B\xb00\xa6d\x91*A"Y\xc4oy\xd4\x83Qc\x8c\xfd\xb1\x84\x92I%{\x88\x9e\xef1\xc1wY]\x864\x19t\xe5y\xab\xfc\xb4\xbc\x17\xb1\xf37\xbb\xf3\xb4\f\xb5\xbf(\xb1Q8O\xbbce\xe0\x8c\x8cq\x0e\xf9\xb9\\\xfe<;\x81+\xa6\f\xd0\x1a\xca\xa6\xd7<\xf3\xdb\xe8\x9d\xef\xfc\xadc\xbe\xefE\xfa\xaf@\xe3\x9b\x01\xdd\xc7\xa5\xf1M\xc5\xcf\xfd\xdc\xcf\xbe\xe4\xdc\xf9\x0b\xe7>\xf0\xfe\xf7\xee\xf1Y\x05aQ\x0f=\x87|\xd7\x16\xa2\x9aNSB\x16,\xf6\xa4.\xe6\x13f\xb9\xea\xfd\x92Fd(\x13q\xd0\xf9\xe4t_MN\xfb&j/\x1cd5q\x90\x95\xd4\xc3\xb2\xb8\xa3\xbc\x06\xfbzonYFpl\x9d\x1f\xd2ps\x93\xc6[\x17\xc8`\xf5d\x05\xb5\x18=\xa0\x12\\D\xa2\x0b\xb1`\xf8d-\x16\xf3x|\x81\x8a\xf8\xbc\xeco\x19V[\xcc\x16\x92\x97\xc8\xc7b\xda\xfb\x99(\\qG\x9a\x96/)\x14  $\xcb\xa3\xac\xd6\xa0=\t}Y\xd2H\xcd$RT\xd2\xdb\x85\xe4\n\x180,3\xe5\xd7\xb7U\x033\xb2&\x1c\x10\x03\x9a\xa7Y\xb5\xd5\xe1\xae\r\x7f(\r\xd9\x85$\xd7\xabYV\xb8o%\xae\xf3T\xed\x8f\x815jWz\xafLc\xca?P\xb6s\xd5\xd7\xa6\x1a\xb5\xb3$\xdem\xcc\x8e\x99\xc0\nZ{\xa4\xa0\xd9\xc5yZ<\xb8J\xf6Z\x87\x8f\xe1\f\x95EJ\xe3\xedu&\xfa\t\xcd\xae\x1e\xa5\xd5c\x97\xd3\xd9\xfb\xf9\x9d8\x8b\x94O\xff\x91\xdf\xd79\x95\xf8\xd1x\xcam\xd8(\xa5\x85h(\x98V`\xb8\xc0\xbeW\x10x\xd4\x86\x13\xd34\x1f\x0b@\x06a&E\x8b\x8e^\xfd\x83\x93^\xaf\xbb\xae\x7f\xfb54qi<e\xf1\xbc\x9b~\xe6\xf7\xdf\xff\xe1so7\xaaO\xf1"\xe8+\x07\x1b/\x88\xe8\xf5\xe9tB&\xaf\x98\xc6\xac\n|\xdf\x15\x8b\xb9j\\FRF"\x8f7\x9c\xcb\xc8\xed~\x17y\x9dgS\xab\xbfD\xb3+}\xca\x93-q\xd3\xe5i$*\xa4\xdd\xefQ8;O\xd3\x11+\xad\xf3\x03^\xa0\x87Rn\x84\x80(\x8a\x1d\xa4\xfa\xc9\xb8\x93<G\xe8,\xab\xa1lB\xd9h\x87\x95\b\x93V\xc2\xaa\xcc\b\xc8r\xe7e<\nfR\xd5\x8d%i\x10\xd4\xa4L\x14 \x94P\rbde\x84\xf6\xaa\x06qKb\x16\x81\x1a\xca\xa4\x8cY\xe4\xb6\xa8\x144\t7\x921\b9\xe9\x8b\xe5\xdcq\xe1\xd0\x83+Q\xed\x8d\xd9f\x8bI\xad\x90,\xc3\x06\x0eET$\x91/\bga\xa5T\x9b\xc3j\xac\xc4\xfe\x9e\xa8?{w?\x90\x89\xb7\xee\xf0\xcb$\xcc\x97\x95\x10\x95\xb8\xd3A\x86h\xf2\xe6\xe7\x86I\x05\xfbQ\xe3\xedm*\x98\xb0W\x8e\x1e\xa5\x99=\xab\x94\xc6\x13\x1am\x9e\xa3l:\x92\xdcE\xb75\xa0\xd5\xcb/\xe3\xe3\xaei\xed\xd1\x86|o\x86\xca\xf8\xabT\xa7_a\x92C\xb9\x13\xcd\xd3\x0e\xfa\xb3e\xdc\tB\x8c\xf1\xefN\xcb\x97I\xd4\x17\x87z\x8a\x13\x93\xdf@\x92:4J\xae\xa1\xa0\xbd\xa2\xf7\xb544qi<\xb5\x11\x86\x9d\x811\xfb\x06*\xa6\x0e5\xe3\x7f \xcfCH\xac\n\x9bE*|\xa7\xd3\xa2(\xcah8\xca\xd4\xb6\x16\x02o\x91\xaf\xc1\x84e\x07W\xb1\xd2\xba\x9a\x9c\xd6!\xf2\xc3YZ9t\x80\x92\xf1y\x1alnH\x19\x0e1I\xa6\x15R8\xb3@\xa3AC\xdbg#\xaas\xec{e\xac*\x12VD\x85\xa82\xb1\xb2\xd7\x11\x85=\x90\x80G\xd9d\xac\xaaaf\x9bU\x1a&$\xbb\xca\xbdh\x92\x18\r@X\xb6\x0fcD\x1b\x11\x1c|\x835\xbf\x90\xbd(\x19\xc8H\x85\xec\xfb`\xff\xc7\x94\xbd;Wz\xafL\xa8\x1f\xd9\x0b\x82:\n\xa5_\x8c$5#SD\x8aH$\xa3\x92lB\x83\x8f\xc94\xc0X\bD\x84%\xdf#\xd7J\xa59;K\x1aI\xcc &\x18\xa4\x8e@\xcd\x19\x06\xb2\x19#\xaaL\x04\xd7b\xeeV!\x8f\xaf.:\xfejG\x1c\x8f2cK\x127,J\xe2\x8aN\xde{\x9e\xf6\x1c;J\xcbG\x0e27\xee\xd0t0\xa1\xc9\x0eH\xf3\x8c\xb8\x12\x17\xf7\xed\x95l\xc7\x8d3\xae\xec\x81U\xdeeT\xa6\x0f0\xb9\xdf\xa7\b\x8c\x8f \x8a\xd4\xcc\xaev\xdb\x17%V\xed\xbeo\x92}\xc9\x84\xe2\xb4E\xa5q\x05\x99\xee*\xcd\xcd\xb5N\xeb\xdfz\rM\\\x1aOi\xf4\xbbt\xde\xb1YM\xf9/\xa6\xe90\xa5z\xeb6V\x1ccY`\xb1_"#6*5\xc9\xd80;\xb2\x8fd\xb9W\xf2Z~\x8c,o\x8eo=ju\x97\xa97\xb7 \xc9\x18\xc9\xf0\x1c/\xb8\x99\\\xfd{\x9eGAwQ\xfa\xa4\xb6No\xb2\xd2Bcm*#;\xe06G\xbf\x16\xca\x7f\b\xa9u<\xa4\xd6\xb7Xq$LVm*\xd1$\xcd*\xacf\x12\xa9\x8a->\x9cT\x14\x8b\xc1\x0ft\xacZ\x8c\x18\x98\x7fe\xb1\x9aB\xe2\x87i{*w\xb1Q\x89\xeeP#(\x11\x96\x89*\x97\xa1\xa1\x19C\x161v\x04\x04\x85\x18\'8\x1d+>\x16\x94\x02\x1d\xd7\x90Fe\x9b\xefW\xa5|\x1e*S\x14\x934#\x17\xa5\x10c%9\x8e\x99\x04\xeab\xa4J\xd3\xb4\xf9\xdf\xb5\xb8&Q\xeaD\xb6cS\x0f\xa5e\0\x01\xbbx\xacj"V\x8eCCT\x17\x94R-\xf3\xb7\xb0WW0\x91\x9f\xbb\xefA\xda{l\x9e\x96\x0e\x1ea\xc2\x7f\x98\xd5\xd8\x98/\0\xc6R\x86\x84\xa2\x9b_]\x95\x11)\xa7\xef\xff\x1a\x9f\xef%1\x96\x94\xc9Q&\xff\xf3|.O\xf3\xebl\b\xf1\x0fG\x91\xeas3U\xbb2\x92\xf9Mw\x1f\x7fVG(\bW\xa8\xb4\xe6h\xdf\x9e\xfe\xdd\xfa\xb7^C\x13\x97\xc6S\x1a+\x0b\xde\xfd33\x18\xce\xd8\xa7\xee\xca\x0bx\xc1\\\xa2x\xf0u\xb9\xfa\x17\xb7\x9ao\x93c`\x82\xf1\x02\xdf\x0e\xf2\xaa\xb8@N\xd8\x91\x99S\xb0\xb4\x07\xdd9\xea-\xb2\x12HF\x94\x8e\xd7(\x1aO\xc4\x8c\x10\xb4\xbb\xe4\xe1\xd6\xea\xb2\xd2\x1a\x8bJA\xc9\x0e\x83\r\rr\x98@<\x15\xa7\x84}\x1f\x94\xfb\x98<\x92\xd1\x16\xe5\xf1y\xb1\xb9\xe3\xf5\xe0\x0eDOW\rr\x82\xca\x83\xed\xbc\x8eI\xb1\x1e+\x1d\xbb$7@.\xa0$\xf9\xc9\xa2\x8d\xff\xc6\xfe\x93\xe9\xba\xe4\xf8\xfec\x04$\x16\xf7<g2\x0b\x84\x84%LX\x9c\x89\x0e\x93W.\xc9\xf0b\xac(\x0b\xb9/"\xa7,f\x8bd4\xa0J\xec\xe7\xcaJ\x9f\x8b\xf3_\xcd\xc1\x82Q\x04-\x01&\x13\xae)\xe9\x1b\xb0\xef\x07\xfc|\xdb\xac,\xf9=0\xc1\x182\xc6D\x9d\xeb\x06%\xcd\n\x86\x8fm~\\\x97\tl\x8f\xbc\x0ef\x97m\x9c\x1e\xb1\xbaj\xd3\xdc\xea^\xbePX\xa3t\x12\xf3g1a\xd5\x86\xc0\xe1\x98\\>\xdf\xcb\xach\xa3\xd1PJ\x8c\xad\x99\x15*\x92#\x94N\x07\xd2\xe8l\x98\xd8K\xcc(O\xc6\xd2\xffe\x9a>\xbf\xffY\xfe\xac\xe6\xf9\xa2\xa0+7\xc3\x99\xa5\xa3\x07{\xb7\xe9\xdfz\rM\\\x1aOi,/8\xf7\xef\xdd\xe3\xd2`\xd2"\xd7\xde\xc7\x0b\xdd,\x05\xfd\xebx\x01\x86\x92PYx\x05\xaf\xd6\x9e\xd7\x910Y\x98\x1a\xdc\x96+W\xf3\x96\xeb\x90\x1f\x04\x94\x8d\xb7\xa9\xcaF\xbc`g\xbc@:\xb2\xd7\xe33\xa1u\xe6Wh\xe7BL\xf1\xb4V\x93{\xf3)/\xfaL\x10\xb6\x9ap\f\xa7\x1e\xb2\x04\t&\n$e\xc4kTd\t\xab\x8aYI\xc3\xa8\xd03\x05W\xa0\xedJT\x14\xdc\x82\xa6\xc3D\xe1\xb9b\x1bw|\x8f\xfc0\x14\xf2\x83\xe21\x1dO\xc8F\xf6\x96TT:\xbf\x1fG\x88\n\xc1\xb92\x1e\xa5*\xe4\xfe\x12\xe5$eJ5\xa2\xa4\xcaXe\xa1Y\x17\r\xcf\xac\x820%\x18y\x7fN\x80\x99Z8\xfe\x8e\xb8\x1e\x1bV[\x84<G\x87UcZ\xf0\xf1N\xf8}1\x19[\x1d!3\xa4\xe9\xdbL\x18B\x86\x18\xcd\xd2x\xa2\x80\xeaz\xaa\xd2\xeeY\xf5\x11\xdc\x8c\xc5\x8eL*&kY\bg:,$Y\xe4\xd0\xd5G%\xdej\xeb\xcci&\xa8\x8c\xb2x\xc0\xc7\xce\xe7\x89\xd5`\xa7\xd7\xa5v\xbfOk\'\xcf\x93\x17\xf8\xd2\xc4\x1dt\xe6\xa8\xccV(\x99n\xf2EDK\xf6\xb4\x92\xd1H\x05\x04\xb3z\xc4\xa0P\x9b\xefg\xf2\xe777\xdb\xa3\x83\xfb\xbaz\x84\x89\x86&.\x8d\xa76,\xd3\xa8\xae\xba\xcc\x7f\xf4\x9e\xfb\xddC\xd8K\xa9\x9a\x80\xbc\xb0bBi\xc8\xef\xf8\xa2\x13,\x19b\xd8\x96\xbe"\xac\xc2\x96kJ?\x15\x1av\xb3\xc9\x96X\xe1\x110\x0b\xeb\x83\x17\xf4\xf9\xd6#\xbf\xb7B\xd3i\xc9\n,S\x89\re.d\0% #6l\xe5\xee3h*e\xbb<f\x82\xcc,\xe9\xab*\xd3\x89\xa4R\x18\xb0\xb1\xdb}5\xac\x11cF\x98\x98\x1c\x1c\x0b\x93\x95\xdb\xea\xf0q\xfa\xa2H\x9c\xa0\x05\x9b\xa1\xfc\x1c\xbdXU\x93\xc8\xbe\x10\xca\x87(-"\xec\x16\x99\x80\xb6\xaf\xe6{I\xb9\xaeB\xae\xa0\xcaX\x94\xa4\x8d\xb2\xbb;(\xb3\xe2cQ{We\xcaD\xeb\xa4\xd40\t\xa1DXg&y=\xec\x05\x8e\xf8\xa79Y\r\xa2\xa5Z\xa2\xc6\xeaB\xe5\x13f\x19\x93\x07\x86O\xb2\nC_\x17\xe6\xa5\xa07\r\xd6xB\b\xb0\x1d\xb2\xf2Y&\xca\x1e\xe5\x9f\xb32\xab\xe6\xe4s\x80\x9a\xcb\xa2\x86\x06\x9b;\xb4t\xe0\0\x93\x92\xc5\xa4\xff(\r\xd7#&%\xec/\x8e\xf9\xf1\x03QZA\xbb-\x91Q>+_\x87\x89\x9cX\xd5\x1a0a\xf0\xf9\x9a_\xddO\xdb\xcdyJ\xa2\xa9\x10\xb5\xedy|\x9e\xba\x94\xf3\x85\xc0\x95\x97\xcd\xf2\x85JxB\xff\xd6kh\xe2\xd2x\xca\xe3\xb9\xd7u\xfe\xf8\x03\x1f\xdd|+\x02n1\x18\xb1i\x94J\xc9ce\x117\x84\xd0jq\xaf\x19f\xa9\x9a\x82eR0\x13\x0fF\x81 \x99\x81\x95\x84\xed\x05\xd4\x99\x9da\xb55O\x9b\xe7\xc74\x1eLy\xad\x8e\xd4\xbe\x12,\x84VW\xcaZ\x96\x89\x9c\xbfD\x8d@\xb1\x03~\x9d\x01\xab\xbaJ\x1a\x8b%\x97\x90\xc9\xc2\xed.Hr\x84\xd8\xcfax0\xa1\xe2z\xac\x06g\xf9\x98Xm\xb4=\xd9SB\xc6\xa1\xcfJ\x03{U(]b\xba\xb1a\x06b\xad/\x128<rr\xb1\x97f\x16\xd2\x04\x8d\x19]\xaa\x87\xb8 \xec:a\x0f\xc94<Vl\xb0#F\xb2\xef\xe5\xe6\xa6\x8c\x01\xa9\xab\x19>\xdeD\x12\xdf\r3c\xa2c\x02\xcbY\x85\xf9]\x8aw\xb6\xc9\x98NE-\xd6\x85)\x04\x013\x84d\b\x82\xc4\xd2\xa1\x90\xa8a\xcd\x89}\x03\xc9\x1b\x12UU\x8dX\\\x82h\xf7\xb0\x8a\xf2\x84\xdc\xaa\xd2TnJ&\xcd\xcds\xeb\x94\x8c\xa7\xb4\xe7\xd0>\xdas\xe4\n~\xfb\xe7$q\x03J\x14\xc6\x98\xb2Zg\x05\xe5\xc9|2\xec\xb9\xc1\x83\x91\'\x19\x85\xddY>\x87)\xa5Q&\xad\x01\xb6\x8dYh\xac\xa2Y\x99\xc1i\x89\xcf\xe89\xd7-\xfe\x95\xfem\xd7\xf8f\xc3x\xe2xt\r\x8do\x16\xd66\xd3\xa3/\xfb\x89\xbb\x1f\x1aML\xb1\xa6\x17I"\x8d\xc6j\x9cF)\xb6u\xc7\ty\xd1\xcc\xd5\x8c\'\x98\f0\x1a^\xf6\xacT\x92\x06\xe2\x9c\xfc\xb0M\xdd\x859\x1a\xee$\xb4\xbd> \x15\x80^\x89!\x83v-\xe5h\b\xb6\xdd\x1d\xb2\xacr\x97\xfc\xf0\xf85\x89f"&\x1c(\x07\'\x80\xf2\xc2~\x14\x91\xdb\xee\x8a\xd1!\x14K\xfd\x8c\xf4\x8c\x11\x13\xa9\xd7fu\xd7j\x89*,\x0bK\xd4\x8e2\x90\xa8h$U\x0e\xac\xd4\xf8\x0e\xbb\x92\xfd0$\xc1Sm\xca\xf3\xe2M\x95\xb9\xcb\x0bz\xa5\x8c\f|,\xd9\x84\xdf\x93\x83\xc4\x0e\x15a%\xeeJ\f\x86\xccc\xbe/\xdeLIE\xcc\x04\xce\xe7\'\x8f\xc6\x14mo\x0b\xd1\xe5\xc9\x80\xff{(\xca\f\xc7\x82\x01\x91\r\x93:\xd5S>\x8e\x1e\x99\xee\xbc\xa4\x80\x88\xa3\xd0\x88\x99\xb8\xba\xf2>j\x19\xd3bJ\x1e"\x8c%\x06\x18\x06GoAD\xcd\xd3\xe1\xe3\xc7X\xc9\xd6\xb4u\xf6\f\xc5\xd3H\x9a\xa1An\xae\x07\x12\xec\x89y\x06{uE\x9cR\xd0\xe9IyPR\xec\xe1\x8ci\n!S\xdb5d\x96\x98\xe3\x18\xf4\xe1w\x7f\xf7\xfft\xf9\xe1\x19\xbd\xc7\xa5\xa1\x15\x97\xc6S\x1f\xcb\x0b\xfe\x89\x1b\xae\x0e\xe3[?9\fC\x94\xdbvg5\xa1\x14(\xb1J(\xab!\xf5\\F\xc4Wb\x8eP\xd6\xf1R\xf2\0e\xb4<\x13\x9b\xd7\x9a\xa5hj\xd3t\x07\t\x14\xca\x96\x0e\xb2\x90\x90\x07\xc9\x89\x82;oM\xec\xecD\x01\xf3\x18\xc8kS\b\x86\xac\x9e*\x99\xb1\x82\xa9\x98\xe8P\x12\xec\xac\x1c\xa0`f\x91l\x7f\x86\xdc\x96\xa7\xf6\xbax\xb1v\x02STG\xd30\xf9TLZ\xd8\x07\x83\x1b\x10\x93\x93Q\xfe\x84\xc2(0\xd6\xc3\x15\xe7b\xc1\xe4\xe8\x86\xa6\x10nU\x84|\xf8%/\xeaH\xb1\xf7\xd4B\x9f\xe7B\x1cN\x1bM\xbb\x1e+,\xe5"tZ\x15\x93\xaf)\xe5@[TL\xcdDY\xd0d\x93_\x9b\xff;t\xba\x12\x96k\xa5-&\'\x9f\xb2\xd1&\x19\xe5\x98\xcf\x05\xff\xdcf\x92\xcd[b\xc6\x10\x02\xb3B~m\xcc?\xb1$O\x11\xfb\x80\xa6\xb9\xa8H\xa6\xcew\'\x18\xab4\f\xdc\xa6;\x03Z?3\xa0\xe5\x03\x0b\xd4\x9b_\xe2\xcfb\x83U\xd7\xee9\x94yi\x854K\xa3Li\xc3=Y\x94\xbbcW\f)\x99B\xe1Z\xe8c\xe3\xfb&\xac\x14\x9fu|\x814iih\xe2\xd2\xb8\xa4\xf0\xb2\xe7/\xfe\xda\xad\x9fX\x7f\x07z\xa6\x90\x92n\xc1Z\x0e\x83\x02\xfa\xb9\x10\x19\xc4\x0b\xa1\n}U\xc3\x1aa\xach$\x0b\xd0\x16\x87\xa0aw)\x8d+\x9a\x8ec\x8a\xb7\x07J\x99a\xff\xc5TM\xcb\b\xa6\xb5<\xb5\xcf\xd3PG\xe6V\x99v\xce\x94\xd7\x12U\x03\x12t\x02\x97\xac  ;\xe8R0\xb7J~\x9fU\\\x7f\x86\xfc\x9e\xca*4\x1dX\xe7K\t\xb1\xcd3\xecM\xc5\xd2\x88\x8b\x99]\xb5\xe1\xb0:c\n\xccb&-\x17\x86w&=\x94\xe1,)\x07:-4#\x87B\x1c8~\xf4\x909-\x10*\xdf\xd7\x07A9LXH\xef\xc8\x98\x9cL\xca\xe3P\xb8\xd6\xb4j\xa60\xec\xe19\xfc\xdc69~B\x98I\xc9\xccJv\xe8R2\xc4\xf9X\x96\x94z8\xf8\xf2\xc9\x0e\xdf6\xc5\xe8Q\xa1\xff\xac\xb4d?\xd0d\x05i\xf9h\xaeV\xa1\xfb\x861\xe1\xef\xb1\xc24gT\xc4\x14\xb5I\xcd5c\xcaL\xf9gML\x1b\xa7N1\xb9\x0f\xa8\xdd\x9f\x95t\x90R\xbc\xee\x0e\x93V\xa6l\xff\x98A\x06r\x82\xc9C\x1e-\xd3@%\xa6\x0b\xfdl\xd8\xdf\x83r,Y\x95\xbd\xec\x85\x87\xdf\xa3\x7f\xcb5t\xa9P\xe3\x92\xc2xZ\xcc\x7f\xf7\x9bn\xdb<{\x9e\xd7d+\x90\x12Z\xdd\xd0n\xea\xb8J\xc9\x90\xf9\x86\xd5D\x9c}2EWJ_\x16\xb9\xc1\xb2,\xece\x1aS\x86!\x8722\x85\x15O\xe5)\x0b\xbb\x81\xfb#\xadb\x83\x17\xe2H\x14\x8e\xe9\xb2rp\f\xe9\x81\xc2\x98{\xbf\x13\x92\xdd\xe9\x91\xdd\xc64\xe4\x1e\xb9\x9d\x19&\xb0\x90,\xb7\xe6\x85\xdbaR\xf3dh#r\f\x8bL%\xd5[.\x13A\x81\x92\x1f\xd3-s\x92\xdfK\xa9\x88\x1c\xd9\xef\x8a\'6\x85\xb3\xac\xdcBVV\xacT@@\xe8\x17+cC\x16~\'d\x85\x96\xab\xd4y\xb8\x0b\xa3\r["\xa1\xdcV)\xa5M\xcc\xba*b\x18\x1b\xf07\x98K\xdfV6M\xf9\xfd\xc0\x82\x9fQ\x91\x98b;/\xd2JTO>\xa9\xc5Y\t\x13\x07\xf6\xc4\xaadL\xe9\xce\xb6$aTU.\xaeE\xcb\xebKcs\x9d\x97*\xd8\x17\xc7\xc4\x84_\x16\xae\xb8\x0f\xf1\xd8\xc6\x9a\x115\xab\xe2\xe0Mr=\x93\xbc6\xc2w\x99(\x99\xe8\x8b"\xdb\x1d\xf4iHiP\xf6#\xd1\xdf\x86\xd2-\x88P\x15Lw\xf3\x17\x994\xf9\xfb\x9d\x8eA\x7f\xf3G\xdfs\xd5\xear\xfb^\xfd\x9b\xae\xa1\x15\x97\xc6%\x83n\xdb\xd9z\xd5\x8bW>\xfe\x1b\xbf\x7f\xe2\xc5vpq\x9c\x89%\xa5B\xf4U\x952!\xb8\x14\xe7\x1d\xec\xda\b\x7fUW\xfa\x15\x8a\x86\x94\xa7\x95\xa8\f4\f3+\xb0\xd2\xc8\xc8(G\xfc\x14\xc8#tE]\x15\xf1X\x95\xfaZ\x88\x10ty\xe1\xc5|*\x9b\xda\x0b\xf3\xd4^9H\x86\xd7fU\x12\x92\xe1\x9b\xfc\xac=2f-\xb1w\xdbm\x8bZ\xbd\x0ee\x11\x13T\xc7\'\x16d\x92\x801\xddV=RnP\xaa\xc4\x88\xd4\xa2\xce\x02\x16k\xc6:1q\xd9\xe4w\x15A\x91\x9d\x10&\xd7W\x99#\x86\x10\x94<\xe3\x01\xdc\x8e\x0e\xff\xa1U\xfcZ\xb6\xf4\x81U\xf9\x94\xb2I#\xa3T\xbc\xa5Z\x1a\xa1\xf3i@\x8eSS8\x83\xe0`&\xa9\xd4VM\xca(\xcd!\xdf\xd0\xe5\xc7\xa2\x81y8K\xb69\xe2\xf7\x87\xe1\x98]i\xce\xb6\x06\x17\xf8\xf9\xd6\x99\xfa`\xfd\x9f2\xe9\xf7\xe4|Tp4J)\x96\xc9\x90\xb6\xa4A\x19C-\xb1gf\xba3,\xbcl\t\xed\xc0>V4\x89\xa8`\x82\xef\xcf\xbar\xf1\0\x95[\xcb\x94i\x94CKLIS\xfb\x8cpN\xc2Mi\x19R\xee\xc5\xfb\x89\xe3\x94^y\xd3\xe5\xeb\x9a\xb444qi\\\x92x\xd5K\xf6\xfe\xd2{\xfe\xf4\xc4\x8b\xa7\xd1T\x06\x96\xd42G\xabQC#\xcbF\x05\xb6"\xd4\x96I\xc72\xed]7\x1c\xab\xa0\\\x19\x02\xf2\xc4R\xbdNf%\x89\xf1\x8d\x1d\xc3G!\x96\xf7">#e=+\xe8\xf1\xa2\xcc\x8b~\x1d\x93?\xe3Qgi?\x85\x8b\xfbX-\xb5\xc8\xf4<\xaa\xfbm\xaa\xbap\xcd9\x14\xf6\x99\x1cw05\x11j\x86\xd5G`Pw\xd9\x80\xa3\x9c\xe0\x95@\x15\xd2v\xb1\xe7\xa52\x01\xe3M\xbeO\x9b\x95\xd7l#\xedRM\r\xc5\xc2\x0b\xb8\xc7\xdc\xd2\xe9\xb0\xbab%6T\xea\x0b\x0eD\xc4$\x151\xaa~\x16\x7fm\xe4\xb1%\x13p\xbc\xcd\xa4i\xb3\xe2J\x13~O\xa64;\xa3\xa9\xd9\xb1qV|~\xedX\x9c\xed\b\xe7%\'#\xab\xc3\xca\xb2o\x905\xe7Ii\xb0\xda\x88\xc9\x8c*\xf2f\xdb|\x1c\xfb\xf9y[\x14\xef\x9c\xa3t\x82\x99aH\0\xe1\xfb\xfb|QP\xa8~2\xc4V\x19\xf9\x06YvO\xda\r\x90\xafX\xcb8\x16\x15\0\x8c6\x82<J(\x05\xe1\x15\xfc\xfe\xddJJ\xa7\xb8\x90\xc0\x10P\x15E_\xc8\x9e\x1f\b\x1d\xc9\x1c(\xe3V\r2\x0e\r\xfa\x81\x7fq\xec\xa7\xf5o\xb7\x86&.\x8dK\x12\x07W\xdbw\xff\xcb\xefZ9\xf1\xee\x0f<x\xb4\x8d\x05\x7f7g\x0f\xa5\'\x0b\xe3Ex\xd1F\xd2\xbb%\xfdQL2\x85-}TE\x9c\x8bY\0\xca\xa6\xc6\xac\xe2\x06Y\x83\x1b\xac\xb2B\xf1\x1a\x14\xe9\x05~L\xce\x8bj\x87\x15\xd2T~\xb3\xc3\xd9\x05\xea\xac\xec#of\x89\x02V2f\xdf\'\xe3\xe0\x029\xab-\x99{e\x9b\xfc<\t\xffk\xab\x91Q\x1f(\x9d\xf9=\xe9\x7f\x16\xc2\xf2\x99d\x10\x83\x04\xd7\x1c\bG\xc4\x1f\xaf\xe1.\xab1\x87\t\xae=#53\xb4w\xb1j\xe2\xd7\xeb3i\r\x98\xf0&\xa6Le\xee-\xab\x1d\xbaQTK@.\x86:&C\x94\n\x03\x82\xa04\x9dBb\xab\xf0\xfe\xd1hm\xd9\xa9\x18D\xd2i%=`PGU\xce\xef6\x8f\xa8\x9a\xb0j\xea3\xc1t\xf8\xc6\x8a\xb1^\n\xa9<; ssH.\x1f\xb0\xe9,3\x81!(x\x83\xb2\xe9D\xd4\x1ar\rY\x921\x19z*\0\xd8^D6\x88\xda\x0e4\xd07f)5\xcb\x8ci\xdb\x96\xf4\xc2\xc5\xc3\x88\xdf\x8fJ\x9b\xf7BC>\x07\xe9\x9f\xc3\xcc/\xf4\xd7\x99\xf0S&d\xd4\xcaD\x13%\x05\xab\xadc\xd5\r\xd7\xae|P\xffvkh\xe2\xd2\xb8d\xf1\xa3\xdf\x7f\xd9\xeb>\xfcw\x8f\xdc>\xe6E\xd2\xc6X\x0e\f\x95\xc4\x12\xcf\f`[h\xf2\r\x95A\xc0P\xa3;\xf2\x18\t\x1b\xa6\xb8\xf7\xeaz\xa4L\b\xf6\x16/\xa6-V[(\xb5mK\f\x922E\xb0\ni\xcf\xb2\x12Y\xa2pa\x95UP\x9f\xc9\x80\x7f4\xcf\xcac\x1f\x13\xd8\xe5!9\xed\x9a\n^\xd3\xcbu\x83U\x8bI\xfd=LL\x92\x03hP8\xcf\x7f\x14\x9e\x9a\xfe+j\xab\xc7\x8b8\\t\xaeL\xa7\xa7\xfe~V]\xc3\x86\x86g\r~\\#\x84\xb5u\x02\xdbI\x06\xb5X\x85\xa5c\xd6~\x1b$\x16}\x18\x16\xb2qC\xd3u\x9b\x89\x93\xc9\xc9o(\x19\xd4\x14\xf1\xcd\xeb\x14|\xdf\x92\xc9\xc1\xa4\xde\x12\xdc\x7f\b\xd9\xe5\x1b+\x1ag\xafA\xc5b\x87\x8aiL\xd1\x0e\x9a\x9b}\xca\x9a\x01\x15\xa3\x82\x8cV\xce\xef\xc9%\xb35K9\xb3_\x8e\xbd\xbd\x9d!y\xb6%=d\x86\xdd&\'\x9c0ynS\x99L\xd5~\x1dK7\xcb\xf2\xf9\xdf%\xbf\x0f&\xef\x12\x85\xce\x9a\\VU%\xfa\xc9d2\xb3#N\xc5,e\xb2\x85\xad\xbf1\xd4Th\xc7\x17\xe5\x88\xbd5\xd3pv\xcd\x18\x85<\x1e\xc4\x1a\xf86\xfd\xd8k\xaf\xf9!\xfd[\xad\xa1\x89K\xe3\x92\xc6\x91\xfd\xdd;\xde\xf4\x83\xc7>\xfe\xab\xbfu\xe7\x8b;\xbe\x1ac\x8f\xe8$\xcb\xb8\x98D\x81\xfd\x15[\x1ay\xeb2\x17\xcb\xbc\xed\x94\xa2D\xd0\x10l{(\x13vY\xc1$TU\xcc\x12\x98\xa1eW\xd2\x9f\x15\xf4\xe7\xa9\xbd\xf7\0\x99A\x87U\x12\x1a\x87=\xf2V|j\xf6w\xc9?`\x8b\xcd^\xc6\xd9\xf3\xfa\xeb\xb0z\xe83\xa9u\xda\b\xeb%j\xcd)r\xf2[\xe8\xb7\x12o\x83H\xaa*SD\x86\xe4&$\xc6#\xb7\xd0\xe3\xc7D;\x92\xb4(NC(/\xa4d\x84=,\xf6H\xc6\x88)\x8f**\n~o\xf6\x90\xa2\x11\x13\xf3\xc0\x96\xd1 \r\xdc\x92\xac\xa0`)\xcf\xc6\x015eH-VS\xbd\xc5PJ\x8b\xb6\xafr\n\xeb\xb2E\xc9\xa4\xa4\xe9VM\xc3m\x9b.l\x9cf\xe2\xb2e$\f\xea\x8aH\x1b\t\x8e\xee\xa7\xe2,\x9f\xb7\xcd\x914A[n\x9f\xd0\xe4\r\xeb|1\x1d\x901\xda\x94>6\x98,,\xd7\x92\xbcEDS\xc9h\x19\x9b_\x0b\xe5\xd8\f\x04\\\xc9<-\x9b\x95\x1fl\xefF\xe5\xa8\xa0\xe2\xddp`\xc3\td\x9f\x0b\x84l\x90\x1a4\t\xb5\xf5\xda\xef=\xbeu\xfd3\xb5\xda\xd2\xd0\xc4\xa5\xf14\xc0\x8f\xfd\xc0\x15\xaf\xfd\xeb\xbf{t\xf3\xbe\x07\x86\x14\xf2B\xddHJ\x92+\xa6\x06\x19K\x0f#A\x91\xcbl)70)\x9bbk\x06\x81\xb9C\x19\xa7\xd1Tc\xbe\xdf\xb6\n\x99\x852B#,R\xe4\xf7\xafRk\xcf\x8c\x94\x101\x11\xd8\xe9\x9aL\\-\xb2\x16l^\x84K\x9a\x9c\xe7\xe7\x0e\xf8\xf1\xbc(/\xf7\r\xea\x95D\x01\xff\x15\xb4\xe6\rj3qeS^\x9ecCB\xe0\x83P\x95\0\xf3I#\xc4\x8a\xf1\xf6\x83\xf3\xb5\x10)\xca\x96\xe9D\xc6\x133a%R\xfa+\xa7j>\x97\x87\x18)7\x17\xf2!V\x8a%\x14L\xaa\xde\xb7\x87\xbe\xad\xcc\xa4d\x07$\x8b\xb1U\xb1\xcc\x1dKY\xf9\x19\xdb-)\x8b\xfa\xa1\xab\xf6\xda\xe6]\xea-\xbb\x14\xcf\x18Bj\x98\xa6\xb2\x99\x9ce\x02w\xa4\xf9\xb9\x1cM\xf8\xbdv\xa8\xf2\x17\xa9\xe4\xd7sAJ\x99+\xa5K\x88U\xcb\xb7e\xaf+\x1f\xef\xf0\xf1U\xa2\xb8\xea\xa2\x92\x84\x8f\x06\xc3:1z\xa5\xae\xa5\xed\0\xce\xc72\xf7\xa5\xe9\x1a\x89\xf2\xca\xb9X\xca\xfc4d\x11\xa2\x94)\xad\n\x95\x1a\x1a\x99\xe7\r\xed[\xed\xd0/\xdc|\xe3\xf3\xf5o\xb3\x86&.\x8d\xa7\x05:-w\xeb\x1d\xbfp\xc3\x1b\xff\xd5O\xfd\xe3-%_\xdd;\xf6\xac8\xdd0\xc0\xb1\xc4\xbeNU\x89\n\xb0l(\x02^X]SE\x17U\x8d4\x13[.\x13U\xeb \x15\xc9\x84\x1cf\x18\xbb\xb5D\xe1\xd2,\x85\xbc\xc0\xc3\xea\x1e\xf4C\xb1\xac\x9b\xb3\x0e\xb93|\x9b\xab\x85\x10\xd1\xe7\x84>\xe7\x99~C\xfe\xd0`\x920\xc8a\xd2Iw\x1aQ\x1e\x15\x13\xd5\xe0t%%\xc7lj\xcaq\x14\xe5\x84j\x99J\f\x8bzN\xe9\b\xae\xc1\x98\xec\x10Y\x84\xb0\xcbGRB\xc3\x9eX4p(\x9fZ||%+8\xb8\xfcl\xb1\xd2c\x96\x96eU\xe4:\x0ee\x03&\bd\x1aV\x8d<\xce\xf6\xa6\xac\xce\\\x1a\xaf\xa9\xacC\xd7\xb7X\xf5\xf9\xfc\x1a-\n\xb3\x96\xe4\x03\xf6WL:P\x1e$\xf3\x9cI;\xcd\x0ee\xa3\x9c\x15[[J\xa8N\xc7\xa2b\xbb\xc3\xe7e"*\x12\xa1\xbdhF\xcec\xa5\x8c0C\xac\x88"&\xc3\x84\xb2j\xca\x8f\xf3\xc5,\x92\xc7\b\x1fn\xa4\\\xe8\x05\x05\x1a\xcc\x98\xac\n\xfeYC9\xda\xb8\n\x94\x0b\x0b\xcaR\x12%\x86\x06\xf0\xc6@\x1aG\xca\x9f@B\xbf\xf2\xb3\xdf\xf1\x1b\xabK\x1d\xed$\xd4\xf8\xff\x1d\xba\x8fK\xe3[\x8a\xdf~\xef\xbd\xb7\xfe\xfa\xefm\xbc<l/\xec&6\xe5\xcaZ.QC\x95\xeca!\x8c\xd7a\x92H\xc6kj\x8c\xbc\x0b\x0b\xba\xcb\xc4\x121\x11\xb5(XX%\x7f6\xa0\xf6"\x13Bw\x86:+\x9e\x10]\x125d\xcd\xda\xe4\xcc\x19\xe4-39a\xa8/+,\x93E\x0em\xb0\xfa1+\n;\xb5\x94\xef\b\xe3D\xe2\x86F\xe72\xf2\xfb\xac\x96\xec\x9c\xa6kp^\xb0\xeaKS\x99\xc8\\\x96\xfc\xd5\x8cX\xf1\x18\xa28\xec\x10\t\x1cH\x92wH\xb6\xe5X\x95A\xb1\x951\xe2\x9fj\xe9\xe3R\xa9\xf05\x15c\xcc\x02\x83\t\xc2f\xb5\xe3P\xd0CL\x95\xda\xd3\x82\x19\xc5e"\x81\xd5\xde\xf1M~}\x93\xe2-CR<Z\xb3\x16\x05\xed\x90\xef\xef\x89\xad>\x1e\xf94\xcdSJ\xac1\x93P#\xd6\xff\x8aRJ\xd7b\xb2\xf2\x98\xdc2#\x87\xd5\x17\x1c\x81\xd3-~md\x0b\x0ec>.~\x9f\t\x13m\x12Q\x99\x8e\x99\xa3\x02\x19]\x92G\x85\x8c\x82\x81q\x10\x91Neb\xa9\x81\x9a(}\xd6\x0e\x93\\%\r\xc8&\x1f\xb7\x8b\xc6mV`1?\xee\x87^\xb9\xf7\xfc\x7fz\xeb\x0bV\xf5o\xb0\x86&.\x8d\xa7\x1d\xa6Q1\xf3\xf2\x7f}j\xe7\xd1s\xca\xadVfH\xad\xb0e\x14\t,\xda\x98\x90\xec\xb5#\xca\x93\xa1Z@\xe1\x92\xe0\x85\x16\xe1\xaeV0\xc3*k\x86Z\x0b!\xf9=\x9b\x17w\xa8\x0e\x9f\xc2\x058\0+Q1\xe442\xc0\xd8\xea0\xa9\fH\xf2\x04\xf3\x8d\x82\x17\xfa\\\x1a\x96a\xf4\x10#\x06\x13$\x16w\xf4A\xd54\xa2hT0!\xe4\x92\x12UIb\x85O&/\xf6v\xc7\x96\xf4y\xcbee7kJ\xf6\x9f\xcf\xa4\xd2\x9ace\xc8\xea\x07f\x8c:\xaeE\xa1\xc1K\b\xa6\xcc\xd3\x86\x92\xed\x8c\t-\x95\x98\xa8\x92I\xcc`\xe2)\'\x115\xd9X\x82u\x1d\f\xb1d\xb5S\xc7\x1e\xb5{\x01\x13\x19+\x9b\xa2-%:\xafe\t)\x82\xd4\xeb\xba-e\xd1p\x95_\x7f\x06A\xbc5E\xc96%\x1b\x13*&\x132\xd0\xe0\xec\xc3\xc0\xe2Q\xc2\xea\x0f\x8a\xa9\xc4\xe8\x92\t\xd4b&\xc7WL\x12I\x9aG\x1f\x1cj\xb4hn\xc6~!\xc8\xca\xe5\xf7\x95G\x81\x94n\xcb\xdaPnO\xbb\x16\x05\x8a1/\x98\xbc\x8c\xe1\x9d\x7f\xf9\x077\xfd\xf3+\x8f\xf6?\xa1\x7f\x835t\xa9P\xe3i\x07\xc7\xb53/\xf0\x98Y\x12\xd9W2\xd1\xe4\xdb\xa8\x18!\xe9\x91\n\x12j\x9a!\x99\xaeEa\xbf\xcf\x8bp\xc4?\xebS0\xbfB\xc1r\x97:\xcb\x88ob\xd5\xd5o\xa4\xc1\x16\x06\t\x94\xdf\x8c\x9a\x95\x16+\x1c\xc3e\xa5\xc1J\n\xa4\x94n31\x14\x05Q\xbeC^\xa7\x11\x12I\x98<\xd2\xc1\x88\xb2tB9_\xc4\x99]\x1f\xd2\x83\x9c}\xcb4w\xa4K\x0b\x87Z4\xbf\'\x90&\xe6\xac\x94\xa0\t\x8c\xba\xa2dG\x92\x93T~\xad\xdb\x88M\xbc\xe2\x85\xde\xf4\x98\xb4LK\x05\xe3f\x05+\xb3\xddn)& (-\xd8\xe9\x83%\x93\x82\xb9%V@\x16\xf9m(\xb7\\Hez~D\xe33#\x1a\x8cFD\x13\xbe\xa5\xebd\xb1ZsY\xce\x853}\xd9\xebC\xa4U\xd5T4x\x84UZ\xc8\xac\xda8\xd4\x9eq(\x9cc\xb2\xe9\x12E\xdb\xac\xf8\xea\\\f\x19bs7@\xe8\xb5\xe4#\xbaa\xc6\xb7\x942\xdf\xa1|\xec\xf2kFB\xac\x98\xb9\x95\xc5\x0e\x13\xe3D\x92:\f\x076|\x87\x14\xf5\xdaR\xe6\xc4E\x83\xf4r\xa1\x01\x99/\n\x02\xdf\x1a\xea\xdf^\rM\\\x1aOK<x*{\xdeiV@.\f\x7f\xbc\b7E\xa1\x9c\x84\xa5A\xb6\x19\xf1B:\x10\x83\x83\xd7\x9d\x95\x91\x1dno\x89\x82YVZ\xcbmj/\xc0\x80\xc1\xca\xcb\xab\x98\x88L\xd9\x93\xb2=\x12SD>5d?\xcar\'b\xdb.S5t\xd1\xc82~\xcem\x1a\xaf\x8dh:N(c\xb2\xb3\xba]j]v\x98\x96\x0e\xcd\xd3\xc2\xb1>u\xe7x\x91\xb7\xa4zHh\xef\xaa\x98\xe0\x86;\x99\x18D\xa2m&\xc0\xa8\x12\xb3\x83\x05\x824Y\xbdMU\x7fV\0G\xa1e\xd3x\x1d\xcd\xc8\x85R}Sd\x0f6\xd4m\xb1\xf2\x92`^(\'>\xb6\r&I~\x8ellJ\x80m\xb7\xcfJ\xd1\xdeG\xfb\xae:\xc2d\x8b(\xa8\x98\x06\xa7\x07LP[49\xbbF\xa3\xcd\xf3\xe4\xb3z\xf2]\xbe_+dE\xd5\xa1\xac(\xa5\xdf\xaa\x88,\xf2BG\xfa\xae\xf0\\T\x84\xd4\xf8\x85\x94>1,\x13\xad\x06pA\xe6\xd3.\xf9-VM\xf6\x84\xcf\x97G\xd1\xba)qX ,\x9b\xd5$\xee[#\xb0\xb7I\xa5<\x8b\xfd,\x191S\xd9\xe4aO\xd14\xc8q,\x1aO\x13\xba\xef\xc4\xf6w\x1d\xdc\xdb\xb9[\xff\x06kh\xe2\xd2x\xda\xe1\x1f\xef\x8c~*\xc9\x1ajC\x8c\xc0\xb6\xcd\xc4\xe5\xf8\x96X\xbe\xdd\xa0bI\xd6\'\xbf\xd3\xe2\x85\xd5\x15\x92\xb2C\x8fz\xfb{\xe2\x98\xf3y\x01G\xba\x85\xd3R\xb6t\x15X\x9b\x8b\x1b1O\fi\xdc\x85k/\x9f\x18|\x9b\xb0\x86\x03YM\xa9\x0ey\xc1\x0e\xbb\xd4{\xceet\xe8\xd8\n\xcd.\xfb\xd4\xea\xa9\xcc\xf4\xe9\xf9\x9av\xbe^Iy\xcf\xf02VL(\xaf\x95\x924\x01\xa2B\xa9\r\xa9\x1d\x8e\xbf;2%#!&L\x10\x8ew\x9a\xdd\x18\xa4\x9a0q$\x87}\x9e\x19\xb0\xc9-\x9a\x8eH\xe6\x80\x81\\\x90%\x88=%\x1b\x8d\xd4\xa6I\xc9\xbaM\xf9 \xe3\xef\x8d\xa9<\xe9\xcb^R{\xc6\xa5}\xc7\xf6\xd2\x91\xeb\x0fR\xb4Y\xb2\0\x1b\xd2\xce\xf9\x0b\xb4\xfd\xe0I\x1a2\x91\xb9\xb4\xc1$\xc6\x04\xde\t\xa8lz"\x05\x91\x1d(\xb3\xbfl\xb8\x03\xd1\xb8\xddP2\xca\xa4\xcc\bc\x8bic_\x8d\x15Z\xbfM\x19+\xbc\xa0=K\xe3\x0b(\x19zLZ1\xab\xca\x19V^\x81d\x1e"\xe9\xbe\xc8-Y"0\xa7\xab\xaa\\>vW\x141\xd2\xe1?s\xe7\xd97\xbd\xf4\xf9\x07\x7fC\xff\x06k|+\xa0\xf7\xb84\xbee\x88\xb3\xaa\xf3\x9a\x7f\xbb>~\xf8\xe1)\x19e\xc1\x8b\xa3-%.\x83\x12j\xcdc\xac\x95!\xc1\xafh\xd2\xb5\x9c\x8e\x04\xe2\xb6W\x91\x02\xc1\x8b\xef\x02T\x89%\xf3E\x9cv#\xe6\x88|\x9a"\xd1\x90\x10X\x8b@\xdad\x10\xf3\x7f\xef\xd0h#\xa1(/\xc9Z\x98\xa5\xde\xb19\x9a;:O\xfd\xbd>a\xa8q\xb2^R6\xac\xa9\xc4\x80\xc6\xa8\x94\x94\xf5"\xca\xa9Lj!@1W$\x95\xcc\xba\xaa\xebT\xc2gM\xec\x9b\xf9\xb9\xcc\x02\x037\xfa\xfdB\xf2\f\x11\x8f\x84\xa9\xc6E\xc2\n\x05\xbdX\xbc\xc0\xa3\x8f\x0b\x93\x861y\x19f\x13\xbf\xdbHJ|6\xaad\xb20BkQ\x82\xf3\xbaL\xa6\xb5!s\xc0`\x85\x87\x93\x10\xbev\xec\xad\xf9\x9e\xc7\xf7\xb5\xa9\xb3\x12J\xc4\xd2\x16+\xb1\xb5\xaf\x9f\xa6\xe1\xc9\r\xaa\xc7)\xf9\xb6E\x81\x17P\xd8\x86\x8b\xb0G^\x8f_\x9f\xff\xdd\x94\xb5\xf4\xa5\x95(YNs\xc9aD\xf8pk\xa6a\x95XK\x1e\xa1Y\x17\xb2O\x86a\x96P\x8fE\xaa\xce\x03H\xb0J+J\xc7\xd8\xff\xf3Y\xc9\x9aB\xc8\x96QH\xa3\xf7\xeaj\x9b\xfe\xfc\xffz\xd9\xeal/8\xaf\x7f\x935\xb4\xe2\xd2x\xda\xe0\x93_\x8a\x7f\xfa\xd4\xf9\x94l\xa4\x8c\xfb\x8e,\xc0\xe9\x84I\xa8\xedR0\x170a\x05\xe4\xb61\xfb\t\xb9K0c4j\xb4\b\x02pm\xe4\x03*\xbbz:\xacU\x02\xbc\x171Y1\xf9\xb0B\xc0(\x90\xc9dLU\x8b\t`\xff\n\xcd\xed]\xa5\xb9C\x01\xf9\xbe*\xfd\xc5\xeb9\r\x869\x8d\xcfV\xe2\x9c3mVVC\xa4\x9fc\x84\xc7T\f\x0b\xc8N4\x91\x89\xc8\x7f%\xc9\xb8\x12\xe21a\x1b\xe7\xef\'\xc3Z&\x18c/.\x1b\x96j\xce\x15\x9as\xe1>\xe7\x7ff\xe3Z\xb2\x15\x91\xedW\x98\xa6(!4>W\xa9j`F\x1d2M\xe00\x8c)\xe8\xab\xf2a\t\x92\xf3M*\r4_\xa3\x81\x18\xa3R\xf8=\xb9\xae\xf4\x969\'\r\xea1q\xbbN\x9b\xf6\x1d\x7f\x06-\xec\xbd\x8c\xc6\x9b\x11\r.\xac\xd1$\xde\xa1x\xbcMV:\xa1N\x81\x84\xf8\xb6\x1cS\xd0\x05\xe1xL\xc4\xb6\xd8\xfe+\xa7\xa0$\xca\xa5a\xbb\xe4cq]\x93\xdc\x1e\x9c\x18\xc8\x86\xcc\xa4\x05!\xe8\x18\x94FL\xd2~\xa1r\n+\x83|d5\xa2\x11\x81\x7f\xee9\x16\xado&\xf4\xf9{\xd6^\xf7\xd2\xef<\xa4U\x97\x86V\\\x1aO\x1f\xdc\xfc\x9f7\xa2O\xdf\x11\x85&+\x03\xd7\xc7\x85<\x16Q[\x8c\x186\xaf\xee\x0e\x063\x9a9Y\x18\xf0\xe8\xb6dX#~f\xba\x05\x85s2b\x98\t\x02\xfba1\\\x1dL2\x03\x9a\xae\xc5\x94d\x15\xe5aH\xde\xfeE\xea\xed\xed\xf3Bo\xca\xbc.(\xa8&GOX\xc1\xca#\xa3h\xb3\x92\xc1\xc9M]H0m1a\xf2ke\xa2PH2\x14\x99D}d\x06\xf2"\x9f\xa8@`\xf48!\x0e)\x8fKI\x9aP\x83\xafX\xcdY\xca\xbc\0\x85\xd5\xec\x8ej1\x8dJ\x88\x10nC\xf4r\x99\xa6\xbaY\b\xd2eB\xc4$c(5\xc7g\x02\xf1\xb1G\xe7\x88\xeaB\xa0\xaf\xed[TNp]\xc9d\xd6f\xd2\xa8\x1c&nS\xc2\x7f%8\xdft%\xdd\x02e\xc5"5)b\xa2N\x8b!E\x17\xb6\x88\xc61y|\x17\xec\x85u\xe7\x03qZ\xe2\x98\xa1\x1a\x9b\n\xe1\xc3\xac\n\xb3L\xc8\x15\xdfC\x19\x11\x17\x07f\x93\xc8,/\xf4\xb2!\xbd\x04\xea\x17\xc8Y\x81\x95\x89jM@\x7f\x17J\x905\x93\xdc\xcb_t\xf8\xd1\xdf\xf8_\xbf\xe3\xb0\xfeM\xd6\xd0\x8aK\xe3i\x81\xfb\xce\xe6/\xbc\xfb\x812t\xad@b\x94\x02\xbe\xea\xb7[\x96\x94\xfc\x8aiFV\xe8\x90\xd31\xa4A\x96<W\xca\x7fh\xe0%\xd9c\xc9\xa8)x\xe1M<\xca\xa7#r\x9c)\x93PFq\x91P\xd9\x9d\xa7\xf0\xcae\xea/\x85\xe0\x06\xca\xb7jJ\xa6\x05\x05\xf3\x99\x98\x12\x9a"\x17\xf3\x07\xca\x81\xc5\x84I\xa2\x85\x92\x18?\x17\xc6\x8f\xc0\xbc\xe1\xe6\xd2\x1bU\xc6\xb5\xf4\x93\x15\x9et\x97\xc9<-\x93I\x14\x9c\x86\xc6f\x19\x07"D\x84\xbd9\x12\xcb8\xf6\xb0\xb2\x88\t\'\xb2\xc9\xf2\x90\x04\xaf\x9c}E*\xd1\xea\x92\xf0!)\x81\x85!\xe4acV\x18+24,#\x99>\x1b\xe62\xcfKE*\x99*\xf6\xaap\xc8\xc8\x1a\xb2\x03\xa8\x1d\x8f\x89\x85\xc9\x0be\xd4\x86\xbf\xcf\xf7\xcd\xd3\x11e#\x8f\x9a)l\xf4}j]\xd6\xa2$N(\xde\x1e\xd3\xce\xce\x98\xa23\t\xb5\xfc\x80\xc2\xbe-\x13\x911\x15\xdao\xab\x9e\xb2\xa6,U\xd4\x13\xe6\xa11[A\xc5bl\t$c\x83\xd7\xceJ\xf2X\xfd\xba~G\xdeG>\x89%\xbd\x1fa\xbc\xd8\x9b\xfb\xf2\x03\xdb\x87v\xc6\xe9\x9e\xd9\xae\xaf\xcb\x85\x1a\x9a\xb84\x9e\x06e\xc2/\xa77G\x99K!\xab\b\xa4\x91;],\xf6\xa6\x10IY\xf9\xe4\xf1B\x1b\xcc\xa1\x97\xca\x96\x14s;\xc8i\xba\x99\xab\xc5\xbe\x9e\xca\x98\x13\xb0@6\xdc\xa01\xd2\xcb\x17\xf6\x91\xb3|9u:j0\xa3\xd9\x14\x94\x0f\x0b\xca\xb63&Ff\x96"\xe6\xff\xa7b\xb4\x80\xc2\xc2^\x18\xca^\x18\xd5\x81\xafu\x93\tQ\x95C\x10L&\xe9\x1cE\xca$4Tvw\x10T\xc3\xca\n\r\xcc\x964E\x9b\xe2r\xc4\xf1\xa0\x8cg\xb6*\xb1\xc7c\x81G\x19\x0eN\x8f\x1a\x84\xe65\xf2U\x02,\xa4\xd4\xc6\xc4\x8b\b\xa8\x92\x9f?Q\xd6}\x18<@zH\xaa\b\xe62Qz\xe8\xc1\xc2\x88\x16\xec-\x95\xb9\xcaB$J\xc5\x84\x11\xef\xd82\x81\xd9\xf2l&GS\x88\xd5@\xd8p\xea\x90?gI\xc2\xbc\x1f\xcc\xd0\xc4\x0b%\x8ej\x1c\xb1\n\xdd\xd8"\xcft\xa83?\xc7O\xe1\xa8\xf4{>WH\xcd@\xe4\x14\xd4\x94\x94i\xbd\x94?\x03&\xd1\x11\xbfg\xbe`0\xddJ\xac\xfe\xd9\x84?\x89\xc0\x91\xe1\x97\x0e\xac\xfd\xfc\xb9\xac39\xde\xf3\xc0\xe6+_p\xfd\xbew\xe9\xdfh\rM\\\x1a\x974\x8a\xba\xf6\xeex\xb0~5\x1aY\x11\xe8\x0eeR\xd56+\x01\x9b\x17K^\x8c\x1b(!V@f-\xea\x07\x8b3\xec\xd90C\xa4Q\xc2\x841%\x1a\x96\x94\x17|k\xf7\xc8\xd9\xb3J^\xb7M6Lp\xb0\xd2OQ\xee\xe3\xdb4\xe1E<\x15\xa7\xe2\xf4<\x7f?CrD!}SeZ\xb3\x82(\x84\x10\x11\xf5\x04\x13C\x95gjH%\xc1\x80Q\xc9\x1c\xad|\xcc\xe4\xd4id\xb4I\x99\xd92\xac\x92\xc47\xd1(6\x823\xd0R\xe53\x94\b\xb1\x7f\xd58\x8d45\x83\xc4,q:\xd6\xd2\x07e\xc8}\x1a\x19\xee\x88\x04_\xa8,\xa8/\x90\x97|\xe5\xc7 \x98\x17\xc1\x15UZ*\x95\x89\xd1Z\xacr<\xa8O1L01uLI\xbb\x90^\xac\b/\x9e\x91\xd7*\xc4\xc8Q\xc6Pb\x06\xfa\xe3\xa8;g2\x19YT\xf8\x88rj\xb1\xb2\x1bP\xc6\x04\x16\xba\x1dy\xbe\xb2\xb0e\xf6\x96\xeb\xb7X\x91afX&\xc6\f\x94I\x1dV\xbfr\xacpI\xda\xb5\xcc\xee\xc2PK\xafcI\xaf\x9c)}k\x1e}\xe5\xc4\xd6\xcb5qih\xe2\xd2\xb8\xe4qb\xad\xfe\xf6\xd3;\x8e\x94\xaf\x1c\xb8\xd5x\xe1\xb5<L\x1e\xaee\x0e\x15"\x8f\xfc\x1e\x16J\xecm1Q\xc1t1M\xa9\xb10EkDY\xc2d43K\xd6\xe2~\xea\xce\x04\xe4\xf9\xcc\x05\x19\x93\x1fL\x07\xcdT\x06H\xa2\x14\b7\x04\\\x80\xe9 \xe2\xc5<\xa7l\xd0\xc8"_\xb1\x04\xcaGPE\xac\xb6\xcaJ\xc8\x11\x01\xf5(\x01\x96S\x8c\xab\xe7\xd7\x11\xb3\x1f\x13\x98/\xe3.\x99X\x90\x95hH\x02=\xee\xcb\xf7b\x92\xe0\x7f\x87\xaaLX\x95\xd8\xbb\xe2c\xce\r&Y5\xa5\x19Vx\x89\x98\xda-\xbf!\x9cBf\x8fY\xaa\\\x88a\\\xd8c2\xfdZ\xcd\xfabB+\xd3F=G\x85<F\x10\x9e2|d\x138+\x0b1p\x94;\x96\x1c\x1f\x95\x18Ub3i\x1b\x14o\x17\x14\xd4\x85\x9a\xb1e\xc0\xd4\xc1\x8a\x8cY4h\xb3\x02\x95\x81\x9c\xac1\xbb\x0b\xb2_\x15e1\xe5qD\x1e+8\x97I\x8d/\rX\xdc19\xf6]Vn\xae(?\x83\x9f\xcb4\x13\xd9\x17t`\x9c\xe9\xa3W\x8d\x9f\x17cQ\xf0\x12 \xd1\xcc\xa7\x0b;\xc5\x15\xfa7ZC\x13\x97\xc6%\x8f\xd3\x9b\xc6uy\xe5Sg\xa6\x11\xeb7l\xf0P4A\xa7T\xf9y\xac2\x06\xe71.\xa4d\xe2\xca\xa8\x18L$c\x8f\x1a&\x9f\xd6,9W\\N\xed\xf9\x16Uc\x92\xd9Q5\xab\x93r\x9c0\tL\x98\xc0\xc6b$@\t\x10M\xc7\xd8\xb7\xca\xc7\x95\xa8\x95".\x98 q\x7f&\xb9l\xd7\xd6\x8ed\r&\x13\xa8+\x19M\xcf$\x88\x04\x8f|B\xf2s\xcc\xa4\xb2\xf8k\xc5\xea\xce\tk\xd9\xfb\xa9\xf3Z\xca\x82\r\x13\x8f)\t\x1f$d\x81\xa1\x98\xb6m\xf21\xd72\x12\x04\f\'\xe3P\x90\xc8\x01q\xc6_A\nu\xd3\x88#\xd1t\xf9\xfdy\xa6\x94\x04\xa1\xda\x8aD\xf5\x85ah\xa3\xdb\xaaH\x19\x15M\x95\x04\x82\xf7Y\x1b2\xfd\xb8a2\xaemU\xe2\xab3K\x12F\f\x0b\xef\'\x93\xf4\x10\xcb2D\x15a\xfa\xb3\xcc\xf8\xaa]qh\xa2\xf7\xcc\xc4h\x92\xae\xcf\xc7\xd0\xa6\x88\t\xdd-\xc6\x148\xb6\xc4<e\xe0u\xa7%S\xa7\xeb\xdc\x17\x13\x8c\x13\xf0\xf3\x84\xbe\xb8 Q\x1etl\xbe\x15H\xb8w\xc9,]\x8aR\xa3\xaf\x7f\xa354qi\\\xf2\xc8\xcb:\xc4\xfe\x90\x05\x05\x15`\x9aq&{?\xc9\x94\xa4\xb9\xd7\b3\xb2\x1d4\xcfN\xe5\xaa\xbf*R\xaa{-2\x97\x8fP\x7fyN\x9c\x80\x06\xc6q0\xa9\xd5yB\xe50\xa6F\x121\xa6\xac\xa4r\xaaR\xd8\xbd\x13&\x82b7\xf9\xa1\x11\xb2\xc1>\x12"\x9f\xd0\xe3\x85\xf1\x1cHp\x079\x18b\xacmT\xe1\x0fI\xeeh\x0f\xb3\x95\xfa2[\xb5\fZ\x04\xc1\xc1QXdjt\t\b\x06\xa4\x862 \x9c\x81R>db\xf1\xbcJ\xca\x8e\xc8>\x84R++\xf5\xdc\x0e\x93\x89\xc9*)\xc2P\xcc\x1c\xef\xdb\x10BD\x06\x14\x86Z\x8a\xda\x9b\xa8\x12#\xf6\xf9\x9a\x92$=\xc4\xf2\xd4\x93\x1b\xb2\xc7UK\fS\x8e\xbd1\xccp\xe6\x9f!\xa4WJwN\xc9\xe4c\xca\x88\x12B`o\xa6\b\xd6\xed\xe6\x92\xad\x88\xb2\x9e\xd5r\xa8\xb3\xec\x89!\x03a\xba\xce"\b)\xa4\xf1\xc6\x84\xbctH^\x1d\x92\xc3/W\xc0\0\x128RnlJ\x9b\xd2\xdc\x153\x89\xd72D=\xd6\x96%\xeeG\f\xde\x9ci\xeb>.\rM\\\x1aO\x03\x1c\\\xa8\xef\f\x83\x1dIt\xc8\x91\xd4n\x17\xe2\xda\xcb\xc7\x05\xab,\xc8\x1d\x98(\x98\x88\f&\x1f\xb7M\xee\x91+e\xc6\x96\x8f4\x07VB\xd1\x04\xcc0\xa52\x8a\xc8\xa2\x84W\xfdX\xf6\xa7\xe2\r\x95t^\xb2\xb22\xdd)D\x97LO\xc6\x9e\x95\x18 \xb0\x07fT\xa2N`)W\xafoH\xa2\x84)\x8a\x02\xfbM\x96H.\xecG\xa9<\x0e4\x1f\x9bB:X\xec\t%<d \xa2y\x18\xe1\xf1\xb52\x97\xa0g\x8b\xb9T\xa2\xa2d\x0f\x8b\x94\xa1\x02\r\xc3\x16\x9eK&\xa5 2I\x9eB\xec\xf35\x06T6\xaa<*\xa5E\x1f\x8eJ\x12&\xc53\x18\x92\xc2\xa1&1\xa3\x87\xac.,\x89\x91BR\x87\x1apiIO\x9a\xb8T`T\xe1\xff\xc6X\x14\x90r9e\xb2\t\x99\xcc&\x0e+\xaf\x9c\xec\x96\xcb\xef-\xa0\x1a\x93\x96\xa1\n-[M[f2\xf2\x0fz\x94\xc5\x1eM6Rr\xb2\x98lf\xdez\x88(\xacP\x86i\xe6\x19\xd2\xe3\x0b1e\xd4\xac\xf8\xf0~\x82n%3\xca\xae?>\xa3\x87Hjh\xe2\xd2\xb8\xf4q\xd5>\xf7cW\x1e\x88\xb6\xee;?\x99702\x1e\x91M\xac\xaa\x9a\xbc$\xe6\b\xca0\xbc\x91\x95@p\xf80\xf5\x0f\xce\x90\x89\x8c\x07\x10\x0bL\x14E\xc9\x8bnB\xd96\x93\x961b~\x88(\xd9\x82\x82\x88en\x97\xe5\xc6\xa2\x82\xb0\x92#\xe8\x16\xe5\xb1\x82\x95\bH\f6n4\x15\x8b\xc0\x82\xf7\x01/\x06+x.< {U\x8eW\x0b\xa9\x94.n\x85R:\x88R\xca-5\x9d\xd8U\xf9\x80\xf8\x81\xe3\xd4\xa2\xfc\xb0G\x86\xc7\x80\xfc\x8c\xda\x94L\xbf\xa6Q\xc7\xe0\xe2\xb8\x1b\xf5\xfaL\'\xd2\xab&\xbdZ .&\0\xa4Y\xd8\xb2\x97\xa5\b\xcf\x96T\x8eF\xed\x9b\x15\xca\xf0\x81\xa7B\xc9\xb0\x11K\xba\xb0\xaf\x1cK\x03\xa9\x88\xb4\x8e\xca\x14S\b\f-\xc8\x15\x145\x14\xa4\xac\xc2@\xe2\x1e\xa5#\xfe9\x9f\xbb`\x06*\x8d\x15\xe7\xd8\'\xbb\xed\x91\xd3V\xe9\xf6 hiK\xd8\x13\xb0\x1a+(\xdb\x89)\xdf\x81\x0b3!\x0feJ\xe9\xf5\xaa\xa5\x9c\xdbd\xb5\x90\xb9\x10\xaao\xd2\x81\xfd\xad;\xf5o\xb4\x86&.\x8dK\x1e\xd0<\xcd\xe2\x1e\x8b\xc6\x8f\xb22\xc0\x10E\x9b\xdc>2\xf1X\xd6,\xce\x92\xdf\xef\x93W\xfb4{X\xf9\xf6\x92\x9d\x86\xe24c\xa5\x12\xf1/,/\xc6\x83\x84\xea8\xa6\xbaaU\x95\xa5\xbc\x10\xa3c6V$\x95V\xb2\xd2#\xa1\xc2\x90\xb8y\xe5\xe8\x93\xbd+\x0b\xae<\x92\xef\xc1V\x8e\x81\x95\x92bA\xaa\x9c\x07\xb3\x04L\x07`\x11\xdb\xbe\xd8\x87ePQZ2\xde\xc3\xf5*!\xa8J\x02h\x1b\xc9.\x84R\xc4W\xc7\xaa\xe4>\x18\xce\xe2\x880c\x92\xe1\xfb\x81p\xf1\\\x98\xdf\x85\x9b\xc5\xc7`\xb2\xf4\xb3\x91\x1f\xc8\xc4\xc7<\xc6\xef{WY1)\xda\xae\xda\x1b\x13#\b\x8e\x1f\xfbW\x86\xd8C\x84\xd8\xa4\xc4\xe9\xf1s:\xaa9\x18\xcdjP^25\x1a\xf3\xb9j\xc4U!E\x9e\xa4\xe9\xd9\x86M\x9f\x1f\x97Oq\xec\x0e\x93q&!\xba\xd5\x94\x95,\x133\xe4\\\x0e\xa3\x88\xe1H9\xd3k;\x14\x04\x0e\x8d\x8d\x16\x91\xc7\xef\x9d2\xca\xb7Sr\xf9\xe2"3\xd1\xaa\xc0\x04\xd8\xe6cC\x9a\x07\xf9\xb4\x95V\x87\xf4o\xb4\x86&.\x8dK\x1eq^\xcf4\xf3\xde\xcce\x87\x8fS4\xc8e\xf6\xd3ddQ\xcb6)\x9c7\xc4(!\xd3\x88\xb1\x97\xd5T2\xc01\x1bE\xbc\xb0NY=\xe4\x94\xf0B\ne\x85!\x89\x05\x1c\x86y&\x8e;<\x06\xa5D\x03\xcd\xb5\xb5RN0F\x18\xa2\xa6\f\xb1~c/Hr\x05\xebR\x88\x06\xae?\xecka\xbf\x06%4\f\xb0D\xca\x91)\x83\x14\x95\x85\xddwT@\x06j\x81\x12\tecOJ\xd9\xe2-V>&F/\xa21W\xc6\x88T\xf2\xfc\xa00\x90\x16\x06_\xe2X$\x85cW\x95\x15\xac\x1a\xe1*t\\C\xf6\xd7l\xb8\x0e\x85L\x15\x81\x96\x12\x91hH\xd2}\xd5\x18Jya$\x96\xd1\xc8H\x11\xdc\x07\xfb_(!\x8a\x03\xd0P{_\xd8\x17S\n\x8d\xff]\xa8 _\xd9\x0bD\xc8\b\xa5\x94\f3rBOTW\x8d\x9e\xb5\xc8\xe3\xf3m\xc9\xc0\xca\x06L\xe7\xaa\xc4\f\x93\xff\xd1\x9e\xafD1:\xbeOU?\x94X-\x7f\x86\x8f\xd9f\x85\xcc\xe72\f\xf9$\xecT\xbb{o\x1a\x1a\x9a\xb84.qx\x96\x11\xb7}:\x11y\xcdQ\xb7\x8b&WL\x97G\x98+Q\xb4\xa3Jy\x16\xab\xa7\xd1\xd9\x94\x17\xd2!Y\r/\xb8eB\xd9 f\x02\xc3\xa2\x9f\xf2"\xcd\xca\x02_yu\x06\xf1\x88\xad\xdc\xae%W\xd0\x90\x1e\xa3FBo\xb1\x8f\x84\x1c@Q-\xbb%A\xecm\xa1\xe1\x16F\x0b\xd9\x98\xaam\xb5\xf8W\xcaX\x81:"\xec\xf90e\xa8X\xa7\x82\xccFY\xdc\x99\x9bv\xc3qI\xa5i\xa0\xc3\x89\xc9\xcbB:;f8\x83\x10\xa5[\x99\xff\xb8\x1a\x95_\x88/\xff7{o\x1egYY\x9d\x0b\xaf=\xef3\xd6\xd0U\xd5s\xd3M\xd3\f\x82\xa0(\x04\x95\b\x1f\x0e\x11\x87\xe0wU\xa2Ds\x9d\xa2\x86\\\x13M Fs\xafW\x13M\xc8\xd5\f\xd7\xc4\xa8\x89f0&1D\r*\x82\x82\x03(*\xd0\x88\xcc\r\r=\x8f\xd5]\xe3\x99\xf6\xbc\xf7]\xcf\xf3\x9eF\x93\xcf\xfc\xee\xef\xcb\x1f\tt\x9f\x8deuU\x9da\x9f\xfd\xbe{=kx\xd6\xb3\x88M\xb6\x01\xc4\xca\xb1X\xb3\xca\x13\x03\x9cd\r\x8a\xf9\x1bN\x075\xb8\x02\xfdd(#\xd9\x06P\xd3\b\xa0\x97\x91\x8e\x0fR\x07j\x83\x19\b\'\0NJH\x95\x82\xb9\x90~C\xa8\xbe\x01\xd4b\x04XB\x01\xc3\xd0\xec\xd9\x1bWF\n\xf0\x9e\xbe\x97FOzM\xa3\x05O\x9f\xe3i\xa4U\xe3\xf5\x89sO?g(\r\x05)\xd6\xe0\x8a@jc5\xa9\xb5J6"\x93\x01\x89ycN)\xadF%\x9b\xa7\xea\xb7\x8dv\xf4\xe8\x18\x01\xd7\xe88\xfe\x81\xcb\xb5\x06k\xad\xec\xc1\xadK\xde)\xe9\xb2HkZ\x98\x1a\x1b\xccU\x14\xb3-*\b\x03\xf6dp\xa8\xaf\x06V\xbf\xd4\xd8V\x05F\xceg\x94$\xcaP\x04C<\x90\xa7\xc3\xe8\xa9\xa2\x9a\x05\x80\x01\xbc\b\x1b)\xadD\xe3 \xdfd\0\xc1^D\xc31A\x01\xcc<\xdfbh\x02\xda8\x89\x10H\xfb!EhB\x1e\xfd\x95ixF\x9d\xc9\x050X\xd0\x14,8\xc0\xd1\xd1\xf0\xd0\xcaJ\xd26l\xdb\xd4\xb8\x1c\b\xff*\x84\xe5H?"\xc2\xa1N\xa1\x02\x0b\xfa\xc3\xf4=!\x95\x88\x7f\xe09eat\x13\x1d\xdb\xd4\xd7\xf0@j)\xca\xb0aY\xcf\x05\xaf\x83&\xe4\x1c\xa2\xbe\xae\x89\xe6\xec\xca\xf4\x8e\xb9\x0e%<\xf4\xdc\nF\xa4\x15"-\x104\x02\x8b\x80\x82\xf3\x06\xf8z\xbe\x01\x1a|\x16\x04SP\x8aG-\xac\x88\xf4;"F\xc9\x87u5\x8fu\xb3"\x19\xb0\x9f\x0b,\xc3\xbc0@Z\xe9\xdf\xd0\x9bV\xf5\\\x0e\xd2D\xebB\xd2u\xf5\xbc\x80_\x91\x9c6\x16<\xb6a\xa2v\xdfhG\x8f\x8e\x11p\x8d\x8e\x13\xe2\xb8d\xaa\xf8\xc8\xb7\xef\\\xbe,-\x1a\n\x06\x1a\xfdd"K\xb3\x89\x82\x12\xf4\xf0\x864\xf7NO\xa3\x87X\xb2~&~=e\xd4\x93\xf4\xd2\xa1\xc1E\xd3q\xc5fah\xfbA\x85BP#r\xcb!Y\xa1dT\xc3T]e\x14.\0\x8en\0"\b\xc6zX\x86\x8a\x0f\x86 \xa2)\x80\x84\xbe0\f5kb\xc8\xe1\xe5\xc3\x14\x1e&\0\x0b\x84\x7f\x1d>\x06)\xc0\x14i\xb9\x1cC m\x1a\xf9\x04\x11\x14R\x80\xa5\x01D\xa4\xeb\0+\0\x13\xa4\xfb\xf0|\x9b\xf2N\x05Sz\xcc\x11bL\b\xce-\xb78I\xd9b8X\xf1g\xbc\xbf9\xed\xca\x9c;"2\xa4\x11\xa3\x82\xcd\xc4\xb8\x06\x1e\xf4\x0b\xa9\x9bh3\x15\n\x99\x0e\xf6\x8c\x89!u\xe0\xbd\xc1\xb2\xc4\xf8\x17\xd4\xc1\xec\xc2D\x7f^M\xcc\xd8\x94\n:\x8a\x10\x0e\xf6$\x8b\x10\x01*0\xd6\x91F\f$)\\q|\xcfLS\x0e\xf5{\xe4\x8b3efte\x98\xca\x1c\xc7\xf2\xea\xf3\xd7\xfd\xcah\'\x8f\x8e\x11p\x8d\x8e\x13\xe6x\xcaT\xed\x9b\xaf\\\xbb\xf8\xe1O\xdd\xbb\xfd\xaa2\nX\xb3\xa9\xd2T\xd2\xa3\xd0\xfc\xeb\xab\xd143\xb1l+V\xc0@o\x96\x1a\xd9<e#0\xd4\xd5\xb3h88\x12@\x95\x99\xe8\x07\x91U\x11\xdbF\x0f\xd0\x01CP\x98\xde\x83\xd6\x1f\xa1#\xa8\bJ\x88\xd2l\x05!\xc76\x91\x97\x8d\xd4\\jsP\xbdc\xe7d\xcf\x85.\xe0\x10=L\xa5$j\xdc}4"k\xb4\x03A]\xd0\xd6\x1b\xbeI%\xe6h*\xd6\x10\xc7\xb5M\xae\x0f\x99F\x87\x14v\x9b\xd4{\x04u\xa6\x97\xabd\xf4U\xf7\x98\x99T\xa0\xd3\xe7\xe6\x06Pq\x0ePd\x07y\x82\xa9A\'g\xd4\x83\xe8\xb2(\0\x14\xa6&WV\x0e\xa3J\xd1\xcf\x8c:\x18jc\xd4n\xccK\x027{\xe3B\x04dh \xc6\0Kh?"J\xab\bj\0g\'\xb4\xd8\xe3\xa5o\xa5\xd7\x03\xd7+3=hNE\xd5\xfc"\nI\xb1\x0f@\xee\xe8art]\xdc)\x14\xdd\x06\x12\xcdQ\xdb\x8a\xca\xfao\xbcp\xcbo\x9f\xbdf\xfc\xc6\xd1N\x1e\x1d#\xe0\x1a\x1d\'\xd4q\xf99k\xae\xb6\x8a\x81|\xec\xdb\xbb\xae\xca4j\xf0a\xe5\xd9\x97\x04\x91\xdb\x8c\r\xbd\xec\xa3B#\xaf\x868\x88.0\x16\x04\x03\x0e\x91\x13D\x9d\t\x83\x1c\x83&"\xad\x82\xb2L\0%\xc7\xcd\x98>tm\x8d$\xb2\xd2\x10%\xd0\x10l\x9b:\x93\x83\xb0\x03\xca\xe8\xb1MR\x06S\x8c\x05\xf9\xea\n\x96\x16\xe7O!2s\xd8h[QO\x91)>\xa6\0+Ftu\xdf\x95T#\x18\x9eWn\xeaP -@M\xa3@\xed\xc9\x1d\xb2\x01\x91"\xac\fY\x83\xf8\xe1\x18*<H\xed\x11\x94\xe33\x06L\xfc{\x96f\xa4\xeb\xe3\xfd\xf0\x1d\xea\x1b\x1c\\\x89t\xa5~\x15\xfa\xda)\x06@\x0eA\x19rY8\n\xdbP\xe7\x11\xa2\xd9\xa5\x02\xb2F\x81P~B\xfd\x0f$\r\',4bE\x83\xb2^\xbb\xbe^\x8bz\xce\xd9`\x16\x94=0/\xac_\xb2\x19\xdbu5\xb2,\r\xe9\x84\xf4\xfd\xca#xV\x91M\xa0\xec/W2\xd5\xf6\xe4]/:\xfbm\x17\x9f\xb6\xfe\x13\xa3\x1d<:\xfe\xb3\x8e\xd1<\xae\xd1\xf1\x9f~\xdc\xb9\xe3\xd0\xe5\x1f\xfb\xd6\x03\xff\xf8\xe0\xc1e\t\xfc\x8aF\x13\x94s\x18W\x80\x05\xfa\x9a8\x94\x11\xe4\b\x92\x19\n\xd6\xaa\x92>\xb70\x19\r>\xe5\x98,FVPy\x07\xe1\x01|?\xd0\xd2A\xbc@\xdd\x87\r\xbdd\xe4\x81B\x9e\x13\b0\x05\xd8\xaf\x99\xe1\x92\x000\xf4Q1e7L\xf9\x95\xa5!]\xd0\xa8[F\xa7\x10\xea\x11\x01X\x88\x95iZ\x8e\x13\xc3^\xf4<\x8b\xa9B\xa6\x1dA\xa2\xb0\f\x130E\xcaR\xcf\xa5\xe69\x92c\x16\x96\x9e\x8c\xe7\xb8\xfaX\x87\x11\x1dG\x8b\xd8Fe\x03)?DN\0-\xb0\x0f9Fd\xa8\xbe\x01\xc2\x06\b\x1d \xb1\x80`\x82\x1e,\xcc\xd8\xc4\xb5\x82\xb0\xae\xcd\x1e1\xdb\xb0\x11\x8b\xa1\xd4\x94k\xa6)#:\xcd\x06@m\x9biJ?\x04\xc1\x1e\x14z\x87\xecF\xc8[\x81\xd4\x81\xc8\x0f\x92O\x06\xb8m\xaa\xd3g\x94\xb6r\xe5\xb9g\xacy\xec-\x97\x9c}\xc5\xa6\x99\xf1Q\xef\xd6\xe8\x18\x01\xd7\xe8\x18\x1dq\x9a\xd5\xbft\xf7\x8e\xf7\x7f\xee\xce\x87\xafzt\x7f\x87\x86\xda\xb3\x8c\x86\x1f\x94\xdaIEG\xcfQB\xe2\x1eSl\xa8\xc9 \xfa\0\x11\xc3\xaf\x19\n<\x80MJ\x03`\x8c^\xdc!\x10\x01\xb0Pwb\x7f\x94\xa1z\x936^\x0e\xa5\x95P"\x0bxG(\x88\xd9\xfc=z\xa5P\xc7"y\x035\xa4\xca\xd4\xb3*\xcbh\x12:\xe4Y\x94\x040S\xcf\xb29\xf6\x03\x8f\x03\xe8Qg\x1e)?\xc8G\xe5C\xc2\x83>6\xc7\xf9a\xa0\xa4\xadQ[ld\x9f \xe8\x0b\xc0 (\xe9\xe7\x84\x98\xaeX\xa9\x19h\x89!,`NVf\xa6\x17\xae\t\xa9\x1a\xcc\xf2\xb9\x041^\'\xc7\xa2*\x07z\xba\xccc*\x92<\x1c\xcf\0Y\x91X\x94\x9a\xc2\xf3\\\xdf\x16S,\xac$l8\xd4O\x04H"\x02c\xb3\xb3~F\xd4\xf1\x1a5W\xce\xdf\xb2f\xee5\x17\x9e\xf5+?\xb5e\xf5?\x8cv\xea\xe8\x18\x01\xd7\xe8\x80\xc9r\x0e\xa4r\xcerZ\xae\xac[\xd5\xe2\xea\xc0~\xa4\xe1\xda\x8b\'\xea\xf5\xe8\xc7\xe9\xc4\xb7\xb7\xed{\xcbW\xef}\xec\xaa{v\xcdN-v\x13\x12"|\xd7\x80\x06j1eaT0\x843\xb3l\xa6\b1\xe4\x11D\x0b\xdb\xb39\xff\xaaJ\xc50\x03=\xc7\xa4\xecr}\x1d\xf4(!\x85V&\x04\x89"2Ttj\x11\xba`[\xb8\x86QXX\x9c\xd7\x05 \b\x02\x87\xa0\xc5\xa9\xc7\xf1\xb0&f\xe7&\xa2\xf2\f}\xde\xe3@H\xdbDv\xa5\x89\xf4\0\x90\xd0\xf7\xb3,\x03\b%\x05\r\r\xf8\x98\xf37z\x83y\xeaJ\xad\xee22J\xb2\x94\xc4\x07D\x86\x06\xb8\x10\xbd\x95\x94\xa4\x02J\xe6\xa0\xef\x83\x0f\x98;\x124\x86\x12V\x95G\0*r=\'\xcf3`\xac\xe8EY\'\xcf\x80\\\x9e\xa1\xdf\xcaS\xc0rX\x13tC\xfc\xec\x9a\x9e-W\fy\xc52\xe0\x95j\xe4\x89\bl\xe3\xca\xb6<\xe7\x8c\x8d7=\xff\xec\xcd\x7f|\xd6\x86\xe9\x1b\xed\x13\xbca\x0b\xd7\xa6\x9bW+u\t\xea\r\xc7Z\xd2\xaf\xc5\x91\xf5\x1a\x01\xd7\twdU\x15\xfc\xedR\xf9\xf1\xbf=,\xaf\xdf\xb9\x90I\x12ER\xcbcY)\x99\x9c\xd7\xb4\x16/\xdf\xd4\xbe\xfa\xc2\xb5\xedO\x19\xbf\xfdD<*\xd9yd\xe9\xbco?\xb8\xe7\xad\xdfyp\xef\x9b\xb6\x1d\x98SPK\xc4Q#\xed\x81\xf9\x07\x90\xc8K\n\xc2V\x85\x89\xb6 \xcd\x84)\xc9H\x97\xb1T\xa3\xdf\xbd\xc0\xe1\x98\x11(j\x80\x01\x88\x9aV\x16\xe5\x04\xc0|\xe0P\x86I\xa1\x87D\n\xc84\xb9\x8e\xa3\x8f\x13I\xfa\x89Q\x93\b*\xf6m\xc1\xe8#\x1a!=\xdd1M\xcd\x96\x9d\x12\xa0\0n\x8c\x84\xc8\xe7+MZ\x13L?\xc7\xa8V\x14\x95a4b)1C\fi\xc8\x8c\xaa\xee%\x01\xc4\x07\xab\x0f"\xbb$\x9fT\x1cj\x89\xc3Q B\xfdL\xa8\xe6\xe1\x9a\x11,\x90x\x82:\x07H\x18\x15\xb4\t5:\x8b\xcd\xfb \x9a\x028C\x11\xc4\xf6,\x0e\xe6\xe4\f\xaf\xc2bJ\xd0\xb2\xcc9\xd8\n\xd2\x10\xd0\xb55\x14\x03\xe31+\x8c\x14\xd5\x9a\x15cr\xde\x96\xb5\xf7=\xf7\xecM\x9fx\xc6\xe65\xd7\xb6k\xc1\xdc\x89~\x9f>\xb6\x9c^\xf0\xcf{\xd3kn[(.\xda\xafQ/\xa4/k\xea\xd0\x9c\xde\xb6\xe4\x8d\x1b\xbd_y\xfeL\xf0\'#k6\x02\xae\x13\xe2X,\xca5\xefX\xac\x0e|aQ\r\xe2\xbc\x9a\xa1nW\xec\xb8\'V4\x10\x1bU\xf04\x93@\x81\xec\xe5\xeb\x9a\xc9\x7f\xbfh\xf33\xd6\xb5\xeb\x0f\x9e\xd0\xde\xae\x1a\xfaG\x0e\xce]r\xfb#\xfb_\xf7\xbd\x87\xf6\xbd\xee\xe1\x03s\xcer/f\x83\xae\x8d\x9e&\xc70\xfb\xb2\xa4`\xc3/\xd2p\x88\x108#\x0b\x11Zj\xa8\xe6\x88.0\xb98\xeb\xa5j\xf0-3\x99\x18Z\x85\x10\x8e\xf5L\xdf\x16~\x17h\x04\x94\xf4K\xd3\xd8\x0b\xd2DdT8\x82\x9aGU\x0e\f\x94\x04LA\xf0\xd6\x05Q\xc23j\xf2d\xf8\xe1\xf5X\x8bs(\x05\x85\xd7D\xdfS\xc6\xba]\xc1T"Rue\xee1e\x89\b\b\xa0\x92\xc6\x86\xe4\xe1\x87F\x9d\x1e57\x07\xfdV \x99\xf8\x18\xa0i^\x17\xf4v\b\x01\xdb\xbe\xcd\xde4\xb7\xe6\xb3\x87\x8d\x11\x1f\xd2\x8f\x9eaR\xe2<\xc9\0DS5\xfb\xbe\xec\xe1\xcf\x06d\x01X\xbe\x02\xdb\xfa\x95\xe3\xf2\xccS\xd7\xdd\xfd\xec\xa7\x9c\xf4\xd7\xcf<u\xed\xb5\xe3\x8d\xda\xec\xe8\x0e\x15\xe9\xa6\xc5\xd4G\xee\xe9\xdc\xf0\xe9]\xd9yGu\xe3T\xd0\x86\xac\x8c\xd4W\xa1\xce\x13\x82__\x9d\x82+7\xbb{?\xf8\xd4\xf6\xa9\xbem\'\xa3\xab6\x02\xae\xe3\xf6\x18\x94e\xeb\x17\x16\xab\xce\xedu[\x9aj\xd0\x96\xf7+N-\xa5Rv;Rt\x96\x04\xb3=\xbc$\x91P\rq\xbc\xdc\x97\xf5\x81\xc8\xc7_\xfe\xf4+.\xd80=\xaa/\x88i\x11\xdeyh\xe1\x82\xad\x8f\x1c\xb8\xfc\x1b\xf7\xec\xfc\x95\xfbw\x1cv:\xfd\x88\xf5,\x0bZ~e\xc1\xe6\\\xb0\x01\xc1\x10\xf4A2@\b\x85\xa8\x0b51C\xf5c\xa4\x04\xe6\xa2\xe7;\n\x18.{\xb9P\x9bB\xaa\x0f\xcfg\x03s\xe10%\x88\xe8\xac\xde\xfcQ\xad(\x1d\x80(\x11\xb0\xae\x06\t&\x92\x1b\x86\xd2N\0#\x07\xfdSl\x033cF\x90\x1aD3q\xc1\xe6`\x8bu-|\x0fj\x05\x01\x85U\xae\f\xe3JpN\x95\xa9\xe1YBA_<\x0e\xc1dQ`D\x8bGR\x05\x143\xd8,\fz\x05\x1b\x9bA\xd1\xf7\x98*\xc4\xef\xd2\xa4\xe4\x10J\x9eof\0\x1c5\xad\x8a59\x05\xab\xd5\x13r\xe1\xd36\xdd}\xd19\'\xff\xd9\xb9[\xd6~\xa1Y\x0bFi\xaf\x1f\x8f\xb2\x16\xe3\x0b\xde\xfe\xad\xf9\xef\xdf\xb5lK\xad\x11H\xae{\xc4\xaa\xe9\x8d\xe8:TN)J3\x8f-OSY\xeeu\xe5\x177:\xc5\'\xce\x9fq\xad\x91\xfe\xd5\b\xb8\x8eW\xb3\xfb\xaeN\xb9\xf3\xef\\{\xd3\xba\xba\x82\x98\xfah\x83y\xbd\x11:\x96$\x9dX\x06\x87g\xa5XX\xd0_v\xc4WC\xd5P\xcf8Y\xe8\xc9\xb8z\xee\x9f\xbe\xe29W\xfc\xd4\xc6\x95#\xf0\xfaW\x91\xd8\xae\xc3\x0b\x17\xdcz\xef\xae\xb7\xde|\xc7c\xaf\x7fp\xc7\xa1!m>#\x90@l\x16\xf3\xb8\xc0R\xf4B\xdb4\x18kd\x95\xf4\x90^\xcb\x15\x040\x9e\xc334\xf8X#\xb6\xc8&-\x1e\x84\x0fN3\xce\x11M\xb9&\xc2AS\xb2F@A\xcd%8\x10\x8c\xd8\x0ff\x91\xc4a\r\xc9\x19\xc1P\x95\x83%8\xae8R\x80\0:CA\xcf\xd2\xa1:\xbcg\xa2A\x90.\xd0G\x86\x12\x18\xa2\xb2$\x8dI:1\xb59\xd0\xeb]\x12.\\/c\xc4\x88\x1ce\x16\x9b\x99\\\x8e\xefJ\xd8,\xc4\xf0\xfc-\xa6C)\x98e\x0f\xc9\x19\x9c\xf0,\x9c`\x8c\x88l\xf5\xd4\x84\xfc\xfa\x1b.\xfe\xef\xcfy\xda\xe6O\x8e7\xc2Qd\xf5\x13\x8e\x9d\x8b\xf1y?\xff\x95\x03w\xee\x8c=i\xaehH\x8c\x94\xefxS\xda\xab4B\xd6\xbd\x13\x83\x1c\x94\x99\xba`\xdc/83\xae\xdb[\x92\xdf>\xab~\xfb{\x9e:\xfd\xac\xd1\x15\x1c\x01\xd7\x7f\xca1\x9b\x95\xa7\xdct\xa4\xba\xea\x81\xd9\xfe\x0b\xbb\x87\x8f\xael\xa5\xd9\xec\xba1\xff\xc1M3\xcd\xdb\xcfX\xdd\xfa\xc6I\x13\xb5\xad\xae\xe93\xfd\xff}|>*\xaey{b\xbdk\xfd\xb8\xc5fT\xb5\x9d\x92v\x14\xb8z\n\\G2\xe9\x1c8(\xe5\xd1E5\\\x1d\xb1\xd3HZ\xba6A\x9eJ\xaf\xd3\x93\rm_\xbe\xfc\xb6\x17\x9d\xb1z\xbc\xf9\xf0h\x95~\xf2q\xc3w\x1ey\xd7U\xbf{\xfd5\t\x06O\x96\x86\xd8\xc0\xc6_\xcb\xf4j\x01|\xbc\xd0\x97255!\x9b\xcc@[\xea\xed\x8aT\xf7$*\xa9$\x01$s\x14\xb0\x8a47\fD\xcb\xd0\xe6\xc3z ^\x80\x9a\x14P!\x95$\x19\xf6>9\xf6\xe3d\x0e\x1f\xcf#\xb5\xcf0\x19Q\x8bC\xba\x0f\x8d\xcbIT\x18mA\xcb\xf4|\xa1\xb18\x81Z\x85k\x80\r$\n\xd0\xe0Ay\'\xa5=7\xd4z/4rK\xa8oE=\xa2\x97\x91\xba\x12}\x7f\xfd\x1b\x85\x82\xcb\x92\xd1\x14R\x83\x04V\xcc\tCK\0\xd2\x87\xfa{\f\x90\xbe\xe4\xd9g\xca\xa7\xff\xf4\xd5\xa3\xb0\xe0\xdf8:I>\xf5\xaa\x7f\xdaq\xf4\x9e\xb9T\xdacmI\x83\xa6\xa0\x83\xc0\x1fk\xca\xf4\x1a_\xc2U\xeah$\x16\'t\xe32#B\xee\xccF\xfa\xbb\x9eX\xf1\xb2\\w\xf1\xca\xb7]\xbc\xaa\xf5\xef\xeeo[H\x8a5;z\xd5\x85\xbb\x97\xab\xf3\x8e&\xe5\xa6\xa4\xaaZc\xbeu\xf0\xe9\x13\xf6u\xe7\xacp\xbfh\xcbh\xe9\x8e\x1d\xa3\x06\xe4\x1f\x8b\x86\xbe\xb4P\xbe\xf7\xfd\xbb\xac\xf7o;\xa0Vf\xf6\xa8\xd4\x1e\xda\xa6\x80r`S\xbc<\xd8$\xae\xff\xd2\xc9\xf1\xe6\x076\xaf\x9a\x90s6M\'\xcf<u\xe6\xda\xf3O\x9d\xfe\x87\xcd\nh\r\xef\xff\xce\x02<Z\x94\x9b\xae\x19X\xef\x1a\x1f\xb3\x04\xack$\xc4\xe13\x90\x1b\xa7\xdf\xb3\xc5X|q\xc4[\xd5\x92\xee\xc1H\x8aA$\x95WR\xcd\xa1\xa6\x86\xf1\xd1\xc3\x0b\xf2\xbb_\xb9\xeb{\x7f\xf2\xf3\x17O\x8e\xd6\xea\'\x1f\xa7m\x98\xb9\xd5\xea\xeb\xd5Mb\x8e\')\xcb\xc2\xd4\xb50\xe6\xa4\xb2\x8c\xf2{R\x19\xbdBl}\xf4${\x90=\xaa\xd8\x9b\x05\x7f\xc4\x0f\\\xd6\x9f\xaa,\xd5(\xac\xaf\x11\x96\x91y\x02y\x03\x93\x98\x91\xa6+\xf2\x80\xf5,\xdb2\x8a\x1d`\xf1Q\xb2\xa92\x12T\x8c\xb3 \xc0\x8b4\x1e\x87JZT\xb9\x87v \xd8\x85`\x1ab\xe4\b\x98\x80U\x912r\x03\xd0\xb2\x07\x0b\xaf\xa7\xe7nA\xf8\xb7\n(aeU\x89z\xf9.{\xc1\x90X\x04\xb8"\x82\xc29\xa1_\x1b)P\x9e\x83c\xb1y\xd9\xa8\xc9[$~T`4\x02\xcaRGZ\xad\xb0;\xda%\xff\xf6\xf1\x07\xdf\xd9\x7f\xcb\x9d\xfb\xe6e\x1c\x84\x1e\xbd\xde\x02e|8\x97}\xbd\xfe\x95/\x1eZ)\xe0$\x04\xa6%\xc3\xc5\xb4j\xcb\x93R\xbd\x8c\x81\x1d\xc8\xff\xb8g\xee\xe3_{~\xe3\xef\xeb\xae\xfd\x7f\xbd\xceyY:\x07z\xc59\x0f\xcd\x95/\xb8\xf3hy\xc5CK\xe5\xd9\xdbz\xa5\x1cZN\xa9\xd4\xe2\x8c\xf9\xba7}I\x06\xb1\x04U\xfe\xfa\x97\x9c\xe4\xc8\xef\x9d?v\xd6\xda\xa6\xf7\xe0h\xa5F\xc0\xf5\xf8\xf1ws\xe5G\x7fm\xafu\xe5\xd8\x84%\xd3\xa5\'\x9d\xac)\xfe\xda)\xf1\x16\xf7\xeb\xe6\xec\x93\xf5\xd7Q\xb7\xf5\xae\xc3sr\xc7\x0fv\x04\x7fa\xd9\xafk6\xfc\xd7\xad\x9di\xcb\xd3O[%\xe7\x9d\xb9\xfa\xc6g\x9d\xbe\xeaoO]5v\xebD\xe0\x1c\xfc\xd7\xa0\xf8\xa1^u\xcb\xfe\xc0\x96\xcd\xae\xa9\xd3\xa0O\bSy!\x94\x9au\xd5\xc8\x86\x99L\xadZ!v\x92H\xff\xe0\xbci\x8e\x85LO\x9aQL\xb6\xe59\xf2\xb9\xef?2q\xf9y[\xde\xf4\xd3\xa7\xae\xfd\xd4h\xc5~\x821(\xca\xa0\xb2\xc0\x14\xf4\x98\xc7s\x0b\xf4x%j$\nFW%\xb9\x1b\x98\xc1e\x88\x13\x98\0\x8c\xf1\xf6Q\nb\x85\xa7Q\x8e\x99\xc9\xe5:\xb9\x1a\x8f\x8c\x9a\x84\x1e\xebF\x88v\x12\x05\x05_|\b\xd9f\xc2\xbe,\x14\xea\xd1\x98[p\0\xa4C0\xcb\x0b\x93\xaa4s\xb4*\xd3/\x05i\xa8\xb4\x1c\xd6\xael\x89\x07\xa9\x98\xbe/}O\xc75*\xf6\nbP\xaap]5\x84NF!\xe1\xa0f\x1b\xe7\xa6\x02\xab\xd1%\xd8A\xfa\t\x8f\xc9\x01z`,\xea{A\xa9Cw\x11\x15?\x92(7M\xd5\xbe\xcb\xf1+\xa0\xd1sX\xa4cz\xc7F\xc7O>\xee?\xdc\xbb\xf4\xd3\xb7\xef;\xb3Q!U\x9b\x89\x83\x9bS#\xec*\xd5\b\xddU\x97\xd27\x1a\x8f\x02Vij\0\f\xce\x8a\xdfv$\x8f\x02i{m\xb9}\xe1\x88|\xf8\xc1\xb9[\xde{\xce\xcc3\xfe\xf5\xeb\xc7EY\xdf\xbd\x9c\x9ew\xef\\v\xd9\xd6\xfd\xe5\xcf\xdd?W\xad\xd9\xd5\xabd\xb1WH\x92\xea\x1e\x95\x81 \x0f\xe9\xea:\xd6\x9b\xea\xc0\xca\x8c\xbe\xafK\xe7\x15\xac\xd0\xbf\xdf\xde\x97ms\xdd\x07>\xfb\xa25\xcf\xda\xdc\x0en\x1f\x01\xd7\xe8\x90\xbb\x06\xc5+\xde\xb3\xd3\xba\xb2\xd9\xb6dr\xad\xc8 t$ZjK\xbc~\xb5\x04\xb9\x02\xc7m\xdf\x91rqV\xdcZC\xbc \xa4\'\xe6\xfa!b%\xd9\xbbsV\x1e\xb9o\xaf\xfc\xfdu\xe5\xa5\xb5v\xed\xd2U\xab\xc6\xe5\x9cS\xd6\xc8O\x9d\xb6\xfa\xb6\xb3O\x99\xbe\xfe\xdc\xd5c\x9f\x7f\xa8\x11\xbc\xf0\x1fJg\xc3\xea6.8\x92J\xa8m \xd5 \x1cO\x91\xf4ciN\x84\xb2b\xa6&K{\x12S\xa3\x81\xd7\x9d\x94\x92l\xdb\xc31\xf1\xceDCb\xfd\xfd\x9f\x7f\xe3\xdeO\x8e\x80\xeb\xdfH\xf5t\xd2\x951@\bRMz\xa5Q\xefq\xd5z\x97i.\x99\x82\x05\f9\xe7fej\xccQh\xcf\xa8\xf1n\xd2\x81\f`\x8c8mJz\xb9\x18\xbdA\x8dd\xa0\xe9\x07\xd0\t\x87*\x15\x85FI^\xcd\x1e\xce\xe32\x91\x13\x1e\x97g\x86\xc5\x87\x94\x8ee\xfb\xfa\x1e%\xff\x96\xa5C\xb6##&0\xfe,\xe0#\x9b\xcd\xf0\xb7P_\x0b\xd5)\xcf\xcb\xe4X\x81\x9f\x1c\x92\xccL\x1d\xb6+#\xf7\x04\xf7\xbf4Od\xaa\x12\xf58\x8a\f\xa3\xefK\xcf\x19\x92NHy\x86-W\x9f\x07\xc0u\x1e\x8f\nq>\xcb\x9d\xb45\xda%?\xf9\xf8\xab;\xf6\xfd\xd5RgY\x1aV\xccq9Y\x7fI\x1d\x87q\xb1\xc3\x86\xee\x1f\x8f\xe4\x1f\x0f\x8c\xcf\x86^\xf9E]\x9f\xc8\xc8bQ\xa2\x12\x8e\x90\xa2Z+l\xc9\x9fm_:\xf7\xb2\xf5\xad\x97\x9eR\xf7\xbe{\xdf\x91\xf8\xa5\x0f\xcfg\x97\xfcP\xc1\xea\x9e\xa5r\x02}\xf5\xbd\xbe.\xe3\xbc\xae\xb3\xaf{\xc6\x8fu\x8d\x01X}q5\xb2\xaab\x8d\xbe\x93\x9ed\x1b\xd7\x89\xb3\xfe$\xc5\xb1\x84\xa9eD\xeac\x1a\xf9\xdfw\xa0\'W~}\xff\xf7\xbfx\xd9\xa6F\xe8\xd8\x83\x11p\x9d\xd0\t\xc2J>\xb0_>\x17\xa9\x17\xb5\xb6e\x98c\x8d\xa9J\xdakCY\x88\xdb\x92\x9d\xb4^\xea\xce\xf3\xc4\xb9\xfd6\xc9\xf7?\xa6F\x04\r4\x10"Ewg \x9e\x1fH\xb8\xa2\xce\xd7\xc9\xd4c:\xf8\xf0>\xd9s\xdf\x1e\xb9\xce\xb3/\xb4=\xf7\xc2\x95\xab\xa6\xaei~\xe0\xe7\xa5\xbe\xa9)-\x8c\xd0 \xdc\xe9c\xd5\xa0$\x1am\xa5\x0b\x89\xf8Q\xa9\xa0U\x17\f\xa4\xed\xcew8\x86>@\x9f\xd1\xc2\xa2\xf4w\xef\x97 \xacK\xb9\xd4\x93p\xaa-\xdf\xba\x7f\x9f<t`\xfe\x92\xa7\xac]\xf1\xcd\x91\xb9\xf9\x97\xc7\xb6\xc7\x96.I ,\xab\x06\x86mS\x90x\xb2Q\x93\xd2\xf5R\x80H{\xb1$\xddD\x82\xa6-~\xdd3\xd2L T\f\'E\xc2\x91`O\x184\xff\x9c\x9c\xe3I|\xdfa\x9d(R\x07\xa6\xdf\xc9\xd5\x88x\x8c\x80H\xf8\b<\x8d\x9a#\xd3\x80\\\x9aA\x95\x90W";\xb0D\xda\xb1b\xbd\xabb\xc7q\xc5H\x0e@f\xb1\xc6\x85\xbaSB@D\x94Td\x85\x04\x81\xcf\x94%F\xac@f)%\x8d\xde\xcc\n3\x93,\r[\xb2\xc8#\x9e#\xce\x15u\xbc\xa4Wq^\x17\xc0\xca\xab\xe9\x9e\x04\xb1\x83\xec\f\x87\r\xd6\x15\xc5\x83-9:7\xd0\xd7+\x02\xfd\xfb\x88\xba\xfdc\xc7\xee\xc5\xe8\xdc\xeb\x7fxpe\b\xc0\xca\xfbR\xc4\x91\xc4i_\xec\xc9iq\x1b\x1b\xd5aL\xa5\xbb\x98\xc9\xcaN \x81\xda\x88\x02k\x8c\x86qud*\x052\xa7\xa3\xeeHnKC\x81\xae\xd3\x89\xe4\xb5\xdf\xdc\xff\xe5\xfaQK\xf6\xab\x13\x15#\r\x1d\x99\xec\x89\xa5{\xc8\xcaSq"\x8d\xa8]u:\\\x05\xa62\x16G\xa3kK\xf7&R\xd3\xb5M\xa7Hx\xcaS$M\x90\x8b\xb4\xd9\x97W\xa9\xc3\x8a\xe8\xbe\xa9kx\xebcK\xf2\x89\xfb\xe7>\xf7\xabO\x9by\xf1\b\xb8N\xe0\xe3\xe6^\xf9\xce\xefu-\xf5h\x84\xe9\0\0\x0b\xfaf\xc6\xd7\xa8AYjJ\x1f\x8a\xe5\xebWJ\xad\xfd"\xc9\xef\xda*\xd1\x83w\x88\xe4\x03}lS\x81K7\x94\x86\xf8)\xa7\x17\xaa\x87\xad\x9e~P\xf79\x0b\tu\x95R\xdd\xab\xf4\x92\xe7JvrSVc\x84\xfb\xb0\xdd5\xcb5\xeaZ\x12\x0eE\xcc\x8e\xf6\xa5\xbd\xaa.\xad\x95\xb6\f\x0e\xa5\xd2\x99\x9f\x17\xe8\x1a\x81\x05\x97\x1d:\xa2\x9e\xdf\xc0x\xde\x89\x82Y?\x92\xc3\xb5\xba|\xfe\xf6G>\xf4\x94W<\xfb\x19#\x93\xf3/\x8f;\xef=z\x85\x90\x94a\x94\xd4\xa1\x04\x8f\x19W\x96\xe3r\x04HY\xba$`D\x8bh>N$T\0\xf3j\x9e$\xfao\x80\t\x80\x88#M\xdc\x06\'\xfdZv\xc6\xde+W7FM\xa3\xecj\xc8&\x04\xa0\xa5\xb1\xae\xbd\xa2\x97\xeb\xb9\x8c\xa2\xa0\xa0KB\b">\xf4zQ\xf0\xd7\x80\x10\xa2\'\xdb\x1f\xea,Zf\xc0%\x80\x1455\x80\x15\xc0-D8g\xd4vY\x9b\nk\xae\x82\f"8Cc\xc3s\xb3\xd4\x9c\'R\x8a\0\xc9\xa4\x9f\x91(\x80\xde,\xdb+I\xd4@\x1a\xf4\xd8(\x17\xdb6\x84\r\xb4\x02\xd8\x1aU\xee;\xd8\x91\xfd\x87:go\xda01\xd2\x1a\xfc\xb1\xe3\xba{f?\xf0\xd8\xdeE\x99\n\xd4\xb1Q\xf0\xc8\xf4>+\x14P\x92\xb9C\x12\xaeZ\xc7\xa9\x05\xdd\x85X\x06}_\xda\xe3\x1a(\xa9\xa3\x82A\xd4\xa8\'\xa2\x9f\x9c\xeb\xaf\x8eE8\xa3\x0eR0!\xfb\xf5\x1e\x0e\n\xbd\xf7\x0f\x1c5\xba\x98\x8c\xb8\xd9m\xc1=d\xe9\xbe\xb1\x06\x99n\x99\xdc\xb4K$}6\x957\x9ey\x9e\xb8\'\x9d*q\x94\xb06\x89\x06tJ\x8a\xe9\xde\xf2\xd4\xc6d \xff\xe8\xf3?u\xff\xd1K_s\xda\xe4\xa6\x99\x9a\xbb\xebD]3\xfbD\x8f\xb7>;\'\x7f\x88\x1a\x85\xd3V\x83\x11\x98\x14\r6b\xa8?Ol\xf0$\x98\x19\x97\xa2\xde\x90\xc1TK\x9c\x8b.\x94\xf6\x0b\xfe_\xb1\xdb\x93\x92u\x17\xa4\xd2\xb0\xde\xc9\x15d\xacD7\xa1n\xbe|Y\rJ\x97\x83\x10\xd1\x97U\xbb\xe0ti\xfd\xd7\x9f\x96q\xbd\xca\xa1\x98"y\xac\xef\xa9\x0e\x1d\xb2\x03\x1c;\xef6-i\xce\xf8|\xdf\xf9\xa3K\n\x96\x1d\xf6\x149\xfa\xe8lvI_\x13\xfdG}\xf5\xaa\x072X\xeckt\x96\xc8uw<rn\x9a\x17\xc1\xc8\xe4\xfc\xe88|tp\xca\xf7\xee<\xd8\xc2\xa8\x0f\x94\x980\xdd8O\xa1\xefT\xe7,,\x07u\n\x0fJ\x18\xf8\xee\xeb\xdf\x02\xe9-\x942P\x83\x84l\r\xc4es\xce\xcaJ\xf5o\xcb\np=\xa6l\xb3$\x93\xc1\xa0#\xbd\xe5\xbeQ\xa7@\xad\x8cs\xbe\x84i:\xd4\x9d@C\x07\xf1\x03\xe9$\xec\x1d\xc52i6r\x8d|\x8a\xa14\x95\x99\x84\f\x10\xcdS\xa3\xb4\x0e\xb0\x82\x9a\x06R\x85\xb6\xe5)\0i\xe4\xa4\x91v\x91%Cc\x97\xa8\x07\xde\xd1\xa7E\x8c\xd8\x10\x99U\x85\x02V\xeaK\xdcUwi1\xe1\x1e\xc2\x84c\x80\x95\xe7\xd7\f\x88\xc2\xeb\xa2\x98\xb0OE\xfb4J\xf5q\xa9>?\x96\xb9\xf9\xae\xdc\xf2\xfd]W\x8ev\xcb\xbf<>\xff\xc3C\x97\xda\x1a\xad\xf6{\xb8V\x89\xae\x89\xde\xa5\xfa=Q\xc7\x11\xec^L\x9eN\x07\x03\x99_*PI\x14\xbb\x81\xda\x96P\xa1\x9f\x12b\xd8\x0b\x9e\xe9\xefjL\xb6\xc5\xa95\xa4Z\x15* \xf5$]\x9c\xd5\xc8yA}\x879\xfdyN}\xdd\x05\xf1\xd2\x8e\xb8\xba\xa7t\x11%_\x98\x15{|L\xed\xca\x8b\xc5=\xe5t\x894\xba+\xa0\x8b\xe9;f\xdf\xe8\xfd\x1f\xaas\x15\xa8cc\x07\x16S\xc7;\x16"\xf9\xe2\x8e\xa5\x0f\x9e\xc8kvB\x03\xd7\xfe\xac:\xf3\x8e\x8e\x82\x94\xc8\xe3\xc3\t\xab\xd2D]H\xad4WV2q\x92/\xfe\xc4\x98"OS\xe2\xf1\xba\x14\xe7\x9c.c/\xbb\\\xc2\xa7<M\r\x90F[\xd12Yl\x9e\x93KM=\xed\x1a\x94\xc3\xd3\xbex\xe3\x9e\xd4\xde~)\xe7\x1a5Mw\x8d >C\x1d\x1dB\xb1i\xc2\xaeT\xa9\xb7C}\x9e#\xf1r!K\xb3\xf3\xea\xb1\xc7\xac\xc3\xc8 \x96ta\x89\xcf\x04[\r^t\xd0\x0ed\\#\xc3{w\x1c\x92\xdb\x1e\xda\xff\xa6\x91\xc9\xf9\xd1\xf1\xed\xdb\x0f\xbd\xf5\xd0\xec\x80u S\x9f2J\xed)\x86M\x16&u\xe6\xf8\xa1~\x05l\xfaES\xb2e\xe9\x9a\xf6-\xe9-\x0e\xd41\xc88aY\xfd\x10qQ\x17\xb2R}\x9d\xcc4\x12\'\0\x18\x8d\xbc\xe3\x81D\xbd\x1e\xc92\xb6e\xeac\xa8watJ\x12\xc7\x94xB\xaf\x17\xa8\xefX_P\xdb\xf9\x1d\xf4{\xd6\xa3\x90\xe2\x8bL\xaf\x18\xd2xX\xdd<\xa1\x8e"\xf4\x13Q[\x03\x10b~\x16\xa29\xf0BP\xaf#\xd0\x01$\xf5<\xa2.R\x96\x03\xd6H-;`\x1f\x19i\xfdHi\xba\xfe\x8fF\x95\xe8F\x1bt\xfb\nr\xcb\xea E\n\xc09\x89\x1d\xb7\xdd\xbe\xe7\xf5\xa3\xdd\xf2\xa3\xe3\x87{\x97/\xbbo.\x95\x99\xd3W\x89\xb7b\\*/\x18jK\xaa\xc3\xd8\xd1\xfbo\xd0\x15\x07\r\xc7I"\xcbs\x91F\xeb\xa8oU\x12\xb4\xa0\xa4\x82\x111\xba\xd7`@@fU\xc7\xa5\xd2}WS{\x91\xfbu\t\xce\xd9\xa0\x8emO\xfc\xde\xb2\xd4\xd4[\xadW\xb1\xf8\xe5@A\xb1\xabQ\xdd\x02\x1d\x93\xe0\xcc\xb3d\xec\x05/\x91rlB\x1d\xdah\x98\xe2\x16\xe3\xe8\xe8"Cn\xac\xde\xa8\xa93\xe4\x0e\xd5O\xf4\x7fE)7\xed\xe9\xbcf\x04\\\'\xe8\xf1H,\x97,A\x16Hd\xe8\xd1\x1a\xf0\xb2\xc4\xd4\xa2P\xbbh\xaf\xaedr\xa3z<Sc\x1a\x91\xb5$\xa9\xd5$>i\x954^\xf42i?\xefe\xe2\x8ck\xf4\xa5\xc6,\x1f\x18\xa3I\xe9\x1f\xdd\xf4\xb5\xb7\xbeL\x82S\xa7e\x9c\x1a\x07&\xdaBa!\xeb\x8b\x99\x8b\x84"\xbe\xe7Hs\x85/\xb5I\xc5\xa9\xae\x1a\xae\x85\x1e\xf2A\xe2\x86j|"L\x0f\xf4%l\x8dK{rL\x9a\x93uN\x06\x8e\x97\x96\bd_\xfa\xe1\xa3\xef\x1f\x99\x9d\x1f\x1d7\xddz\xf0*\x8e\xa7/\r[\xaf\xd6lI{j\x9a=PI\x9c\x1a\x95v\x8c\xe9\xf0\x1cN\xf6u|\x9f\xc3$-\xb7\xa9\xcbV\x93A\xaf\x90\xdeRL`H\xc0\xfaC_T\x9esp%\xa8\xec\xaek"t\xcc\xccB\xed\f\x92L\xfd^dT\xeb-\xd3\x90\n\x95\x0b\x88\xe4&\n@\x83A.\x83~I\xe9\'\x8a\xd2C\x92\t\xe9;l1\x05Dx\xf6\xa6\x06\x07\xa0K9]\xd9"\xe5>!\xa3\x90\xb9A\x8d\xb4\x101\xa5\x03\x05\xa1N\xa2\x80\xa5\x86s\x90sG\xd9n\xcd\0\x16\xd8\x90\xfay\x98\xad\xc6\x90L\xa415JL1\xf3\xa5\x1a\xa6\xa8J\x8cCQ#\xa8\xe7\xf9\x83\xfb\x0eht\xda=e\xb4c\xccq\xfd\x83G\xdek\xaf\x9e\x91\xb5\xa7\x9f&\xd3gl\x96\xf6\xfa\x95\xd2h\x8f\x89\x1f\xd6M\rQA\x06A,\x1c\x89d1\x92\xfe\xa2^c\xdbb\x1f^\x10jt]\x17j[\xba\x85\xc5&\xf04U\xe7u<\x14\xaf\xd9\x94rzRjg\x9e,~\x91\xa8\x03\x02o&\x96\xa2\xab\xb6biA\xacvM\xa3\xacK\xa5\xf9\xac\xe7J\xa2{)\x8e\x13\n\xba\x98I\xdd%3-\xe0\x065\x9b\x1aIc>Ni\x9a\xdcq\xefcn\xdd\xa3K\x89\xcc\xc5\xf9\x86\x11p\x9d\x80\xc7\xa1\xa4:}(p@;A\xcf63}U\x86\xb6af,\x8d\xafF\xda\xd0\x96`\xb2\xa1\xe0\xd5Po*\x90\xc1\x8a\xa6X\xe7?C\xa3\xafWJ\xf8\xd4\xa7\xb1\xc94V\0K\xe6\x97\xa5\xf8\xa9\xb3\xc5}\xf9\xb3\xa4-\x88\xb6\x86\xc6\n\xd1\x16\xc0\x0b=[\x91\x1aE5\xa6hdm\x8c9\x8c\xc6\xba\x0b}5.1Zs\xb8Q\xab~*\xf5\xa9UR\x9b\x9e\x16\xbb\x16\xaa7\x16K\xac\x86\x0b\x8d\xaaS\xf5\xba|\xeb\xde\xbdS\x18\x0522="\xbb\xf6u\xce\xbb\xe3\xee\x03\xe2\xbb\x05\xd9s\xae\x8ft\xa0F\xb2\xcd\t\x99X5#\xf5\xf1\xb6\x1a\x14\x05\x05\x8e\xfb\xf0\xe8\xb9B\xaf\x0f\xdf]\x0f \xd0\xd05\xa8\xeb5\xb6\x15\x1c2\xe9.*\xe8t\x1c3\xee\xc41i>\x80\x17z\xa8\xa8\x14O\xb2\x04fj\x999Z\xb1z\xe5\xa8y%q\xa5\xc0\xa2\x06\xa8L\x99"\x84\xb1\x03\x19\x83rN\xba\xf0hX\x06\x88*F\xe9\xaeH\x18\x01!r3#V \xc7\x903\x1as(\x91\xa8\xd1U\xdf\x17f\x94\xba\xa9\x02k\xc6H\x0eQ\x96e\xd7\x99\xfa$\b{6A\xcbF\x81V\\\x16\xf5A\xc9o\x8c5\x15\xb8W(p\xd7\r\xdd\x1e\x9bZ\xcf\xe9\xc8lG\xb6\xdes\xe0\x8a\xd1\xaea\xfb\x84\xf3\x95\x07\x16\xcf\x9dY\xaf7\xb8\xd7\xd0\x8b\xd8\x16p"\xec\xba/u\x05\x9d\xfa\xe4\n)\xf5\x9eD\x04lg\x1a\x01\xa9\x13\xd1\xef\x16\xb4\x0fh/\x80\xd0\xb1\x8fk\xef\x19\x91~\xe3\xbc@\xebRdjc\x8bE\xf3\xf2\x94\x93\xa4\x98hJ\xda\xedJ\xa2\xd1/\x18\x8b\xc1\xd9g\xca\xd8K.\x13g\xddF\x8d\xe0\x07\x9c\xbbV\r\x9de\x8e\xe3\xc1\xc0R\xddW5\xd4\xcb!\t\xa6\x91\x17\xfa\xfdL\xa7yA\xfb\xd0\xd3h~.\xca7\x8d\x80\xeb\x04<B\xcb\xea\xda\x95\xb9\byl\xe8\xe9H\x15Q\x04u\xb8\x89\xaca\xcdblF\xc1k\x9d\xa5\xd1Q\xc8\xe4va\xdb\x12\xd7\x1c\x89N\x9a\x16\xff\xc2\xe7H\xf3\xc2\x8b\xc5j\x8eI\n\xb7\xe9\xe7_$\r\xdd\xc8\x13x\x8f\xe1E\x06)\x03=\xa2\x89F[\xd9 c>\xa9\x16:\x1cH\x98tK\xe9\xcd-\xb1\x10\x0fqT\x8c~\xf71bC\x8d\x93\x9aG\xf5\xf0\x1a\xd2Z1-\xa2\xd1\x9e\xc6\r\xd2T\xf7\x7f\xa7\x1a\xa0\xefm?0J\xfb\xe8\xf1\xcd\xef\x1e~\xfb\xdc|N\x86 ")\xaf^S\xa3R\xe3\x10\xc4\xd6\xc4\x98\xac\xde\xb4V\x1a\xe3\xe3\n\x1c)i\xe8\x88\xb4\xd0_\xe5P-\xde%\0\x18M\xc2\x86\xda\xf6P\xc1\xa7\x90\xceb_#0\x8dr\x96AY\x1e\xce\xda\x82:;\xc7\x86\xe4\x06\xf4\x86"\xbcf\xec\tT\xd8\x13z\xc5\xa6\x01\xb9 u\x1d#P\0H\x88\xaaH\x95wL\x84\x06\xe6\x1fv\x194\b\xa9z\xa1\x8f\xf5\xd5uG\x90\x14\xeb\xfe\xe8.\'\xd2\xeb\xe89tc\x05]P\xdeC\x13e!j\xf4\xc5(\xdd\xbb\xe6\xfc\r\x83\xd0f?\x10\x8a\xf93\xebV\xc9\xca\x93\xd6h\xe4\xd0\xd0\x88\xbd\xce\xa8\xcc\xbcW.\x99F\xa57\xdd\xf2\xe8;F\xbb\x86i\xc2W<\xb4\\H{\xbc\xa9k\x9e\xc9|gQ\xefK\x05\x90\xc2\x96\x12\xde\x80\xaf\xd7\x1c\xf6\x01N\x0b\xd4M\xacL\xfa\x1a\x95\xc7 \xa2cp\xa8kf\xb8y\xec\x97\x13\xa6\x84q\xfd\x11\x85\xad\xda\xe8\xc8\xf4\xa6\t)\xd4Vd[N\x96x\xb1\xab\xf6\xa1-\xad\x8b/\x91\xe0\x99\x17H\xa2\x0e\xc8@\x9dQ\xd4\xccJ\xdb~|f\x1c#.\xfd\n4\x8a\x0e\xd0\f\x8fF\xf8d\xa0\xf6I\x9d\xd64\x1d\xee\x1d\x97\xf3\xde\xec\x7f\xa7\x82\xcf\b\xb8\x9e\xe4\xc7\x16_n\x0b\x8c\xb4\x1b\x9bJ\xd9S\xa5_\xea\x14Q\xd1\xbb\x1c\x1a!\x1c\xf0\x92[S\n`\n^\xe1dM,\xdd\xd4\xa5z\xef\xa9>\xb9\xdf\xf6%]5-\x8d3N\x17\xffg/\x16\xffi\xebeL\x9fS\'W\xc8\xd4\xb7\xb0\xc3\xd8\xee\x93\x80\xe9\xa6\x91\x95\xbe!\xc5{\xf4};G\xfb\x12u\x96\xd5\xbee\xaco\xe1\xfb\xf4\xc4\x8c\xacX\xbb\x865\x92\x12=A\xea9\xd7\xda\xe3Rbn\x92z\x7f\x85\x82\xddW\xee|\xf4\xb7F\xe6G\xe4\xab\xdf<\xf4:\xceM\x143P\x11\r\xbah(6\xb3\xb3l\xa97CY\xbdq\x9d\xd4\xd5\x90gj\b\xaa\xcae31\xb4\xfe0M\x19\xa3N<\x1f\x80\x10\xe8\xbf\xd5S\xb64B\xcb]\xe9\xf7\xd4\xa1\xe8\xa2m\xc1V\xcf85\xa4\f\xa4\x06\xd9P\x9c\xb1G\n\x055\xdcD\x8e\xc5A_\x86\xba^\x96\xc3\xbe\xad\x92=8\xf8\x82\x01D\xbd\xca\f\x93\x14\x12)\xca\xc2\f\x97\xb49\xcd\xb2\xd0\xf7\x8b\x19\xb5\xf5{\x16\xd3\x8c\x14\xe3\xadB=\xc7&A\x0b\xfa\x85\x98xLQ_\'\xe7\xec1\x03Z.\x19\x87\x98\xff5\xb9zZ&VN\xeac4"\x0b\x02\t\x1b\rF\xa0h\xa0\x86\x01t\xf5\xfcn\xbbc\xcf\xc4\xc1\xd9\xce\xe9\'\xfa\xbe\xf9\xca}G\x7f+ICq\x15\xa4\x12\x05\x85"\xd5h(4\xd0\x91$\x96L\xacY/+\xda+\xc0\xf4!\x03\x14\xcef\xdc\x8d\xa4\xb7Pq\xde\x1b\xd6]/\xad\xf8\xf5\x8a\xeb\x82\xf5\xcf\xd2\x9c\xf7y\xa0\x0b\xbens(\xad\xc9\x96T+W\x89\x7f\xee\x99\xd2x\xfa9R\xb4\'%\xd2{:\xa5\xa6\xb3\xc7\xfe\x1b\xdb1\xb2a\xd8\x18\x88\xc2\x11e\x05\x81G\x07\t\xed\x16 \x86\xa4\xfd>\xed\x02@\x0by\xebIu\xcaV\xd7\xbd\x13V\xfe\xed\x84\x06\xae\xb3\x1a\xd6\x8dO\xf5 \x9bc&\xe0f\x91\x01.P\x8c\x11\x81!}xL\xc9\x11\x06\x06D\x9f\xd6\xa4\x82\xd7jK\xea+\xea\xe2\xd5\xea\xdct\0\x93\xa4\xa1\x86\x0e\xfd3\x17\x9d+\r\xd7\x102pdbH\x19\x88\xb80f\xa9\x8a\n\x929*}\x13\xa8bD\x83J\x96\x8f.H\x11\r\fm\x19+\x92\x14\xec=Z\xb5e\xbd\x82U[o(\xf5\xf6c5Z\xb6z\x80\xb9zp\x9dT\xda\x12\xc8Wo\x7flM\x94e\'tS\xe9\xd6{\xe6.\xbf\xe7\x81\x03\x1a\xb9v\rhy\x86\x80a3\x85f\xa2\x11\xd4\x84j\xad\xb6\xac:i\xbd\x04\x1a\xb5R\xa9\xbd\xca\xb8vn\xe022C\x9d\xe8\xd8\xbc.\xa6\x13\x9d\x96Fg5\x89#K\x96\x97K\x82\xc9\xf2"\xd6\xab\xa4\xaa\x06\xea_\xa9\xaec\xaa^3\x88\x13\xc6\x03\xb6\x99\x92Cd\x05\xd5\r#\xf9dT\xe1Q\xcc\x82.bI\x15\xf8\x98d\x0e\xa4\x05a\xe8\x92\xb8\x94\xe5%\xf5\xe6{\xa2@YJ\x14\x81N\x0f\xb9\xa6\x90iL{8#\xcc;\x16%\xfa\x86\x8c\x01\xf0\xc5\xce\xca\xf2D\xbf\n\x19\x9fZ!\x93+W\xe8c@@q\xa5\xd6l\x88_\x0b$h\xe8^\r\x1a\xac\xadI\xd9\x93\x03\x07\x8f\xc8\r_\xdf\xf6\x9e\x13y\xdfde\x19\xdcx\xdf\xfc\xd9-\xab%\xd6\x11\x91\xc1\xce\x8e\xc8r_\xac\x1e\xe8\xe9\x1a\xed(\xc0\xac:\xe3d\xf1Z\x01\xd5\x8f\xb1\x8b\0$\xb9\x86[\x9d\xb9\x84\xce\xade\xa40\xb9\xf6$\xd2h\xe4]jT\xdf9\x92KOo\xe7\xba\x82\xd9\xaa\x93Z\xe2h\xf4/\x1b\xd6+\0%\xfa*\x81\xbe\xa6:\x16\x8d\x16\x05\r|]#\xaf\x16\xd2\xc1\x82\xb5\xf1\xd5CF\xb4\x85\xb4`\x1e\xf5%\x1b\x80\x9e\xdf\xd7\x7fG\x8c\xb6\xfc@\x9d\xe4\xb2\x92g\xad\xaa\xcf\xb6|gn\x04\\\'\xe0\xe1\xd8V\xf1\xc6\x95\xd5o\xa3\xcf\x02\x9b\x0fX\x93\xf4\x86QW2\xacy\x15&e\xe8\x18\x8d\x05\x05\x0f\xdd\x90\x1aN\xb5WX$L\x84cm\xb1\xd5\xb3\xad0V~\xcd\xb4\x14\xebW1\x92\xe2W\xc5!\xb6\x04/\x1ed-f\xe6\x0b,3\x05/lf4<\xa29Q\x98ZB{\x18\xfa6\xea\x12\xd4\xeb\xb2r\xf3\x1a)\xdd\x92L\xb1\x02J\xe2n q\xac\xc0\xd5\n\xe5\xe1\xed\xb3\xf2\xad\xfbv\x9f\xd0\xf4\xe6\x7f\xf8\xe2\xf6\x8f\xc4\xfd%\xd6\x17\x1c\xbf\xc6\xbe,\xc7QC\xc3ZV\xc8I\xc3\xe8\xa9\x02\xb84\x9auY\xb1f\x86\xfdv\xd0\x05DO\x8d=\x94C2u1\xa1\bo\xd8\xa8\x1b\x06\x17T74\xe2I)\x86k\xbc\xf0~_\xa3!up"\xfc\x1b\x04\x8cAJ\xf5\xf7<Cs1<\xf3l\xd8\xabe\x88\x12\x98\x9c\x8b\xf1)d\x1f\xe6\x19c\xf0(\xce\xa5\x8bi\0\nP\x83\b\xafg\xebk;\x9c\xca\x9cR\xc3\x10\x91T\xc8b?I\0u\x8cPi\f\xa7.\x87l\x88FoZ\x89\xf9\xd9\xa5\x11\xe8m\xb4[2>=\xc9\xc7\xb0\x19\x9a\xf2R\x1aq\xd5\xdb\x1aq\x06T\x88\x87\xda\x0b\xe4\x8c\xac"\x92\x7f\xfa\xd2\x0f^\x97\xa4\xf9\t[#\xbdk\xf7\xd2\xe5\xf7\xed\xec*\xd0\xb78\xc4\xb3w\xe8\xa8Xs}\xbd\xe9=\xc9k\xae\xcc\x9c\xb1^\xafyM\x1d"uN\xc1\x02E\xfd 5\r\xc4I\xa7/\x83e\x8d\xa4K0PM\xdf\x1e\xc8\x88H\x193r\x9e\xeb\xc9\xc2\xa1\x92\xf7\xfd\xc4\x8c:MMu\x800\xa5Z\x1d\x8d\xf6\x9a\xd5\xd2Z\xd9\x90\xe6\x14\xa21\xf4\x85y\xfa>\x1e\xa3\xf0Z\xa3&\xad\x896\x9b\xde\x11]\x15\xea\xdc\xa0e\x06\xc2\x06\x88\xe6\x90E\xc0\xfa\xc21~\xed\xe9\x93o=\x91\xef\xfb\x13\xbc\x8fK\xe4gW:\xff\xf3\xb9\x8dL\x06Y\xc5t \x8a\xabL\x19F\x06\xbc\xd8p:\x9c~dDt(\xffF\xdd\xb2\xb0\xa9\x91\xd7X]|\xf5\xa8\xac\xa0.\xd6\xd88\xc9\x01\xb0\x19\xb1P:\x8e\x8d\x84\x06\xf8\xa8\x89\xcaB+\x8ah\x96zT(\xfcf\x9d\xaeZA\xf5\xa6\xca\x1f\xa5\x8d\xb2\xc5\x81\x1a\xc5\x01\xa9\xb1cS\x13\xd2\x9ajI\xac!\xa0E%r\x8f*\xe3\x18$\x88F\xd5\xcf\xde\xf2\xe05\'\xea\xda\xfd\xe0\xfe\xf9W|\xe5\xeb\xbbW\x02\xa4\xd0\r\x8a\x06bN0v\xdbB)\xe3\xca\0\x16R|\x15-\xb9#-u4\xc6&\xdbf\xa20\x1a\xbe$\xd5\xa7:\xac\x15A\xa1\x84\xb4c\x1f\xc6D\r\x88\x82\x98\x17"\xd5\xd6$\b\xa0\xa9\x19i\xc6L\xc1%\x05\xd0\x94\x81\xa4\xb9/\xbd~!\xdd\x81\x1a,47\xeb\xf2F\x1aA\xf5\x07\xba\xa7"\x056]\xab$SpJJ\xe9\xf4\n\xe9\xe8\xefc<\xb7\xf29\xe2$\xa7\xee!v\x98C!`\xac\xaf\x1b\xd4\xc4\xd5\xf7\r\xa0\x82\x11\x82=\xe8Qy\x01\xfb\x8c\r\xc6t\xb2R\xd6D\xf1\xf9|=\xdf\xf1\xe9q\xaa\xb8 \xfd\x98\xa7\x95\x91\xbc\xc2\x84d\x05s_\xc1\x0b\xa9I\xf0\xac9KJ\xbd\xb1{\xee\xdf+\xd7\xddx\xff\x07N\xd4\xbd\xf3\x85\xad\xb3\x1f\x88u\xbd\xc7\xd6MHgvA\xd2\xce\x1c{*\xe3\xa0\x92\xe6\xba\x19iOOQ\xe1&V#\x10//+x\xa5\x04/\x1b\xb5K5\x0e\xdd#1\xa9\xf1\xa2k\xcb\xb6+d\xf0\x98\x12FzO\xa3\xb2Y\x05\xb7\x9e!Za\xaa\0I\x17\xea\xe06f\x02iM\x8b4\'\x14\xa88\xe3\xcd\b3\xfb\xfa\xb7\xa95\riO\x04\xdc\xc3\xa5n\f\0\x16Z\x19\xc00\xc4\x14\x02\xa4\x0f\xfb\x1a\xb1\xbfz\xcb\xf8c\xe7\xce4\xbe8\x02\xae\x13\xf8@\xdf\xcb\xbb6\xda/o\x16\x99TC\x06 \b\x1a\xe9\xb0\xd6U\x16\xc3\x1a\x97\x80hQ\x11\xbcP\xce(\x1f\xef\xf9\xb2\f)\0\x06\x06\x86\xe1p\x07\xb3 e^\x9f{D\xff\xbe\xa4\xcfO\n3\x85\x17\x94B\0\x16\xa26\x0f\x95U\xdd\x94\xfd\xa3G\xa5\x8c\xc0&,\t^HKD\x07\x96\xe5\xe0\xf6\xbd\xcc\xa7\xa3c~jbZ\xfffA\xaeG\xd0(\x89\t\xac\x91\x02\xdb\x8a\xf6\xb8|\xed\x96\xed\xb2\xefh\xe7\xec\x13q\xed\xfe\xf4\xaf\x1f\xf8\xdc\xd2RF@\t\xd4\xd0\xfbj\xa4mD*V\x8d\xb5\x02\\N\x96\x9c\x10\x11Q\xe46a\xfd\xab=9AP\xca\x0bD\xb2\x05\x99\x83P0p|\xd3\xe0YU\xba\x1eN\xae\x06\xbfF\xf0\b\x1a\n&\xa1o\0\fs\xbe\xb2\x92\xaf\x97s.\x93CY\x1e\xd4"cDP\xfd\x8a\xd1\x13\xc0)V\x80\x83\xb3\xdc\xef\x83\x1e_\x9az%Xk\x8c\xf8\x1c\xf6ya\xc8#h\xd7\xa0\xb6{\xea\xfc\x80\xbe\x0f\xf5\x15x\xe1.\x95<J\x9e\x0f\xce\x11\x04\x01\x9c\'".\xb0\xce\n\xe8h\xea\xf97\xc7\xc7\xf5\xf3\x07\x8f\xb3\x07\x0b~^\xa3\xea\x84\xfe3\xd7kJcb\x86\xa9C\xf4\x99e\xd4\xc4\xcb\xe5\xa3\x7fy\xeb;\x97\xbb\xd1\xca\x13m\xdf,t\x935_\xbamv\xc3\xb8\x82\x93\xdb\xf2e\xee\xe0\x1e\x8d\x9e@~\xa8\xe8\xa2\x8e\xd5\xa7\xa4\x8c\x15\xb4\xba\xb1\x1c~t\x9f\xf45\x1a\x83\'k\xa1\xd6\xa5N\x10\xfa\xba\xe2\xa5\xae\xcc\xed\xedK\xe7PN\xedB]"FfP\xc3@\x1d\x11\x8a7\x0b{S9\xb2+\xe5t\xeb*\x1e\xb0N\xed\xb6D\x82f5\xa4\xd8\x1bB\x18\xd4V&Vz2\xbd\xde"\xa0!\xfbS"\x82OS\x02\x98!dx\x9c\x04\xb0\xbe\xe9\xc8\xaf>}\xe5\xa5\'\xba\xdd>\xe1\x81\x0b\xc7\xd3\xc7\xfd/^\xb9\xa6\xbc1R\xaf\xd8c\xb8\xaf\xe05d\x18\xa2!\x14)D\x0e\nD\x9dk\bbp\xe0\xa3\x1e\x86\x12\x9a9LM\r\xf1Q<\/v\xee\x91X7r\xbfc\xc9\xe2\x9c\x02\xd8\xe1J\x96\x0e\x96\xd2;\x88\x86F\x05"\xc8\xfc :@\xbd#\xc9\x98\xbb\xe6&Mr\x16\xf3\xf3\xce@\xbc\xcc\x91\xee\xf2\x92\xec\xdf\xb9[\xa2~La\xdf\xd6\xd4\xb8\xa4\xb0z(\xb4y\x16\xd3\x115\xdb\x93#\xfb\x96\xe4\xdao=\xf0G\'\xda\x9a}\xf6K\x8f\xfe\xe1\xd7\xbe\xb9W/\x87#\xf5f[\xc2\xd6$G\x92\b\x95I\xfa\x92\x80\xfe\x8e\x9aDn\xd8}\xe8\xbfBJ\x0f\x80\x16\xa8w\xdb\x1c\x1b\x1b\xd6}l\xa3\xacAvGJ\xa4C\xbd\xcbq\x8d*\x02U)\xf4q\xe8\x0b\x0b\xea\x88\x82t-&Z\x86\xd1#\x1ekIpmL\x8d\xc2\b\xe4R\xa6\x07\xd2L\x96\x19\x06i\r\x9bJ\xc1f\xac\xc8\xe7\xa8X\x7f\x13\xcb#\xe3\xaf1\xd1\xa0^"^\xbb\xd6h\x91\xc2\x0e\xd6!RO\xaeo\x94\xeb\xc9\x03\xd1(\x0b\x80\x85\xfc3?W\x85:V\xd3|\x16\xb0\x04@\x05\x82\x86ae&,#u\x89\b+\xd1}\x06\x8f~b\xe5\x94^\xabqS\xb8\xd5=w\xef\xbd;\xe5\x7f\xfd\xe9M\xb7\x9ch{\xe7\xba;\x0f~p\xfb\xbe\x9e\xacnNJo\xf7\xb2:\x16\x07\xc4n\x99V\x95pr\\*\xc7\x96\x81\xde\x87\x87\xf7\x1d\x90\xe5\xa3\xf3\xe2\x0eR\xbdw\x97\x15\xb8b\xc9\xfb=\xbdo\x91\xdeO\xc8\x04^>4/\xdd\x83\x8b2\x98]\x12\x89{$e\x84\xea\x99\xfa\xba\x8f\xba\xb3\x8brd\xcf\x9c\xf41\x1cvQ_\xa7\xd50)\xc5a\xd9\0\xceq\xb4\x04BV\xa9\x11\xb3-u\x80\x1aI\xcb\xc63.\xb3\xcc\xf4\x93\xa2\x9e\xa9\x8eM\xae\x91\xf2\xbb\x9e\xb9\xea\xc3\xab\x1a\xfec\'\xba\xcd\x1e\xa9\xc3\x0f\x8f\xb7n\xf0~\xee\xabKY\xe7\xa1*\x10\xcf\xb1\x98\xf7\x06Y\x03U\0P\x94\xa1,^\fM\x93Kj\x98\xa5\x1bO7t\xb7+\xad\xba\x1a\x85\xa9\xa6\xe4\xdd%I\x1e\xbeO\xd2\xdd\xeb$Y\xb7J\x9cb8\xd6\x96tB3{\xc9\xc92\x8e\xa4(b\xe6\x948\xca \xee\xc5\xa4\xbd\xda\x88\x12f\xbbR\xaf\x05\xec\xf3\x99\xdbwH\xcaANV\x9c\xad\xde7Fh@\xdd\x01\xd5\x194\xd4fz\x82\x8dVK\xfe\xe6\xcb?\xb8\xe4-?\xfb\xcc\xa9V\xe8\x9f\x10\xc5\xda\x87w,]\xf4\xc1\xff\xfd\xf0;!\xb1Tk\xd7\xa4\xb1b\x15=\xd2\xaaX\x92*+\xa9\xbf\xcf\xb6\x86\xa4\xcf\xc6^\x1a{\xd8\xea2\xd1\xc8\x18\xc4\rW\x8d=\xfa\xb6\xba\xd2\xef\xe6\x92\xe8\x9a\xa0\x96\xe4\xb0\x89\xd7\x15\x9b\n\xba6{\xac@~\xb0\xbd:\x1d\x1ahP\xda\xee8\x15\'\x1d?5\xea\'\x92\x0f\x81\xcae\xf3\xb9i*.\tl\x16Ybb"y\xd0\xe9\xa9\xea\xe1\f\x7fvI\xc9w=5tu\xdf\0\x0ekS\x1a\x89\x15H\x1b&L=\xa1q97\xa3\x96\x05\xb34J\xcaDelt\x05\xb0!\xed\x196k\f\xff\x01Te\xe93\x15\x88H\xac\x02\xd1\b\x11\x97\x82\x9a\x19\xbd\xa2\xfbt\xf5\x1a}\x8c%\xdd\xf99}~)\x9f\xfa\xf4wO\xff\xe9\x0bN\xbd\xeaE\xff\xcf\x19\x1f>\x11\xf6\x0e\xe6`\xfd\xd57\xf6\xbd\xde\x1boI8\xe6\xc9\xa1m\x8f\x8a\x9d\xf6u\x15q\r\x03\x8e\xc4\x19h\xb4\x94\x0f\xfa\xd2]8\xa2@\xa2\xce\x81\x0f\x80Q\xe0Z\xe10}\x18-9lq\xa8\xb0\xc6h\x8b\xf0]\xd3\xccn[\xff\xd2\xa0\xeaz\'`\x19\xce\x1e\x90\xaa\xdb\x17\xaf\xdd\xe2\x84\x01\xce\x18\x85s\x9cT\xaca\xf9M\x9fe\n\xfc\xce\'\xc9C\xd8v\xc1\x9e-D\xe2\xba\xb7\x07y)/\xde\xd8\x96W\x9d\xba\xe2\xea\x91\xb5\x1e\x01\xd7\xe3G\xcdq\xba\xef\\W\\\xfd\xe6\x1d\xc5\x87\xec\xbaC\x87\x1a\xc6\x0f:vy\xd3\\)\xf8\xd4\x14\xd7\x80\x1d\x01\x98)x\x14\xea}\xb9c\xa1\xb4\xa7lYZ\xd1\x96E\xe4\xa5o\xff\xb6\f\xce\x7f6\x1b\x87C\xc7l\xe0\x8aC\x031F>\xa7\xb7\x96u\x07R\xf6\x06\x04\xb0r\x1037\x9e\xcfu\xa4\xb1\x88\x06HW\x02\xf5\xb4s\xfd\xdb\xbc\x82W_\x8d3j\x1c\x88\x060\x95\x17\xc8i\xe9c2\xf5\xc0k-O\xee\x7f\xe4\xa0|\xe6\x1b\xf7~\xfc\x97^r\xde+\x8f\xf7u\xea\r\xb2\x89\xab\x7f\xe7\xde[\x0e\x1d\xea\xc9x\xdb\x91\xb1\xe9\x19q\x020\xbe\x16\x14\x88\f\xe1\xa5\xe4(\x91\x01W\x8b\xaa\x12vA\xe3\xcd\x14\x9dh\xf4\xd1\xc8\xc8$l\xb6C\x0e\x9b\xcc\x12\x8f\x92K`\x01B}\xa2\xa0\xbe \x9a\x88\x03\x8e\x95\x80\xc7\x8b\xe7Zn\xc1\b\f\xf9\xbe\xd6d \xf1\0\xa9\xb9\\R0\x04\xd1<Q\r\xd5+\x86\n\x07\xc3\x8e\xaea\x82\x19\x7f\xf7(\xd1\x04\x05\r\xb0\xc3\xf0\xdaa\xcdat\x84\x9a\x14"C\xcc\x13c\x8d\x03\xba\x86\xb9\x89\x02)GF\xb0\xab\x98..\nl\xc6R\xcf\xbfF\x1d;q\x12\x12\x89P{C\x83+^\x07Q<\x06LR$\x18\xd7\xc01\xf5\xb3z\xab&\x13kW\xf2s,\x1f\xde/\x83\xe5\xae\xfc\xc6\xfb\xfe\xf9C\x9b7N\xdd\xbee\xd3\xf4m\xc7\xfb\xfe\xb9\xfe\xee\x83\xef\xfd\xee\x81\xae\x9ct\xd6\x19\x12KOz\xe9,)\xe9`\xee:M\x8f\xd2_\x10\xdaM\xb3e\t\xd4y\xady>\xd3\xb3\xde\xf2@"E\x17gL\xed\x01\xca\xd2H\xe1\xa1\xb0\x85\xda!\xd2\xba\xd8#\f\xb8\xab\xc7\xa9\xc8P\xc4\x88\x14\xb0\x8a\xed\x0f\x8a\xd5\\-\xb5\xb1\x06ka\xc51Y\xa7\xd2L\xb8\x86\x1ef\xd2\r\xa4D\x0f\xb4\xfe\xc1\xc5\x0b\xa1\xe7\x0f%\x05D\xd2\xba\x1f\xdaz\xff\xff\xfa\xb9+\x7ffd\xa9G\xc0\xf5\xff9~f\xda\xfb\xf0\x0b\x8e\xa4\x1f\xfajlc/2XJu\x93\x0ej\xba\x81CK\x9aF*\xccD`\xc3\xc6e\x90-Rp_\xb3\xa6\x82\x8dn\xf2F[\xaamwK\xaa\x1epo\xf3ib\xb7\x1bF\xb2\x05V\r#.\x10\xfeCY\\\xbd\xba\xac\xd3\xd3\xe7#/^H\xde\xeb\x8b}\xb0\xab^q\x8b\r\xa9vhKP\x04j\x882\xf5\0;d\xaa\x81\xf5a&\\X$}\x80a\x98\xe7\x03\t\x82P>\xf27\xb7\xbc\xe2\xd5\x17\x9d\xb5f\xa2Y;x<\xaf\xd1\xff\xf8\xd0}\xdb\xbe{\xc7\x9cLM\x05\x1a\x896\x18\xe5$=\x05\xad^G\x8d\x80\xa3k\xd6\xa3\xe2\x05@\x0b\f?H3\x89\xa5\x91\xae\x9f\x90\nO\xb9$R\xd7+\x16\xcd\xd3$\xa2\xa1\x87\xb4\x93\x91f2C\x1e\xa1e\b\x05\xf6\n>6$x\xa0\xed\x8f\xb9W\x88`\xd4m\x0e\xe0%\x87\xb1\x82VJ\xb2\x04\xa6\xd62\xf2B\x039\xf4\x05Q\xffRP\xb3\x18Y\xa1\x05\b=`\xa6\xaf\f\xd1]\xa8\xcf\xc7\xe3@\xa8\x80\xaa\x06^\x87\x12\f<\x87\x82ZydJ:\xb6\x99\x94\\\xa6f\xc22\x14\x1c\n\b\xaf\xfa\x1am\xd7\xc9\x16\xcc\xa2\x94J\xf2i\x04#\x18S$V\n\x93\xcaD\r6M\x12\x02\'jci4 \xad~b\xf54\xa9\xf2\x8b\x07w\xc9\xceG\x0f\xc8\xaf\xbe\xe7\x9f\xbes\xed\xa7\xde4\xd9\xac\x07\x8b\xc7\xeb\xde\x89\xd3\xbc\xfe\xfb\xd7>\xfc\xde\xfa\xd4\x94\x8co\x18\x93#\x0f\xefd\xf6"\xaf\x02F\xb4%jN\x85iU\x01\t\xc3o{tf\x8a8\'{P\x96\x16\xa5p9:\x94\xd7\xd9\xd2\xb5\xf30l\xb2\xd2(7\xb3\x8d\xb8\x7fe\x14J\xd0\xe8\x8d\x06\xf2d\xe7#"s\xf3\xe2mz\xa6\x84\xa1K\xbbQ\ri\xf4\x14MQ\x8f#\xeb\xa5\x12ujRL8\xc3\x1a{J=L\xd48=u:\xba\xea\xac\xfe\xe2\x19\xe3\x0f\x9f\xb9\xa2~\xd3\xc8J\x9b\xc3y\xdf\xfb\xde7\xba\n\x8f\x1f\x96\xac\x0b\xaa\x07\xfe\xf9Hu9\x86\xc3\xc1s\xa2\xd2Jf\x06\xff)N0\xa4g\x06PmA\xdc)$^V\x83\x99&\xd2\xa8\xb7%Z\xecJw~^*l\xf0\xc7\xb6Q}\xa3\xc2\xec\xa5\x92\x83\x95\x98\x1b\x87Xg1\xd0H\xab\x0f\xd1\xc2\xd4\x88@\xc7\x91T;\xe7\xa4\x01\r\xf9\xd01\x93kQ\x13AN\x01\xa3)\xa2\xe1hv\b\xbbB\xe1\x015\x18\xcf\x11\xdf\x0bH\xad\x0fl_\xf6\xee^T\xe3\\\xbd\xe4y\xe7m\xf9\xe8\xf1\xba:\x7f\xfc\xc9\x87n\xf8\xe8_\xee~\xda\xaa5\x93\x126\xd4\b\xc7]Y<rD\xa3\xe2\xae\xde\xe8\x03\xcan\xd1\xe1e\xa8\x93\x0f\xc5RAVHM/U\x85\x9a\x0f\x86\xf8Y4\n0\xec`\xf3\x01pX?\x12\xa3\x1d(\x0eR4PY\x0f\xc90\x04\x80`\xba\xb1\x87\xb5\xb1\x1c\xaa\xcb{\x81\xcb\xc7B\xc87\xa8{\xa6\xd7\n\x8d\xc1\x10\xbde\xc3\xaf\xc3\xb4\x9eI%9\\7?\x04P\xb9\xeay\xd7\x86\x80\xe6\xb3\xe7\xac@\x9d\xad252\xa4\x11\x0bj\n\xb9dE\x1aJ\xbd\x01\x1e8Lh2\xc6k6\x9ac\x124\x9aLI\xa6\xa0hk\xd4\x97\xf4\xba\x92j\x14\b\xe9\xb0\x8a\xc2w\xf6P%\x13\xff\xce\xf8Z\0\xe8\x9c\n\xf8\xc2\xf7\x06\x11\xc4\xd6s\xdd\xb6m\xbf,v\xe2\xb7\xbc\xf8\xf9g\xfe\xfe\xf1\xba\x7f>r\xfd\xf6\xeb?\xf3\xfd\xfe\xe6S\x9f\xb2Io\xb9%\xe9\x1d<BQ\xdc\x02\xd2\xee\xba6e\xa0\x8eG\\\x88\xa3_~\r\xd2M\xc3\x9c\x9e]\xb0u\xc2A\x14\xab\xf7:\xd6\xd9\xb5\xcc$\x01\x18\b$\x10I\x97\xc7u\x87#\x14E2XX\x94h\xc7v\xa9v="\xf6\xdaS\xc5Yy\x924\'\'el\xdag$\x9d\f\xa0\x98c\xec\x07R;\xb5zM\xea\xba\x16\x83\x85B\x16\xf7\xcf\xeb\xdf{\xe2\xb1\xabYd\x85\xbe\xdf\x1f\xfc\xf4\xba\x9f\x19\x0f\xdcC#\x1b=\x02\xae\x9fx\xac\t\xedm\xdb\xba\xf9\xbb\xef\x8f\\7\x84f`aXi\xacw\xc5\x86\xb8\x81>NQ\xaf>\xe9d\xba\xf1\x96\xa4\x8c\x07\x1a\x91\xa9\x01\xea\xf7$\x9a_ \xdbK\xe6\xe7\x14\x8cv@AFR5v\x04(x\xce\x9c\xb9a\x1a\x1a=[\xcdTW\xa3\xae]K2\xe6\xb4\xc5A\xfa(\x1d\xa6\x9c2\xccx\xb2X\xda\x80\xd7_b\xfc\x85\xbe\xa7\xad\x06\x13\xa0\x85)PNe\xd3\xb0"\xf5X\xd3H\xef;w<0u\xfe\xd9\xeb;\x9b\xd7M\x1dw\xa3\xbd\xbfv\xeb\x81\xab\xde\xfd\xc1\xfb\xael\x8d\x85R\xd3(6\xea.K\xdc\x9d\xd5(\xa6\xc3\xf4\x1c\xf24\xf8\x0e\x89%\xab4\xd2Y\x95\x8b\xa1I\x99\x91i\xaa\xe8\'SbI\x86J9\x15\x9b\x82=\xaa]\x80\0\x91s\xb0\xa4\x01\x1c\xac\x81\xa3^\x8a\xaf\x11\r\xbe\0Z\xf5\xb6\x01(\xf8!x\xaf\xa0\xe6\x91a\n\x04C\xbd\nd\x0e/\bL\xbf\r\xd2J\xbe\xb0)\x19\x85u\x8c\xa5@\xca\x91lA\xf4\x9b\x05.\x99\x80\0T\f\x92D$\x16\xb6\x02Fz\x94\xa4\xf2LM,\xe7\x98\x13\x93{*)5\xe5\x93h\x11\xa0\xa9\xd5\xd1h+\xed\xd1\x98B\xb5\x9eb\xc2\x90,\x02\xb8\x069\x01\x1a\x91\xba\xc3)\xc8\x19#M\xd4\xc5\xc0\x9d\xcduC\xe3\x1a\xa2\xc99l\xb6\xd4?\xca\xe4\xf6;\xb6\xd7\xea\xad\xf0\xd9\xcfz\xe6\xc9\x9f9\xde\xf6\xcf\x0fw\xcd_\xf6\xcb\x7f\xf3\xc8o\xad9\xedL\t\x02[\x16\x0e\xef\xa3\x18@A_\xc76\xf8\xd4\xa7\x97\xaaQ\x94\xa5\x8f1Q\xb9\x9d\x94F\x18@#wO\xd7\xab\xa1`\x92jDfY9\xb3\x84 V\x98ai\x19\x05\xb2\xa1t\x01BG\xb2\x7f\x8f\x94\xbb\xb6\x8b\xdd\x9e\x16w\xdd\x16\xf1\x9am\xdd/uiO4L-\x13%\xeeEu6:\x1d3\x97\r\xfbo\0"\xd7\x02\xe9\xf7\x88\xb4\xb1\xff\xbaI&oz\xca\xe4\xd6\x9f=y\xf2\xb7G\xd6\xf9\xc7B\x8c\xaa\xaa\x8e\xfb\x0f9\x97\x94\x1b\xee],.{\xe8h\xfa\xc2\xf9A\xb2A\xa3\x14\xa7\xed\xca\xec)\x13\xc1mO\x99\fo\xde8\xe6o\xf5\x1c\xfb\xf1\xa9\xb0w/g\x97\xbdr\x9b\\g\xa1\x1d\xbe<\xe6\xc2\x0b\xebP\xaeF@(\x98\xa2>\x11u\xfa\xd2=\xaa^[4\x90\x06r\x8b\x1a9u\x0f\xcfJ<7/\xf9\x81}\x92?\xb6]\xea\xba\xf9/\x7f\xd3\xcf\xc97\x0e\rd0\x1cAQ\xa1\xd8\x1e\xa5b-\xab\xf7\x16[l\x12\x85\xedM4\x12c\x9a\0\x866\xab\x98\x17\x84\xa7\x97\xa97\x9d.%FGm\xa8Q\x17X\x1eo$Daq\xb7\xa3\x86\xc9\xd7\x97Le\xd2\x1b\xc8\xcd\x9f\xfco\xcf:e\xfd\xccq\x03^\xbb\xf7\xf7\xce}\xe5\x9b\xbf\xf5\x83\xb9\x8e\xe9\x9d\x1b,-`\xa0\x88\xde\xdc]\xbdD\x0b\x04\x9f\xa20\x03\x19Q \x87\x07\\Z\xfa\xb3[r8c\xa9\xebRVu\xb2\xb2\0*\x9eWQM\xc2W\x0f\x97"L\nn\x85\xa2Q\xb44\xe0\x1c,\x14"\\\x17RN\x0e\xb5\x0f\x1b\xe3M5d\x0e\'\'c\xccD\x16W\x14\xd5e\x83p`\xd2\x83\x18\x1b\x82H\xc7\x06hYh$\xce\xa91\x88\x94\x8f\xaf\xeb\x156|R\xd0\xd18\fqe\xc0G\xdc+\xd5&\x964\x9aA\xc3e\x1fZUz\x14\xcaM\xfa\x91t\xd4kG\x1f\x0f\b\x16\xe5\xf0\xb5\xdc!\xfb\xd0\xf7\x9b\xec\xebC*9\x1d\xc4\xec\xedC\xfd\x0b\xa2\xc1\x9e\x9b\x83\xb0\xa8_\xea\b\x81\xac\xc2\xbe\0\xcbDk2l\x94%\xd1\x03\xc0\xa7\x06\xb3\xcc\xb9\xa7\x07K]\x05iW\xfe\xe9o~\xe9\xcd\xcf\xbd`\xcb\xa7\x8e\x97\xfdsdi\xb0\xe9\xbf|\xf8\xb6\x9d\xfb\xad5\xb2j\xed\x06\x99;\xb4]z\xc8\x94hd\x85u/\xf4\x9aV)&2h\xc4TW@\xc2\xac-\x80\x16\x15\xfas\x92}\xe0h\x06a(\xf5f]2\xfd[_\x01\'+S\xa9\xd4a\x81\x83\xc9hYmE[\xc1\xe6\xa7\xa6\xeb\xf2\xc5/|U\x12/T\xd0:M\xfc\xd5\x1b%\x9c\x9e\x91\xfa\xc4\xa4\xb4WNP)\x03\x82\xcf\xcbs\xcbjC:\xacw\xa1\xcc`\x83\r\x9a%C\xe90!\x01\xab\xe9\x94r\xe3e[\xceY\xdf\n\xee;\xf6y\xa2\xa2l\xed\xea\xe7\xe7m\xeff\x17\xed\x8d\xabs\xa3\xb2\x1a\xaf\xb9\xd6\xd2\xc6\xa6\xb7\xf5\xcc\x96w\xd3\xa6\xd0\xbe\xdd\x1e\x01\xd7\x93x\xc3&\xe5\xa6\x8f\xef(?\xf7\x85\xdd\xd5\xb9\xb3\xbd\x9c#"2\x8d\x8a\xb2\xc1\xb2n\xda>\xa7\x89\x8e\xa9Wz\xdaT(/\xd82v\xdb\x0b6\x8f\xff\xf19\xabZ\xd7\xb9\xb6]\xbc\xfb\xb1\xb4\xfa\xcbYK\x9a\xae\xa1\xc33\xf4:\xe6Y\x81\x9d\x81\xf4\x92\xbaM%\n\xf30\x8c\xe8\xd3@\xa7{\xaf/\x83\xa3\x0bR\x1e9,\x83=\xfb\xe4\xe9\xab\xdbr\xfd\x9f\xbc[^\xf8\xa1oJO_c|\xaca\xa8\xae\xfa\xe5\xa4f`\x1c\fG\xdeK\xd4c\x8e\xf4\xe5c)\x06\x19\xeb.\x1c\xd5^\x98\x06\xda"\xc9\x98\x96\xb2\xd5E\x84\xc6\x9e\xe7\x0646\xa8\xa3\xc0\x13\x1f\xe8\xfb\xd6\x1b-\x99?tT\x9e\xba\xa6)_\xfe\x8b_\xda\xb2r\xaa}\\\xd0f\xdf\xf0kwT_\xf9\xfan\xa9\xd7+\xd6\xa4\xbc`\xa0`\x8fq\xe6\t\xd7\x13\x84\x15\fMD\x0f\x03j\f\xd0\xf5C*\x0e\xe0\x05\x15\xd422\xbd^`\xd6!R\n\xdb\x8e\x84AK\x01/ -\xdd\t4\x9c\xb6u\xed\x96c3\xb9\x98d\x0e\xd4\xc0\xc6\x18M\x8dM\xb5\x98\x0eD\xd3y\xa3YS\xe3\xe2*x\r\xa4\xdf\x1d\x90\x98\xe15@\xe8p\x98Jf\xb2O\x9d\x1a\xc8B-\xcfc\x02@%\xb5\xbaK@\x801\x8a\xfa\xa4\x93IoA\x01)*5RF\xba\xae\xa5\xe0X\x13\xb7\xe6p\x94M\x99\x14\xd2\x99\xefJ\xaf\xb3D\xef\xbb\xbb\x84\x81\xa26\xd9\x91nh\xb1Xo\x15M\x05\xa0\x80i\xbf4\xeb\x10L\xab\xc2a4\xae;J,\xd2\xd7\x14\xc81\xf6\xbd2\xb3\xb8*6\x91\xb9L5"\xa5\xe9\xa9!\x86l\x14\xf4\x11\x93\xd8\xe1\xfe\x1et\x96\xe5iO\xdf,\xd7\xff\xc3/\xaf\x1ao\xd7f\x9f\xec{\xa7\x1fg\x13\xaf\xfd\xe0\xed\x0b\xb7\x1fIe\xed\x99\xa7K\\E\xb24\xbbW\xf2\xb8`:\x17\xf5\xa6\x02\xe4\x9e\xb8d#\xb0\x15\x14\xba\xce\x1a\xd9"M\x8f\xfb\xdd6\xe3E\xe0\xb8\x84\xf5\x864\xc3\x86X\r\xbd\xfei\xa5\xdbM\xedI\x88)\xd7\x1e\x1d\xd2};\x0e\xc8)\xad\xba\xdc\xfc\xeb/\x92g_\xf9\xfbr\x7f\xb7\x92\xfa\xcau\xe2N\xae\x92pjJ\x1d\x9f\x06)\x83&\xaav)\r\x86/\xd32a\x8a_\xd6\xb1\x06Q\xdd\xc7]ub\x7f\xe3\x193\xf2\xeb\xe7\xae\xb1\0Vw\x1c\x19\\\xf1\xf5\xfd\x9dw|c_\xf7\xf4\xdd\xddL:j\x1bR1\xfb\x01\xa1?\xdaA\xc6Z\xbe<ke]\xde\xbe\xa9\xf9\xb6\x8b\'\x83O\x1c\xaf\xb6\xfd\xb8%gl]*.\xbf\xf2.\xf9\xc7\x9d\x03[f&E\xd6\xad\xd6\rS\xd4$\xed\xb5\xd4\xb3\x9e\xd40}\x99\x91J_\r\xdf\xed\xbb\xfbr\xdb\xc3K\x17~8\xd8w\xe1\x19k\xebr\xe9\x96\t\x05\xb3\xbaLd\x9e$U\xc8\x02.\xe7\xe1TF\xf5\xbb\xca\xd2\xa1\x1e\x94\x1a\x88\xd4\xd4\xac\xb2\xde\x80r0\x19\x9a\r\xb9\x19m\x16\xf4_\xfd\xe2g\xcb\x0f\x0e\xf6\xe4\x88\x1a\xcdU+\xa6$\x84\x90+\xbc_\xbf$@\x15 g\xa0AY\x8d\x1djZ\xa8uX\x85~\xc7D]\xdc1\xa5\x19"\t\x06\xa3\xa3\x1e\xb53d\xc7\xd9lYB\x1e\xd2Ty\x91\x86\xeai\xa473\xb5B\xee{lN^\xf6\xc6\x8f=\xfa\x85?\xff\xc5\xb3\xd6\xad\x9a|\xf0\xc9\xbc\x8e\xffx\xfd\xde?\xfc\xda-\x87\xa5\x1e*h\r\x16\x14\0R\x05.D\xa1\n\xf2\x1a\xe9B/\xb0\xcaz\xa6W\xca6zrP$\xc15r\xec\x15zij\x8cR\xa1p\x80\xb2\x11\x0b\xe2\x95G\x92\x03@\xc00=3\xd6{jz\xd3#B\x8b0\x99\x1aJ\x1a\xf5\xa6\xbe_(\xcd\x89\x86FgF\x91\x1b\x91\x1a\x1e\xe3+\xe0\xd4\xc7\xeb\x1c\xeah\xfb\xa5\x19<\xa8\0j;\x15\x1d\f_\xdfh|\x95=\x1cJj\xb4\n\xe3^J\xad;4\x96\xc6\xea\xa8 rF\xaa\xae\xe2\xc9{\x94\xa1\x823\x12\x8e\x85\xc3.\n\x8d\xa2\x06\xfay]\xf5\xec\xd5\xf3\x06\xa9B\x863\x9b\xf2"Q\xc0\xaa8b\xde\x907\xf0\xf9L\xdfX\xe5\x98Q9e\x1f\xd7\xa3K\xe0b\xcd\x0f#Z\x14\xe0a\xa4!\xf0\n\xa93\xaf\x86\f\x82\x02\xb8^\xdf\x81F\x80a=\x94\xbb\xef\xde)\x1f\xfe\xb3\x9bo\xf9\xc0o\xfe\xec\x19O\xe6\xbd\xb3\xd8\x8b\xd7\xbc\xf9wn;p\xc7\xf6BV\x9d\xb1\x9a\x91zT-\xe8\xe7\xd7k\x1fi$\x8e\xb9wu\xbdn\xa5\x19Ucq\xac\x10\xb4\x97L\xef\x0bR\xae6\x06{\xea\xe3\xdc\xc0\x97\xc0\xadQ\x9f\x14\xe4\x1c\xf09\xfc\xb6\xde\x9b\x01\x86\xbe\x9aJb\xab\xd5\x95\x87\x8e\xcc\xca\x1eu\x80^\xf9\xfc\xf3\xe5\xde\xcfo\xa5\x1d\xc0=\x9e\r\x12\xfe\x1b\x8fc}\x9alW\xcb0\x11Y\x1b0\xe7|,\x90\0\xb3u\x8d\xbe\xefZ\x8d\x06\xdf\xf5\xed\xdd\xd57\xf6,\xc9\xa3G"\x89\x90\xb6\x84\xb6&\x14\xe2\xd5\x81\xad\xdb\xc3\x828\x87]\x96\xd2Ug\xe5K\xcb\x03\xb9i\xdf\xf2\xc7\xdf\xf1\x94\xc9\xb7\xbf\xef\xd4\xf1s\x1c9\xfeT\xe4\x8f\xcb\x88k[\xbf\xb8\xe4\xbf|O\xbe\xd1Q/u\xed:\x91f\xdb\xd0O\xd1\x9e\x83\xc6\xe2\f\x83\x1c!\xa4\xdb+\x99\xf2I\xe3\x88l\xab\xb8;\xe0|\x9cD\xbd\xfa\x86\x95K\xb0\xa6%\xde)3\xe2:\x9e\xe9\xab\xa8\x86\xf9l\x05+J7Q(W\r\x88F;I\xc7\xa4\xf9\0j\x0e~?\xbf \x93\xba\x89\xde\xfd\xba\x97\xca\x9f\xdc>+\x99\x8421\x11\x12\x9c\xc8F\x84\x17\xac\x06$K4jP\xe3\x93\xeb\xfb\xc6\xbd\x88\xa9\x9f\x1c\xfa\x85\xea\xf5[h\x98\x1d\x94\xbc\xa9*\xea\x95\x15\xa4\xe0\xda\xa5\xe91B-\x04\xee \b\by?\x92\xa4\xd7\x13\fSl6\xda2{\xe0\xa8\x9c\xb6>\x94\x7f\xfa\xc4\xdb.>\xfd\xe45\xb7>\x19\xd7q~1\xd9\xf0\xb2\xd7\xdf\xb4g\xdf\x81%F\x9d\xae3\xd0\xa8D\x1d\x04g@\xa7\x03}X%\x07\xa8\xa5\xa4\x8a\x03  `\x9beuj\x10z^K\xfc\xdazq\xc7\xf5\x1a\xf5\xf3\xc7\xe7q\xf9\x01\xbch\xd4\xafZ\xd2^\xa1\xce\f\xfcVD,\x96\x19\xe8\x88\xebiU\xae4W\xb4\xa93\xe7j\xa8\xd5\x98\f\x140\xd1T\xec\x9b\xb4\x1b\xde\xd3\xcdL\xaaO\xf7V\xades\xacIw\xa1C%y\f\x94\x14O\xf7W\x17D\x88\x98\xac@\x19\x8e/\x89\xbb\t\xb7\x12\x8c\x0f\xe6h\xf9\xb5qi\x8e\xb5\xf8\xe58f\xf8$h\xeaQ\xaf#\xf3\xfb\x8f\xb2P\x0f\xa6!\x18\x8d\xac\xc5\x84f\x16W\xb4\x8cQ\xf3\xba\xeft\xffXU\x9d^<\xae\x83\xdbtu\x7f\xeb\x9e\xd0\x88-\xcb;${\xd8v\xa4\xef\xe3\x0e\xc9\x1f\x86%\tV\xaa\xaf\x9f-hi\xf4n\xebu\x88]J\x9d\x15iG\x1a\xed\xba\xdcp\xed;_\xfc\xd4\xd3\xd7\xdc\xf8d\xdc;\x87\xe6\xbb\xa7\xbf\xf67\xaf\xdf\xf6\xc3\xc7r\xd9x\xd6i\x12\x05(K\xf7)H\x9c\xab\xb1\'y\x85\xa3\xaa\xd1\x8f\xa5Q\xae\xab\xfb\x03\xe0\x02\xa7\xb1\xe9\x89\x03\x87\xb1\x81@F\x9dBG\x9d\x98\xf1Pjz\xad\xd07\xe8\xd5j\xfaw\xd7\xe8Bj\xb4\x86\b9S\xbb\xd0[^\x94\xc7\x1e|T\xce\\7&W?\xef\f\xf9\xb5\xbf\xfe\x9a,;\xba.a[\xca@#5\xcf\xfb\x17uSjN\x8a\xa9\xcf\xb2@\n\xb6\x0f\xa3/\x8b\xbd\x9eP\x85\xd7\x88Q\xfaINf\xb2\x8f{\x1f\x84\x9e\xc0\bI[\xfa3z\xc9\xb0_\xdd\x9a:R\x93m=7_\x1d\x90X\xba\x8bK\xcc\xf0\\}\xf6\xca]\xd7\x9c>q\xf2\xf1f\xe3\x8fCrF%W=P\xed\xbc\xafk\xcbI\nZ\xe3+D4\xc2\'9\xc2\xb1\x1eOG\xd3\xf9t\xf5\x1f\xb8\x991\xb1\xb49\xad\x86cjR&fV\xc8d{ZB\x0b\x82\xa5!\x1bP\xcbR=z\xb0\xfaR6\xcb\x10\xb0*\xca\xc8\x83%\x88\xd4\x9e\x02\x0eX\x82YLe\x8c\xd0\xd6\xe8HA\xcc\x19;I\xbe{\xd8\x15wb\\&\xc6[\x9c\xb7D\x8dA\xcf\xd4\xcd\x90\xe2\x83PjA\x96Wjr\xee\0\xa9\xd4\xd4=*\x14\xd7\x87\xa40\x0b\xca\xf3\xe8\x15\x01S\f\x05v\xdb\x1aRj\x1d\x93\xf2(\x86\x8a\n\xa0 (\x10O\x8c\x8f\xcb\xbe}\xf3\xf2\xf9\xaf|\xf7\xf5\xe7\x9c\xb9n\xe1\xe4\xf53w>\xd9V\xf2\x13\x9fy\xf0\xda/}\xf5\x91\xcd\xa1\x1fs8#ZZPoH\xcaD\x8dyG\rv\xc49W\x05\xdb\f\xfa\x98\xa9\xae7\xb1\xfe.\xedr0$@\x01k\x88\x94\x1a\xfac\x10\xd1\xd0\xb0k\xf4\xe4:5\x82?<_D\xc8\xa0\xa6\xb70\xe5Z\n>\xc6\xd7h\xab6V\x97\x96\x1a\x03\xbf\x01\x95u\x9fD\f{8\x84R\xdc\x92Ez\xa6\xed,#\xb3\xe17\x03\xea\f\x06\xad\x90j\'\x005\xb0\xfd\0h$Vx\xa6\x0e\x02\x99\'\x0f\xf554\x97\xd6<\x8a\xfa\x86\xcd\xba\x11\b\xd6s\x85\xf6"%\x9dJ\xd4\xbab\x02\x9f\x032\0\f&\xa8\xf7\x03L\xd4\xf5\xd9\x8c\x0eG\x07{\x03\x9f\xcfb\x93\xb1i\x84\xc5\x1e\xcaR\x05.\xa4\xb3\xf3\x05=\xbd\x98\xb3\xc00\x8e%/,3\xb2\x07\xcc8P\x13\\\x9fF\xd4\xb5\xcd\xf48\x8cz\xe9v\xfa\x12\xa5\xf9+_\xf6\xc2s\x9etz\x86w?r\xf0\xb2W\xff\xda\xb5\xb7\xdd\xf3\xc0\xbc\x9cr\xd6\xa9\x12\xd7t\xd7\xf8\x19k\x84y\x8c\xa8\xd3\xc70qt\xa8\x9b\xb5\xf4\x872\xdau\x8f`\xc0~uL\xc5\x01p%6\'j;u4\xa6\xeb\xf7\x06\xeea\x87\x11\x18E\x01\xf0\x85\xdf\xb1\xb6\t\x81\xe6\x9a<vhNn\xd8\xba\x87\xb6\xc8\xb1u\xdfzF4\xb7\xe4\xd8\t\xc3B\x844\x1424\xf8=\xb38\xc5p\x14Nij\x99\xdd\xa5\x8e\xf4\xe7\xfbd\x14\xb3\xfe\x89\xe9\x05\xb5\xe1\x90T=90AQ\x83\xc5>j\xae\x18\x97\xa9\r3\xb2\xfa\x94\xa6\xcc\xac\x0fdl\xa6\xa1\x7f\xd3\xa8]\x9d\x9f\xad\xf3\xfd\x89\xe7\xaej\xee\xd9Ps\xef\x19\x01\xd7\x13\xf8\xd8\x13U\xe7\xfe\xee#\xd6[\xeb\rKAK\xcdW\x8duh\xdd4\x16En\xd1\x0bE\xe21D1k\x15\x95\x0b0\xc9\x94\xd3LCx\xce\x8e4t\x03\xd7W\x86\xd2\xda\xd8\x94\x16\xc25\xdd\\Qg\x9e\xe2\x9a&\xdaJ\x86\xa0e\xa8\xafLMA\x83\x10\xec4\xfd\x8e)\xdd\x13\x1b\xcf\x95\x15\xa7\x9f#\x13\xeb&\xa5\x8d\xc6\xc3\xd0L\xde\x95\f)\xc0\x82M\xb2\xd52\x14\xa035.\xfaz\x9d\x94\x86\ni&25\x86\xcd\x8c\xf0\xb4-\x80\x1dXNH-PDA!7t\xa9\xee\xc0\x80\x99\xe9\xc4\xe1xxJ\xfd\xc4\xfc\xaa\xd7\xea2wtY\xae\xbd\xee;\x97N\x8e\xd7\x9ez\xde\xd3N\xb9\xf6\xc9\xb2\x8eG\x17\xa2M\xef\xf9\xbd\x9b>\xd2\x83\b1(\xe7XG\xbdn`\xd0\xa5\xa9z\xce\xea8\x80\xc1\x85\x9b\xbc\xd2\x9f\xcb,63\xa9\x14\xb4\x8a\xe8\x90^G5\xf6\x1ama\xac\x89Uxd\xe3U\xb4H\xa8_\xf8&\rd\x99\xbaF\xd8\f%\xac\x1b\xa7\x02\x9e\xb8\xa7\xc6\'\xd07DZ\xd6\xaf\xd7\xa9LA]\xca\xa1Rrw)\x92\x9eF\xb79\xa8\xf5vNe\xf882\xf2J\x88\xe0\xe1\x01\xdb\xbeE\x9a=\xce\xc3l@\xa3{\x89\xe5\xc2{#z\x03\xe8\x81\xedX\xa9\xf7\x8eZ\x17\xc4tA\xb2\x01\xa3\f\0\x99D\t\xd5\xdc\txb\xa8\xf0\x9c\xff\xa5\xe7\x11\xf75N\x1c\xf4\x87\xeb\xef\xd1\xc1\x82C\x83\xb1.e\x82H\xbe\x07\x8a\x8a:1\x07t\x8f\xee\xa0\xf7C\xc0B\x14\x0f\'\xcc\x1e\xee\x1d\xd4r,\x18e\x97\xd7\b}q,\xed\xe8F\xdb\xb9{\xbf{\xd1\x85g=\xb0f\xe5\xf8\xb6\'\xcb\xbe\xb9\xee\xe6\xfb\xdf\xff\xda_\xff\xec\xc7v\xee\\\x90\r[6Im\xed\xa4t\xb1?\x12\xcb\xb0E\x87\xa9\xb9\n\xcec]\xd7\xa0\xad`U\xea^\0p@+\x9f\xcd\x9aFj\x80\x0e\x01\x04\x9a\xe0\xb0`\x04\x8e^x77\0\xe7\xa6.\x01D\xdaz\x1f\x02\xbcJ\x8d\xc8\xc7\x02\t\xd5A\x1dW\xe7\xd7R\xa7\'\xb1\x02\x96\xc6\xed\xb4\'\xb6Fz` \x82\xe0eA\xb0\x17ur\xacC\xf9\xa3/\xd8\x15h\x13F\x1cH\t\xdb\xd5\x94f\xd0\x96p\xba\xcd)\xdea\xb3\xa1\xf6\xa9!\x81F[p\xbe\xbc\xa6\x19\x82jX\xa6\x88\xdcm\xd6a\xf5\xb6\x97Z\xd3\xd7\xfdc\xcb\xdcBG\xc6\x1a\xc1\xf9/\x9c\xae\xff\xe1\xa8\xc6\xf5\x04>\x1e\xed\xcbs\x96\xd5VL\x81\x10\x18\xe9fuL\xed\xd2Cf\0\x86#\xb3(x[\x91_a\xb1&\x01C`\x1b\x12\x1f\xd9C\x96\x02X\x81)W\x99\xa9\x89\xb46\xad\x94\xf1\xc9\x9a\xcc\xed\xd9+\xbd\xa5\x05\xc3\xfc\x81\xa7\x14\'\x86\xde\x8e.z\x8er\xf7\xa45\xbeN\xa6Nz\xaa\x84\x93\x93z\x02\xc90?iFn\x0bK\r\t\xd38h\x8c\xcd\xd58\xa4j\x8cQk\x80\xd1#5\xb74=#d3\xb14b\xa1\x7f\x96\x1e\xa0\xa5\xa0g\xb1\xbf\xcc\x1aNj-\x99\xbd.\xe1\x1d\xaa\x01\x86\xb1\x04M\x1e\xa3\x19\x10uYn&\xcdVK\xfa\xcb\x95\xfc\xea{>\xf3\x8a=\xfb\xe6v\xbe\xef\xea\xcb\xcf\n\x03o\xf0D_\xc7/\xdc\xb8\xf3\x9a=\xfb\x16\xc5\xb75\x92\x1a\x1a\xf3\\\xaf3\xd2=\x18\x88XP\xab\x0fcgK\x02CE\xa2\x8ai\x1b\xa0\x12E\xbeO\xaf\xf1\xa9\xba\xb6-\xe1\x84\x12D$\x04\x89\x92\x92G6\xc1\xdeg]\b\xd7N\xbd\x18\xaeK\xd0\xaaQ\x1a\t\xd2Q\xb5z`"\x18\x8cH\xc1\xc0Iu\x1e\xbaK]\xca)\x81\xa6\xee\xe9s1\x80\x10\x9b\x89\xacB]\b\xd0\xd1\xd1\x14\x8c\x14|\x7f\xb1\xaf\xd1\x91\x89\xb0pN\x0eG\xa8\x98\x8d\x86\xba\x9b\r\xf5\xfa\xac`/^^d\x94\x16\xe2\xa0@\x82IA0\x8b\x1b!\x87@ZvM\xac\x1e\xc4\x95c^\x07\xd2\xfa5\x12\xa8\xb2c\xfb\x85\xfc}\x93\x06t\x8c\xfaG\xa1\x1b\xbd\x88\xf6\x93\0\x80\x94\x18@\x16\xd1\x15\x9bd!*M\xc5{\xa1\xdaH\x0e\xfa\xbeF"\x1e\xa9\xfc\xa58z}{\x9d\x9e|\xea\xefn\xfd\xf43\xce\xfe\x85\xcf?\xd1\xf7\x0b\x1c\xbe\x0f\x7f\xe2\xeb\xb7\xfc\xaf\x8f}\xeb\xa2\xbeFIS\x1a\x85\x8c\x9f4%\x11j\xa1\xdd.\'>VX\x97\xc0\xe2=\xe6\xe0\x9e\x02\x88\xf7\xc1\xf0\xd4}\xa1\xf7\xbc\x13!_\xe12m\\b\xd3@d\xdb\xca\xc8\xde\xc4=\x9ab\xc4\xa4\xae\x8b\x8bi\x03z\x8d@\xeerr\xec\r\x051\x106\x90\n\xd4\xf5\nV\x8c\xc9\xd8Iku\x9f\xeas\xa2L\x92\x85\x05\xe9\xee|T\xfaG\x0e\x92\xb5Z\x15\xaeIqC\x83\x12\xfaN\x10\xe9\xf6|\xa9MOKc\xedZ\xdd\xb3\x01e3\x05\x8a=\xa5\xee{\xfdl peK\t\x9d\xa5TmJ1\xd0s\xed\xa1ViI\xdc\xed\xa9\xc3\xd4\xd7}6ej\xba\x13F\xf3p|\xba)\xb3\xb3\xbe<\xd2M\xd7\x8c\xc8\x19O\xf0c!\xb66T\x90P\xd1\xc5^\xce\x1c\xc9\xd4\x03\xa9\xab\'\x02\xa9\x15\xdc\xa5\xd8/\xe5\xb0V\r\xe9\x1d\xa9\rY\x83H\xb3@\xbc\0\xea\xda\xfa;\xa7o\xd2\x89\x04\x05\xfdo|\xa2-\xed\xd6\x99\x1a\xbew\xa5\xb7pT\x06]\f\x7f4\xaa\xee\x8e\x8d\x99;+\xa4\xd9^%\xa1\xa3\x11Z\xbd\xe2\xc6\x04S\x88\xef\x01\xefVo\x16\x0e0\x84d\x0f\x8c\x9c\xde\x10\x19F d\x19o\x8a\xcc\xd5\x9b\x01*\x9fhFu\rk\x91\xad\xf8\xecx\x06W^\x7fFz\x03\x92j\xa1\x1a\xe1\x01\x94\xe4M\x1e\xd1\x1aXL5\x80\xcb\xc1\x01\x8a\x8d\xc0\xb0\x1e5\x12\0\x1bN\x8a\x86\xa8\xd3)\x7f\xf4\xd1\x1b6\xddw\xff\xce\xfe\xc7\xfe\xe0m\xcf8i\xdd\xf4\xddO\xd45\x1c\xc4y\xeb\xf37\xec\xb8\\?\x88\x1a\xa4\x81\x84a\x9fF\xb6\xb0\xd4\xc0Z\x03\xd6\x97\fC\xae4\x8b\xa4&\xa4J#\xc3\x9c\x83~\x1cYw\x90\xd3\x99U\x03\xb3i\x18\xc9fL\x15B\xe5\x02@aSAC\r\x06\x8c}\xac\0\xa2\xd7\xb9\xde\xa8\xc4\xc7 JD> n@~\xc9wI\x1f\x8f\x15\x80\xfa\x1a\xe5\xc0k\x8f\x93\x84\xef\x01\0\xcb\xfafL(\x941\xe2\x01\x8a\xf8\x15\xa7,\x03\xc8\xb2\xb8$s\x90\xe9E\x1f\xce\x84\xcdZ]\xd0\xb0\xc8^\xc4\xb98\xac\x9b\xd9\xac=%\x91\x19\xe0\x1e\xd4\x1c\xfe.C\xd3za\x9a\xa1\xa1\x8e\x01y\'\f8Mz9\xa7\f\x18\x8b\x9dS_\x0f\xe4\r\xd4\xd1\xb0\x0f\xd0\x88]Z\xa8\xa7-\x83t\xcf\xba\x1e\xeb(\xd5\xb0\x91]\xddr\x8b\x9d\xd6Fb\n\xe7\x94\x0b\xb4\x11}\n\xc0\xfa~,q\x8a\xbe\xa5q\xb9\xf9\x96\x87\xea;\xf6\x1c\xb9`\xf3IO\xdc\xf6\x8a\xb9\xc5\xde\x86\xab?\xf0\xc5=\x9f\xfb\xe2\xdd\xac\xff4\x14<V\x9d\xbc\x92NI\x84!\xad%\xea\xa2\xa1X\x91:\x01\x1d\xb4\x94\x04\x8fO\xa8\xae\x02\xdd;\xe3\xba\x06\xba\xbe\xb2\x88^I\x9b2Nv\xa0\x0e\xcd g3z\xe9\xb8&\xc5\x88\xeb\xd7(\xc4\xd7\xeb/u5$\xe8\xa9\xd4\xd7\b\xa0\xcd\x1cXL\xdbs\xf4\x83\xc3\x84>\xfb\xc5|5\x07-\x8d\xc0V\xac=E\x9d\x8ey\xe9\x1c\xd8\'\xd1\xe2\x11\x12t\xa8Y\xa9\xef\xef5\xc6\xa5\xb6rF<\xb51t\xac\x14\xa0\n\xf4\x88\xa2/\xaf\xaf\xef?P{\xa6N\x87\xfe\xbf\x02Wa\xd663\x83\xfe,=\xcf\xc2M8\xdf\x8f\x12Q\xde\x8c\xae{@\t2\xd4W\xd5\x97\x95\x05]\xcb\xa8,[5\xdb\xee\x8e\x80\xeb\x89Z\xe1BZ\x19Sg#\f\xea\xd3\xc5C\xcf\x85c&\x1c[\xd5\x90\x19\x88\xe2;\x8c\x18j\x01\xb6I\xc19\x95\xc3\x9e\x9e\x8a\xc4-\x9b\xcc\x1f\xfe\x1d)E1b\x9ah\xe8\xf4\xf2\x86LA\x1d|\xc5&\xc5\x15\xf5\xc02\xa3\xfa\xcd2+\xc0B7Y5\xd0\xf7\xc1\xf0\xc7^\xc6\x8d\x0f_\r\x9a\x86\x99\x1aW\xa4\xb8r\xb5> e\x14\tX\x88\x05U9\xd0\xc1\x8f}\xcf\x99\xde\xa4\xa2AF\xba44\xd9\0\xde!\x145|"\xae\x95\x0f\x97\xcer\xa9\xbd\x07\x0f\x9d\xe3\xbf!\xeb\x83:\x0e\xa2\x88\x1a"\xcc\x88\xc6\xa95Y\x97\xc8\xc1F.\xe5\xeb\xdf\xb8W.\xbd\xfc\xfd?\xf8\x83\xdfy\xc3o^\xfa\xbcg<!U\x12n\xfe\xf6\xee\xab\x1ez\xe4\xb0\x04\xbe^K~n5\x1c\xb6^+\x90\xbd\xd4\xb0\x94f\xb0\xd9\xb0F\x93R6\xcbx#p\x14\xd0`\x8c\x1aD]\xc6\xd4 Ep\x0e\x86\xd1\xb6MbE\xca\x111x\x18\xae\x7f\x1869Q\xd8hx\x85\x8c\xe2@oFO\x95\r\x06h\x10P\xbe\x07i\xb7~\xb7\xa01d\xc2\x11l\xd0\x12Zt\x15U88WK=ljSZ \x82\x14|\x1eBy\xb3? \'\x84\xf7,)\xf2\x9b\xf6QG\xb3\r\xe1\x03 \xa8\xe7\x86\xa9\xc7HW!\xa2\xc2\x80Q\x109\x90\xea\xc4@\xccJ\x01;/L\x13\xb2\xd1\rrL\xd4\x94\xbb\xa4\xdf#\x923{\xd0!\xd3\x105\xac\x06\xda\x072]\xfb\x81eF\xcf\x0f\x87[rh\xa9k\xae\xab\x89\xd4|\xa3\x8d\b\xc2\x0fjih|G\xf4P827\xbf,_\xb8\xfe\xaek\xae\xfe\xe5\x17_\xfcD\xdc+w\xde\xb3\xeb\xf2w\xbc\xf7\xda\x7f\xbc\xe7\x9e\x03\x1a!\x87\xe2\xaa\xa36>Sgf\xa2?\xb7(\x19XX\xa8\t\xa5\x8e\xb9\xbf\0\xcd\xba\x06US\xaf\xc9\xb19\x9ap\0qY\xbd\x06\x1dLi:Fq\xa4\xee\x1aQd,\\l\xfa\xbd\x98\xe2\xa0\xbcWLQ1\x8c0\xc9}\x05y\xc7\xa7\xc3\xe3\xe4HI\x83^_\xf1yV8$X\xe1w\xad\xa64\xb6\x9c.\xf5b\xb3\x19\x10\x89\xf5K\xd5\xc9P\x07g\xd0U\xfb\xd0;H\x90"E\x1e\x8e\xa9\xee\x9f\f\xbd\x88\x89Q\xcd)\xd5)B\xe6\x05g\xc7=\xeb\x18\xe7\xc7\xe2i\xa9\xeb\xd1\xe9\xca\xa2>\xa4\xbb\x005\x96\x82\x0e\x14\x94Z\xb0\xbf\xe48\xe3\xe0\x1dw\xc05\xe9\x96\xfb\xa0\x91\x80\x06U\xa4\xe8\x8aa\xa4c\xfa\xb02\x16C\xe5\xc7\x99\x94\fZ\x86\xaa\x97\x991h\xd6\x90\xe5\x03jz\x05\xed9\xbd\x81\x91rD\xf1\x9b\x91\x10\x14\x11\0\x12\xb0\x88\x81I1R.\xc85"\xadh$4\xda\x82\xc3\xde\x19\xccIBz\x01\xe7\x93%\xacka\xc47j\x11\x94\x1bBz\x90\xd1\x95Q\x15\xa74\x07Fb0\x85e1\x1aD\xf1\xb8\xf2M-\x8b7\x9e5\xa4F\xe3\xb3\xc0\xcb+\x03\xb2\xe2x.\x05\x07u\x80\xb6\xc6\xd4$\x1a\x9e\xdb\xe3-\xe9\xe1\xac\xf3Tv<zX^\xf3\xc6\x0f]s\xd5;^\xf5\x8a\xdf|\xfb\xcb\x9f\xe5\xba\xce\x13\x8a.\xfb\x85\xaf<\xf4\xde\xaa\xec2c\xe6\x86H\xddZ\x8c\x90\xe9\xf1\xea\x02q\xf2\xafklHU\x1c[?\x196\x8b[\xa4\xc2\xa3\x1e\xf0Ko~\x95|\xec\xd3\xbb\xa5\x8f\xf4\xa1\x83\xf5\xc2*\xa9a\xd1\xd0\xbat\x14\xd4\x15\xdd\x11)!r\x0bQ\x1c\x80\xa3\x02\'\x03\xfdu\xf5@\xeac5qjf\xf24\xa6Y{a\xa9^p<\xac\x81X\xd2[\xce\x18\xc9zd\x18Z\nTj\\z\xba%Zf\b\x0e\xeag6\nc\x960\xf2"\xd8)\xb2U\x14\xf2\x85l\x98Q\xb2\xc0\xfa\xe5En\x06\x99\x0ek\x96N\xcd\x97\x96;\xae\x06\xae\x94\xde\xfc\x12\xa7 S\xe9\xc2h\x81\xb1\xae\x06!]\xd4\xfd\xe8\xe0\b\x18\xab!i\xf2p\x96\x92\xee@~\xe9m/\x93\x1b\xber\xad\xae\xf7!3\xbe\x85\xb4k\x8b\x19\x04F\xf1Pn\xf1\x14\xd2\xe0\f\x81\xaa\x8d\xa8\xd4A\xfd\x07\xc0\xad\x9f%\xc2\x98\x9fJ\xbe\xfc\xd5\xad\x17]\xf9\x86\xe7M4\x9eP:\x86\x95|\xf4\xaf\xbfs\xdd\xef\xfe\xd1\x97/[\\\x1cp\0\xa8\xad\xce&\xfa\xec\xb0>\xdd\xc5\x8e\xde6\x1e\x1dSG\xa3-]`)\xb9g\xf4>q\x8d\xe8\xf5\x90\xf3\xae\x96^\x7f\x86\xc7QC\n\xd9\x808\x15\xb8\0<\xbe\x01\xae\x82S\xa7K:\xa5\x85\x1d\xb1.f\xe95vz\xd0\xac\fH\xd2p \x03\xe6\xba\xc3\t\xdbB\x002\x8c`\x8d\xc8u\xdf"\xfd\x8cFr\\c\n*\xe3\xdf^\xc5yl\x04C\xd4\xc0h\x8a\xb0\x06&\x03\xe4b\xb0\x04\xa4\xc6\xd4\x06\xd4t\xaf\x94\xa1p\xff\x981:\xf4\x92\xe8\xf4\x12\xc4pg\xc4\x86\x99L@s\x8cS4\xa9\xfb\xab\xe6X\xdd\x11p=\x81\x8f\xcdM\xb9\xade\xa3)\xd3\xa4S(\xf7S\x9a:\x94\x1cSh\xa7\xfawezz\xc4\xc8\xfb\xd0\x89\x1f\xee\xe5\nE\xdb\xca\0\x06<"\xd0\x89I\xec\xd0\xdf\x95\xb0`H\xe9\xa9\x91\xb2\xe1U\x05\xfa;\xcf2\xd4u\xc7\xa4\xf8\xccc\x85\x06\x84H\x98`\xf7\x01\x84L\xdf\x15Rx|\x10\xc7\xab\x97\xa6HK\x03lSi\x1a!\x82EO\xd80\xc5\x04\xe9\x0b\xd6E*\xc36\xc4\x83\xd9\xe7e\xd4:-\x8eZ\xb6y\xbe\xe6\x83\xa0?D\xbdE?\xa7\x0e\x1e\fR\x96\xa4\x9c\xa2\nV\x12\xd2E\x18\xc9\xf2;\xbf\xf7\x99\xf3~p\xf7\xf6\xfc\x0f?\xf8\xe6\xf37m\x98\xde\xfaDX\xbf\xed;\x17/\xdc\xfa\xc0<\x0b\xd9d\nB\xc1\xddF\xda/\xa2\xd6\xa3\x85~\x06{\bT\x95\x89\x1c\xd8Sw,\xa2\x86q\xd1\xebs\xee\xb9\xcf\x90\xd7^\xfe\xd2\xf3\xff\xe2\xb3\x1f\xbdS\xd2\x8a\xf5$\xd6\x97lSnt,x\xc3H\xd3\x81\x1e_\xb0\xd8\x8d\x16\x05\xa4\n-\x88\xdd:u\x05\x1e_|]3\x14\xe4\xab\0\n\xf1\x19i\xee)\xfa\x9f\x10-\x81\xe5U3\xc0\x87\xa5C\x8a\x0eD\n\x96\x19\xb1\x1f*\xb3,\xc0.\xf7X\xea\x11/\r\xf5\x13x\xc9\x95\xe9\xf5\xcb2\x80c)\xfe\xa4p\xdcIP\x83\xf7\x9e(\xf8@\xd2\xab\xad\x06\xb9\xcb\x943T1\\\xa4\xbd\x0b\f=\xd4H\x90\x0eOb\xc8\x19N\xce\xfd`a\xaf@\xa4\xd7\xca\xe4\xd2\x17^He\x91\xff\xbd\xe3o8\x90\x14\xb1\xbf\xd93b\xae\xa1\f\x1d$F\xeb\x1a\xe1!\xaa@M\x10\xd3\xb85z\xb1\xe2>3\x15\xdbv\xcc\xca\xb7\xbe\xbb\xed\xca\x97\xbe\xe0i\x1f|"\xec\x91\xd9\xb9\xde)\xff\xfdw\xff\xf9\xe1\xcf^\xf7]\x07\xf7\x9d\xab\xd1\xaa\xab\xa0\x01\xba8HOt\x12\xa0\x1b\t0Bm\x10\xe9P\xc1\xde\xf1\xd9\\^\xda1\x05\x98KW\x1d\xdc\xd45\xf7\f\xfa\xe9|\xdd\x13\x91\xde\xeb\x90v\x03y\xc67iC\x80{\x85B8\x1d\xbf\x92\x8e\x02oDh\x96FxNn\x16\xban\x98\xbed$\x02X\x8a\xa1c\xc9\x1e\x86\x92\xf7,24\xb0\x19NT=\xde]E\xdf\x06:\xa8\x18*\n\xc7\x01%\x06\f\x10\x1d\xb3\xf94\x17\xa4\x9a\xca\xe0\x94\x03\xe7\xc8\x1f\x8a\xf9b\x0f\x13\xc0l\xb3\xcfLS\x98\xd14\xb5\xcd\x1c\xb8B\x1f\xb7\xb9\xee\xcc>\xde(v\x9c\x1c\xc7\x9d2\xc8\xc9-g\xebi\x8d\\bD4YB\xa5g2\0\xf1o3\x19R7p\xc2\xc6a\x8e8\xc6\xf8\x8bd \x15\x14\xde\x8b\x01\x04\xcb\xd4\xab\xeaI\xd5W\x8f\xbf\xdf\x91\xaa\xa3\x9e\xdb\x92z\xba\x87\x97\xf41\x0bRa^7<\xdf\x81\xfe>\xeb\x8a\xad\x9e\x9d\xf4\xf4q\xb9\xba\xda\xd1@\xbd0\xbd)z\ti\xf3 nT\x1d\xd4\xae\n\x13U\xe1{V\x0e\x958\xc0\0\xb4\x99\x024V\fi\x1b\xc7Dz\xb6\x19\nH\xd6\xc8p\xdf#\xcfa\xfaHm\x03\x82h~.\x1cc\xa8\xb0\xab-\x16\xe8\x8c\xb7V\x99;\x82\xd9/\xd0\x10]\x87\x8c2\x18.h\xe5\x05M\xd3\x07\xe2\xeak^\xff\xe5\xadr\xe9+~\xe7\xce/}\xed\xae\xf7>\x11\xd6\xefk\xb7\xee~\xd7\xe2b\x8fd\x06z\x8d\x88.\x12\x8c*\xe9\xeaG^f\xc4j\xc4\x02\x0b\x92_0r\x82i\x18\xb2T\x8c\xe6 \xd2yo|\xdd\xe5\x7f\xb2i\xc3\xca\xadM\xaaw\x0f\xb3kUjj<\xb9\x196\xc2\x1b\x1fe\xcef\x93\xde\xb2\xe3\xd7\xf4R\xa2?\xc6\x97L\x1f7\xe8GT\x88\x87\x9f\x93D\x86\x11\x98)\xc0\xe0\xdf\x83\xe5Jz\x8b9\xd3\x96 Z\x80\xa3\x83\xef`\xa2\xa1S\x02\xc0\xe0\x84\xc6K\x1ft\x0b\xfa&n\xa8\x86\xb5Dm\xccfm+\xcbl\xf6Na\nn\xa6\xe0\x1a\x0f"\xddJ\t%\x9f\xba\xf3}\xfdZ&i\xc3o5\xf5\xb1\x90\x87r\xe9]{\xb5\x80\x03,\xd9\x9b\b\x80\xe7g2\xb5\xbb\x92\xcc#K\x02\xfd\xfb\xf4d\xfb\xc5o|\xdd\xcf]<19\xc9fU\x0e\xb7\xc4u\x02\x80;C\xa7\xc92F\xb8\xa4:~\xa2\x9f\xb7C\xf2\x0b\'C\xc3\xc3/L]\xee\x8b_\xbd\xeb\xfdO\x84\xfd\xf1\xdd\xad\x8f\xbd\xfe\xb2\xd7\xfe\xf9\xa3\x7f\xff\xd9;\x1d\x8b\xc3W\xf5\xb3\xb6\x8c\xaaI\xe5f\x8cz\xc9\xf6\xb4"s\x0f\x94 h\x19\xc0\xae\xd4\xa1\xad\xec\x01Sp `X\xb1\xc9@\xc0\x91\xb4\x12\xcb\xa4\xe9\x01L\xf1\x90L\xe5\xd9\xc3\x8c\x8cg\xd2\xb1\x95KG\x07\x05s;vL\xb9\x01\xbb"\x1b\xa6\xaa\xfbF"J\x06\xfaz}=\x07\x9c\x87\x9e\xa3\xcd\x9fs\xda\x1e\x82\xa6FjV\xa7\xafk\xab\xfb\xbc\xaf\xb6f\xa0{\xbb\xe8K\x01\xc9\xb1\xc3\xfa\xd5\x83=\xd2\xbd\xc7\xb2\x82~\xc7xe/!\xb1\x83s\xfc\x8a\x8c5t0\x101\xc7\x8fD\x0f:\xe5\x19\xbf\xe0\xa4\x03\xc0K:6\xb9\xfc\xf4\x84\xff\xc9\x119\xe3Ip\\\xb19\xf8\xf0m;\x8e^\x05\x02\x1e\xfb\xaf\x86\x8b\xc9\xb1"\x1c\xd0f\xbe\x8e\rk;\x96\xfbG$E\xf3\x94\x0e\x7f\x86ATCUD\x98\xbbUH\xbe\xac\x9b\x019k8hH\xed\xa1>\x06k\xd6\x19z\xd7pOs\xc3V\x94\x86M&\x9b=\xcc,Y^i\xba\xf2\x1d\x19\x0e\xf5\xaaLT\x85\x7f;\xd6P\x17\xdc\b{"E\xc86e\xbab\x96\x89\xd4l3\xa4\x90\xd1XU\xd7\xf7\x1aR\x1e\xab\xe1D\xdd\xc2\xf4\x80\x18\x03>\x8c\xf0\x90&\xe4\bp1i\b\xdb\xa4\x18A\x99\x06\x81\x04\x9ak(\x9f\xed\xdbuT\xfe\xeb[\xfe\xf8\xfdW\xbe\xe5g^\xf3\xeew\xbe\xea\xd9\xcdz\xf8\x9f\x92\x12\x1aDY\xebK7?\xfcRF[N\xcc\x9e\x19x\xa2U60J\xdcz\x1d\xcaAj\x96\f\xff\x15\x86\xddi1\xdd\x8a^\'\xf0\xeb,\xb9\xe0\xfcs\xe5\x95/\x7f\xd1\xd5X\x9a\xd6XC\x8aC\xcbf\f\f\x9b\xbf3\x82\xa1c\xa9\xa5\x93\xba\xbe\x96\x1a\xb2\xb2\xaek\x1e2\xb5\x94\xbb\xb1x^[/\xb3E5\x132\x96\xf5Y\x83~\xcck\x8b\xe1\x83\x99\x1a\xc2\x144\xf5\xc06\xcc\xc6\x02\xacB\x87\xfb\t\x1e.\xc4\x98=]\x7f\xb7&\x8c\xd6\xcb\b\x8a\xec\x96\x89\xe63\x97`C\x85\x8d\xcaD\xe1`#\x86MW\x8d\xafCa\xddh\x90\xb2V\x19\xa9\xf1\xeb\x0f\x06\xeaw\xd8\x86M\x1a\xabC\x93\r\xb5.-3\x06\xc5\x95\xb6\x9egd\x88@\xa5\xd1jD\xed\x05\xa9E\xdfw\x06\xa7m\xdep\xeb\xcb^\xfc\xfc\xe2\xef\xfe\xf1+\x0eT9\xc0N\x03K\x11\x9f\x85-\x14\xa8\xa5b\x02\x81\xbe/\xe7K\xe5\xfa9QKUC\xef \xfa\xc7\x18\x175\xd8\xdf\xbds\xbb\xb3\xf7\xc0\xfc\xd9\x1b\xd6\xae\xb8\xef?co\xa4Y\x1e|\xe4\x937\xdf\xf0\x91O|\xfb\x92\xe5\xb9\x94=\x98 \xbcx\r\x97\x82\xc4%)2H\x91\xe9\xb5Sg\xd0\x83\xc3\xea\r\xcc\xfd\f\xd5\x14\x1b\xa9T\x10|\xe0A\xd8C\xc2TF\x10\xb2\xf2\x9a\x112\xd6\x88\xab\xf0\n\x93\x9e\xcfM\xd3\'\xf6\x1d\xdaL\xaa`\x98J\xc5\x7f r\x1c\x8b\xbc\x123b\b\xce@\x85\xcc\x87\xae}\x05%\r\x04_ i!\x15\x1d#[R<>\xf2\xc46}\b\xea\'\x0f\xef\xdf\xd0bF\xc0\xe9\x99\xd41kX\r\x131\t\xdax\x86\xd3\x05\xe0\x90T`\x17\'\x86\xf0e\f\x8b=\x94\x88*M\xdd\xb32\xfa\xa6`J\xf6t\x9f\x9c>\x11\xca\x0bg\x1a\x7f0\x02\xae\'\xc1q\xf9\xa9cW\xdf\xb5w\xe1\xf2?\xbf\xeb\xf0\x866R3\xf0<\xf2\xe2G5\xa7a\x0fE5\xec\xa3\xa8~L\x1f\x8cc\xde\xd5\xe3J3\xb3IC\xdd0c\xea\x81\xcf\x8c\xd5d\xfdT[\xd6M7\xf7\xce\xac\xa8\xef\x1a\xab\x05\x07\x1b\xbe\xb7\x18xV\xd7\x94W*\'\xcd\xaa\xfa \xcd\'\xbaQ\xb6ba\x90n\x98\xefF\x1b\x16\xfaY\xbd\x17\xc72\x005\x16#%\n\xc3\b\xaa\x86\xf3\xe6 \xa6\x8bB~\x8e\xc9\xb6\x98\xcb\xa4\xe7\x18\x83\xa1\x06QU\0\x12\xab2\xb6\x99\xbek\x99(\x04u\xb7\xca1\x83,\xa9\xa6a2\x9e\xe6f\xe2\xc6\xad\xd8\x07\x82\x9b\xb1\xc8]zj\x96cT\xb0\xe1\x90\xa3\x9f\f\x94\xdb\xb0\xe5\xeb}7\xa0n\x1bh\xbb\x1f\xfa\xa3kO\xff\xde\x9d\x8f,|\xe4\x9a\xb7\xbc\xf8\xa9gl\xf8\x0fWL\xf8\xfe\x0f\xf6\xbf\xfe\x91G\xb6\x1b\xa5w\f\xefcq\x88\xdc7\x98$6\xdcb\xea1\r\x0b>\x13j\x87,}\x19\x11T\xa4\x8bJ5\xe0\xff\xed\xad\xaf\xfd}\xcf\xf3(\x9a\\\xaf\x1b\xe2\x05\xd2t\xe45\xa8\xe1\xb2\xc1*C\xd3-u\n=\x93.F\xea\xd7\x8f\xd5{\xaf\x0f\x1d\x19!\xd1!K]u\x94\x8d\xbe\x1f\xae4\x94\x0b\xea\x93\x85\x04\xa6cA\xd7\xb2\xa4Q\xf1\xea\x8e\x99\n \xa8c\x19\xe5yN\x16\xd1O\xe1\xa0v\x02\xfb\x02\xea\xbam\xd6\x1d\xe7\x82(\xcf\xab\xb9\xec\xdf\xf2A\xb9\xaf\xd5\xd4\x8e\xeag\x88\\Fg\xb6\xaf\x9fq\x90\xc8`ii\xd8\xa3\x86^\xa0\x80\xe9E\xa4|S\xce\xfc\xca\xf4r\x05\xc2\x85\xa5\xb2.\xb6t\xa4Q$\xf4\x18=\xd65\xde\xfe\xb6\xd7\xbe\xec\xc6\xaf\xdfvC_=y\xd4\xad\xe8\x89\xdb\xa6\x13\xdf\x02P\x05u\xddK9[E\x8a@\xa39\x18u4\xcar\xfa\x801\xbe\x87\x0f\x1d\x94\xaf}\xf3\x87\xbf\xf9\x8b\xaf{\xfe\x15\xff\xd1\xfbb\xe7\xde\xb9\xf3~\xe3\xfd\xd7\xde\xf9\xd5\x9b\xb7\xaa\x81\xaf\xd1\xf8\x03o\xc3v\xdbd\x178\xd7\xaab\xaf\x96\x15(\xd0\xb8\nR^\xd3\x04\x95\xa8Qa?aiP\xcbC\xca\x16\xa9g\x92x\xf8\0}\xbc\xf3x\xa6\x02\x0e\x1e\x86\xc7\xa6`\xee\xf5K\xce\xca\xe3\x14\xe4\xc2\xa1\x82\x86\xa7\x8e\xab\x8b>=\x105A\xe0*M*\xd1\xe1\xe4bW|\x05\xd1\xfaJ[\xda~ \x9357Y\xd1\xac\xed\xd2\xef\x07[5o\xb6\xee:\x8b\xbek\x19\xaa\x8cn\xae(\xab&zy6\xb58H\xd7\xcc\xceG[\xf6.\fZ\xfb5\x12\x9bWg\xa1\x8b\xfe\xce\bCwlu.]\xa6\x97\xf1<\xce\xe3\xb3\rp\x91t\xc1\x8d\xa5Q<\xce\x03\xfdh\x1c\xd1\xa3Q\xbe\xda\xafV\xe8\xc95g\xad{C\xd3\xb5\x17G\xc0\xf5$9>x\xc9I\xa76\xac\xfc\xceO|\x7f\xf7\xd9}\xf5\x8eC\x90p\xb0\xc9\x8fE^\x85I-\xe1;T\xc3\x13\f\xe8\xd3\x1b\xba\xa9\x1b\xfd\xd4Um9g\xc3\xba\xee\xd36N_\x7f\xf6\x86\xe9/\xaf\x9bl\xdc7\xd5\xaa\xed\n<\xf7\xdf\xdd\xff\xa4\x80\xe5\x14e\x19\x14\xea\xa2WU\xe5\x0e\x81\xcb\xa1\x07W\x96\x8ebN\x90\xa4e\xbd\x1f\xa7S\x9dA\xb2r\xff\xd1\xee\xd9\xdb\xf7/]\xf4\xd8\xfe\xc5\x0b\x1e\xdc=\x17\xec9\xd2\x95\xcer\xca\x8e\xf9ZP\xa9GiR\x1e\xd5pn\x13",#\xa6*Cu\xf9\x94\x1av%sX\x05\x81*\x1f\xf4X\x07B\xfa\xcb\x10\f\x84\xc3\x04m\x0b\x11\x83\x1a_5\x80\xdf\xbf\xed!y\xe9\xe5\xbf}\xc3{\xdf}\xc5\xdf\xbe\xe9\x8aK~\xe1?r\xcd\xbe|\xf3\x0f\xdf\x9bD]\xd6U\xbcVC\x8dPE\xe9+\xceC\x03\xfb\xaa\xdf7\x99z\xa4X\x91\xfa\x05C\x83=N6\x9f\x83\x14\xd1s/<_^\xfe\x92\xe7\xfd\xd6\xb1\xd7t(\xefS\xd1[v\x8dP\x1c\xa9\xd1\x85\xe9\x87Pp\xa8\xe9\xda{j\x1c\x06\nZ\rS\xd0\xb7\xf0\xd8P\x1fZ\xd3\xe8\x07\xca\xef\x91\xd8-\xdb\fj\xd4\xfdSk[&\xa3\xa4\x1e2p4O\x86\xaa\x07\x8e\x99\xa3eU\x86\r\x9a\xf6MT\x03\xa5\x85j\xa8\x87\x07\xc7\t4y\xfc\xc1W#\xea\xaaC\xe2\xa87n\xeb\xfbbb.\b>\xc8\x10X\t\x89\xe9\x14S\xce\xd5@f\x05\xe5:$\x1d\xcc\xe9^\x02\xdd\x19\xb5\x99\x98\xa4\x0e\x87\x04\xb3\x1a\xd3\xa8H%\xa2Q\x19\x8d\xb3\x96e\xf8\xa7g\x9fy\xda\x8dW\xbc\xeae{?\xfa\x17\x7f\xbf\x01cWt\x9f\x99\x14\x17\xfa\x97\x18\x99\xc7\x8c\0\xd0\x97\b!\xe2\x02\x91\x04HG\x8e!\x8c\xa0\xb9\xdaVC\x7f\xfdM\xb7\xbf\xe6\xcd\n\\\xff\x91\xd5\x92/~\xf5\x9e\xf7\xbf\xe7\x03\x9f{\xef\xde\xddGM\xa4\x82\x14\xa6^34\xdd\x12h\xd0\xea\0\x9952\x7f\xdd!\xcbR\xa3\xf2\xa8\xa7\x8e@\x8be\x01\xf6E\xe1\xb1\xf0\x82\x8a\x9aI\x97bNQ<\xe0\xe7\xcc\x82q\x89\x13\x9b`66\xe6\xcaiS\ry\xca\xfa\x199m\xed\xf8\xad\xa7\xaen\xdd\xban\xaa}\xdfX\xa8\xc0\x13\xa8\xa3\xea;]\xf4\x86\xdb\x16\xf3\xf2\xa6\xd7R_\x90S\t,+\xd1\xe88q\x99\x9f\xff\xf7\x1d\xbd4\x9b\x98\xedF\xa7\xedZ\xe8\x9d\xf7\x83\xfd\xf3\x97\xdf{x\xe1\xc2\xfbg\x97\xe4P?\x91$\x07{\xd1\xa1\x12\x87M\xa6`ER\x06\xbfcf\x98\x02W\xa4{\'\xd6kq\xdaTK\xfe\xe89\x1b\xdf\xf0\x9c\xe9\xd6_\x1f\x8f\xf6\xfd\xb8\x05.\xcf\xb6\x93\xff\xf9\xbc-\xe7\\\xbae\xf2\xf2O}\x7f\xe7\xa7\xbf\xf3\xe8\xe1\xe0\xc8\xffa\xef=\xe0-+\xcb\xab\xf1g\xf7}\xeamsg\x86)\xc0(\b\x8a\xa0\xa8  \x8a\xa1X!\x1aA)\x02\xa2\xa8`\xc1\b\xb1\xfd-_\xd4\xa8\xd1\xd8\x12I\xd4\xc4??\x8dF\x8d&&\xf1\xc3\x9eH\x82\x12iR\x87>0\xbd\x97[\xcf9\xbb\xef\xfd=k\xbdg\x88"(\xc8`D\xf7\x8b\xd7\x99\xb9\xf7\x9e}\xf6\xd9\xf7\xdcw\xed\xf5<\xebY\x0b5d\xb0.\x94\x97\x10\x8d\x8dL,\xfdE_2\xda\x94\x83\x97O\xc8Q\xfb\xef\xf5u\xfd\xf8\xc2\xfe\x8b\xc7.\x0f=g\x8f\x0e\xe9\xea\x1b\xba\xd0\x8f\x07q\xcc\x16\xff\xff\xa9\xfb/\xbew\xe83\xc9\xf2\xe6\xda\xads\x87]\xb5r\xe3Y\xffy\xcd\xeas\x7fr\xf3\x06\xd9\xb9\xbdOF\x02\xe0\x81\xa9*\xad\xa8p\x1b_\xf9\xc3\xa4\xe5\x12\xf5\x15\xbd\xd3\x1c\xd0\x11\xa1\xe8\x1b\x13`\xb2.vy\x8b\xa1W\x9a\xb2\b\xaf\xa9\xc7B,G\xc5l\xaa\x1d[\xa7\xe5Mo\xf9\xf4Y?\xb9z\xe5Y\x1f|\xf7\xd9\xfb/\x9e\x1c{\xc4]\xe67m\x99?\xe8\xf2\xab\xd6-\xf0]\x93H\xec\x84\xa1n\xd8\xa1d\x90\x1dg\xa6\xe7R\xe9]4\xe5\xff\xd1\x9cQ\xc7\xa1|\x8a^\x9f\x9e;MG\xf5u\xbc\xf5M\xafz\x83\xe3\xec\xde8*\x96\xf9\x90\xb1e\x95\xbe\xfe\x8e\xe7\xc6\x9c\x98\xb4\xc4\xa7\xd4\x1e\x96]\x99D\x94\xcf\xe3\x17\xbf\xe8\xe9]sW\xb7\xfd\x11\x9f#\x11\x89\xde,\x84\xdd\x86\xe4n\xc6\x9e\b\x9c\xe8{\xf31\xf7\n#M7\x95h\x1a\x1d\x07\xb6\xb1\x95\x82\xd3\t\xba\xeaP\xe55\\*\xff\xd2\x81a[\xb4\xf8Ji\xd2\xce\xf92\xec\x9dHCva\x9c\nA\x10\xa8\xb4k\xcaO\x04d\xfd\x9a_\xb6usVv\xaco\x9f\xca\xebs\xb8\x1c\xbe\x986D\x19\0q\bq\x88Qp\x17\xf7\b\x82\x9c1F\xc3n\xb8.x\xed\x19\'}\xf3;\x97\xdd\xb4c\xfb\x8c\xd1\xb3P\xf1f\xe6\xbb\xf8\xbe\xf0C)\x9d\xa61\x85M\xfa\x92b\x16PY\x83\rG\x8e^\xac\xa7\x94\xcau7\xde)W_\xb7\xea\xf4#\x9e\xba\xffW\x1f\xe9\xf7\xc3\xec\xfc`\xd1\xfb?\xfe\x8d\xeb\xbf\xf8\xd5\xab\x97\xc06\xcb&#r\xe8h\x0f\xb6\xc3K\x85Al\xdc\xa9\xe5\x81\t\x02\xd5\xf7\nJ\x9f6\xd2\xa2\xd1\xa7\x9b\xb3X\x1e\xb4\x1a\x15\x7f\xb6V\xd5\xe7{\xa5Db\0\xfc\x05\xe7\x91^^\xc8\x82e]y\xee\x93\x17\xca\xf1O\xd9\xf7\x0bG>a\xaf/\xacX\xd8\xbd\xf6\xe1\xdc\xa4>\x9c\xd5\xf6\xbd\xe9\xf6\x84w\xd5c\'\xbaW\x1d\xbf\xff\x92\x8b\xf1\xb9\xa9A\xbcd\xe5\xd6\xe9\x93._\xb3\xed\xb5\xd7n\xda\xf5\x94\xdbw\xcd\xcb\x94\xde\x8c\xf3\xd7\xdd6c=x\x8f\x07\x81\'\x07\x8cu\xe5%\x8f[\xf2\x83\xb3\x1f\xbf\xec5\x13\xa1\xb7\xfewu\x7f\xff\x9d\x05\xae\xdd\xeb\xf0\xbd\'\xbe\x8e\x8f\xads\xd1~7o\x9c:i\xcbL\xff\xa0~\x92\x8fzv\x95\x8e5\x83\xf5\xcb\xc7\xdb7\x1d\xb0d\xfc\xb2\xd1\x86\xff[\x1b\xe1\x80_\xa2\x03\x96\x8f_\x8e\x8fW\xbc\xe0\x90Wo\xdc6{\xd0w\x7f|\xf7\xbb\xbe\xfe\x9d\x95\xa7_\x7f\xdbzR\xb7&\xa4\xf8\x9c_6w\xa10\xe9\xa4\xad\x14\xca\x8d(%\x14\xc3\x14]\x16\xc9]3\xc7d\x17\xec{a\x17\xb5=\x14\xa0|\xde\xc1\xb3g\xaf\x9b\xd9?|\xf9\x07r\xe3\xadw\xad\xfa\xf8\xfb\xcf;\xff\xd9G\x1d\xf2\x88F$\xfc\xfbO\xee\xbap\xfbT\x8f\x02\x14\x84A\xdaVl\xe2\\r\xe3\xdf\x88\xb1\x06\x88\x07X\xd6\x05Y\x84\xb0F\x8c\f\xd8\xd5M>Q\xe0>\xf5\x0f_ \xc7>\xeb\xf0O\xffO_\xa4\f\xe2\xb4b\xc4\x89\x85\xbbn\b6\x15\xccm\x7f(\xcc\0\xac)\xcbtB\xdd\xc4\x1b>e\xe0\xd8\x04A[S\xa86\x07PMx\xbcf.\x19;\fVS\xe4!q\xce\xcau=Q,e\xbf\x05\x8e\x15\xe8I\xa0m\xc2\xea\r=$\x87"3\xcf\f&\x03b\xe1\xda\x01#]\xean\xf4\xef\xb9\xde\xe9\'0O\x10\xa3pt\xc3\x16\x99\xe3\xdc\xae9\xc9\xb3\xbe\xd8]\xcc\xec\xb4\xc5\x87\x03}\xa80bEz\x1ef#f\xb8(\x9c\x1d\x1c\xdf\xc8\xbb\xbd\xe1\xf0\xb5\xb2\x0e\xc8\xaf\x07Q2\xb6\xfbZ,_\xb6\xf8\xe6W\x9dy\xf2\x15\xef\xff\x8b\xcf\x1c\x1d@}\x97\xa2\x94\t\xd4\x8d\xa9\x9c\xa3\xc0\x16\xec\xc5\x86J\xd65l\x1d\x13\x1aVN\xd7\x10\xdc\x17\xc1\xdd\xfe\x1b\xdf\xf9\xc9\x87\x1fi\xe0\xban\xe5\xea\x93\xdf\xf6\xc1/\xfe\xf35?\xb9G<\\G\xcb\xd8R\xd1\x1f\xd0\x1bR\x1c\b\x11\xd0{*`,\x1c\x18\rE\x81\xca\xa8\xbe\x9e\xaacFO\x12\xc8\xfb\xf5\xa6\x04\x80\x8e\xb6\x1dT\xc0\xfa\xbe\xe9G\xc2\x92\xf2S\x0e>@N\xf9\x83\xfd\xbfq\xd2\x11{\xbf\x7f\xf9d\xe7\xe6\xdf\xd6\xdf\xff\xf1f\xb8\xf9\x98\xc7\xec\xf5\xb7\xf8@\x85f\xe3l\xff\x90;w\xcd\x1f\xb3e>:\xa8\x97\x17\x0b\xf4f\xa3\xd0\xfdk\xd3~\xe3\x9d\xff>hA\xf7\x07\r\xc7\x9e\xff]\xdf\xd7\x7f/\x82$\x7fW\x97\xde5;\xffu\xf5\xea\xd7_\xfc\xc5+>\xf5\xe3\xab\xef\xa6\x81p\xa8\x9b/\x18K\x9e\xc1\x9cu`\x12xm_b\xa8\x97J*A\xe4g\xa7\x11\x19\xf0\x8e\r\xcf\xaa\x86\xa3\x02\xba) \x13L\x1f\x8b\x8d\xbd\xb4\x12iO\xb4\xe5\x82\xd7\x9c|\xfd\xdb/8\xf9(\xdfs\x93=\xfd:\xd0\xcb{\xd9\x1b\xbfZ]s\xc7\x9d\x92m\xdf\xa97\xfa\xca$\x17u\x14\x1c2I\x94\xe1d\xd3\xd3\xca\x8a2){\xb3\x06|\xa1\x12\x83j\x94w^\x89\xf8\xba\x995[-\xf9\xee7>\xfb\x82\x83\x9f\xb0\xff\xbd\xbd\xb9\xf9~\xb4\xe0\xe8\x97}n\xc7\xba\xb5\x03i\xdaM\xe3\xa6\x9fF\xe2\x8d\x05\f\x9f\f\xbd\xc5\xe25Ki\x8c:\x12\xb6&\xa5\xd9\xe9(p\xc0\xcc\x18\xb3>\x96\xb4\xba\x90\xc87\xc0\xe7\xa4\n\x06L\x19\x9e\xd9\xb6\x83i\x02\xe8K\xc2\x15\x01~\x97\x94\xbf\'9\xe7q\xfc\x96Cv\x98Bl\xba\xa3\xe2\xf1\xc3\xb1\x82\xb6ci/\xe3\x07K\x8a\0:\xb6\xe1\x03\x81 \x15\x89\xc6#\x8b&\xa55\xde\x96|Z\x18\xe9\x1e\xf7\xb6+h\xeb\xeb\x1e@Q\xaa?OepQ\xbf\xaf?\xcb-|\xbe\xbc\x8f\x9fd\xa4\xe7\x96Q\0\x80\xe1\xb6J\x019\xd5\x9b\x94\xdc\xcb\xe4\x87\xff\xf8\xae3\x8e8\xf4\x7f@fzfn\xc9\xf1/~\xed\xa6\xd5k\xd6\xd3r,-\x8d\xbd\x94\xf9\xf9{f\xac\t\x19]\x8a\xf0n\xabM\xa7\x0e$?\x97\xf3\x91\x92\xdcD\x9c\x8e\'K\x17/\x92\xef\xfe\xc3\xfb\x1e\xb3pAw\xcd\x9e\x7f\x1f\x94\xf2\xd9/\xfe\xfb?\xff\xc5g\xbeq\xf2\xf4\xf6Y\xb1\xd2\x80\x06\xd4v\xd0\x16O\xc1[\b\xd2\xb8\xbe\xc6s\x91\xe2\x96\xca0k\xba\x8fX\x19\x8d\x95\xdd\xb0i@\x1f\x81\xa0M\x98[7y\xd3\x12\'\x94o\xc8Q\x87\xef\'o<\xed\xf0w\x9c\xf0\xb4}>\xe6:vQ\xef$\x8f\xbee\xd7\x97\xe0QL\x97\x1d\xa78\xfe\xa8\xfd/\xfe\x97\xbfy\x85\xfb\xf9\x8f\x9e\xf6\xfe\x03W,\x92\xd9\xd9\x1ee\xb2\xae\x8dFqS\xef\xd4C\xdd\xf0\xfaf\xe6I\x86\xb3N\x1c\xf70B\x0e6\xea\xb3\x92\x9b\x01\x99\x17\x8cV}d\x0e\x85\x94\x85;^G\xe2\xb9T\xfe\xfc\xa3_y\xca\xa9\xe7~(^\xb5z\xd3\xd1{\xfau\xfc\xf7O\xd7\x9e{\xfd\x8d\xab\x95I\xe8&\xd5\xf5\xc5\x1fi\x91\xfdp\xfa_\xcf\x1dl\x11%\x1e6\xdae\xb7Y\xad\xb2\x8d*\xa5_`\xac,\xea\xf4S^\xb0\xfegA\x0b\xab\x1fe\xa3=H\xa6\x19YT\xb0l\xe4x\x017?\x1bq\x13\xa8\x98\xb6tsn\xb6\xc4i6u\xc3\xd7\r\x11e%\xcf\xa7\xc1)\xb2\xb8\xe0\x8eRd\xb9\ff\x90D\xdc#`\x18W\x15\x97\xbdB\xb0\x81BY\x13\x98\x13\x9b\xe5(aV\xc6\xd5\xc0\r,\x96\0\xd1\xcfb\xb4\b\xec\xa30\xac\xea`\xb0\xd9\\\xdf<\xb5\xd9\xe4/9\xaf\x0e\xa3\xe0>\x03E1\xa8\x8c\xec\xa7@\x99b\xac\xec.\xd1\x9f_\xac7\x13)\x13\x05l3\x80\x8d\xb9-8\xba[\xce0\xf9\xd9c\xe9\x17eJ\xb4rg\xe6\x06K\x7f\xf6z\x8c\x8dv7_\xf4\xfa3?\x8d\x1b\x05\xb8\x8d\xc3d\xd8b\xca\xf6\xd0V\x8c\xeaV\xa3:\x81\x93yNO>\xdd\xfc[z\xbe\xad\x80"\x94\r\x1b\xb6\xcb\x7f\\~\xc3\x85{\xbcT\xbcu\xea\xa0s.\xf8\xab\xea\x9d\x7f\xf6\xd5\x93\xe7\xa6\xa0\x92l\xd2`\xd4a\x84K@W\nS \xb29fRb\xa4\x85\x92\\3\x06B\'\x15\xccI)\x90\xa3d\b\xe1\x12\x06\xf1\xad(\x95\xa47#\xd3\xdb\xa7d\xbf\xa5#\xf2\xb9?=\xe9#\xdf\xfc\xd8)\xee\xf3\x9f\xbe\xe2#5h\xd5\xc0U\xaf\xff\xc5\x85\x9e\xce\x8b\x8e?\xf8O\xbf\xfb\xa5\xf3\xc6\xdfw\xd1\xf3\x7f\xd0\xd0\r>\xd1;pDvp\x96\x0b\x9b\x8f\xdb \x98qc5\xe1\xca\x94\xd63#\x130\x90\x1b\x15#TU\f\\dR\xabm\x92\x84\x95u\xc0\x89\xe3{\xdf\xbbJ\x9ew\xca\xbb~\xfc\xd5\x7f\xbd\xfcS{\xf2\xfc/\xfd\xf7[\xffO\x7fN\xef\xeaw\xe5\xf4n\x83}\x15lp\x10YRV}\x96\xc8\xc0O\xca\xa0\xc9\xb2\x96\x99\xdc.\xc9b\xd0\xe7\xdaw\x9f\xe5\xf2\xc7\xaf;\xf3\x05\xf7=\xee\\/Y\x1c\xc59\xe5\xef\xe8\xe9\x01\xaf]\xbf%v\xee2\x89\xb6\b\xfa\xec)A\xa9V\x94\x11\x85\x17\x95n\x90\xcdQ\x9ba}Q\xcf\x18\xd8\xa2\x7fd\xeb\xf5\xc9\xe7\n\x82\x11\x80\x063w\xd4|\xba\x90\xb0C<\xe2(x9\x9c\xc9\x82\x82Q\x1c\xb9w\xe0\x99\fA\xbf\xdfx\x15* \x17\xfa\xf3@\xceW3P\x10v\x19W\xd1^\xdc0r\xff8\x13\xbf\xe9\x93\x05\x01\0\xe3H\x9f\x05\x03\xab\xf0/\xa4\xdff\x9f\xde\x846$\xfc\x9en\xd6\xa1\xb1\x1d\x83\xda\x90*\xc9a\x98$d\xf5\xbbf\xfb+\xee{MN}\xc9\xf3\xdet\xd4\xd3\x9fL\xe3V\xda\x01\xc9P\xd4\x03\x9b\xb0 \xe4\xa0m\t\x96\xe5\xa0\x87\x92P\x14\x83\xf7\0\x1c\xf3\xd3>\x9c\x19r\xf9\xb7\xef^y\xc1\x9e\xfc\xf9\x7f\xf7?\xae{\xfb\x89/\xff\xe0-\xff\xfa\xad\x9f\xd0\xf1\xa6\xc8<\xce2\xda\x04f\x9b\x86\xb6\xb9\r\xc7\x94\x82\xde\x9e\xf4 \x16\xe3\xd5\xc7\x8f\xc2\xd4\x0e\\\xf4\xeb*\xbd\xd9\xd2\x0b\xd5\xec\x8c0\xc3*\x1aD\x12\xeaq\xde\xf5\xfac\xaf\xf8\xfe\xe7_3y\xcas\x0ey\x07n\xf8\xea]\xa3\x06\xaez\xfd\x96\xacv3\x98\xbe\xf0\xb5\xc7=\xf7[\xff\xf0\x86\xe3\x8e;z?\x99\x9b\xe9\xd3\xd2\xc8\xf70\xd3\xd3`\xb9\xc5E\xf3\x1a\x1a,\xd74\xe6Y>\xb3\f\0@yWf\xd1\xbd\xb1\x17\x1c\x86\xf6\x8c\x8d\r\xa4\xdd0{\xdd\xb6m\x97\x9c\xff\xc7\x1f\xbb\xe0\xa2w\x7fz\xeb|/Z\xf0p\xcfy\xc7\xae\xb9\x15?\xba\xfe\xce\xbd\x1d\xaf\x92\xac\x8f\xe1\xed\x9c\xee\x04\xb0\xc4\xaa"\xf4\xb4\x02)\x9c\x90\xc0e\x01\x150t\xccX\x88\\1\xcc\xe2\xa0\xf0\xf9\xafz\xd9\xb7\x96-Y\xf4\x0bI\xcf\xd3\xb3\xd1\xf2hn`f~0<\n\x87\x0bdtY]:\xedSj\x0f\xe0\xce\x8d\xbdV\xd0\x05\xbe\xe9\xe6oAB\x9d\xd3\x82\x0b\xc1\x91\xb4\xbe\x85\x04Z?\x0f\x87\xf7\f.\xe2\x85E\xc9:\\\x19\x1c\x18\xb2\x96\n23\x96n\xee\xc6\xc1\x84N_\xc3\x9e\x96eB\x9f$\x9eU`\x1b\xd8f\x18\x98\xa2\x18\xd7\xccNA\xf9h\xc1\xb7\xd0\'\xc3H\xb3\xbe\xb2\xbbT\xfc\x16\x06\xc5M\xf6\x93\xc4\x15\x01\xd3o\xa0\x94\x17\x0ee\xe0.\xdd.\x10\xa9a\xf1\x1a\x99\xf4ml\xdcP\xda\xed\xd81\xf3\x0b\xc0\xe5\xban\xf1\xc7\xe7\x9f\xf9V\x17\xf9N\xaecLH\xca!\x02`\xa8\x15\xd8hyz]<\xe3\xb4\x1f\'\x9c\x1e\xc1\xd8\x18\xfc\xf7\\}_\\}\xe3\x1dr\xfd\xca\xbb_\xf4p\x7f\xf6q\x925?\xf8\xc9\x7f\xbc\xe6\x9c\x0b>\xf1\xe15\xeb\xb7\xb0|\x9b1Seh\xaf\x84\xed\ta\x890\xbe\x1e\xcc\xe8\xcdE\xdf8\xd7\xc0\x97\x91\xe9\xd1\x15G\x1b\x10\xc9\x82\x0f\xdf\x1b\x11O\xd9,B^\x0b}\xef$Q!\x7fp\xd4\x81\xf2\xad/\xbd\xf9\x05\xefx\xfd\xf3\x9e\xd9i\x85;\xeb]\xa2\x06\xaez\xfd\x96\xae\'<n\xaf\xcb\xbe\xfa\xb7\xe7Z\x9f\xfc\xc0i\x97\x8ct[\xd2\x8fS\x0e\xbc"\xb2\xc2\xd7\xbbj\xcf3w\xe5(\xbfIa\xfc\r1\x1c\r[!\xf4<Y>\xa4\xd7a\xc0\xde\x17\x93u\x91\x02]\rgF\xf2J>\xf3\xff\xff\xcb\xa2\x17\x9f\xfd\xce\x1d\xb7\xdc\xb9\xf69\x0f\xe7\\\x7fx\xc5\x1d\x17lX\xb7\x8d\xben(\x8f9(\xabah\xba?\xcf\xfc\xb3r0\x0b=6\x19\x16\xf2\xcf\xa0\x02\xc4\xcc\x15\x065!$y\xe2\x81\xfb\xcb\xab^\xfe\xe2\xfb\x95\xedo\xda6\x7fP<H\x8d\r\x97e\x9c- \xed+i\x8d\xe5\xd0\\\xd6\x92\x9e\x1e:\x16?\f(\xa5\x06EE\x84}L\xd7wO\x92>l\x9e\nc\xee\xab\x1f\xfd\x19\x18\xe8\x1a@\x07\x83B\xa9\x0f%4(\x11i\xa8\xac\x80\x8b\xd2*m\xa5`\xd4K\xe1\x83kf\xbd\x1a\b\xfe\xc3p\xb2\xb1\x0f\x82\xa3\x15K_\0 \xcc\x8ba\x88\x19\xe5>+$\xd0F=\x183\x1b#f\x8aF\xb3\x82\x8c\xc2\rL<\x8e\xb1\xabt\x8d\xc2\xae\x18\x02\xa4c\xca\xc0P\x99\xad\xdd\xb8\xeb\xb0\xfb\xbb.\xcf;\xfe\x19\x1f;\xf19\xcf\x94T\xaf\xa5\x0b\x05$\xad\xcdR\xce\xc6q\x86\r7.(/\xe7\xb1\x94\xd1@\nD\xe4\x88\x89\x9c\x87Y12\xd2.\xfd\xde\x15\xef\x7f8?\xf7u\x1b\xb7?\xe5\xb4\xf3>\xd4\xff\xc8\xc5_;\f\xc3\xdce\x9a\xd3\xa5\x83\xff\xd1\xeb\xcf\xb8\xd8c6\xad\x1a\x86\xe8\xc1\b\x1bC\xf6\x1c\xfe\xc7\xc8\0\x1c% \x8fW\xa0\x0b<3\x7f\xe6\xea\rG\xac\xaf\xa3\xd1\xb0\xe5/\xfe\xf4\x94/\xfd\xf3%\xe7\xb9\x07?\xfe\xd1\x99\xe2\\\xaf\x1a\xb8~\xff~\xb0\xfa\xcb|\xceiG\xbc\xfa\xbb_\xfb\xe3\xc3O|\xee\xe1\x12\xc5p\xa6\x19\x98\x04`\xdf\xa7"\x8e\xb6A\xb8\xb3\xb5\x86\xf5\x16\xb8y\0\x9chwg\xbc\xd8\xb0\xa9q\xde\xd1\x83\f\xb9A\xc6R\xc0s\xcf\xf6\xe5\xca+o\x92\x17\x9d\xfe\xce\xef\x7f\xe3\xd2+>\xfc\xeb\x9e\xe7w.\xbb\xed\xc22\xd3M\xbcJ\xe9\xc4n!\b\xb1\x19\xd0\xe1\x01\xa5B\x94\xee\0VV\xdc3\xc3\xd5\xb6\x91\x89C\xa9\x07N\xf3\xe6\xf3\xcf\xb8\xb8\xddn\xde\xef\x80\xe5\x9a\x8d\xd3G\xee\x9eXB\xf9\xd1\x0f1\\\xecq\x90\x1b\xf3]\0sD\xd7#s+\x8f]\xba_d\n\x0e\xfd\xe9\x01}\n\x81\xe8\x8e\x82\xbd\xabl5\x18A:\xae\xb9\x06\xc1H\x93\xf3sp\xc8\x88\xa7K\x1a\xd8\x82\r\x81\xbd:\xa1\xb1\x9c\xf2:>\x1f\xe3\xb5=\x93\x92\xec\r\xbf\xe6\x99!\xe1\xa4\xaf\xec,\xb2\x8d.\xdev\xd8\x03\xc3h^eg\x12vQB4"\x1a\xdaLE9o\x1a2e<\x83\xb9\x84\xf1%.\x93\x02\xcc\xaf0\fW\xb1\x99c\xec\xc1\xf3\x9b&.\x05\xc0\xb5n\xfb\x032\xe2\x0b_\xf7\xf2\x93\xba\xdd6s\xce\x9c{\x07Y\xe1\xa5\xa77\tQ\x8f.0Tt\x82\x85\x05\x9c\xaee\xdf\x13\xbe\x91z\xf5\xe5?.\xbf\xe9\x90\xfe \x1e\xfbu~\xe6?\xf8\xcf\x9b.|\xd1\x99\x1f\xbc\xee\x87?\xbaN\x1c}\xcf\xc1\\\xc2r\x03z1Zt\xd2/\x8c\x0bH>\x1c\xeb \xf3u\x86\xb9v\x19\x99We\x9bh\x19\x8a\x8f\xf0>V\xc0J\xd2Y\xe9\xeb\xb5z\xee\xf1\x87\xc9w\xbe\xf6\x96g\x9f\xfb\xf2\xa3\xcfv\xea>V\r\\\xf5z\xf4\xad\xc7\xec3q\xed\x17\xff\xfa\xe5\xd6\xa7?\xfa\xf2ON.\\$\xbd(c#\x1f\xfd\rl\xe4\xe8}9t\xaa(L #\xc0\xa10"\x0e\xb81p@\xda\x1a\x9aw2\xff\xca\xe1FY0\x8c\xd1\x93\xed[w\xcak.\xf8\xd8\xdb\xdf\xf3\xa1\xbf\xbf\x05\xb6<\x0f\xe5\xdc\xee\xb8g\xfb1\xd7\xdf\xba\xc5\xcc-\xe5\x99\xf8@\xca\xdd\xd6:\xf0\x95\xb4M\xb0&\x1dM\xb0\x89\x89\xb14\x02K\x80\xc3\xc8\xb1\xc7\x1c)\xa7\x9f\xf2\xfc7=\xd0\xf1\xd7o\x9e9\x04\xc3\xa7\xdc\xd0\xbd\x90\x8a;8\xc3[VB8s\xd1\xd3)B\xdd\x0f\x95Y\xc5\x9c\x8a\xa3\xb0\xc5k\x05FD\x01\xc6\t){\x1b\x9e\xbb\xcaV\xc7\x03\tF\x91\x86\xec\x11\bQ\xe6\xcb\x13\x8f\xee\xf1(\xa7z-\xbd\x9e\xfa\xe1wC\t\x14\xb8\x10\xb1\x01\xd6\x05&\t#[\f?\x1b\x06\xa6 4\xc0\xaf\x9eq\xe4\0\xf0\xc1\xd8\xc5A\x9b+\xf0\x98\xd4\fCe\xcc\x83u&\'\xf4xM\xb1\xc3\\\tH\x83f\xb0Y\n\xf7\f8\x7f4M/\f\xe0\xe2b\xc6+\xe7\xeb\xc2y\xa3<\xbcv\xd3\x0e\xdd\xc8\x93\xfb\x05\x97\'\x1f|\xc0\xb7\xf4\xdamF\x10&K\x9e\xb6=4 .\x8d\xb5\x90\f}\xa6ql0\xf0\0\xce\x11\x95\x89\x05\xd2\xcf\xafZ\xbdY\xae\xb8\xfa\xd6s\x1f\xca\xcf\x1b\xaa\xc1\xbf\xfc\xec\xff\xfd\xce+\xde\xf0W\x9fX\xb7n\x838)\x1c\xf3\x8b\xddf\xfb\xec3b|\x03\xb3I\xc6\xd463\xefK\x04q\x96C\x13\xeb2b\xa5\0~\x12~\xd0\xd4\x9f\xab\xc5\x81\xe3~\x1c\xcb\xe4\xa2I\xf9\xcb\x0f\x9f\xf9\xb7_\xfe\xec\xab\xac\x03\xf6[ty\xfd\xdb_\x03W\xbd\x1e\xc5\x0be\xc1S_|\xe8E\x97~\xe5\xfc\xa7\xbe\xf8\x85O\x93(\xc9$\xc3]\xbb\x0f+\xa9\xa1j\xcb\x1en^`\x07\xb6c\x9a\xf4(\xdb\xa1\x07\xc4\x12\xa1o\xe4\xdb\xa8\xb2A\xd0\xe0\xd8\xdc`Pv\xcb\xd3X>q\xf1W\x0ez\xcd\x1f\x7f8\x9e\x9a\x99{\xd0i\xab\xdf\xfd\xe1\xad\xef\xdc1;\xe0\xbc\x8d\x03%d\x97>V\x92\xcd\xf6\xe9\xb7W\xbaC\xafF1n\x12\x001l\x9c\x8e2\x8a\xb0\xd9\x91?y\xc3+^\xfd\xcb\x8e\xbfqk\x7f\x01\xd8\x84\xdblq\x13,\x14\x98\xad@\x19\x85\xa3\x1bb\xcb\x84}\x02\bJD\xdewL)\xcf\n\xc1D\x03\xe6q\xb9AC\xda\x93\r\nF\x92$ \xa00\xae\x04\xb11\x98\xcfUF\x05Wy\\\x03\xbf\xed0J\x1d3_\xc8M\x83\x87a2+\xb4\xedA\xe9\xab\xd8]R\xec\x98\xb8\t\xd0X<\xc6\xef\xb8\x04n<\xc6kyz,OYU\xc9x\x12\x18\xeb&J\x95!\x95G\xf5\x0e\xb3H\xc1\x88\xb2\xbe\xa6^\x17\x1f*;\xfd\x13\x19MP."\x1e\xc3CLNJ\xb0Eol\xd7\xd4<\xa2\xdbW<\xd0\xf5\xb9\xe05\xa7\x9f\xb4t\xe9r2>\xf8\x18\x9a\xa4\x81|\xc8\xf4*\xb2.\xf85f\xbd\x88\xe3\x07v\xcbGaR\x99f\x82\xa1x\xf9\xde\x7f\xfe\xf4-\x0f\xf6g=\x88\xe2\xce\x9b\xdf\xf5\xe9\xa9\xf7~\xf8\x8b\xcf\x8f\xfbs\x14Y\xe4\0\'\xd76Ve\b\xc4\x1c\xa6TC5\xc9\xf7\x9dm\x9c\xf6\xa9J\x19\xeeT\xcc\xcaC^\x9a\xbe>\xc77\x01\x98\x91\x9e\xcf\xf3Ox\x92\\\xfa\xd57\x1e~\xf6\xa9G\x9co\xdb\xf5\xb6V\x03W\xbd~g\xd6\xbe\xcb\xc7\xae\xff\xc2\xc5g)\xfb:\xfb\x93{-^,\xbd~N\x06\0i\xb4\xa7\x9b4\xec\x80\x90-H\xe99\x06\x91+\xcb\xe4\x7f\x89\xf1m\xb4\xe0\x01\xa7w\xf9\x96\xdb0}\x18\xbfA\xd7\x0e8\x98C\xf7\xf7\xb5o\xfc\xbb\x9c|\xd6;6\xdd\xb3f\xe3\x11\xbf\xea\\\x8a\xb2t.\xfb\xd1-\xcf\x81\xe1k\x16\x0fX&\x14\x05\x0b\xf4Tr\0+<\x1c\xa1\xe9f\x03nh\xef\x0e\x8e\xe2\x94\x12\'\xb1\x02\xf1\t\xf3\xcf<\xea)\x97<\xd0\xf1\xe7\x07\xe9\x82\xd5kw\x8a\x8f\xf2\x1d\x82\x1a\x05\x83\xb4\x01\xfd\xdc\xaaf\x83\xbd\x91\0\xc1\x80\xaer\x97qWF\x17\x87\xf4^\xb6dT\xdcFK\xbc\xa6\xc2BX\xd2U\xdfkY\xd2\x18\xb7\xcd\x88\0\xca\x80\xfa\xb5P\x1f\x13\xb4m\xe9.\xd3?G\x02}\r\x1eE\x17\xe1\xa8)\x0f\xd2\xc7\x0eQ(\x10A4\x94\xad\xb5\x94\xe1vl\xb25\xa8\n\xdb{y\x12N\xa0|\xa8\xdcaD?\0\n~\x93\xec\xcc\xef\xe8\xb9\x8d\xf8\xdc\xaf\xe3d q\xda\xd7\xeb\x1dH<\x8f\xf4\xe4J\x9f;\xa4\xf90D!6\xc6\x1b\x949\x82-:pM\xb1\x8d/"^\xf3\xec\xf4\xbc\xb2\xce\x9d\x87>\xd05\xdag\xf9^\xd7_\xf8\xba3\xbe\x8e\xfc&\xcf\x19n\x07C\xe6e\x18RN\xb5)r\xc4\xf2h`\xfaL\x8d\x80^\x9b\0\xdf+\xae\xbcy\xd1\xcc\\o\xd1\xaf\xfaYo\xdd6\xb5\xdf\x99\xe7\x7fp\xee\x92/]:&\xf9\x803V\0E\x1b\xa5a0G[o\x0e\xa0\xf6\f:f\xb0\xd0\x8a\xf5\xfa\x19\x1b\xad2\x8d\x18\xb9\xe2\xc0~\nsY~H\x97\x14\x88K\xfaQ!\x93\x93\x8b\xe5\xaf?v\xee\xa7\xbf\xfcw\xaf\xb3\x1e\xb3\xcfoG4O\xbdj\xe0\xaa\xd7#\xb0N\xfb\xa3\xa7^\xf4\xad\xaf\xbc\xfeI\'>\xf7I\x02\xb9x\xce8\x10\xa34\x87\x17\x1a6\x05\xb0\f\xc6\xa4T\xbb#\x85R\xe3\x94\x9d\xa6\x04)\xf4\xc6`\xe8\t\xc57\xd0\r3?\x8e\xde-_u\xed\xed\xf2\xd2s\xdey\xe5\xca\xdb\xee~\xfe/-\x13\xae\xdar\xdc\xedw\xafA\\+\xe4j\xe2)\x93\xa8\xfa\t\xef\xe6\xa9(,L\xb23\xc3\xf7X\xb6\xf2\x8c\x12R\xd7\xf2\xa5\x8b\xe5-o8\xfb\xb8_v\xfc-;\xe6\x0e\x04\x9b\xf3B\x13\xfb\x82\x01\xdb\n"\0\n%\x9at[\xa8\xd0s\n\xd1\'iH\x1a\xa5|\x1dV\x15*\x9b\x88\x04\xd1*)\x12h\xb3B\x81\xc2\x96\xd6\x02\x80\x91\xcf\xbc-\xc6u\x05F\xaca\xb1\xb4\xe9\xb0\x07E\x8f[\x17a\x81\x951H\xf5\r\xf3\xc1\xf79\rc\x94\xca\xb0J\x98\xa1z\xe6\xb5\xe0e\xea\xfd\0\xed\xa3\xe2(\xa3\xe3IkQ@\xf9\xbb\xdbh0B>\xabJf\x7fyAS\xd2\x18b\t\xb3\xa9#\x84\xd0\xb2\x8c\xe5S\xe9x\xb4\xa3b>.\xfa]\xfa\\\xb1\x1e\xf3\xb6U\x1b~\xa9x\xe6\x95\xa7\x9f\xf4\xca\xc3\x0f=\x88\xc1\x94\xe8\xe7U\xb6gBJK#\xf8\xa0\xef%\xae\x1b~\x0eQ\xc2s\x02 W\xfd\xbe\xac]\xb7V\xae\xbc\xe6\xd6s~\xd9\xf1\xd7o\xda~\xc8\xe9\xaf\xfd\xb3U\xdf\xbf\xec\x06\xceUeYN\xd0"\xb3\xcb\x14\xa0l#\x1c\xaa\x12c"Lu##\x7f,\x8a28\xfb\x86yB1\xce\xfe\x9eW\xb2\xe4\x0b\xc1\xd1\x0b\x8e;D\xbe\xfd\xd57\x1d~\xe6K\x8f|\x83m[\xf5/v\r\\\xf5\xfa]_\xcb\x97\x8c\xde\xfc\xc5\xbf~\xa5u\xf1\x9f\xbf\xfc\xe2\xf1\xf1\t\x19 \x9f\b%#\xc8\xe61\xf3\xa5\x9b!\xdd\xe8\xe1>\xcf\x94`\x94mr\xba\x17\f\x13_L\xf4\x0b\xbeOw^\xf4p\nF\xabXr\xdbm\xf7\xc8i\xe7\xfe\x7f\xdf\xb9\xf9\xd6\x07\x06\xaf\x9f\\{\xd79\xb3\xfdHR\x02\x81E\x1b&\xc6\xdd\xc3C\x8f\xce\x12\xa9\xb1ub\xfeVI\'x\xcf\x82\x95U*\x17\xbd\xfe\xec\xaf\xaf\xd8g\xc9/\xbd\xbb^\xbba\xea02\xca\xb0\xc1\xbbv\x866R\x83\xe0\r\xfby\na\x8d1q\x95}E\xf3\xc8q*$\xc7\xf1\xad\x19\x81\x7f*\xb2\xb9\xc2Q\x9f%\xb8\fF\xc5\xe8%a\x8c@\x01\xddm\xfb\x1c8\xc6\xe9\x15\x19\x07\xb6\xf4s\x16\x85#\xb9\x82\xdd\xfc\xe6Dz\xeb\xfaJ.bJ\xca\xe39\xf328\xe3\xdb\xb0\xc8\xaa\xa0R\xccR\x8b\xa0\x86R]\xaa\xaf+\xeaEd\x86Y\x1a\xf39\x1b\xa3\xae~\xb49|k+\xfb\xb3\x11\xee\x1b\x06\xfa\x9c\fZ#\x9b\x13\x04\x83\xeaM\x85\xcdh\r\x87\xe0\x0b\xd0g\xfa\xad\x17\xca\x1dwo9\xe6\x97]\xa7 \xf0\x06\xefx\xf39\x17\x81u#j\xd22\x91\xd2\xf4\xbb\xb4\x80\xaa\xa5\xf1X\xccKc\xbfe\xfb\x16\xc1\x1b\xddO\f~_\xfe\xdf\xd7\x9f\xf7@\xc7\xbeg\xed\xe6#N;\xf7\xbd7]s\xed-\xb0y\xe1\xe3-\xd7\xcchA\xd1)\xa5)\xfd\x99\x1f\f\x10|@\x93`+A\\\xcd\xc0\xcc \xea\xd7\x1c\x05b\x88Q\xe0\xbe\x8e\xfb\x8b\x91\xd1I\xf9\xc4{\xcf\xfc\xc2?|\xe6\xf5\xd6\x8a\xbd\x17\xd4,\xab\x06\xaez\xfd>-\xf4\x14\xcex\xc9\xd3\xdf\xf4\xed/\xbf\xe9\xf0\x17\x9e\xf04\xdd\x88\xec{\xbd\xf4<7\xa7\x0b5\x868\xa1DdN\x98c"\x150?S\xda\xc6\xf3\xd0\xf8\x05\xfa\xf4\x02\x04#)\x871\x13w\xdf\xb1N^\xf9\xba\xff\xf3\x9d5\xeb7\xdd\xaf$\xfb\xea\x9f\xdesz\xae\xe0T\xa0d4\xd2\x12\xab\xe5S\xb1\x065ci\x9by$\x80\x17\\\x12,\xdd\xc8\x9d2\x934\x89\xe4\xe8#\x9e*\xaf:\xf3E\xbf\xd2\xb5~\xe5\xdd\xdbN\xcc\x10\xbd\xcel3\x8b\xbd\x14\xee\x8f\x1c\xe2\xd5\xe3\x85-\xf1\x9b\xa34F\x872\xadRv\x94\xb9\xca,\x9a\x96\x82vG\x9f\xaf\xc1\xf6\x9a\xa34tnk%\xf3\xdb*\x0e\x17#\xb2\xc4S0t\x14\xc0\x10g\x81\xcc-WA\xa5\x18\xce\x84e\xbd\\\xa2m\xb1D\xdb7Io\xd3@\xa2\xa9\x98\xe9\xc6\xd5Py\xc8\fL\xf4\xb7:\x16\x19\x19\x86\x8b\xe1G\xe4\xb7\x03\x96\x13\xb3\xd8\x95\xde\xceR\x92\x1e\0\fsk\xfa3\xe9\xdb\xfa\xda\x15\0\x9dHY\x96^\xe7\x86G\xd3\xdd\xdd%6XuY\xc3\x92\xaa\x89MA\xdc|\xa6@d\xcb]k\xb7\xfc\xcaR\xde\t\xcf>\xfc\x93/\x7f\xe9\x0bv&Id\xc0\x8b7\f&\x94\x90\xe1\x94\xbb\xfd/1\x92\x10\xc0\xf8\xb7\xa9\xd7\xcb\xa3\x80\xe3\xa77\xdc\xb6B\xd9\xb6s\xdfc\xee\x98\x9aYq\xee\x05\x7f~\xe5\xf5\xd7\xde\xcaD\x06\xb0$\xabaT\xa9\x02\xa1\n\xd3\xa1\xf5u@Ej\xe5&\xa6\x03\xee\x1f6,\xa0\xf5C?\x07\x03l\xcf\xd6\x9f\x15\xdc\xde\xf5&)J,9\xfe\x99O\x95o\x7f\xe5-\xcf|\xe5\x19\xc7\xbc\xb2fY5p\xd5\xeb\xf7x\x19\xe5\xe19\xd6\xc7\xdfw\xfa%#\xa3\x1d\xe9GfP\xd7U&\x057n/p9xjAx\xc0\xf0\xcd\x88\x11\x10\x95m\xac\x8f\xe8N\xcdD^\xdf(\xf1 5\xd7\xcd\xf8\x86\xebo\x93W\xbd\xe1=\xd7\xcc\xce\xff|\x1fdj\xba\xb7\xe4\x86\x95wK1\x98\xd7\x1b\xedH\x02\'c\x8f\xbe\x18z,\x16\x03c\xa6\x8b\xbbs\xb2\xad\xc2\x94\x93F\xc7F\xe5\xcf\xde\xf5\x86S\x1f\x8c_\xe2\xedk\xa6\x8f\x85\x88\x03\x1b0\xcar\xe8\xa7\xe0\xb5\xc0o\x8f\x1ev\xba\x89\xe6s=\t\x10\xd0\xd8\xf6\x94\x10\xf8\xd2lv\xc4NCe4.\x81\xc0\xf2-\xf6\xa5Z\x8b\xb0\xb9:\xecy1,\x10\xbd\x9e \x97\xc6\x02\xe3\x9b\xc7AY\x0b\xf6N\x0e\xc5\x1a\xae\x1e\xcfm\x1b\'\x0bD\x9a\xf8\xca\xdc\\\x04\x1eB\xfc\xe1\f\x03\'\x13\xf8\x18\xba,C\x82m"\xb99\xec\xb8\x14\xa04\xc6B\xe9L6\x19\xbd\x92\fz\nf\x99\x14\xc8\xe8*\x1d\xc9\x95rd\x10\xa8\xe8\xb1\xca\x04O\xeb\xd2I\xdf\x80\xb2e\xae=\x94\x8b\xb9I\x9e\xbfg\xc3\x0e\xd99\xd3\xdb\xfbW]/e]\xcf\xdc\xef\xb1+\xccx\x1b\x9c4 =\xc7\xcf\x14eZ\xccX!\x0f\x8c\xfe\x8a \x9f\xa9\xf9\x1eeFw\xaeZ+\xab\xd7m>\xf2g\x8f\x95fYp\xc1\xdb>\xba\xfa\x8a\xcb\xaf\x11\x1b\xee\xf58\x0eF\t0(\xcc\x99@\x80\x94\x19\x13`.V\xd9\xe3\xcc\x18\x1c\xfcirB\xab,e\xfep\xcf\xd0\xf7\xe0 \xce\xa5\xd3\xe9\xc8G\xfe\xf4\xac\xaf~\xe5o\xcfw\xf7_1yE\xfd[[\x03W\xbd\xeaE\xf6u\xcei\xcfx\xf5\xb7\xbf\xf2\xa6#\x8f\x7f\xd6\xc12\x88\x90\x96k1\xfa\x05\xc3\xbe\x98u\x82l\x1e2p*6J3cT\xd2\xa9\xdd\xc4{\xd0J.g\xe8\x15\xbf\xe6)\x03\xfb\xaf\x7f\xbfR\xde\xf9\xbeO\xae\xfa96t\xfb\xfa\x93\xd6\xaf\xddHw\n\xd8\xfa \x0f\xacJ\x06\xca"\x06T\xc5\xc90C\x8cYb\x92\xeasW\x92\xe8\x9d\xff\xeb\xcf}\xd9\xb5\x87?\xe5\xa0\xaf\xff\xaa\xd7\x92fEp\xe7\xbaie\x8c\xbe\xf1\xee\x83u\x15B&\x1d\xc8\xec\xa1\xe0k\xea\x06\xa9`\x04#beP\x19\x02\x131|\xac\xcf\x17\xb4\x0b\x05\x85\xc2\x84=f\xe8QY\x12\x8eZ\x12\x8c\x944\xd45\xaaA\xfd\x1a\x92o+\x04\x0b\xfa\x14_\xb8\x14_\0\x88\x1a\xd2]\xd1\x91\xf6\xbe{KkyW\x1a\x8b\xdb\np!\x93z!\xa6p[\0@\xd7H\xe4a;\x95\x1a\xe0\xa7\xf5\x96\x92\xccp\xc2b\xfa3\x18YU\xc2\xa5]Y\x07\xd4\x87\xad\x8a\xc2\x14Xo\x01\x94r\x1f\x17\x1c\xe2\x05\x8bq.\xe8\x01\xd2\xed\x1d\x02\xbc\xd0\xe3\xc0\xb8\xa3\xaf\x7fjz \xeb6\xef<\xecW]\xb3\xbd\x16-\xb8\xe3\x9d\x17\x9e\xf3I\xec\b\x1cJ\xc6l_^\x0e\x93\xa6\x0b\xba\xa9\x17\xa0\xa7q\x9f\x89\x02`\xe1`J\xbbv\xec\x90\x1bW\xde\xf9s.\x1a\x1f\xfa\xf8%\xd7|\xfd\x9f\xbe\xc7\x81\xf7\x8a\\L\xff/IY\x0e\x84}\x13\xfa\xa4`q\xc8\'c\xb8+\xe6\xc7\x90\x93\x86\x9f\x16\xe6\xca\x90\x10]a^\xab\x92\xfe\xc0\x92g\x1fu\xb0\\\xfa\xe5\xb7\x1e\xf7\x9a\xb3\x8e=\xc3uk\xbb\xa6z\xd5\xc0U\xaf\xfb\xac\xc7\xee\xb3\xf0\xaa\x7f\xfc\xbb\xf3\xdc\x8f\xbf\xff\x8c/t\xdac\x12\'\x16]\xe7\x01^\x1e\xd4\\\x8e\xc7~\x03\xcb\x87\xc3\br\xb3\xb9\x99X\x15\f\xdaR\xe4\xe0\x18\xe9<\xec\x8a>\xf3\xd9\xaft>\xff\x0f\xff\xf2\xf9\xdd\xcfq\xe5\xb5w\x9d9\xbbk\x97n\x82\x991F\xc5P3\xdc)\x94M\xd0\x19\x03\x02\x07\x86\\\xe5\xfa\xbc\x85d\xba\xa3?\xe3\xe9\x87\xcaEo8\xf3\xb8\x07\xf3\x1a\xee\xde8\xf5\x8cu\x9b\xe7\x94\xc9\xd9\xacJah\x98=:eR\xe5\xb4\xb2;\b5\x10,\x19@f\xae\x1b<E\0\xfaz\x90\x1a\xdc\t\x15\\,J\xd4\xd3A)q\xaf\x92\xf9\xadz&\x10\\$%\xc1\xd6k t\x10\xbd%_\x1a\xc8\xcbjyt\x95\x87[\x05\xe6\xb0\xc2\x05\r\xfdhK8\xd9\xa2\'!\xac\x9f\xa8\xa1\xa0=\x94K\xd9{c\xc4\f\x81\xe7\xb1c\xbe\x1e\xe6\x02{\xaaX\xcfo~S%s\xdbc:\xf5{\x8d\x90seA\xd7\xa6\x1c\x1eQ4(\xdfb$\x01=I\xdb2}F+\x85\xdb\x85\x91\xd6#\xaa\xc5V@\xc5\xd8\xdd *\xe4\x86;\xd6=({\xa6\xd3^\xf2\x9c\x8bN;\xf9\xf9I\xa2@\x85\xf9f\x1c\0\xa0\xc5\xbcN\f\x83C]\x98\x14\x94\xacs\xe5\x85D\xb3\xb3\xf2\xa3+\xae\xbd\xb7\xcf\xf5\xbd\x1f\xfe\xe4-\x1f\xfd\xe4\xe7\x0f\xa1o\xa0k\xd3m\x83n\xc6\xbe\t>\x84\xd0\xa3\xa2\xb9`Iv\x05oB\xd8h!\b\x12\xb3\xc2\x8ec\xca\xd2\x89\xfe\xac\x1a\xcd\x11\xf9\xd0\xbb\xcf\xf8\xe6?\x7f\xfeO\xdc\xc7\xef\xbf\xf4\xb2\xfa\xb7\xb3^5p\xd5\xeb\x01\x17\xdc\x06^u\xc6Q\xaf\xfc\xbf_\xba\xe0\xb8?x\xd6\xa1\x12\xe5\xc6\x05\x1d=\x19OY\x07\xad\x8b\bb\x96\x01/\xd7(\xd1\xd8\xd7\xa7j\x8f\xb9\xe6\x14l`S\x82E\xd3;\xde\xfd\xb1s\xae\xbd\xe1\x96\x97\xc5i\xd1\xfc\xe6\xa5\xffut\t\x95"\xd4\x8by\xc5\x19\xa6,\xa1\xdf\xfb\xf0X\x96Q0\x16\x03\xfe{tT7\xb0\xf7\xbc\xf1\x8cf#|P9C\xb7\xad\xde\xf5\x9c^\xbf0\xee\xe7\xed\x06\x95w\xc8\x17\xc3sI+"@A\x86^!\xb6=\xb7\x19\xdfa\xb7l\xf1\xe1\xe5\xe8\x06\x12v}iO\x98\xc8\x0fl\xde\x0e\xe2\xda\x01L\xba\xf9\x06\xca\xbe\xc0\x9aP&\xcc\x15\xd8vm(\xb8\r\x835\x95T_8\x1c:\x0e\xc7B\xf6\xad\xbc\x86G\xb3b\xda\xc2\xd29^\xaf\x99\x02\xdf`\xbe\x94\xb9\xcd\xca&\x95I9H\xec\b\n\xc9\xb3DAkZ\xfa[\xb7H\x7f\xfb\xacdP\x19\xc2\xdd\xde\xcbi\x9akC:\xdep\x19 h\x9b\xa2\x9d\xb1\xb1\xd2\x9f\x83I\xb4\x8f\xa8(,\xa1\xfcT\xe0Bb$\x06zo\xbec\xf3\x89\x0f\xf6g\xff\xde\xb7\xbd\xe6\xc9\x8f\xdbo\x1f\xf6\xd20\x16\xc1A\xf0\xe1\xcf\x05\xe5\xd2\\\xdf\x0b\x82\xb9?zKY4\x12\xfe\xde\xf7\xfe\xab\xb3i\xeb\x8e\x83n\xbfk\xcd\xb1o\xbc\xe8\x03\x1f\x1d\xccE\x94\xad\xc3\r\xa3\xf2Bs\x13\xc3\xb4e1\x89\xdd\x10h\x94\x95\xe9e\xe1\xe6"\xd0\xeb\xdb\xcc\xf4\xb0\x16A.*\x1c9\xfa\xc8\'\xcb\xa5_y\xdb\x0b\xdep\xeeq/v\xdd\xda\xfd\xa2^5p\xd5\xebA\xae\'\x1c\xb0\xf8\xb2\x7f\xfc\xbb\xf3\xdd?{\xc7\x19\xdfh\x86#2\x18(\x18\xe8&\xe9*#B\x19\b"\x05\xb0\x16\xfa\xa4\xa3\xf7\xe5\xd04\xcf\x18\xb7r\xc8\xd6g9\xcco6e\xfb\xe6m\xf2\xc2?|\xf5\xd7\x9eq\xfc\x05\xfd\x1b\xaf\xbdY7)\xc7$\x18c\xff\x83 \x03=3H\x9dA\x13R\x13z\x89\xcd\x11\xb3\\\xef~\xcb\xab\xbf\xf1\xf4\xa7<\xf1A\x87\x17\xde\xb8j\xc7\x8b\xa0\xce\xe305\xb2\x98$\xa3\x94\xbe\x9a\xec\x8a\xbf\xd7\x12\xfdt\x83\xf6NE\x02\xd3Z\b$`g\xe4\xf3\xf4\x93A\xac\x9f\x8f\x94\xf9D\x92\xf63*\x1e\xb1\xb1\xe2<\x113\xa2\xdf\xac\x8f\xb5i\xfe\x0b\xf0\x83\x02\x11\xe5N\xd89\xa1\x8f\x86o\x84\xf5\x13\xae\x13X\xaa\x03\xafGR\x0b\x0e(\x99\xc1\xed"g\xa0\xa5\xe51\xfeP\x8a\xd8\xa2\xfb\x06>\x92\xb9\x9e\x14\xfd-\xcc\x1e\xab\x90\xb9\xa5\xd7\xdcq\x91\xdc\xdc`\xb2\xb1\xe7\x0e\x9d8 v\xc0\x90xa\x06\x91\xfd\xce\x88X\x0bG\x99%\x06\xcfD8\xff;\xfaw\xccp\xdf\xbcj\xe3X^\x94\xce\x83\xb9v(\x19~\xf8=o|k\x88Di\x86[\xdaF\\\xc1\x9f\x8f\xde\\\x14\t\x03J\x9d\xa1\xd8\x05\xbd\xb95w\xad\x92g\x9f\xf0\xaa[\x8e}\xde9?\\\xbdj\xb5\xb2\xd6\xa6\xb9\x16\xec\x91U\xf4\xbb\x14\0 \xd4\xa3`Z\xfa\xfa!qw\xf5\xfc\xf8>r\n2\xe3\xc1 \x97\xc0m\xcb{\xdf\xfa\xf2o\xfd\xd3%\x17\x86\x07?~i\xed1X\xaf\x1a\xb8\xea\xf5\xd0\x17z\n\xaf\x7f\xe5\t\xa7\xfc\xdb\x97.|\xee\x11\x87>N\xe6g\x12\xdd\xbct\xb3G\x19\b\xf6K\x9e)\x079\xc3\x9e\n\xca~\x80\x1c\0\x96\xf1\xbf\xb3\xd9o\xf1Z]\xd9\xb1u\x9b\xdcr\xfdO\x8d\x19\x06\xed{le\x1c\x1d)}\x9b\xa9\xbfe\x1f\xc6\xae\x11\xfd\xe8 \xabG\xc9\xea\x8fN\xfa\x03y\xfd\xabN9\xe5\xa1\x9c\xf3\xf5wm=\x10\xe7&A(6\xfbT\x81\xd8\x9d\x0eYU\xa8 \xe2\x94\x05\xc5#A\xc73\x02\xb7B7\xd8<\x90\xa4\x1f+\x0b\xcaez\xcd.\x99\xdf:\xaf{m)\xe9\\%\xf3[,:\xbb\x17\x89\xcb\x1eY2\x9bI<\x9f\x8a?*\n\x18\xc3\xeb\xa4\xd7\x01\xeaD\0\x16\xcbk(\x9b\xdafp\xba"\x8b\xb5\xd8G4q%\xa6\x14\xea\x8d\x94\xc0AQ28,!*8\xb9c\n`\x8b$\x82\x99o\x92J\xa0\xd7\x07\xe1\x88\xc9|\xa1\x8fQ\xd0\x9c\xb78\x83\x06\xfb\'($\xe1xR\xa5\x15\xdb\x8b\b\xe0\xac\x9a\xfaZ\xf1\xba\xc5x B\xe6~\xd7\x9a\xcdr\xd7\xfa\xed\xc7<\xd8\xeb\xf7\xbc\xe3\x8e\xfc\xd8\x9b_w\xfa\xb5)\xf1\xd65\xf2\xfaR\xd9\xd7\xa0\xcf`G8\x9a\xd8z3\xc2\xf0I\x92$KV\xdfq\x87\xde\x9cl\xd2\xd70B\x81\x0eU\x83`dH[F#\x14\x16Y\x9eo\xae\x11\xdf/%\xc1\x97\xbd2\xfd\xfa\xfcT"\x87\x1f\xbc\xbf\xfc\xeb\xdf\xbf\xe5\xc5oz\xcd\x89\'\xf9\xfe\x9e\x0f,\xadW\r\\\xf5\xfa=[O<`\xd9\x0f\xfe\xf5\xef/j\xbd\xefmg~\xd7wZ\x92\xc4\x96q\f\xb7\x87\xbd\xaf!\x90\xd94I5\x19T\x94>\xd3\xe1[\x81\xc1C2m\x83\xae\b\xe8\xdb@\x83\x81\xbbq\xa7\x15RF\x8e\xe1YJ\xe1\xd3\x8a\x19X0\xdd=\xf4\xd0\x03\xe4\x93\x1f\xf8\x93\xc7<\x94\xf3\xdc\xb8}\xfe\xa05\x1bv1\x04\x92\xb1\xb7 \x82\x0b\x17\x88\x1d\xba\x12\xcc\xe6b\xa5M\xc5\xc6&{qYn\x9bPF\x8e+\rt\x03M\xf4\xef\x95\xb2\x1e\xe5k\x91EP\x83\xe0\x02\xa9\xc6\xd1t&\xbdMs\x12\xef\x9c\x93d\x97\x82+\xad\x91`\xf1\xd4\x94\x90\x9e\x8f\x16\rr\x0bDj``\x17Q!\x98\x833-?\x03^\xb4\xd8\xb2\xa5\x01\xe3\xdd\xc2\xe7s\x80}!\xd2\xc5\xd2\xc77\x16\x04\xd2X\xd4\x91`bT\xdcn\x97\xae$6{M\x01\x95\x82%\x9c\xfcm$)\xe7\xc6\xe5\xde6\x913\xec\x11\xc6\nV\x91#.T\x94\xe3#B+\f}-\xb6\x9e\xdb\xdc \x91\x9b\xeeX\xf7\xe2\x87r\x1d\xdf\xf6\xc6\xb3\x9f\xf9\xc2\xe7\x1f-\xa9\x18/A\x8cI`l\x8f\xa2R8\xf9\x07\x01\xd9#\x04\x1c\xb0\xc8\xe2\xcd\x8b\xdf0\x83\xd5\xcc\xd0\nM\x96\x1b\xc6\x11\xc8\xc2-\x82\x1f\xca\xb7\x1ed\xef\x95\x91\xf0$1\xaebC\xde\xf9\xe6\xb3\xaf\xf8\xe6\x97\xdf\xd3:\xf4\xe0\x15\xdf\xac\x7f\xdb\xeaU\x03W\xbd\xf6\xd8\xc2\xb0\xea\x9b\xcf\x7f\xe1\x0b\xbe\xf1\x85\xb7\x9e\xfa\xb4\'\xef/\xfd~\xca\xcd\fw\xfd\bCt}\x87\xae\xed\xaec\x86F\xb1q\x9aw\x99K\xd9\xb6\xddhq\x9e\x07n\x12~{D\\8{\xeb\x97s\xa46\xc7\x03J\xae\rl\x152\xbehT\xfe\xeaCo=c\xe1\x82\xf1\x87\x14\x11\x7f\xf3\xaam\'n\xdf\xba\x95.\x1eNnz@V\x96\x8b\x1bU\xe27F\xa5p[\xe2\xb5a\xf9\x14(`V\x9c\xf3*\x8aH\x92\x04N\x18mz2\xbaaW\x1a\x13\xba\xf7\x8f\xda\xb4\x84\xc2\xe0l6;\'\xd1\xd6\xd52w\xf7\x16\x19l\xd8!\xd9\x1c\xf2\xb2|\xf6\xb2\xa0\xe5O\xe2\x82q/\x04\xdf\xbc`9-\x87\x8c\x1c\x82\x84\xe1\xec\x9b0mX\b4\xa1\x82Tk2\x147p\t\xda\xd1\x8e\x94\x02\x91\xf6RW:\xfbt\xa4\xb3t\\\xda{\xb5\x95\xd9d\x12\x8e(x6:f\xb8\x987\x01z\xceQ\xce2\x1eJ\x85\xf0U4%\xc2\x06\xd5\x91VR\x9aL+\x14\xfbR\x8b"\x8fko\xbe\xe7e\x0f\xe5:\xea\xcdH\xf2\xc9\xf7\xbd\xe9I\x07\x1e\xb4B\xb2ao\xae\x82\xca0O$\xef\xf5\x15\x8c0\xeb\x07\xb9\x7f\xa8 \xd6`i\xd8n\xb5\xd9\xaf\xc4x@\x85\x81\xb58\xd1k\x8f\x99,s\x13\xc0\x9b\x1b}\xbd\x9c\xbf\xd2\xc7\xf7{\xb1<\xe9\xa0}\xe5\x9f\xbf\xf8\x9e3\xde\xf1\xe6\x97>3\f\xfdA\xfd[V\xaf\x1a\xb8\xea\xf5\x88\xac\xc3\x0e\xdd\xef\xeb\xff\xf6\xa5wt\xdf\xfe\xa6S\xae\x02H\xa5IB\xc7xX\x06\xc1\xaf\xcfx\x1e\xea\xdf\x1d3\xdbe\x06\x95\x1d\x96\x96\xb0\xc1FqO\xc6\x96/\x95\x05\xcb\x971$0\x8d\xfaR\x0ez\xd4\x83\xc36\x15q\xf7\x9f\xfc\xb3\x0b/>\xe2\xa9\x0f\xbe\xaf\xb5{]s\xd3\x9a3\n8\x8e\x83\xf04L\xef\xca\xee[\x146\x14\xf4\xb4\x1a:6\xa0\xc4eWt\xaf\xa8\xac\xa6n\xaecz\xfe\r\x05"W\xc6\xf7kKg\xf9\xa84\'=\x188(\xa8\x14RE\x9b\x95%\xde\xa9\x1f;\x14\x13\xfa\xa6\xbf\x87\xfc\xb0\xa0b\x9ap6@\xc6ee\xf2\xb0`N\x8c\f\xad(\x93t\x90q(9\xd7?\x01d\xc8\xf6\xca q\xefxF\x8d\x18\x98\xc8\x13\xb7i\xb3|h7r\x93K\x16\xb6\x15\xb8F\xa5\xb5\xa0\xa5\xd74\x97\xa0\x8d\r\xdfe?\f\xe7\t\xe7\r\x94S\xc1\xe2\x98\xe2\f0\xf0\x87\x19j1\xb8\xa6\x02I\xa7\xc1\xd7\xea[\x81\xfc\xf4\xb6\xf5\x8b\xb2\xbcxH\xee\xfd{/\xdb\xeb\xe6K>\xf1\xaeS\'\x17\x8fKa\x19}D\x15G\x92#\x17\rF\xfe\x01\xbc\x15\xf5\\pc\xd2h\x1aG\x8c\xd2\f\x05\xd3\x88\x19\xb3m\x98\x0b\x83_$zf,\x11Zz\r\x06d\xdbo\xbd\xe0\xd4\xeb\xbf\xf5\xb5\x0f\x8e\x1f\xf1\xb4\xc7\x7f\xb5\xfe\xad\xaa\xd7CY\xce{\xdf\xfb\xde\xfa*\xd4\xeb!/\xcfu\xd2g\x1e\xf9\x84K\x8e:\xfc\xf1w\xddt\xdb\x86\x93\xd7o\xd8N\x95!\xc5\xdd\x9c\xf7*MP%\x04\x18b\x1c7(\xa3F\x8c=\xa31<iw\xda\xcatbI\xf4\x0e\x1e3[\xb4;*b\xf9\xe0\xbb\xce\xbb\xec\xb5g\xfd\xd1\xe9\x0f\xf5\x9c\x94\xec8\x1f\xbe\xe4\xf2\xbf\xd99\xef\xb2\x85f\x8f4usU6\xa0\x9b\xab?\xd1\x16WZR\xce\x9bs\xf0\x15\xd4\x82\x0e\xd0+\x94F\xb7eLn\x9b\x95t\x97\x84\xd2]\xae\x80\xd7\xb2\x15\xb8\x84\xf1#\xe8A\x893\xcd\xd95\xa7\xd1\x15wd\\\x9a\xca\x88\x9c\x86\xcd\x19$\x880@0\xa0\xb8\xa4\x84\x1c\xcc\x8b\xa0bI:\x15Io\xedf\x89\xb6lTV\x89\x03\x05L9\xc6\xf5\x81\xa3F\xc9\xd0G\xa4\x1f\x9b\xa0F\xafe\xb3\x04\x97\xcf\x892-K\xcf\x0b\x92\xf9\xcax7Z\x8e\xc4\xfd\x01\xd9\x0eg\x9f8s\xe5P\xd4Q%\xb6a6\x1d\xfd7\xfaj\x18\xf6\n\xf4\'\x10\xc7T\xee\xf5\xd2X^\xf8\xac\x83\xffsr\xac\xf3\x90\x18\xec\xd2\xc5\x93\xb7\xaeX\xbe\xc8\xfb\xf6\x7f\\\xf9\xac\x14N$t]\xb69H\x1c6B\xf6\xd1\x120+\xc7\x18\xe6Z\xcc\xe2\xd4\x1f\x04\xdaZ\x90\xb7{\x06\xb4`\x06\x8c\xc1\xebHY\xd6\x13\x1e\xff8\xf9\xec\'.:\xff\xec\xd3Nx\xad\xef\xb9q\xfd\xdbT\xaf\x1a\xb8\xea\xf5\x1b]\xcb\x96,\xb8\xe5\xa5\x7f\xf8\x8cO\xb9\xae{\xec\xf5+\xd7,\x1dd\xb9\xb2\x11\x8f3K\xd8\x80\xe9\xe6\0\xa7\x04\xb2.\x9b\xf6P\xb8\xeb\x86\x85P\xaa`\x95\xf5ce=\x89\xde\xa8\x97\nZ\x03y\xf7E\xaf\xb8\xf9\x9do>\xe7\xc8_\xe7\\V\xad\xdf\xf9\xac\x8b\xff\xf5\xa6s\xe0\xc0\x0eU\x9d\xdf\xee0\x02\xc4\x1b\x9b\x90P\x99_>\x1d2a\x18\xce\xe3A\xc7\xcc?\xc1\xba\xa99\xe1\xd2\xf7\xaf\xb5@\xa1m\xc2\x96pT\xa4\xb3\x17\xac\x9c\x14x\xd2JY\x902\x87\xee\x88\x82\xd9b\x05\xad\ti\xaf\x18\x13\x7f\xcc\xe4p\x95H\x1e\xb6\x87"\x05=.^/\x8e\x85\xe1a\xb7\xe9P\x15\x98L)0\xa7\xb3\x82n\x8e\xed\xb5\xd8\xefC9-\xef3\xf8L|\xfd>8\xae3\xe3\x8b\xb3g\xa6\xcc\xda\xd4\xe7h-4r\xfa<.\xf5|\x02\xde\x04\x80\xf1\xd8\xb0aJ\x87\x04\x12\x0e\xee\x19\xc0\x0bl\xac$\xd3,\x1c\x98\xd8\xa6LM\x86\x97\xe1|\x91\xca\x93\x0eX\x96?\xf9\x80\xbd\xff\xefC\xbd\xae\x8f\xdf\x7f\xc5e{/]\xb8\xf0;\xffu\xe5a`\x8b\x90\xe2#\xa5\x1al\x16\x81\x9fTH\xd21\xc5"\xcb\x06\x98:\x14\xed4(\xd4\x80Qp\x02\xb3b\xfd\xf7\x1b_\xfd\x92[\xff\xe6/.8\xe4\x80\xfd\x97\xd7yY\xf5\xaa\x81\xab^\xff{\xcb\xf7\xdd\xf8YG\x1e\xf4\xb9?8\xfa\x90\x1b\xd7o\xdcy\xda=\x1b\xb73\xc7\tVQ\x0e\xe6\x81@D|\xd7\xa4\xdb\xc2W\x8f\xb5:\xdd\xd4\x15\xb80\x9f\x94\xc5s\xba\xb9*\xd3z\xcf\xf9\x97\xbf\xeb\xc2s\x8e\xf8u\xcf\xe3{\xff}\xe7\xdb\xfe\xedG\xeb\x0e\xb3g\x0b\xc3\x8c so\xb5\xa4\x91\xb7\xcc\xc6N\xd7\x0f(!S\xc3l|\x05\xad\x05\xba\xf97\x1b\xd2\x1akHg\x11\x1c2\x94\xe9\x8c!\xcad(\xa8h\x18\xb6\x88\xcd\xd7i\x07\x12,Pf\xd6Q`\xca\x14\x1c\xb2\x92\xb3\xb50\x9d\x05\xc8A\xf6m\r\x95|E\x8e\x01Z\x87\xb9\\0\xbb\r\x906\xdc\xe8H0\xde\xe0y\xd9f\x1eW\xd9\xd9\xd02\x0b\xc1\x91\x105\x14\x0e\x8de\xc9\xc0\x9c\xdc\f\xf0Z\x85\xa4\x83D\xfc0 \xf8g\t\x02\x16S\xdaC\xc19\x03\xcc\x16\x0e\xf5\x14\x83x\x05\xd9&\xb4\xfd9\x92\x8cK=\xe6|\x82,F\xe9v\xfd\'\xfd\xe1\xb3\x0f}\xff\xafsm\x0fy\xc2~\xdfy\xec\x8a\xa5#\xdf\xff\xe1\x15G\xf6\xe7\xe7\xf8s\x8d\x07\x11\xfb\x7f.\xe6\xe5\xca\x92\xe1\x9b\x10\x9f`\x8c\xc1A\xe9P\x99\x16\xc6\x8d\xb3<\x97g>\xed\x89\xf2\xb9O\xfc\xc9)g\x9cr\xec\x05a\xe0\xf7\xeb\xdf\x9az\xd5\xc0U\xaf\xdf\x8a\xb5\xd7\xa2\xb1;_z\xe2Q\x1f8\xe0\xb1\xcb\x9c\xcd\x9bw<k\xc3\x86-\xcc\xda\x82\xd2\x90eDl\xd0ee|\r\xe1\xa7\x87\xd2\xd1\xa0\'\xfb\xec\xb3H>\xfd\xb1\xb7|\xec\xb5g\xbd\xe8\xe5\x0f\xe7\xf9?\xf3/7\xfc\xd3\xca\x1b6z\x9e\xd5\x10_7\xce\xa0\xd1\xa6\xc4\x1c\x1bj\x05\x10\x05HT\xb94\xbb%?\xdfD\x1e\x96\xdf\x94\xb0\xd5\x91\xc6\x98M\xa02\x8c\xc9\xb8\xb9\xa7Ie\xa2J\xc0\x10\x0b1\xb3\\-\xf4\xaf\x14<"\x9b\xde\x83A[\x19\x13B%]\xc2\x1cY\x95e\x1c\x9c\xc4s!4Q\x10\xec\x02 ;\x04\xafV\xd7\xe5\xa0-\xe4\xe0eeI\xa6D,\xd9\x95\xd3\x99\x02\xe0\x05\xb0\x0f\x9a\x86e\xa5\xf3\xba\xe9\xf7!*\t\x14\xa0JI{\xa5>W\xc8^Y:\x9f\xe91\n\xc6\xcbX\x8c )\xc8r-\x94+!\x8b\x1f\x9a\x1dWH\x8eV\x80\x05\xfbJ\xab\xdc>\xe3\x85G|\xea\xd7-\xcf=\xf1\x80\xc7|\xff\x98\xa3\x0f]}\xd3\xedw\xff\xd1\xfa\xf5\x9b\xf8s\x04H\xb3\x97\x85\x11c\xdf\xd8\x82A`\x93\f\xe6\xa9\x98|\xcaA\xfb\xcb\x07\xdev\xeeG\xde\xfb\x96\xb3\x8f_\xb6dre\xfd[R\xaf=\xb1\xac\xaa\xaa\xea\xabP\xaf=\xbe\xd2,\x0f\xbe\x7f\xd9O\xdf\xfe\xb5K\x7f\xf4\xbe\x9f\xde|\x8f\xec\x9c\x9a\x954\xd6;\x7f\xc8\xc8\x95\x99x\xca\xc0\x16-\x1c\x97\x93\x8e?l\xf3\x85\xaf9\xe59\xcb\xf6\x9a\xbc\xf5\xe1<\xdf\xfc Yp\xc2\xf9_\xde\xb1\xfa\xf6\xad\xe2\x8d-\x95\xa6\xd3T\xb0\x98\x90`\xa2\xc3\xf0F\x89\x0b\xf1+\x97\xc2\x0fD\x9d4&`\xa0\xab,\xc8\x1f\x95\xc6\xa8\x02P\xd7\x92Dy@w\xb9%\xed%\xc6.\x11n\xf5P\xd4\xf7w*\xc0\xea\x07\xe2V\xec\x96+idI\xaa\xdf\xeb\xb4r\x9a\xed\xa2\x97Sf\x05<\x12\x15\xec\xd0\xc7\xb2\x8c\xec\xdb\x81\xf8C?\x87^VQ\x9aAe\xf8\xf0)C\x1a\xf4"\xe9o\x1c\xc8`\xbd\x82\xd0\xb4~og #+\x9a\xd2]:.aW\xc1i\x90J6\x85\xd8z\xd1s\xf58\xac\xbb\xf5\xe69qQ\x96T\xdc\x99\xdd8+\xc9\xdc\x8c\x02\xd3\x80\xb3ey\xdfao\xa9\x84\x88\xa2i\x9c\xe2\x8bT\xaf\xf7\xf4\x9cde\xa4\xeck\x86j\xc4\x7f\xfb\xdc\x85\xaf|\xc6\x93\xf6\xfb\xc2\xc3\xb9\xd6s\xfd\xc1\x82\xcf}\xf9\xd2\xaf}\xf9_~x\xec\x9a\xf5[$\xeeGd\x82\b\xaf\xf4\x15\xc8\x16M\x8e\xc9S\x0f~\xac\x9c\xf6\xe2\xe3\xde\xfd\x9cg\x1f\xfe1\xfd\\=\x93U\xaf\x1a\xb8\xea\xf5\xe8Z\xdbw\xce\xac\xb8c\xd5\xc6c\xd7l\xd8v\xe4\xf4\xcc\xdc\x92V;\x9cY\xb1\xf7^W\x1ez\xd0c\xbe91\xd6]\xbf\'\x9e\xe3\xaa\x95\xebO\x7f\xc9y\x7f\xff\x15\xa9\xba\xe2\x8e-\x92\x86\xd5\x92p\xe9B%\x1fp{\x1f\0\x7f\xc4\x0b;R\xe4\x1d\xc6\xdd\xa3\xc7\xd5\x1ao3\xdedd\t\x06z\xa1\xf4\x13i\xef%\xf4\x04\xa4\xd3\x852\xa9t 2\xb36\xa7=Se\xdb\xd2\\\xa6l\xa8eQ\xd5\x87\xfc1\xe4\x93\xe5)\x80"\xa7\xe4\x1bl(\x07\xc3\xc1\xa0ZiD\x14i\x9c\xd3z\xc9\xf3\n\x063fq)\xc9L,\xfd\r;\xa4\xb7~\x97T\xf1\xbc\x02\xea@Z\x8bVHg\xf9\xde\xd2]\xa2,\x11\f\xae\x0fm\x8b\xc7\xd2"R\x95{\xdb\xfa2\xbdn^\x8fo\x9c=\x92\xf9\x9ed\xbd\x01\x95\x8fe\x82\xb2,HV,H\x95\x06\xcbETK\xb4kJ\n\x18\x18\x97\n\x92s\xbb\xe4\xedo>\xf1\xfa\xf7\xbc\xee\xc5O\xdd\x13\xd7|\x10%\x9d[W\xad}>r\xb7\xe6f{\x8b\xbb\x9d\xf6\xd6\xbd\x97N\xde\xf0\xb8\xc7,\xbb|\xc1\xc4\xe8\xfa\xfa\x9d_\xafGj\xb9\xf5%\xa8\xd7#\xbd\x16.\x18]\xa3\x1f\x97<\xeb\xc8\'^\xf2H=\xc7\x8f\xaf\xbe\xf3\xbc\xb8\x97Js\xf1\x04\xef\xfe!1/\x13eQe!\xae\x17H\xe5\xea&\x1e\x87\x02\xc7X?(\xa8\xd2+\x8bH|e0p\xa2@\x8aG\xb3e\xbc\xf7`\xde\x81\x12!g\x8f\x1a\x954\x17\xe9\xb1\xec\x10\xaaE\tF9\x0fL\xc3]$\xfa\xe6\x89c\xdc\x8cZ\x8e\xb2\xa1\x8a\xe3\0p\xb4\xcf\xe1\x1f\\\x9a\xf8h\x8f\x92u\x98\xca\xda\xcc+\x83a/R\x90\xc3\x89\x86\x14qK\xd1\x0e\xfe\x8f\xa3\xca\0\xc79\x13\x05I^\xd8\r\x14\x80\xf5\xbc#w\x98\xa9\x193\xee\xa4\xbf=Q \xca\xc5o\xa5\xc3\x9c/\x97~\x8be\x06\xf7\x11\x9b\xa5CLT\xe7I\xc5!_\xaf\xa1\xaf-\x8e\xa0]W\xe0l\xcaU\xd7\xde\xf9\x14y\xdd\x9e\xb9\xe6\xcdF0\x7f\xd8!\x07|\x1d\x1f\xf5\xbb\xbc^5p\xd5\xab^\x0fq]\xf9\xd3\xbb\x8f\xf1[\x13\xf4\x16t\xab\x86\xe2\x93\xa7\xa0\xe0\xb0\xd4\x07\xc7\xf6,\x82\xa0\x022\xf8B7\xf3\x84\xc9\xc3\x8e\xdb\x95\xe6xh\xa4\xfa,\xef)@\xf4M\xde\x96\xdb\x16\xca\xf6\x8b\xc4\x885\x90\\L\x19\xbf\xc3$\x0ee4\xc6\x83\x10\xe2\x07\'0\xa9\xc1\x19\xf2\x14a\xc3a\x19\xbb\xa3<\x85\x97!\x98X\xc9~^\x96\x02\xc7`\x87U\xe9\xf1\x1d\t\x16\x8eI0\xd6T\xc6\x94\x8b\x0b5\xa1\xef\x1b\x17\x12\xa8\x12+\x9cs\xc5H\x17[\x9f\xa3\xd0cA\xcc\xe2\x85MI=\0\x12\xdc=\x06\xa2dM\xcf\r\xa2\x10[\xcf\x1d\0\x07\xa1\x88\xc7s\xcb\xb3\x8a\x03\xcb\xb0\xe2\xca\xf5\xf9\x83FCn\xbfk\x9b\xdc\xb3a\xfb\x11\x8f]\xbe\xf0\xaa\xfa]S\xafG\xeb\xaa\x07\x90\xeb\xf5\xa8_w\xad\xddv\xf4\xca\xbbf\xc4o6\x18V\x88UZ\x01\xb5\x12\x185*ce?\x83J|\xb8\xbc7b\xbaP\xb5&\xbb\x122\xe0\xd1\xf4\xb7Z\x0b+\x89\xa7E\x06;\xc5\xa4\x14\xc3\xc1#\x16\x865"\xc4\xd2\x85\x83y\xc3<\x1f$\xe9~h\xb1\x9c\x98F%\xf3\xb1 IG\xfb\x0e>\x8e\0\f\xa8\xfd\x8aX\xc1\xaa_J:(XN\x04\xe0\xa12\x0f\x8fA\x9a\x10\xeb\xaf_0\x02\xe1FS\x01\xac%\xa1\xfe\xddk[\x8cG\x91\xc2\xb0(cV\\r\xc8\xb8\x18x\xca\xc4<\x19_\x11\x10\xa0\xfdvH\xab(K\x81\xd1\xf6\x12\x05\xa8\x94\xe0[\xc6.\xffD;,W\x80F\x89\xd3)l\xceX\xcd\xcc\xa7r\xf5Mw\x9fQ\xbfk\xeaU\x03W\xbd\xea\xf5\xbf\xb8\xaeZ\xb9\xe1\xcc\xb9\xbe\xcd9(\xcbC\xb6\x95\xad\xcc%PpIM@#\xc0G7\x7f\x85\x10\x05\x87JF\x966\xa5\xbbW@\x8f\xc4<\xb5\xc8\x9e\x8a\b\x1e\x80\x008e-=a\xd21d\xee`[.X\\\x80\x1e\x99\x98>\x92~\rN\x19dV\xa90K\f\x0e \xb0{\x82\x8epH\xb9\xf88\xfc\x07[,\xfc\xa6A\x9c\x01\xd1\x04T\x87\x90\xce\xa3\xefUBX1pL\xf6\x16\xfc\x14\x01\xa4\xed@\x1ac\r\xf3\xd1mHs\x14\xca\xc7\x96\x02l\xc0s\rG\x1c\x0eM\xdbvKZ\xe3M\x05\xdd@A\xd81Rxw\xe8)\x98\xa1<\x99\xd3g\xd0\xd4<K\xe3k\xa8\xe7\xf5\xa3k\xefzm\xfd\xae\xa9\xd7\xa3y\xd5\xa5\xc2z=\xea\xd7\x8f\xae\xbe\xe7<\xc7m3\xe6]B\x04]6(\x9a`\x84H\x92I\xa8,&I}i\x8dU\xd2\x18\xb5(u\x17/W`\xf0\x86@d\x1c\xce\xc3\xaeH2\'\b\x16F\x92<|l\xa1\xb9\x10\xa7]\x89\x13\x8a)\xf5\x81U\xc1\xc9\xa24\x19\\N\xa0\xacI\x01\xa1\xe27\n-\x96\0l\0O\xb8\xd2;\x85C\x0fC\x18\xd3\xc2\xa7Q\x86\x86\xb3\xc6\xbc\xdd\xe2s\xa3lY\xe5\x18Bv(\f\x81\xab<\xca\x9c\xae\x07\x83_\x1cK\xc1m\xbeT\xc0j\xf0\xdc\xe3\xd9>%\xf2\x8d\x91L\x89XH\x99<Xc\x91e\xd2OJ\xf1!I\x1f&T\x0b\xdc+\x90\xb4\x8c\xf0\xcf\x02L\xb1-\xd7\xdd\xbc6\x98\x9e\xef/\x19\xeb\xb46\xd7\xef\x9ez\xd5\x8c\xab^\xf5\xfa\r\xaf\xa9\xd9\xf9%+\xef\xdc\xaeL\xa5!\x0e\xc4\r\x8d\xae8L\xdc\xb5\x05.I\xaeR\x8eF\xb7\x92\xa0\x99\x8a\xdfVV\xc5\xc4aF 2\x8b\xcb\x03;\x0bi\xf1\xc7\xf2\x9e=4\xf8\xc8\xd1/\x9a5\xec\x0b,\x06\xf3]\0-`O\xd8\xd1\xc3\xb7\f\xfb\xea.v\xa45\xe9\xebs`\xf8\xd6d|U\xb9\xc7{B\0\x16\xbc\xfb\xaa\xc2\xd3\xe3\xe9\x813\xcb\x84oB*\xef\x19\xe0\xc2\xc9`\xd8\x19q\x1f\x18j\x86i\x16\xcdx\xcb\\\xb2~&\xc9|"\x83\xe9\xbe2\xc1H\xe2\x9d\xfa\xd8\xbcIO\xc8JQ\xb59\x1a\xd09\x03\xf6N(Y\xda\nNA\xb7b)\x14\xaf\r\xa2\x8dj\x18bI\xa7\xfe\xa0\xc9l\xb4M\xdbz\xf2\xd3[\xd7\x9eZ\xbf{\xeaU\x03W\xbd\xea\xf5\xbf\xb0\xae\xbbm\xd3\xa9[f\n\t\x10]22J\xbf\xbc\n\f\b\x91\x85\x91\xa7{u\x8b\xa9\xbd\xb4U\x02\x13\xb2\xc0l|\x89g\\f\x8a\xf9M!\x0b\x03\x185\x17V\x12.0\x8c\xa74Y\x96\xca\xa8\x86\xbf(\x8a1\xa1\x02L0\x02\x17\rem=e8\x83\xdd\x86\xb2\0!\x87\xee\xe7^\xd36\xb3b4\x1d\xc6\xb1Ly\x10\xeaD\x80#\x9a\\\x88\x06\x01\xa8f1\xe4\xea\x0e\x01\xd3kU\n\xac\x16\x9d\xde\x1d\x0ehgt\xce({\x85\xe4S\x91>\xd7\x8c\xbe\x9e\x19\xc9\x07\x03:\xf0{\xcd\x8avK\x9e7\xaa\xac\xb2M\xf1\x07\x04\x1cxn\x8b=9\xccuy\x04\xdb\n\xe6\xc2\x98e\xf3\x9abw;\x92[\x9e\xfc\xe4\x86{\xce\xa9\xdf=\xf5z\xb4\xae\xbaTX\xafG\xf5\xfa\xc9\r\x1b\xcf)\xa5-\x8e\x82\x16\x9c\xde-\xa8\x1f\x806\xca\x94|\x04[\xfa\x99\x82BH\x90J\xb3J\xd2\x19O:-[&\x1e\xebJ:\xa8\xd8\x9bjMX\xcaT\x14\xc0\xf4aP\xe9\x01\0,fd\x19\xb3s(\x0b\xd1\xb6r\x14\xb0\\\xcbdR\xc1\xcf\x10\x9fCW\xcb\xd9]"\x84\x83\x04\x99\x1e\xdc\xe0cI\xe70\xd3\x95(\xd0\x15\xb4\x84b\xf9\xae\xa8\x86^O&\xe7\x8a\xac\xaf\tC^#\0\x81\xc0\xa3L\x1dZ(\xb9e&U\xdc\x97lf\x8ejEWO\xd0\x0f\xc6\xa8\xc7\x0f\x1bm\xe9\xefH(6\x19Y\xd2\x96\xadw\xc4z\xde=\nP\b\xb6\x85\x18G\xf6$\x90\xd2\xc9\x98F\x8c\xa6\x9e\xd5iJ\x18w\xe5\xea\xeb\xee9\xa4(K\xc7\x81\xe9a\xbd\xeaU3\xaez\xd5\xeb7\xb3\xe2$k\xfe\xf7\r\xdb\x0eiuF\x8d\xa9o\xa9 `\xf9\xe2(\xf0\xd8\x88\x0eQV\xe2\xb7t\x93o9T\xfa\x15e\xc8\xbe\x16zY\xe8C\tT{\xb9MQFe\x99\xf9\xac\xc6\x02K\xba{\x0b\x99\x17\x12\x8e\x91\xcb\xe5\xfa\xe6\xf9 \x87/\x87\x19c~\xcb\x88,\xc0hXJ$x\x19%`\xd1\xcb%\xd95\x90\xb95\xf32\xd84\'\xc9\x8ey\x89\xa7s\x02 \xc0\x0b\xb6H\xbb\x05\x1a\x01\xc4\x1f\x81\xc1\x8e"7\x03\xcb\xe8{\xd1\x888\xd7\xe3\xf4J\x05\xca\x82\xdf[\xc247\xd6\x8fH\xc1h\xd0\x14\xdf\x1ee\\\x0bX`c\xc4\xe7\xf0\x19\x9c\xecm\x13~L\xf4\xb2\xf5\x85\xd9\x19\x82>C\x81a!r\xb5\x82VK\xeeY?-\xab\xd6n=\xba~\x17\xd5\xab\x06\xaez\xd5\xeb7\xb8\xee\\\xbb\xf3\xd8\xf5;sz\xe4a\xee\xc9V`\xf0+\xe4Q\x95\x145\xf8\xfe\x88\x12\x15_7se^vKF\x177\xa4\xd1\xa9$\x9b\xb5\x959Y\xd2Y\xa0\x7fB.\x8f\xb2]\x1f\xe5;\x8b\xffF\x1d\x02*?\xd7\xb7hvK\xf9\xba\xcd\xb80\xaa\0\x01VH/&\xe0\xa1\x87\x05\x05\xa13d^\xfa\xf52\xc6\xf03\xa2=v\xeaA\xe7\xf4\xf9r\x8a+\x10\xc4\xe8\xf9\x96\xb1cR\xc0L\x94\xdde\x11\xdc4 \x9f7=9\xc4\xc08\x81>VYX0\x11\x8a\xd7\x81+\xfd\xa4\xd8\x8d\xae\x02\xeb\xa8\x14ES\xbf\xcf\xb8\xedCm8\xb2P\x19\x98\x82XkD\xff\x0e\xc7\r\xf4\xb2`\xf9\x81n\x99\xed\x91%V\xa9\xb25\x009bG*\x97\xea\xcb\x9e^\xabkV\xae=\xbd~\x17\xd5\xeb\xd1\xb8\xeaRa\xbd\x1e\xb5\xeb\x8a\x9b6\xbdz\x10\x8b\x8c\x8e\xc2\xca]\x81+\xd7M\x19\x80\xe3*\xab\xb2\xc7\xf5\xcd]\xb0\xaf\xe4\xb7\xda\xd2PV\x13\x8c\x80yAz\xee\xd3\xf1\x02{<J~\x9e20\xc58\x05\xad\x8a \x04\0\xa1e\xaeg"\xeb)\xb2\xc0oJ.F\xda\x8ej\xa4_){\x93\xa1*P\x1f\x83\x84`\x88.\x1a\xca\xa2\xc6\xf59,(.\x16\xd2=\x1d\x8c\xc9\x1fux.|<\xb2\xba\xecR\x01\xa9\xa2(\x03\x01\x94P%\xa2/\x06\x96UX\xc6\xbc\x963]\x93\xfa\xb9A\x83\xd2w\xdf\xf7\x15<\xe1 os\xc6\f\x8e\x1d\xfd\x99R\x8f\xe1(\xab\f\x95\xf9E\xe2(8E\xca\xee\xc0\xacl\'U\xb0jK\x89\xfaf\x02\x07\x91\x90\xe0)\xc8\xc7\xd2\x17\xff\xe3\xebV\xbf\xfa\xec\x17\x1du~\xfdN\xaaW\r\\\xf5\xaa\xd7oh]}\xe3\xe6\x17y\xad\x96\xb8#cb\xf5\x03\xe38!=q\xca\xb62*W\xd9U.\xddI\x05\xb4F)\xa5\xa3\f\xa7\xe7Hk<\x90\xa0\xebQM\x18\xc0\xb6P\x01\xcb\x1b\xb1LH30\xa9\xa8(\xe2\0\x889F\x90G\xd5!d\xe8\x16#QD\xe2\xbeq\x8c\x07\xc3\xca\x8a\x8aVPE\xb1\xbb\x80\x913\x19\xb95\x19\x8a\xdfA\be\xaa\x1f\t\x03#\xcd\xb1M\x91\x03N\x17D\x1f}\f\x95\x88E\xa2\xecP\x01\'\x0f\xa5\xd9\r\x99WF{\xaa\xae\x02U\xc3\x11\xcf\xf3\x95\xfd\x99,\x14\x88A\x8a\xa8\x92d\x16\0\xac\xf0<\xe2\x8a\x13!\xb3+Tp\xcc\xa59\x92\xb3liW\x18\xaaF\xf9\xb4\xab\xc7\x9b\xe2\xe3\\\x05\xf7J\xc1\xd5k7\xe4\x96;7;3s\xfdE\xa3\xdd\xd6\xb6\xfa\xddT\xafG\xd3\xaaK\x85\xf5zT\xae\xcd\xdbg\x0f\xbc\xf5\xee]\xd2h5\xd9\xe7qR\x05\x920Q`)%\bS\xb1\x83\xbe\x04meX\xb9#iT@c(-e=\xed\tO\xba\x8b\x1c*\x04!%\x07(U\x99\x89\x0f\x89\xe7*3X\f\x7fA(\x02\xc1Z\xc4\xcclA4\x01\xac\x19\x06\0\x1b\x90\xc3\xa0oa\x86\x8c\xa9/\xac,~\x1f\xbd\x12m\x9f\xb2u\xd7\xf7\xc9n\xd0\xdf*\xc0\xacr\x0ez)\xabKXf,\x01f\xb0\x89\xb2\x95ie\xb1\xa4\xfd\x94\x1f\x18f\xc6h\x98\t[\xa9\x18Z\t\x86\x05\xe1F\x91\xd0\xa0\x8a\xea\xc2f\xa7)c\xcb\x9a\xd2]\xac\x8c,T\xa0\xf3C\xf6\xb7\xe0\xe4A\xa0\xb3R\xbd&\t\xd9\xa5\xedgb\xa1\xc7V\xe8\xf75B\xbd\x86\xf3r\xc3m\xebO\xae\xdfM\xf5\xaa\x81\xab^\xf5\xfa\r\xac\x9b\xee\xda\xf6\xa2\xe9\x81n\xceVC\xec\xbe\x82\x81\x1d\x8bW\x16\x12\xb8\xb6\x82E\xa5\xac\xc5\xa4\x13gIA\xa6\xd4\x1a\r\x94}\xf9\xec1\x01\'P\x06lM\x8a\x84#&\xe9\xd8@\x81\x90Q\x05M\xd3\xbb\xcaK\xf4\xa2,\x9a\xdcb\x81\x04!\xce\x04\xc9\xc3E^\xf1\x03"\x0b\x13S/\xa6\xbe\xa8\x8f#H\xa5\xd5\xbdeD\x18\xea\xa2\xc3D\xd1\x05\x84\x13\xca\xca\xaca\x94=\x14\x8a\xbb\x8f\r\x96\x84\x05\x13\xde\\\xcf\x1b\xae\xf2i\x9c\x99\xe11x\x0f\x0e\x86\xe2\x90\ni\xc9\b\x99,(\xdd\xb7J\xa8\r}\x05e_\xba\x0b\\\t\x9b\rI\xf4\x9a\xb0gGI~!\xaeb\x18\xfaz\x9cSC\xffM\xcf\'\xd7s\xfd\xf1\xf5\xf7\x9c[\xbf\x9b\xeaU\x03W\xbd\xea\xf5\x1bXW\xdc\xb8\xfe\x9c\xaaj\x88\x9b4\x15\xbcl\x81\xa9z\xe0\x19\xb0r\xdc@\x01\x0blKY\xd6\x98\xa3@\x04\x16\x12pF\n!\x8e\x04(8\xbcG\xba\x87\xcf`\xc8\x18L\xa8\xe2\xac\x16\x18\x15\0&\x8f*\x03P\xc5\xd0\xa2I\xf1\x02l,\x1f\x02\x172\xb0\xa0L$\x1b\xd3\x8f\xbc@o\xcc\x8c6;.\0%\x1d&"\x1b\xa3\\\xc7\xabH\xd1(\xc4(\x87\xcfUY\xa6?\x16\x9bcC`B\xa5\xbc>A\x9e\xa4\x12G\x89\x02\x10\x9c\xdesZx\xe0X\xf4\xa9\xc2s\xc5\x85\xe4q\xc94i\x1c\xc7Q\x84j\x8d\xb4\xc4u\x01\xce\r\xbeNJ\xee\x1d\xccv\x99\xe7\xf1\x14\xb5l\xb8\xd4\xeby\xd9\x11\\\xf2;r\xdd\xed\x1b\x9eRUe\xfd\x86\xaaW\r\\\xf5\xaa\xd7#\xb9\xd2<\x0fn\xbc}\xeb\x81\x815*\xbe\x1f\xb0_\x156M\xecHY"R\xde\x93\xc1\x9cME \x80\xab5\xe6\xd27\xd0\xf8\t\x9a\xf2 {U\nZ\xd1\xb4q\x80\x87!\xad=\xb4\x7f\x020\xe0\xeb,\r\xcan&eJ\x83NC\xa8<\x84\xf1.\xca\x82\xb0\x862\x0e\x19\x90\xb0W|\x1c\x0e\x90G\x85D\xb3(\xef\xd9\x040x%r\0Y*\xe6u\xa5\n\xacYbf\xbb\xc4I\xc5\xf1\x01V\xb1\x94\xca\xb4\xca*\xd1c\x0f\x94]\xc5\x8c.Ai\xb0H01\x96\xd3:\x8a\xfe\x86\x91\xc3!h\xcbv\xc80]K9\x94\x82\x96\x1f\x06\n\xd4\xbe\x8c.D\nt)q\x1f\xac\r\xa0\buea^\x97\xabL\xcc\xf6%\x90\x96\xdc\xbdv\xa7\xac\xdd\xb4\xeb\xb0\xfa]U\xafG\xd3\xaa\xc5\x19\xf5z\xd4\xad\xdb\xee\xder\xc2\xeau}\t\x83}\xe9\x92n\xe7!{@i*\xec)\xf9\xa1#1\0\xa0\x1c:FTfn\x0b9[\xedqc\xb1\x04\x90kv F\xb4\xe8C\x88\x0f\xb0&H\xde\xa9\x9b\xd0\xaf\xa7\x91a\\\x86\x8f\x98Y-\xfa\xe5b\xf0\xb82\xb2xz\x17V\xc6\xb7\x10`\xc6U\x01\xbd \xd3G\xe6W\xa6l*\xd5\xe3\xe4\xb4x\xca\x93\x92\xe5D(\tqb\xb6\x8b\xf9.\x05\xaa\x9e\x02SfK\xe6\x02\x98\xf4d\x9a\xc2\xc6\x9a\xdd\x8a\xc5\x82d?\xf7\xc9\x06\xe9\x88\xa1\'i\x07\x95x\xfa\xfal}\xde2K\x84\x16\xc29\xd4\x8a.\xcb\xa1\xad\x91P\x929\x97\'\b\xa0\xb3-\x97\xb3ln\xe1\xf2z\xd8\x9e21\xaf!\xb33\x85\xdcp\xc7\xfa\x17\xadX6ym\xfd\xce\xaaW\xcd\xb8\xeaU\xafGh]\x7f\xcb\x96\x93\x93\xb2\xad\x8c\x02\x9e\x84>c<\x8a2\x12\xcf\xcb$\xf0\n\n4h\xcf\xd4h\xe8\xa6\xed\xb0\xac\xa7\xbcG\xba\x0b\xb0\xa1\x1b\x16\x05\xd6\xd5Y \xd2\xe8\x8a\x84\xca\xa2\x9a\xbe\xf9e(\x87,*\x9d5^\x85\x18\xe0\xa5\xbf\xa0mX\x97>\rE\x12\x90\xcc\xef\x1e".z\xb6\xc4\xbbJ\xc9\xd1WJ\x12\xa2\x1f\xa2I0\x8cL\xeb\xa8\xaab\xdeV\xa5@\x84\x12\x1f\xdd\xe71<\xa6_L\xe7b\x89\xb7e\xd2[\x1fI\x7f\xe3@\xe2\xed3\xfa\xdc\xf3\f\xba\xcc\xfb\x95DS\nH\xca\x9a2\f\x1eg\xb0\x81\xca\x14\x98s=\xff\x9c>\x89\xcd\x11O,\xa8 \xdd\x8c\xbd3\xa4!c\x96\xcc\b8B\x96\x05YF\r+\xbep\xb0\xc4*6\xc1\x99\0Z\xdbm\xc957\xae\xabcN\xeaU3\xaez\xd5\xeb\x91\\W\xae\x9c:+\f\xbb\xe2\x8e\xb6\xf9\x16.\xf2\x9ex.\x86\xaf|\xdd\x90\x8d"\xa29\xda\xa2j0\x9a\xc9\xa41\xeaKs\x91M\x80\x82\xb8\xc2\xf2\x8dR\xb07m1\xe98\xa4\xf9\xee\xee!\xe4\x8al*\x995 \x86?\xc9\x8d \xc0\xe8V\xf46DH$\xe4\xef\xfd)\xe4w\x95\xfa=\x03e|\x8a\x18.\xd4\x8c\xca\x88\x82\xa1\x91/\xea\x8e\xe8M\x01\xdc\xb2\x94`\x04\x1fA\xcb\xca(\x18)\xf5\\\xe9sh\xeb\x9f\x12\xb1Th[\r)\xfa\xca\xbc\x06z\x1ce\x8e\0\xa5dN\xcf\xc9/\x14\x96\x14\x9c\xb2\x98\xe2\x11\xf6\xe0BO\xc1\xda3\xb1,1\x92\x96s\x05)H\xe1}I{1\x05\x1b\x9d\x89\x86\xc4\xf3})\xd3B\x82\xc0d{Alb\xc1-\xbe\x15H\xa3l\xc9Mwn_\x91\xa6y\xe0\xfbnR\xbf\xbb\xeaU\x03W\xbd\xea\xb5\x87\xd7\xae\xe9\xfe\xdewlL\x9dfcT7\xf1a\xd8V\x05\x16\xd3\x96\xd2B\xfc\bj|\x85\x02YE\x86\x93\xc6\x18\n\x06Hx2\x98\xb5%`P\xa3%\xc0\x19\xaf\xa3LH\xbfo~\x87E\xf5 \xbbH\x10d@\xb4\xa1`\x91*\xe3\xc9\x12\xe4X\xd9b\x87\x968p\x8a\x87\x8c\xbe[\x11\xbc\xe2\xed\xb9\xb2\xa5\xbe\x02\xd7N\x05\x9d]\nF\xb1b\xa7/\xee\xc8\xa4~\xbf\'\xae>\x97\x95#\xf9\xd8$ WE\xc1\x80J\xc7\xb7L\x86W\x8e\xbf\x97\xe2\x8c\xc3\xbd\x03\xe5EG\x9c\xc0\xa7_\x13\xfan\xa5[0G\x0b\xdfka\xfe\x0b3a\n\xc4\x9eW\xb0\xe1\x16\x07\x81\xfe\xbdA\xe6\xe9(\xa3Cy\x14\xce\xf3U\x8e~\x99\xc5\xf2b\xd8*$\x9e\x8b\xf4u$T-\xc2Y\x03\xc2\x91\x8a\xc8\xaa\xd7\xc3\x0fe\xf5\xc6\x1dr\xdb=[Nx\xf2\xe3\x97\x7f\xab~\x87\xd5\xab\x06\xaez\xd5k\x0f\xaf\xeb\xee\xd8q\xf2\xf69W&\x9am\xb1\x13O\n\xda%\xb5\xc5B\xdfH\x12\xaa\xf7\xc2\x06\xfa7\xb14;\r\x13\xf5\xc1\x01\xde\x9c\x82\xf7\xb9mh\x14Y\x12\x8e\xd8,\x1f&3\xb6D\xf3\x95\xd8\xca\xc2,\xcenU\xb4k\xca\xe6\x95\xd5\fz\n\0\x03\xa9\xdc\x11\xb1\xe3@\x9c\xd4\x11{\xa84\xccb\x05\xae\x1d\x85\xa4\xd3(\xf7\xa1\xb4\xa7\xacK?,\xb8S\x94\xca\x9c\x9a\xc3\x88\x13\x94\fi\xb9\xe1p\xa0\xb8\xcas\xc9\xfb\x99\x02UI\x1a\x97C\xd8!\x812\xb1\x06\x9d2,;\xa3\xe0\xc2\xc4\xa1\x14&\x9c\x122\xf6\xb0\xd0\xe3\xa5\xca\xf0\xf4\x9c\xe2T\x81\xb9\x90\x86\x82\x92\xad\xe7\xd6\xe8v\xf55z\x1cj\x86\x82\x12*E8s\xb0<\xa8\xac\xce\xd3\xd7\x16\xebq \x06\x81;\x07\xfcv]\\\x8f\x81\xcd\x18\x95$w\xe5\xfa\xdb6\x9e\\\x03W\xbdj\xe0\xaaW\xbd\x1e\x81\xf5\xdf+\xa7\xceE\xdfJrL\x0f[\xb4T\n\x01:v!\t\xe2A\x1aP\xfb9\nF\x1c`\xd2\xff\x99\x99\xa9]\xeb<)KG\x9a\x13\x01\xe5\xe9Y\xac\xa0\xb0\xd3\x91l\x88)\x98s\x02heQ\xae\f\n\xae\x14\n7\xf8\xa2e\x9b\xbeR\xdbQ&e\x0b\xbcy\x11g\x82^\x12\xe2HJ\f\ns\x86\xcbU\xb0\x18\xaa<\n\x87\xca\xc4\x8a\xc4\xc80\xadBYP\x05\xb5a\x92\x19\xe5G\t\xa7\x0b\x8b}0\x94\r1\x97\xe5\x8d\x94\f\x99\xa4a\x87\x9e7\x04\x1c\x85 \\\xd2\x92F\x07\xd9Z\x85>\x1fr\xbaJ\x1c^\xaa4\x12\x0f\x8e\xf2\xfa}\x91\xdb\x906\x1c4\xf47:h+X\xb70\xf3\x95\xb1\xbf\x07%\xa1\x17:\x9c\r\x83\x96\xbf*\x9bT=\x86\x8a\xd4\x15^\x9f\x1d\xc8\x957\xaf?\xebU\'\x1f\xf9\xca\xfa\x1dV\xaf\x1a\xb8\xeaU\xaf=\xb8z\x83d\xec\xc77\xed8\xa8i+\x03\xd2\r=-"\xb1K\x94\xd7\x94yx%\xe2\xa6\xc4o5\x94\xbd\x94,\xc9\xe5q"\xa1n\xf8Y\xe4\x0fK\x86\x0e\xfbJ\0\x07(\x0f\x0b\xb0\xab\xe1\x101\x04\r\x83\x99R\x06\xbb\xf4q\x91M%\x9eU\x05zLO\xc2\x05\xcaK:\x958\xad\x92%E\xb0-\xc8\xd4\xfd\xaeaK\x895\xae\x9f\x87\x11\xe1@\x99Q\xc8\xde\x91(\xc88\xcd\x8a\x82\x8a\xac\xc8(\xee(\xb2B\xcc\x9c\xb2M\x81\x88\x1e\xc9\f$\xd3->\xa7\\\xde\xf3\x95\t\xea\xdf\xcb\x18&\xbcz.NB\x87\f+w\xf8\xa7\x13\xba\x14fd=\x05\xea\x1e\xbc\x07]\xce}\xb9-\x05\xebi\x91]s\x854\xf5\xbc\\\x05\xbe\xf9^\xc5\xd7^\x16\xca\x16\x9dB\\\xbf\xa4\xa1p\x10fJ\xc4\x94\x81\xe9\x87\xa7O\xea\xe9k\xb8\xe5\xae\x1d\xce\xd4Lo\xc9\xf8h\xbbNE\xaeW\r\\\xf5\xaa\xd7\x9eZ+WM\x9d\xb8y\xda\x96Q\xbf%E\x11+y\xa8t\xe3U0\x81\xb6\xdd\xd6\xcd\xdbi\x12p\x9am\x9b\x80\0\xf7\x8cF\xc7WVe\x8b\xef;\xd2\xc0\xe7\xc1\xc0\xf0\x9fU\xd0\xe1=\xd6\xcd\xbe=\xe9\t\xe4\x14Uf\xfaa>@\n\xaaq\xa5b^[7\xfd\xb6C\xc9{A\xbae\rU\x89p\xa1@X\xa3\x02\xa5\x15H)\x1d\xb1\x83\xd4\x94\x1b=#{\x8fgS2\xb2\x8a\xd6\xf2\x19\xcbveVp\xe0\x19\x07q\x83\x92\x03\xc5p\x86gJq\x8e\x01e\x05\xb3\xc0\x9c\x7f\xe5W\xc6m>\x0be~S\xc28\x14\xa49{\nRP\'\xd2\rC\x9f\xd3q\xe1\x89\x98q\x10\x99\xbd\xaf9\x88>\xf4u\x92]\x95\xd2hAB\xef\x9b\xde\x1e\xca\x94`\xacx=\xa9\x82\xa5\xedJ`\x85\xb2ujNn\xb8m\xc3\xc9\xc7\x1d\xf5\xf8\x8b\xebwZ\xbdj\xe0\xaaW\xbd\xf6\xd0\xba\xfc\xfa\xcd\xaf\xcd"\x94\xce\xa0\xf8C\xaf\xa6\x14\xd7K%\xcb*\xda*\xa1g\xe4\xf8\xb92\x16\x8f\x9b\xb4\xe38\xca\x8eJJ\xbf\x01\x12P\x15"s\x0b\xa5\xb5\xfe\x0e[\xe2\xbeM\xb3\xdcF\xdb\f\x1f\x07M\x057\xcc\x85A0\x11\xda\xf4g\xcaS\xcb\f\n[\xc6\xa5\x02VP\xf0$\xb4\x1c:\x12\x8a?\xe2\xd2\xe5\x1dE\xbd\xca1\xd6\xf1%\x03#A\xb1\\\x05\xa5\x84l\x10s\\p~\xaf\x94\xa9\xc1\xe5\x82\x83\xc79}\x9e(Y\x07pU\n`\x15\xd2\x97\xf5\x18p\xbe\bF\x91\xa4L\x19\x88\x14\x03\xb8e(\xbb\xf4,\xe6\x83\xa5\xf3C\xffD\xd71I\xcb\xc8\xec*\x133c\xa6\xcf\x81\xa1\xe4\xb0iLy]\xb7\xa5\xec3\x97h>\xe7\xf3\xe6\x99\x01;\xd4\x1bs\x05/\xcfu8;v\xc5M\x1b^]\x03W\xbdj\xe0\xaaW\xbd\xf6\xd0*\x8a\xc2\xb9\xf2\x86-G\x87IW\x01\xa2\xa0\b\xc3RvB\xc1\x01v\xee\xca\xa68\xa1\xd9\xae\xc4W\xa0`\xe6\x95\x82N\0\x06\xd5R\xf65Z*0U\x92\xa4\xf0)\xd4\xef\xad\f\x909\xbe+\xe9\\\xc5\xdc*\xcc;\xc1\'\xb0\x88\x1cn\xf0\xb6o$\xf2\xc0\x18\x1fb\x0e=.bD\xd2\x18_CI\xaf`\xe20\xbc\x04\x8b\x02\xac\xc7U\x9c(X\xba\x03\xc3BI\xcf\xb2\x90\xecX\x10\xf0\xf0=x^W\xc1\x15\xa2\x0b\xb0\xaf\xdd,\t\xee\xf4p\xba\0\x9b\xcb\xe6]\xc9f+i\x8c\xc0\xecwh\xcc\x8b\x92\xa8\x83>\x9a~\xce\x81\x81n \xa9\x827U\x8f\nt\xbe\x9f\xf3\xf5\xe3\xefY\x9c\xd1X\xd8\xf7m\x82w\xa2\0\xe9\x02\xe0\x14m3\x1a\x06gT!\xba\x9e\xc3v\x1bJ\x98(\x18^s\xd3\x86Cp\x9d\x1d\xd4\x15\xebU\xaf\xdf\xe2U\x0f \xd7\xebQ\xb1\xeeZ?}\xcc\xaa5\x89\x84\xa0L\x95n\xc4V\xce0F\xa9\x9a\x8c\x17A5\x0e\x03\xb5\xc8\xa1\xc2\xa6\r[%\xa8\x0b\x01\\`&\xfd\x99\x8a\x8c#hTt\xb3H#\xb0\x0f#IG\xa0#\x84\x14\x01$\xefn\xc9rb\xa9\f%\xefa\xf3/\xa5\xd9\x81\x1c\xbd\x90\x14%>\xfd~~\x9f\x02\x88]\xca\x10xl\xf6\xcd<\xd7\xa8\xf9L\xefJ?l\xe3V\x8f\xe39NJ\x90\xf3\xc3!;*\x84\xf9Z\xbe\xef\xd2\x91\x03\x83\xce\x16\xfaU\xa9E@\x04v@E\x98\xf4bI\xe62eL\0\x9b\x9e\x82]$\xf1\xbc\xc3\x1c\xafF+\x93 H9|\f\x95\xa2\xa3\x14\xaa\xd5.\xf4u\xeby\x839\xea})\xfc\f\x1d+\xd3\xe7\xc1\x9c\x97\xcb\xec.(\x0b\x8b\f\x03\xd2\xcaN%%\x9b\xf4\x15\xb8\xee\xbeg\x97\xdc\xb9f\xdb1\xf5\xbb\xad^5\xe3\xaaW\xbd\xf6\xc0\xba\xf2\xe6\xadgEQCB\xcf\b*r\xbb`\x16\x95\xe9Y\x89\x84\x1d\xd3sBy\xae\xb2sc0\xab\xe0\xd2\x9f\x15\x99\x9f\x05\xcbq%\xec:4\xe1\x8dfleQ\x8e\xb2\x16eI\x89\xe97\xc1\xe9\x02\x9b\xbc\xdf.\xe9\xba\x0e\x11\x84\xed\xda\x14p`\xb6+\x9a+i\x13\xe56\0\x92%\xbd\x031\xa0\xcc\xa0\xc9\xb2\xa0\x87 \xdc-\xf2t\xa0\x8fI\x95\xa9\xe5\x92\xc1\x8c\xb72\x06\xb9\xe8\xc3\xe11(S\x96P\x1d\xa2\xa7\x85\xf9d\xab0\xa6\xb7\xfaz\xe8(\x9f\xe3\\m\xf1\x03\x9bL\b\x06\xbb\x9e\x8fsu\xc9\x9e\xf0=\xd9 \xe2\xf9\x02$qNPH\x86\x88gQ\0\x9d\xda\x1aK\x16\x95C\x95d$Q/\xe1\xe3l\x1b\x83\xca\x98\xdfr)\x8f\xc7\x9f8\x7f\bAX\xae\xd4\xad\xa0\xaf\xaf\xf1G\xd7\xdes\xde\x13\xf6[rY\xfd\x8e\xabW\r\\\xf5\xaa\xd7\xc3\\W\xdd\xbc\xf3,\x84C\xa2\x9bd\x87\xa5\xa4)\xd8\x94n\xe6\xde\x80\xb3H6c\xe9}\xca\xe2[#\x15\x85\x18\x16\x86q\xf5+a\xdbeI0\x19\xe4l+\xf9\x14?8\xec\'\x01=,l\xec4\xd8-\xc9\xbe\x90Q\x02w\r\x8b%@\x03N(\xad\xd9\xae\x89")\x98AR\xb0\xdf$YE\x80\x89\xa7`\xaa\x0b\'\xf7DJ\xd8s\xf8\xa9xm\x87\xa0\x96%\x15\x9d.\xd2~ir\xb2h\xd2[\xb0lH\xeb\x8c*c\\\t\xe5\xf1\xb9m\x1c5\x98\x94\x8cac\x8b\xe6\xbd\x95~n0\xaf`\x16[\xa6v\xa9L\xc9q\x8cqp\x01\xd9\xbe\xbe\xe6B\xff\xdd\x9b\xd6\xaf\xe8\xeb\x04\xa8\x85Ma\x922\xd8\x15J\x88\x96\x95({\xb4\xd8\xef\xcaa\x0bUb8\xba P\x02X\x1d\xab!W\xdd\xb8\xe1e\xe7\x9f.\xa7\xd6\xef\xb8z\xd5\xc0U\xafz=\x8c\xb5c\xba\xbf\xe2\x96;\xe7\x9c\xc0\x1fa\xc0#B!\xedB\x19D3b\x89\x0f\x19S\x8e\x832\xa0-I<\x904\xc6F\xed3\xd6\xc4r-\xc9\xb2D\xffU\x12\xe8\xc2\x0e\x84\x18\x15zf\x92*3\x01\xa3r\xd8\xab*\xc4kB\xe8\xe0p(8\xea\xe5\n:6\x81O\xc4\xb8\xe9:>\xfe\xad`X!\xeb\xca\xb05\0\x9e\x03\xb1a\x1aI\xde\x8f\xf5\x98}e<s\xec\x8f\x81\x11V\xa0UC\xd1\x06<\f\t 8\x16\fy+3\xe7\x85\x1e\x97\xebB\xcdh\x11\x84\xe8\x97\x18\xe1\x95\xdb\x92\xce\xa7,\xefY\x95CI=J\x99\xbe\xb2/\x0e&\xc3\x83\xd1\xb5\xe8\xea\x81\xb2_\xbfWR\0\x82l0\x84JBlb\x01\x9c\x92\x94\xe0\xe9X\nbv\xa2\xa0Y\xd2p\x04\xe0\x96)C-\xf4\x1c\t\xf0\x9e/\xb7\xde\xb5S\xaf\xf7\xfc\x8a\xc9\xb1\xce\x9a\xfa\x9dW\xaf\x1a\xb8\xeaU\xaf_s\xddt\xe7\xce\x13\xb7M\xa7\xd2u<J\xcd1\xe3$eO\x99\x8dO\x7fB\x0b\x83\xc6\x12({@\xe2\xa3O\x91\x84\xe3\xbaT\xe6\xa1\xac\x87\xd9(\xbfU\x91iQ.\xae\xa0\x84\x1e\x17\x98\x94\xab\x1b\xbc\xa3L\xae\xd0c\x82\xf5\xb8AN;\'\xc76C\xc1\x15\xca|\b\x95\xd4\xaf\xa5\xf3\x15cB\xb2\xcc\x048B\xa0\x01\x05!\xdc\xdf\xf3AD\xf0B\x14\tzg\x852B<\x06\xa2\x0b\x04U\x1a\x8f\xa5\x9c\xcaD\x88F\xca\xa1I/\xd0\x0b\xa0\x05\x8bE\xf4\xbe\xf0X\xe3\x86h\xc8X\x99gz\f\xc3\x8a\xc0\x9eho\x15)\x10\xc5\0"\x8b\xe5\xd0\xb0\tV\xa6 T\xc6d\x9fij\x9e\x0b\xb6Q\x10\xef\xa3\xb7\x15\xf7q^.\x1f\x93\xeb\x81+e_\x96\x9b\xf3u\xf2\xb9\xa8\xc7\xb0d\xe7\xceHn[\xb5\xf59\xc7\x1c\xde\xf9\xdb\xfa\x9dW\xaf\x1a\xb8\xeaU\xaf_s]\x7f\xeb\xb6\x93\xcb\x81\x82D\xab\x90D\x81\xc4VP\x80\xd0A\xb7jq\x1dG\x94dI\x9aE\xd2\x9d\xa8\xa43\x12\x90\x815[\xc2r\x1eJb\x98\x8b\x02h\x81\x95@\xde\xce\xb1\xe1\xd0\b:\xa8\xb0@\xff)EY/a\x19\r\xb3X%\x94~\x108x(\xcf\xa5\xcc\xb2JS\xd3\xd7\x02\xf3\x81\xdc\x1e\xfd\xa8\x02\x16Ni\xc6\x12&@\x12*B7\x80s\xae"\x13\xfao(\xe7\x89\t\x80\x04_\x03\xd3\xa3b\x11L\xc9\x13\xa3\x02\x1c(\xd3\x8a\x91h\\\xb2\xff\x04\xc5\xa4\x0f\x16\x95W\x94\xb6c\xde\n%D\x94\x1b\x1dP\xb9\xd2\xb0N\xf4\xbb\n\xb0B\b3\x9c\x82\x82\r\xa8\x10s}n0\xb2\x9c\xfd7G\xa2\xbeQB\x82\xe9\x01\xfc(\xe3\xd0\xd7\x91e\n\xfa`\x93\xfa\xda]\\\x1f\x05\xd7T\x1fw\xcd\xcd\x1bN?\xe6\xf0\xfdk\xe0\xaaW\r\\\xf5\xaa\xd7\xaf\r\\\xb7O\x1d\xe3\xda\x8eTND\xb3Y\x80I\t\xa5\x1e7jeX\x95\t\x8at\x94I\0\xc483\xa5\b\x13\xb4\x9a\xcc\xc0\xcaRe\x1bs"\xc9\0\xe5\xb6&\x1d\xda\xbd\xa0 \xc0\xf8M\x8b\x02\x07\xd8=\xb90\xaf\x85\x19\xa1e\x91\xb1\xe5\x99\xa5\x1b\xbeE\xaf@\xd6$\xe9\x1dXQvN\'\x8c\xd2\f\x14\xc3\xd2\xc9V\xb0\x80s<\xd0(\x8f+\x86v\xd9\x1cb6\xf2t\xf8\x1b\x92I\xd9\x85q\xcbp\x8c\xd5\x13G\xb8\xec\x94\xf9Z\xe8\xc9\x19\x9aU1(\xb2,*3\x8f\xe6\x1by\xbe0\x19YL\xd0\xa5[\x99X\x12\xd4)!vLJZY\xf1\xfb\0j\nfP,\xb6:(\x9fZ\x94\xd2\xe3s\xf1<\xe6\xde\xa8\xdc\xd0\xffe\x9cIC\xb52\xb72\x96\x0b]\xbd\x967\xdc\xb2\xa1V\x16\xd6\xab\x06\xaez\xd5\xeb\xd7]S\xb3\xd1\x92u[\xa6\xc5k\x86\xba\xd1\xda\xe2\xf4\x12\xf6\xaf\xaa\xb8\xe0 r\x9aav\xab%\x01\x98F\x82xz\x91F35*?\xa4\x0f\xc3i\xbd\xb0X\x9e\xe3\x9c\x93\x02G\xd02vKUe6y\xb0"8V\x80}\x01P\xc0\x94J\xc8\xc4\x11\x16\x89\xd9\xa7L\x011\xca\xc9\xa8l\xdd\xe0\x0b\xb0\xaf\x81)\x13\xa2\x94\bP\xa39\xae3L\x18\x06H\xe4)\xfbME\x96\xb0\xac\xe8B`\xa1\ba\xa1&\xc8\x10\xca\x82\xe1\x93\x15m\xa7r\x0e\x0es\x10\x19\xf3]\xc8\x10\xabL)\x11\x8e\x1f(/\x96\x85)1\x1a\xf8C)2\xa3\xf0CJ\x97\xe1\x97\x1cx\x86\x0b\x07\x82/)&\x81P\xc5\x95D\xcf\xbb7\x9d\x12w\xa1\x96,\0~\x99)\x9bfP_:\xfa\xbaR\x8f\xa2\x15\bR<}\xb6\xbb\xee\x9e\x92\xedS\xf3+\x16\x8e\xd7}\xaez\xd5\xc0U\xafz=\xe4\xb5j\xfd\xd41;\xb6\r\xa4\xe9\x84\xca\xb2t\xd3\x9d\x18\x97r\xc5\x84\xa4\xe3\x81d(\xc3\xc1\x83\xb0\xdf\x97\xb1^)\x93\x99\x01\xb4>\x8co\x95\x91t}\x88\x12|\n\x13\xc0\x86\xe0aH\xab(\xdd\xc4S\xbf4~\x85)\xcco\x07T\xd8\x81!\x81\xa9\xe5Y$E\x85\x7f\x87\xcc\xad\xc2LX\x89\xaf\xfbP)*p\xb1Dh\xdc08\\\\UdbUa\xb2\xc0\xaca/\x0b\xe5:dqAr\x8er!\xc9Pa\x86\x8cY\xb6\xa4\x1c\xdef\x99\x0f\xa0\x88\x94f|@\b\x82Y+\x1c\x0f\x12}<\x10\xce en\x94\x8f\0@\xcc\x91\x91-!\x9c\x92\xee\x1e\xf8\xfcP\xedhC%\xe9I\x86~X\x82H\x13\x98\xfczJ\xec\xd0;\xf3\x04\xad2\xe6\x83\x95\x15K\x9d4\xf6\xd5\xd7\x8b\x192x\x04\xef\x98\x9d\x93\xdb\xef\xde\xf2\x9c\x85u\x9f\xab^5p\xd5\xab^\x0f}\xdd\xbdf\xd7\xd1E\xa4\x1b\xef\x13&$~\xc6\x01R<f\x81\xe4\xae\xb2 \xdd\x84\xd3\x81\x82P\x1c)X\xb9\xb25\xe9\xcb\x86\xe9X\x16\xadMd\xe1\xbc\xc7\xbeVO\x01\x84%AX.)\xf3A\xce\x96\xad\xe8T\xc2\'BYQ\xe0\xa1\xee\x96K4(\xc88\0h\xb92%\xc8\xdd1W\fFTV\t\x19\x19\xcax%\xebz\x90\xc8\xa7,\x13\x82\x15A\n/\x96aA\xd0\xb0\x83\xe9\xb1\'\x05W\xf823*\xc4\xc2\x80\x1b\xfaf\x15\xad\x9fJ\x02\x1d\x1d3\x144\n\n\x0eK\xf6\xae\0j\x04\xc1\xd2\x94\x199\xe8l\x1boE|\x9d\x8e\xf58\x16]2lI\x15\xa8\x99!\x96\x9b\xd7\x06\xb6\x07\x87{\xb0)\xbf\x01\x16\x9a\x9aAm\xc4\xa4T\xc6\xb2\nj\xc9\xa2p\xf8\xfd0\x01\xa6\xb2\x12\xe3\x01x\xd2\x10 \x98+pm>\xf6\x98\xc3\x1fW\x03W\xbdj\xe0\xaaW\xbd\x1e\xea\xbak\xe3\xcc1\x83?z\xba\xa4G\x1d"N\xd3\x920\xa8$t*I\x06\xba\xa1W\x0e\xe5\xdc9Lj-Wz#\x8e\f\x0er$\xde\x92\xcacw\xfa\xcajP\x10\x84\xd2\xae`\x9f\x8a\x8c\xa4J\xd9\x83\x82\xea\x0f\x8a\xbd\nq\xf7\xfa\'\xc0\xaa\x042\xe0{Q(\xcc\\\xca\xe5\x01`~\x13\xfd\xb0\x82\x0e\x1d`(\xa9\xe2]\x02\xb1\x03zTNE\x96\x86\xe3\xe0\xf8\x90\xe0\xe7\x99\x11G\xa0\xb0\x87\xd8\x15\x9a\0WCI|e\xfen\rA\x04\xa2\x0f|\x1f\xfaUF\xc6\xb1{6\xcb|\x1d\x8aC\xceq\x01pr\x0ewqX\x19\xc0\xccRca\xd1\x8f\xb1"#\xb4Y\x96d\xcf+3jA\xb8\xe2\x03\xe4\xa1>\xc4\xb12\x96\x18a%\xe5\xd27\xc7\xd2?\xad!hV8\x078\xd9+\xf0\xde\xb4r\xed\x89\xf5\xbb\xaf^5p\xd5\xab^\x0fq\xf5\x8br\xec\'\x87\x1f|P6:&\r\xddlG\xba\x954\xbbF\'\x91\x0e,IZ\x9e\xa4s\xbe\xcco\xb5$\x8a\x13:Q\xb8\xb9%;\x17\xeb&\xef\xc6r\xe06O?\x97+\x14\x85&\xb0\x11~\x7f>,\x91R\xcev\xf5\xb7\xc5\xb4`\xc2G\x02\x89y\n\xb9^E\xb5!\x18\x13\x99\x91 >D\xc1jP\xd1\x87\x10\f\x05\xae\x1b\xc4@1\xc2\r|\x9e=2\xcc\x06\xb3\x8cX\x18&VA\xfbg\x19k\xa9\xca$\x13[\x04\x1e\x9b\xe2\r\b;P2D\xa4\t\xe4\xec`U%K\x82\x96\xb1dR\xb0\xb2\x1a\x05\x83\x1fq|:\xcdWl\x86!\xe4\x99\xe7\x90\f<\xf3}\n\x9c\xc9\xa0 (\x19W\r[\x12:{\x14,W\xe2\xb5\xe5\x99\t\x8e\xa4\x9f\xa2@\n\x8fr"\xc00\x1bfw\xe9\xe7\x17\x8c\x88\xdb]*\xb7\x0e\xfc\xe6u\xdb\xa2\x93\x97\xb4\xdd[\x175\xdd;l\xa3\xdd\xafW\xbd~+\x96e\x1a\xd4\xf5\xaa\xd7o\xdb\xaa\xe4\xf5\xdb\xcb\xfeWf\x9d\xe6X\xa3\x92\xf1\x05"MC\x12\x18\xe2\x18\xf5Eb\xa6\x14+\x80\xcd\x17\nB;\xa5\x9c\x9a\xe5\x07XY\x11\x96\xb2puO\x96l\xe8K\xe1vt\xf3\xc7lW,\xaeg\xb3\x97\x05\x95\x1fzW\xe8{\x95\x15f\xb3J3\xbf\x158\x94\xaa\xe3\xbfbwy\xad2\xbd\xa0\xdd\xd6N\xf8;?/f3/\xab\xa1\xbb;\xd9\x92Q4B\b\x02\xe5\x1e\xd8S\x9e\x9a\xc7\xb2\xf7\x05\xa7\x0e c\x85\x1eVF\xd6\'\x04\xbe\x82\x8fEb\xb3\x88c~9m\xc4\xb0\x14dX\xbbY\x18|\r}\xdf\x94\xf3\x92\x01\xc0\xcecO\x0b\x82\x8b\x12\x9e\x89\xfaw\xb8\xe6\xc3U\x03@\x87\xf3e\x89\x12\x82\x10\xf6\xc6\\S"T t}\x9f\x96R\xa85&\x93\x93\x12\x1fx\xb0\xe4\xcb\x96I\xd5\xe9H\xa5\xd7\xc0Uv:\xe2\xe6\xf2\xf8\x11KN\xdc\xb7\xf1\xd5\x97\x1e8z\xe1h\xe8n\xab\xdf\x9b\xf5\xaa\x81\xab^\xf5\xba\x9f\xf5\xa5\xb9\xe2\xb3o\xdaa\x9d\xd7\xd6\rxr\x91\xc8XC\xa8x\xcb+c\x8a\xdb\x9f\xaad~\xc6"\x80\x15Q&\x8e\x02@\xa8 4\xb3v\x83\xe4\xbd]\xe2;\x0e#E\x96]7\'m\xe4Sy\xc2\xa0GXZ`P\xd9bm\f\xb6M\r\xf1|(\x01c\x96\x05\xd1\xef\xb1\x87e\xb4R\x01\xa6BJpe\0\xac\x845S\x01y;J\x829K\x85T\x16\xb2!\xe6\x0e\x19Wbl\xa4\x98~2\x04\x1c\xf6\xb4\xc4H\xd0\tnC\xa0\xa2kFe\x86\x8e\x15$,\xf6\xd5\x1c\x8a.lJ\xeesS>\x04\xc8\r\x81\xc7"\x87\x03\xa33\x9e\x87px\x87\x93\x86\x05;,\xfd\xbe,\xc5\x13\xc7\xfa\xd8D\x9f\xc7%;\x84_b\x96C\xd9\xe8\x1a\x10D/\xcd\n\xf4\xf3\x19\xfbt\xd1a\x87K|\xe8\xd3\xa5j\xb7\x85\x86\x1e|\x9d``\x89\x14q\xa4\xa0\x18S\xcc\xf1\x84qG>\xf0\xec%\xefx\xc1c\xc7>R\xbfC\xebU\x03W\xbd\xea\xf53kG^\xadx\xe1\xd6j\xf5\x86XAkBdbL\xd9\x96\fKs\x15\xa4\xe9\x95\xccN[2?%2\xbf\xad\x94\xbc\xdf\x97n\'\x90\xbd\x96\x062\xb7}N6\xdet\xbbT\xc9@\x19\x85\'\xc1\xfa\x19Yt\xf5\x16fk\xd9\xbe\xcf\xf9\xab4\x1d\x10P|\x18o\0\x90\x8a\x8c\x96Q\x9eW\xb0L\x98e\xae)\xbf\xd96\x95\x80\xac\xceA\xc18\x94\xb9gp\xcf\x05\xc0\xb0Id\x19[(\xdbD\x9a@\x11h\x8ei\x94\x81\x04-\x96\xe3\xc4\xe4q\x19=\xbb\x98\xa6\x92\xf9>\0\x17Jq\x16g\xab\f\xa0U\xc3\x19.\x9b\x16Q\x15\xcbyx&`\x1c\xfak\xf83l6\xf5i=\xcea\xc1\xb1\x1e\xdf\xd7\xef\xa5\n\xaa\x89\x92\xa8y\xa4z\xe9i6$h\x86z\xbc\x94\xe7\x8bs\x05\x885\xfc\x86\xb8\x9dP\xfa\xc7?W\x8a\xfd\x9f\xcc\xc7v\xf6R\xb6\xa9l\x0eeQ\xe6\x8aeH\x84\x9e\x91\xac7\x87\xbb\x03\x89\xa2\x81\xd8#\x9e\xbc\xebYK\xaf}\xd7\xc1\x93\x87\x8b\xfcn\x97\x0fw\xef\x8cu\x91\xf4\xb7o\xd5=\xaez\xfd\xd6\xad\xef\r\xaa\xb7\xafN,\x19\xd7wg\xbb\x03\xa6\x05\xc9\x84u\xefFR\x92\x9a\x989\'\xcc>\x81\r`3w\x9c@\x16\xee\xdd\x95\xd9\x8dc2\xbb\xa1\'\x1eJ|\x0b\x9b\xb2C7\xe8\xd6\xaeD\xec\xde\x0e\xca\xc4a\xb8\x9b\xb3?\x94r\xf6\xca0\x8f\x8c\x8c\x04\xea\xc1\xa2\x18\x98\x12\x9c\xebP\x1a\x8fg\x0e\x9b\r\xe6XeIF\xf1\x05\xfd\x071\x14\r*\xe7\xf8\x1c<\xb6\\\xe3kXQ\x83\xa1\xec\x10\x82\x0f\x0e\'\x9b\x12\x1f\xe7\xb1rc\xcak\x91\x82)@A\x96\x9e\xa7LIv8\x80\x9c\r\x83(]z\xb6\xb3h\x89r\xa1\x95\x0e\x99\x93\xcdc\xe2\xb5\x0e\xe6\xa7a\x18\xc5P\xc8\xb8g\xc0\x10 \t\xd3\xe0F{\x9c\xa2\x90XA=\x9a\x8d\xc9\xfe\xf082:}\xae\xa4\x98\x97\xf8\xc4W\x88\xf5\xa4\xa7\x89\xa7\xaf\xa9\xbd\xc0\x95\x91eT\xebK<oQ\xbc\x92\r\x90\x01\x86\x84\xcd\x86\xd8\x95G\xf0N\x94\xf9\xbe\xff\xbam\x87\xe5Ey\xd3\x9f>y\xf1\x93\x1e\n\b\xec\xfe\xf9\xed\xa9,\xa5\xea~ \xc6\xda#\xc7\xdb\xfd\xef!C\xbe\x1f\xf0\xaa\x86_\xff9\x16\xf0s0\xf7\xe0\xce\xa9\xfa\x85\xff\x97\xfb}\xd6\x07:\xc6\xef+\xa8\xd6\xc0\xf5;\xc4\x9e\x7f\xe6\xa3\xbc\x9f\xdf\xc3G\xcd}\xee\xe5\x039\x0f\x06\x16N\xd7\xd8+9\xf7\xfe\xf2W\x92\xd1\xd0\x96H\xc6N\x10\r\xde\xf5\xf3q\xaf\'\xb3\xb3\rY\xb2\xcc\x97\x89\xc5\xe3\xd2\xdb\xb8\x89\xfa\xf6 \bd\xfe\xf0%\xd2\x8f|q7m\x11\xff\xeeu\xe2o\xef\x8b\xe5\x992\xa0E\x97\f\x03\x82I\x12s\xee\x89\xb3XT\xe7\xe5\xdcf\xdd\0|/"\xa8dY\xccr!\xca}\xbb\x19\x90\x19\x16\xd6\xe3x\x01?p@\x80\x0e\xd8\x16\xebr\n<\x18<\xae eOr*\xf7d\xc8\xa2X.$\n\x97\x04\xaf\x92\xb2y3\xfb\x85^\x18,\xa2\xf0|\x96\x02\x95e\xb5\xa4t\x15\\\x9b\xbeT\x88))QRl)\xe0\xf9f\x0e\f\xf0\x8e\xb2b\xa0\x8f\x87\x03~\x9aI\xd05\x941\xc7\xbc\x9aeT\x95V\x7f \xf1\xd3\x9e&\xd6\xd3\x9e\xae\xc7\xc8\xc5\x9fp\xa4\xbb7\\\xf3!z1\xef\x9c4\xa9\x18\x97\x02\xce\xd7\x19\x1b\x95\x8e2\xad\xc8_ \xbbvN\x895;-\x1f_\xb9\xf3\x90\x03G\x83O\x9c\xba\xef\xd8E\xe5\xcfm\xa0\xd5/l\xd6\xf7\x07X\x0f\xc4f\xaa\xfb\x1c\xe7\x17\xb7us\xf4\xddo\xf4\xea\xde\xa3T?\x07\x90\xd6\x83\0\xa7\xea~\xbeb=\xc0\xa3\xca\xe1\xf3V\x0f\xf8ke\xfd\xc2y\xfe\x0f\xfc\xdd?\xdcT\xbf\0?\xd5\xbd\xc7\xa9\xee\x03Z\xd5\xfd<\x93\xdc\x0bo\xd5\xfd\x02\xe6}\xcf\xc2\xfe\x1d\x82\xb9\x1a\xb8~7\x16H\xc9\x82\xbc(\xf6Z\xbbq\xba\xbd~\xd3\xf4\xdc\x8e\xd9xG\xaf\x9f\'Q\\\x06Q$\x8d8\xcb\x9aI\xd4k\xf7g\xa7\'\xf24\n\xf5\x8d\xec\xe9\x8aZ\xcdf\xbf\xd3n$#\xa3\xed\xac\xdbiT\xedv\xe8v\xdb\x8136\xd2\xc8\xc7G\x9aS\xa3#\x8dm\xad\xa6\xbf\xeb7\xa5*SB\xe2\xac\x8f-ab\x88\x02\x14\xca\x82p\xba\b\xc5\0U>\xdc\x01\xd1\x8b\xb1\x0bS\x1e\x83\xb4<\x8fb\x99\xd9<+\x0b\xc6\'\xa5\xd3l\xd2\n\xaa\xd2M\x1a,\xc1\xa9b\x89}e+\x07.\x93x\xdf\xc5\xe2\xdf\xbeF\xfc[W\x8b\x83\x92\x9a\x82\x11^\x1b\xc4\f\xdc\xa0J#k\xe7p1~A\xbcP\xca(Sv\x16)\x80\xf4\x8c"\x0f})\x0e\t\xfb\xfa8ebEd6\xd3\x04}\xaa\x1e\x85\x17\x948\xc2\x0e\x03^\x82\n\x18\x19T\x8a```D\xe8_\x01\x94\x86\x82\r\xd3\x1b\xab\xe8\x02/\x96\x1e\xafj\xc1\xd3I,\xdf0\xb9\xaa\x81\x92\xa0+v\xee(\xd0\x04z<\x9f\xdf_\x95\t\x9f\xaa,a!\xa2\xdb\x92k\xfa_6\xe4\xfe\xfa\\\xae\x07\x07}\xa1}}\x985\xa4\xf2\xf5Z\xe2\xb4\xf6\x1e\x93m\xc7<\xdf\x98\xfa\xea9\xb6\xc7,i\xb60\x94\xc6\xce\x9f\xc0\xab8\x9e\xd3\xd7\x1c\xf5\xf5:\xda\xd2\x1a\x0bd|\x1f}\xa2IO\xfcu\x9el\xb9-\x91hnN>r\xf3\xce\x0b\x8f\xdf\xab\xfd\x97\x13\x81\xb7\xfe\xfe8@u?\xcc\xe5\x97\xc3\xca\xfds\f\xeb\x97@\x8a\xf5K\xfeV\xde\x87\xe9\xfd\xea\xfb\xbe\xfb|\x7f5\xfc\xace\xdd\x07$\x1f\x98\xf5T?\x03n\xd6}\x80\xd7\xfa\x05\x90\xb5\x1e\x14\x7f\xaa\xee\x07^\x7f\xf6;\xed\xfb\xe1o\xf7\x07\x96\xbfK\xa9\xc15p=\xfaW\xb7\xa8\xaa\xa3\xbfs\xf5\x96W\x7f\xf1\xcb?=\xe1\x96\x95w\xb6\xf2"\x91\xac\xeaY\xbd\x99\x19\xf1\x9dP:\x8b\xf6\x96\xf1\xc7\xee\xaf\x1b\x97-\xd9\\"\xfd\xed[\xd0\xc8\x91\xc1\xae)\xc9\xfa\x89\xf8aS\x1a\xa3\xe3\x126[(<Q\xb1\xa6;\xf3|\xe0I\xd1\n\x1dk\xc1D\xab\\\xb4\xa8\xdb\xdbw\xef\xc9\x1b\xf6Y6\xb6r\xf9\xd2\x91\x95\xfb,\x1b\xbfir\xa2\xb5\xca\x85\xecm\x0f\xae\xa4\x94\xee 1\x89\xc0\x85n\xc0\xbd\x1d\x96q|\xe8X\x12\xb8F\n\x8f\xd9)83\x01k\x90\xfa\xcb\xd9#e&\x83\xed\xd32\xb7QY\xc9|\x9f\xa0\x01\x1b\xa4\xb24&\xbaV\xdc\xe7\xbcR\xa5\x8c(y\xe2c$\x9d\x18\x11\xf7\xca\xeb\xc4\xde\xb6Ka\xdf\xe1=5\x7f\xb5!\xc8\xa0z\xc1&+\xca\xd3>\xd9\x14\x84\x12\xf8\x1eH\xdd+J\xdf+\xb2A\x02\x16\x06\xbc8Ll\x80\x03\x8c\tf\xbb\x06fCJ\xd0\xa1\\d\x85\xd32A\x98\xd9P\xdan9z\xbe\xca\x9a,{RY\xe0\xb8\x02\x89o\xfag\xb8\x15\tJ218v\xe4\x03\xbc\x0e\x9b\x16O\x15\xe6\xd6`1\x05\x97\reU\xb6\f\x9d\xe6!6\xc1\x85\xa1{GA\xb7{\xd4D\xd1\xeb\x03\xc8V\xd9@\xca$\x93\xb9C\x9e*V\xb7K\xefE\xbf\xe5KkD\xa4\xd1\xb5L\xf0e\xcf\xc8\xec\xf3\f\t\xcc\xb1y,l\xac&\xf5\x95\x8c\x94\xb2po}S\f\x16\xca\xb6;bY\xb5} \x9f\xban\xf3\xa5\xe7,i\xbe\xb2\xd1m\xcev\x9a\xfeT\x188\xf3\x8ee\xde\x13\xd6/\x16\xcb\x1c\xa3b\xe1\xabc\x12Y\x9c\x17v\xaf\x9f\x94;w\xcdW;\xa7\xe6\xdd\xde|T\xcc\xf7\xa3rn.\xf2\xe7\xe7\x07\x9d(.ZqZ\xb6\xf2\xbc\xf0\\\xd7\xcdl\xd7\x865e\xe9\xb8\xee\xackI\xdf\xf5$k\xb6\xc3\xb4\xd5\f\xf2\x11\xdf-\xc6\xba\xcdrd\xa4\xad70#\xd2\xed6\xa4\x11*\xd8\xda?\x0f\xa6\xf8\xa9T\xf7E\x03\xeb~\xf0\xc3\xfa\x9f/\xed\xfe\xfe\xeaA\xe1\x9f\xf5s,\xc9\x88N\x7f\x96%>0p\xff\xecy\xdd\xdf\xbd\xe2\xcf\x9d\x87e@\xab\xfc\xd9\x13~\x90e\xd0\x1a\xb8\xea\xf5\xbf\xb9F\x924?\xf3S\x97n{\xf7\x7f\xac\xce\x16\xcf\xf5\xdb\xd2h\x8fI\x9c\xcd\xe9\x1e\xd6\x90\xf1\xbd\xc6\xc5\xa5s\xb8\x02\xc0\x965\xba\x07f\nN\x9e\x8c\x8c7\xa5P\x86\xe2\xa4\x9eDY_\xaa|^w\x12}l0b\f\\KDc\x94\x9d,we\xc7L!\x9b\xb6\xee\x14\xeb\xf6\x1dcE~\xe7r\x05\x82?t\\\xa7\x1a\x1di\x17K\x16\x8d\xc8\xbe\xfb\x8eM=\xf9\x90\xbd\xbe}\xf0\x01\x8b\xbf\xbd\xef\xf2\xb1k\x17\x8c\xb5\xd7?\x9c\x17\xa4;[\xe2\xa4f\x96\n;\x1b\xa2Dz\x19\xac\x9d*\t\x1b\xe6\x17ww\xb8#\xb0\xc1J\x13q\xb2\\\x1cdc\xe9\xc9\xefX\xbbQ\xf2\xfe\x80\x83\xc0\xb0\xa4HbeU\xbaY\x97\xca\x86\x9c\xcaa\x1f\xc9\x12}\xe0\xffc\xef\xcd\x83mK\xaf\xfa\xb0\xf5}{:\xf3\x9d\xef}cw\xbf\x1e%\xb5\xba\xa5h`\x90\x01Kf0\x04\x07\xdb\x04*\x0e\x15\xcaU\xd8.WRI0\xe5\xfc\x13\xc7\xa4pU\bI\x15\xf1\x84\x89\x01cG\xae\xb8\x8a*\x03\xb1\x13\x07c@\x16\x98\xc8\xa8\x84f\xd4\x92\xba%\xf5\xf8\xba\xdfp\xa73\x9f=\x7f_\xd6Z\xdf\xb7\xf7\xfe\xf6\xb9\xe7\xb5\x94\xbf\xd2\xbcz-.\xf7\xbe{\xcf\xb0\xcf>\xfb\xac\xdf\xfa\xad\xf5[\xbfu4\x04\xf5]\xdf\x0e\xe5\xbf\xff\x03\x80\xaf~\x15he0\xf9\x14r\x7f\x8a\x95x9\x87\x1f\x9e\xb9\xe2U\xc5\xa6>\xa9\xeb\x1dZ\x19q\x1b\x96\xd3\x0bv\xa1\x906\xd0\xa4&S\xe7\xfbx\xcc\xce\x04\x95\x19\xb9\xffDd\x8c\xbc\xa7\xf6A\xfb;\x18\xc2\x11\xb4\xbc\x01\xfe\x1d\x81\x8b>\x8a\x9eQ#\x12\xed\xd4\xf8\xba\xc4\\p\x88\xd7\xe4`\x9f\xf9f\x81dw\x0e~\xb7K\'\0\x8arN;(\xc1\x8f\x0e\xf0\xb1\x13(}<\xc6^\x17\x04\x9e/\x89\x80$\xf0\x1c$\x13\x04+<\xf60,\xf1\xa1V\x90\x85\x03(\x1e~\x94\x85)d9\x15!\xb5\x8d<\xf3\x9c\xb4\x06\x85@Kh+\na\xcb\xa9\x02\x96E\x0fzY\x17\xfcL@\x17\x99\xd9\xde\xb5\x01&=#X\x9e\x8e\xe1\xc3\x9f\xb9\xf3\xeco\xfc\xed\xe7\x7fo\xb4\xdfO\xb6\xfaA\xb2\x1dy\xcb\xd10<\xde\xdf\x1b\xbc\xba?\x8a\xde8\xd8\xe9\x9e\x1c\x1e\x8cN\x87\x83\xa8\xe8\x86rx>\x9e]\x7f\xf1\x95;7^|\xe5\xfc\xdak\xaf\x8e\xaf\x9e\x1d\xcfz\xe7\xcb\xb87K\x920IV]z?\x81\xd6\xbe\x90\x07#ySbRA\x07J\xb9\xc1`k\b:B\x80\x15\x86\r\x97x[\x9a\xc7+\xc8\xcfq\xd0\xc5\xfc#@\x10\xde\x86\xb07\xfa\x95\xae\x16\xaf]\x19\r?\xd1\xef\xc0\xc9p\x14\x9d?|4\xbc\xf9\xd4#\xbb\x8b\xb7=qE_\xdd\x1b0\x1b\xcb\xd5Ep\xb0:\x9ao\x88\xa0U\xf7\xadA\xca\xa1:Z\\h\x88\xd5`\xd3\xba}\xab\x1e\xa8\xad\x82\xd5\xe1o\xee\x01\x8a\xb5\xc2\xa2fC\x94\x1a\x107\x82\x9f\xbc?\xfb`\x0fT\x85\x7f|\xff\xebbf\xff\xc3?\xf3O\xbf\xf2w>\xf5Z\xb4;:\xdc\x85\xc5\xddcXNN!^\x9cBB;\x9e\xee\xce\xb8\xf7\x91\xf4|H3\xcc\x9e\xc7c\x808\x05\x1f\xc1\x8b\x82ZJ\xae\xe5R\x19\xd6B@\x10`6\x9db\xe0\xa0`\x1f\'\xcc\xc4:\xa4\x8e\x90\x11\x84Ah\x84t\x91\x84L\x93\xb3\x04\x82\xc2\xb4@&\x90#\x8b1[}wF\x12\x9ezl\x17\xde\xf5\xf4\x95\x8f\xbe\xef]7\xfe\xf9;\x9e\xbc\xf2\xdb\x87{\xff_\x8dZ5\xfc\xb9\xcf\x96\xfa\x0f\xf1\xa8\xba\x15\xc3\xc2\xaf\x90HHd\x89PiJk\xf9y\n\xc9\xd9\x14\x19V\xcc\xcc\x82\xb6\n\x17E\x02\xc9"f\xc1C\x89l\x12\xa6)\x02\xdd\x92\xe7\xa5\x02<Hr}\xe7~\x14PP\xec\x99!\xdd\x8f\x7f\x1c\x81\xf99\x10\xa1\xd9\xb0L3^$-7}\xae\xaa\x89e\xa2\x1c+\xfc\b-\x88\x99q\xc0\xf0\x8cy\xaf\x88\x8c\xbb;\x02\b\xdb<\xa9\xd22,<\xd7r\x88 u\b\xda\xbb\x84\xe7\xf8\nP\xfd\x8e\x8brT\x96\xa4~\x17\xf5\xa8h\xe6\x0b\x16\xdc{#\x10\x01\x7fiJ\x7f\t\xbeh*\x0f\xaa\x8cE\x1a:XB8\xf2A\xfa](\xe7\t\xbf\x8f\x9e\xe8\x83G\'k\x94"\x80"C"\xa0\xcf\x17\xe0\x0f\x84\x91\xd2O\x13|\xbc\x8cK\x95\xf1\xd5\x1b\xe0\xfd\xc0\x0f\xe0\xed=|\x1a\x89L\xbb\x03\x97.k\x18\xecjX\xce\x01f\x13\x01+d]\x8b\xb3%\xac\xce\xcf\xf8>\xdd\x1b{p\xf0\xc8\b\xf6/!p!ffK\x017\xff\xe8\x04&\xb7\xeeB\x17\x8f{\xf8\x7f|\x06\xe4\xac\x84%\xed!\xa3sK\xfb\xcf\x10\r\xf31\x1e3^\'\x9d\xed\b"\xda\x19\x86\xe7m5Kx\xeb\xb2\xe7\x1bW\x10>\x7f\xa1\xe0\xda/\x9d\xdb\x90,\xaex\x16A\xb2\bF\x91x\x85\x94\x974\xeb&i\x97\x18\xefc1\xf6X\xc8\xa6XtBI\x06\xfeL@\xd7\x19\xed\x81\xd7\xef\xe3\xb59\x83NI\xebC\xf1:\xa5\x81m<W%\xd2\xb8\x83+\xbb\xff\xf2\x83\x1f|\xfa\xa7\xfe\xcb\x1f\xf9\xe6\xaf\x1c\xedt!\xcd\xf5\x06\xca\xa4\x1d\xf5g\x1b\xa4Z\xb7\x14_\xa7x)\xd6\xc1\xa4\xdd\x7f\xaabo\x05N\xd5\xed\xb5\xfe:uT\xddP\xc4\x16\xae\x897=\x1c\x88\xc4\x03\xe0z\xcb\xfe\xa77\xa8y\xf4ZE@\xdc\x93Bo\xaa _T/\x89\xff\xffs\x18\xaa\x10<\xfb+\xbfu\xeb\x1f\xfd\x93\x7f=~\xef;\x9fyT,1H\xc7\x0b\f\f\xe9\x02VQ\x8eA\xfdu\x98\xbez\x86I\x7f\xca\xd9>\xcd\'e\x18\xd0\xb3\x85f\x85\x9aO\x01\xae\x1bBA\x80\xc4\xe0\x80\x01a\x10\xf1\xc9\xc9\x10\xe0412\f\x96eF\x8a\xb8\xd0\xac\x19FP\xe8\x8c0\x10\xf7ik."I\xde\x01\x99\x04\x98\xbdG\xbc\x1bk|\x86\xc1l~\x86\t\xf2\n\xba\xbd\x10\x8e\x0e\xb7\xe0\xdd\xef\xbc\x06\x1f\xfc\xc0\x93\xff\xf8}\xcf>\xfc\xcf\x9fz\xec\xd2\xbf\x0b|>\xa07\xfd\xef\'\xbf\x9c<\xf7\x8bw\xa3\xa7GCc\x7f\x84D\x81\x83\xb8\x91\x17\x9a\x80O\xaa\bE^\x85\x93%\xef\xc3*\xa9\xbf\x84\xc7\x0b\x98\x81\'s\xf3;5\xc3\xa0\x97\xd0<S\xcc\x81\x8f6\0\x8bB\xf0\fV\x80\x99|\x7f0\x02\xe8D\b\xea\xf8\xb0\xbf\xff\xfb _\xfe"\xed\xba7\x02\t\x95sP\xb5\x1b\xb3\x18\xb7\x88A\t\xd3e3\x99\xac\xa82\xe4\xc0.\xb3\xa4>Vb\x80M\xf6\x11\xef\x1f\x06\x19\xde\0\x19\\5sS*\xb3\x01Q\xda\xe0\x83\x8fO\xb7\'@d\xc0Zp\xf0\xd6^\x0e\xdeN\x86\xefO\x0742NH\x90\xedXw\r\xc4Zk?\xd5A \x1f\xe2[\x923\0tvz,U\xf7T\b~\xe0\xc3bv\xce`\xcb\x80Q 3\x99\xcea\x82\xef\xe5\xf8\xe9g\xc0\x7f\xdbc\xf8\x1c\x98\x80(r\x89\x0fa{\xa7\x03\x87\xd7\xe9\xfd\x04X\xce\xf0\x0b\xd9\xed\xf4|\x0eK\x02\xae\x01\xbe.\xbc.\xb6\xf7\xb6\xe1\xd2#\x1dVy\xc6\x98\xff\xdcz\xfe6\x02\xd8\x1c\xf1\x06y\xe7\xaf\x7f\x1a\xe0u\xfc\x99\x9cI|\xe3\xa8o\xd6\xba 8\x91\x93\x07&5\xde\x96d\xe5Gv\x86\t\x86\xeaQ\xad\x0f\xa2\x8e\x82N\x18`\x9eD\x16V\x8a\xaf\x19\x8d\xd7ZJ,\xd5G\x10&s\xe38\0\x7f\x88\0\x85\x17)-\xec\xf4\xe9\xdc\x96\xf8\xb8\x98\xc9(|}+\xbc\x9eU* \xe8\xae0\xd1R\xbc,3\xc3\xf3;;/\xf9\x9a\xa6\x84J\xd1\x0e\xb2\xd4\xac^#[\xab\x15&\x1a\xef\xbe\xb1\xfb\xd7~\xfe\xa7\xfe\xcc\xdf;:\xe8s\x12\xd6f]\xc22\xef\x06\x10\x84\xdd\xec)\xecNP\xc3\xcc\xcc\bC\x8bw\t\x1b\x1f\xc4Z\\\xd5\xe6w\xeb\xe1v\x1d\xac\f\x88]\x04\xd3\xeay\xaa\xbfW\xb7W\x16`E5NQ\x95*\xdd@go\xdb\xf1\x1e\0\xd7[\xf6\xbfrS\x82\xd2\xcau\xd6uH\x17.\x91\x0b\f~\x1d\xc06\xddB\xc0\xc5\x8cJ|]\x90\xfd\xc6n\xb3\xe1X\xba\xb7OW\x7f\xf9/\xfe\xcdO\xfe\xec`\xe7\x91p\xff\xc6\x91Q.`\xb0\xbe\xfb\xda-X\xe63\xf0\x86\x18\xe1\xe6\x18\b\xce_\xc2\0\xea\xb3\x91\xecb|\xce+.(\xb8z\x9d\x80\xfb6A\xd0Gf\x131(\xa5\xc99\xc6\x84.t\xb6F\x18H\x90\x9d\x90}\x11~2\x92t\xc5\x96@\xb4\x88\x90\x84\b\x10j^\x81\xc1\xcb\r\xa7%\f1\xc3\xdd\xde\x1fr\to\x82\fh<>F\xa0\xa45\xf61\xaf\0\xa1#\x1f`p|\xfc\xb1#\xf8\xc0\xfb\x1f\xfb\xe2\x87>\xf0\xe4\xcf\xbd\xf7\x99\x87\x7f}8\xe8\x9enz\xcd\x1f=\xce\xfe\x8b\xbf\xf8\x05\xf8\xf9\0\x99!df\xd5\x07\x84\xca\xba\xe0\xe6\x9c\x81W\xdf\x0bd[\xc9y\f\x052E\x0f\x01\xd9\xc3\f\x9d\0-GfY,sc\xc5\x94\x9aR\x9d\xd0\x1e?\x1e\x99\xe5Rp\x0f\x07=\x06)\x8fJv$h\xf8\xbd\xdf\0y|\x0b4\xcdF\xb1\xb2O\x18\xf3\\\xad\xeb\xd9+.3\xf24\xb30\x0e\xf0\xd6\x83\x909\x9c?\xc0\xf7\xe1\b\xcf\xcd#x\xce\xaf!\xb8m\x99\xbb\x96)\x7f\x99\xd8#\xcd\xed\x99\xa5i\x06\xb3J\x9a\xc8\xc3\xc5\x14\xf3i\x81e\x88\x8c\xf7 \x84P @\x15\xc8\x04\xcb)\x1es\x01\xbbW\x1e\xe7\xdd-\x04\xc4g\xafN\xf0mKa\xef\xea!\xf4\xf7\x07 \x07\xf4\x01\xc0\xf7z\xb1\x84\xee\xae\x07\xc7/\xbf\x81\xc1*\xc0\x04b\x04)\x02\xd5\xe7\xbc!,\x902uw\x06\b\xde\xc8\xb3{\xc6\xbf0\x8a\x02\xd8\xc2\xf7\xa7\xdb\xeb\xf0\xa2J"4\x93\xf31\xcc\xd39\x94\x04\\\xf8\x1aif\xec\xe0\xd2.\xbbv,\xcef\xf8u\xc6=>\x9d \xc3\xfc\xb5?\x04\xb8\x93\xb0w\xe4p\'\x84,!G\x90\x92\x99\x93\x8fl]\x84\bL!\xef~\xc6\x04c\xc1\xbd\xc6\xd5\xd2<f\xd8\r81\b\x88\xe1\xe2\xb1\xe7)\x9e\xdb\x0e\r\xa9a\x92\x85\xc9X\x99\x07\b>\xd4\xd0\x1c\xf2wJ \xca"\x86N_p\xb98\x9e\xd3`\x1b1\xd1\x94\xd9e\x80@\x1c!\x1bMc\x04=\xbc&\x12z\xff1I\x114h\x8e\xd7o\xdf\x0fYl2\xbes\xf6\xb9o~\xff\xb5\xbf\xfew\xff\xd6\x9f\xfb(\xbd\x85J9\xb1B\xb7?|\xdf\xb0.I\xdcC6\xaf/\xb4\xce\0j \x14\rpm\x10\x04\x8a\xfa6\xfaB\x89\xb1\x1d\xc9\xecm\xdc\x12\xa6}\xa2*\xc6\xf7\x82\x07\xaa\xc2\xb70\xe3\x82z\x97\xd1:0)\xed\x94\x02\xa0}\x03\xb7\x16|/\xa9n\xf3w\xb1&\\\x15\x0e\xd7s\xff\xb6\t"\xdb\xff^\x07\xca\x8b\xcf\xb7!\xfbB\xe0\xfa\x95\x7f\xf1\xf2\xb7\x1d\x9f\xaa\xe0\xea3]r\xa9\x03?C\xa6\x80 \x11\x9fg\x98e\xef\xe2g\x9f2\xc9\xd7!\xf3\xb6\xa0sp\x04\xfeb\xc2M\xff`4\xc7\xfb\x0f1\x93\xc5 \x02\bX>f\xde\x18\xd8\xe7\xe7\bb[]\xf0\xfa\x03\fX!\xf7\x8c([\xa6y#\xcc\xf3A\xe1\x07\x9e\x82j\x84\x8f\xe7\xfb\x92\x05\t9\r\xc9\xf61H\xadb8\xbf3\xc1\xe7\r\xa0\xdb\xc7\x1by\xdb\x90\xe2cv\xaf\xecsp[\x8e\x97l?\xf4\xa5/\xbe\x01\x9f\xfa\xf4+O\xff\x83_\xfa\x9d_\xb8~i\xf4\x0b\xdf\xfa\xbeGW?\xf8\x03\xdf\xf47?\xf0\xfe\'?\xdc\xefE\xe3\xea\x15\xbe\r\x92\x8f\x0eNOay\xe5\x1a\xc9\x1aL;\x9f\x1c\xd6\xc9\x06\x9d$o4\xc8\x8b\xc0E\xce\xe7\xc92C\x80$\x89z\xc2e\xa5\x92\x18V\x86\x01o\x9eq@\xe4\x81-\xba\x0f\xdb\x1ea\xc0\xa7\xfeQ\xe0\xf3}\x88]\xf5\x91B\xacN\x97\x10\x8d\xb6@}\xd3\xb7\x83\xfa\xc8\xbf\0\x91\xc4<\xef\xc4\x1fxQ5,\b\x80s\xdb\xe72\x06\xbat=I*\x03\x86\x87\bTO!\xd8<\x8c\xe7ed\x9c\xd8I\xc6Nj\x07\x12W\xd0c\xc9\xc06:J\xb3w\x8bg\xba\x88\xea\xad\xf8\xe2#\x8d\x8bOAw\xd8\xc7`\x8e\xa0\x1a\x8d\xa0\xb7\x17B\x07\xd9\x8e$_\xc5\xf1\x94\xbd\x16\xc9\xf9b\xb94\xccW\xfb\t\xb2\xdb\x19\xacfH+z\x12z\xf8\x1e\xc5\'\xa7\x98<\xdc\x81K\xd1e\xd8\x1fu\xe0\xe4\xa53\xf8j\x7f\x07No<\f\x8b\f\xc1e\xb5\x80\x84\x8c\x81\x13\xc9@S"\xa0$\xd4\xbe\xcb\x96\xb0\xf4}\f\xfc\x112\x17d\xe1\xe4\xacO\xdb\xa4i$\x80\xe6\xca\xf0\xbe\xf3\xd3)\x1e\x0b\xed"\x9b3\x01\xe7\xc0\x98\x140,;\x10SI\xd5\xa7m\xd4V5C\x8c8A~*\x11\xd8\xf0\xf8\xf3\x85a\xa5~\x88\0\xd2\'\xa6\xa5\xd8,9\x99\'\xb0B\xc6\xd4\xeb\xf90\xf4\xa9L\x9b\xf3R\xd0Bu\xf0\xbaD\xa6\xbf$\x16\x8d\xc7\x8d\xe7D\xc8.\xe3~I\xeaJ\xfc\x99\x8a\x8a\xe1@\xf1{\xaf\x11\xe0td\x04*4\xd6\xe0\xf7CvI\x11I\x001\x02\x9b\xc4\xd7\xd7\xdd\xee#X\x0e!\xdc\x1d\xc1C\x07G\xef\xfe\xbd\x7f\xff\xdc\xaf\xfe\xcb\xdf\xf9\xe2\xe5\x1f\xfe\xde\xa7\xb3\xc5\xaaa1\xf5\xfbn\x99\x0b\xf5\xfcj\xa5\xa2\xbe\xf8\xb9\x165\xcbj\xee\xafTs;n\x93:\xe8\xa7\xec\xff\xab"\x87qLqD zm\n\xcc>~\xab\xf4XI<j\x96e\x15\x85v1h\x8d\x8dB\xdf\x97M\xae\xfb\x8eqe\xea\xeb\x80\x1a\xc0\xd7\x95\xd8\xb8M\xd7\xf57]o`s\xf7\xa2En\x86\xa4\xd7\xea\xe5\xf7\x9a_\xd9\xf47\xf7\xb9(\x86\x9f\xcf\xd2\xa3\xff\xe4\xbf\xfe\xd8g\xf5\xf6\xe1\xe5G\x1e\xbefVu`L=\xbf;\xc6\x80\xa7!\xdc\x1ea@H\xa1;\xc8`1\xd1p~\xbc\xc2\x80\x84\xc1|5\xc5\xe3\xe8b\xd6\xebA\xd4\xc7\xd0\xd4!\xf0YA>\x9f@<\x99c\x10\xe8p\xd0Y\x9e*\xc3\xb0\x90]P9\x86\x86v)n\x87!\x06\x02ru(V\xbc\x1f\xca\x17\x11\xef\xb1\xca0\xb3%\x8b\xbd\xe1v\xc0\x9b|\xb3>\x06\x15|#<\x04\x07*\xcd@\xe8\x93\x87\x03\x82+B\xec\x12\x03-\x1e\xc7t2\x86\xc5|\xce2\xf4\x1b\xd7\xb6\xe1;\xbe\xe5\xf1\xd7\xfe\xcc\x9f~\xf7\xff\xf8\'\xbf\xed\xe9_\xfc\x7f>\xf6\xc2_\xfa\xc1\x9f\xfb\xe8/w\x7f\xec/p\xd0g\x84\xa0\x9e\x11\xad\tA@\xd44\x93\x84\x8f\x95\xc79$\x89q\xb2\xd0\x18\xcc\x01\x99\x16\xd9\x14\xe9Ef\xfa \xbe\x01-b\x05T^b\xff@\x04\x10\x1a\xc4\xedv:\xf0\xe8\xb7|\x13\xab\xf4\xbe\xfa\x85/\xf1\xd2\xc5 \xeaC\xfe\x95\xcf\x83\xf7\xc9\x8f\xd43U\xa6\x99\xa2\xac#F\xc9=+\x89\xd9?\x95\xffd\xf48\xc6\xc6\xebf\xe0\x8c\x04\x1d\x15\xb8\x12+e\x0b(m\xf8\x15\x8b\t\xecE\xa0\x8d\xf0\x84\x86\x92=\xcfc\xd1A\x84\xcc\xa3\x83\x80\x1f 3\xf6#\x8f\x95\x81\x83\xed\x1d\xf0\xa9\xb6\xe3\xe1{\x90N\xb9\f\x9a,c\x98\x9d-\x90-\x0f`\xfb\xda\x01\x9c\xdf\x1a\xc3\xdd/\xbd\n\xa3\x83>\x1e\x02\xfe\xeep\x0b&\xaf\xdd\xc1$\xe4\x04\xd9\xd1\x0e\x14]\xfc\xf7SO\xc1\t\x06k\x8f\xead\xabs<O\xc8\x9e\xf19\x04\x82\x14+\x06\xbb\x92\xdf\x03r\x96WT\xf6\xa4\xf7\x19\x8f#8\x18\x80\xeey|\xae\xaa\x8b\x97\x03aN \xa0X\xf1H\xc3\xd3\x11&\bo\x7f1\x83\xc9\xebg\xb0\xd2\x19\xf8]\x8fg\xc9R|/\x92\x93)&\x12+\xf0\xf09r\x1d 3\x0f\x90A\xf9\b\xb6%\x04\xdd\f\x02d{\xb3\xe3\x02\xdfCdW\xaa\x80\xdep\x04;\xfb\x1e\x0b\x0e\x16\xc7\x92\x05D\xb4\x1d\xba\xc4\xf7\xad\xc0\xf3;\xc0\xc4\xa8\xbf\xe3\x01\xad\x12\x15\b\x92b!\xa1?\xf4\x98yg\x99Uu"\xd3\x9b\xaf\xa8t\x1cA\x7f\x84\xc0\x86\xaf\x8bF\x1a\xf8\x1a\xc4\x97\xb1\xb5w\t\xa2\x83!\xa6~\0o<\xf7\x1cl\xc1\xeao\xfc\xf2\xff\xf2\xa3?Cn\xf9\x14\x0b\xa5\xab@\xd4M\x1f\xaa]\x1f\x11\xb64\x07N\xcaZ1\x1b\xb1\xc6\xd0\x9c\xea\x8bp\xcec\xc5\x86\xa0)\x01\x8a\xa6\xa2\xe8\xb04\xb7\xfc\xb8\xa9o\xb6!\'6>\xcc-@\xa3\xff\x06\xd1\x03\xc6\xf5\xc7\x83y);A\xa27\xcd74\xd4\xba\xb9\b\xee\xdd\xfdj@M\xbci\xf9@\xebu\xe6f\xbd\xec\xeaL\xc1\\\x9c\x9b@\xb4\xaaK\xaf\xcf\x92\xb8\x17$\xb5B>\xf1\x85\xf3\xe8$\x0b\xb7\xaf\xe1\xe7qq~\x0eAg\x17r\f\x98\x9e\xdf\xe1\x8c9\x9f\x0b\xe8#\xeb\nw0`$\x0bd\x15)L\xee\xc6\xd0\xe9b\x80\x1c\xed\xb0\xcc9\x1a\xf4\x99qd\xe5\b\xe4\xa5}(\x16\x0b\xc8\xcer\x1a#\x82\xd1e\x05\xb3\xd7\xe8\xdf$4\x889c\xec\x8c"PK\f\xaa\x11\xa9\xb2\x03Hc\r\xdd\xae\xe4R\\\xbc\xa2BY\xc4vH)f\xb7\xf9\x9c\x82\x9a\x82|F\xd6J\x98\xe9\x1e\xec\x81\xdc\xde\xe5\xd2[\x84ATn_\x81\xc1#\x9a%\xecd\x1c\x9b!{\xfa\xbf?5}\xe8_\xfd\xfe\xef\xfc\xc3w\xbd\xed\xf3\x7fw{\xbb\x97\r_;\x86\xe2\x8f\xbe\b\xeamO\x80\xc8rc\x8fD>\x80\xac:\xcb\x19\xb8\xc8\x1cV\x12P\xa4\x05\xf7\xb2x7\x17\x89KR\xdaF\\\xf0w\xbdZ\xe2\xb1\xe4\xcc\x82\x04m\x05F0\xf6\x901\xec\\~\n\xfa\xfd\x0e\x8cO\xe7\xfc\x9e\x90\xf2\x90\xfaH\xfe\xf5\xb7C\xf1\xc6\xcb\xe0\xbd\xfe\x1c+\xda\xc8\x92\tD\x07\x81\xea\b\x83\xe5u|\xfd7\x90a]\xc5\xdf\xf5LX\xa1Y*\xcc\xe6\xcd~-\x0bL\xfc=\x013\xb8J?\xa7f\x9e\xcc\x8f\xb8D\xe9\xe1\x9bH`\x15u#fT\xdda\xc4sg\xb4\xa6$O\xc9\xe9\xe2\x1c\xb2\xc4\xec\r\xa3u$4hL\t\xc2b\xb2b3]\x19-`|{\x05\xb3\xbb3\x04\x1e\xbc}\x8c\xdf\xe9\xf6\xab!\x03K>?\x87\x9b\x97/C\xf2\xf4\xbbA\x8f\x90ed\x19\x8bVh\'\x19\x1d\xab\x19\x84\xc3L#\xa1`\x8d\xf7\x8b$/\x91\xcc\x85Y\x90Y\x94\xc8\xf4R<F\x9eS\x93M\xbf\x86\x02\xbbo\x84\'\x9a\xb6;\xe3\xfb\x17\xcd\x91Y#K\x8f\x1e\xb9\x0e\xcb\x15&J\xe7S\x18\x1c\xf5\x91\xd5\xe2\xfd\xae\xcfaq\xba\xe0d\xa9\xc0\x04c\x88l+\xa3\xfa\x80Z\xb1\x07\xa2@F6\x1a"\xb3\xebv!\x0f\x97H\xd8\x14\x8bhX\xb0\x81\xf4\xbe7"\xd6;`1P\x80\0%H\xb4\x82\xd7`\x17\x8f\xc9\xa7\x1ck`D44l\x9d\x92\xb23\xec@\x07\x8f\xaf3\x94\xdc\xff\xa3\xf0\xd6\x19\xe0\xebZ(\xe8\xef\x1d`\x02\x80\xd7\x072\xc0P\x05\xdc[\xec\x8d\xf6\xe1\xe5\xe7\xbf\xf0\xe3\x9f\xf9\xfcK\xff\xf3\xb7}\xeb\xdbT\x1cg`pZ\xd7\xe0T\xb3.\xd1\x8e\x0b\xc6|\xd9\xfd\xdc;\0$\x84\xc3\xb0\x1c\xeedY\x95\xd2U\\P\xf5\x07\x9b{\xa4\xe2\xde\xf1\xa7\x02!s,\xc2\xc4\x91V\xd0\x11\xad\xc4Wi\x07\x16\xefCg\xff\xfb\x0e\xb8\x94\xd3\x92\xd0nYN\xdb\x12\x9eK\xaby\xf2\xd3dLnb\xd5\xeaZ\t\'C\x12\xee\xdf\x1dTq\x06=L\xec\x12N}\xda)\x1b\nX+Q\xea\xba\t\xacj\xd5\x85\xd3\xf0\x15M\xd9\xa0\x9e\f\t\x05|\xea3g\x8f\x95\x8b\xa4\x9b\xcd1\xf0\xefR\xd3~\x82 \x80\x19;f\xac$#\x0eCZc\x81y\xe9\x19\xfe\xdc\x910\xc4\x8c|5]b@"\x91A\x8c\x1f\xe2\x11\xf4\xbb\x03V\x7fe\x89\x84\x18\x7f\xe7m[\xb1\xc3\x12\x03{I\r\xfb\x1d\xc8\xbc%\x82\xd4\0B|\xdc^\x17\x01\xe6\x14\xb3\xdd\x94$\xd9\t\x04[\x19\x97\xadD^@\x9f\x1c\xc7U\xce\xfd\t\x9e \x12$\x80\xc0,\xb9\xe8s\xb6\xab\x83.\xac\xf8\xb5b \xa2U\xf1\n\xb3|\f\x8c\x814\xad9\x9da\0\xf7\xf7\xc0?\xdc\x15_\xbe\x99v\x8a\x97g\x9d\xad\x83G!\xfd\xf8\xcb\xb0\xe8tA\x1d\x8c@\x10\b\x91\xf1k\x9e0\x8bbWu\x9aaJ\xe9\xab\xe0u#\xc4\xc6\x80\xb2t\x12A\xd0\xedc\xfcw\xb24\xf2\xf5R\x9a\x8a\xdf\xf4\f\xa0\x17\xc1\xec\xf4.|\xe5w\xff\x101\xcf\x03Z|B{\xa9Jd7>\x99\xea>\xf1\x1e\xbc\x1d\xfe\f\xdb\b\xee\x97\xf1o\x97\xf0\x8d\x19\xb1\xba\xd2\x98\xe2\x92\xd2mazm$\x14\xe1hW\x9a\x8bE\x99\xa5\x92lG\x85\xc0\xe7\xe39\x8e"\xea\xe5t1\x88\xf6\xd9\x91=\xec  y\x1eg\xf7\x1dd!$b(\xf0\xfd\xa2\xc1\xe7\xa0K\xde\x83}\xbc\x8eIV\x1f\xe1\xe1c\x90\xcf\xce\xa0X"+\x9e-Xi\x17#\x9bV`\xcaQ\x1e\xad$!\xcb(<\x97\xab\xb33(\xa3K\x90~\xc7\xf7B\xf1\xd8\x93\xbc\xbfL`\x92\xa2\xe9+\'\xa5%\x81W\x8c\xe7\x1d\x13\x10\xde~\x8c\xcf\xb9\xc4\x03\x1d\xd21H\xe3\x9bH\x1a\x1cd\xc99&2~\x19\xf1\xefy\xfa\xca3\xe3\xabl\x0e\xacM\xd0\xa5r\xe2\xe1\xb1\x82\xf3;g08\xec\xc3p\xa8ay\x9c\xc1\xf9\xed\x18\x8e\x1e\xbf\x8e\xe0\xd1\xc3\x04j\x1f\xdf_L\x7fNc\x18\xecn\xc3\xe4\xe4\x14O\xff\0z\x97$+\x17I\x18\xd1\xc7\x04H\x04%\xc4\xe31\x97\x7f\x87\b2\xdbW\x114\xfd\x18\nd\xd5\xd4\xe7"\x05\xe8\x04\x99d\x17\xaf\xb9^\xb8\xcf\xcc9\xc0\xd7\xa7\x11\xa82<\xf7\xe1~\x0f\x04>\x7f<\x99B\x88\xacn\xff\xea\x15\xbc\x8e#.q\xc6\x9d\x14\xd9\x1d2\xb6+W\xe1\xce\xcdW\x91\x91\x8da\x17\x138\x99*X\xc5\xc5\xd1\xc7>\xf9\xf2\x93\x7f\xe2\x9b\x9fz\x9e\xf7\xa69\x9fm!\xee\xdd\xa9\xbe\x17\x16(\xd5\x8e\r5\xd00\xd8\xc87I\x8cUK\x10\xe2&\xc9\r(\x02\x0f\xae\xb3\xdau\x9dui\x13o\xa4\xa36,\x95\xa8\xd5\x8co\xf6Z\x1e\0\xd7[\xe0\xbfB\xb5\x81\xca\xed6i\xe5\f\0:\t\x91\xcb\x88\xf4\x1aH\xb9\x8d\xd0\xeaVR6\xac\xad\xbe\xd8\xb4h\xcfY\xd8\xdax\rf\x1bj\x7f\x95uM\xf5oe\x01\xacfukeB\xca\xc8\x97\x18\xaf\xbf\xf6\xea\xeaOr\xe0\xc1@\x93\x93bn\xacM9O\x9fQA\x0e\x01i\x88\xec*\xe0\x0b~<^\xc1\xf9\xe4\x18d\xdf\x83\xed\x03d\rQ\x17\x03\xdf\f\xf6\xf6\xba,1\xefc\xe6\x9c|m\f\x93;c\xd8\xdaG0{\xe2\x102\xbf\x8b\x8f9\xc7 \xee\xf3J\x0e\xfa@D\xc3.\xec\xef\x840\xc7\xb8?K1\b\x87\x18,|\xcc\x9fS\x84$|.\x9f\x9e>A`\x8c0\x15\xc6@\x1c\x1f#c\xa3^Xg\x05\xfev\x1f\x03_\x073\xe6\x1c\xb2\xc9\f\x03\x8a\x86\x003~\x8c\xc9H\xfa\x8c\xd0#\xd39\xbb\xae\xe74;\x84\xc1,\x8b\x11\x90\xf1\x06\x9d\x7f\xf5\x05X}\xdf\x93\xa0\xb6"\xcb\xb4\x8c\\\x9f\xd9T\x05^\xb9Y~h\0%1\xa5A\f\xd6d\xe0G\xb7\xd7Ia"\xca\xf2\x94\xd9\x97\b\xae\x9a\x85\x90\xd9\x04\xf2\x9cl\x9a\x06x\xdcf\x9d\t\xad\x12\x96\xbbCP\x8f\x7f\'\xc8[\xbb\xa6\xd4\xc9\xb2u|\x9c\xdc\xb2\x15\xabj\xa4\xd2%T\xbb\xb6TU\xd6\x11,\x10\bz\x1d\x06\xaa\xde\xb0gD\b\bV\x01\xc9\xed\xf1\x86~\x18\xf1\xf9\xca\x91\x85(|\xffrRDz\xb4\x8e\x04\x13\x11\x04ZRi\xe6x.\xe7\xa7g\xb0\x9a\x9dc\x020\x85l\xb9d`\xd3ji@\xd2\xd7,\xff\xa7\xe3\xf1\x90=P\xf94\xb9\xfe.H\x9f\xf9\x1e\x10\x97\xb60\xbf)\xd9\xc9\x83F\x05\x88\xc5\x95\x05\x9e\x8bx\xc9%Gj[\x89\xcc\xdc\x97\x13\xbd\x19\x82C\xc7\x88M0\xc2c\x12B\n@<\x16\xda\xfeL\x17;\xbe\x8f\xb4\xe6\xc4\xd8\xe7\x0b\x8e\x1a%\x02\xf2\xd6\xad%\xf4\x91\x05\xce3b\x7fg,s\xa7\xf7\xbf;\xe8\xe0ur\x87\x95|{{\x97\xa0\x8f\xd7\x0e\x94]X.\x17\x10\xa73\xb8tt\x05R\x02d<\x7f\xc1\0\xc1mgD\x9f\\8\x7f\xf96t:#\xd8:\xd8E\xd0\xc5\xf7\x1b\xcf\x01\x95\x19}\x1a\xe0\xa3\x1e\xe0\0\x8f}\xbe\x80\xfd+;x,C\xf3A\xc4\xd7sr\xf7\x14\x0e\xde\xfb\x10\xe6\x16\x01,\x9f?\x85;_|\x19\x96[1\x1c^\xdd\x86\x1c\xaf\xd7\xbd!&n\b\xfc\xc7\xaf\xbf\bQ\x07\xd93\xbe\x0f)\x9e\xc3\xc1Q\x0fz7G\xf0\xc2\xab\xd3\xef\\,W\xcf\xbb\xa5\xc16\xfb\x11-\xa1\x83\x01#\xb9\x01X\xc4Z\tO[2\xa4\xd7\xa4c\xa2\xc5\xce6\xd9D\x99\x87\x92\xad^\x1a\xcf0r\xc2\xd0\x06@\x17\x9cZ\x89\xb6[[\xba\xcf\xa6\x9e\xee;\xe0\x12\xc2\xf1\x13\xb3@\xc0Kg+\x90RpaZ\xef\xa2:g\xb3\xe6\xaf\xba\x18\x94]\xab\xde\x94\xfaD\rhn\xe9q\xbd\xd1\xda\\A\xa2\xcd\xdeD\xfb\xa2]\x17\xf4W\x7f&O\xbd\xd9<\x83\xe3\xf1\xf8\xb1\xa8\x87\fiy\f\x8b\xb8o\x96\x10b\xd0\x0b\xc3\x0e\f\xb7;<\xb3Ee\x95\x04\x83W\xd9W\xb0\xdf=b\xa9\xf0l\x9e\xc0\xfc\xee\x04\x0e\xaf\\\x86b\xa1y\x06&_L@%\nv\xf7o`\xd6\xbc\x05j\x94p\x9f\xa0\xa4\xc1\xcf\x1e\xfd<\x81dE\n\xc4\x87A!\xe8\xc1\x16\x06\xc9i\x8c\xc1\x8d\xe4\xca\x98\x95\xe3\xffF\xdbG\x98\xe9\xa7\xe0\r\xf0Xi3p\x1a\xc2p\xe7\x80\x1f\x97L^u@n\xe4\xc8$\x96\t\xac\xba\x1d\x04)d^\xdd\x02F{\x05\x97\x84r\xe5\x995\xf7\xd3\x05HM\xd9\xb1\xe2m\xc4b\'\x025+\xa0\xfb\x1bw \xfd\xa6!dGd\xdd^2\xcb\xa2\x81b^\xbdA\xc0\x85_>\t0Jb\x14K\x0e\xd0\xc4\xb4\xa8\xc4H\xf2\xf7\x10\x03\x95\xc8\x16\xb0Z\xad\xf8MR\xf8}9F\x96:\xf0\x8d\xe4\x9cg\x88<\f\xea>\xbf?\x1e\x06\xa5l\x1f\x81\xf7\x18_SL\x83\xc1\xd2^D<rl\xd6\x90\x94\xec.b\x19\x882\xce\xf0\x98X\xf0\xec[?Dv1\x84\xdeh\xc0\xe5\xc0\0\x81\x88\x8cp\x89\xbd\x10 \x15\x18\xe8\xa5\x17`\xe2\x91\x80\x1f\x05<\xccL\x03\xcf$m\xa7\xac\x9f\xe6\xf0\x96\xe3s\f\xee\b\xac\xe4\xdc\x81@\xa8)\xf8\xf1Z\x13\x12y\xa4,\xf5.\xca\x82g\xdc\xe88\x92g\xfe4\x94\xcf|\x07\xb2;\nk\t\xb3\xb0\f\x83|1\x9dc"@v\x18+>?<8\x9d\x10\xc0\x87l+\xc5\x86\xc5\xb9d\t\xb8 \xe6Ee8\xbc~<\xde\x17&\x99AW\xe0%}\xcf**\xf1\\\xad2\xe8|\xee5\xb8s\x86\xe7r\x89,~\xab\x0b\xd1@ros\xfc\xcam|\x9d)t\x83!\xb26b\xa1[\x98 H8\xbd\xfd\x1a\xf8=\x8f\xc5\x13/=w\x13\x99|\x04\xdb\xbd\x01$\xf8\x1a\xd3\xc5\x1dXL\xee\x82\xe8I|\xfd1(d\xf5C\xbc\xa0B<O$\xf4\x99\xaf\xcea\xf7\xfa\x1e\xdc\xfc\xf4\nn\xbez\x0b\xae>\xf5\x04K\xe2\xcf\xdf8\xe3vbqk\x01\xea\x16^g\br{\x0f\xed\xc3\xec\xec\x1c\x06\x07[x\xd8x\xdf\xe3\t+k;\xc8\xeaf\xb3\x19\xe6U\x1d8{e\n[\x97z\xb0\x7ft\x04w\xdf8\xfe\x13\'g\x8b\x9f\xdf\xdb\xee\xe19U\x1bJ~\xaa\xf6\xa3l\xfev\xeff\xba\xab\x1bp\xc1l\xf3,\x98\xb8\0\x94\r0\xeaV\x89R\xb7J\x8cP\x972\xdb=9\xeb\xaa\xd8\x92\xcf\x8b\x07\x8c\xeb\x8fE\xa9\xd0\x96\xe3\x94\xeds)-\x9c7_\xb4\x06\xf8\xd6U~\xed\x8bN\xb7\xa4\xacZ8\xeaA\xedRu\xed\x94\t\xf4\xc6\x8b\xb7j\xe6V\xf5\xf1{5X\xdd\x0bX\xaf\x8d\xf1\xd3\xeb:>Y\x89\xf1j\xf5\x94\n{\x985\xae\xc0\xcb(0\x93P\x81\xec\x92\nL\xc4\xa9\x9e0cw\xf1\x1c\xb3\xfc(\x18\xb1\xc7\xdd\x82\x02X\\\xc2\xa8\xdf\xc7\x0f\xaed\x80\xf00\xea\x05\xc3!\fF\x87\xd0\x1dR\x82\x9b\xc3d\x8c\xccl\x1b\xd9\xda%\t\xcb\xa9\xcf\xae\xec\xb4\xdb\x8a\xea\xf3Y<\xc5\xec\x1f\x83\x14\x06f\xb5X\xc2rN=5\x01\x97\x1e\xdf\x83$\xceY\xf9V\x92\xd3\xbagT_D\xbe\x02\xa0R\\\f\x88\x1f\x10a\xf6]\x90\xd8\0\x03\xae\x7f\xd0\xe5\xb9\x1a\x91{\xe0\xcdS\x18h\f\x96\xbd\x11\xb3\x18\xfa\xccM&\xc8\xbc\xe8\x9c\x1d @c \x83W\x11L\xf0\xb5\xce1\xa0%\xe4\x12\x91\xa6\xc6U\x9dz"\x18\xf0\xc3TA\x7f\x86 \xb4\xa0\xc1\x9d\x1e>\xce>\xc4;\xc8\xa4F\xb4\x12e\t\xd9\xf9\xeb\x10\xcf\xc6\x86\xa5\xf1\n\xe5\x9c\xc1G\xf3t\xb3"m\x85\t\xdet\xca\xc9\xbc\xb6\xe3A\xb6\xb3\x84h\xce\xa2n\f\xe8\xbeq\xc3(K{\r\x14\xe6\xfa"s\\\x1a\x80e\x1b*\x89 \xa5\xf0\\\x86\xd0CP\xa42 -\xb0\x14\xd28\xc6\x17\xe4h\x81L\x89\xfai9I\xb8\x91-\xa4\x8b\x15\'<\xc9b\x86\x01{\x8aIB\x8c\xe7\x19\xc1\xa5\xa0\x92glW\xa5P\x89\x18\xcc\x96bb\xc0\b\\R(\xbe\xde\x14\x1eG\xfe\xfe\xff\x18\xf4;\xde\x07\x01\xd9@-R$\xa3s3\x8a@\xe0M,K\x10\xd0Q91\xe5r\xa1B\xe0\xa4\xb9>\x9a\xe8\xa6\x12)\xb0\xab}`zXd\x02\x8c\0\xa5\xc9\x85\x9e\xaeGbZ\x9e\x91\xaaC\xee3;\xa6\x82\xd4\xe8s\xaf\x83<>\xc3\xf7\xc2\xb8\xe3\xa7\x94\xa4\xa4$\xe2\\"\x10\xe1\xb5\x85\x80\x91c\x024>\xc6dkz\f\x91\xdf\x87\xe1(\xc4\xa4%\x867^x\x1e\xbfc\xd2\x13l\xe3\xed\xfa0~}\xc6l<\xf2\xf7`\x81\t\x85\xf7\x8a\x80\xf2\xd8\x87Y\xb7\x07\x97/\xe3\xfb\xb8\xcc\xe1\xe6\xd7^C /\xe1\xe0\xda#p\xfb\xe6K|=\xbf\xf1\xe2\xab<\xde\xb0{e\x1f&\xb7\xee\xc0\xce\xe1\x1e\xc4\xe71\x9c\xbfv\x02\xdbW\xb6ay|\x8e\xa7\xcd\x83\x9b_~\x15\x86\xbb{p\xf8\xd0\x11\xec\xec(\xee\xcf2\xe3K\xe6\xe0\xe19M\x94\xfaO\xef\xdc\x9d\xfe\xc8.&}J\xa9\x8d\x9f\xc7\x8ai5\x95\x16\xdd\x02\x99\x8b\xe0c>\xf3n\x1ch\xcfjUI\xf0\xc5\xe7\xab\xc0\x12\xea\n\x8f\xfb\xf8\xeb\xa0x\xb1/F\xb7g;1Q=~u?\xf9\0\xb8\xde\xaa\xff\x91\xebAU\xc2S\fT\xbau\xd14`\xa0\xd7\x94C\xeb\x8a\xa0M\xc0\xa6/\b1Z\xb2\x0f\xe56\xc0\xc4Z\xe9\xa0\xa1_\xdc\xb2\xd7\x1bf\xc1\xc4\xfa\xc5\xd8\x1eX\xa4M\xb7\xb3y\xeag\xa5x?9y\xa7\x0b\x8a\xb9\x02\xd9\x87Y\x9bQ\xc0\nNO\x90\ra\nJ\xea\xbe`\x0b\x83\xf9\b\x83B6\xe4\xb9\x16*5E}dY\xcb\x19\xf7\x07J\xbc\x1d\xd9\x0e\t\x91\xc3*Ixf\x8b\x14f\xc5D SP\xd0\xc3\x80\xb5\x94\x03\x98\xde9C\x86\xf65\x18\f:\b.!\xdb\xee\x04\xfe6\x1c\\\xeeB\x88\x19\xfe\x043n\xd1\x19\xe0sy,\x0e\x89\xc9P\x16\xa3\x98X\x11+\x19\xe0\xb1\xed\xe11\xcd\xd9\xb8\xd5\xeb\xf7`HL\x07\x03rN\xee\x1c\xc8H|\xfa7f\xd7|\x8cqA0\x01\x87#dU~\xc0\xf6|\xf9\xf2.H\f\xb2]|N\x81Al\x1cO`U\xae -H\x14\xa1`\x10\x91\xbc?e\xf0.I\xc1GL\x02\x03\xf09\xdew\xde\xc9!+\xc6\xe0\r\x13\bF\xa7\x90\xce\xe6\x86\xba\x92\x9b:\x01\n\xad\x1c\xa1\xcf3\xcd\x05\x91\x9c\x1a\x03!\xcd\xb8z\b\xf69\xf9\xf7\x8db\b\xc6\b\x1eA\xc72j\xe2\\\xb9uZW\xb6\xb7\x85\xaf\x0b\x8f\xb5\x83\xec-\xc4\xf3\xd6\x1d\xe0y\xe8\xfa\bb\x82]\xde\xc9X\x97<\x0e9\x86\xf0\xbe-\r\x19\x82\xcar2a \xc9\xf1\x8d\xcc\x90A\x16y\xc1\xd2\xee\xaaHlD\x8d4/\x87\xe7\x97\x84"\xc2\xf4\xf9\x98\xe9\x91\xc2\x11\x9f7{\xef\xf7\x83~\xf8\xdd\x10\xe2\xef\xb3d\x06)>fI;N\x88\x11#0\x12g\xc20\xcd\xb3{%\x89\x13\xf0\xb1H\r\xc8\xe5N\xb2\x82\'\xf0\xea *"S\x11$\x1bG\xc0"SHE\xc9\x07]\xce)\xf5\x91<\xf3;|o)\xa9\b?s\x07\xfc/\x9fB\x1e\xfaF\xee\xcf\x1b\xa5#\x04-d\x8c\xfe\nY\x95b?%b\x84KdJ"\x0ba\x8a\xc7\x16\x04\x8a{e\xd9"c\xa7\x8f\xf8|\t\xaf\x1d\x7f\r\x8f\xb7\x80!2\xb6\xe1n\0\x93\xc2\x87\xc9\xf1\x1d\b\xf60\x89\xe9\x050^\xceau\xba\xe0\xb2\xe5\xf9\xc9-N\x94\xa2A\x0fn>\xff\x12\xe4\xc8\x9c\xf7\xf7\xafAr\x9e\xf1\xec\xd7\xecK\xf8\xfe\xc6s^[\x93\xcez\xa0\xf18\xa6x\x9dHd\xc1\xe7w\xcf \xc0\xeb7\bz\xe0\xd1g\xa3\xb3\x82\xf3\xd3\x98\xc9t\x8eLy2]\x86\x98Ped\x15&\xbe\x011C\xfb6\x17Y\xda\xd7{\x8c&\x91u\x86l\x84hK\xf2\x9dd\xdaM|\x9b\x98\xa1\x9cx\xd1$\xe3\xe4v\xd2bo\xcc\x9a\xef/\x81\xc6\xfd7\xc7e\x81AU\xa2\x0b\xa5A\xad\xd7w\xa5\xb0\xbd-m\xfd\xc1\xda\x19\x92\xb6\xd2eW\xd9\xe7\xae\x0fh\xc0Po(\x01\xe8\x0bu\xee\xb6\r\x8c+\xa8\xdf\xe4\xed\xd1\xee\x9f\xb9\xb3"\xa4\xd4*\xb5\xca\x8b\xd8\xe7\x15\xect1\xaa\x8c\x02\x9f\xcf"1\x8f,\x9b\xd8\xda(\x84\x1c\x03 \xf5\xd8\xc8b\x87fXH\b\xe0w\x89E!\x8b\xe8ua\x11#;A\xb4\x0b\x87\x18\x98\xc9\xa9t\xa5x\x86&B\xb0Ky\xab0)\x061\xc8\xe0\xe3xC\x92"\x8f`{\x0bY\x1e\x9e\xcc\xe9\x192\xaf8\x80\xee\xe1\x167\x9c%\x06\x1bO\x87\xb0wm\x84A\xa4\0o\x87\xc4\x0exlc\n\xc8\x98\x89\x07\x1a\xfc"\x82\xf3\x9b\x13\xd8G\xd6Ee\xcc(\xca!\xce\x14\x90\f\xd9\xdb\xc2\xc06\'\xcd\xc5\x18\x86{}|-\x88 K\xc5\xb3I\x85\\AX 0\xe5!/6\xa4\xfe\xcf.>\xc6nf\xb6\x8e$~\xca\'G\x05\xc8\xd0\x06\n\xf2\x1cY\x1f"P\xc9r\xfe\x18\xe6e\f\xa9\x18B\x07\x99g\xd0\x1da\xacFFA\xdeQv/\x15;\xb5\x07\xb6\xc6\xab\x95y\xef\x89}y&P\xe4[\xf8\xcf%\x06\xfeU\xca\xe7\x97\xb3Y\xde^l%\xee\xc8\xc2\x88Eq\xe3\xdc\x0b\xd8\xea\x88\xca\x9ey<c\x90\xa0\xdfS0,s#\xa7/\xb2\x92{[\x9aW\xb1\xcc\x19\xb4L\xe0\xab\xecR\x8d\x89\xaf\xf9Jl\x85@\x9ak\x99\xd6\xa2\x90\xc9/\x06q\xa0\xd7\xf9\xb6\xef\0\xfd\xc4\xb7 c\xf6\xe1\xe0\xfa6|\xf5\xb3\'\xf8\xd8s\x06,\xa1S\x16d\xe4Y\xcc\x02\x05M\xdfelJ\x9c4\xdbFt\xb7\x14\xcc\x1c\xa1\xa3Iu\xce\xa0E\x8e\x1a\xaa\xf0\xb9\xacY\x92\xad\x15\x81\x16\x89o(\xf8\xe5)\x04\x9f\xbb\x05\xfe\x17\x8f!\xc6\xf3\xe0\xe3c\x91\x92\x95l\xa6\xaa\r\xd1||\x05\xa9\x02\xbb\f\x10\x84\f%;\x97 \x13\\\x05\xf6j\x0e\xf0\xba%\xb1L\xcc\x80*19Z\xad\x96\xf8\xdea\x02@\x02\x18\xfa;I\xdc1\x99\x9a\xf1\x18\xc0\x94-\xa1\x96\xcbSx\xf1\xf3\xc7\x98 ]F\\\xc4\xf3\x99\x97\xb0B\x96\xbfX-0\x95XB\x07Y\xb2\xa7\xbb<{\x98\xa6c(T\xc0\xbd\xc9\0Am~\x9a\xc3\xe4\xe4\x0e\xf40q\x92\xb2\x07\t2\xc4\x05&p\xdd\xe1\x80\x81+\xcdrIeZRJ\xba\xc0\xd3\x80F\x15\x1f\xee\x95tn\x06\xadV\xd2\xba&\x957\xb7\x95-\x05\xe2z\xe9\xd0=\x0ebO\xeb\xe2\x8dv\xb2\xab7\0\xab\xb8\xb7\xdb\xc2\x03\xe0z\x0b\x95\nUi-{\xacb\x0f\xd6.\0\xa6eM\xb9\xaf\xe9}\xa9\x0bL\xa8\r9z\x8dE\xad\x83\x97\xbb\xb4\xa0\xb1\x86\xaa\xd7\x1c\xb4,Z\xf4\x06\xf6\xa6/0,\xf3\xd8\xda\x99+S,*\xa0\x1dJE\x82\xd9rG\x99\xc1\\rR\xcf=\xfc\xa0R\x19+\xe6u\x1ed\xacJ\xf67\x05FwO-y\r\x87\x9e\x07\x10,\xc9\x8ct\xc6%\xc5`\x18\xe2\xdf\xba\xcc\xe4\xfc\xb2\x0b2\xf7aAk\xedi\xc6\b\x03R\xbc\xc8x\xf5\xc5\xe5\x87\xaeC\x14\xd3\x8cj\f\xb3\xd5\x18\xe2\xf9\x04\xb6\x0e\xf6!S\x0bX\x9d\xe7\x188C\xe8c\xc0\x1e\xdf\xbc\x83\xd9r\x06\x87\x8f\xec"\x83\xc1@\x85\x81\x92\xbcny\xe8\xd4\xef\x02\xcd\xc9\x8an\n\xdd\x98\x84\x0b\x03|\xbc\x02\xe2\xc9\x12z~\t\xdb\x83\x10\x96I\ba\xe6!\xa8in\xfe\xaf\xf0\xf9\xa2A\0\xde`\x1b\xe6S|]\x01\x02\xebN\x80)\x7f\x8f\x1d9r\fl\x01f\xf3\xc0\x0eK}\xc8B\xea\xc9!c\x13!\xcc\xef\xae`;\xda\x82\xbe<\x86\x19\xf9\xd9\xa5\x1d\xe3HJ\x9b\x8a\xa9\xe7\xd5\t\xb8w$\xa9\xc7D\xa5P\xba&da\x06:y\xb2\x98\x94t\xb4\xf5\x18\xcf9\xf9\xe2.V\b\xe6\xbe5\xd3U<\x7fE\xec\xa1\xfa\xee\xfb\x11\'I\xb4\xdc1]\xcdy\x80Y\x10\xa3\x95\xc6\xe5\x82\x96GR\xd0\xe3\x8c\xde\xf6)x\x81\xa5*\xed\xb5\x933\x12\x97\xc5\x8a\x9b\xf8\x9a\xca\x84\x04\x90t\xeb\x02\xbfH\xcd\xa9\x8c\xeb\t\x90\xa2q\xefa\x80\xb7\x7f7\xef\xb3$\xe1\x8c\x8flf\xb4\xdd\x85\xe3\xf3\x9c\x83u\xb9\x9a\xe1\xa5\xb0\xe02%\xb1"*sR\x99\x91f\xf0\xe8qh\xe9%\xbf~z\x9dx;\x89 +\xf1\xdf\x82\xd6\xc1\br\x0e\xf1\xb8D\xca\0N\x82\x80\xdbc\b\xbft\x0e\xdeIfL\xef\xe8\xb5\xe4f_Y\xc9C\xd9\xd4\xe3+\xecuK\x9f\x93\xc2\xac\x88\xc9|s\xfc\xec\x8c\\\x9a\x92+\xd9B!\x9d\xf3\xc2%x\xa2g\xce39^\xa9>\x8f\r\x98\x8f\x06&aq\f\xf1,\xc6s\xa7\xb9\x17G\xd7\x10\xbd\x1f\xb4\xc1Z\x0e\xa8\xc4\xe0\xc1b66eO\x04Jm]\xed\x0b\xf2\xb1\xd43P\xf8\xe2\xa2\x8eo\xce\xbd\\\xf25DL\x94\x86\xda)I\xe3\x1dl\x98D\x943Ae\xde\xa4\xfd\x99\xd6\xad\xcf\xf8: \xad\xcb\xdd\xd7K~\x94(\x9a\x12\xa2p\xc4\\\x1a\xda7\xd3N\xafL\xb4D\x1fB\xb8}pq\xcf^Ze\xf5\xb4q\xdd\x8a\x80fx\x99\x7f\x13=\0\xae\xb7.p\xe9\x1a\xb8\x94\x86\x8d\0\xa1\xad\xea\xd0\x05\n\xedH\b\xf5\xda\xa4\xbc\xd6\x17W\xc4U\x03\x83\x17\xcc\xc6\xaa\x8b\xfe\x1eM\xac\x8d\x03\xdf\xce\xed\xebKP8\xc7\xa0\xcccf\x18(:\x1d\f\x96\x90\xb2e\x8f\x9aI\xfe\xf0\xb2\xa18\xcd8\x89\x052\x98\xc8\x04b\xaa\xd6\xa4\x13\xa0\xc1\xab2\x8f\xf0\x8d.\xd8C.\x9e#\x1b\xe0\xe0\x8c,b\x82\xec\xe3\xb4\xcbk+\xa8\xdc\xd8\t\xb6\xb8$\xa5I1\x88A\x8c\xb2\xcf\xde\xd6.\xe4\xc7\x18\xb00\xa3\x8d\x13\xc9\xb2mrV\xe8\xf5\xb6y\xfdI\x89 \x99\xc44gt\xceRwb<P\x0e\x80\xac\x05\xc97/\xe7=\x8a\xc8\xac\x90\xbd\r\x11Pd<\x86n\xff2\x06\x1f\f\xd8d\xe5\x83\x19:)#\xfb\x83\bA\x07_\x1bo\x07\xceX\xa0\xd1I0\xd8-<\x96\xf8\x0f\xc9\x86\x8a\x14\x88\xf8\xdat\xecQX\x03\x9at\xeaD]P\xdd\x80\x9d\xd5\xe7\xb7g,\x93\xde\xda\xedC\x14v\xf0q"8\x18/a\xa2\x11t\x10<\xcb\x83\xcb\xe0_}\bc\x1cf\xe5\xbeY\xc6\xc8\xb3]\x81dW\x10\xda\xa9\xc2=/\x04RM\x8c\x8fje\x98\xe9\x17\b\n\xbe\xc4\xf3E\x92reD\n4k\xe4\t\x9a\xc9\n\xad\x14Yq\xf0"f\xc5\x8aV\xbd\xd6\x7fp\xcb\xca\xc2\x06,\xde\xedE\n\xc5\xdc\x12.bIs^mBjCV\x11\xea\xd2>\x96U\x14\xd2\xef1\x80\x8bg\xfe,\x04\b\xfe\xb2_\xc2\xe9+o\xc0\xed\xcfN`\xb0\x85\fZe\xbc\xb59\xba~\x05\xe4\xd6\x16H\xda\xe5\x85@\xed# P\xb0.V\xc8\x96\xc7w\xa1\xbc\xfb\x1a\x88\xb3\xd71Y\x89\xb9\f+h\xa7\x17\xf5\x1c\x0b\xba6\n>\xcf\x04\xe6\xdemL|N\xa6 O\x16xL>oC\x86\xd2\xb3\x89\x9e\xe0\xef\x06\x9c\xa5\x01.\x12\n\xd1\xd5FF\xbf\x04\x94H\xe5h\x87\x18\x95,i\x98ZK~\xd7\x8c \x840\x15Y\x97\xf0&xJ\xfax\xfe\x02N\xbe\xb4\x17\xe3#\x90cH\xc4N\xf1t\xaese\xce\x95\xa4\xa1h\xbf`\xc5"\xb9\xa0\xd0\xb3\tLr\x82\x80\xe4\xfd\x92\xab\f^\x80\0O\x02\x9f\x15\x82*^\x179\xed:#oCE\x03\xdcdC%x8]\x8c\x8cu\x17\x9dz"\x96\x19&miVn,\xf5\xb5>\xeb\xad8\xd2\x9e\xdf\xaa\xb6\x04\x98y\xb0\xb2\xfe\x9b\xf9\xfdE\x03\xdeJ\xc4\xd5x\f\xde\x9bu\xb5g\xca\xcc\xf3\xb9\x80Y=O3fc\x1fK\x88\xfbn\x96\xeb\xfe\xebqQ\x7fE\xebF\xf9\xa7\xc5E\xe0\xd2\x17\x97~\xc3\x86~X\x03B\xfa\x9e"\nm%\x8b_wI\xdez6\xe7Lgml\xe4\xae=\x12\xbd&ZC\xd1\xc5l\xb7\x1f\xa5p6\xa6i\xe4.f\x8cs\xfba\xeda\xd0\x13\xfcA%\x10\xa3Y\x0fI\x1bs\xc9\n\xa9\x94\x90\x92\xec\x9b\xfc\xfe0P\xa4dH^\xe4\x98\x91\x9arWP\x98>\x19-K$&B\xdb\xda\x93Y\x1f\x9fO\xc3|6\x83\xa0\xa40\xb2\xb2\xac\xa1\x07\xc3\xbdm\x98\x9e\xdc\xe1\xe6;\x81\x89/\xe9\xb6\x92\x07\x89\x87;}X\xce\xce!\xc8%\x03B\x10 ;\x9c-\xf1q}\xd8F"\xb6\x9a\xd3\b\xea\x14\x03E\0\x1dm\xe7\xa7\x10\xd8\xa8\x8c8\xe8u0C\x16P\xa4\x1eK\xf1\xfda\x0eq\x8e\xd95\x99\xc4\xc6\xf8x\xc5.\x06\xd9\x90wY\x91\xbb\x83\x87\x01\x9c\x19\x9dg\x9c\xcf\xc9\xd5\x83\xcc\x83\xc9\xaa\xaa\x87\xe7i\xd2)aE\xd2\xea\x9d=(\x87\xcf\xe2\xb1\xe0s\x92\xfd\x12\xdb@!\0$\x18\x8c\x97\x98\x99\xcf\xa6\xacDd\xa1Gn\xca\x80J\xe66(\xb3\xd3\x12\x9f+\xea)Q\x1dQ\x97x\x9e\xb5o\xfbO%\x97\x1c%\r<\x8bJ}\xb8f)f\x9dY\x15K\xe6\x0bcw\x0f\xcanX6\xcb$\t\xc8\x88e)\x8a\xc8@\xaa\xbf\x95\xf1Y\xb4VS\\\xfa\xa3\xf5(\xd4\xa3z\xc7\x7f\x06\xde\xa5G\xf1\xdc\xd1\x8c\x13\rO\'\\F\x9d\x9d\xaf\xa0C\xec\xf8h\x1f\xc1\xb9g\x86\xa2\xed\x8e0b5\x11}\xed\xe3\xb9\xb8\xf6\b\xe4O<\x03\xc5\xf1\xeb\xa0o=\x0f\xf2\xe6\xd7@\x9c\x9f\x1ba\xcab\x81L\x8d\xc0\x86\x06~\x81\xd9\x12\x0b\x03\xf1}"\x90\x97iJ6\x91\x1c:\xc8ED\x89\xc4\xb2S\x0b\xfeV9+\x94\xc7\xa5f\xfa#1K\xf2)\xf4\x02\xcdvW\xe4\xc6\xc2\x92\x01\xb2\f\xa3>c.m/n\xc2I\x1a\xb1\x8e"Uf\x9b\x8c\xb1.\xe6\xb2\xa0\xa2\x12)\xfb4Fx\x1a\xf0\x11\nbJ\x1d\b\x91\xc5\xe5\xc8$\xf3T\xf0g\x81\x16\x7fB\x16\xf1bN\xea\xb3\xc9\x01\xb9\xbf\xe0\xf9[\xe1\x17^[%\x02\xa4"u*%!\x19\x8dd`\x82\x86\x80\x98$x\x9d\x15\x9b\xc5\x12T\x96\xafSI!Zra\xb7D\xb8\xce\xbc.*\x14\x1d\x16\xb4A\xcc\xe1\x02`\x13\xab\xd6K\x8d\xa2\x06.\xe3\xf4!60:W&\xdfv\x04y\0\\oY\xc6\x05\xb6\x1e\\\xb9w7}+U\xedS\xba\x90N\xb5\x01k]b\xaa7\xb0#a\xfb]Z7}\xb4\xaa\xee\\\xd5\xc2\xd73"W|\xa1T\xe9\0\xa4j]\xd4\xcd\xec\x99v\x18!&\xbc\x98]^\xda\x0b\xe1\xd6\xdd\t\xf4\x06\xf8\xc1d\xf3\xf7\f\x03X\x02\xde\0\x11\'"\xe3\xb9\x0e\xe4\xab\x02\x02^\xdf\x11 \xa0df\x0e)\xc3\x0b\x98\x02\xae\xc6\xdfQ\xb0 \x03\xd4\x1e\x8dD\x912\x0f\xffM\xc6\xb9\xec\xfbF\xeb \x12(\x10\xfc\xa8O\x93e=\x98-\x13V/\xd2\xacSz\x1b?0]\f\xfa\x98\xed\x93Qm\x86,J\xe4\x01\xcc\'\tt\xfc\x1e\xfb\xc4\x85=\x02\x17\xc1\xd6B\t2\xb3\x05\x06\x91>\xaf\xb6\xf7y\xc5D\x16k\xb6\x97\x12\x180\xa8\xcf\xb0\x9a\xa4\xb0:NA\xee\x06\x18\x9b|\xb6\x94\xca\x95\x1dVF\x90\xcb\x04y\xda\x9d@@\x86t\x18\xec\x149\xb5\xd3)\xc9$\x87~:?\xa3~\x17\xba\xc8.2dH/\\\xea\xc2\xebG=(\xf0X\x02*\xbf\x90b\x8e\x1e\xaf4[\x7fY!\xea\x93\xe5\x112\xce\xe1\b\xf4\x1c\x99\xc8\x9d\xbb\x18\xd8fl\x17\xc5l\x87@\x83\0\x85\xbc\xfd\xa8\x97\xc5\xc0\xa5\r\xe3 \x0fG\xea#\xb2\x1d\x82\x07`G?\xeb\x04F\x9b"\xb1\xf0|{\xdd\x15\x96a\xf1&(\xc3X\xa8l\xe5\x93\xc9o\xc9\xc1\x9d\x19\x17\x97\x0f1\xf1\x10+V*J\x91\x9bu&\xf8\xb3N\xf1\x9c\xef=\x01\xe2\x89\x0f\xb2 D\xc5>9Vq\xcf\xd6\xbb\xd4\x87\xce#\x0f#\x03\xebq9\x99]cd\xd3+\xcd\xf1w<\x93g\xcf\x96G\x99\xfd\xc1U(\xae^\x05u\xfd\x06\xe8\x0f\xff#\x90o\xbc\x02,/\xe5\xde\x161\xf7\x80\xcf\x13\x81\x90\xc8\xac\xf3\x03-\xba$Ca\x02k\xea\xb3\ncZ\xc8\xa7\xc07&\xb8|\xf5\x12\xda\x81Y!#\x19x\t\xe4\x06\xd6\xfe\n\x01\x97\xc0\xba$k1b^\x1d<\xc6\x19;\xab\x10\x18\x92\xbe]\xd3\xe8\0\x9e+\x0f\x13\xa2\x12\x19\x14\xab>\xa9\x1cN\x02\x9e\x81\xc7B"\x99\xd2\xe0t\x8eD\xd9\0#\xad\x83\xe1\x92(WL\xa8\\\x9e2\xb8q\xbf\x14\xaf#\x95\xf7\x99\r+\x1a\r@FY\xa6x\xad,\xa6p\xb4\x1f\xc0h@.\xf5y{&\xcb\x99\xb7\xac\0KV\xe0\xe2\xd0\xa6\x0bB\fq\xef\x84\xb4\x01\xc2\xb5i\xac\x8d*\xe4v9\xd2e^\x06\x88d\xaddn\xee_^`w\x8d\xe2\xf9\x01p\xbd\xa5\x19W\x056\xae@c\x9di\xb5\xd9\x0f\xac\x891\x9c\xd2\xa0\xfd}\xd5\xcbj.\xa26%w\xfb[\x064U]\xe2k[\xc88\r[\xd1|(\xc8\x13N\xe9v\xbd[W\0l\x1f\x87n\xda\xef\x05\xf0\xaew\x1e\xc1\x1f>\xf7\x06\xc6\x06\n"\t\xf7\xec\x88\xd1(\xbd\x84b\xee18x$\xdc\xa0\x12\x89\xd7\x01c\xe8:gfC\xe5\xb8\0\x99\x1a97(\x1d\x82\x98\x17\\6\xd1\xc8Z\x8a\x95)\xc3\t\xb9\xe0>Y\xe7\xe0\x80/\x912\x9e\xb3R\x11#<\x1b\xee\x96\xc5\x19\x06z*k\xf5 _.!&\xdb%\xb2"\x92\x98\xf5\'\bN\xc9\x10\xbc9\x1d\x17\xed\xc2\xc2\x0f.2=_\f\x11\xbcF\xe0\xfbf\x9305\xf4\xbd\x10\x03VG\x82?G\xd6\xc3\x83\xc4!\xcc\xc7\x82\xcbu4O\xdd\xeb\xfa\xec^\xbe\xcc\r\xab\x81>9\xd5k\x1e`\xce\x17\x85q\x11\x18\xf4\xf19:\xc8\n#\x18\xe2\xeb\xbe;\f\xe1\x8f\x9e\xd8\x86\xf9V\x84\x99\xb8 \xdd\x01\x9f\x1fc\xf2.L\xe2B\x8f\xe5\xfb\xd6\xa8\x9dk\x9a\xe0\x8d\xb6\xc1\x8b\x02\xc8o\xbe\x01\xc5\xcd\xdb\xc6\x0f\x91\xd7\x90\x14\f f\x96\'\xaf\xa7;\xa5\xb0\x191%\x1f\xc2\\c\xac\xdc\xe2\xbeT\xb5\xb6D\xb1\xeb\xbeIb\x92\x9ae\xa9\xd2\xf6\x1c\xa9_\x15V\xd9\x11%\x1c+VxJ\x1a\x1e\x96\xc6\x99\x92=\xe3\x85\x15f`\xa2\xa1\x9e\xfcA<o]\xd3\xdb\f=VEz\xfb\x11t\xaf\xee\x83\xecD,\xfe\x10\x1e\x81\x84-3*\xdbS3\xd9\x9c\xd9\x8e\xac\x8c"\x92\xa1\x85n\xfb\xf6w@\xf9\x13?\x01\xfa\x9f\xfc,\xe8\xe7\xbe\x8c\xc9\xcf\b\x8f{e\xca\x85t\x9d\x10kb\xf6D\xfd\xa9\x88g\xefx\x96\xcb\x93\x1c$\x89\xd9\xb0\xb1\xb06\f\x86f\xe7\xe8w\xcc\xc2\xa42""\x02\xebz\xa5\x8b\xdd\xb1E\x9e\x87\\\xeaN\xcc\xd2M\xdaSF=Cb\x9a\x85y<~\x93\x88I\xd1\x8a\x13z\xff\xa8?\xb6\xc0\x04\xa7\bX\xf0A\xa5k\x96\xeb\x93l_df7\x17\x98\xfe"\xcd\xe3A\x19B\xba(\xad\x1a<aM\x8a$\xa6H\xec\x11\x19 Y\xa2]=\xba\n\x9d\x88\x96\xa7\x165`\x19c]\xf3sU\xf5\x95V\xa9\xdc\x18\xe1\xac\xf5\xbc\x1c&\xa5\xed\xcf\x04Ob\xad\xc4X!\x89r\xfa\xe5n\x1f\x8d\xce)}\xee[\x8cL\x9a\xe4\xabI\x8cM\x8c\xab@\xaa\x01H]\xdf\xd7-?\x82\x90\x0f\x80\xeb-\xfd\x9f}W\xf5Z-\xb0\xaa\xf5\x9a\xda\xfc\xe6\x92\xa1\xf17T\xad\xbfU\xf7\x13\x9ca6\xf4\xac\xdd\xc0m\0P\xebf\xd5iE\xcf+\x002@\xa6.\xf8\x9a9pX\xdf\xa6R\x18\xb5\\\xa7\xa9\r\x93*\xf8\xc0\xfb\xaf\x8a\xdf\xf8\xdd\xe7\xd4\xdd\xc5D\x04\xb4\x84\x90z\x0f\t9I\xe0\x05\x8b\x1f\xc6BLL0\x89ig!I\xb91\xc8g\x1e\x07\x0fZ7\xa2bbN\bBb\xca@\xeb\x95&\x83\xd6\xc6\xaf\x88\xbd\xf4\xc8\xc3\xae\x9cN\x8dE\x93\xeepV_(3\x9fc\x1c\xf8\xf0\xf1(\xb8\xeb\x80\xcbU\xb4zD\xd2\x13\x92RL\x9b\x95\x13F\rg\x86\x85\xa1/yt*Y\xe2\xf1! P\x0f\x8d$\xf7\xe9<\x87\x02\x01\xce\xf7\x8c[y\x9a\b\xf6$\f\x07\bX\xbd\x907\xff\x92[8\x9d\xfa\x84\x9e\xc8G\x10\xa4\xf5\xf5\xc5\x8a\x19\xa3\xd7\xcd\x98\x15\x84)\xb2\xd0\xb7]\x81\x17\xdew\b9\x1e\x7fOr\x91\x8a\x8d\xca=\xcf\xf44\x0b|\xac\x1c\x99e\x99e\x96\x81\xdb?\x06dR\\@\xd8\xedAp\xe3:\xac0\xb0\'_\xfa\x1a>7\x99\xf6\x96F,!\xcc\xd6cS\nT\xf6\xdf\xc2\x96\x8a\x0b\xa8l\xe7\xb8\xafaW\x13\x10c3kQr\xb3\x13\x8c\xfbV\x0b\xf3\xdeJ\x93<`D\xc6\x8bc\xca\f\xcb\x80\x97\x02c\x84\x15\xd8\xb5)\xd4\xdeR\f$\xea\xf2\x87\0v\xdf\x8e\xf1\x19\x8f\xcb\xef\xb0\xf2P \xd8v\xaf\xec1\xf3\xcd1y\xf0It\x82/\x9a\x94\x8by\x96\x18\x83`e\x1d\x1f\xacK\x8c\xd9\x8b\xa9ls\x05\x13\x1drS?\xbc\x06\xfa?\xff\xef\xa1\xf8\x07\xff\xd3\x04\xbe\xf2\xa5\x05\x82bH\xf3\x12\xb4\xf9\n3\x15\xbc\x14C$\x1b\xc2\'\x95=5\xf9\x18\xab\x14\xede\x0blp\xb6\x06\xc6\xda\xb7 \x0e\xbc\xc7\x8d`\xa9\xa42\x1bo\x14Hx\x15\x8e\x8e-\xf3\xa7Y\x07.\x8dJfr\xc2_1\xb8\x10\x10y\xe4\x04O%Y\x16\x94\bfL\xb4p\x92\x18<\xd1/\xf2]\x84\xc2\xb2=z|\x06\xe5\x8c?\xbf4\xb7(\xe9\xbe\xf4\x82;1\x97}\x89\xb9\x0b^H\x89\xc7X\b\xb6\x87\xa2\xb96*\xcd\xbe\xfd\xc9\xa3\x9f\xa4\xf7\xb1V\x14V@Q}\xfe\xec\xe7\xb5l\x9a]\x8dq\x806\x8c\x97\xb1\xc1\xae\xed\x96\xba\x11W(\x02\xee\x16\x1b\x87\x1a\x80*fV\x89\xb7\xaa\xb8\xd0\0\x8fh\xb9k\x98\xc7o\xc7\x1f\xbemU\xc6t\xd8`[\\b\xdf\xef\x07\xc0\xf5\x16\xc6-\x1b\xe8I\xc2\xa0\xa4\xb9Hj\x81\xc5Z\x9f\xe9B\xcf\xaa\xea\x92\xdaM\xb7\xda\x11\\\xf0E\xa8\xa0\xc5\xb26?N{W\xb6\xd6\xedIw\x93\xad\xae\xf7\xdbt\xdd\xcc\x97\xb2=\xc0\xec^\x88\x8a\xd7\xb5+\xd8\x1ev\xe1G\xff\xfc\xb3\x9f\xfd\xdb\xff\xeb\xbf9\x98/`\xd7\x0f\xf6:^\x90z\xdcfI1s\xf5s3l\x8aL#Z\\b\x85\x1b\xf9\xd2\x01\xf5m e\xc9\xbc\xcc=V\x1eR\xa9\x906\x1f+\n\x10\xb6v^\xa4\xd2\x04z\xba@h@\x95\x015\xe3\x81\xd8\x02\x03\x86\xf0"\xb3_I\xcc1P\x84H^\xfa\\Z\xcb\xa9\xb7\x86\xc1\x89u\x06d\xdeK\xe5 br%\xc9\xc9\x0bs\fi\xc4\xa5\xa0\x82I\xc9\x82\x03\x10\xb9\x85\x17\x9e_\x07\nb\x1bt\f$\xe5&\xf5 o\xf5\x95$\x04)9\xf0\xb0\xb9.\xa9\'\xf9\xf1\x13\xb61*\x1f:\x82\xf9\x07\x1fc\0\xf4\xa9dDxD\xab\x9d\xc8\x8c\xb5c\xaay%\xbe\x84d\x8e\xf7\x9cF<\xe4\xcb\xec\xa8\xcaV\x85`bF\xb3X\xfd\xc7\x1f\xe6\x01\xeb\xe4K/0\x93\xe4K\x83\xb7\x10\xe6\xe6\xba %]Q:5fi\xdf\xb3\xb2\x91\xd43\0\x15\xcc\nt97\xde\x86\xf4\xfez\x03\x8c\xfb\x87\xf8\xb5\xc7.\xf3\xec\x7fhR\x12\xbc-\x02\x18\x8c\xf9\xbbB\x80C\xe8\xc6\xe7\xce\xb8t\b\xe1>\xe8\xab\x7f\x8a\xe7\xc2H\xb2N\xb2v\x02\x83\xf0h\x0b\xfc^\x97\x99m\x80\xac\xbb\xbbc\xcav\xc9\xa2\x83\xe0e\xca\x94\xb4\xb3\x8b\\\xf9u\xe9*]m\xc8\xf4\f\x9b\x0b\xf0\\P\xffK\xfc\xd5\xffj{\xf9\xd3?\xf9\xe3\xc5\xe4\xfcyD\xfdP\xa9<\xc0k\x0fS\x87\x94P"\xc2\x14\xe1\0\xdf\xd7-dm?\xa2J\xc1#jxe\x0e\xf1\xbd9\xc0\x83\x1dR#\fo\xc3\xfd0Z\x16YJ\x03\x8e\xe4\xbbH\x95;f\x8e\xbc5:b\x17\x10)\x8d\xb90\x836\xc9\xf5\xa9\x84M\x82\x1c\xda\x1eZx\x06h\xd9\xa3\xcf\xe3j\x81\x9ft\x18\xf0y\\@\x0b\xabB\xc4\xf7.5\xf6[\xbc\x19\x9aL\x97\xbd\x82\x15\x882\x95\\v\xe6v"\x95`y\x92\xdbc5f\xb9\x98\xc1h(\xe1\x99\xb7\x1d\xfe\x0f\t\xb9\x960;\xb5\xe5?\x17<\xdc\xfe\x96\x93\xccV\x0b\x1c\xb9\xd7)\f\xb4\t-\x9au%\f\xa8\xcdg\xba\xa6Jk\x89\xb6\xbc \xa1\xd7\x86\xcdV\xecJ4q\x84\x92\xe1\xf6R$\xd3\x1e\xe1\xdfV\0\n\xa2%\xe0\xe0\xb1\x8f\xfb\xccg\xf7\xbeu\x87\xaf\xb3\x19.\xb5)[B\xd4m\x80\xa9\x1b\x9aj\r\xfa4\xac\xcb$\xcc~\x1dqOyl\x03d\xd5\xf5\xd9~.\xe3\xc2\xe1\x96\x16\xd7\x87\x9d\xd7\x96P\xaeeVFb+\xf9\xe2%\xe5\xd37\xbf\xe7\xd1\xf7\xfe\xe4_\xff\xfe+\xbf\xf5\x91O\xfd\xf0\xcd[\x8b\xf7\x8c\x17\xc5\xb3\xcbir9]\xa6\x03|=\xbe\x88"/\xc7O\xad(_%&#ee\xca\x1a\b\x9e\xb1\x11\x98\xe5KO[\x80J\x8d\x0byiT\x8a%9-(#~0\xfd\xb1\x95\xcd"3\xeb\x1e\x92r\xe0\xf6\xc8a\x81\xba\x15\xfe\x84]#\xa8\xdbD{\x91x*)L\x98\x01\x909.yLH\xee\xfc\x97\f~\xb4SB\x13\xb3\xd2\xa9YLI#\f@\xc3\xad>?\xa6\x82\x8c{\x1d\xd4\xdb\xa2\f\x9cvy\xf1\x89\x0b\x8cg\xa0\xca\x02\xd3\xa7\x14K\xf3>"\xfb(\xfe\xa3o\x02\xb9\xedA0G\x8e\'\xb8=\x03\x1dZp\x8c\xc0L[\x83iH\x96\x82WD\xa6\xf8\x1d\x01\xabq\x04\xe9B\xf2\x02b\x1a\xe6\xa5f\x11mMN\xf3\x12\tX\b\xfd\xa7\x9f\x80r2\x86\xeck7\x99\x91\x917\xa0\x80\xca\xcd\xbb\xa8\xc7\x13\x1a\xf5\xa0\xb2\xbd\xd3\xc2\xaa\x01\x89]\xcd\x98a\xb1\xe9\xaeD \xf7\x8e\xf0k\x1f\xbf\xb6xv\x89$\xdc\x82\x94\x96\xb2\xc3\x81\xdc\xd8)Is\x9e\xb8\'F\x16M1\xef\xec\xca/o\xe1i\x1b\x98\xdf\x95\xc6;0\xdc\xdb\x85h{\xcb\xb0[\xfc\xbf\x1e\x82\xd6\xf0\xc8\xf4E\xe95\xe6I@\x95J\x88\xf1\xfc\xe54\x8bE\x8aTV\xb2\xe7<\x8c\x9c\x13\xdb\x0b\x8c\xb2\x93zFd\x85\xd5y\x04\xc1\xff\xfb\xfe\xec?M\xff\xb7\x9f\x17\x02\x01\x91\x97[\x8a\xb2\x0e\x17V\xb2M\xf8\xfd\xb3x\xcdPl\xf6\xf0\xfc!Z\xe4\x97\x95*\xbf\x19\xff\xfa\xddB\xae\xde\x89\xa7\xe1\x8a(\xca-O\x92\xd7\x06\x82X\x8cW\x80R\xd6\xcf\xc1\xc3;z\x82\xe6\xde\x10\x0by;4+a)\x9b\xa1lS\x9b\xd2\x9f\xa0\x84\x05\x93$\xc3\x86\x8c\x9c\xbb\xf0R\xde^M\xc8\xc3\xe7\x95\x9c\xdei6-/\xb8DH\xd7\x14]\xa3\xb2\x13\xf2g\xa8\x9c\x87<\xd2A=F\xbf\xd3a\x10\x93"\xe1\xd5,\xb3\xd9\x04\xbe\xe7{\x9e\x85Q_B\x92$\xf6s\xbaAX\xc1\xe5P\xd9\xfa\xcc7\x95\x98\x06\xd2\x84\x15J\xe8*\xf6\x94\x17\x15\x87\xad\xf8$\x8c\xa6\x91\xa74,\x80\x99\xed\x9c6y-\x15\x14N!\xc9\x88?\xe4\xda0\xb2\xc3\x10\xd7v.5\xabW\xee/\xd7\x8c\xfb\x12\xb8\xda}+\x9b\xd1P6/+q\x86\xae\xb3\x97\xa6\xb6,7\xd8\xb0\xe8\x0b\xfd\xacFTQe\xd4\xd0\x1a^^\x07\x9a\x8b\xc0\xe6\x94\0\x85\xa8\xc1S)\xb5Q&_\xcbY\xab\xec\xd8\x8aM\xe8#\x9b\xe5\n\xde\xf9\x8e\x1b\xb7\x9e}\xe7\xa3\x7f/^%\xecC8\x99-:\xb3y\xfc\xae\xf9luu>O\xb6\xe7\xcb\xf8`\xb6Z\\\x1fOf\x97\'\xe3\xc5\xe1b\x96\x8c\x92\xcc\x1b\xc4I\xd2[\xad\xc6}\xcc2\xa3|\x0eAy\x9b\x8a@\x82\xc5\x12\x92G\x9d0\xf0\x85\x01\xf7R\xb4I\xe9@\xc4\x01\xef\xc6\xf2\xbc\x9c{=\xf4\xb7\x822\x7f\xda\xd7\xc7\x81\x1f\xd8\xdf\xce\xbc `k(\xa5\x9a\xfaJI%G\x9ak\x12\x1d\xe3\x04\x01K\x03\x9aT\xde\x94\xacE\xe7\x1b\xab"dfEeM\xcf\xce7\x11k\xf1hw\x14)\xfa\x8a\xd0\0\x19~\xda\x8b\x9c\xd6\x9a \x13\xfb\xaew\x82|j\x0f\x83\x94\xe6e\xc9\xb4z\x85\xb6Z\x04C|\x1d]\xc1\xccKXW#\x020\x92\xff\xd3Z\x8cd\x12@\x86\xd9}:\x13\xac>\xa3q\x01r\xd5\xa7s\xed\xe3\x9d\x06\xcf\xbc\x1d\xa6\xb7N\xd8\x95\x83\x85\x07\xa2*\x18\x99\r\xc6\xe6\x12)\xcd\xbc\x15\xf5\xbfXXA\xbb\xca\xe6\xcc\x98\b\xc4\xa8$\xe8yHF\xe46~\xed\xf2\xf0k\x05P\x82\'\x9d\xad=\x0f\x03\xb1)K\x9a\'"\x82\x83\xec\f\x06Pl\xfb\xa0\xb6\x81\xc5!\x9aJ\xbe!&\x16\xe4\xd4q\x80 \x88 K\x16R\xdd\xa1\x07\xfdm\xabV/x\xf7"2L\x04\xf1X\xb3D\x9f<\x13{\x83\x0e\x02\xb9\xcf\xac0\x9d/a\x81\xac5\xc9Vl\x1bUP\x89-\xcf\xc1\'\xf0\xfa\xf6\x0fB\xf2\xdb\xbf\xfe\xac:\xbe\xf5G\x9a\xc6\x068\xf1\0s|\xcc\xfc\x89\xa6\xb1\xc8\x04/IO\x95\xa5\xa4\x1f\xf0,\xc2\x0b\xf8B\xfew\xbcEGju\x887~\xa2T\xe2Q\xad\x8bC|\x8d{\x82d\xae\xa0\x0f\xf1z\xdf\x17\xa5\xbe\x8co\xd6.\x8d\xa1\xe1\xbb\x84\xef&\xd5\x0b\xbc\x92\x1bO"\xa0\xb2$c\x1b\x97%\xa5Oy\x93\x0f:\xf0\xbc2\xc4\xc3\xb4JC\x12\x89\xd0\x9b\x19\xd8r\b\x95\x0ei~\x8eDAI\xc4\x1b\x13\xa4\n\xcc\xe8\x01\x8d\x18 k\xe6\x9e^\x91\xc3\xf2d\x05\xcf>{\x05\xbe\xeb\xdb\x1f\x13\xcbU\xdcR\xe95I\xad\xfd\\\x97\xa6\x97\xe4\xf6\x93\x9aY+\x87\x01U\xeeJ\x15P\xd5{\x8a\x9c\x12\xa0\x94\xcd^-\x07\x80\xb8\x95 \f\xd3\xab\0N\xd7\x96\xe0\xae\xdf\xa1\xb6m\x8b\x068\xa1e\x82P\xa1\x96\xac\xcb\x9a\xa6\xa8\xf3\xa0T\xf8\x96\xfe\x8f\x96\xf3\xd5\xabB\xb4u\xd5\xd5M\xf3\xd2\xab\xcbp^-\x9eX\x1f.&\xf6\xa1\x94j5M\xdb`R9\xca\xeb\x8d3\x1f\xd5}\xd6\x95B\xcc\x98@_\x98b\xe7aU\xa7\xce]\x01\xa7^S.\xba\x80H\x8fUX\xe9.\x05\xd9\xbd\xbd\x10\x0e\x0f\xb6\x13\f\x0e\x9f\0\xe7\xde\xda\xba\x01P9.\xcd2\xc8\x88U\xa4\xb9\\,\xe3\xad\xd9l\xf9\xfd\xd3\xf9\xea\xa1\xe9$\xb91\x9d,\xf7\xcf\xce\xa6[\xa7\xe3Ig2[\xf5\xa6\xb3e\x7f\xbe<\x1f\x96\x85\xecS\xfb\x87v\xff\x91Y8\x95w(k\x0f\xa2)+\xbfHd\xc6\xcb\x0f\x81So#\xf7&\xe4 \x80b\x05\x992\xab\xd3\xa9gV\xd2z\xf7\xaeyM\xf6\xfc\x1a\x0b%\x8f\x8f\x96J\x98\xec\xeb\'\r \xe44(+l G\0Pe\xc0\x03\xa6\xbe\x17\x1aBB3`$\xa9\xff\xd6\xc7\xf9i8+\xa7\xf9d$&\x91\xfd"\x13\x0e\xcf\xdd.K\xf2\x7fmK*\x9a4\x1a\x1e\xcf\x10\xad\xa8\xefE\xfb\xaa\x18L3~\xbc\xe8`\x17\xba\xc8\xbc\x16\x9f\xf8\xbci\xfe\x831\x05&a\x05;a(3h\xca\xb8K,4\x9f\xe05\xb70%#ILj\x9b\x8f[\xc8!\xef\xef2\xc0\xed\xae\x1d0"\x1e\x16Kx\xb2v\xe3hV\xaf\xe3\xb5\xd0\x0b!\x1f\xa5fQ%\xb2B\xc5\xf5\xce\x12\xa2\xab\x97@G\x113D\xda\x1b\xd6\xdbF\xb6\xb5\x83\xdc\xa6/ ^\bvtJ\x17\x1a\xe2\xd9\x92\xe7\xc4\x06[}\xd89\na\xb8\rl(\xbc\xca\xb6!T#\x98\xdc>\x87\xd5y\xc1\xe7\x9e\x1d>\xf0<\x84{\x07 \x9fy\xdf\xbf-\xfe\xf5\xaf\x1d\xb0@\x83AB\xdak\x11\xb8\xacg~\xd7H\xad+\xfbON\r\xb5\x8a\x91\xf5\xbd\x8aO\xf4\xaa\xf90J"i\x82\x1bM$\xf7\xc0\x93\xa3\x91\xa5\xe1u\xbe\xa5\xd9\x13\f\xef"\x83\x14\xd9tQf\xa4%d\x9f\xfe\x9e\xd0\xaa\x8f\xe7k\xe4\x05\xfe\x81\x1f\x84W\x90\x81\xdf\b\xa4\x7f\t?\xe3\xdb\xf8\x9a#\xfc]\x84\xff\xd7\xf1\xbd\xce\xc8Gj\x86\xd7J$=\x19 8\xf8\xa6xg>\xff\x8aE.\xb9\x01\x05/\xc6DF\xc0\xd3O?\xe6\x7f\xf7\x87\x9e)\xe9\x9c\xa7\xb9\xba E\x97\xd6U\xa5baU\xdf\xa9\x9a\xd3\xaa*&\x15\xd0\xd5\xc9oUq\x91\xd6\x0fe\xdd\xdc\xf6B<q\xad\xde\xa0\xae\x12\xd5\x9b\x93\xa5Y,zq\xf8\xb9*\x0bZ%\xb2\x93|\x1b\x16h\x04\x19R\x88\xfbq\x8c\xeb\xfe\x03.25\xadf\xb8\xb8\xd7\xc2\xca/\xe5\f\xfa\x89{\xb24U\x07\xd3\r\xb3_\xd5E\x07\xc6Q\xa1\xa2\xde\xb5M\x94\xf3\xe5\x96\x04\xf4\xbaJd\xcd-^\xb8\xca\x0b\xfbc5\xc3!\xd6J\x16\xba}P\xce\xfe\x15\xf3:IEX\xfd\x0f\\\xb0\xb3sET\x02\x0b\xf1k\xd0\x07\xb5\xb7\xbb3\xc6\xbb\xff\xb3Z\xf5\xcbC\x93Z\x14E\xe1\xc5q\x1a\xacV\xf1;\x17\x8b\xd5\x8d\xe52~l\xbeH\x1e\x19OgG\xa7g\xd3\xe1\xf4<\xee.\xe6\x897\x9f\xcf\xc3\xc5r\x1e\xce\x97+?IKzj/-R\x91\xc7\xa9\xafJ\xbf\'\xbcN\x17C\x14\xe2\x82/\xbc(\xf0DHf{\x0b\x9eC\x85\xd27\xbd\x06\n\x10\xe4\xccN\xbe\x81\xd4\xbb\xa2\x12\x115\xf5\xfd\x80K(\x14T8\x88D\x82{L\xdcWb\x9b\xa2m\xa3\xb8\xcb\x97\x90_\xda\x81\xf0\xda>\xfb\x0b\xb2\x0e/2\xe5\xc0\xa8G\xfd-|\x96\xc0^\xe4\xdc\xc32\xca?mF\x80\xd8\x90\x99\\\x19\x18\x8e;\x1d\xbc\xaf$\xf8\x81|\x9a0\x94R`\xe8=\xf60\xc4_~\x11Y\xd7\x8a\x19\x07\xb1+*an\xed\x1d\xc2`g\x9b\xb7\b\'\xab)\xacf\'0=^\xe0\xdf\x066\xa9\x91\\\x06\xe4\xcd\x9cT\x0e\xa4\x1e\x8dU\x9b\x99\x9aNnD\f\xe4\xf8\xc0\xa0\xad\xacH\xc1\x94\x83\xb9SBN\xfa\x1d|_e\xc6\xfd *\x93\xd2p\x15\rO\xc3\xd6\x10\x12\xea\xd3\xd1l\xda0\x80\xde\bx\xfc@\xea\x06\xa8\x99\x1f\xd2\x12M\x04d\xd5\x8f\xf8\x9c\xd3\xa0\xadO+Q\xf6\xc9\x8f\x11\xcf-Q9\xf2\x14\x1c\x8f\x11\xdfL\t\x98\x0e(x\xfcm\xfb)\xe4\x9e\xd0\xb2\xac\xaa\x17%o\x81\xd6v\xc3\xaed\x8b+\xd3B)9AR\xd6\x91\xa6\x12@5\xa57\xbcWY \xde\x97T-\xc4\x1fT\xaa\x90\x96\xe2\xb9<\xa6\xd7K6^\x9d\xd0\x87\xe1h\x07\xb6\xb7\xb7`k{\x04[\xa3\x11\x8c\xb6\xb7\xf9\xfb`0\x84n\'\xc2\xd7\x17\x890\fe\xe0#\xf3B\xa4\xc2\xff\xf0\x07\x19\xe25\x12xR*<\xbfK|\xbee#\xcfj\xbb\xd6\xe8\xfas\xe0C\xa7\x1b1P\xa7\xb4\xcfM6\xad\x03c\xe9e\x15\x7fR\xd8\x12\xa1\x0b\n\xb2\x06\xab\xeasn\xbei\xa7\\X}\xceM\x85\xa7\xee\xddV@R}j5\xd8ati\x19\x9a\x04hm@\x17-\xa9\xbbt\xcb\x93n\x89\x12\x9a\xc7d\xb0uz\xed\xcds?\0\xae\xb7xk\xab\xb2X\x91\xe6\xbaPf\xd8\xb1Y\xee\xd8\xb6l\xe2\x0bC\x99\xd2C%C\xad\x98[\xfbv\xeb`g\xd9Q%\xbc\x80\xc6{\xcc\xee]vv\xf8\xa8\xda\xd1C8\xc0\xd8\x06\x16\xa8\xb7\x95Jk\xb6\xa9\xaa\x9e\x99\x84\xbaL\xa1\x1dV&Z\x12[eW\xcd\x83\xa30Z\x7f\x0e\xfb\xb3j\x1cAT\x95\x95*\x06x\xb6=\x0f<\xbf\xc0\x80\xf1\xc9\xad\xd1\xf0\x93N=]\xd0\xed\xcb\xb2\x10\xc8\xe0\xf0K\x894\xcdd\x92\xa4\xdej\x95 \xd0%\xdde\x9c\fNN\x8e\xaf\xbd\xf6\xcak\xd7\xef\xdc9\xb9|\xe7\xf8\xf4`|:\x19\xae&\xd9H!\xfd\xd0\xd2\xdb\x95\xc2\xdfC\xd65\x94\x12\x81\rc\x8f\x94\xbc/\x83\nC\xbe\xb0\x06\x82T\x15\x02\x9b\xd9z$\x9b\x8f1\xe8RO\x83\xb2{\xea\x87\x90\xa4\x9b:j\xcb9\xa8g\x1f\x05\xd9\xc3\xf7-3\x1e\x83!\x02\x16\xb9\xd2\x87\x18\xf0i5|(X\n\xc0g\x97J\x8f\x94\x8b\xd3L\x109(QI-Y\x92\x89o\xc6\xdb\x90\x0f\xae\f 9\x0b\xe1\xd6s+\xc8c\x04\xa1\x8c\xf6\x89!\xa0]9\x82\xec\xce1\f\xb6\xafc0=\x84\xee\xd6>\xec\x1e\ry\x7fV\x8a\x0fp\xf2:f\xf3\xa3}\xc8\xe2\x1c\x1fo\x01\x8d9\xa6]\x03BsIuy\x87\xcex\x02\xd5`hu}\x98D\xc8\f7\xd3\x1bDK(\xa9/U\xcaj`\xd9\xc8\xfa\xc9-B\f{\xa0\xc9\x97\x92\xbd\x02}\x9b\xa5\x03\xcf1q\xdcDT&\xc3w*\x91\xd2\xbcVV$\xb08+\xed\xe2\xce\x1e\xf7\xc1\xfc\xa1\x80\x1eUE\x0f\xa8t\xb6\x8b\xa0\x95A<\xc9\xec\x85\x8d\xd7\xd6\xee\x1e\x94\x9e\x1c@\xa1\xa6\xcc_\xe8\tH\x10Q]\xfb\xc4(H\xd5\xc8\f\xb4\xa9\x12\x80\x9d\x9bT\xd5l#\xc9\xff\xc9\xd6\xca~\xa6\xfa\x83.\xec\xec\xec\xc0\xee\xfe>\xec\xe1\xd7\xe1\xe1\x11\xec\xed\xed\xc1\x90\xb6\x14\f\x07\xd0\xebv\xb9\xcf\xd9\xa8\xeeZA\x17\xb1^\xb3T\xd3\x06\xef\xb8J\x1c\xcb\r\xf3\x92|\xba\xe9:\xb2\xe2\n\xb3\xe1\xc1\xdc\x06\x933\xc7\x99F@5\xffT}\xfe\x19\x9c\x94\xe9?Q(h\xcfF\tG\x96nV\xdb\xd4\x0e\xf1\xeab)\x91?\x8e\xd2\x01\xac\x96\x91\xb6h*4N\x1ci\xfag\xa21\xca\xad\x06\x8f\xa1\x11`\x88\x0b\x1bnu\xd3?\xfb\x06\r\x7f\x1f\0\xd7[\xe0?S\xb6\xb1\xf3\x17\x14\x1c0\x10H\xe57 U\r$k\xd1\x88$h\xd0\x13<\x07\x14l\x19\x07\xd6}\xc2*\xe9z3\x1bF\x17\xaa\xbb\xffkSY\x8f){\xc5\x82\xaa\x0f\x98\xcdFM\t\xcb\0\x078=-ae\xb3.p2\xf8)U7k\x8d+\x81n9\x84\xb8\xbd\xbb\xe6\xf6z\xcdE\xa4\x9a\xf7\xd0\x8d\xfc\xdfz;\xaa\x1adU\xad\x864F\xc5\x945S\x13\xbf\xd4\xd5\xb1V~\x90Q\x14\xc6a\xe8\xcf\xb6\xb7\x06w\xaf^>x\xf1]\xcf<\ry\x9e\tZ\x1cxvv\x02w\xef\xdc\x16\xe7\xa7\xc7\xde\xe9\xe9\x89\x7fvz\xba5\x9b\xdf\xbd\x91\xc4\xc9\xf5<\/\x8e0\xeb\xfd\xb8\xd2b\xa8\x858\xc4(q\x05\xdf\x8c\x87\x11\xc3\x0e\x91\xad\xedJ\xafsI\xc9\xceaN\xdd*EB\x7f\xf2f\xe2\x01\xd8\x92%hY\xfer\xd8\x7f\xdf{\xaa\xcf-\xbd\xf7\x81Y3\xc5\x16G\xbe\xa8\x9c\x17\xec\\\x8e\x051\x8f$\xca\xb6\xccCw$\xe98\xf4\xa8\xd4\xe6\x01\xbe\x06\x88\xcf\x0f\xe1\xe4\xc5%\x8b`xF\xe8`\x0f\x9f\xb6\x03\x83\xbdG\x11\f;H`\x128\xbf}\x0e^\x90\x83\x8f\x87\xd4\xed\x19\x8f\xbd\xed\xc3+0=9a\xd6\xc2C\xc0\xdal}\xae\x02\x119\xef\xf3\xfb\xc3\xca\xd2\xb2~/\x8c\xf8\xc1\xe3r\x1c/\xa4\xe4\xf6\x99d\xaf\xbdz\xdf\x1b\xb7\x94\x14+Ce\xb7\xd9\x11F%\xbet\xe5\xc1\xfc\xc4\xe3\xddW\x83\x91\xe62*\x81T\x14\x9a\x8d%\x05\x05\xf64\x86\xd9]\x1a\xfa\xddA\xb65\x82^a\x02r\xa7\xab\xa17\b!\xee\xf7\xa0X-\x8c\xe0\x86\x92"\xaa\\\xe8|G\x17\xe9\x94\x06\x90\xc1\x06\xff\xf65\x91\x1b\xc0\xd5M[\xa5*]w\xa3\x88wc\x8d\xb6Fppp\0\xbb\b\x84\xbb\bP\x04R#dQ4\x0ea$C\xb6\xbfC\xc7\x88\xe7lF\xee\xfd\xe2\xc2&\xbc\x1a|d%l\x90V4!\xa5e"\xae\b\xc2\xe3\xbf\xcb\xb5J\x85\xcb\x94* \x92\xf6\x1cW\xe0\xcb\xa5\xdfj-\x88=\x90jD\xa5\xf2\x05\xa4\x7fK\xa9\x1c\x93[\xd9\x02\xb7\x0bvQ\xce\xfc\xa6\xe2Axe\x12\xb3\xd6B[m\xe6\xeelW\x8b7d{\xed\x9e[UL\x94\xd0\f1\xd7\xd6Q\xd0\xb00\x01b\xad\x05"\xef;\xf0\xba\x0f{\\kl\x85q\xc3u\xbb\xb0\xca>%\x1c\x03^p\xb7\x8e\x98\x0bu}\xf5\xb1\xf3O\xb0L\xa5\xb4\x96@M\x1d\x12.\xd4\xafk?3bM\xda\fQj\xa7\xc4h?Rm0\xb1\x170l0\xfdT\xca-9\x96\x1b$\xf9\xba\xfe\xa0U\xc0\xd5*e\x82\x01+\xf6\xd5+\x95)\xf1\xa8\xea\xab4\x96Yu_,\xe7\xc1h*c\x91\x87\x1ce\xf8\x14\x94\xa9_\xa6x\x91\xa1\t\xd0\xf4E\xf6O\xe6\xeff\xc1a\x91\xe7\x9a\xbc\xf1\x8c\xc4\x18\xf4\xd6\xf6\x8e\xea\xf6\xba\xf9\xc1\xc1~\x8c\x80vg1\x9f~|\x85\x812^\xcdE\x1c/u\x96\xa6"\xcf\x12\xbfTE\x88\xc7\x11)\xb2\xf6\xceu\x07ID\x0f\x8f\xad\x8f/\xa7\xa7xrX\x92\xe6~&\xbd\xf0\x04\x92t\xea\x97\x1fH\x84\xbb3\xcd\xcc\x03\xf3\x19\x95\x8e1\xb6\xb67\xa2\xf2`\x91\x9ar\xa1t\xc0k9Yb\xf0\xf7\xe1\xf0\xb2\x07\x87\x0f\xefb\x90?\x81x\xb12`1\xa2\xa5^\x18\xdc\xcf\xa6\xc6t\xd6Cf\xb5*0\xb0d\x18\xa4s\xbc\xe643%Z\xe92\xda\xdb5\xe7\x83\x96]\xf2\xb9\x15\f^@\xf3M6+&g\x7f3\xab%yX\x98\x19\xbf6\xf6Q\xecu\xc8^z\x18\xb8\x02<\xef\xc2\x88Z\xf8\xf5\x95v\x17W\xe0qU\x81D1T\xa3%=I<\r\x80\xdc\x97\x96\'\x95 \t\x8f3S\x10"S%-\x05\t^\xca4\x83\xc5\n\x01}\xd2G&\xe7\xb1X\x92\'\x14\x16\to\x86fA\x0eE`\xba\xc6H@\xa3g\xbbx}\xdc.K\xc9\x16"\x82)\xa2\xd4\x15\x9b\xf1xks\0a\x18B\x07A\x8a\0\xbc\xd7\x1f {\x1a\xe1\xd7\x16\xfe\xdcG`\xecBH\x8e)\x9e\x01\xf0\xc9d\f\x93\xe9\x94\xcbb\x9e\x05\x10\xfa\x9bW\r3K\x13\xb4=\x07\\\\\xb1\x83+Lp\x95s\x9c\bZ\xf0t\xfbSlG\x05\xcd\xfd\\p\xa9\x9e\xbb\xdd\xdf\xf2\xb8\xc7M\xef)\x89:\x18@D\xc3\xda\xccc\bg\xa5\x9f\xac\xc1Q;\xe1B8\xafEV%\xd3\xfauH\xa77\xe6\xec\xea\xb3?{-\x05\xa3h\x12Z)\xd6\xe6J\x1b\x99\xbe\xb2sz\xa2.oV\x13b\xfa\x9eU\xa3\x07\xc0\xf5Vb\\\xd2.\x8eT\x8d\0T\xd7\xccF\xd4\xcdom\x1a`\x0e\x91r*\xcbZ\xd4\x03\xa5\xe0fK\xaaq\xc4\xf4l6\xa4X\x15\x06\xada?W\xb5X\xb9h\xd4\xfeu\xb5o\x9dZ\x03\x95\xc6\x9dC9\xab\x93\xeb\fW\xb7]:\x1av\xb5\xe6T\x0f\xcd\x10u\xc9`S\x9a\x80H\x92`\xfa"@*\xcc\xef\xc9\xdd\x9bVId9\r\xabf\xfc3\x81\x0f\xdb\x03\xe1\xcf9\x7f\x99\xdf\x17\xf5wj\xe2\x17\xbc{\xa9\xfa]^\xd8\xdf\xf1\xdf2\xbeOa\xefC\xe0\xc7\xb7\xc92\x9e\x01\xe3\xbf\x11\xc0\x95\x85\x01Efp,%\xc7\x97\xa3\xa8\xe3D\xeb\x16\x97\xac\xb8\xe3\xa2\xa1`\xcf\xc3:K\xae\xa5\xc9\xf8BC\n\xe4+c\xd6j\x15\xf3\xc5\x02\x03\xb14\x84\x84\xd4\xfe$\xc6&\x17\x11\xaf\x12\xb2\x17,\xfe\xa3M\xf0,2\xe1\x86=\xfe\x82\x1c@\xceoy\xd0\xefm\xb1b\x91\xd7\xc5S\x0f\x89\xee\x80\x80\x04\xbd.\x14wiQ&\x05w\x9f\x05\x1a\x05\x82ZF;\xac\x84\x11\x91p\x16.C\x043\xa3v\xb3\xaf\x8b\x9d\'\x80{x\x82\xafM\xd3~\xd0f\xa6O\x98R5\xb3\xb4j\x0e\x8c@!\x94P\xf8\xd6g\xd024r\xd4\xa0\t`\xea\t\x064\xbe\xe0\xb1\x0e\x13|2\x9f%S\xe5\xb8\x84l\x9e[y\x9b\xb1v"\x83\xe3(\xf2x\x9e\x8a\0T\x0f|\xde\b\x9c\xcd\xcdVf\x1a\x0e\xcf\xe3\x15\xbfW>\xd2\xd5jl\xc2\x8f\x97pi\xef\x12\xdeO\xa6\xa5Mj\xd8\xddE\x95\xedl\x9e\xcb\xd8\x94\xe8\xa4\x98\x84\xe0\xf3\xa7K\x98NNx\xe3\0\xa9y}\xcf\xe7r&\x9d3bb\xd4\x1f\xf4\xed\xbf\x19\xb0|\x9f\xc1\x8fn\xc7\xbf\xc7/ZuC\xaby\x82\xc0\0)}7\xf7\xf1\xf8\x8b\xaf\x05OZ\0p\xd4~\x92]\xdek&V\r\x01{\x15H\xd8\xbfA\r@\xb2\xf5U\xb11\x8fW\xb1x\xf6\xdfe\xc3\xecd\x05\xa8`\x9e\x1f?\xfb\xbc\xf5E4ry\xfe\x88{\x16\x8c\xed\xf3\tG\xb1hz\x83\xb2\x19p^7\xebv%\xf8\x0e+s[\x11\xee|\x99\x01/\xc9\xd5\x85\xbaQ \x9c\x1e\x9a#\xa7\x7f\0\\o\xf1R\xa1\xd0\xc61\xc1}#\xeb\x02\x99v\x99P{iIU.\xe3 \xe89\x14\xde\xf6\x96\xa4\'j\xe7\x01\xb0\xa57\xa1]\x96\xe3\x1a\xfb\n;\x92\xa1,P\x14\x86\xe58\x80\xd5\x94\xdb\x94\xb33\xac\x1a\xa0\x86:\xb3j\xc0I9\x82\x8f\xe6\xf9\xcc\x1e\xa1\x82\xc1\xc8,,,+\xd6\xd3\x80\x8e\x05\x96\x8c\x95\x85\xe4\x82\x9d\xf2w\x03X\xe6wE\rL\xe6+w\xeeO%\xa9\x1cA\xa9\xb4,\x8b\x81\x8a\x18\x15\xff\\Z .\x18 \xb5ue\xd0\xaal\x014}\xd8\xa8\x11\x1fBT\xab\x1e\x9b~\x81l\xf5\x05\xdc\x92N\x95\x19\x9blX\xd6\x19\xb0\xcc\x12X\x04\xdeO\x8c\x13\xf8;\xcc\xb0\x98(hX\x95\xc6\x90\xa1\xe8\xf2~Dd\x02\x04r\x9a\xd9\x18\xcdmQe\x8e\x14\xd4\x19Y\x13\x91\x04\x9c\xb76\x93\xb1\xf0\x1c\xee|\xa5\xe0\x05\x85\n_\x9b\xe4M\xc0\xb9ak\xb4\x1e\x83\xe6\xd8\xca\x04\xcfY\b\x95b\xcdd\xbb\x9eu\x02\xd7u\xd9Fz\x9e\xedw\x96&\xf8H3I*\xad\0\xc5\x16)\xed\xde-\x1bl\x18\xf8\xccP4\x05xZ\x8aI\x0e\x1d\xec\xb3Hf[\bd\x92\xd4\x8f\xd9\x92\xed\xb4\xa8\xf7\xc4\xc0@\xb7\xa9wx\x15\xa6yW;\xb4\x18%-\xb3\x84~\xc8_D;\xb3\xf9\xc2^\xdfVp"\xadz\x90\xaeU|\xfe\x9d\xc5\x14vo<\xb9*i\xcd\x89-\x1d\xf3{i\xc1\xabJ\xc8\xaa\xeb\xce\x055\xadt]N\xcf\x95Il\xea\xf7X\x8a\xe6}tKv\x1c\xd0=\xfe2`g\xc0*\xa8~f0\x0bXX\xe1[ s\xbf\x18\x1c+@\xa3\xeb\x85@\xc6\xaf@\xce\xab\x81\xa7fu5\xd3#\xab)\xc9\xbb\xe9H\xc1W%\x92D<\xe9\xcb|\xc6u\xdd\x93\x14\x9e\xa8\x1f\xcb\xaf\x81\xd4*\xff\x98a\xc9\x06\xb0\x84\xb1\xc3\xaa\x8e\xc1\xb3\xa5=w\x0e\xab\xbe\x9e\xedq\xd7-\x86\x8a=\xd9c\xdfT\xea\xab\x95\xb2B[6\xd80-W\xbcuq\t\xe5\x03\xe0z\xeb\xbd O\xd4\0\xe5\xaa\xf9\xaa\x99\b\xd3\x88u\xea\x82Vyd\x14\xf2\x02\x1a\x17\x0bh\0\n\x9a\x15ZU\xb8U\xf6\xbe&F\x0b\xa8\x95\xf7\xbaaB\xe6o\xe6"\'\x0b%S\x9e\xd3\xf5\x07\x9fKuZ\xb5\xfc\f\x01\xb43\xd7\xa5[\xa0U18\x06\x8f\n\xa8\x98A\x15\r\xe3\xb1,(\xb3\f*cP2 \x95\xa5\xf6;\x06\xfc\xea\xef\x85eK\\\xf2\xcb\x1b\xc0*\xca\xac\x0eH\xfc\xf7:8\xad\x97\x1e\xa1\xce\x82\xc1\xca\xda\xdbrJg\xcf\x90l7\xa5\xab`&+\x99\xb1\x13\xc4\xdc\xac\xb3)\xf1\xac\x81\x19\x9e\xbb\xa5(\xfe`\xb2\xc0@\xdd5\xb3z\xec\xdc\x1e#YB\x80\xca\x032\xea\xd0\x90Df\xe91aK\x9e\x19\xc7sE\x8a\xb2%2\xb6<\x81\x0e5\x84\xfc\x80\x03z\x8c\xe0E\x03\xab$\x93\x0f\x98\xb6!\0\xe2\xf3\xe7\xb4\x16\x84\xd6\xc9\x10h\xa8\xb8N0\xcc\\\x8d\xaeK\xcf\x96W\x1bf\x85\xc7k\xd8\xbf2I\x870\xcb"\xcd\xf0\xb4\xe0\x12\xa0k\xec,xo\x96u\xe7\xd0\x01oZf\xab$i\xc0\xc7\xe7R\'\xbe\x80\xc5\x18\x8fc\xc5\xf3U\x1d\xdaJ,\x8d|\x9a\x81\x8b\x18"\x89\x05\xf8\xbd)\x99Q\xf2\xf5C\xef\x0f)\x0bm\xefM4\x9a;\xa3f\xa3\xe3*\xedL\x1a\x82\xf6\xfe\xe2\xfc\xd5\xe1\xce\xe1\xac\xa8\x82y\xcb\xf3S\xb5*\n\x8d7\xa7-7\xdb\xeb\xb2\x06\xb2\xf5\xe5\x8bk\xfb\xe8\xeay(m\x92G\xbc\x92\xf9\xb3AIU\xc2 \xee\xb5\x12\x18\xdf\xb24fb\x81el\xf4=\xb0@V\xb19fq\x16\\,\xc8\xf0\xfd\xe9\x8b\x94+\xad\x91\x14i\xcb\x9f\xb2~lf\x83\x96\x15z5\xa0\xfa-\xb0\xf2\xed\xf3T\xd7i\xed\x84Q3:\xd1\xb2\x8f\xaaJ\x9e\xb2\x12\x8d\bYo(\xae\x14\x89\x9b\\\xe3+\x05\xa3XK\xc6\xddd\xb7\x91\xd4\xafm\xf0\x12p\xd1\xb1\xe3\x01p\xbd\xc5\x18\x97h\xfa\xd9u\xa3\x12\xaa\xa9\x19Q\xfb\rj\xedV\b\xdd\xbe\x94\xa8\x01\xca|\xbeD-\xa3\xad$\xae\xa0\xdd\x1e\x96-\xe9\x81\x0bz\xb2\x062#\xaah\x16V*\xad\xeb\x84\xa8.\r*]\xcf\x94U}\xa9\xb2,[\x81\x80\xc0\x83\0\x85YMY\xd4\xe5\xb7\x9c\x81\xa6p\xcazM\xd9\xcf0\xaa\x94\xd7\xc2\xe7\x96i1\x90q\xc9.o\x80+\xaf\x98SnJVNV\xdd\xf4\xbdt\x0b\xa4\x9bf\xb3\xab\xb2lE\x82\xb6\xd7\xa2\x10u?\xc0eX\xee\xcc\x8c\xdbs\xa8\xcb\x82Nv\xde|\x88\x85-\xd9\b\xd8J\xa7\x93\xce\xd9mX]\xb9n\xdd=\xb4=\xcf\xc0\xeb7\xcaX@j\x87\xcfi\x90\x94\xd7\x90p\t\xaf4kL\xf0\xcbc\xab\x9e\xb2\x1e\x10\x073\x8b\r!\x95\xe2<+\xa3\xa7^\x92F\xb0\x98\x8dA\x86\x03\xb3\xf9\xd7\x0b\x1a\xffJ\xb2,\x12\xba\xd9\x92\xeb:{\xd7\xb2\xbfj\xb8\xd8\xb3\xcd\xfe\xc2\xaaF}k\xce\\\r1S\xbfk\xc9n\x1e\x82<\xb9\xa8\xd8\xc8J;\xcd\xc3\xc2\xfa\xfc.\x88\xd5\x82\x87\x86\x0bi\xcb\x03\xc6\x12\xc3\xb0-6\xd1\xb5jQ\xabd\xd5\xa3\xc8(\x1a\xad\xdc\xbd\xd97\xe0,B$\xa6N\xe4\xf2\xf8\x16Dw^\xffp\xaa\xe5D\x95\xea\xc2\xb8G\x1d\r\xab\xeb\x81\x1bI\x06`%C\xac\xe2\x92}\xe5}\xd9\b\xa3.n\xfa\xaew\xcf\xb5\xb6\xf9\xb6\x15q\xb2\x12"8\xa5@\xdezMg\x94F\n\xca\xb2\xfe\x1c\xb3\xe7\xba\x07\xb6\xc4\xe8\xd7%\xc6\xba\xbc\xe85eK\xea\xcd1\x8b\xb3?S5\x80J\x94\xf4s\x8b\xcd\xd5`\xe9\xdb\xeb\xb1\x92\xc5{5\xc3\x93\x8e\xb5R\x05D\xd5\xb5\xdbZF\xec*%\xd7*\r\xd21\xea\xbd\xb0\x1d\xc9\x95\xbfW\xf3\xa6\xb0y@K;+P\xea\xe7z\0\\o\xfd\x17\xb4\xbe_X\xb6\xb4t-\x81`\xa3\xd8s\x93\x17\xd1\xbe\x89\x86\x86\xc5ig\xe5\x88X{ \xbd\xf6\xa0\xd5}Ti\xd9X-\x0f\x81\x06]-\xb0U\x95\xa7\xaa\x8dV\x81\x19\x7f\x95\xa6\xc4\xd8\xb0\xab\x92\xc1\x8a\xb7\xbd2\x88\x19P\xca\xd3\x8a]\xe5\xfc\x9d\xcb\x81\xc8\xb2r\xfe9\xaf\xc1+\xb7`e\xfaO\xa5\xd3\x9b*\x9clYYa\x86y\x0e\xdb\x8fj\t9\x8c\xf8\xa0\xedB\xe2\xaey\xa9\x14\x94.H\xd7\x8b\x14A\xb5\x1b\xd0-\t\xaf\xac\x9b\xd1\xdc\xc4w\x1a\xe8uy\xc5|\x89\xb0\xccV\xfd\x97>\x07\xf3\xc3\xeb\xe6}\x96\xf6q\xe8\xf9J\x03P<\x10A\xce\x18\xcal\xe1%f!\x94a\x17\xec\xf9g]\xd4\xd9A\xdd\x82\x9c\xb6\xb7\xa7\xc0X$\t\x0f\'\x0fv{\xf0\xd8~\t\xe3\xe9R\xcc\xe6\xcb0M\x82\xedR\x8b\x88\xbc\x8b0\xe8\xbcH\xbd\x1evr\xa8\xac\xa1\x84\x07\xcd@q3\xf6P9P\xd4\x97O\x91;=MS\xf2#\xd7\x0b2\xd0%\xe0\xe2p,\xad\x98\bYZyv\fpz\x07\xe0\xf0\n\x03\x17\xed4\xa3\xa6\x9e\xe4\xd9\xb3\xd2)\x13*\x03\xd2T\x85\xa0\xa5\x9d\xb4\xdd\xba\xf5I0\x8f\xa9\xac`\x87\xce\r\x95\t\xf7^z\x0e\xbc"\xffw\xb9\xef\'\x95\x1a\xd3\r\x8a\x17\xae\xfb5\xa7\x98M\xeb8\x04\xb4\x17*\x8a\x16X\xc9\xd6\xdfd]r\xf3\x9c\x9e\x950\xff\xf6\fX\x98\x1e\x99\xac\x19\x14\x95\x05\xb9\xb4hK\x89A\xcd\xbe\xaa\xbfY\xf0\xe12\xa3\x01\xab\xa0\x02\xae\xaa\xb7f\x99\x9bW\x97\xe7\xa4\x15\x8dTC\xc0\xb2%\xa4h\x89.*\xd6$\xc0Ykb\xfbi\xc2\x94\x87A\xb6\xc9\x8fp$\xef\xad\x99Nh\xbb\xcd\xb7\xc4\x87kj\xc5\xf5\xf9fp\x96R\xb6I\xd7\x03\xe0zk3\xae\xaf\xf3w\xdd\xf2!t\xd4\x88kom\xbb\xfbeAI\xc0\xda\xc7~\x1d\xb2\xac\xe9\xa5s\x81iq\xf1\xa0\xd6\x81\xd5-m\xea:\xc6\x89\x9a\xfd)\xed\xb5\xaao6\xc6\xf0w*=r\x8f\xab\xb0_\xac\x06Tk,\xcc\x82\x1c\xab\xffr\x81\xbf\xd3\x85\x15U\x94\xb6\xffF\x7f\xcf-x\xd5\xe5\xc3\xd2\x80\x1a\xff\xbd\xac\xca\x91E\xfd7\xa3 4\xc0V=NS\xc6\\S+\xf2\xef\x9d\xb2\x12\xfd\xec\x8c\x01\xd4=\x14\xa5\xeb\xfdd\xcd\x92\xce\xf6;\xe3\xacl\xd0\x9e*\xa6\xf2\xd3\x1f\xf9)\xf1\xd4\x07~\xaa\xec\x8fl\xb9\xc66\t\xc8M\x9e{>%\x03\x11\xfdl\xfao\x06\xbcL6Q\xf5\xe4T\xf3\xc6\xb1\xc2\xaf0\xcaIz\xfe\xc9)H\xb5\x021\xe8\xfd\x87\x0f_\xf2\x7f\xf3\x06>v\x92\xe4\xd9rY\x1cO&9Lg)\x02Y\x19\xc5\xab|\xa0\x14"\x8bdQ\xc1]\xc9\r\xd7\xea\x8ap\xc3\xbdq\x11oh\x7f\xe3y\xc8\xeb\xeeiJ\x9b\xdc\xe0\x8b\xd0\xf4\xbb\x84)\xea1\xf3\xd3\xf8\xbbl\x06\xf9K/@\xb0\xb3\x87\xc7W\x80\x87\xbf\xa3)8moW\xf5]\x85\xb5\x13\xd1\xc3\x8eq\xa9/\xca\xd6\x15]\xf5@\x8c\x98\xa7\xa4\xc2$\xf4&\'\xf0\xc8\xf8\x8d_\xf4\xf6\x0f>\x0f<\xd4[\x95\xb4\x9a\x02T\xcb\'O\xc0\x06F,\xdf\xf4\xcb\xde\x06\xf1H\xeaZ\xf4\xe0\xcb\x9a}{\x16\x98j\xb6T\xa9\f-H5,\xc7\xf4\x93\f0\x05\xfc\xdd\xb3=\xa6Z\xc8\xe1(\x14k\xf5\xa2\x05\xa6\xea1=+\x96\xf0\x1cA\x07\xd4K\x18\xdd\x99,\xb0\xc3\xd7m\xb7\x8c:\xe1\xaa\xf5\\\x8e\xe0B\xac\xcb\xe2\x1b\br\x97@\xd6\xcf\xb3\xbem}\x8d|\x89u`\x13\xdf\x98\0c}\xa1\xee\x03\xe0\xfac\xf6\xdf\x85\xfa\xef7p\x8fu\xd0\xa9\xcb\xc6k\xf9g\xbd\xe5\xa0\xfe}[K\xaf\x9b\xb0\xd5\xca_\xb9\x03\xb2\xe1\x02\xd4k \xd7\xea\xb5\xd5\f\xcd\xc8\xad\xd9\x01\xbbI\xec\xd9\xfeH\xa9\xe6\xcb\xfc\x8e\xd9\x9b.U=p\xcc\xdf\x9b\xb2\xa4\xaa\x05$\x06\f\x8bV\xcf\xc2\xc8\xdf\xf3\xb6@\xc3\x80a]b,\x95\xed\x97U\xe5MG\xa1\xe8\xf6\xd3\xf2\xa2aw\xd5\xe3\x19&XX \xac\xfaj\xca\xaa#\x95#\npz+J\xaf\x82\x93\x9b\x9f\xe8}\xf9\xe3\xb0\xf8\x0f>dV\x800S\xd3\x16\xb4\n\x87mU\x88o\xbf\xea\xc6\xa4\xa1\xba\f\x90\xd6u\xa5b\x9b%\xb2\xd5\xf2\xf4\x84KL\x89\xd2\xdf\xf6\xc6\xdd\xe3\xdf\x1c\x86f\x16\x8b\xac\x83.]\xf2\xe1\xf2e_\x17\x85\xce\x16\xcb\xe0|>\xcba2I\xe5b\xa9\xfaI\xaa\x07JK\xc4\x1dq\x8b\xf6\x99\xd52n\xeek4\xe9Oe\x05V\x01\bs\xa02\xe7\xafj\xce\xb0,\xcd.-Z\xfd\x02~\x1f\x8a\xd7^\x05y\xed!\x10G\x97\xa0L\xf0\xf7\x91u"\xa9\xd9\x9d9_\\\xef\x8c\x88m\x15\xf58\x98A\xb6jX\xd8\xce\x11\x82y\xcf\xdf{\xf6\xca\xf3\x0f\x1f\xec\x7f\xb8\xf4\xc3i\xd3_\xf4\x1a\x81\f\x07}QW\x7f\x85l\x14t\xad\xfe\xa34\xe0#=\xd9\x02\xb3\xfa1\x84\xd0\xf5\xef\xbdF1\xea\xd5\xbdL\xb7\xc7\xd9\x06\xc6u\xe5\xa0+\xd8Ygw\xd2\x19@6\xa2\'{\x1b\xef\x1e`+\xaa^\xd3\xc5a\xfe6\x03j@\\8=&\xb1\xd6\x9b2\x8c\xab\r2\x1a\xf4\x9a\x98\xd9I\x81\x1b|\xb4\x15\x04h\x1a\x1e\xeb\xf3aN\xe0\x11kqc=\x0b\x17o\xb6\x9d\xfd\x01p\xdd\xbf\xff\xe9\x0b\xb0\xe5\x82`\xdb\xa4\xa5\xea\xab)\xe7\xf2_g}\xce\xdc<\xdf\xde\xdb\xf8|\x17\xd9\x99\xfbpZ4#\xd2\xd5\xb6\x94J1Ym\x91W\x95\xcaQ\x9b\x1e\x9f\x91K6\xcfV\x91\r\xb7\xfd\xa0tS\xb2\xac\xcb|\xcad\xfcv\x18\xb9\x96\xdc\xbb\x80W\xcb\xbf\xeb\xefV\x92_8,\xad\x06#\xcb\xc4\xa8\xeci\x01\x8b\x01\xd0~7\xfd6v\xe9\xa0\xfb\xea\xaa\xc7W\x81\x9f\xf9\x99\x1f\xaf\xd4Y\xf2G\x97\xcf_\xfc\xe5\x8fM\x9e\xfe\xcb\xaa7\xac\x04|\xcc\xa6\x04\x05\x7fZ\xa0\t\x06\x14\xb8tV\x9aM\xc8u\x16\xd0\xda\xc1f\xe6\xf3\xa8\x17\xc6lsr\xcevO\xaa\x17\x81J\xd4_x}\x19\xfe\xf4\xb5\xe4x\xe5Y\xa3]\x1e&\xb6\xd9}\x07A\xa2\x7f)\x80\xa3\xa3\x10qO\xaf\x96\xcb|5\x9f##\x9b\xe6\xfer\x99t\xd3L\xf7\x94b[\xf4[\x9e\x1d\x92\xa5\xc7(\xc9\xaa\xcb\xf6\xa5\xb4\xed\x85q\x0fN\xd9\xe7\xb03^fI%\xfe/\x88\0\xe2\x14\xb2/}\x1e\xc4\x10A\xac\xd3\xe5>\x9dd\xab\f\xabL\xe3\x1e\x1a\xbe\x8eAd\x81Z\xb7\xe6\r\xb5U\x9dU\xea\xd6\x15\x9e\x8f\x0f\xe4\x13\xf8\xf6Q\xf8\xdf\x95\xbb\x8f}\x0e\x83x\xe9\ncj\xa1\xc1:\bI\xcfQ\xed\xc9\x96Q\xad\x01\x18\xaf\x06\x033c%\x1a;"\'\xe0\xbb #\x85\xbcPz|\xb35\xf7\xeb"\x86\x8b\xb7\x876\xc8\xb9\xc3\xc7\xeb@S\xfbD\x1a&\xd8>\x8e6\x1a\xd4\xfd\xcd\r\xfd\'#.\xb2\0$\x1c\xfb)h\xf2Y7\x068\x0fP\xd7~\x84\x95\x17K\xc7\x1b\xd1\xd5\x9c\xb9\xd1H8\xd6\xf0\xd2&\'\xfa\x02C\xbe\x8f\b\xc8\xfd8\x9c\xf6V\x01\xba\xaa,\xa9A\xdc\x93\xc3\xe9\r\xb5k]\xf7\xdd\x9a\x8bO\xaf\x8b\xf5\xa0\xf2a\x84Z\xd6_\x81V\xd5+\xab\x9d<\xd6\xee\xeb\xb6 \x94\x9dY3\0\xd6\xf6S\xac,\xa8\xaa\xcfD\x05hJ\xb9\xa0\xd6\x9e#\xab\xbe\xd7%?\x80\x1a\xc4jEb%\x97\x07\xa8\xff]\xd6Rk\xbb\x82\xc6\xfd^6J\xca\x9a\x91U\x8c\xc8\x94*C\x91&\x7f\xea\xdf\x8a\xed\xdf\xfc7\xd1!\xf4C\xdf\xb2\x9a\x86a1\xe3\xd2\xa6\xb7ej\xac\x85eYf\x8f\x16\xf7\xc3\xec\xea\x99\x92\xca\xa6dF\x9c$P\xbc\xf4"\xe8\xe9\xd8<\x960\x03\xc3\xc3"\xf9\x1b[\xf9\xf2\xc3\x9d|u2H\xa7E\xa7\\\x992\x9f\xedi\b)\xeb\xfeKe\x90\x8a\xd8\x0b\xf12\x87\xf14\x81\xe9,\xf3\x16\x8b\xa2\x93g%m^,D4\x98\xc3h\x17\xc4`\x88y\x85g\x98b\xb2\x84"\xe8\x81\x18]5\xfd:\xde\xbfR\xd8\xe1wZy\x1f\x03\xed\xf7\xf4.\x1dB\xf0\xf8\xd3\xec\xb5\x18\x85\xa6GS\x17\xad\x86\x01\xe8AhZjP\x8d(\xd8\x94\xcaY`\xba@6\xf6N/\x87\xbf\xd4\xcf\x7f4\xf0\xe4\xff\x85H4se\xd8\xf5\xfc\x91\x15E4\0\xe1\0U\rl\xeb\xc2\n\xd9rB\x17\x8d\x83\xf0=\xfb^\xb0\x06\x02U_\xf3\xc2Z\x91\xfao\xa2f\xae\xeb\x7f\xdf(\xf6\x90\xe2\x9e\xca\xbdZ\xbd\'\xc4\x86\xd4QZa\x86\xb8\xb0\xe4\xb5m\x07U\x13\xeb\x8di\xab\x14\x8d\xa7\xa1\xb3\xf4\xbc\x1e\xa0\xde\b4B\xb7\f{\xb5\x86\r\xad\r\xed\x94./\x12\xac\xbe\xf7\0\xb8\x1e\xfcw\x0f\xa0\xba(\xd2\xd0\xadN\x98\x86\xcd\xfd\xaev\t\xf2\x1eL\x0b\x9cAh\xb7v\xad\xdb\xc0T\x81K\xcb\xed\x03\\\x81\x84\xcd\xf3\xb4\x91q\xb7\x1f_\xdb\xf2#\xd4c\x02\x02\x1apT\xb5B\xac\x02\xad\xf6\xf3\xb7\xc0\xac\x06N\xcb\xd4\xdc\r\xd0\xae\xf1i\xe5m\xa7L\xdf\xcb\0i\xe3\xfeQ\xbb\x95h#Tq\r\x91\xedX\x81@\x16\xb5\x9dg\xd9\x0f\xfd\xe2\x99\xfa\xa5O \x1e\xf41\x88\x9b\x12\x91)\xbbA\xd5\xd3\xb2\xe2\x8c\xaaTX\x03\xa9\xf5zT\xb6\x1c\x9a&9\xe4\xb7n\x82"\x11Da\x87y\xc9\x01"\xea\x82\xa2u/\x9eYM\x12"\xc0m-\xcf\xfe\xca\x95\xc5\xcd_\xdeF\xc6\x92\x97\x86\xb1i\'(\xfb\x8e4\x9bU\x87$\xf8H\x138^Jx\t\xae\xffPy\xf8\xd8\xaf\x8a~\xdf\x9c\x17\x16\x8b\xd0@1m\xfe\xcd\xa0\x88\x13\xb6l\xf2\x92\x92E\x19*\x9b\x93\xd9:\xfb9\xc9\xad.\x1eA\x0eb{\x1f\xe4\xb5G\xc1\x1f\f\fx\x11\xf8\xf5\x10\xb4\xb6#{\x9e\x1du\x9fV\xb5h\x86:^+\x04\xad\xf7F\x1a~l?\xf8\xc9~\xe0\xffC-\xbd\xf3\xaa\xf7\xb4&\x84Ysx\x80\x1a\xcc\x9a\x9dUM\x04\xae\x07f[\x12\xeff+\xb8\xbb\x01X\xac\x19\xc7\xeauf\xe5H\xc1k \xaa%\xe6o\xce\xcc.\xf4\xa9\xe0\xder\xf3ML\xcd\xa5H\xe6\x90\xbd\x1a\xa0\xc1\xf9,\xb8,K\xba\xbd\xa7\x8a-I\xdd6\xd4\xd6M=\xd0![\xed\x9fES\x9fi\xb13\tk3\xa8\xbaQg\x82n\x8c~\xd72\xe5\x9ex\0\\\x0f\xfesX\xd1\xda\xe5}\xcf\x12\xdf\x9b\xfdN\xdc\x03\xc8*\xe0\xd0k\xe0U\x97\n\xb4\xfbo\xdb3S\x17\xd5\xaf\xeb\xee\x1e\x8d\xf3\xb4\xd3\xb8\xad\xac\xb2\xc0\x99K\x03\xbd\xa1\xc1\xab\xeblQ9\xea\xc8J9Y\x1fW\xf5\xa1Vk\xbe\x885\xc0\xaa\x96\xbf\xa3R\x95hC\xb7\xc1V\xe9\xda\xcf\xae\xf9\xb7-]VB\x0f\x85|G\xab\x83e^\xfe\xd8\xcf\xdd\x89\x7f\xe6s\xa9\x86\x01-\x13\x04\xd3\xeb\x12U\x7fKW\xbd2\x03F\xbcd\xb0\x1aE\xb0B\x93,\xcd\x11$N\xa1<\xb9\xc3\xe0\xc1*Hm\xb6\xf0\x9a\xddn\b\nd\x88H\x0e\x1a\xf83m\xfb\xf5\xf1q\xae\x8co\xbe\xfd\xd1\xe5\x1b\xcf\xeb"\x854\xb7\xee \xee\x06l\x1b\xfc||\xb0q\xf7\x9a\xb8\xb3\xff>\x95uwL\x1f-\xcf\xccs\xd1\xb1\x96\x05\xdb9\xd1bN\x85\x8c)#\xd3\x8dU\n\xead\x06\xea\xec\fT2!q!x\xdb\xbb {\x1d\x93\xa5w\xfa \xf6.\xe1\xbf\x11\xcc\xb6\x06\x10\xec\x0f\xd81\xc2l4h\xcfP\x11\xb0\xa6\xf8ZC<\xe6\x0f\x8d|\xf8\xf3{\xdd\xdf\n=\xf9\xd7J\xe9\xbd\x80\xa0\xa7k\x15\xa7\xc3\xb4\xdc2^\x8bA\x014\xbd%+\xfdfIz#\xa0\xa9Y\x91\xa8d\xe3\xb0yKC\xc5\xe8Z"\x04w\x8dHu;\xc7\x06\xaa\x15\xcc\xdc\x8d\xc5\xd6\x02\xaa!E\x0e\x13\x12\x17%\\\xadY\xa9\r\xec\xcf]\xc6\xe0\x9a\xe5\xba\fG\xd4\xce\xff\x17\x1f\xbb*\x1b\xbaK\x90\x1dA\xad\xd3fh+4k?U\xa8\x97.\x9b\xdd\x82\xb0a\x07\x17\xbc\xb9X\xa3\xfb\0\xb8\x1e\xfc\xe7\xf6\xbd\xf4\x85\xfe\x96\xae\xe5\xf5\xfa\x82>\xf1\xde\xe5\xc1\x8d\xe5B\xb5\xd6\x1d\xabf\xcb\x9c\x1biGZ\xcd\x8b&\x1d\x01\xc7zy\xb1]\xd2\xabJ\x8a\xc2\x19\x80v\xc0X\x8b\x8dL\xaf\x19\xd0vm\xaeD\xb5\xfa\xac\xe5`o\xee\xa7Z\x8fW\xb9\xeaW \x04\xaa\x19f\xae\xa4\xf4M\xdf\xac\xf1V\xe42\x9e.\x1d\xd6\xe5n\x985\x19s \xc4A\\\xe8\xbf\xf2\xe17&?\xfd\x91\xf3\x057\xfe\xa3j\xc6\x89\x99\x90\xaaK\x87\xba\xfa\x9d\xb2\x0e\x10\b6Y\xae!D\x10\xf1\xd2\x05,g\x13fF\xd2>\x8f\xc4\xbf\xf9\xe4 N\xf2\x1br\\\xf0=c\xa0\x8c\xbf\x0b\x90\x01\xd1\xde\xa7\xd1\xf4\xec\xef\xbf\'=\xfe\xf1\xa0\xcc F@\xaam\xb1\b\x98H\x86\x8f`\xf4z\xe7\xd1\xd1\xf9\xd1\xfb\xa6\x9dQ\x8f\x99\x18\xf7\xf9\xd2\x15\x03\x18\x8b2\xc8\xad\x83\xd6\x91t\x03P{}\xeeo\t<\x0e\x95\'\xec\x0e\xafJ\xb2\xb7\xcfy\x0fW\x97|\x141(&\xab%<\x8a\x91\xe9\xbd\x97|\xf8B4\x82;A\x0f\x12\x192;\x13\xb6\xdc\xcb3]\xf8\xba{B\xc1\x93\x91\x80\xef\xda\xee\xc0\xdb\x87\x9d\xe7J\xcf\xfbo\xf1u|\x14_\xca\xaa\xb2$\xf2\xaa\x19\xa4\xda\xa3\xcf\x9d\xb3\x93M\x19\xcc\xaa\xec\xc0\xf1\xde\x93nY\xb0%\x15o\x98Z\xf5\xbe\xb9\x9f\x9dM=\xa7\x96,\xdc\t\xe8R\x8a\x8b\x85wgvS\xc8{\xac\0\xb9\x07\xeb\xbaWY\xb1\xf9\x1d8\xa5m\xf3\x01\xabd\xfbB\xac\xd7K,\x10\n\xd7h\x1b\\!\'Tf*\xad\xa6\x97\xdb\xf7\xbeWcJ\xb4Ak]\xfa\xbe\xbe{K8"\x8e\xe8A\x8f\xeb\xfe\x04!\xf1\xa6\0\xd5\x16W4\xb9\x91^\xab2\xdf\xfb~\xebe\xc07\x03\xb2\xf5\xd2\x9b{\x8b\xf6Z\x14qa\xdf\x90\xd2\xed\x85\xa7\x9b\xb7+7`\xd5\xec\x1b\x13Mo\xaez\\g)\xe7\x05\xf3\x83\x1a\xd0\x1cP\x12\xee\xdcVs\x1f#\xea\x80z(V\xa96\xdb\xd2\xaa\xfa\xbd\xc3\xbe\xeea\x12\xacT{\xc8\xb2\x1al\xae\xd6\x9f#\xb8\x1c\xf9B\xfc\xc0\xef\xde\x9d\xfe\xd2\xaf\xde<\x86W\x96+\x92;X[\xdb\xca\xcc\xb8\xb0\xc2\x90\x92\xd7\fF\xc8\x9cb\x15\x81W\xa60\x88\x14\x14\xd9\x02\xe6\xe7c(V\xb1\x018\x8c2AI\x06\x1d\x11\xff\xcc\xe3\x01e\xb3\xe7\x8d\x9f\x97<\xee\xf0Y\xb6\x16\xf3\xef\xfc\xce~\xf1\xd1\x90d\xf3Y^+&\x89\x89}i\xd1\xed\xbd\xd8yr\xd9\xdf\x19\xc1\xd6\xd1\x01\xf4\x915\x91\xdb|\xb6\x9a\x83\xcab\x16\x8e\xa4x\xbcI\x1cC\xb1\x8f\xa0E\xce\x15\x04b\xe4\x86\x9b\xa7\b<\xf8E\xe3\x0e%2-/\x82~\xbf\xcf;\xc1\x16\xe3s\xf8`o\x02\xef\xdd\xc2\xb3\xe6\x85z\xe1\x05\xf2\xae\x8c\xe0L\x86"\x95>3\x97.\x02\xf8%_\xc2c\x1do|\xa9\x13\xcc}\xdf\xff\x98\x96\xde?\xf3|\xff\x0f\xf0\xe7i#!w\fbY\xe9\xe7\xda5U\xcb\t\xad\xeb\x89\xd78\x9f\xb8\x0e\xedP\xaf\xe2p\xd7l\xb8\xf7\xbd7X\xc0\x86\xde\x17l\x10(U\xa6\xb7 \xc4=f\xa0Z\xb4\xa7\xb5\xac\xd1\x95\xf8_8\x96\r\xbd+!.~\xfe\x1a\xe7\x14;\xf8\xee\nN\x1c\xffl\xd1\xc6\xb46ks\x1b\t\x1b\x9e\xcb]Y\xb2y!\xe4f;\'\x9bK\xb4\x9e#\xbc\x8f\xe2\xf5\x03U\xe1\xbdzI\x1b\xa0Jo\0\xb9u\xf1\xc4\x9b\xf5\xa8\xea\xfd?_\x07\xac\\\xd0j[\xe3\xb8\xb7\xd1\xad\'\xb9\xd0+\x93.\xeb\x12\x17\x9e\xc9UHU\xe6\xc3\xb5\x98D;\xe5N\xe7i\\\x105U>\xd1~>h\x04!lgU\r\xd5*\xb7\x9f\xe5\xaeQ\xb1=\xaa\x1a\xb8TS\xf6\xe4R\xa0j\f\x87\xabO\x7fmR\xdbH\xb5/\xacm\x90\xe2X\t\xf9k\xdf\xfb\xd0\xa5/|\xe0\xd2\xde;>}:\xfe\xc7\x9f>9\x87\xd7\xe6+\x18\xa7\xc6\xb71\xc4\xa0\xbc\xd7\xed\xc0\xd5^\x07\xde\xb3;\xe2\xa5\x8f?\xf3\xc2\x18\x19\xca\n?\x154\x9c\x1d\x83$;%\xde\xb0Y\x98e\x8f\xf4<A\x07\xfa\xc3\x01\x1f\x13+ \x11\x98V\xf3\x05\x02\x1d9\x92\x90\x11\xae\x82;\xc2\xffo\xfe`\x9e\xbd\xf0}G\x837h\xf5\t\xa9\x1fi/\xd6K\x93\x02\xbe\xa6\x86K\x12P\xc8N\x07FG\x97\x911mA<;\xe7\xc1\xe3\x8c\x165R&\x1f\xe2\xf3"\x1b\xa3>\x95\xc8\n\xfb\xde(.\x11\x05\bB\x11~j\x939\x82\x1d\x89V\x04\tN<\xe8\xcb\x02v\xb2\x89:\x9e\xc9\xdf\xf4\xfd\xe0\x93Q\xe0\x8fn\x04~\xf6d\x10|\xc5\xf3\x83O\x072x#\x94\xe15\xdf\x0b0\xb3\tF\xcbT\xc5\xb2(n!P\x9d\xf9\xa5\x9fxecb\xdb|\x95\xfc]U\xd2q\xe5\x8a\x18<\xe3\xe5\xc7,\xdb$KU\0oJvU\x7f\xb4\xda\x1e\xcc\xaf\xa2.\x89\x89\r})W\xedH\xa5\xdb\x96E\xd2\x06\x10\xab\\\xd1k\xd0tV\x02\xb8*>\xb1&\bq\xb6c\xd5e@\rnY\xae\x02\xddv=\xa5\x1e%\x90\xed\xcd\xc5\xba\xca\xd8D\xe5\xe4\xdejq\xb5A\xcc\xf9\xf86\x18\xb8\t \x9d\x07\xd0v|\xc1\x11`\xb8\x81En\x04\xc3M\x9f\xfc\x07\xc0u_\xfd\'\x1c\x88R\xdf\xc0-\xd5\x06\x90[g[\n6P\xf67\x11^\x80\xdb\x1fR\x8dYok\x0eL\xb7\xa6@\xeau\x1d\xb5\xed\x94v\x01\xa4m\xc8\xbb\xa9Gf[P5\xc0iW\x8d\xa8\x9b\xb9\xdc\xf5l\xb1\xde\xc4R\x9d\xb3ZPa]3j\xe9|\x05T\x8e=V\xcd\x9c\x1a\xd3a\xe5\xfa\xe0\xa9\xe65V\xfd\nc\xe7_w\xe8M\xf6\x0e\x8d\xca\xad\x11\x04\xd4\xebh\xc7+\xad>\x15\x85\xfes\x1f\xbav\xf4\x7f\xe2\x97J\x8b2Yfy\x9a\xabRy\xf8\\\x11}\xe0\x95\x11c\xcc\xd2T\xef\r$\x9cy}d8s\x04\xa8\0\xa2m\x04\xb4$E6\x14\x1bQ\x03\x06\xf0\x14_GPj\b\xd9\xd5Br\xe90 \xa9\xba4\xa2\x0bbq\x81\xef\x7f\xdfW\x17\xea\xb7\x1f\x1a/\xde\xf9\xae\x83\x91N\x901\xc5i\x0e\x9f9\x83\x1f\xd2\x11\xaddf\xcbr\b\x10\x98\xc2\x8eD\x10\x12\xec\xd0A\xdbx3d[\x8a\x96E\x8fz\x8e(\xc6z\x1d\xe6\x99\xe9\x91!\xa0Ft\x9e\x97\x05\x0f\xee\xe6I\x01\xd7\xe2s\x10\xfe\xfct\xa5\xa2\x9f\x0b\x82\xe2\xe3y\xe1\x87I\xe6+?\xc8c\x04\xae\x14\x19\x95\n\x82\xec,\b\x02\x89\fK\xf8f%\t\xfe\xdd\xd74\xbc+\xd7\fc+\xf7\x88j`\xb7\xf2\xff\xab\xe6\xae<O\xe1\xb9\xb3=\xb0\x0b^\x93\x8dMS\xadD\xacJ\x95\xe4.b\xff\xe6Y\xdb\xa6jf\xa9U\x19\x10\xedyK]7\x99\xf4\x85\x0f\x9e\xb6sJ\xd2\xae\fm\\i\xaakC\xd7\xfb\xf9\xa05\x7f\xe5\x94\xf1\\\xce&\x1aEm\x95\x9a\x9ak^;\xae\x19\xed\x92\x9dv\x04K\r\x90\xaeE\x8d\xda\x10\xb7\x96Y8\xd6s\xba\x95\xb8V\xc7]UO]\xffT\xed\xacl\xaaM\x0f\xecs\xca\xb5\xde\x96\x82\xcd\x80\xf6\0\xb8\xfe\x18\x97\x05\xdd\xf5\xdek|d\xad\0x\x11l\xc4\xd7\x11^\x18G:\xc7\x8c\xe1M\x18X\xbd\xe0\xb2\x058\x0e\x93\xd3\x8d\xb5K%\x9cP\xba\xf9t\xb4.\xd4V\x7f\xab\xcd\xd6\xaa\xc7u\xcb~\xae\xac\xb6R\xfb)\x17\xd8\xac\xc9C\xad4T\xee\x1a\x16\xd7\xf2I8\x98\xa9\x9b\xde\x96\xa3\x1a\xd4\xce\x1cX\xe5\xa0\xe1.\xefT-\xc5\xa1\xa8\x1b\x0b\xba\xb5\x10M\xd4\xbd\x01-E\xdd\xa8\xaf\x8e\x9f\xe4\xf1\x8eL\xa6\xc0\f\x7f\x91\x8brQ\xbd\xd8\xd0\xaeJ\xa1\xdb\xad2\xd3{\x12y\n/\xaer\x18#\x0b\nCdV\xc8\xcc\xfc\xe1\x16ti\x95I\x96\xc2\xe4\xee\x1d\xc8\xc8\xb5\x17\x03v\x81\xc1z\x95\x92\xa3\x06\x9eG\xeaa%1?\xff\xde\xf5\xab\xb4Z\x1en\xbf\xf2:d\xb3\x18\xc1+|\xc7\'\xef\x9e\xfc\xd5\x1b\xc3\xce/\f;\x01|\xee\x8d\x99<\/\xfc\xbf\xd5\x19\x99\xed\xced\xc3u~\xe7\x0e\xc8+\x97@\x10h\xd0J\x91 Bp\xcc\xa0\x1c\xd2w\xdf\xd4`\xc9\xe8\x17\x8f8\f\xf1\xfc\xe21\xaad\xc5`\x1f\xf6{PBbD&\xf9\n\x0e\xd3\xdb\x90\x94\xd9s\x88\x0b_\xc1\xbf\xcf|dc\xbe\xaf\xc1\xc3\xef\x15s\xf2\xfd\x8c\xc1*\b\x8c\xc9,\xdb\x1c\x15A\xed:\xe1\xf3\xc0\xb0\xb3>\xc4s\x87\x8e\x0b\x0bPV)\xe9\x1b\xf3\xd97s\xcd\xf0\xdc54\xf6~\xbcn\xa8Z\xaci\x95\x88m\x85\xe0\xff\xcb\xde\xb5\xc4Xv]\xd5\xbd\xcf\xbd\xf7\xbd\xaa\xae\xea\x8f\xbf\xe9(q\x14#\b\x10\t$$\xa4 $\x18 1e\x80\x18"e\xc2\0\x84\x02\xc3\x88\x11b\xc2\x80!\n\x13\x10R`\x92\f\x91\x10\x8a\x90\x180\xc1\x06A\x84\x80\b0\x9f\xc4\xb1Blw\xb7\xdd\xd5\xf5\x7f\x9f{\x0e\xe7\xb7\xcf\xd9\xe7\xde\xf7\xca\x1e:\xe5\xb5\xacru\xd5\xfb\xd6}\xf7\x9eu\xf6\xdek\xaf]7,\xf1~.\x93[\xf8\xd9\xdaYJ\xd1\x91\x047\x1c\xb7\x9c\xd6\xf2d\xb0d\xddm\xc9\x86\xa9\x10\x01\xbb\x89P\x82g\xbbL\xa3e\xf1\xae\xce\xe1\xb2*U\x98\xd2\xaa\xdcDR\xd3\xb4\x1d5\xbd\x9b\x8a\xc0x\xc7z\xc2u\xb3\x19<B\xb5J\xb0\x95\xe9\xf3l1\xc9\x03\xcek\x83\xf8-]\xc3\xfb\x8f\x03A\xd1,\x12r\xea\xa4oO3\xabR\x7fBn\xbc\xa3\x86uSt\x95\xcf\xf1\xf6\xe7\x9d\xd1\x9d\xf4]\xb5\xf52\xe7*\xd3\xc8\xb8q\xd7\xe4\xf0]\xbc\xa0l\xed\x9f\xcdB\x0e\xb7\xf3\xf5\x9ahK)\t\xab\x83}\xab\x8cld\xedb.<Q\xffi\xef\xc1R\xa3R\xbbN\xab\xeaT-A\xb5s\xc8T9:R}-\xeaW\xf5WQ\'\x12\xab\xdfq~M\x9a\xcd)\x93\x9dm\xadWp\xf9,mq\xd4_\x97\x11.\xc3\xb8\xed\xde\x1c;\xda\x1e\x1f\xd1\x82=q\xac\x0fhy\xb0\xa0\xe3\xfb\xf7"a\x04\xb7\xc3\xf7\xdfy\x9c\xdeC\x18u\xd2\xe5\x96\x81\xbe\x8f#1ll\x88\xde\x92\x1b\x0e\xfcg5\xf8\xdb\xaf\xa9\xf3du\xfa\x8c\xbe\xf4\xad\xb7\xdf\xfd\x93\x9f\xfa\xf4\xc3\xf1\x8dG\xa7\xbf\xdc\x1f=\xfc<\x87a\x8dC\x1f\xed\xa4\xae\xce\xcf\xe9\xfa\xfc"\x8d\xed\b\x06\xaf\x9e5\xd7G\x07\xfe},\xcb\xb1O\x11\xd6\x82^~\xf8<m\xcfN\xe8\xfd\xb7\xde\x8au\xaf\x90j\\\xf8\x1b\xcf\xde\xdb\xd0\xcb\x17\xef\xd0={\xb1Y\xdb\xc5\xeb\xddv\xfb^\xb5\x10c\xe9\x80M\'Q\x18X\x19F\xd1\xc4\x19^a^\x99\xa3\xcd\x18Hm\x93\xe7b\xa5\xaf\xe8\x8cn=\xa9X\xff:\xa3)\x83\x0fkD\xd6\xc5\xfa\x9e\xd9n\x1b\xa7\xf3\x12\x91\xed\x18I\xc3\xba\x91\x99\x93\xa0a\xb45\rX\x1f\x976&q#\x93?\xc1x\x1f\xc7ijpTx\xe6\x111\x93\xdaV\x11OD21%\xc2\xe7\xbc\x01bjE\x17Z\xaa?\x93\xc8\xab\x8b\x87\xd5\x80\xabHx*#`\xba\xb4\xe9b\xb7\xa7\xb6VR\x91<[;\x8c\xd8s\x99\xb6\x14\xd0F\x94\\\x1b\x96g\xf6QM\x12\xa2Q\x1e\x12\xdd^\xd2\xfaXD\\vO\xb2O\xf6\xe4\xd5\x9ci\xdec5\xaa\xec3\xdf \xb6\x98\xd5\xb6x\xc7\x0e\xcaM\xfc\b\xf3\x19]$\xe6\xec&\x06\x87\x9aD\xb2\x9b\xbd\xa9\xd2\xde\xc6\xfa\xc9\xb5>\x86\xc5\xebpO4XRqj\xc1\xb7:\xd5\xe8\xa8\xe9\xe3j\xc9j:\xc8\xb2FT\xdb\xd1*?\xc2v\xb0fz\r["\xae\x9a\xd9\xe7\xb6\xa1@\xfc\xf3XG\xc4U\f\xa0\x17\xa8]\xe4X\xccj\'c3X\xd2\xacJ\x0e\x1fM\x83]t\xbf\xb7\xef\xf0\xc2\x93\xcd2\xb9l\x1c\x1cF\x0b\xa5\xfe\xe8\x90\x8e\x1f\xdc\xa1\x17\x03\xc9\xf9\xd7\xb9\xbe\xf6\xd1\x99\x8fH\x860\xb8\xef\xdcG?+\xe3In\x13U\x8a\xcf\xde?!>\xbb\x8a$\xb18\\\x06\x0fw\x1f\xb5\x1d\x7f\xfe\xcd\xa7\xdf\xff\xc2=C\xaf\x9d\\^\x7fix\x10Hk\xa0;w\x0fb\x84s\xcf?\xf7b\xd9Gw\xf8q1F\x02\x0b\xbdYq\x9c\x89\xb3E\x1dw\xff\xc5\xe7\xe8\xe1\xab\xaf\xd0\xc5\x93%\x9d\xbf\xff4\xd5J|\x84\x16\x1d\xd0\xdf}\x97>\xbby\x1c\\3\x9eX6\xff\xe4\x98/\xc7R\x84\xb4M\x0b\x82s\x89\0\xd2M6\x12nPG\x96\xc6\xf2\x1c\xf9\x86\x88N\x0fm\xe4bp\xeb#\xb8\xde\xdffS\x14\x17\x89-6e\xdb\x18=\xc5\x05\\\x9c\xfe\xc5\xc30Dmc\xd7X;\x95H+,\xe6\xd9\x19$\xbe\x9f\\G\x93\x88\xcc\xe4\x06\xe64\x176]\xab\xc1\f_\x16h+\x11Q$\xabd\xac,\xc6\xb6\xce\xb5\xe9\x7f\xed5(\xd7}9\xd7s]\xca\xa8\x9e1\x9d7,Y\x8f\x92\xba\x93\xfe0-\xcc\xe0\xd6\x06._\xbcl\xda\x8c\x88\x99U\xcf\xa9N\xbc\x99\xed\xba\'\x06\xc7n\xd2[\xa6\xd4\x96Nm\x96\xf9\x96\x93\xd6\xad$.7\x91T8\x95\x14$\xda!\xa1U\xaeq\x1fT\xff\x9aFJv_\xaa\xd0\xdd\xf0|\xaa\xf8\xdc\xf4cY\xcdp9\xc5\xa8F\x88\xc4\xbbl\xdd^\x11\x87\x9d\x890R!<\xf6\x9e\xaa\x94\xc8T%\xa8\xd3\x93Vw-\x93\x9e\xbaL\xa5\x018\x91\xa3mT~1\xfdhk\xf4\xa6\tN\x88\\R\x85m\xb5\xba\xd6!\x9c\x84\xa9\x85;w\xccU\x93i\xd0DE"?\xea\x85Y\xa2\xb9\xd9\x8e\xc1\xaa\x94l:X\x1c\xad\x9d\x9c8\x86\xb8\xcb\xd8\x18\x15\xc6\xd9\x0e\xc4\x9b\x81\xc60\x8a9<\x97_x\x9e\xfb\xe4\x8b>"\xea\xe8\xdc\x13\x93Knwd\x1f\x9d\xd2\xe5\x93\x91\xd6\x83\x8f&\xc6!\xbe\xd1\xa5\xff\xf7\x9d\x17\xeeG;\xa9g\x8f\x9e\x92\xbd8\xa7\x93\xd5\xe6\xef\xfe\xf5\x8d\xff\xf4d\xf8J\xdc\x9c\x84\x9a\xd4\xd1\xbd%\x1dy\xf2:\xba\x7f\x94&\x1d\x87\x89\xc3\x9d\'\x87;=\x990\xb1\xf9b\x93H\'\x06x\x9e\x9c\xfccV\x97\x97tyvA} \xd7\xe4aD[\xbf\xda=4gt\x8fWnc\xfa\x7f\xf77\xfc\x9b\xe3\x90\xd3\xeb\xa3\xd5\xd2(Do\xd3\xc2n\x8d\x8b\x91V\xd9\x1cde\xa9\x89d\x9eMF\xb2\xfdX\x88\xc6B\xfd\xaf\f[\x94\xba\xa4\xf3d\x9dI\xab36\xd5\xc3\xa8\x8b\x9f\xaf\x89"\f\x99\f\xdcE")CD\x03!\xd9D\\\xa3\xae\x85\x89\xcbH\x88"\xf3\xf0D\xc7bo\x14\x06<\xba\xd8?\x17\x12\x86&\xccZ#\xa5\n\x14\xb2\x8c\'\xa5(\x17m\xb5\xa9J\x15\x9f\x1a\x81\xe7\bktV\xf5a\xa5\xbe3\xa9msNG\x16\xb5\x9e\xb2UKwnS~\x91\xbc499\x1d\xf2\xf0\xa4n\x95\xa3\xe8B:9\xeb\xb3OU\x91\x1f\xab\xba\x04\xd4u\x9f-\xa7&\xfe\x84NE`\x86v\xbb\xca\x83\xb8>\xc2"\x8b\x89V\'/\xe4nf\xbft\x13\xf9\xf1\x8e\xa8\xedfi|\xeb\xf9G\x93\xdd\x92\x96\xaf3\xcdkL\x8d\xf1\xe9\x84\x04\xddD\x8e\xae\xdf\xa0l&\xedD\x1eO.\xcd+r\x93\xf7b\xcb\xd0K-Y\xe7&UY\xc8\xc7\xa5\xd4j\xadAU\x02(\xe4\xe7\xaaa\xafUC\x03e\xe3\xe0dg\x1c\x88\x81\xb8%L9PN\xbb\xef\xb3\xfa\x9c\xdaQ)\xd5]C\xc9\xe6%e\xeaj\xc4g\x8b\x10D\x9c"\xea3\x8am\x8f\x1c\xa3\x18YlS-%.\xfa>\x9a\t\x82\x8d\x8b\xf3K\xbf\0\x8ft|g\xa0\xe5\x9de\x1c\xaf\x1dj\x0e\xe1\xd8\xad\x8e\xaf\xa9;\xe9\x92\xc5R\\\x98m\\\xc4\x02\xc9\xf4\xcb\x81\xae\x0f\x17t\xd5\xf7\xb4\xf5\x11\xda\xa3\'\x8f\xa8\xff\xcc+\xf1\xc5\xc2b\xbf\x18\x82\xf1E\x1f{\xb6\xd6\xc1\x071\x10\xfff$w\xec) \xb8\xbdw\xd5\xc2(|\xbf>;\xa3G\xd7Wq\xbc\n\x87\xc6\xe7 tti(\xea\x1d\xe3#\xbf0\x02\xb9\xeb^\x0f\x1e\x881b\x88S}S\x1asT\xf34\xc2\xc5>J\xdd\xd0\xbf_\xe3\x12\x11Eu`\xae\x19F\xfb\xab\xbcY\xe9\xb2\xa7e\x8a\xd0SZ\xb6Kt\x92\x1f\x1b\xa2U\x13\t\xa9\xd3\xb3\xa9\\\x9a7f\xf3x{\x19\f*\x9fW\xad\x87u\xe5\xb5\xc3y\x1a?\x07\'#\xeb\x03\xb6I\0\x12\xde\xab6\xc1\r\xff\x85ZY,\x98\x99<\xfb,7\x89\xab\r\x9f-\xcaER\x8aB%\xc3\x98\xa4\fi*\x06\x11\x15\xab\xf8\xfe\xb9\xaa\x800\xaa\xe6*\xfd\x8b\r\x83\x107&\xb8\xb3\x12\x82\xba\xc6GG\x13s^*\xea\xc5y\x93\xf5\x84\xc4T6x\x12\x8c\xdd\xb0.\x82\xb8~ "\xaf\xfa3\xefL\xf9\xdd\xd4{E9\x05=\x95\xb0Wb\xe1l\xe8\xba\xa3\xa6\xe4\xe6\xb61\xe4\xda\xb9^M=\xc2M";\xd7\x9a\xfb2\xeb\xfe+\x9d\xd2\xab\x03\x1dI\xb9fX\x8945i\xd9Lf\xd6M.R7\xf3\x1d,iB\x97H\xbf8\xa8\xcb\xef\xb2Z\xd0\xaa>\xac\xfaz\xdc\xa4Y\x9bK(\x16\xa6M\x9e\xc4+\xa9\x1d\xd7FJ\x99\x88,\xc9N?\xcf%+\x93w\xa9U0fR\x13\'y\x99\xc8+\xae\xf2uQp4\xaf\xc3{2\xb1\x9b\x94r\f\xbb\xe7n\x88\xbf\x0bu\xabgO\xcf\xe9\xea\x94\xca\xf8v9\xb8\xa1R\x14\x16\xcd>\x88*\x02Yd\xf2\xba\xbe\xb8\x8a\x8bz\x90\xc7s\xb0x\nj\x8fh|\xbb\xcd\x0e\x1c[\x1a\xfdmWg\x97\xfe\xf1+\nSP\xe2\xa4\xe4\x10=\xf8(\x8c\xaf=\xf9yR\x0b5&i\xfe\r\x7f\x7fhb\x16\xd6\xad=o6\x99\bwf\xed\t\xed\x9b\xdc\xf5W\x89\x95Mb\xe7\xe0\xf2\x11^;.\xee\xa1\xc7\x8cKz8\xa4\f\xa3\xb3\x86v\xbd\b\xb1G\xa9}\xda|N\x8ci\x82w\xa01v%\r\x9d\xea\xaf5*\xb6\xd1\xd08Q\x9bL3\xb6R\x80\x8cs\xca\xba|n\x99\x1cEpN-\xc6\x19\xda\xf1\x18Zk\xabAov\xa1\xd7u\xd5(\xcd\x17\xe3\xdfx\xce\x98x\xac[5 \xe7r\x9e+\x8d\xd0%%\x9d\xc5A\xcd\xa4`\xf1\x97\xdc\xe5\xe8\xe1Z\xa3\xdaT\xa7\x9b\n\xbc\xb4b0GG\xbc\xdb\xdcV\bP\x8e\\\xd3\x97\xe5Z\x7f\xc3F\xfd\xc87o\xd4g\x93\x93xZKC\xaa\xf0\x07*\xf2\xd2&\xb7\xad\b\x95g)>\xf7A\xc4\xa7\xc4n4\xabU\xcdUDS\xd7\ngg\x19\x84\xb2\x88\x14\xc7\r.\x83z\x15\xa1\xa8>\x13\xa7\xb6SZ!\xa8\xeab\xc2\xb2\x8d\x9fa\x11\x96\xb8\xe6\xd8X\xed\'8\xfd"W\xa22Mp\xa3D:\xe4&\x92y\xd7:\x14\x14\x7f9\xde}\x1c\xe5\x02\xceQ\x85\xf6\x1el\x0fd*\x86\xa7\xfa^\xaa\xd1\xc4\x05[\n\xefV\xea36\x93X:&%\xf2rN\xf9\x1e\xdaf\xec\xbc\xbc\xc4\xe8\xbf\xee\xc7\xf1!\xc7\xe4\x06S\x96\x82\xf0\\\xebuh\xf6\xddD\xc7\x89d\x1f5\xe6\x88eL\xa9\xb7!\xd8?\x99lke\xa3Y\xef6\x93LP\xe3\x85\x9a\x18\xb9l\xe3\x94W\x90\xf5U\x98H\xed\xf2\xd4\xe0\xec_xoIvkbm+\xd4\xbf\x8c\xab\xfe|ic\x90\x9c>\x82\xfb\x86\x93\xc9\xc6\xfe9\x0f\xed\x9al\xbfxB}\xff\x16E\xc7\xf9DR\xb68\xb2gIz\xf8\xde\xf7E)XfV\xa9\x91\xf1\xf1\x9c`W\xae\x11\xce\xe9\xc4\xd9I^\xc46y\x13\x12\xb9\xb2\xcb=T\xa6\xccCs\x92\xae\x8ew\x0eyH\x13{\xb9L!\x0b*\xe4()\xbf\xd8\x0ffR\xafE\x10-I\xea\xd0d\x0b\xa7Tb\xea\x1a%i\x1dFI\x12re{\xc61\x1d\x07\x96\xf4cu\x9e\xd7.\x1d\xf3A\x98\xad\0\x82\x8b*1\x91q\xaamQ\xadM\xcb\xbd\xf2\xe9jn\bq\xcc\x0e9\x7f:~\xaa\xa9yJz\x93\x1ay\xf9\xb5\x99\xd7\xf2yOi\x03\xc4\xf5\x91\x8f\xb4\xdc\x0e\xa1\x85\xda\x1d\xeepj\xdf\xe9\xd6\xee\xe6\xe9j\xde\xb1\xa3i\xeb0j\x17\xc6\x93\xe8\x8b\xd3x\x03Mh\x9c\xe3\x8dvq\xe0\xe6\xc2\xd1\x05YfE\x14\x8d\xf3\xbbR%\xe6\x94[QLY%E\'\x9aD6m*\xae\x11_\xe4\xa2uYw\xe4?\xe9c\x91\xdd;\xa5<\x85\xe3\xd6zJ\\\xd2i\xa2\xf8+\xdb\x87\xb2\xcbO\x8b#G\x95\xa4\x8d\xd2py\xd1m\x8eb,\'\xd2\x89\x8b\x8e\xcb\x8bq\x8c\x1cm\\\x9c\x8c\xa8\x0e9[:\x91\xd43\x12\xa1p\xa7\x9a\xa0s\xc4)n\xf3a\xd1\\\xfb\x07\xdf\xa5u\xd7\xf3\xdd\xd1\xf6K2\x93Bf\x14\x94l\xeb\x1c\xaf\xf2z\x8bd\xbd\x14V\x90\xf0>\xd2\x02\x99\xa2\xa2@\x10\xc4Rc\x19S\xc4\x95\x8f\xd7v\xed\x89\xb0\xb7q\x01\x8e\xf4\x10"\x89\xe0\xc8\x11~\xaf\xd2M\xc5m\x84l\x1es\xb2m\x041\xc3\xe6\x9a\x0e\xc6\x15\xf9\x10\xedm\xd3\x0f\'&\xcb\xd9\xf5<\xac\x90v\xec\xe4\xe7\xbe/\x83\x16E\xa2\xde3\x17IzZ\xd0\xabK\x86\x14_\xa4Fi\xe4\xfc\xc8.\x19\xb6LY\x96D|\x17\xd5\xfbL\xb5N\xd5x\x0e1\x97\x88\xa8\xdd\xe8\xc9\xd4\xea\xbc\xcd\x89\x91\xfd\x18\xa3\xab.Gp\xe1\xcb\xe6\x8d\x91lnD~\x1f\xc9\xc4\xe4&\xe7r\tp#\xb5\x93\xf4\xa4\xcb*A\xfd]\xc8+\xfd\xed\x1di_C\xda\x95~S\xa1V\x12\xd0\xa8\x8d\xa5\x8d\xfc\xbc3\xca)\xf5\'\xd3\xcc\xaaLF\xd7\xc65\x12\x7fgi\xe2\x8b\x98\xc5\xa17\xbao\xdc\xee\xf4\xe0-\x8f\xb8X\x892\xf8\x86{\xf0\xcdiF\xde\xdf\xab\xc5\xba\xc3>\xd5\x85\xe7\x8a\xc1Y\xf4\xc5m\xfd\xab\xcc\xbc\x9a7r\xe8\x93z\x1ay\x95\x1a\xb1Dg\x8ef\xe3\xba]c\x01\xa5\x07\xfb\xbaf\xacD\xf4\xecs5\x9a\x91\xb9\\c~\x1c;V\x02\f\x97\x1f\xaf\x1c\fb\x9a\xb4^I:\xca\xe3\xacF+&\xc1N\'\xe6\x88\xa6\xdd\x9e\x91\nKM*\xfdA]\x9e\xe9\x94R\x80\xae\xf6\x87eW\x05Qc\x05\xc2\x8b\xb5\x901pA\xf8\x1ed\xdc)\xd5g\xdd\xb6\x0e\xc1\xcc\x7fo\x8c\xec\xe2\xdb7\xf1\xb1+\xff\xfb\xbb\xdbK\xfb\xa0;\xa3\xf7}\xb43do\xc3B\xe4\xd9/\x91\xb2\xab|\xf9<L\xde"ms\xed\xcfV\xef\xc3\x12\x99\xc4a\x96y\x12s\x88?b*s\x13\x85\fa\xdeH\xfc8\x0e\x0e\xfd{\t\r\xc6\x9b"\x18\xa8\x99I\xe9m\xcb\x11W^AG\x7f\xec\xef]=\xa3%\xfb3hX\xbe\xc1}\x7f\x1ee\xf5\x9d\x8c\xacO\x11\xd5\xd0wu\xd0c\x1f\x9a~\xbb\x94\x9c5\xd5\xf3\xcf\by\xa9\xcf\xc5\xa81!\xe5\xb3\xcc\xe9g\xce\xbb:\x93{5\x9a\xb9m\xae\xf6RqGm4D\xd4X>\xc99)\xcdXr\x0e\x8b\xb8\x82\xd5\x98\x92\xa8(\xccW\x9dQm\x12\x92^\f\r\x87\xecd\xee\xb3\xc4z\xb9A:\xffdt*Po\xe0\xb2P$]\xa36\xa6 \xcbu&s\xc4Lu\x9b\xe1I.!\x92\x8cQ\xd1\x13S\xb3\x9d\xacQ\x1b\xd7\xdcO\x99\x92\xec\xd4(\x18%gw\xbb\xc5a\xcdL.\xb5/\xe0=\xeb\xdcm\xa5\xb1[\x19q\x19\xda=\x0b\x8bi\xee0Ht\x83\xfd\x12\xedk\x1a\xe66\xc5x\x83g\x94\x9b\xe6\xc9\x8a\xb6>]H\x96\x1dM2\x90j\xe6\x9f\xdb\xbf\x97\xcaB\f9\xf9\x9b\xce\xfaI\x8a\xaf\xe4\xf9\x8b\x9a\xb1Z)\xc9\x85l%\xc2\xcc\xe3\xc3\x8d\xa4\xd8\x94\xdbE\x91\xa4k\xaf6\xc7\xd5\xc9\xa2\xd3#+\xa8\x98\xf7\xb2De\xf9\xf3\x90l\x8e\xb8\xd1G\xb1\x05\xe9\xe6cW*\xcf"\x85\x0f\x91\x83\x88D\xa2\xfa\x8c\x92\x18\xa0\xd4\xe0"I\xf4\xb4\xf5$\xb2\xf6\x04`\xdd:Fj\xd1\x947:\x15\xdaJ\xc22\xd8\xcf\xa4\x8dC\xa8\x80\x05\x8b\xdc\xcf^>\xa5w\xba%uA=\xa1fw\xb9\xecZ\x1f\xa37\xab\xe7\x89\xd9T\xd2\xb9\xde\xa6\xe7\x1c\xd3\x9c/\x17\x86f\x06\x12\x1a\xd7\x9e\xd46\xfe"\x1b\xe3\xfc,\xcaS\x8dCJ\xd0y\x96\xe5\xac\xfesK\x13\xd3~\x92Hb\xd9\x99H$#f\xc0J=\x19\x9c\xe4\x9f\xbfx\x12\xa2\xb5+\xcfJ\xaf\xf9cq\x1e\x9b\x88\x87\x81\x16\xc3"\x12Vt\xc7\xe8Lj0\xee\xb2\x0b\x86\xc9\xd3\x97\x9d6(\x16\'\b\x97\x13\x84\xdak\xb0\x8e$aCE\x01ZL\xd0\n1\xe5Ze\xf5Bj\xc4\x0f\\\xc8\xa8\xcb5*\xa3<\x03)+\f\xbb\xc9\x18\x15]\xeb\xe1\xd2\xe8[\x1b\x9d\xab]{\xa9AM=\x0f\x850\f\xd7Fg\xed\x99H\xda\'q"\xec*A\x9b\x9b\x93\xc8\x0e\x17\xf6i\x94\xe6\xb4\xbd\x95H\xe9\'\x8e\xf3\xba\x9e\\G\xbeL\x0bh\xf3Z\xd6\xbe^-\xa6y\x89\x80\xb3\xa0\x06\x13\x90?\xd2\xf1\x167\x05I\xb7\xc3gp\x97c\xfb\xb4\x88\xf9a\fro\xf2\'n\b\x8d\'#OU\x94e\x94\x8d\rK\x9aCEiUb\xaekc\xae\xa4\x1e\xe5\xc71\xbf`\xf1I\xb3\xbb]\xe1K>?/B\xd6V\xb7k\xd1\xe5\xb3\x13/\xc0D\x10\x81\xc8\xa4\xf94\\\xf4\xce\xe9^,R^\x81\xaa\xceV\x14YT\x14^2m\xb7\xaa\x0eu\x07\x9dk\x16*[\\\x0e\xb8\xa8\xccR\x16.K\xf2\xf3\xf8\x931F[\xe1=w\xf1\xdf\xa9\xfb.\xc7\xdc\\\x17]\xd1\x07\x8b\r\xd5tr\xb3\xa7\x18\xfa\xd1\xf1\xe2\xee\xbf\x9c\x9f\x9cm\x8e\x8e\xa9\xe3\xacZ\x8b\xf3\xbb\xb6)z\x1ae \xa5\x1a\x1b\x1d\xd2\x90!\r\xb8\xcd\xfd\0\x9e\xb4B\x7fT -\x17Lq7\x97\xf4\xc3\xaf\xbeJ\xff\xfd\xe4\x8c\xec\xf5\x19\x8d\xab\xc3\xf4\xbe\xfae\x14j\x04\x01G\xa8\xab\xb1\f\xba\x94=\xb9\x91\xb13\xb6\x8e\x88\xc9\xd3\x9bC\xf4xx\xf6\x84^\xd8\x9cz\xc6=\xf8\xe7a\xe8\xffa\x18\x16\xab\xc5"\xb9`,<y\r\xa1\x91\xb8O3\xc0:i\xec\xedL\x91\x06\xe8EW"\xaeRy\x94\x85\xbd\xa8\xfb4\xc1q\xe9\xc1bV\xe98u\x95\xc5\xc0\xb3\xeb\xf2i\xc0\xed\xb9A\xae\x1a\xf66n\xf2\xad\x83\xbc\x8e\xd4\xa46e\xb4\xe2N\xf5N\x91\xaa_\xc9\xd0\xcb\xa6\xb9\x98\xa8\xd8P\x99\xbc\xf1rzf\xd8\xd4c\x91\xa9z\x0e6\x93\xc1s/\xd7dP\xa4n\x10\xaeD\xa5j\xcb\xb2\x11\x8d{\x93D`&{9NE\x183\xa7\x1e\xb7[\x9c\xc17\xa6\x06\xdbJ\xfemL\x19\xde\xbeT\xa1SDAm\x93\xb1\xfeX-\xf1\x8d\x1f\xaa\xa1\xfdjC\x154\xcd\x94\x86\xd3Y;z\xf7\xd6\xa4\xf2\xec$q\xee\xb8\xb6\xdb\xaa.\xfbX\xa6\xb1\xed\xb8\x84R\x90\x15u\x1dq#\xde(\xc5h\x9aX\xda4\xfa\xfc\x94b\x8b\xf7\xc9\x17PT\x94\x91\xa9\x91\x8f\\\xec\x8d<=\xdbY\x19-\xd9\xae\x11\x9d\xca\xfe\x15R\xb4\x8ef\xef],\xa3\xc6\x89\x0b\xbc\xae\xff\xa5&S[\xc7\xa9\xe8hWRheZrM\x07\x8ev\x1bUn\xe99s\xb4\xa5\x98\xbc4\x8df\x0f\xc0\x10-\x85\x16\xb9\xfb\xb4=\xff\x89\xab\'\xab\xd7)\x18g,R\xfa*\x18\xdf\xaa\xe1\x93\x91\xc4bQEds6\xa5\xf1B#r \xdbp?\x1f\r\xd9\xcd\x9a\xb6\x17gt\xb4\xbd\xa2\x1fz\xe5\xd3\xf4\xe4\xfc\xdb\xf4\xde\xc9\xbb4\x1c\x1e%\x0b\xa58P\xd2G\\\xc7\x8b4\x8d\xd9\x89\x18B\x14#9\xd5\x98\xcf\xa3Tg\x0b\xcf\xbb\x89\xa3V>u\xe1\x9f\xab3\'\xfe\x89\xbe\xea?\x83o\xfb\x05{\f\x92\xf4\x90&L\xb5\xac\xaeN\xfaUu\x1e\xa3Ty"\xb96\xe2NaZ\xbdA\x13\xd5\xa8\x8d\xa1\b:\xcal.\xb5P\x96=~\xf8LH\xa5\x07\xb3g\xa1\x9c\x17\x9c\xb5\xeb\xa2\x9c\xac#O\xb8!\x902E\xd9L\xa2\xb8\x89\xbd\xd4t\x18%\xe7\x1a\xa7\x16:\xc4\xda\x98\x89\x1aF\xf5\x18\x937S\xf38F+\xffx\x12\x895n\x17L\xcdh\x135\xab\xb5\xd4\xeeDD"\x07\xc9\xed\x10aL\xf7\xc1f\xd2\x8b\xf5A\x0b_\x19\xe92[\xb7\x18\xc4\xf5\x91\x8f\xb8\xb8u\xc1p\xf3v\xd4\xb4\xe0N\xc4\x1c{2}MQu\x1al\xf3\x9e\xd7\xa7\xc9k;7O\x0f\xc80\xb8\xb2\x88\xabK\xbf\xaa\x17\xf3\xae\xd2\xc8\xc9?=\xb1sQ\xd7&"\xb6\xea\xf9\xa2.\xc2\xa6\xb4\x9f\xee\xf7\n\xf9{Y8\x92 "\x17\xdd\x95|\xddM:\xa8k\x1aH\xd7\xb0\x14\x85\xab\xfaF\x89(MJ\xed\xc4\x1e\x1b\x19$\x99\xe5\xec\xa9\xb8\xae\x93\xb6\xaeD\x17\xba_\x8ds\x15\xbb=\x8eU\xae]\xa28\xaam\x03\xa2\x1c\xe4L\xca\xcd\xb6B\x14s%\xc5Y#\xc1\xd0\xb8\xba\xf5\xb7\xff$_\xfd\xed\xb7\xcf\x9e|\xe1\xd1\xe1\xbd\x07\x8b\xd0\\\xcc\xae\xa6\r\x03\xc1\xe4\xe8\x8bHR\x866\xd6\xbaB}*\xd5\xc1\xc2,\xad5\x8d\x97\xe7d\x9f=\xa6\x87\xc36\xdaJ}\xf6\xe5\x07\xf4\xf4\xed\xc74^<\x1f\xdd3\xc2\x1fa\x86\x05\xb9\xee\x80h}\x9d\x04\x1e]N\xb9Y\xca\xc7R\x9a\xb6\x13!\x06\xd2Z\xafW\xf4\xf0\xea\x11\xbdDWW#\xf7\x7f\xda9\xfa+O\xce\xa7\xf1R.\xdey.\xca\xe0\xb9\xeb\x94o \xe7fbS\xebZT\x89\x8b\xd5\x8c\xa8\x12m1\xb7C\x18\xc94=Q\x8d\xdc\\\x99\x1c\x9b\xc9T\xe1x\x8e\xe5H+\xfa\x17\xea\xe1\x94\xf9w\x86\xb8\xb1\x85J\xe9\xe1n6\xdeD\xa2\xbc\x8e\xab\xc5\x14O\xc8L\xab\x039\x87Fj{\x95\xeby\xdc\xf4s\xb5B\x91\x1aU\x91\x8e\0\xcd\x8e\xd4\xdcD\xb1%)\xcb&\x95(.\x18S{\xc1\x1dR\xf7\xa9*\x90?\x04Y\xd1\x0e\xd7\x9f\xdb.\xd0\xb8\x95r\xf8\x89Fo\xe7I\xe1H\xcb\xc3\xe7\xd4e\'\x1f\xfb>\xdfC\xde\x93N\xac\xaf\xa7\x16H\x9a\x0f\xb4\x93\x14`\xa9\xe7\x93r\x7f\xd2\'\xbbV\x11\xb9:3+FCF\x9a/9{\xbc\xe5\xbf+\xcd9lz\xbfj*2GLn\xda\x04\xbd?\r*),\xd6\xb7\x0b\xb9\xf2\xdc\x81D\x17\xec\xd3\xeb\x8f\x91Hc\xcaK\xb9\x9aP^\x14R\x14B\xaaa:\xfd]\xb64}\x9aJ\xcc\x9d\xc9\xb2\xf74S+\xc9\xc5\xa9x\xea\x8d\x91htr8\xa9\xc6\xca\xa6\xc6p!\xa5\x10\xd1F\xce\xf1\xd7\xc3\xc2\xd0o\xfc<\x9d\xfe\xda_>[\xfd\xea\xea\xce\xf1\xa7\x87.\x9b\xfc\xc4z\x97".\x97l\xa3\x92X#\xd4\xb2<\xf9\x04\xbfBOZ\xc1\bw}\xf2>\x1d\x9f|\x8f\x06s\xfd\xe6\xbb\xef\\\xfd\xee\xd0\x0f\x7f\xf1\x12\x9f\x7f\xe2\xf1{\xdf\xfbu\x1fq}\xb1\xbfs\xef\x05\xea\x8e\xfc\xf3\xad\x88W\xfeq\x92\x86\xd5\xe2\x019V.Ez\xeb\xd5\x8a\xee]?\xa5W\xe9\xe4\xd2\x87V\x7f\xe6\x17\xc8?\xf2\x04\xf5\x8e\'(\xa7\x17\xf5\xd2\'\x1b\x1c\xe8\xc5\x830\x92V\xee\x91\xca\xfdHQ\xd3XRb5];\x9b\0\xcc\\v\xfe\x92\xf63\xbb&\x06\x93v\xe9\xcf\r\xc6\x8a\xa0\xc4k\xb2\xfdYfr\x98R\x8b\x12\x7f\xc3\x9d\xd1\x14\xd7I\xcaF9pHZ\xb3f\0\\+\xb0\xc8\x84\xaa\xdf\x1f\xa9\f\x87\x9eb\xcc;\xb6\xa9\xfa\xba\xdc;\xe3\x91T\xef\x98\xd6\\M\xf9\x91[Q\x05\xcf\xd6\x9d\xb9\x94}W-\xab\xc6\x94\xb4Wl\xe6f\x157\x10\xd7\x0f\f\x81\xd1N\xd1E\x9ej\xbb\x83\x8e\xdc\x8c\xfc\xf6\xf7y\xe9\xdd\xd1|\xce\xd6LW\xb4\xbf\xbfcb\xebR\x83\x17\x95N\xb4u\x94\x89\x10\x1e\x93\x9a>\xec\x92\xf4\xbb\xcb\xcd\x96b\x1b%o\xa2:\xbcW/@.RI\x8eQ O\x95bjFW\xfd\x99\xcb\x84\t\xa7\xe7\x07\xc9\x88\x05\x9d&\xb4\xb64;\x0b\xd9u\xe2=\xa7\x94]\xc5#\xaekkr\xa4j\x18\x12\x15J\x1f\x99x\xe3\x91,\x92A=h\x92\xe8\xa2\x0f5/\xdb%\xb7\xf8\xb1\xd6\xcc\xa4\'6\xa6\x12\xb3\xab}|\xed0\xcd8\xcc\x1ev\xf6\xcd\x97\x16\xdb?\xf8\x85\xf5\xb3\xef\xfe\xcd{g\xbf\xb5><\xfa\xf1\xbe\xebS)2\x92ax\xb2M\x1cD\x19\xc4\x18n\x9bT\x83nuA\xee\xe2\x8a\x9c\x8f\x9e\x82\x19\xae}\xeb?\x88\x9f|\xe7\xe2\xed\xae\xffs\xee\xfa\xbf6lN\xfd;;\x1b\xec\xc9\xef\xad\xdd\xf8\x8f\xf6\xc1\'\x7f\xbb\xeb\x9e\xff\x19>\xf7\x7fC?\xc4\xe8(I\xb1\xd5"\x19\t\xcb\xc6\x1a\xda\xe6\xfa\x8a\xee\xad\x9e\xd1\x8f-WO\x17\xcb\xe5W=\xc5~\xa5\xeb\x86\xef\xf6\xc3\xc2\x05S\xdc\xf0\x15\x06J\x86\xefK\x1f\xc9-\x96\x8b\xf4=\xdf6d)\xbc15\xfdd\xa8\xd6i\x8afPDA\xc1\xe8\xa4DH*\th\x9aXe\xe7\xe0G\xc9\x06\xa4H\xaf\x9b\xa5\xb7Y\xef\xc0\xe4\xdc\x11\xc22u\xfar\x1aRi\xcas\xd7\xf4e\x8d\xeaH\xd5\xde\x9a-\x16s\x8d\xe6\f5]\xc2)Z\xac\xef\xa38j\x18j\x1d\xeawDFZ\xf9g\xf2\xffx\x12y\xee\x8b\xa0\xf6\x19t\xeb\xfaz\xb7\x83\x9chR\x9f/\x9f\xdddS\xee>\xa0\xeeu\xab\xd6\xf6\x8f\xd3\x04\xe4}\xba\x9a\xdd\xa2\xc0\\h\xdeS\x0bs;NH;-\xac\xee\xd9=\xb9}B\x8e\xa9\x9d\x0bQk\x86\xebjz\xad\xe97s\xd4x\xc9X\xd7F?\xa5\xf7\xcb\xca\xdc\x1e\x95zs\xae\xb1\xa6)\x8d\xa5\xae\xfa1\xd6\xde\xae<\n\x82&\xe6\xbe\x8e\x9b\xa1\x91v2\xcaD\x9a\x80\xf5\\\xb0Y\x0fZ\xd33\xd7\xe6S\x98t\x9eF5\xcb\xe6F\xe3q\x1c\xebP\xca1\xa9\n\xc3\xb8\x92\xab\xf5\x8aVqt\xc9&J\xe3\xc3\0\xc9mv\xd6\b\xff\x85\x01\x8f\xf1\xcb\xa6\x9e\xaed\xbe\xeb\xef\xb3Y\x91\xbd\xba8\xfe\xdf\xc7\x8f\x7f\xe9\xb5g\x9b\xdf\xb988\xfe|\xbf<0&\xfa\x13\xd5\x94a\x14klR=\x8bN\xcf\xc8\xbe\xf7\x94\xc6\xb3\xf7\x9d\xfd\xde\x7f\xad\xf9\xd1w\x1e\x1b\xee\xbeF]\xff\x87\xa6\xeb\xff\xcf/\xb6)*\xf2\x07h\xd3\x1d\xf4\xe3\xbdO\xfd\b}\xf23\xbfi\x9e\x7f\xfeW\xba\xe5\x9dO\x04\x9b\xa9\xd4\xc3F\xa5V\x16\x1c\xe4\x83\xc0\x83<)>\xb0W\xf4\xb9\x17\x8e^\xbb{\xff\xb9?\xee\x96G\xdf\x18\x16\x8b\xc7\x8ba\xe9\x86ER\x11\x86\x9a\xdc2\xff{\xb1\b_K:\x10B\xf3\xa1\x96\x89\x06\x1au!7\x99\x18\xdb\x94\x93n{\x90T\xa0i:\x17\x98\xaa\x98b\xea8\xa1U\x881\xd5\x97m\xa0h*\xf0\xc8\xa6\xbd\xd3\x11(\x95\xec\xcc\x8c\xb84iuz\xa8dy\xad\xaaDl\xa6bKti\\c\xffF3\xe2-\x16\x90Y\xf4\xc4;\xd3\xff\xc5\xa5]\x1bE\x9bVm\xb8\xcbn\x89\xf7\xac\t|\x83\xd8\xaf\x15W\xb8\xc9\xf3\xf1\xad7\xd2\x05q}\bB\xdb\xb7/\xb1\x8a$X\xedr\xdc$\xfcv\r\x9d\xe8\xfa\r7i\x80\xe9y:K\xd1\xd1\xfe\xa9\xc8\xbb\xce\xea\x92\xe6\xb3n\x9e\xf2\xcb$4\xaa\x01w:B\xb2\xae\x9a\xfa\xca\xc0\xc8*\xabW\x15(M\x84NjIm\x1fZ5\r\xae\x11Z\xab\xdesm?\x9aV\x9b\x95F\xce\xaa\x06\xab\xee\xa3\xad\x93\x7f\xeb\xfdQ\x1d\xcdE\xdc1\x16\xdb\xa71\xd6\x96\xd6\x9e\xb0\xc2d\xe2\xcd\xb8\x8d\x04\xb6\r#Hr_Wp\xb3\x0fd\xb6\x8e\xf7\xf3\xe4\xe6\xbf\x87\x1e\xab0\xf2d\xbd\xba\xa6\xd5\xd9\xb3\xfe\xedw\xdf\xfe\xb97\x9e<\xfd\xf2\xe3\xeb\xcdO_;\xba\xbfu\xae\xb3\xa3\xe5(\xd2\xf0\xf7s\xeb@,W\xc4\x17\x17\xd4\x9d>\xdb\xf4\x97\'\xdf\x1f\xc6\xd57\x86\xe5\xe1\xd7\x87\xe5\xc17\xfb~q\xdeu}^\xc0\x93\xeb\x87\xf5\xaf\xe3\xdf\x83Yu\x8b\x176\xc3\xf2g\xc7a\xf9\xfb\xae\x1f^ \xd3\xdf\xf1\x8b\xef\xc2\x7f\r\xbd?8K\xff\xbf\xbb\xcba\xfb\xc2\xbd\xe3\xf7^z\xf1\xc5\xaf\x1c\xdd\x7f\xfe\xeb\x07\x87G\xdf]\x1e\x1cl\x0e\x96\x07\x9e\xa8\x96\x91\xac\x86AR\x81\xe9{o\xba\xfcs\x16kt\x89lB](\xca\xc9)\x99\xc9\xba\\W\xac\xfd\xc1i\xe7R\x8cq]\xed\x86\xe4i\x9d\x89h&9\x17\xad\x11\x17bb5\x10\x92K\xa4TD#\xd4\x12Y\xac\xc1\x892P\xa5\x0b\x1brT\xe4&Q\x95N\x07\xb6\xd1O"\xe0\xde\xe4\xdb5\xf1\xd0\x8eA\x8f\xd3\xe8\xca\xcc\xa7\r7\x86\x02*\x15\xc87\\\xd75B\x9a_\xc2\xd3\xd2\x82\xa1\x0f\x1a:\xeb\x94\x80\x8cA\\\xc0\x07\x93\x9a\x8e\xc5\xdc,?\xcd\x93X\xad\xddc\xd9\x0f,\xb3\xce#\xb7i\xcd\x8doH5\xec\x82mF\x9f8\x12y\xbd\xddC\x8c\xceQ\xe3\xfd\xa7\xdd?\xa2\xd2\xdbq;\x1d\xd9\xe9\x9e3\x89\xb6l\xe3&_\x9c\xe4\xf5\x0eWv\xe7e\x811D\xcd"G3\x8fE\xbd`4\r\xe2\xf90\xdb\xfc\x1e\xadr\x9c\x10w\x8cu\x88\xb4\xb6\xd2\x88\xec#-\xff\xbb175\x8f\xb9\xa7m\x9b\x89m\xed\xa3\xa7M \xaeHd\xeb\xe89\xb8\xba8\xe7\xd3\xd3g_\xf4_\xbfxzv\xfa\xb9\xab\xcb\x8b\xfb\xab\xd5j\xe1\t\xa8\xf3\x91Q\xe7\xa3(\xe79\xe6\xbcg\xf3\xf7}?|mX,_\x1f\x86\xc5\xe9r\xb1pCh\n\x8e\x03\x17\xbb\xbc\xf8w\xd1\x047\xb5\x15D\x92]\xfa\xe3\xf3\x9c\xff;^\xf2_/\xfb\x05\xfca?\f/\xfa\x88\xe9\xe8\xe0\xf0\xf0\xc2\x93\xd4\xffx\x12\xfc\x96\xff\xdd;>zZ\xa5\x06\xe3\xd0X\x9c\x87?\x8ad\xdd\xd5\xf4\x9cN\xe3U1\x1e\xd7\xfaK\xc9E\'+)\x9d^\x8b\xe7\x8dXc%\xc9j#\xb6\xd0\x84\xa5I\xa5\xfal*\xb5_W\x89\x84K\xad\xac\x15Q\xd4\xe7\xac\xd1T\xc7U\xb5(\xcf\xd5\xd4\xd2JJ\xd1\x94s\xc9\x18\x9eX5\xb9R:\xebr$\xc5\xcd}\xdc\x0e\xa1\xd5t\x9e\x96+m#M\xc4\xb5G8q\x83\xc9{\xf3o\xb3\x97\x8a\xeaP\xcc\x8f\x83\xc0\x02\xc4\xf5\x11 3\xde\xabLt\xb3\xe2\xe9\xd4Q\xfe\xa6\x88\xcb\xed\xd9\xa1\xb9\xbd\x11\xe2|\xc4A\x8d\x88\xb8D\x91\xf5\t\xd3@J7\xd6\xd4`\x99\x96\xac<\x13\x83\x80!\xf9\x14\xb6\xe3F\xc4\xf0\xb6\x12\x98U\xde\x80j\0\xa4N\xef\xe8Z\x80\x91\b\xb5\xf6qI\x7f\x9a\x14\xd2\xa6\xee\xf5d&iT\xe2\xe2\x8c\xaf\t5\xa5\x0eSj0\xc9\xe4\xb3\xfc~\x1c\xab\x8fa>\x1a%\xd5(\xf7\x8b\xa9\xc3::\xc5f\x12\x8c\xa4\xb7\x8di\xbc\x85\x7f\xee\xbb\xfe\xf6\xbb\xfe6c\xedx\xe5F{\xe2\x9f\xe8\x9a\xcb\xccj1\xf4\x95\xb4X\x9a&\x1c\x89\xacS\xb2\xf5.\xd5\x9fr\xbd.s\x8cI\x9a\x036\xc1\xd0}l\x9af\x8d\x92}\xefK\x7f\x8b\x9a4\x8f\x02H\x8d\xe0\xea\xec\x11\xdf\xb0R\xf9k\xeb\x8a\xd2J\xc1\xda\x12\x89\xdb\xcf\xb1\xf4ii\xd7v\xc3M\xffU#[\x9f\f~,\xb7\x89`d\xd2\xdfu\xd3\x97\x91\xfa\x9b\xd1\xc4\xec\x8a\x12\xd04\x9a\x0f\xd7FF;\x1a\x9c\xcc\x9e\x1a\x95N\xff\xf1\x8eL\x0b\x7f\b\xd22\x133\x043[/\\[\x07\x07@\\\0\0\0\xc0\xed\x82\xc1!\0\0\0\0@\\\0\0\0\0\0\xe2\x02\0\0\0\0\x10\x17\0\0\0\0\xe2\x02\0\0\0\0\x10\x17\0\0\0\0\x80\xb8\0\0\0\0\x10\x17\0\0\0\0\x80\xb8\0\0\0\0\0\xc4\x05\0\0\0\x80\xb8\0\0\0\0\0\xc4\x05\0\0\0\0 .\0\0\0\0\xc4\x05\0\0\0\0 .\0\0\0\0\0q\x01\0\0\0 .\0\0\0\0\0q\x01\0\0\0\0\x88\x0b\0\0\0\0q\x01\0\0\0\0\x88\x0b\0\0\0\0@\\\0\0\0\0\x88\x0b\0\0\0\0@\\\0\0\0\0\0\xe2\x02\0\0\0@\\\0\0\0\0\0\xe2\x02\0\0\0\0\x10\x17\0\0\0\0\xe2\x02\0\0\0\0\x10\x17\0\0\0\0\x80\xb8\0\0\0\0\x10\x17\0\0\0\0\x80\xb8\0\0\0\0\0\xc4\x05\0\0\0\x80\xb8\0\0\0\0\0\xc4\x05\0\0\0\0 .\0\0\0\0\xc4\x05\0\0\0\0 .\0\0\0\0\0q\x01\0\0\0 .\0\0\0\0\0q\x01\0\0\0\0\x88\x0b\0\0\0\0q\x01\0\0\0\0\x88\x0b\0\0\0\0@\\\0\0\0\0\x88\x0b\0\0\0\0@\\\0\0\0\0\0\xe2\x02\0\0\0@\\\0\0\0\0\0\xe2\x02\0\0\0\0\x10\x17\0\0\0\0\xe2\x02\0\0\0\0\x10\x17\0\0\0\0\x80\xb8\0\0\0\0\x10\x17\0\0\0\0\x80\xb8\0\0\0\0\0\xc4\x05\0\0\0\x80\xb8\0\0\0\0\0\xc4\x05\0\0\0\0 .\0\0\0\0\xc4\x05\0\0\0\0 .\0\0\0\0\0q\x01\0\0\0\x1f#\xfc\xbf\0\x03\0\xf0\t\xdc\xdcX\x02|\x87\0\0\0\0IEND\xaeB`\x82');
      return;
     }
     (globalThis));
  }
  (globalThis));
(function(globalThis){
   "use strict";
   var
    joo_global_object = globalThis,
    BUTTON =
      {NONE: 0, LEFT: 1, MIDDLE: 2, RIGHT: 3, WHEEL_UP: 4, WHEEL_DOWN: 5},
    BUTTON_STATE = {UP: 0, DOWN: 1},
    BUTTON_STATE_TAG = {UP: 0, DOWN: 1},
    BUTTON_TAG =
      {NONE: 0, LEFT: 1, MIDDLE: 2, RIGHT: 3, WHEEL_UP: 4, WHEEL_DOWN: 5};
   function caml_subarray_to_jsbytes(a, i, len){
    var f = String.fromCharCode;
    if(i == 0 && len <= 4096 && len == a.length) return f.apply(null, a);
    var s = "";
    for(; 0 < len; i += 1024, len -= 1024)
     s += f.apply(null, a.slice(i, i + Math.min(len, 1024)));
    return s;
   }
   function caml_string_of_jsbytes(x){return x;}
   function caml_string_of_array(a){
    return caml_string_of_jsbytes(caml_subarray_to_jsbytes(a, 0, a.length));
   }
   function caml_ba_get_1(ba, i0){return ba.get(ba.offset(i0));}
   function BigStringReader(bs, i){this.s = bs; this.i = i;}
   BigStringReader.prototype =
    {read8u: function(){return caml_ba_get_1(this.s, this.i++);},
     read8s: function(){return caml_ba_get_1(this.s, this.i++) << 24 >> 24;},
     read16u:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 2;
      return caml_ba_get_1(s, i) << 8 | caml_ba_get_1(s, i + 1);
     },
     read16s:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 2;
      return caml_ba_get_1(s, i) << 24 >> 16 | caml_ba_get_1(s, i + 1);
     },
     read32u:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 4;
      return (caml_ba_get_1(s, i) << 24 | caml_ba_get_1(s, i + 1) << 16
             | caml_ba_get_1(s, i + 2) << 8
             | caml_ba_get_1(s, i + 3))
             >>> 0;
     },
     read32s:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 4;
      return caml_ba_get_1(s, i) << 24 | caml_ba_get_1(s, i + 1) << 16
             | caml_ba_get_1(s, i + 2) << 8
             | caml_ba_get_1(s, i + 3);
     },
     readstr:
     function(len){
      var i = this.i, arr = new Array(len);
      for(var j = 0; j < len; j++) arr[j] = caml_ba_get_1(this.s, i + j);
      this.i = i + len;
      return caml_string_of_array(arr);
     },
     readuint8array:
     function(len){
      var i = this.i, offset = this.offset(i);
      this.i = i + len;
      return this.s.data.subarray(offset, offset + len);
     }};
   var
    CAP_TYPE_TAG = {BUTT: 0, SQUARE: 1, ROUND: 2},
    COMPOP_TAG =
      {SOURCE_OVER: 0,
       SOURCE_IN: 1,
       SOURCE_OUT: 2,
       SOURCE_ATOP: 3,
       DESTINATION_OVER: 4,
       DESTINATION_IN: 5,
       DESTINATION_OUT: 6,
       DESTINATION_ATOP: 7,
       LIGHTER: 8,
       COPY: 9,
       XOR: 10,
       MULTIPLY: 11,
       SCREEN: 12,
       OVERLAY: 13,
       DARKEN: 14,
       LIGHTEN: 15,
       COLOR_DODGE: 16,
       COLOR_BURN: 17,
       HARD_LIGHT: 18,
       SOFT_LIGHT: 19,
       DIFFERENCE: 20,
       EXCLUSION: 21,
       HUE: 22,
       SATURATION: 23,
       COLOR: 24,
       LUMINOSITY: 25},
    tag_to_cap_type =
      new
       joo_global_object.Map
       ([[CAP_TYPE_TAG.BUTT, "butt"],
         [CAP_TYPE_TAG.SQUARE, "square"],
         [CAP_TYPE_TAG.ROUND, "round"]]);
   function Cap_type_val(cap){return tag_to_cap_type.get(cap);}
   var
    tag_to_compop =
      new
       joo_global_object.Map
       ([[COMPOP_TAG.SOURCE_OVER, "source-over"],
         [COMPOP_TAG.SOURCE_IN, "source-in"],
         [COMPOP_TAG.SOURCE_OUT, "source-out"],
         [COMPOP_TAG.SOURCE_ATOP, "source-atop"],
         [COMPOP_TAG.DESTINATION_OVER, "destination-over"],
         [COMPOP_TAG.DESTINATION_IN, "destination-in"],
         [COMPOP_TAG.DESTINATION_OUT, "destination-out"],
         [COMPOP_TAG.DESTINATION_ATOP, "destination-atop"],
         [COMPOP_TAG.LIGHTER, "lighter"],
         [COMPOP_TAG.COPY, "copy"],
         [COMPOP_TAG.XOR, "xor"],
         [COMPOP_TAG.MULTIPLY, "multiply"],
         [COMPOP_TAG.SCREEN, "screen"],
         [COMPOP_TAG.OVERLAY, "overlay"],
         [COMPOP_TAG.DARKEN, "darken"],
         [COMPOP_TAG.LIGHTEN, "lighten"],
         [COMPOP_TAG.COLOR_DODGE, "color-dodge"],
         [COMPOP_TAG.COLOR_BURN, "color-burn"],
         [COMPOP_TAG.HARD_LIGHT, "hard-light"],
         [COMPOP_TAG.SOFT_LIGHT, "soft-light"],
         [COMPOP_TAG.DIFFERENCE, "difference"],
         [COMPOP_TAG.EXCLUSION, "exclusion"],
         [COMPOP_TAG.HUE, "hue"],
         [COMPOP_TAG.SATURATION, "saturation"],
         [COMPOP_TAG.COLOR, "color"],
         [COMPOP_TAG.LUMINOSITY, "luminosity"]]);
   function Compop_val(cap){return tag_to_compop.get(cap);}
   var STYLE_TAG = {COLOR: 0, GRADIENT: 1, PATTERN: 2};
   function Draw_style_val(style){
    var s = [];
    s[1] = style;
    switch(typeof style){
      case "string":
       s[0] = STYLE_TAG.COLOR; break;
      case "CanvasGradient":
       s[0] = STYLE_TAG.GRADIENT; break;
      case "CanvasPattern":
       s[0] = STYLE_TAG.PATTERN; break;
    }
    return s;
   }
   var
    EVENT_TAG =
      {FRAME_CYCLE: 0,
       FRAME: 1,
       CANVAS_FOCUSED: 2,
       CANVAS_RESIZED: 3,
       CANVAS_MOVED: 4,
       CANVAS_CLOSED: 5,
       KEY_ACTION: 6,
       BUTTON_ACTION: 7,
       MOUSE_MOVE: 8},
    FOCUS = {OUT: 0, IN: 1},
    FOCUS_TAG = {OUT: 0, IN: 1},
    JOIN_TYPE_TAG = {ROUND: 0, MITER: 1, BEVEL: 2},
    tag_to_join_type =
      new
       joo_global_object.Map
       ([[JOIN_TYPE_TAG.ROUND, "round"],
         [JOIN_TYPE_TAG.MITER, "miter"],
         [JOIN_TYPE_TAG.BEVEL, "bevel"]]);
   function Join_type_val(join){return tag_to_join_type.get(join);}
   var
    KEY =
      {UNDEFINED: 0x03,
       ESCAPE: 0x29,
       F1: 0x3A,
       F2: 0x3B,
       F3: 0x3C,
       F4: 0x3D,
       F5: 0x3E,
       F6: 0x3F,
       F7: 0x40,
       F8: 0x41,
       F9: 0x42,
       F10: 0x43,
       F11: 0x44,
       F12: 0x45,
       PRINTSCREEN: 0x46,
       SCROLLLOCK: 0x47,
       PAUSE: 0x48,
       GRAVE_TILDE: 0x35,
       _1_EXCLAMATION: 0x1E,
       _2_AT: 0x1F,
       _3_NUMBER: 0x20,
       _4_DOLLAR: 0x21,
       _5_PERCENT: 0x22,
       _6_CARET: 0x23,
       _7_AMPERSAND: 0x24,
       _8_ASTERISK: 0x25,
       _9_LPARENTHESIS: 0x26,
       _0_RPARENTHESIS: 0x27,
       MINUS_UNDERSCORE: 0x2D,
       EQUAL_PLUS: 0x2E,
       BACKSPACE: 0x2A,
       TAB: 0x2B,
       Q: 0x14,
       W: 0x1A,
       E: 0x08,
       R: 0x15,
       T: 0x17,
       Y: 0x1C,
       U: 0x18,
       I: 0x0C,
       O: 0x12,
       P: 0x13,
       LBRACKET_CURLY: 0x2F,
       RBRACKET_CURLY: 0x30,
       BACKSLASH_PIPE: 0x31,
       CAPSLOCK: 0x39,
       A: 0x04,
       S: 0x16,
       D: 0x07,
       F: 0x09,
       G: 0x0A,
       H: 0x0B,
       J: 0x0D,
       K: 0x0E,
       L: 0x0F,
       SEMICOLON_COLON: 0x33,
       QUOTE_DOUBLEQUOTE: 0x34,
       NONUS_NUMBER_TILDE: 0x32,
       RETURN: 0x28,
       LSHIFT: 0xE1,
       NONUS_BACKSLASH_PIPE: 0x64,
       Z: 0x1D,
       X: 0x1B,
       C: 0x06,
       V: 0x19,
       B: 0x05,
       N: 0x11,
       M: 0x10,
       COMMA_LESS: 0x36,
       PERIOD_GREATER: 0x37,
       SLASH_QUESTION: 0x38,
       RSHIFT: 0xE5,
       LCONTROL: 0xE0,
       LMETA: 0xE3,
       LALT: 0xE2,
       SPACEBAR: 0x2C,
       RALT: 0xE6,
       RMETA: 0xE7,
       MENU: 0x76,
       RCONTROL: 0xE4,
       INSERT: 0x49,
       HOME: 0x4A,
       PAGEUP: 0x4B,
       DELETEFORWARD: 0x4C,
       END: 0x4D,
       PAGEDOWN: 0x4E,
       UPARROW: 0x52,
       LEFTARROW: 0x50,
       DOWNARROW: 0x51,
       RIGHTARROW: 0x4F,
       PAD_NUMLOCK_CLEAR: 0x53,
       PAD_EQUALS: 0x67,
       PAD_DIVIDE: 0x54,
       PAD_MULTIPLY: 0x55,
       PAD_MINUS: 0x56,
       PAD_7_HOME: 0x5F,
       PAD_8_UPARROW: 0x60,
       PAD_9_PAGEUP: 0x61,
       PAD_PLUS: 0x57,
       PAD_4_LEFTARROW: 0x5C,
       PAD_5: 0x5D,
       PAD_6_RIGHTARROW: 0x5E,
       PAD_COMMA: 0x85,
       PAD_1_END: 0x59,
       PAD_2_DOWNARROW: 0x5A,
       PAD_3_PAGEDOWN: 0x5B,
       PAD_0_INSERT: 0x62,
       PAD_DECIMAL_DELETE: 0x63,
       PAD_ENTER: 0x58,
       F13: 0x68,
       F14: 0x69,
       F15: 0x6A,
       F16: 0x6B,
       F17: 0x6C,
       F18: 0x6D,
       F19: 0x6E,
       F20: 0x6F,
       F21: 0x70,
       F22: 0x71,
       F23: 0x72,
       F24: 0x73,
       INTERNATIONAL1: 0x87,
       INTERNATIONAL2: 0x88,
       INTERNATIONAL3: 0x89,
       INTERNATIONAL4: 0x8A,
       INTERNATIONAL5: 0x8B,
       INTERNATIONAL6: 0x8C,
       INTERNATIONAL7: 0x8D,
       INTERNATIONAL8: 0x8E,
       INTERNATIONAL9: 0x8F,
       LANG1: 0x90,
       LANG2: 0x91,
       LANG3: 0x92,
       LANG4: 0x93,
       LANG5: 0x94,
       HELP: 0x75,
       MUTE: 0x7F,
       VOLUMEUP: 0x80,
       VOLUMEDOWN: 0x81},
    KEY_STATE = {UP: 0, DOWN: 1},
    KEY_STATE_TAG = {UP: 0, DOWN: 1},
    KEY_TAG =
      {ESCAPE: 0,
       F1: 1,
       F2: 2,
       F3: 3,
       F4: 4,
       F5: 5,
       F6: 6,
       F7: 7,
       F8: 8,
       F9: 9,
       F10: 10,
       F11: 11,
       F12: 12,
       PRINTSCREEN: 13,
       SCROLLLOCK: 14,
       PAUSE: 15,
       GRAVE_TILDE: 16,
       _1_EXCLAMATION: 17,
       _2_AT: 18,
       _3_NUMBER: 19,
       _4_DOLLAR: 20,
       _5_PERCENT: 21,
       _6_CARET: 22,
       _7_AMPERSAND: 23,
       _8_ASTERISK: 24,
       _9_LPARENTHESIS: 25,
       _0_RPARENTHESIS: 26,
       MINUS_UNDERSCORE: 27,
       EQUAL_PLUS: 28,
       BACKSPACE: 29,
       TAB: 30,
       Q: 31,
       W: 32,
       E: 33,
       R: 34,
       T: 35,
       Y: 36,
       U: 37,
       I: 38,
       O: 39,
       P: 40,
       LBRACKET_CURLY: 41,
       RBRACKET_CURLY: 42,
       BACKSLASH_PIPE: 43,
       CAPSLOCK: 44,
       A: 45,
       S: 46,
       D: 47,
       F: 48,
       G: 49,
       H: 50,
       J: 51,
       K: 52,
       L: 53,
       SEMICOLON_COLON: 54,
       QUOTE_DOUBLEQUOTE: 55,
       NONUS_NUMBER_TILDE: 56,
       RETURN: 57,
       LSHIFT: 58,
       NONUS_BACKSLASH_PIPE: 59,
       Z: 60,
       X: 61,
       C: 62,
       V: 63,
       B: 64,
       N: 65,
       M: 66,
       COMMA_LESS: 67,
       PERIOD_GREATER: 68,
       SLASH_QUESTION: 69,
       RSHIFT: 70,
       LCONTROL: 71,
       LMETA: 72,
       LALT: 73,
       SPACEBAR: 74,
       RALT: 75,
       RMETA: 76,
       MENU: 77,
       RCONTROL: 78,
       INSERT: 79,
       HOME: 80,
       PAGEUP: 81,
       DELETEFORWARD: 82,
       END: 83,
       PAGEDOWN: 84,
       UPARROW: 85,
       LEFTARROW: 86,
       DOWNARROW: 87,
       RIGHTARROW: 88,
       PAD_NUMLOCK_CLEAR: 89,
       PAD_EQUALS: 90,
       PAD_DIVIDE: 91,
       PAD_MULTIPLY: 92,
       PAD_MINUS: 93,
       PAD_7_HOME: 94,
       PAD_8_UPARROW: 95,
       PAD_9_PAGEUP: 96,
       PAD_PLUS: 97,
       PAD_4_LEFTARROW: 98,
       PAD_5: 99,
       PAD_6_RIGHTARROW: 100,
       PAD_COMMA: 101,
       PAD_1_END: 102,
       PAD_2_DOWNARROW: 103,
       PAD_3_PAGEDOWN: 104,
       PAD_0_INSERT: 105,
       PAD_DECIMAL_DELETE: 106,
       PAD_ENTER: 107,
       F13: 108,
       F14: 109,
       F15: 110,
       F16: 111,
       F17: 112,
       F18: 113,
       F19: 114,
       F20: 115,
       F21: 116,
       F22: 117,
       F23: 118,
       F24: 119,
       INTERNATIONAL1: 120,
       INTERNATIONAL2: 121,
       INTERNATIONAL3: 122,
       INTERNATIONAL4: 123,
       INTERNATIONAL5: 124,
       INTERNATIONAL6: 125,
       INTERNATIONAL7: 126,
       INTERNATIONAL8: 127,
       INTERNATIONAL9: 128,
       LANG1: 129,
       LANG2: 130,
       LANG3: 131,
       LANG4: 132,
       LANG5: 133,
       HELP: 134,
       MUTE: 135,
       VOLUMEUP: 136,
       VOLUMEDOWN: 137},
    tag_to_kc =
      new
       joo_global_object.Map
       ([[KEY_TAG.ESCAPE, KEY.ESCAPE],
         [KEY_TAG.F1, KEY.F1],
         [KEY_TAG.F2, KEY.F2],
         [KEY_TAG.F3, KEY.F3],
         [KEY_TAG.F4, KEY.F4],
         [KEY_TAG.F5, KEY.F5],
         [KEY_TAG.F6, KEY.F6],
         [KEY_TAG.F7, KEY.F7],
         [KEY_TAG.F8, KEY.F8],
         [KEY_TAG.F9, KEY.F9],
         [KEY_TAG.F10, KEY.F10],
         [KEY_TAG.F11, KEY.F11],
         [KEY_TAG.F12, KEY.F12],
         [KEY_TAG.PRINTSCREEN, KEY.PRINTSCREEN],
         [KEY_TAG.SCROLLLOCK, KEY.SCROLLLOCK],
         [KEY_TAG.PAUSE, KEY.PAUSE],
         [KEY_TAG.GRAVE_TILDE, KEY.GRAVE_TILDE],
         [KEY_TAG._1_EXCLAMATION, KEY._1_EXCLAMATION],
         [KEY_TAG._2_AT, KEY._2_AT],
         [KEY_TAG._3_NUMBER, KEY._3_NUMBER],
         [KEY_TAG._4_DOLLAR, KEY._4_DOLLAR],
         [KEY_TAG._5_PERCENT, KEY._5_PERCENT],
         [KEY_TAG._6_CARET, KEY._6_CARET],
         [KEY_TAG._7_AMPERSAND, KEY._7_AMPERSAND],
         [KEY_TAG._8_ASTERISK, KEY._8_ASTERISK],
         [KEY_TAG._9_LPARENTHESIS, KEY._9_LPARENTHESIS],
         [KEY_TAG._0_RPARENTHESIS, KEY._0_RPARENTHESIS],
         [KEY_TAG.MINUS_UNDERSCORE, KEY.MINUS_UNDERSCORE],
         [KEY_TAG.EQUAL_PLUS, KEY.EQUAL_PLUS],
         [KEY_TAG.BACKSPACE, KEY.BACKSPACE],
         [KEY_TAG.TAB, KEY.TAB],
         [KEY_TAG.Q, KEY.Q],
         [KEY_TAG.W, KEY.W],
         [KEY_TAG.E, KEY.E],
         [KEY_TAG.R, KEY.R],
         [KEY_TAG.T, KEY.T],
         [KEY_TAG.Y, KEY.Y],
         [KEY_TAG.U, KEY.U],
         [KEY_TAG.I, KEY.I],
         [KEY_TAG.O, KEY.O],
         [KEY_TAG.P, KEY.P],
         [KEY_TAG.LBRACKET_CURLY, KEY.LBRACKET_CURLY],
         [KEY_TAG.RBRACKET_CURLY, KEY.RBRACKET_CURLY],
         [KEY_TAG.BACKSLASH_PIPE, KEY.BACKSLASH_PIPE],
         [KEY_TAG.CAPSLOCK, KEY.CAPSLOCK],
         [KEY_TAG.A, KEY.A],
         [KEY_TAG.S, KEY.S],
         [KEY_TAG.D, KEY.D],
         [KEY_TAG.F, KEY.F],
         [KEY_TAG.G, KEY.G],
         [KEY_TAG.H, KEY.H],
         [KEY_TAG.J, KEY.J],
         [KEY_TAG.K, KEY.K],
         [KEY_TAG.L, KEY.L],
         [KEY_TAG.SEMICOLON_COLON, KEY.SEMICOLON_COLON],
         [KEY_TAG.QUOTE_DOUBLEQUOTE, KEY.QUOTE_DOUBLEQUOTE],
         [KEY_TAG.NONUS_NUMBER_TILDE, KEY.NONUS_NUMBER_TILDE],
         [KEY_TAG.RETURN, KEY.RETURN],
         [KEY_TAG.LSHIFT, KEY.LSHIFT],
         [KEY_TAG.NONUS_BACKSLASH_PIPE, KEY.NONUS_BACKSLASH_PIPE],
         [KEY_TAG.Z, KEY.Z],
         [KEY_TAG.X, KEY.X],
         [KEY_TAG.C, KEY.C],
         [KEY_TAG.V, KEY.V],
         [KEY_TAG.B, KEY.B],
         [KEY_TAG.N, KEY.N],
         [KEY_TAG.M, KEY.M],
         [KEY_TAG.COMMA_LESS, KEY.COMMA_LESS],
         [KEY_TAG.PERIOD_GREATER, KEY.PERIOD_GREATER],
         [KEY_TAG.SLASH_QUESTION, KEY.SLASH_QUESTION],
         [KEY_TAG.RSHIFT, KEY.RSHIFT],
         [KEY_TAG.LCONTROL, KEY.LCONTROL],
         [KEY_TAG.LMETA, KEY.LMETA],
         [KEY_TAG.LALT, KEY.LALT],
         [KEY_TAG.SPACEBAR, KEY.SPACEBAR],
         [KEY_TAG.RALT, KEY.RALT],
         [KEY_TAG.RMETA, KEY.RMETA],
         [KEY_TAG.MENU, KEY.MENU],
         [KEY_TAG.RCONTROL, KEY.RCONTROL],
         [KEY_TAG.INSERT, KEY.INSERT],
         [KEY_TAG.HOME, KEY.HOME],
         [KEY_TAG.PAGEUP, KEY.PAGEUP],
         [KEY_TAG.DELETEFORWARD, KEY.DELETEFORWARD],
         [KEY_TAG.END, KEY.END],
         [KEY_TAG.PAGEDOWN, KEY.PAGEDOWN],
         [KEY_TAG.UPARROW, KEY.UPARROW],
         [KEY_TAG.LEFTARROW, KEY.LEFTARROW],
         [KEY_TAG.DOWNARROW, KEY.DOWNARROW],
         [KEY_TAG.RIGHTARROW, KEY.RIGHTARROW],
         [KEY_TAG.PAD_NUMLOCK_CLEAR, KEY.PAD_NUMLOCK_CLEAR],
         [KEY_TAG.PAD_EQUALS, KEY.PAD_EQUALS],
         [KEY_TAG.PAD_DIVIDE, KEY.PAD_DIVIDE],
         [KEY_TAG.PAD_MULTIPLY, KEY.PAD_MULTIPLY],
         [KEY_TAG.PAD_MINUS, KEY.PAD_MINUS],
         [KEY_TAG.PAD_7_HOME, KEY.PAD_7_HOME],
         [KEY_TAG.PAD_8_UPARROW, KEY.PAD_8_UPARROW],
         [KEY_TAG.PAD_9_PAGEUP, KEY.PAD_9_PAGEUP],
         [KEY_TAG.PAD_PLUS, KEY.PAD_PLUS],
         [KEY_TAG.PAD_4_LEFTARROW, KEY.PAD_4_LEFTARROW],
         [KEY_TAG.PAD_5, KEY.PAD_5],
         [KEY_TAG.PAD_6_RIGHTARROW, KEY.PAD_6_RIGHTARROW],
         [KEY_TAG.PAD_COMMA, KEY.PAD_COMMA],
         [KEY_TAG.PAD_1_END, KEY.PAD_1_END],
         [KEY_TAG.PAD_2_DOWNARROW, KEY.PAD_2_DOWNARROW],
         [KEY_TAG.PAD_3_PAGEDOWN, KEY.PAD_3_PAGEDOWN],
         [KEY_TAG.PAD_0_INSERT, KEY.PAD_0_INSERT],
         [KEY_TAG.PAD_DECIMAL_DELETE, KEY.PAD_DECIMAL_DELETE],
         [KEY_TAG.PAD_ENTER, KEY.PAD_ENTER],
         [KEY_TAG.F13, KEY.F13],
         [KEY_TAG.F14, KEY.F14],
         [KEY_TAG.F15, KEY.F15],
         [KEY_TAG.F16, KEY.F16],
         [KEY_TAG.F17, KEY.F17],
         [KEY_TAG.F18, KEY.F18],
         [KEY_TAG.F19, KEY.F19],
         [KEY_TAG.F20, KEY.F20],
         [KEY_TAG.F21, KEY.F21],
         [KEY_TAG.F22, KEY.F22],
         [KEY_TAG.F23, KEY.F23],
         [KEY_TAG.F24, KEY.F24],
         [KEY_TAG.INTERNATIONAL1, KEY.INTERNATIONAL1],
         [KEY_TAG.INTERNATIONAL2, KEY.INTERNATIONAL2],
         [KEY_TAG.INTERNATIONAL3, KEY.INTERNATIONAL3],
         [KEY_TAG.INTERNATIONAL4, KEY.INTERNATIONAL4],
         [KEY_TAG.INTERNATIONAL5, KEY.INTERNATIONAL5],
         [KEY_TAG.INTERNATIONAL6, KEY.INTERNATIONAL6],
         [KEY_TAG.INTERNATIONAL7, KEY.INTERNATIONAL7],
         [KEY_TAG.INTERNATIONAL8, KEY.INTERNATIONAL8],
         [KEY_TAG.INTERNATIONAL9, KEY.INTERNATIONAL9],
         [KEY_TAG.LANG1, KEY.LANG1],
         [KEY_TAG.LANG2, KEY.LANG2],
         [KEY_TAG.LANG3, KEY.LANG3],
         [KEY_TAG.LANG4, KEY.LANG4],
         [KEY_TAG.LANG5, KEY.LANG5],
         [KEY_TAG.HELP, KEY.HELP],
         [KEY_TAG.MUTE, KEY.MUTE],
         [KEY_TAG.VOLUMEUP, KEY.VOLUMEUP],
         [KEY_TAG.VOLUMEDOWN, KEY.VOLUMEDOWN]]);
   function Key_code_val(keycode){return tag_to_kc.get(keycode);}
   function caml_str_repeat(n, s){
    if(n == 0) return "";
    if(s.repeat) return s.repeat(n);
    var r = "", l = 0;
    for(;;){
     if(n & 1) r += s;
     n >>= 1;
     if(n == 0) return r;
     s += s;
     l++;
     if(l == 9) s.slice(0, 1);
    }
   }
   function caml_convert_string_to_bytes(s){
    if(s.t == 2)
     s.c += caml_str_repeat(s.l - s.c.length, "\0");
    else
     s.c = caml_subarray_to_jsbytes(s.c, 0, s.c.length);
    s.t = 0;
   }
   function jsoo_is_ascii(s){
    if(s.length < 24){
     for(var i = 0; i < s.length; i++) if(s.charCodeAt(i) > 127) return false;
     return true;
    }
    else
     return ! /[^\x00-\x7f]/.test(s);
   }
   function caml_utf16_of_utf8(s){
    for(var b = "", t = "", c, c1, c2, v, i = 0, l = s.length; i < l; i++){
     c1 = s.charCodeAt(i);
     if(c1 < 0x80){
      for(var j = i + 1; j < l && (c1 = s.charCodeAt(j)) < 0x80; j++) ;
      if(j - i > 512){
       t.substr(0, 1);
       b += t;
       t = "";
       b += s.slice(i, j);
      }
      else
       t += s.slice(i, j);
      if(j == l) break;
      i = j;
     }
     v = 1;
     if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128){
      c = c2 + (c1 << 6);
      if(c1 < 0xe0){
       v = c - 0x3080;
       if(v < 0x80) v = 1;
      }
      else{
       v = 2;
       if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128){
        c = c2 + (c << 6);
        if(c1 < 0xf0){
         v = c - 0xe2080;
         if(v < 0x800 || v >= 0xd7ff && v < 0xe000) v = 2;
        }
        else{
         v = 3;
         if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128 && c1 < 0xf5){
          v = c2 - 0x3c82080 + (c << 6);
          if(v < 0x10000 || v > 0x10ffff) v = 3;
         }
        }
       }
      }
     }
     if(v < 4){
      i -= v;
      t += "\ufffd";
     }
     else if(v > 0xffff)
      t += String.fromCharCode(0xd7c0 + (v >> 10), 0xdc00 + (v & 0x3FF));
     else
      t += String.fromCharCode(v);
     if(t.length > 1024){t.substr(0, 1); b += t; t = "";}
    }
    return b + t;
   }
   function MlBytes(tag, contents, length){
    this.t = tag;
    this.c = contents;
    this.l = length;
   }
   MlBytes.prototype.toString =
    function(){
     switch(this.t){
       case 9:
        return this.c;
       default: caml_convert_string_to_bytes(this);
       case 0:
        if(jsoo_is_ascii(this.c)){this.t = 9; return this.c;} this.t = 8;
       case 8:
        return this.c;
     }
    };
   MlBytes.prototype.toUtf16 =
    function(){
     var r = this.toString();
     if(this.t == 9) return r;
     return caml_utf16_of_utf8(r);
    };
   MlBytes.prototype.slice =
    function(){
     var content = this.t == 4 ? this.c.slice() : this.c;
     return new MlBytes(this.t, content, this.l);
    };
   function caml_utf8_of_utf16(s){
    for(var b = "", t = b, c, d, i = 0, l = s.length; i < l; i++){
     c = s.charCodeAt(i);
     if(c < 0x80){
      for(var j = i + 1; j < l && (c = s.charCodeAt(j)) < 0x80; j++) ;
      if(j - i > 512){
       t.substr(0, 1);
       b += t;
       t = "";
       b += s.slice(i, j);
      }
      else
       t += s.slice(i, j);
      if(j == l) break;
      i = j;
     }
     if(c < 0x800){
      t += String.fromCharCode(0xc0 | c >> 6);
      t += String.fromCharCode(0x80 | c & 0x3f);
     }
     else if(c < 0xd800 || c >= 0xdfff)
      t +=
       String.fromCharCode
        (0xe0 | c >> 12, 0x80 | c >> 6 & 0x3f, 0x80 | c & 0x3f);
     else if
      (c >= 0xdbff || i + 1 == l || (d = s.charCodeAt(i + 1)) < 0xdc00
       || d > 0xdfff)
      t += "\xef\xbf\xbd";
     else{
      i++;
      c = (c << 10) + d - 0x35fdc00;
      t +=
       String.fromCharCode
        (0xf0 | c >> 18,
         0x80 | c >> 12 & 0x3f,
         0x80 | c >> 6 & 0x3f,
         0x80 | c & 0x3f);
     }
     if(t.length > 1024){t.substr(0, 1); b += t; t = "";}
    }
    return b + t;
   }
   function caml_string_of_jsstring(s){
    return jsoo_is_ascii(s)
            ? caml_string_of_jsbytes(s)
            : caml_string_of_jsbytes(caml_utf8_of_utf16(s));
   }
   var
    unix_error =
      ["E2BIG",
       "EACCES",
       "EAGAIN",
       "EBADF",
       "EBUSY",
       "ECHILD",
       "EDEADLK",
       "EDOM",
       "EEXIST",
       "EFAULT",
       "EFBIG",
       "EINTR",
       "EINVAL",
       "EIO",
       "EISDIR",
       "EMFILE",
       "EMLINK",
       "ENAMETOOLONG",
       "ENFILE",
       "ENODEV",
       "ENOENT",
       "ENOEXEC",
       "ENOLCK",
       "ENOMEM",
       "ENOSPC",
       "ENOSYS",
       "ENOTDIR",
       "ENOTEMPTY",
       "ENOTTY",
       "ENXIO",
       "EPERM",
       "EPIPE",
       "ERANGE",
       "EROFS",
       "ESPIPE",
       "ESRCH",
       "EXDEV",
       "EWOULDBLOCK",
       "EINPROGRESS",
       "EALREADY",
       "ENOTSOCK",
       "EDESTADDRREQ",
       "EMSGSIZE",
       "EPROTOTYPE",
       "ENOPROTOOPT",
       "EPROTONOSUPPORT",
       "ESOCKTNOSUPPORT",
       "EOPNOTSUPP",
       "EPFNOSUPPORT",
       "EAFNOSUPPORT",
       "EADDRINUSE",
       "EADDRNOTAVAIL",
       "ENETDOWN",
       "ENETUNREACH",
       "ENETRESET",
       "ECONNABORTED",
       "ECONNRESET",
       "ENOBUFS",
       "EISCONN",
       "ENOTCONN",
       "ESHUTDOWN",
       "ETOOMANYREFS",
       "ETIMEDOUT",
       "ECONNREFUSED",
       "EHOSTDOWN",
       "EHOSTUNREACH",
       "ELOOP",
       "EOVERFLOW"];
   function make_unix_err_args(code, syscall, path, errno){
    var variant = unix_error.indexOf(code);
    if(variant < 0){if(errno == null) errno = - 9999; variant = [0, errno];}
    var
     args =
       [variant,
        caml_string_of_jsstring(syscall || ""),
        caml_string_of_jsstring(path || "")];
    return args;
   }
   var caml_named_values = {};
   function caml_named_value(nm){return caml_named_values[nm];}
   function jsoo_sys_getenv(n){
    var process = globalThis.process;
    if(process && process.env && process.env[n] != undefined)
     return process.env[n];
    if(globalThis.jsoo_static_env && globalThis.jsoo_static_env[n])
     return globalThis.jsoo_static_env[n];
   }
   var caml_record_backtrace_flag = 0;
   (function(){
      var r = jsoo_sys_getenv("OCAMLRUNPARAM");
      if(r !== undefined){
       var l = r.split(",");
       for(var i = 0; i < l.length; i++)
        if(l[i] == "b"){
         caml_record_backtrace_flag = 1;
         break;
        }
        else if(l[i].startsWith("b="))
         caml_record_backtrace_flag = + l[i].slice(2);
        else
         continue;
      }
     }
     ());
   var caml_global_data = [0];
   function caml_exn_with_js_backtrace(exn, force){
    if(! exn.js_error || force || exn[0] == 248)
     exn.js_error = new globalThis.Error("Js exception containing backtrace");
    return exn;
   }
   function caml_maybe_attach_backtrace(exn, force){
    return caml_record_backtrace_flag
            ? caml_exn_with_js_backtrace(exn, force)
            : exn;
   }
   function caml_raise_with_args(tag, args){
    throw caml_maybe_attach_backtrace([0, tag].concat(args));
   }
   function caml_is_ml_bytes(s){return s instanceof MlBytes;}
   function caml_is_ml_string(s){
    return typeof s === "string" && ! /[^\x00-\xff]/.test(s);
   }
   function caml_bytes_of_array(a){
    if(! (a instanceof Uint8Array)) a = new Uint8Array(a);
    return new MlBytes(4, a, a.length);
   }
   function caml_bytes_of_jsbytes(s){return new MlBytes(0, s, s.length);}
   function caml_jsbytes_of_string(x){return x;}
   function caml_bytes_of_string(s){
    return caml_bytes_of_jsbytes(caml_jsbytes_of_string(s));
   }
   function caml_raise_with_arg(tag, arg){
    throw caml_maybe_attach_backtrace([0, tag, arg]);
   }
   function caml_raise_with_string(tag, msg){
    caml_raise_with_arg(tag, caml_string_of_jsbytes(msg));
   }
   function caml_raise_sys_error(msg){
    caml_raise_with_string(caml_global_data.Sys_error, msg);
   }
   function caml_raise_no_such_file(name){
    caml_raise_sys_error(name + ": No such file or directory");
   }
   function caml_convert_bytes_to_array(s){
    var a = new Uint8Array(s.l), b = s.c, l = b.length, i = 0;
    for(; i < l; i++) a[i] = b.charCodeAt(i);
    for(l = s.l; i < l; i++) a[i] = 0;
    s.c = a;
    s.t = 4;
    return a;
   }
   function caml_uint8_array_of_bytes(s){
    if(s.t != 4) caml_convert_bytes_to_array(s);
    return s.c;
   }
   function caml_invalid_argument(msg){
    caml_raise_with_string(caml_global_data.Invalid_argument, msg);
   }
   function caml_create_bytes(len){
    if(len < 0) caml_invalid_argument("Bytes.create");
    return new MlBytes(len ? 2 : 9, "", len);
   }
   function caml_ml_bytes_length(s){return s.l;}
   function caml_blit_bytes(s1, i1, s2, i2, len){
    if(len == 0) return 0;
    if(i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length)){
     s2.c =
      s1.t == 4
       ? caml_subarray_to_jsbytes(s1.c, i1, len)
       : i1 == 0 && s1.c.length == len ? s1.c : s1.c.substr(i1, len);
     s2.t = s2.c.length == s2.l ? 0 : 2;
    }
    else if(s2.t == 2 && i2 == s2.c.length){
     s2.c +=
      s1.t == 4
       ? caml_subarray_to_jsbytes(s1.c, i1, len)
       : i1 == 0 && s1.c.length == len ? s1.c : s1.c.substr(i1, len);
     s2.t = s2.c.length == s2.l ? 0 : 2;
    }
    else{
     if(s2.t != 4) caml_convert_bytes_to_array(s2);
     var c1 = s1.c, c2 = s2.c;
     if(s1.t == 4)
      if(i2 <= i1)
       for(var i = 0; i < len; i++) c2[i2 + i] = c1[i1 + i];
      else
       for(var i = len - 1; i >= 0; i--) c2[i2 + i] = c1[i1 + i];
     else{
      var l = Math.min(len, c1.length - i1);
      for(var i = 0; i < l; i++) c2[i2 + i] = c1.charCodeAt(i1 + i);
      for(; i < len; i++) c2[i2 + i] = 0;
     }
    }
    return 0;
   }
   function MlFile(){}
   function MlFakeFile(content){this.data = content;}
   MlFakeFile.prototype = new MlFile();
   MlFakeFile.prototype.constructor = MlFakeFile;
   MlFakeFile.prototype.truncate =
    function(len){
     var old = this.data;
     this.data = caml_create_bytes(len | 0);
     caml_blit_bytes(old, 0, this.data, 0, len);
    };
   MlFakeFile.prototype.length =
    function(){return caml_ml_bytes_length(this.data);};
   MlFakeFile.prototype.write =
    function(offset, buf, pos, len){
     var clen = this.length();
     if(offset + len >= clen){
      var new_str = caml_create_bytes(offset + len), old_data = this.data;
      this.data = new_str;
      caml_blit_bytes(old_data, 0, this.data, 0, clen);
     }
     caml_blit_bytes(caml_bytes_of_array(buf), pos, this.data, offset, len);
     return 0;
    };
   MlFakeFile.prototype.read =
    function(offset, buf, pos, len){
     var clen = this.length();
     if(offset + len >= clen) len = clen - offset;
     if(len){
      var data = caml_create_bytes(len | 0);
      caml_blit_bytes(this.data, offset, data, 0, len);
      buf.set(caml_uint8_array_of_bytes(data), pos);
     }
     return len;
    };
   function MlFakeFd(name, file, flags){
    this.file = file;
    this.name = name;
    this.flags = flags;
   }
   MlFakeFd.prototype.err_closed =
    function(){
     caml_raise_sys_error(this.name + ": file descriptor already closed");
    };
   MlFakeFd.prototype.length =
    function(){if(this.file) return this.file.length(); this.err_closed();};
   MlFakeFd.prototype.write =
    function(offset, buf, pos, len){
     if(this.file) return this.file.write(offset, buf, pos, len);
     this.err_closed();
    };
   MlFakeFd.prototype.read =
    function(offset, buf, pos, len){
     if(this.file) return this.file.read(offset, buf, pos, len);
     this.err_closed();
    };
   MlFakeFd.prototype.close = function(){this.file = undefined;};
   function MlFakeDevice(root, f){
    this.content = {};
    this.root = root;
    this.lookupFun = f;
   }
   MlFakeDevice.prototype.nm = function(name){return this.root + name;};
   MlFakeDevice.prototype.create_dir_if_needed =
    function(name){
     var comp = name.split("/"), res = "";
     for(var i = 0; i < comp.length - 1; i++){
      res += comp[i] + "/";
      if(this.content[res]) continue;
      this.content[res] = Symbol("directory");
     }
    };
   MlFakeDevice.prototype.slash =
    function(name){return /\/$/.test(name) ? name : name + "/";};
   MlFakeDevice.prototype.lookup =
    function(name){
     if(! this.content[name] && this.lookupFun){
      var
       res =
         this.lookupFun
          (caml_string_of_jsbytes(this.root), caml_string_of_jsbytes(name));
      if(res !== 0){
       this.create_dir_if_needed(name);
       this.content[name] = new MlFakeFile(caml_bytes_of_string(res[1]));
      }
     }
    };
   MlFakeDevice.prototype.exists =
    function(name){
     if(name == "") return 1;
     var name_slash = this.slash(name);
     if(this.content[name_slash]) return 1;
     this.lookup(name);
     return this.content[name] ? 1 : 0;
    };
   MlFakeDevice.prototype.isFile =
    function(name){return this.exists(name) && ! this.is_dir(name) ? 1 : 0;};
   MlFakeDevice.prototype.mkdir =
    function(name, mode, raise_unix){
     var unix_error = raise_unix && caml_named_value("Unix.Unix_error");
     if(this.exists(name))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("EEXIST", "mkdir", this.nm(name)));
      else
       caml_raise_sys_error(name + ": File exists");
     var parent = /^(.*)\/[^/]+/.exec(name);
     parent = parent && parent[1] || "";
     if(! this.exists(parent))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("ENOENT", "mkdir", this.nm(parent)));
      else
       caml_raise_sys_error(parent + ": No such file or directory");
     if(! this.is_dir(parent))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("ENOTDIR", "mkdir", this.nm(parent)));
      else
       caml_raise_sys_error(parent + ": Not a directory");
     this.create_dir_if_needed(this.slash(name));
    };
   MlFakeDevice.prototype.rmdir =
    function(name, raise_unix){
     var
      unix_error = raise_unix && caml_named_value("Unix.Unix_error"),
      name_slash = name == "" ? "" : this.slash(name),
      r = new RegExp("^" + name_slash + "([^/]+)");
     if(! this.exists(name))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("ENOENT", "rmdir", this.nm(name)));
      else
       caml_raise_sys_error(name + ": No such file or directory");
     if(! this.is_dir(name))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("ENOTDIR", "rmdir", this.nm(name)));
      else
       caml_raise_sys_error(name + ": Not a directory");
     for(var n in this.content)
      if(n.match(r))
       if(unix_error)
        caml_raise_with_args
         (unix_error, make_unix_err_args("ENOTEMPTY", "rmdir", this.nm(name)));
       else
        caml_raise_sys_error(this.nm(name) + ": Directory not empty");
     delete this.content[name_slash];
    };
   MlFakeDevice.prototype.readdir =
    function(name){
     var name_slash = name == "" ? "" : this.slash(name);
     if(! this.exists(name))
      caml_raise_sys_error(name + ": No such file or directory");
     if(! this.is_dir(name)) caml_raise_sys_error(name + ": Not a directory");
     var r = new RegExp("^" + name_slash + "([^/]+)"), seen = {}, a = [];
     for(var n in this.content){
      var m = n.match(r);
      if(m && ! seen[m[1]]){seen[m[1]] = true; a.push(m[1]);}
     }
     return a;
    };
   MlFakeDevice.prototype.opendir =
    function(name, raise_unix){
     var
      unix_error = raise_unix && caml_named_value("Unix.Unix_error"),
      a = this.readdir(name),
      c = false,
      i = 0;
     return {readSync:
             function(){
              if(c)
               if(unix_error)
                caml_raise_with_args
                 (unix_error,
                  make_unix_err_args("EBADF", "closedir", this.nm(name)));
               else
                caml_raise_sys_error(name + ": closedir failed");
              if(i == a.length) return null;
              var entry = a[i];
              i++;
              return {name: entry};
             },
             closeSync:
             function(){
              if(c)
               if(unix_error)
                caml_raise_with_args
                 (unix_error,
                  make_unix_err_args("EBADF", "closedir", this.nm(name)));
               else
                caml_raise_sys_error(name + ": closedir failed");
              c = true;
              a = [];
             }};
    };
   MlFakeDevice.prototype.is_dir =
    function(name){
     if(name == "") return true;
     var name_slash = this.slash(name);
     return this.content[name_slash] ? 1 : 0;
    };
   MlFakeDevice.prototype.unlink =
    function(name){
     var ok = this.content[name] ? true : false;
     delete this.content[name];
     return ok;
    };
   MlFakeDevice.prototype.open =
    function(name, f){
     var file;
     if(f.rdonly && f.wronly)
      caml_raise_sys_error
       (this.nm(name)
        + " : flags Open_rdonly and Open_wronly are not compatible");
     if(f.text && f.binary)
      caml_raise_sys_error
       (this.nm(name)
        + " : flags Open_text and Open_binary are not compatible");
     this.lookup(name);
     if(this.content[name]){
      if(this.is_dir(name))
       caml_raise_sys_error(this.nm(name) + " : is a directory");
      if(f.create && f.excl)
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      file = this.content[name];
      if(f.truncate) file.truncate();
     }
     else if(f.create){
      this.create_dir_if_needed(name);
      this.content[name] = new MlFakeFile(caml_create_bytes(0));
      file = this.content[name];
     }
     else
      caml_raise_no_such_file(this.nm(name));
     return new MlFakeFd(this.nm(name), file, f);
    };
   MlFakeDevice.prototype.open =
    function(name, f){
     var file;
     if(f.rdonly && f.wronly)
      caml_raise_sys_error
       (this.nm(name)
        + " : flags Open_rdonly and Open_wronly are not compatible");
     if(f.text && f.binary)
      caml_raise_sys_error
       (this.nm(name)
        + " : flags Open_text and Open_binary are not compatible");
     this.lookup(name);
     if(this.content[name]){
      if(this.is_dir(name))
       caml_raise_sys_error(this.nm(name) + " : is a directory");
      if(f.create && f.excl)
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      file = this.content[name];
      if(f.truncate) file.truncate();
     }
     else if(f.create){
      this.create_dir_if_needed(name);
      this.content[name] = new MlFakeFile(caml_create_bytes(0));
      file = this.content[name];
     }
     else
      caml_raise_no_such_file(this.nm(name));
     return new MlFakeFd(this.nm(name), file, f);
    };
   MlFakeDevice.prototype.register =
    function(name, content){
     var file;
     if(this.content[name])
      caml_raise_sys_error(this.nm(name) + " : file already exists");
     if(caml_is_ml_bytes(content)) file = new MlFakeFile(content);
     if(caml_is_ml_string(content))
      file = new MlFakeFile(caml_bytes_of_string(content));
     else if(content instanceof Array)
      file = new MlFakeFile(caml_bytes_of_array(content));
     else if(typeof content === "string")
      file = new MlFakeFile(caml_bytes_of_jsbytes(content));
     else if(content.toString){
      var
       bytes =
         caml_bytes_of_string(caml_string_of_jsstring(content.toString()));
      file = new MlFakeFile(bytes);
     }
     if(file){
      this.create_dir_if_needed(name);
      this.content[name] = file;
     }
     else
      caml_raise_sys_error
       (this.nm(name) + " : registering file with invalid content type");
    };
   MlFakeDevice.prototype.constructor = MlFakeDevice;
   function MlFakeFd_out(fd, flags){
    MlFakeFile.call(this, caml_create_bytes(0));
    this.log = function(s){return 0;};
    if(fd == 1 && typeof console.log == "function")
     this.log = console.log;
    else if(fd == 2 && typeof console.error == "function")
     this.log = console.error;
    else if(typeof console.log == "function") this.log = console.log;
    this.flags = flags;
   }
   MlFakeFd_out.prototype.length = function(){return 0;};
   MlFakeFd_out.prototype.write =
    function(offset, buf, pos, len){
     if(this.log){
      if
       (len > 0 && pos >= 0 && pos + len <= buf.length
        && buf[pos + len - 1] == 10)
       len--;
      var src = caml_create_bytes(len);
      caml_blit_bytes(caml_bytes_of_array(buf), pos, src, 0, len);
      this.log(src.toUtf16());
      return 0;
     }
     caml_raise_sys_error(this.fd + ": file descriptor already closed");
    };
   MlFakeFd_out.prototype.read =
    function(offset, buf, pos, len){
     caml_raise_sys_error(this.fd + ": file descriptor is write only");
    };
   MlFakeFd_out.prototype.close = function(){this.log = undefined;};
   var caml_int64_offset = Math.pow(2, - 24);
   function caml_raise_constant(tag){throw tag;}
   function caml_raise_zero_divide(){
    caml_raise_constant(caml_global_data.Division_by_zero);
   }
   function MlInt64(lo, mi, hi){
    this.lo = lo & 0xffffff;
    this.mi = mi & 0xffffff;
    this.hi = hi & 0xffff;
   }
   MlInt64.prototype.caml_custom = "_j";
   MlInt64.prototype.copy =
    function(){return new MlInt64(this.lo, this.mi, this.hi);};
   MlInt64.prototype.ucompare =
    function(x){
     if(this.hi > x.hi) return 1;
     if(this.hi < x.hi) return - 1;
     if(this.mi > x.mi) return 1;
     if(this.mi < x.mi) return - 1;
     if(this.lo > x.lo) return 1;
     if(this.lo < x.lo) return - 1;
     return 0;
    };
   MlInt64.prototype.compare =
    function(x){
     var hi = this.hi << 16, xhi = x.hi << 16;
     if(hi > xhi) return 1;
     if(hi < xhi) return - 1;
     if(this.mi > x.mi) return 1;
     if(this.mi < x.mi) return - 1;
     if(this.lo > x.lo) return 1;
     if(this.lo < x.lo) return - 1;
     return 0;
    };
   MlInt64.prototype.neg =
    function(){
     var
      lo = - this.lo,
      mi = - this.mi + (lo >> 24),
      hi = - this.hi + (mi >> 24);
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.add =
    function(x){
     var
      lo = this.lo + x.lo,
      mi = this.mi + x.mi + (lo >> 24),
      hi = this.hi + x.hi + (mi >> 24);
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.sub =
    function(x){
     var
      lo = this.lo - x.lo,
      mi = this.mi - x.mi + (lo >> 24),
      hi = this.hi - x.hi + (mi >> 24);
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.mul =
    function(x){
     var
      lo = this.lo * x.lo,
      mi = (lo * caml_int64_offset | 0) + this.mi * x.lo + this.lo * x.mi,
      hi =
        (mi * caml_int64_offset | 0) + this.hi * x.lo + this.mi * x.mi
        + this.lo * x.hi;
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.isZero =
    function(){return (this.lo | this.mi | this.hi) == 0;};
   MlInt64.prototype.isNeg = function(){return this.hi << 16 < 0;};
   MlInt64.prototype.and =
    function(x){
     return new MlInt64(this.lo & x.lo, this.mi & x.mi, this.hi & x.hi);
    };
   MlInt64.prototype.or =
    function(x){
     return new MlInt64(this.lo | x.lo, this.mi | x.mi, this.hi | x.hi);
    };
   MlInt64.prototype.xor =
    function(x){
     return new MlInt64(this.lo ^ x.lo, this.mi ^ x.mi, this.hi ^ x.hi);
    };
   MlInt64.prototype.shift_left =
    function(s){
     s = s & 63;
     if(s == 0) return this;
     if(s < 24)
      return new
              MlInt64
              (this.lo << s,
               this.mi << s | this.lo >> 24 - s,
               this.hi << s | this.mi >> 24 - s);
     if(s < 48)
      return new
              MlInt64
              (0, this.lo << s - 24, this.mi << s - 24 | this.lo >> 48 - s);
     return new MlInt64(0, 0, this.lo << s - 48);
    };
   MlInt64.prototype.shift_right_unsigned =
    function(s){
     s = s & 63;
     if(s == 0) return this;
     if(s < 24)
      return new
              MlInt64
              (this.lo >> s | this.mi << 24 - s,
               this.mi >> s | this.hi << 24 - s,
               this.hi >> s);
     if(s < 48)
      return new
              MlInt64
              (this.mi >> s - 24 | this.hi << 48 - s, this.hi >> s - 24, 0);
     return new MlInt64(this.hi >> s - 48, 0, 0);
    };
   MlInt64.prototype.shift_right =
    function(s){
     s = s & 63;
     if(s == 0) return this;
     var h = this.hi << 16 >> 16;
     if(s < 24)
      return new
              MlInt64
              (this.lo >> s | this.mi << 24 - s,
               this.mi >> s | h << 24 - s,
               this.hi << 16 >> s >>> 16);
     var sign = this.hi << 16 >> 31;
     if(s < 48)
      return new
              MlInt64
              (this.mi >> s - 24 | this.hi << 48 - s,
               this.hi << 16 >> s - 24 >> 16,
               sign & 0xffff);
     return new MlInt64(this.hi << 16 >> s - 32, sign, sign);
    };
   MlInt64.prototype.lsl1 =
    function(){
     this.hi = this.hi << 1 | this.mi >> 23;
     this.mi = (this.mi << 1 | this.lo >> 23) & 0xffffff;
     this.lo = this.lo << 1 & 0xffffff;
    };
   MlInt64.prototype.lsr1 =
    function(){
     this.lo = (this.lo >>> 1 | this.mi << 23) & 0xffffff;
     this.mi = (this.mi >>> 1 | this.hi << 23) & 0xffffff;
     this.hi = this.hi >>> 1;
    };
   MlInt64.prototype.udivmod =
    function(x){
     var
      offset = 0,
      modulus = this.copy(),
      divisor = x.copy(),
      quotient = new MlInt64(0, 0, 0);
     while(modulus.ucompare(divisor) > 0){offset++; divisor.lsl1();}
     while(offset >= 0){
      offset--;
      quotient.lsl1();
      if(modulus.ucompare(divisor) >= 0){
       quotient.lo++;
       modulus = modulus.sub(divisor);
      }
      divisor.lsr1();
     }
     return {quotient: quotient, modulus: modulus};
    };
   MlInt64.prototype.div =
    function(y){
     var x = this;
     if(y.isZero()) caml_raise_zero_divide();
     var sign = x.hi ^ y.hi;
     if(x.hi & 0x8000) x = x.neg();
     if(y.hi & 0x8000) y = y.neg();
     var q = x.udivmod(y).quotient;
     if(sign & 0x8000) q = q.neg();
     return q;
    };
   MlInt64.prototype.mod =
    function(y){
     var x = this;
     if(y.isZero()) caml_raise_zero_divide();
     var sign = x.hi;
     if(x.hi & 0x8000) x = x.neg();
     if(y.hi & 0x8000) y = y.neg();
     var r = x.udivmod(y).modulus;
     if(sign & 0x8000) r = r.neg();
     return r;
    };
   MlInt64.prototype.toInt = function(){return this.lo | this.mi << 24;};
   MlInt64.prototype.toFloat =
    function(){
     return (this.hi << 16) * Math.pow(2, 32) + this.mi * Math.pow(2, 24)
            + this.lo;
    };
   MlInt64.prototype.toArray =
    function(){
     return [this.hi >> 8,
             this.hi & 0xff,
             this.mi >> 16,
             this.mi >> 8 & 0xff,
             this.mi & 0xff,
             this.lo >> 16,
             this.lo >> 8 & 0xff,
             this.lo & 0xff];
    };
   MlInt64.prototype.lo32 =
    function(){return this.lo | (this.mi & 0xff) << 24;};
   MlInt64.prototype.hi32 =
    function(){return this.mi >>> 8 & 0xffff | this.hi << 16;};
   function MlMutex(){this.locked = false;}
   function MlNat(x){
    this.data = new Int32Array(x);
    this.length = this.data.length + 2;
   }
   MlNat.prototype.caml_custom = "_nat";
   function caml_ml_string_length(s){return s.length;}
   function caml_string_unsafe_get(s, i){return s.charCodeAt(i);}
   function caml_uint8_array_of_string(s){
    var l = caml_ml_string_length(s), a = new Uint8Array(l), i = 0;
    for(; i < l; i++) a[i] = caml_string_unsafe_get(s, i);
    return a;
   }
   function caml_bytes_bound_error(){
    caml_invalid_argument("index out of bounds");
   }
   function caml_bytes_unsafe_set(s, i, c){
    c &= 0xff;
    if(s.t != 4){
     if(i == s.c.length){
      s.c += String.fromCharCode(c);
      if(i + 1 == s.l) s.t = 0;
      return 0;
     }
     caml_convert_bytes_to_array(s);
    }
    s.c[i] = c;
    return 0;
   }
   function caml_bytes_set(s, i, c){
    if(i >>> 0 >= s.l) caml_bytes_bound_error();
    return caml_bytes_unsafe_set(s, i, c);
   }
   function MlNodeFd(fd, flags){
    this.fs = require("fs");
    this.fd = fd;
    this.flags = flags;
   }
   MlNodeFd.prototype = new MlFile();
   MlNodeFd.prototype.constructor = MlNodeFd;
   MlNodeFd.prototype.truncate =
    function(len){
     try{this.fs.ftruncateSync(this.fd, len | 0);}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeFd.prototype.length =
    function(){
     try{return this.fs.fstatSync(this.fd).size;}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeFd.prototype.write =
    function(offset, buf, buf_offset, len){
     try{
      if(this.flags.isCharacterDevice)
       this.fs.writeSync(this.fd, buf, buf_offset, len);
      else
       this.fs.writeSync(this.fd, buf, buf_offset, len, offset);
     }
     catch(err){caml_raise_sys_error(err.toString());}
     return 0;
    };
   MlNodeFd.prototype.read =
    function(offset, a, buf_offset, len){
     try{
      if(this.flags.isCharacterDevice)
       var read = this.fs.readSync(this.fd, a, buf_offset, len);
      else
       var read = this.fs.readSync(this.fd, a, buf_offset, len, offset);
      return read;
     }
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeFd.prototype.close =
    function(){
     try{this.fs.closeSync(this.fd); return 0;}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   function MlNodeDevice(root){this.fs = require("fs"); this.root = root;}
   MlNodeDevice.prototype.nm = function(name){return this.root + name;};
   MlNodeDevice.prototype.exists =
    function(name){
     try{return this.fs.existsSync(this.nm(name)) ? 1 : 0;}
     catch(err){return 0;}
    };
   MlNodeDevice.prototype.isFile =
    function(name){
     try{return this.fs.statSync(this.nm(name)).isFile() ? 1 : 0;}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeDevice.prototype.mkdir =
    function(name, mode, raise_unix){
     try{this.fs.mkdirSync(this.nm(name), {mode: mode}); return 0;}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.rmdir =
    function(name, raise_unix){
     try{this.fs.rmdirSync(this.nm(name)); return 0;}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.readdir =
    function(name, raise_unix){
     try{return this.fs.readdirSync(this.nm(name));}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.is_dir =
    function(name){
     try{return this.fs.statSync(this.nm(name)).isDirectory() ? 1 : 0;}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeDevice.prototype.unlink =
    function(name, raise_unix){
     try{
      var b = this.fs.existsSync(this.nm(name)) ? 1 : 0;
      this.fs.unlinkSync(this.nm(name));
      return b;
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.open =
    function(name, f, raise_unix){
     var consts = require("constants"), res = 0;
     for(var key in f)
      switch(key){
        case "rdonly":
         res |= consts.O_RDONLY; break;
        case "wronly":
         res |= consts.O_WRONLY; break;
        case "append":
         res |= consts.O_WRONLY | consts.O_APPEND; break;
        case "create":
         res |= consts.O_CREAT; break;
        case "truncate":
         res |= consts.O_TRUNC; break;
        case "excl":
         res |= consts.O_EXCL; break;
        case "binary":
         res |= consts.O_BINARY; break;
        case "text":
         res |= consts.O_TEXT; break;
        case "nonblock":
         res |= consts.O_NONBLOCK; break;
      }
     try{
      var
       fd = this.fs.openSync(this.nm(name), res),
       isCharacterDevice =
         this.fs.lstatSync(this.nm(name)).isCharacterDevice();
      f.isCharacterDevice = isCharacterDevice;
      return new MlNodeFd(fd, f);
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.rename =
    function(o, n, raise_unix){
     try{this.fs.renameSync(this.nm(o), this.nm(n));}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.stat =
    function(name, raise_unix){
     try{
      var js_stats = this.fs.statSync(this.nm(name));
      return this.stats_from_js(js_stats);
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.lstat =
    function(name, raise_unix){
     try{
      var js_stats = this.fs.lstatSync(this.nm(name));
      return this.stats_from_js(js_stats);
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.symlink =
    function(to_dir, target, path, raise_unix){
     try{
      this.fs.symlinkSync
       (this.nm(target), this.nm(path), to_dir ? "dir" : "file");
      return 0;
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.readlink =
    function(name, raise_unix){
     try{
      var link = this.fs.readlinkSync(this.nm(name), "utf8");
      return caml_string_of_jsstring(link);
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.opendir =
    function(name, raise_unix){
     try{return this.fs.opendirSync(this.nm(name));}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.raise_nodejs_error =
    function(err, raise_unix){
     var unix_error = caml_named_value("Unix.Unix_error");
     if(raise_unix && unix_error){
      var
       args = make_unix_err_args(err.code, err.syscall, err.path, err.errno);
      caml_raise_with_args(unix_error, args);
     }
     else
      caml_raise_sys_error(err.toString());
    };
   MlNodeDevice.prototype.stats_from_js =
    function(js_stats){
     var file_kind;
     if(js_stats.isFile())
      file_kind = 0;
     else if(js_stats.isDirectory())
      file_kind = 1;
     else if(js_stats.isCharacterDevice())
      file_kind = 2;
     else if(js_stats.isBlockDevice())
      file_kind = 3;
     else if(js_stats.isSymbolicLink())
      file_kind = 4;
     else if(js_stats.isFIFO())
      file_kind = 5;
     else if(js_stats.isSocket()) file_kind = 6;
     return [0,
             js_stats.dev,
             js_stats.ino,
             file_kind,
             js_stats.mode,
             js_stats.nlink,
             js_stats.uid,
             js_stats.gid,
             js_stats.rdev,
             js_stats.size,
             js_stats.atimeMs,
             js_stats.mtimeMs,
             js_stats.ctimeMs];
    };
   MlNodeDevice.prototype.constructor = MlNodeDevice;
   var MlObjectTable;
   if(typeof globalThis.Map === "undefined")
    MlObjectTable =
     function(){
       function NaiveLookup(objs){this.objs = objs;}
       NaiveLookup.prototype.get =
        function(v){
         for(var i = 0; i < this.objs.length; i++)
          if(this.objs[i] === v) return i;
        };
       NaiveLookup.prototype.set = function(){};
       return function(){
        this.objs = [];
        this.lookup = new NaiveLookup(this.objs);};
      }
      ();
   else
    MlObjectTable =
     function(){this.objs = []; this.lookup = new globalThis.Map();};
   MlObjectTable.prototype.store =
    function(v){this.lookup.set(v, this.objs.length); this.objs.push(v);};
   MlObjectTable.prototype.recall =
    function(v){
     var i = this.lookup.get(v);
     return i === undefined ? undefined : this.objs.length - i;
    };
   function MlStringReader(s, i){
    this.s = caml_jsbytes_of_string(s);
    this.i = i;
   }
   MlStringReader.prototype =
    {read8u: function(){return this.s.charCodeAt(this.i++);},
     read8s: function(){return this.s.charCodeAt(this.i++) << 24 >> 24;},
     read16u:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 2;
      return s.charCodeAt(i) << 8 | s.charCodeAt(i + 1);
     },
     read16s:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 2;
      return s.charCodeAt(i) << 24 >> 16 | s.charCodeAt(i + 1);
     },
     read32u:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 4;
      return (s.charCodeAt(i) << 24 | s.charCodeAt(i + 1) << 16
             | s.charCodeAt(i + 2) << 8
             | s.charCodeAt(i + 3))
             >>> 0;
     },
     read32s:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 4;
      return s.charCodeAt(i) << 24 | s.charCodeAt(i + 1) << 16
             | s.charCodeAt(i + 2) << 8
             | s.charCodeAt(i + 3);
     },
     readstr:
     function(len){
      var i = this.i;
      this.i = i + len;
      return caml_string_of_jsbytes(this.s.substring(i, i + len));
     },
     readuint8array:
     function(len){
      var b = new Uint8Array(len), s = this.s, i = this.i;
      for(var j = 0; j < len; j++) b[j] = s.charCodeAt(i + j);
      this.i = i + len;
      return b;
     }};
   function caml_int64_create_lo_hi(lo, hi){
    return new
            MlInt64
            (lo & 0xffffff,
             lo >>> 24 & 0xff | (hi & 0xffff) << 8,
             hi >>> 16 & 0xffff);
   }
   function caml_int64_hi32(v){return v.hi32();}
   function caml_int64_lo32(v){return v.lo32();}
   function caml_array_bound_error(){
    caml_invalid_argument("index out of bounds");
   }
   var caml_ba_custom_name = "_bigarr02";
   function Ml_Bigarray(kind, layout, dims, buffer){
    this.kind = kind;
    this.layout = layout;
    this.dims = dims;
    this.data = buffer;
   }
   Ml_Bigarray.prototype.caml_custom = caml_ba_custom_name;
   Ml_Bigarray.prototype.offset =
    function(arg){
     var ofs = 0;
     if(typeof arg === "number") arg = [arg];
     if(! (arg instanceof Array))
      caml_invalid_argument("bigarray.js: invalid offset");
     if(this.dims.length != arg.length)
      caml_invalid_argument("Bigarray.get/set: bad number of dimensions");
     if(this.layout == 0)
      for(var i = 0; i < this.dims.length; i++){
       if(arg[i] < 0 || arg[i] >= this.dims[i]) caml_array_bound_error();
       ofs = ofs * this.dims[i] + arg[i];
      }
     else
      for(var i = this.dims.length - 1; i >= 0; i--){
       if(arg[i] < 1 || arg[i] > this.dims[i]) caml_array_bound_error();
       ofs = ofs * this.dims[i] + (arg[i] - 1);
      }
     return ofs;
    };
   Ml_Bigarray.prototype.get =
    function(ofs){
     switch(this.kind){
       case 7:
        var l = this.data[ofs * 2 + 0], h = this.data[ofs * 2 + 1];
        return caml_int64_create_lo_hi(l, h);
       case 10:
       case 11:
        var r = this.data[ofs * 2 + 0], i = this.data[ofs * 2 + 1];
        return [254, r, i];
       default: return this.data[ofs];
     }
    };
   Ml_Bigarray.prototype.set =
    function(ofs, v){
     switch(this.kind){
       case 7:
        this.data[ofs * 2 + 0] = caml_int64_lo32(v);
        this.data[ofs * 2 + 1] = caml_int64_hi32(v);
        break;
       case 10:
       case 11:
        this.data[ofs * 2 + 0] = v[1]; this.data[ofs * 2 + 1] = v[2]; break;
       default: this.data[ofs] = v; break;
     }
     return 0;
    };
   Ml_Bigarray.prototype.fill =
    function(v){
     switch(this.kind){
       case 7:
        var a = caml_int64_lo32(v), b = caml_int64_hi32(v);
        if(a == b)
         this.data.fill(a);
        else
         for(var i = 0; i < this.data.length; i++)
          this.data[i] = i % 2 == 0 ? a : b;
        break;
       case 10:
       case 11:
        var im = v[1], re = v[2];
        if(im == re)
         this.data.fill(im);
        else
         for(var i = 0; i < this.data.length; i++)
          this.data[i] = i % 2 == 0 ? im : re;
        break;
       default: this.data.fill(v); break;
     }
    };
   Ml_Bigarray.prototype.compare =
    function(b, total){
     if(this.layout != b.layout || this.kind != b.kind){
      var k1 = this.kind | this.layout << 8, k2 = b.kind | b.layout << 8;
      return k2 - k1;
     }
     if(this.dims.length != b.dims.length)
      return b.dims.length - this.dims.length;
     for(var i = 0; i < this.dims.length; i++)
      if(this.dims[i] != b.dims[i]) return this.dims[i] < b.dims[i] ? - 1 : 1;
     switch(this.kind){
       case 0:
       case 1:
       case 10:
       case 11:
        var x, y;
        for(var i = 0; i < this.data.length; i++){
         x = this.data[i];
         y = b.data[i];
         if(x < y) return - 1;
         if(x > y) return 1;
         if(x != y){
          if(! total) return NaN;
          if(x == x) return 1;
          if(y == y) return - 1;
         }
        }
        break;
       case 7:
        for(var i = 0; i < this.data.length; i += 2){
         if(this.data[i + 1] < b.data[i + 1]) return - 1;
         if(this.data[i + 1] > b.data[i + 1]) return 1;
         if(this.data[i] >>> 0 < b.data[i] >>> 0) return - 1;
         if(this.data[i] >>> 0 > b.data[i] >>> 0) return 1;
        }
        break;
       case 2:
       case 3:
       case 4:
       case 5:
       case 6:
       case 8:
       case 9:
       case 12:
        for(var i = 0; i < this.data.length; i++){
         if(this.data[i] < b.data[i]) return - 1;
         if(this.data[i] > b.data[i]) return 1;
        }
        break;
     }
     return 0;
    };
   function Ml_Bigarray_c_1_1(kind, layout, dims, buffer){
    this.kind = kind;
    this.layout = layout;
    this.dims = dims;
    this.data = buffer;
   }
   Ml_Bigarray_c_1_1.prototype = new Ml_Bigarray();
   Ml_Bigarray_c_1_1.prototype.offset =
    function(arg){
     if(typeof arg !== "number")
      if(arg instanceof Array && arg.length == 1)
       arg = arg[0];
      else
       caml_invalid_argument("Ml_Bigarray_c_1_1.offset");
     if(arg < 0 || arg >= this.dims[0]) caml_array_bound_error();
     return arg;
    };
   Ml_Bigarray_c_1_1.prototype.get = function(ofs){return this.data[ofs];};
   Ml_Bigarray_c_1_1.prototype.set =
    function(ofs, v){this.data[ofs] = v; return 0;};
   Ml_Bigarray_c_1_1.prototype.fill =
    function(v){this.data.fill(v); return 0;};
   function Optional_bool_val(mlOptBool, def){
    return typeof mlOptBool == "object" ? mlOptBool[1] !== 0 : def;
   }
   function Optional_val(mlOptVal, def){
    return typeof mlOptVal == "object" ? mlOptVal[1] : def;
   }
   var
    REPEAT_TAG = {NO_REPEAT: 0, REPEAT_X: 1, REPEAT_Y: 2, REPEAT_XY: 3},
    tag_to_repeat =
      new
       joo_global_object.Map
       ([[REPEAT_TAG.NO_REPEAT, "no-repeat"],
         [REPEAT_TAG.REPEAT_X, "repeat-x"],
         [REPEAT_TAG.REPEAT_Y, "repeat-y"],
         [REPEAT_TAG.REPEAT_XY, "repeat"]]);
   function Repeat_val(repeat){return tag_to_repeat.get(repeat);}
   var
    SLANT = {ROMAN: "normal", ITALIC: "italic", OBLIQUE: "oblique"},
    SLANT_TAG = {ROMAN: 0, ITALIC: 1, OBLIQUE: 2},
    tag_to_slant =
      new
       joo_global_object.Map
       ([[SLANT_TAG.ROMAN, SLANT.ROMAN],
         [SLANT_TAG.ITALIC, SLANT.ITALIC],
         [SLANT_TAG.OBLIQUE, SLANT.OBLIQUE]]);
   function Slant_val(slant){return tag_to_slant.get(slant);}
   function UInt8ArrayReader(s, i){this.s = s; this.i = i;}
   UInt8ArrayReader.prototype =
    {read8u: function(){return this.s[this.i++];},
     read8s: function(){return this.s[this.i++] << 24 >> 24;},
     read16u:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 2;
      return s[i] << 8 | s[i + 1];
     },
     read16s:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 2;
      return s[i] << 24 >> 16 | s[i + 1];
     },
     read32u:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 4;
      return (s[i] << 24 | s[i + 1] << 16 | s[i + 2] << 8 | s[i + 3]) >>> 0;
     },
     read32s:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 4;
      return s[i] << 24 | s[i + 1] << 16 | s[i + 2] << 8 | s[i + 3];
     },
     readstr:
     function(len){
      var i = this.i;
      this.i = i + len;
      return caml_string_of_array(this.s.subarray(i, i + len));
     },
     readuint8array:
     function(len){
      var i = this.i;
      this.i = i + len;
      return this.s.subarray(i, i + len);
     }};
   var
    button_to_tag =
      new
       joo_global_object.Map
       ([[BUTTON.NONE, BUTTON_TAG.NONE],
         [BUTTON.LEFT, BUTTON_TAG.LEFT],
         [BUTTON.MIDDLE, BUTTON_TAG.MIDDLE],
         [BUTTON.MIDDLE, BUTTON_TAG.RIGHT],
         [BUTTON.WHEEL_UP, BUTTON_TAG.WHEEL_UP],
         [BUTTON.WHEEL_DOWN, BUTTON_TAG.WHEEL_DOWN]]);
   function Val_button(button){return button_to_tag.get(button);}
   var
    button_state_to_tag =
      new
       joo_global_object.Map
       ([[BUTTON_STATE.UP, BUTTON_STATE_TAG.UP],
         [BUTTON_STATE.DOWN, BUTTON_STATE_TAG.DOWN]]);
   function Val_button_state(state){return button_state_to_tag.get(state);}
   var
    cap_type_to_tag =
      new
       joo_global_object.Map
       ([["butt", CAP_TYPE_TAG.BUTT],
         ["square", CAP_TYPE_TAG.SQUARE],
         ["round", CAP_TYPE_TAG.ROUND]]);
   function Val_cap_type(cap){return cap_type_to_tag.get(cap);}
   var
    compop_to_tag =
      new
       joo_global_object.Map
       ([["source-over", COMPOP_TAG.SOURCE_OVER],
         ["source-in", COMPOP_TAG.SOURCE_IN],
         ["source-out", COMPOP_TAG.SOURCE_OUT],
         ["source-atop", COMPOP_TAG.SOURCE_ATOP],
         ["destination-over", COMPOP_TAG.DESTINATION_OVER],
         ["destination-in", COMPOP_TAG.DESTINATION_IN],
         ["destination-out", COMPOP_TAG.DESTINATION_OUT],
         ["destination-atop", COMPOP_TAG.DESTINATION_ATOP],
         ["lighter", COMPOP_TAG.LIGHTER],
         ["copy", COMPOP_TAG.COPY],
         ["xor", COMPOP_TAG.XOR],
         ["multiply", COMPOP_TAG.MULTIPLY],
         ["screen", COMPOP_TAG.SCREEN],
         ["overlay", COMPOP_TAG.OVERLAY],
         ["darken", COMPOP_TAG.DARKEN],
         ["lighten", COMPOP_TAG.LIGHTEN],
         ["color-dodge", COMPOP_TAG.COLOR_DODGE],
         ["color-burn", COMPOP_TAG.COLOR_BURN],
         ["hard-light", COMPOP_TAG.HARD_LIGHT],
         ["soft-light", COMPOP_TAG.SOFT_LIGHT],
         ["difference", COMPOP_TAG.DIFFERENCE],
         ["exclusion", COMPOP_TAG.EXCLUSION],
         ["hue", COMPOP_TAG.HUE],
         ["saturation", COMPOP_TAG.SATURATION],
         ["color", COMPOP_TAG.COLOR],
         ["luminosity", COMPOP_TAG.LUMINOSITY]]);
   function Val_compop(compop){return compop_to_tag.get(compop);}
   function _color_of_int(i){
    var a = (i & 0xFF000000) >>> 24;
    if(a == 255) return "#" + (i & 0x00FFFFFF).toString(16).padStart(6, "0");
    var
     b = i & 0x000000FF,
     g = (i & 0x0000FF00) >>> 8,
     r = (i & 0x00FF0000) >>> 16;
    return "rgba(" + r + "," + g + "," + b + "," + a / 255.0 + ")";
   }
   function Val_draw_style(style){
    var s = 0;
    switch(style[0]){
      case STYLE_TAG.COLOR:
       s = _color_of_int(style[1]); break;
      case STYLE_TAG.GRADIENT:
      case STYLE_TAG.PATTERN: s = style[1]; break;
      default: break;
    }
    return s;
   }
   var
    focus_to_tag =
      new
       joo_global_object.Map
       ([[FOCUS.OUT, FOCUS_TAG.OUT], [FOCUS.IN, FOCUS_TAG.IN]]);
   function Val_focus_in_out(focus){return focus_to_tag.get(focus);}
   var
    join_type_to_tag =
      new
       joo_global_object.Map
       ([["round", JOIN_TYPE_TAG.ROUND],
         ["miter", JOIN_TYPE_TAG.MITER],
         ["bevel", JOIN_TYPE_TAG.BEVEL]]);
   function Val_join_type(join){return join_type_to_tag.get(join);}
   var
    kc_to_tag =
      new
       joo_global_object.Map
       ([[KEY.ESCAPE, KEY_TAG.ESCAPE],
         [KEY.F1, KEY_TAG.F1],
         [KEY.F2, KEY_TAG.F2],
         [KEY.F3, KEY_TAG.F3],
         [KEY.F4, KEY_TAG.F4],
         [KEY.F5, KEY_TAG.F5],
         [KEY.F6, KEY_TAG.F6],
         [KEY.F7, KEY_TAG.F7],
         [KEY.F8, KEY_TAG.F8],
         [KEY.F9, KEY_TAG.F9],
         [KEY.F10, KEY_TAG.F10],
         [KEY.F11, KEY_TAG.F11],
         [KEY.F12, KEY_TAG.F12],
         [KEY.PRINTSCREEN, KEY_TAG.PRINTSCREEN],
         [KEY.SCROLLLOCK, KEY_TAG.SCROLLLOCK],
         [KEY.PAUSE, KEY_TAG.PAUSE],
         [KEY.GRAVE_TILDE, KEY_TAG.GRAVE_TILDE],
         [KEY._1_EXCLAMATION, KEY_TAG._1_EXCLAMATION],
         [KEY._2_AT, KEY_TAG._2_AT],
         [KEY._3_NUMBER, KEY_TAG._3_NUMBER],
         [KEY._4_DOLLAR, KEY_TAG._4_DOLLAR],
         [KEY._5_PERCENT, KEY_TAG._5_PERCENT],
         [KEY._6_CARET, KEY_TAG._6_CARET],
         [KEY._7_AMPERSAND, KEY_TAG._7_AMPERSAND],
         [KEY._8_ASTERISK, KEY_TAG._8_ASTERISK],
         [KEY._9_LPARENTHESIS, KEY_TAG._9_LPARENTHESIS],
         [KEY._0_RPARENTHESIS, KEY_TAG._0_RPARENTHESIS],
         [KEY.MINUS_UNDERSCORE, KEY_TAG.MINUS_UNDERSCORE],
         [KEY.EQUAL_PLUS, KEY_TAG.EQUAL_PLUS],
         [KEY.BACKSPACE, KEY_TAG.BACKSPACE],
         [KEY.TAB, KEY_TAG.TAB],
         [KEY.Q, KEY_TAG.Q],
         [KEY.W, KEY_TAG.W],
         [KEY.E, KEY_TAG.E],
         [KEY.R, KEY_TAG.R],
         [KEY.T, KEY_TAG.T],
         [KEY.Y, KEY_TAG.Y],
         [KEY.U, KEY_TAG.U],
         [KEY.I, KEY_TAG.I],
         [KEY.O, KEY_TAG.O],
         [KEY.P, KEY_TAG.P],
         [KEY.LBRACKET_CURLY, KEY_TAG.LBRACKET_CURLY],
         [KEY.RBRACKET_CURLY, KEY_TAG.RBRACKET_CURLY],
         [KEY.BACKSLASH_PIPE, KEY_TAG.BACKSLASH_PIPE],
         [KEY.CAPSLOCK, KEY_TAG.CAPSLOCK],
         [KEY.A, KEY_TAG.A],
         [KEY.S, KEY_TAG.S],
         [KEY.D, KEY_TAG.D],
         [KEY.F, KEY_TAG.F],
         [KEY.G, KEY_TAG.G],
         [KEY.H, KEY_TAG.H],
         [KEY.J, KEY_TAG.J],
         [KEY.K, KEY_TAG.K],
         [KEY.L, KEY_TAG.L],
         [KEY.SEMICOLON_COLON, KEY_TAG.SEMICOLON_COLON],
         [KEY.QUOTE_DOUBLEQUOTE, KEY_TAG.QUOTE_DOUBLEQUOTE],
         [KEY.NONUS_NUMBER_TILDE, KEY_TAG.NONUS_NUMBER_TILDE],
         [KEY.RETURN, KEY_TAG.RETURN],
         [KEY.LSHIFT, KEY_TAG.LSHIFT],
         [KEY.NONUS_BACKSLASH_PIPE, KEY_TAG.NONUS_BACKSLASH_PIPE],
         [KEY.Z, KEY_TAG.Z],
         [KEY.X, KEY_TAG.X],
         [KEY.C, KEY_TAG.C],
         [KEY.V, KEY_TAG.V],
         [KEY.B, KEY_TAG.B],
         [KEY.N, KEY_TAG.N],
         [KEY.M, KEY_TAG.M],
         [KEY.COMMA_LESS, KEY_TAG.COMMA_LESS],
         [KEY.PERIOD_GREATER, KEY_TAG.PERIOD_GREATER],
         [KEY.SLASH_QUESTION, KEY_TAG.SLASH_QUESTION],
         [KEY.RSHIFT, KEY_TAG.RSHIFT],
         [KEY.LCONTROL, KEY_TAG.LCONTROL],
         [KEY.LMETA, KEY_TAG.LMETA],
         [KEY.LALT, KEY_TAG.LALT],
         [KEY.SPACEBAR, KEY_TAG.SPACEBAR],
         [KEY.RALT, KEY_TAG.RALT],
         [KEY.RMETA, KEY_TAG.RMETA],
         [KEY.MENU, KEY_TAG.MENU],
         [KEY.RCONTROL, KEY_TAG.RCONTROL],
         [KEY.INSERT, KEY_TAG.INSERT],
         [KEY.HOME, KEY_TAG.HOME],
         [KEY.PAGEUP, KEY_TAG.PAGEUP],
         [KEY.DELETEFORWARD, KEY_TAG.DELETEFORWARD],
         [KEY.END, KEY_TAG.END],
         [KEY.PAGEDOWN, KEY_TAG.PAGEDOWN],
         [KEY.UPARROW, KEY_TAG.UPARROW],
         [KEY.LEFTARROW, KEY_TAG.LEFTARROW],
         [KEY.DOWNARROW, KEY_TAG.DOWNARROW],
         [KEY.RIGHTARROW, KEY_TAG.RIGHTARROW],
         [KEY.PAD_NUMLOCK_CLEAR, KEY_TAG.PAD_NUMLOCK_CLEAR],
         [KEY.PAD_EQUALS, KEY_TAG.PAD_EQUALS],
         [KEY.PAD_DIVIDE, KEY_TAG.PAD_DIVIDE],
         [KEY.PAD_MULTIPLY, KEY_TAG.PAD_MULTIPLY],
         [KEY.PAD_MINUS, KEY_TAG.PAD_MINUS],
         [KEY.PAD_7_HOME, KEY_TAG.PAD_7_HOME],
         [KEY.PAD_8_UPARROW, KEY_TAG.PAD_8_UPARROW],
         [KEY.PAD_9_PAGEUP, KEY_TAG.PAD_9_PAGEUP],
         [KEY.PAD_PLUS, KEY_TAG.PAD_PLUS],
         [KEY.PAD_4_LEFTARROW, KEY_TAG.PAD_4_LEFTARROW],
         [KEY.PAD_5, KEY_TAG.PAD_5],
         [KEY.PAD_6_RIGHTARROW, KEY_TAG.PAD_6_RIGHTARROW],
         [KEY.PAD_COMMA, KEY_TAG.PAD_COMMA],
         [KEY.PAD_1_END, KEY_TAG.PAD_1_END],
         [KEY.PAD_2_DOWNARROW, KEY_TAG.PAD_2_DOWNARROW],
         [KEY.PAD_3_PAGEDOWN, KEY_TAG.PAD_3_PAGEDOWN],
         [KEY.PAD_0_INSERT, KEY_TAG.PAD_0_INSERT],
         [KEY.PAD_DECIMAL_DELETE, KEY_TAG.PAD_DECIMAL_DELETE],
         [KEY.PAD_ENTER, KEY_TAG.PAD_ENTER],
         [KEY.F13, KEY_TAG.F13],
         [KEY.F14, KEY_TAG.F14],
         [KEY.F15, KEY_TAG.F15],
         [KEY.F16, KEY_TAG.F16],
         [KEY.F17, KEY_TAG.F17],
         [KEY.F18, KEY_TAG.F18],
         [KEY.F19, KEY_TAG.F19],
         [KEY.F20, KEY_TAG.F20],
         [KEY.F21, KEY_TAG.F21],
         [KEY.F22, KEY_TAG.F22],
         [KEY.F23, KEY_TAG.F23],
         [KEY.F24, KEY_TAG.F24],
         [KEY.INTERNATIONAL1, KEY_TAG.INTERNATIONAL1],
         [KEY.INTERNATIONAL2, KEY_TAG.INTERNATIONAL2],
         [KEY.INTERNATIONAL3, KEY_TAG.INTERNATIONAL3],
         [KEY.INTERNATIONAL4, KEY_TAG.INTERNATIONAL4],
         [KEY.INTERNATIONAL5, KEY_TAG.INTERNATIONAL5],
         [KEY.INTERNATIONAL6, KEY_TAG.INTERNATIONAL6],
         [KEY.INTERNATIONAL7, KEY_TAG.INTERNATIONAL7],
         [KEY.INTERNATIONAL8, KEY_TAG.INTERNATIONAL8],
         [KEY.INTERNATIONAL9, KEY_TAG.INTERNATIONAL9],
         [KEY.LANG1, KEY_TAG.LANG1],
         [KEY.LANG2, KEY_TAG.LANG2],
         [KEY.LANG3, KEY_TAG.LANG3],
         [KEY.LANG4, KEY_TAG.LANG4],
         [KEY.LANG5, KEY_TAG.LANG5],
         [KEY.HELP, KEY_TAG.HELP],
         [KEY.MUTE, KEY_TAG.MUTE],
         [KEY.VOLUMEUP, KEY_TAG.VOLUMEUP],
         [KEY.VOLUMEDOWN, KEY_TAG.VOLUMEDOWN]]);
   function Val_key_code(keycode){return kc_to_tag.get(keycode);}
   var
    key_state_to_tag =
      new
       joo_global_object.Map
       ([[KEY_STATE.UP, KEY_STATE_TAG.UP],
         [KEY_STATE.DOWN, KEY_STATE_TAG.DOWN]]);
   function Val_key_state(state){return key_state_to_tag.get(state);}
   var
    repeat_to_tag =
      new
       joo_global_object.Map
       ([["no-repeat", REPEAT_TAG.NO_REPEAT],
         ["repeat-x", REPEAT_TAG.REPEAT_X],
         ["repeat-y", REPEAT_TAG.REPEAT_Y],
         ["repeat", REPEAT_TAG.REPEAT_XY]]);
   function Val_repeat(repeat){return repeat_to_tag.get(repeat);}
   function _event_canvas_scale(e){
    return {scaleX: e.target.canvas.width / e.target.clientWidth,
            scaleY: e.target.canvas.height / e.target.clientHeight};
   }
   var _focus = null;
   function caml_int64_of_float(x){
    if(x < 0) x = Math.ceil(x);
    return new
            MlInt64
            (x & 0xffffff,
             Math.floor(x * caml_int64_offset) & 0xffffff,
             Math.floor(x * caml_int64_offset * caml_int64_offset) & 0xffff);
   }
   var
    _ml_canvas_mlProcessEvent = null,
    _ml_canvas_mlException = null,
    _ml_canvas_initialized = false;
   function _ml_canvas_ensure_initialized(){
    if(_ml_canvas_initialized == false)
     caml_raise_constant(caml_named_value("Not_initialized"));
   }
   var _ml_canvas_mlContinuation = null;
   function ml_canvas_stop(){
    _ml_canvas_ensure_initialized();
    _ml_canvas_mlProcessEvent = null;
    if(_ml_canvas_mlException !== null){
     var exn = _ml_canvas_mlException;
     _ml_canvas_mlContinuation = null;
     _ml_canvas_mlException = null;
     throw exn;
    }
    else if(_ml_canvas_mlContinuation !== null)
     try{_ml_canvas_mlContinuation(); _ml_canvas_mlContinuation = null;}
     catch(exn){_ml_canvas_mlContinuation = null; throw exn;}
    return 0;
   }
   function _ml_canvas_process_event(mlEvent){
    if(_ml_canvas_mlProcessEvent === null) return false;
    try{_ml_canvas_mlProcessEvent(mlEvent); return true;}
    catch(exn){_ml_canvas_mlException = exn; ml_canvas_stop(); return false;}
   }
   function _frame_handler(timestamp){
    var surfaces = document.getElementsByTagName("canvas");
    for(var i = 0; i < surfaces.length; ++i){
     var
      evt =
        [EVENT_TAG.FRAME,
         [0, surfaces[i].canvas, caml_int64_of_float(timestamp * 1000.0)]];
     _ml_canvas_process_event(evt);
    }
    window.requestAnimationFrame(_frame_handler);
   }
   var _move = {moving: false, target: null, prev_x: 0, prev_y: 0};
   function ml_canvas_hide(canvas){
    if(canvas.frame !== null){
     if(_focus === canvas) _focus = null;
     canvas.frame.style.visibility = "hidden";
    }
    return 0;
   }
   function ml_canvas_close(canvas){
    if(canvas.frame !== null){
     ml_canvas_hide(canvas);
     canvas.name = null;
     if(canvas.surface != null){
      canvas.surface.canvas = null;
      if(canvas.surface.parentNode !== null)
       canvas.surface.parentNode.removeChild(canvas.surface);
     }
     if(canvas.header != null){
      canvas.header.canvas = null;
      if(canvas.header.parentNode !== null)
       canvas.header.parentNode.removeChild(canvas.header);
      canvas.header = null;
     }
     if(canvas.frame !== null){
      canvas.frame.canvas = null;
      if(canvas.frame.parentNode !== null)
       canvas.frame.parentNode.removeChild(canvas.frame);
      canvas.frame = null;
     }
    }
    return 0;
   }
   function _header_down_handler(e){
    if(e.target !== null){
     _focus = e.target.canvas;
     if
      (e.offsetX >= e.target.canvas.width - 20
       && e.offsetX <= e.target.canvas.width - 10
       && e.offsetY >= 10
       && e.offsetY <= 20){
      var
       evt =
         [EVENT_TAG.CANVAS_CLOSED,
          [0, e.target.canvas, caml_int64_of_float(e.timeStamp * 1000.0)]];
      _ml_canvas_process_event(evt);
      ml_canvas_close(e.target.canvas);
      _focus = null;
      return false;
     }
     _move.moving = true;
     _move.target = e.target.canvas.frame;
     _move.prev_x = e.pageX;
     _move.prev_y = e.pageY;
     e.target.canvas.target.insertBefore(_move.target, null);
    }
    return false;
   }
   function _int_of_color(c){
    if(c[0] == "#")
     return parseInt(c.substr(1, c.length - 1), 16);
    else{
     var
      rgba = c.replace(/^rgba?\(|\s+|\)$/g, "").split(","),
      r = parseInt(rgba[0]),
      g = parseInt(rgba[1]),
      b = parseInt(rgba[2]),
      a = parseFloat(rgba[3]) * 255;
     return b | g << 8 | r << 16 | a << 24;
    }
   }
   var
    _internal_canvas = document.createElement("canvas"),
    _internal_ctxt = _internal_canvas.getContext("2d"),
    kn_to_kc =
      new
       joo_global_object.Map
       ([["", KEY.UNDEFINED],
         ["Unidentified", KEY.UNDEFINED],
         ["Escape", KEY.ESCAPE],
         ["F1", KEY.F1],
         ["F2", KEY.F2],
         ["F3", KEY.F3],
         ["F4", KEY.F4],
         ["F5", KEY.F5],
         ["F6", KEY.F6],
         ["F7", KEY.F7],
         ["F8", KEY.F8],
         ["F9", KEY.F9],
         ["F10", KEY.F10],
         ["F11", KEY.F11],
         ["F12", KEY.F12],
         ["PrintScreen", KEY.PRINTSCREEN],
         ["ScrollLock", KEY.SCROLLLOCK],
         ["Pause", KEY.PAUSE],
         ["Backquote", KEY.GRAVE_TILDE],
         ["Digit1", KEY._1_EXCLAMATION],
         ["Digit2", KEY._2_AT],
         ["Digit3", KEY._3_NUMBER],
         ["Digit4", KEY._4_DOLLAR],
         ["Digit5", KEY._5_PERCENT],
         ["Digit6", KEY._6_CARET],
         ["Digit7", KEY._7_AMPERSAND],
         ["Digit8", KEY._8_ASTERISK],
         ["Digit9", KEY._9_LPARENTHESIS],
         ["Digit0", KEY._0_RPARENTHESIS],
         ["Minus", KEY.MINUS_UNDERSCORE],
         ["Equal", KEY.EQUAL_PLUS],
         ["IntlYen", KEY.INTERNATIONAL3],
         ["Backspace", KEY.BACKSPACE],
         ["Tab", KEY.TAB],
         ["KeyQ", KEY.Q],
         ["KeyW", KEY.W],
         ["KeyE", KEY.E],
         ["KeyR", KEY.R],
         ["KeyT", KEY.T],
         ["KeyY", KEY.Y],
         ["KeyU", KEY.U],
         ["KeyI", KEY.I],
         ["KeyO", KEY.O],
         ["KeyP", KEY.P],
         ["BracketLeft", KEY.LBRACKET_CURLY],
         ["BracketRight", KEY.RBRACKET_CURLY],
         ["Backslash", KEY.BACKSLASH_PIPE],
         ["CapsLock", KEY.CAPSLOCK],
         ["KeyA", KEY.A],
         ["KeyS", KEY.S],
         ["KeyD", KEY.D],
         ["KeyF", KEY.F],
         ["KeyG", KEY.G],
         ["KeyH", KEY.H],
         ["KeyJ", KEY.J],
         ["KeyK", KEY.K],
         ["KeyL", KEY.L],
         ["Semicolon", KEY.SEMICOLON_COLON],
         ["Quote", KEY.QUOTE_DOUBLEQUOTE],
         ["Enter", KEY.RETURN],
         ["ShiftLeft", KEY.LSHIFT],
         ["IntlBackslash", KEY.NONUS_BACKSLASH_PIPE],
         ["KeyZ", KEY.Z],
         ["KeyX", KEY.X],
         ["KeyC", KEY.C],
         ["KeyV", KEY.V],
         ["KeyB", KEY.B],
         ["KeyN", KEY.N],
         ["KeyM", KEY.M],
         ["Comma", KEY.COMMA_LESS],
         ["Period", KEY.PERIOD_GREATER],
         ["Slash", KEY.SLASH_QUESTION],
         ["IntlRo", KEY.INTERNATIONAL1],
         ["ShiftRight", KEY.RSHIFT],
         ["ControlLeft", KEY.LCONTROL],
         ["MetaLeft", KEY.LMETA],
         ["AltLeft", KEY.LALT],
         ["NonConvert", KEY.INTERNATIONAL5],
         ["Lang2", KEY.LANG2],
         ["Space", KEY.SPACEBAR],
         ["Lang1", KEY.LANG1],
         ["Convert", KEY.INTERNATIONAL4],
         ["KanaMode", KEY.INTERNATIONAL2],
         ["AltRight", KEY.RALT],
         ["MetaRight", KEY.RMETA],
         ["ContextMenu", KEY.MENU],
         ["ControlRight", KEY.RCONTROL],
         ["Help", KEY.HELP],
         ["Insert", KEY.INSERT],
         ["Home", KEY.HOME],
         ["PageUp", KEY.PAGEUP],
         ["Delete", KEY.DELETEFORWARD],
         ["End", KEY.END],
         ["PageDown", KEY.PAGEDOWN],
         ["ArrowUp", KEY.UPARROW],
         ["ArrowLeft", KEY.LEFTARROW],
         ["ArrowDown", KEY.DOWNARROW],
         ["ArrowRight", KEY.RIGHTARROW],
         ["NumpadLock", KEY.PAD_NUMLOCK_CLEAR],
         ["NumpadEqual", KEY.PAD_EQUALS],
         ["NumpadDivide", KEY.PAD_DIVIDE],
         ["NumpadMultiply", KEY.PAD_MULTIPLY],
         ["NumpadSubtract", KEY.PAD_MINUS],
         ["Numpad7", KEY.PAD_7_HOME],
         ["Numpad8", KEY.PAD_8_UPARROW],
         ["Numpad9", KEY.PAD_9_PAGEUP],
         ["NumpadAdd", KEY.PAD_PLUS],
         ["Numpad4", KEY.PAD_4_LEFTARROW],
         ["Numpad5", KEY.PAD_5],
         ["Numpad6", KEY.PAD_6_RIGHTARROW],
         ["NumpadComma", KEY.PAD_COMMA],
         ["Numpad1", KEY.PAD_1_END],
         ["Numpad2", KEY.PAD_2_DOWNARROW],
         ["Numpad3", KEY.PAD_3_PAGEDOWN],
         ["Numpad0", KEY.PAD_0_INSERT],
         ["NumpadDecimal", KEY.PAD_DECIMAL_DELETE],
         ["NumpadEnter", KEY.PAD_ENTER],
         ["F13", KEY.F13],
         ["F14", KEY.F14],
         ["F15", KEY.F15],
         ["F16", KEY.F16],
         ["F17", KEY.F17],
         ["F18", KEY.F18],
         ["F19", KEY.F19],
         ["F20", KEY.F20],
         ["F21", KEY.F21],
         ["F22", KEY.F22],
         ["F23", KEY.F23],
         ["F24", KEY.F24],
         ["Lang3", KEY.LANG3],
         ["Lang4", KEY.LANG4],
         ["Lang5", KEY.LANG5],
         ["Katakana", KEY.LANG3],
         ["Hiragana", KEY.LANG4],
         ["AudioVolumeDown", KEY.VOLUMEDOWN],
         ["AudioVolumeUp", KEY.VOLUMEUP],
         ["AudioVolumeMute", KEY.MUTE]]);
   function keyname_to_keycode(keyname){return kn_to_kc.get(keyname);}
   function _make_key_event(e, state){
    var
     char = e.key.length === 1 ? e.key.charCodeAt(0) : 0,
     flags =
       [0,
        e.shiftKey,
        e.altKey,
        e.ctrlKey,
        e.metaKey,
        e.getModifierState("CapsLock"),
        e.getModifierState("NumLock"),
        e.key === "Dead"],
     evt =
       [EVENT_TAG.KEY_ACTION,
        [0,
         _focus,
         caml_int64_of_float(e.timeStamp * 1000.0),
         Val_key_code(keyname_to_keycode(e.code)),
         char,
         flags,
         Val_key_state(state)]];
    return evt;
   }
   function _key_down_handler(e){
    if(_focus !== null){
     var evt = _make_key_event(e, KEY_STATE.DOWN);
     _ml_canvas_process_event(evt);
    }
    return false;
   }
   function _key_up_handler(e){
    if(_focus !== null){
     var evt = _make_key_event(e, KEY_STATE.UP);
     _ml_canvas_process_event(evt);
    }
    return false;
   }
   function _ml_canvas_adjust_blit_info
   (dwidth, dheight, dx, dy, swidth, sheight, sx, sy, width, height){
    if(dx < 0){sx -= dx; width += dx; dx = 0;}
    if(dy < 0){sy -= dy; height += dy; dy = 0;}
    if(sx < 0){dx -= sx; width += sx; sx = 0;}
    if(sy < 0){dy -= sy; height += sy; sy = 0;}
    if(dx + width > dwidth) width = dwidth - dx;
    if(dy + height > dheight) height = dheight - dy;
    if(sx + width > swidth) width = swidth - sx;
    if(sy + height > sheight) height = sheight - sy;
    return [dx, dy, sx, sy, width, height];
   }
   function caml_ba_get_size(dims){
    var n_dims = dims.length, size = 1;
    for(var i = 0; i < n_dims; i++){
     if(dims[i] < 0)
      caml_invalid_argument("Bigarray.create: negative dimension");
     size = size * dims[i];
    }
    return size;
   }
   function caml_ba_get_size_per_element(kind){
    switch(kind){case 7:case 10:case 11: return 2;default: return 1;
    }
   }
   function caml_ba_create_unsafe(kind, layout, dims, data){
    var size_per_element = caml_ba_get_size_per_element(kind);
    if(caml_ba_get_size(dims) * size_per_element != data.length)
     caml_invalid_argument("length doesn't match dims");
    if(layout == 0 && dims.length == 1 && size_per_element == 1)
     return new Ml_Bigarray_c_1_1(kind, layout, dims, data);
    return new Ml_Bigarray(kind, layout, dims, data);
   }
   function _ml_canvas_ba_of_img(img){
    var surface = document.createElement("canvas");
    surface.width = img.width;
    surface.height = img.height;
    var ctxt = surface.getContext("2d");
    ctxt.drawImage(img, 0, 0);
    var
     image = ctxt.getImageData(0, 0, img.width, img.height),
     sta = new window.Uint8Array(image.data.buffer),
     dta = new window.Uint8Array(sta.length);
    for(var i = 0; i < sta.length; i += 4){
     dta[i + 0] = sta[i + 2];
     dta[i + 1] = sta[i + 1];
     dta[i + 2] = sta[i + 0];
     dta[i + 3] = sta[i + 3];
    }
    return caml_ba_create_unsafe(3, 0, [img.height, img.width, 4], dta);
   }
   function caml_jsstring_of_string(s){
    if(jsoo_is_ascii(s)) return s;
    return caml_utf16_of_utf8(s);
   }
   function _ml_canvas_decorate(header, minimize, maximize, close, title){
    var width = header.width, ctxt = header.getContext("2d");
    ctxt.fillStyle = "#585858";
    ctxt.fillRect(0, 0, width, 30);
    if(title !== null){
     ctxt.fillStyle = "#F0F0F0F0";
     ctxt.font = "bold 16px Arial";
     ctxt.textAlign = "center";
     ctxt.fillText(caml_jsstring_of_string(title), width / 2, 21);
    }
    ctxt.strokeStyle = "#F0F0F0F0";
    ctxt.lineWidth = 2.0;
    if(close == true){
     ctxt.beginPath();
     ctxt.moveTo(width - 20, 10);
     ctxt.lineTo(width - 10, 20);
     ctxt.moveTo(width - 20, 20);
     ctxt.lineTo(width - 10, 10);
     ctxt.stroke();
    }
   }
   function fs_node_supported(){
    return typeof globalThis.process !== "undefined"
           && typeof globalThis.process.versions !== "undefined"
           && typeof globalThis.process.versions.node !== "undefined";
   }
   function make_path_is_absolute(){
    function posix(path){
     if(path.charAt(0) === "/") return ["", path.substring(1)];
     return;
    }
    function win32(path){
     var
      splitDeviceRe =
        /^([a-zA-Z]:|[\\/]{2}[^\\/]+[\\/]+[^\\/]+)?([\\/])?([\s\S]*?)$/,
      result = splitDeviceRe.exec(path),
      device = result[1] || "",
      isUnc = Boolean(device && device.charAt(1) !== ":");
     if(Boolean(result[2] || isUnc)){
      var root = result[1] || "", sep = result[2] || "";
      return [root, path.substring(root.length + sep.length)];
     }
     return;
    }
    return fs_node_supported() && globalThis.process
            && globalThis.process.platform
            ? globalThis.process.platform === "win32" ? win32 : posix
            : posix;
   }
   var path_is_absolute = make_path_is_absolute();
   function caml_trailing_slash(name){
    return name.slice(- 1) !== "/" ? name + "/" : name;
   }
   if(fs_node_supported() && globalThis.process && globalThis.process.cwd)
    var caml_current_dir = globalThis.process.cwd().replace(/\\/g, "/");
   else
    var caml_current_dir = "/static";
   caml_current_dir = caml_trailing_slash(caml_current_dir);
   function caml_make_path(name){
    name = caml_jsstring_of_string(name);
    if(! path_is_absolute(name)) name = caml_current_dir + name;
    var
     comp0 = path_is_absolute(name),
     comp = comp0[1].split("/"),
     ncomp = [];
    for(var i = 0; i < comp.length; i++)
     switch(comp[i]){
       case "..":
        if(ncomp.length > 1) ncomp.pop(); break;
       case ".": break;
       case "": break;
       default: ncomp.push(comp[i]); break;
     }
    ncomp.unshift(comp0[0]);
    ncomp.orig = name;
    return ncomp;
   }
   function caml_get_root(path){
    var x = path_is_absolute(path);
    if(! x) return;
    return x[0] + "/";
   }
   function caml_failwith(msg){
    if(! caml_global_data.Failure)
     caml_global_data.Failure = [248, caml_string_of_jsbytes("Failure"), - 3];
    caml_raise_with_string(caml_global_data.Failure, msg);
   }
   var
    caml_root =
      caml_get_root(caml_current_dir)
      || caml_failwith("unable to compute caml_root"),
    jsoo_mount_point = [];
   if(fs_node_supported())
    jsoo_mount_point.push
     ({path: caml_root, device: new MlNodeDevice(caml_root)});
   else
    jsoo_mount_point.push
     ({path: caml_root, device: new MlFakeDevice(caml_root)});
   jsoo_mount_point.push
    ({path: "/static/", device: new MlFakeDevice("/static/")});
   function resolve_fs_device(name){
    var
     path = caml_make_path(name),
     name = path.join("/"),
     name_slash = caml_trailing_slash(name),
     res;
    for(var i = 0; i < jsoo_mount_point.length; i++){
     var m = jsoo_mount_point[i];
     if
      (name_slash.search(m.path) == 0
       && (! res || res.path.length < m.path.length))
      res =
       {path: m.path,
        device: m.device,
        rest: name.substring(m.path.length, name.length)};
    }
    if(! res && fs_node_supported()){
     var root = caml_get_root(name);
     if(root && root.match(/^[a-zA-Z]:\/$/)){
      var m = {path: root, device: new MlNodeDevice(root)};
      jsoo_mount_point.push(m);
      res =
       {path: m.path,
        device: m.device,
        rest: name.substring(m.path.length, name.length)};
     }
    }
    if(res) return res;
    caml_raise_sys_error("no device found for " + name_slash);
   }
   function caml_read_file_content(name){
    var
     name = typeof name == "string" ? caml_string_of_jsbytes(name) : name,
     root = resolve_fs_device(name);
    if(root.device.exists(root.rest)){
     var
      file = root.device.open(root.rest, {rdonly: 1}),
      len = file.length(),
      buf = new Uint8Array(len);
     file.read(0, buf, 0, len);
     return caml_string_of_array(buf);
    }
    caml_raise_no_such_file(caml_jsbytes_of_string(name));
   }
   function _ml_canvas_image_of_png_file(filename){
    var file = caml_read_file_content(filename);
    if(file === null) return null;
    var
     fc = caml_read_file_content(filename),
     data = window.btoa(fc.c === undefined ? fc : fc.c),
     img = new window.Image();
    img.loading = "eager";
    img.decoding = "sync";
    img.src = "data:image/png;base64," + data;
    return [img.decode(), img];
   }
   function caml_ba_dim(ba, i){
    if(i < 0 || i >= ba.dims.length) caml_invalid_argument("Bigarray.dim");
    return ba.dims[i];
   }
   function caml_ba_to_typed_array(ba){return ba.data;}
   function _ml_canvas_surface_of_ba(data){
    var surface = document.createElement("canvas");
    surface.width = caml_ba_dim(data, 1);
    surface.height = caml_ba_dim(data, 0);
    var
     ctxt = surface.getContext("2d"),
     sta = new window.Uint8Array(caml_ba_to_typed_array(data).buffer),
     dta = new window.Uint8ClampedArray(sta.length);
    for(var i = 0; i < sta.length; i += 4){
     dta[i + 0] = sta[i + 2];
     dta[i + 1] = sta[i + 1];
     dta[i + 2] = sta[i + 0];
     dta[i + 3] = sta[i + 3];
    }
    if(window.ImageData === undefined){
     var image = ctxt.createImageData(surface.width, surface.height);
     image.data.set(dta);
    }
    else
     var image = new window.ImageData(dta, surface.width, surface.height);
    ctxt.putImageData(image, 0, 0);
    return surface;
   }
   function _ml_canvas_valid_canvas_size(width, height){
    return 0 < width && width <= 32767 && 0 < height && height <= 32767;
   }
   function _move_handler(e){
    if(_move.moving){
     var
      new_x = e.pageX,
      new_y = e.pageY,
      dx = new_x - _move.prev_x,
      dy = new_y - _move.prev_y;
     _move.prev_x = new_x;
     _move.prev_y = new_y;
     var canvas = _move.target.canvas;
     canvas.x += dx;
     canvas.y += dy;
     _move.target.style.left = canvas.x + "px";
     _move.target.style.top = canvas.y + "px";
    }
    else if(e.target.canvas !== undefined){
     var
      s = _event_canvas_scale(e),
      evt =
        [EVENT_TAG.MOUSE_MOVE,
         [0,
          e.target.canvas,
          caml_int64_of_float(e.timeStamp * 1000.0),
          [0, e.offsetX * s.scaleX, e.offsetY * s.scaleY]]];
     _ml_canvas_process_event(evt);
    }
    return false;
   }
   var _next_id = 0;
   function _resize_handler(entries){
    entries.forEach
     (function(e){
       var
        evt =
          [EVENT_TAG.CANVAS_RESIZED,
           [0,
            e.target.canvas,
            caml_int64_of_float(e.timeStamp * 1000.0),
            [0, e.target.clientWidth, e.target.clientHeight]]];
       _ml_canvas_process_event(evt);
      });
    return false;
   }
   var _resize = new window.ResizeObserver(_resize_handler);
   function _surface_down_handler(e){
    if(e.target !== null){
     _focus = e.target.canvas;
     e.target.canvas.target.insertBefore(e.target.canvas.frame, null);
     var
      s = _event_canvas_scale(e),
      evt =
        [EVENT_TAG.BUTTON_ACTION,
         [0,
          e.target.canvas,
          caml_int64_of_float(e.timeStamp * 1000.0),
          [0, e.offsetX * s.scaleX, e.offsetY * s.scaleY],
          e.button + 1,
          1]];
     _ml_canvas_process_event(evt);
    }
    return false;
   }
   function _up_handler(e){
    _move.moving = false;
    if(e.target.canvas !== undefined){
     var
      s = _event_canvas_scale(e),
      evt =
        [EVENT_TAG.BUTTON_ACTION,
         [0,
          e.target.canvas,
          caml_int64_of_float(e.timeStamp * 1000.0),
          [0, e.offsetX * s.scaleX, e.offsetY * s.scaleY],
          e.button + 1,
          0]];
     _ml_canvas_process_event(evt);
    }
    return false;
   }
   function incr_nat(nat, ofs, len, carry_in){
    var carry = carry_in;
    for(var i = 0; i < len; i++){
     var x = (nat.data[ofs + i] >>> 0) + carry;
     nat.data[ofs + i] = x | 0;
     if(x == x >>> 0){carry = 0; break;} else carry = 1;
    }
    return carry;
   }
   function add_nat(nat1, ofs1, len1, nat2, ofs2, len2, carry_in){
    var carry = carry_in;
    for(var i = 0; i < len2; i++){
     var
      x = (nat1.data[ofs1 + i] >>> 0) + (nat2.data[ofs2 + i] >>> 0) + carry;
     nat1.data[ofs1 + i] = x;
     if(x == x >>> 0) carry = 0; else carry = 1;
    }
    return incr_nat(nat1, ofs1 + len2, len1 - len2, carry);
   }
   function bigstring_of_array_buffer(ab){
    var ta = new Uint8Array(ab);
    return caml_ba_create_unsafe(12, 0, [ta.length], ta);
   }
   function bigstring_of_typed_array(ba){
    var
     ta =
       new
        Uint8Array
        (ba.buffer, ba.byteOffset, ba.length * ba.BYTES_PER_ELEMENT);
    return caml_ba_create_unsafe(12, 0, [ta.length], ta);
   }
   function bigstring_to_array_buffer(bs){return bs.data.buffer;}
   function bigstring_to_typed_array(bs){return bs.data;}
   function blit_nat(nat1, ofs1, nat2, ofs2, len){
    for(var i = 0; i < len; i++) nat1.data[ofs1 + i] = nat2.data[ofs2 + i];
    return 0;
   }
   var
    caml_MD5Transform =
      function(){
        function add(x, y){return x + y | 0;}
        function xx(q, a, b, x, s, t){
         a = add(add(a, q), add(x, t));
         return add(a << s | a >>> 32 - s, b);
        }
        function ff(a, b, c, d, x, s, t){
         return xx(b & c | ~ b & d, a, b, x, s, t);
        }
        function gg(a, b, c, d, x, s, t){
         return xx(b & d | c & ~ d, a, b, x, s, t);
        }
        function hh(a, b, c, d, x, s, t){return xx(b ^ c ^ d, a, b, x, s, t);}
        function ii(a, b, c, d, x, s, t){
         return xx(c ^ (b | ~ d), a, b, x, s, t);
        }
        return function(w, buffer){
         var a = w[0], b = w[1], c = w[2], d = w[3];
         a = ff(a, b, c, d, buffer[0], 7, 0xD76AA478);
         d = ff(d, a, b, c, buffer[1], 12, 0xE8C7B756);
         c = ff(c, d, a, b, buffer[2], 17, 0x242070DB);
         b = ff(b, c, d, a, buffer[3], 22, 0xC1BDCEEE);
         a = ff(a, b, c, d, buffer[4], 7, 0xF57C0FAF);
         d = ff(d, a, b, c, buffer[5], 12, 0x4787C62A);
         c = ff(c, d, a, b, buffer[6], 17, 0xA8304613);
         b = ff(b, c, d, a, buffer[7], 22, 0xFD469501);
         a = ff(a, b, c, d, buffer[8], 7, 0x698098D8);
         d = ff(d, a, b, c, buffer[9], 12, 0x8B44F7AF);
         c = ff(c, d, a, b, buffer[10], 17, 0xFFFF5BB1);
         b = ff(b, c, d, a, buffer[11], 22, 0x895CD7BE);
         a = ff(a, b, c, d, buffer[12], 7, 0x6B901122);
         d = ff(d, a, b, c, buffer[13], 12, 0xFD987193);
         c = ff(c, d, a, b, buffer[14], 17, 0xA679438E);
         b = ff(b, c, d, a, buffer[15], 22, 0x49B40821);
         a = gg(a, b, c, d, buffer[1], 5, 0xF61E2562);
         d = gg(d, a, b, c, buffer[6], 9, 0xC040B340);
         c = gg(c, d, a, b, buffer[11], 14, 0x265E5A51);
         b = gg(b, c, d, a, buffer[0], 20, 0xE9B6C7AA);
         a = gg(a, b, c, d, buffer[5], 5, 0xD62F105D);
         d = gg(d, a, b, c, buffer[10], 9, 0x02441453);
         c = gg(c, d, a, b, buffer[15], 14, 0xD8A1E681);
         b = gg(b, c, d, a, buffer[4], 20, 0xE7D3FBC8);
         a = gg(a, b, c, d, buffer[9], 5, 0x21E1CDE6);
         d = gg(d, a, b, c, buffer[14], 9, 0xC33707D6);
         c = gg(c, d, a, b, buffer[3], 14, 0xF4D50D87);
         b = gg(b, c, d, a, buffer[8], 20, 0x455A14ED);
         a = gg(a, b, c, d, buffer[13], 5, 0xA9E3E905);
         d = gg(d, a, b, c, buffer[2], 9, 0xFCEFA3F8);
         c = gg(c, d, a, b, buffer[7], 14, 0x676F02D9);
         b = gg(b, c, d, a, buffer[12], 20, 0x8D2A4C8A);
         a = hh(a, b, c, d, buffer[5], 4, 0xFFFA3942);
         d = hh(d, a, b, c, buffer[8], 11, 0x8771F681);
         c = hh(c, d, a, b, buffer[11], 16, 0x6D9D6122);
         b = hh(b, c, d, a, buffer[14], 23, 0xFDE5380C);
         a = hh(a, b, c, d, buffer[1], 4, 0xA4BEEA44);
         d = hh(d, a, b, c, buffer[4], 11, 0x4BDECFA9);
         c = hh(c, d, a, b, buffer[7], 16, 0xF6BB4B60);
         b = hh(b, c, d, a, buffer[10], 23, 0xBEBFBC70);
         a = hh(a, b, c, d, buffer[13], 4, 0x289B7EC6);
         d = hh(d, a, b, c, buffer[0], 11, 0xEAA127FA);
         c = hh(c, d, a, b, buffer[3], 16, 0xD4EF3085);
         b = hh(b, c, d, a, buffer[6], 23, 0x04881D05);
         a = hh(a, b, c, d, buffer[9], 4, 0xD9D4D039);
         d = hh(d, a, b, c, buffer[12], 11, 0xE6DB99E5);
         c = hh(c, d, a, b, buffer[15], 16, 0x1FA27CF8);
         b = hh(b, c, d, a, buffer[2], 23, 0xC4AC5665);
         a = ii(a, b, c, d, buffer[0], 6, 0xF4292244);
         d = ii(d, a, b, c, buffer[7], 10, 0x432AFF97);
         c = ii(c, d, a, b, buffer[14], 15, 0xAB9423A7);
         b = ii(b, c, d, a, buffer[5], 21, 0xFC93A039);
         a = ii(a, b, c, d, buffer[12], 6, 0x655B59C3);
         d = ii(d, a, b, c, buffer[3], 10, 0x8F0CCC92);
         c = ii(c, d, a, b, buffer[10], 15, 0xFFEFF47D);
         b = ii(b, c, d, a, buffer[1], 21, 0x85845DD1);
         a = ii(a, b, c, d, buffer[8], 6, 0x6FA87E4F);
         d = ii(d, a, b, c, buffer[15], 10, 0xFE2CE6E0);
         c = ii(c, d, a, b, buffer[6], 15, 0xA3014314);
         b = ii(b, c, d, a, buffer[13], 21, 0x4E0811A1);
         a = ii(a, b, c, d, buffer[4], 6, 0xF7537E82);
         d = ii(d, a, b, c, buffer[11], 10, 0xBD3AF235);
         c = ii(c, d, a, b, buffer[2], 15, 0x2AD7D2BB);
         b = ii(b, c, d, a, buffer[9], 21, 0xEB86D391);
         w[0] = add(a, w[0]);
         w[1] = add(b, w[1]);
         w[2] = add(c, w[2]);
         w[3] = add(d, w[3]);};
       }
       ();
   function caml_MD5Final(ctx){
    var in_buf = ctx.len & 0x3f;
    ctx.b8[in_buf] = 0x80;
    in_buf++;
    if(in_buf > 56){
     for(var j = in_buf; j < 64; j++) ctx.b8[j] = 0;
     caml_MD5Transform(ctx.w, ctx.b32);
     for(var j = 0; j < 56; j++) ctx.b8[j] = 0;
    }
    else
     for(var j = in_buf; j < 56; j++) ctx.b8[j] = 0;
    ctx.b32[14] = ctx.len << 3;
    ctx.b32[15] = ctx.len >> 29 & 0x1FFFFFFF;
    caml_MD5Transform(ctx.w, ctx.b32);
    var t = new Uint8Array(16);
    for(var i = 0; i < 4; i++)
     for(var j = 0; j < 4; j++) t[i * 4 + j] = ctx.w[i] >> 8 * j & 0xFF;
    return t;
   }
   function caml_MD5Init(){
    var
     buffer = new ArrayBuffer(64),
     b32 = new Uint32Array(buffer),
     b8 = new Uint8Array(buffer);
    return {len: 0,
            w:
            new Uint32Array([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476]),
            b32: b32,
            b8: b8};
   }
   function caml_MD5Update(ctx, input, input_len){
    var in_buf = ctx.len & 0x3f, input_pos = 0;
    ctx.len += input_len;
    if(in_buf){
     var missing = 64 - in_buf;
     if(input_len < missing){
      ctx.b8.set(input.subarray(0, input_len), in_buf);
      return;
     }
     ctx.b8.set(input.subarray(0, missing), in_buf);
     caml_MD5Transform(ctx.w, ctx.b32);
     input_len -= missing;
     input_pos += missing;
    }
    while(input_len >= 64){
     ctx.b8.set(input.subarray(input_pos, input_pos + 64), 0);
     caml_MD5Transform(ctx.w, ctx.b32);
     input_len -= 64;
     input_pos += 64;
    }
    if(input_len)
     ctx.b8.set(input.subarray(input_pos, input_pos + input_len), 0);
   }
   function caml_acosh_float(x){return Math.acosh(x);}
   function caml_call_gen(f, args){
    var
     n = f.l >= 0 ? f.l : f.l = f.length,
     argsLen = args.length,
     d = n - argsLen;
    if(d == 0)
     return f.apply(null, args);
    else if(d < 0){
     var g = f.apply(null, args.slice(0, n));
     if(typeof g !== "function") return g;
     return caml_call_gen(g, args.slice(n));
    }
    else{
     switch(d){
       case 1:
        {
         var
          g =
            function(x){
             var nargs = new Array(argsLen + 1);
             for(var i = 0; i < argsLen; i++) nargs[i] = args[i];
             nargs[argsLen] = x;
             return f.apply(null, nargs);
            };
         break;
        }
       case 2:
        {
         var
          g =
            function(x, y){
             var nargs = new Array(argsLen + 2);
             for(var i = 0; i < argsLen; i++) nargs[i] = args[i];
             nargs[argsLen] = x;
             nargs[argsLen + 1] = y;
             return f.apply(null, nargs);
            };
         break;
        }
       default:
        var
         g =
           function(){
            var
             extra_args = arguments.length == 0 ? 1 : arguments.length,
             nargs = new Array(args.length + extra_args);
            for(var i = 0; i < args.length; i++) nargs[i] = args[i];
            for(var i = 0; i < arguments.length; i++)
             nargs[args.length + i] = arguments[i];
            return caml_call_gen(f, nargs);
           };
     }
     g.l = d;
     return g;
    }
   }
   function caml_alloc_dummy_infix(){
    return function f(x){return caml_call_gen(f.fun, [x]);};
   }
   function caml_alloc_stack(hv, hx, hf){return 0;}
   var
    caml_argv =
      function(){
        var process = globalThis.process, main = "a.out", args = [];
        if(process && process.argv && process.argv.length > 1){
         var argv = process.argv;
         main = argv[1];
         args = argv.slice(2);
        }
        var p = caml_string_of_jsstring(main), args2 = [0, p];
        for(var i = 0; i < args.length; i++)
         args2.push(caml_string_of_jsstring(args[i]));
        return args2;
       }
       ();
   function caml_array_append(a1, a2){
    var l1 = a1.length, l2 = a2.length, l = l1 + l2 - 1, a = new Array(l);
    a[0] = 0;
    var i = 1, j = 1;
    for(; i < l1; i++) a[i] = a1[i];
    for(; i < l; i++, j++) a[i] = a2[j];
    return a;
   }
   function caml_array_blit(a1, i1, a2, i2, len){
    if(i2 <= i1)
     for(var j = 1; j <= len; j++) a2[i2 + j] = a1[i1 + j];
    else
     for(var j = len; j >= 1; j--) a2[i2 + j] = a1[i1 + j];
    return 0;
   }
   function caml_array_concat(l){
    var a = [0];
    while(l !== 0){
     var b = l[1];
     for(var i = 1; i < b.length; i++) a.push(b[i]);
     l = l[2];
    }
    return a;
   }
   function caml_array_fill(array, ofs, len, v){
    for(var i = 0; i < len; i++) array[ofs + i + 1] = v;
    return 0;
   }
   function caml_array_get(array, index){
    if(index < 0 || index >= array.length - 1) caml_array_bound_error();
    return array[index + 1];
   }
   function caml_array_of_bytes(x){return caml_uint8_array_of_bytes(x);}
   function caml_array_of_string(x){return caml_uint8_array_of_string(x);}
   function caml_array_set(array, index, newval){
    if(index < 0 || index >= array.length - 1) caml_array_bound_error();
    array[index + 1] = newval;
    return 0;
   }
   function caml_array_sub(a, i, len){
    var a2 = new Array(len + 1);
    a2[0] = 0;
    for(var i2 = 1, i1 = i + 1; i2 <= len; i2++, i1++) a2[i2] = a[i1];
    return a2;
   }
   function caml_asinh_float(x){return Math.asinh(x);}
   function caml_atanh_float(x){return Math.atanh(x);}
   function caml_atomic_cas(ref, o, n){
    if(ref[1] === o){ref[1] = n; return 1;}
    return 0;
   }
   function caml_atomic_exchange(ref, v){
    var r = ref[1];
    ref[1] = v;
    return r;
   }
   function caml_atomic_fetch_add(ref, i){
    var old = ref[1];
    ref[1] += i;
    return old;
   }
   function caml_atomic_load(ref){return ref[1];}
   function caml_atomic_make_contended(a){return [0, a];}
   function caml_ba_blit(src, dst){
    if(dst.dims.length != src.dims.length)
     caml_invalid_argument("Bigarray.blit: dimension mismatch");
    for(var i = 0; i < dst.dims.length; i++)
     if(dst.dims[i] != src.dims[i])
      caml_invalid_argument("Bigarray.blit: dimension mismatch");
    dst.data.set(src.data);
    return 0;
   }
   function caml_ba_change_layout(ba, layout){
    if(ba.layout == layout) return ba;
    var new_dims = [];
    for(var i = 0; i < ba.dims.length; i++)
     new_dims[i] = ba.dims[ba.dims.length - i - 1];
    return caml_ba_create_unsafe(ba.kind, layout, new_dims, ba.data);
   }
   function caml_ba_compare(a, b, total){return a.compare(b, total);}
   function caml_ba_create_buffer(kind, size){
    var view;
    switch(kind){
      case 0:
       view = Float32Array; break;
      case 1:
       view = Float64Array; break;
      case 2:
       view = Int8Array; break;
      case 3:
       view = Uint8Array; break;
      case 4:
       view = Int16Array; break;
      case 5:
       view = Uint16Array; break;
      case 6:
       view = Int32Array; break;
      case 7:
       view = Int32Array; break;
      case 8:
       view = Int32Array; break;
      case 9:
       view = Int32Array; break;
      case 10:
       view = Float32Array; break;
      case 11:
       view = Float64Array; break;
      case 12:
       view = Uint8Array; break;
    }
    if(! view) caml_invalid_argument("Bigarray.create: unsupported kind");
    var data = new view(size * caml_ba_get_size_per_element(kind));
    return data;
   }
   function caml_js_from_array(a){return a.slice(1);}
   function caml_ba_create(kind, layout, dims_ml){
    var
     dims = caml_js_from_array(dims_ml),
     data = caml_ba_create_buffer(kind, caml_ba_get_size(dims));
    return caml_ba_create_unsafe(kind, layout, dims, data);
   }
   function caml_ba_create_from(data1, data2, jstyp, kind, layout, dims){
    if(data2 || caml_ba_get_size_per_element(kind) == 2)
     caml_invalid_argument
      ("caml_ba_create_from: use return caml_ba_create_unsafe");
    return caml_ba_create_unsafe(kind, layout, dims, data1);
   }
   function caml_int32_float_of_bits(x){
    var int32a = new Int32Array(1);
    int32a[0] = x;
    var float32a = new Float32Array(int32a.buffer);
    return float32a[0];
   }
   function caml_int64_of_bytes(a){
    return new
            MlInt64
            (a[7] << 0 | a[6] << 8 | a[5] << 16,
             a[4] << 0 | a[3] << 8 | a[2] << 16,
             a[1] << 0 | a[0] << 8);
   }
   function caml_int64_float_of_bits(x){
    var lo = x.lo, mi = x.mi, hi = x.hi, exp = (hi & 0x7fff) >> 4;
    if(exp == 2047)
     return (lo | mi | hi & 0xf) == 0
             ? hi & 0x8000 ? - Infinity : Infinity
             : NaN;
    var k = Math.pow(2, - 24), res = (lo * k + mi) * k + (hi & 0xf);
    if(exp > 0){
     res += 16;
     res *= Math.pow(2, exp - 1027);
    }
    else
     res *= Math.pow(2, - 1026);
    if(hi & 0x8000) res = - res;
    return res;
   }
   function caml_ba_deserialize(reader, sz, name){
    var num_dims = reader.read32s();
    if(num_dims < 0 || num_dims > 16)
     caml_failwith("input_value: wrong number of bigarray dimensions");
    var
     tag = reader.read32s(),
     kind = tag & 0xff,
     layout = tag >> 8 & 1,
     dims = [];
    if(name == "_bigarr02")
     for(var i = 0; i < num_dims; i++){
      var size_dim = reader.read16u();
      if(size_dim == 0xffff){
       var size_dim_hi = reader.read32u(), size_dim_lo = reader.read32u();
       if(size_dim_hi != 0)
        caml_failwith("input_value: bigarray dimension overflow in 32bit");
       size_dim = size_dim_lo;
      }
      dims.push(size_dim);
     }
    else
     for(var i = 0; i < num_dims; i++) dims.push(reader.read32u());
    var
     size = caml_ba_get_size(dims),
     data = caml_ba_create_buffer(kind, size),
     ba = caml_ba_create_unsafe(kind, layout, dims, data);
    switch(kind){
      case 2:
       for(var i = 0; i < size; i++) data[i] = reader.read8s(); break;
      case 3:
      case 12:
       for(var i = 0; i < size; i++) data[i] = reader.read8u(); break;
      case 4:
       for(var i = 0; i < size; i++) data[i] = reader.read16s(); break;
      case 5:
       for(var i = 0; i < size; i++) data[i] = reader.read16u(); break;
      case 6:
       for(var i = 0; i < size; i++) data[i] = reader.read32s(); break;
      case 8:
      case 9:
       var sixty = reader.read8u();
       if(sixty)
        caml_failwith
         ("input_value: cannot read bigarray with 64-bit OCaml ints");
       for(var i = 0; i < size; i++) data[i] = reader.read32s();
       break;
      case 7:
       var t = new Array(8);
       for(var i = 0; i < size; i++){
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var int64 = caml_int64_of_bytes(t);
        ba.set(i, int64);
       }
       break;
      case 1:
       var t = new Array(8);
       for(var i = 0; i < size; i++){
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var f = caml_int64_float_of_bits(caml_int64_of_bytes(t));
        ba.set(i, f);
       }
       break;
      case 0:
       for(var i = 0; i < size; i++){
        var f = caml_int32_float_of_bits(reader.read32s());
        ba.set(i, f);
       }
       break;
      case 10:
       for(var i = 0; i < size; i++){
        var
         re = caml_int32_float_of_bits(reader.read32s()),
         im = caml_int32_float_of_bits(reader.read32s());
        ba.set(i, [254, re, im]);
       }
       break;
      case 11:
       var t = new Array(8);
       for(var i = 0; i < size; i++){
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var re = caml_int64_float_of_bits(caml_int64_of_bytes(t));
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var im = caml_int64_float_of_bits(caml_int64_of_bytes(t));
        ba.set(i, [254, re, im]);
       }
       break;
    }
    sz[0] = (4 + num_dims) * 4;
    return caml_ba_create_unsafe(kind, layout, dims, data);
   }
   function caml_ba_dim_1(ba){return caml_ba_dim(ba, 0);}
   function caml_ba_dim_2(ba){return caml_ba_dim(ba, 1);}
   function caml_ba_dim_3(ba){return caml_ba_dim(ba, 2);}
   function caml_ba_fill(ba, v){ba.fill(v); return 0;}
   function caml_ba_kind_of_typed_array(ta){
    var kind;
    if(ta instanceof Float32Array)
     kind = 0;
    else if(ta instanceof Float64Array)
     kind = 1;
    else if(ta instanceof Int8Array)
     kind = 2;
    else if(ta instanceof Uint8Array)
     kind = 3;
    else if(ta instanceof Uint8ClampedArray)
     kind = 3;
    else if(ta instanceof Int16Array)
     kind = 4;
    else if(ta instanceof Uint16Array)
     kind = 5;
    else if(ta instanceof Int32Array)
     kind = 6;
    else if(ta instanceof Uint32Array)
     kind = 6;
    else
     caml_invalid_argument("caml_ba_kind_of_typed_array: unsupported kind");
    return kind;
   }
   function caml_ba_from_typed_array(ta){
    var
     kind = caml_ba_kind_of_typed_array(ta),
     ta =
       ta instanceof Uint32Array
        ? new Int32Array(ta.buffer, ta.byteOffset, ta.length)
        : ta;
    return caml_ba_create_unsafe(kind, 0, [ta.length], ta);
   }
   function caml_ba_get_2(ba, i0, i1){return ba.get(ba.offset([i0, i1]));}
   function caml_ba_get_3(ba, i0, i1, i2){
    return ba.get(ba.offset([i0, i1, i2]));
   }
   function caml_ba_get_generic(ba, i){
    var ofs = ba.offset(caml_js_from_array(i));
    return ba.get(ofs);
   }
   function caml_mul(a, b){return Math.imul(a, b);}
   function caml_hash_mix_int(h, d){
    d = caml_mul(d, 0xcc9e2d51 | 0);
    d = d << 15 | d >>> 32 - 15;
    d = caml_mul(d, 0x1b873593);
    h ^= d;
    h = h << 13 | h >>> 32 - 13;
    return (h + (h << 2) | 0) + (0xe6546b64 | 0) | 0;
   }
   var log2_ok = Math.log2 && Math.log2(1.1235582092889474E+307) == 1020;
   function jsoo_floor_log2(x){
    if(log2_ok) return Math.floor(Math.log2(x));
    var i = 0;
    if(x == 0) return - Infinity;
    if(x >= 1) while(x >= 2){x /= 2; i++;} else while(x < 1){x *= 2; i--;}
    return i;
   }
   function caml_int64_create_lo_mi_hi(lo, mi, hi){return new MlInt64(lo, mi, hi);
   }
   function caml_int64_bits_of_float(x){
    if(! isFinite(x)){
     if(isNaN(x)) return caml_int64_create_lo_mi_hi(1, 0, 0x7ff0);
     return x > 0
             ? caml_int64_create_lo_mi_hi(0, 0, 0x7ff0)
             : caml_int64_create_lo_mi_hi(0, 0, 0xfff0);
    }
    var sign = x == 0 && 1 / x == - Infinity ? 0x8000 : x >= 0 ? 0 : 0x8000;
    if(sign) x = - x;
    var exp = jsoo_floor_log2(x) + 1023;
    if(exp <= 0){
     exp = 0;
     x /= Math.pow(2, - 1026);
    }
    else{
     x /= Math.pow(2, exp - 1027);
     if(x < 16){x *= 2; exp -= 1;}
     if(exp == 0) x /= 2;
    }
    var k = Math.pow(2, 24), r3 = x | 0;
    x = (x - r3) * k;
    var r2 = x | 0;
    x = (x - r2) * k;
    var r1 = x | 0;
    r3 = r3 & 0xf | sign | exp << 4;
    return caml_int64_create_lo_mi_hi(r1, r2, r3);
   }
   function caml_hash_mix_int64(h, v){
    h = caml_hash_mix_int(h, caml_int64_lo32(v));
    h = caml_hash_mix_int(h, caml_int64_hi32(v));
    return h;
   }
   function caml_hash_mix_float(h, v0){
    return caml_hash_mix_int64(h, caml_int64_bits_of_float(v0));
   }
   function caml_ba_hash(ba){
    var num_elts = caml_ba_get_size(ba.dims), h = 0;
    switch(ba.kind){
      case 2:
      case 3:
      case 12:
       if(num_elts > 256) num_elts = 256;
       var w = 0, i = 0;
       for(i = 0; i + 4 <= ba.data.length; i += 4){
        w =
         ba.data[i + 0] | ba.data[i + 1] << 8 | ba.data[i + 2] << 16
         | ba.data[i + 3] << 24;
        h = caml_hash_mix_int(h, w);
       }
       w = 0;
       switch(num_elts & 3){
         case 3:
          w = ba.data[i + 2] << 16;
         case 2:
          w |= ba.data[i + 1] << 8;
         case 1:
          w |= ba.data[i + 0]; h = caml_hash_mix_int(h, w);
       }
       break;
      case 4:
      case 5:
       if(num_elts > 128) num_elts = 128;
       var w = 0, i = 0;
       for(i = 0; i + 2 <= ba.data.length; i += 2){
        w = ba.data[i + 0] | ba.data[i + 1] << 16;
        h = caml_hash_mix_int(h, w);
       }
       if((num_elts & 1) != 0) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 6:
       if(num_elts > 64) num_elts = 64;
       for(var i = 0; i < num_elts; i++) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 8:
      case 9:
       if(num_elts > 64) num_elts = 64;
       for(var i = 0; i < num_elts; i++) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 7:
       if(num_elts > 32) num_elts = 32;
       num_elts *= 2;
       for(var i = 0; i < num_elts; i++) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 10:
       num_elts *= 2;
      case 0:
       if(num_elts > 64) num_elts = 64;
       for(var i = 0; i < num_elts; i++)
        h = caml_hash_mix_float(h, ba.data[i]);
       break;
      case 11:
       num_elts *= 2;
      case 1:
       if(num_elts > 32) num_elts = 32;
       for(var i = 0; i < num_elts; i++)
        h = caml_hash_mix_float(h, ba.data[i]);
       break;
    }
    return h;
   }
   function caml_ba_init(){return 0;}
   function caml_ba_kind(ba){return ba.kind;}
   function caml_ba_layout(ba){return ba.layout;}
   function caml_ba_map_file(vfd, kind, layout, shared, dims, pos){caml_failwith("caml_ba_map_file not implemented");
   }
   function caml_ba_map_file_bytecode(argv, argn){
    return caml_ba_map_file
            (argv[0], argv[1], argv[2], argv[3], argv[4], argv[5]);
   }
   function caml_ba_num_dims(ba){return ba.dims.length;}
   function caml_ba_reshape(ba, vind){
    vind = caml_js_from_array(vind);
    var new_dim = [], num_dims = vind.length;
    if(num_dims < 0 || num_dims > 16)
     caml_invalid_argument("Bigarray.reshape: bad number of dimensions");
    var num_elts = 1;
    for(var i = 0; i < num_dims; i++){
     new_dim[i] = vind[i];
     if(new_dim[i] < 0)
      caml_invalid_argument("Bigarray.reshape: negative dimension");
     num_elts = num_elts * new_dim[i];
    }
    var size = caml_ba_get_size(ba.dims);
    if(num_elts != size)
     caml_invalid_argument("Bigarray.reshape: size mismatch");
    return caml_ba_create_unsafe(ba.kind, ba.layout, new_dim, ba.data);
   }
   function caml_int32_bits_of_float(x){
    var float32a = new Float32Array(1);
    float32a[0] = x;
    var int32a = new Int32Array(float32a.buffer);
    return int32a[0] | 0;
   }
   function caml_int64_to_bytes(x){return x.toArray();}
   function caml_ba_serialize(writer, ba, sz){
    writer.write(32, ba.dims.length);
    writer.write(32, ba.kind | ba.layout << 8);
    if(ba.caml_custom == "_bigarr02")
     for(var i = 0; i < ba.dims.length; i++)
      if(ba.dims[i] < 0xffff)
       writer.write(16, ba.dims[i]);
      else{
       writer.write(16, 0xffff);
       writer.write(32, 0);
       writer.write(32, ba.dims[i]);
      }
    else
     for(var i = 0; i < ba.dims.length; i++) writer.write(32, ba.dims[i]);
    switch(ba.kind){
      case 2:
      case 3:
      case 12:
       for(var i = 0; i < ba.data.length; i++) writer.write(8, ba.data[i]);
       break;
      case 4:
      case 5:
       for(var i = 0; i < ba.data.length; i++) writer.write(16, ba.data[i]);
       break;
      case 6:
       for(var i = 0; i < ba.data.length; i++) writer.write(32, ba.data[i]);
       break;
      case 8:
      case 9:
       writer.write(8, 0);
       for(var i = 0; i < ba.data.length; i++) writer.write(32, ba.data[i]);
       break;
      case 7:
       for(var i = 0; i < ba.data.length / 2; i++){
        var b = caml_int64_to_bytes(ba.get(i));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
       }
       break;
      case 1:
       for(var i = 0; i < ba.data.length; i++){
        var b = caml_int64_to_bytes(caml_int64_bits_of_float(ba.get(i)));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
       }
       break;
      case 0:
       for(var i = 0; i < ba.data.length; i++){
        var b = caml_int32_bits_of_float(ba.get(i));
        writer.write(32, b);
       }
       break;
      case 10:
       for(var i = 0; i < ba.data.length / 2; i++){
        var j = ba.get(i);
        writer.write(32, caml_int32_bits_of_float(j[1]));
        writer.write(32, caml_int32_bits_of_float(j[2]));
       }
       break;
      case 11:
       for(var i = 0; i < ba.data.length / 2; i++){
        var
         complex = ba.get(i),
         b = caml_int64_to_bytes(caml_int64_bits_of_float(complex[1]));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
        var b = caml_int64_to_bytes(caml_int64_bits_of_float(complex[2]));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
       }
       break;
    }
    sz[0] = (4 + ba.dims.length) * 4;
    sz[1] = (4 + ba.dims.length) * 8;
   }
   function caml_ba_set_1(ba, i0, v){ba.set(ba.offset(i0), v); return 0;}
   function caml_ba_set_2(ba, i0, i1, v){
    ba.set(ba.offset([i0, i1]), v);
    return 0;
   }
   function caml_ba_set_3(ba, i0, i1, i2, v){
    ba.set(ba.offset([i0, i1, i2]), v);
    return 0;
   }
   function caml_ba_set_generic(ba, i, v){
    ba.set(ba.offset(caml_js_from_array(i)), v);
    return 0;
   }
   function caml_ba_slice(ba, vind){
    vind = caml_js_from_array(vind);
    var num_inds = vind.length, index = [], sub_dims = [], ofs;
    if(num_inds > ba.dims.length)
     caml_invalid_argument("Bigarray.slice: too many indices");
    if(ba.layout == 0){
     for(var i = 0; i < num_inds; i++) index[i] = vind[i];
     for(; i < ba.dims.length; i++) index[i] = 0;
     sub_dims = ba.dims.slice(num_inds);
    }
    else{
     for(var i = 0; i < num_inds; i++)
      index[ba.dims.length - num_inds + i] = vind[i];
     for(var i = 0; i < ba.dims.length - num_inds; i++) index[i] = 1;
     sub_dims = ba.dims.slice(0, ba.dims.length - num_inds);
    }
    ofs = ba.offset(index);
    var
     size = caml_ba_get_size(sub_dims),
     size_per_element = caml_ba_get_size_per_element(ba.kind),
     new_data =
       ba.data.subarray
        (ofs * size_per_element, (ofs + size) * size_per_element);
    return caml_ba_create_unsafe(ba.kind, ba.layout, sub_dims, new_data);
   }
   function caml_ba_sub(ba, ofs, len){
    var changed_dim, mul = 1;
    if(ba.layout == 0){
     for(var i = 1; i < ba.dims.length; i++) mul = mul * ba.dims[i];
     changed_dim = 0;
    }
    else{
     for(var i = 0; i < ba.dims.length - 1; i++) mul = mul * ba.dims[i];
     changed_dim = ba.dims.length - 1;
     ofs = ofs - 1;
    }
    if(ofs < 0 || len < 0 || ofs + len > ba.dims[changed_dim])
     caml_invalid_argument("Bigarray.sub: bad sub-array");
    var new_dims = [];
    for(var i = 0; i < ba.dims.length; i++) new_dims[i] = ba.dims[i];
    new_dims[changed_dim] = len;
    mul *= caml_ba_get_size_per_element(ba.kind);
    var new_data = ba.data.subarray(ofs * mul, (ofs + len) * mul);
    return caml_ba_create_unsafe(ba.kind, ba.layout, new_dims, new_data);
   }
   function caml_ba_uint8_get16(ba, i0){
    var ofs = ba.offset(i0);
    if(ofs + 1 >= ba.data.length) caml_array_bound_error();
    var b1 = ba.get(ofs), b2 = ba.get(ofs + 1);
    return b1 | b2 << 8;
   }
   function caml_ba_uint8_get32(ba, i0){
    var ofs = ba.offset(i0);
    if(ofs + 3 >= ba.data.length) caml_array_bound_error();
    var
     b1 = ba.get(ofs + 0),
     b2 = ba.get(ofs + 1),
     b3 = ba.get(ofs + 2),
     b4 = ba.get(ofs + 3);
    return b1 << 0 | b2 << 8 | b3 << 16 | b4 << 24;
   }
   function caml_ba_uint8_get64(ba, i0){
    var ofs = ba.offset(i0);
    if(ofs + 7 >= ba.data.length) caml_array_bound_error();
    var
     b1 = ba.get(ofs + 0),
     b2 = ba.get(ofs + 1),
     b3 = ba.get(ofs + 2),
     b4 = ba.get(ofs + 3),
     b5 = ba.get(ofs + 4),
     b6 = ba.get(ofs + 5),
     b7 = ba.get(ofs + 6),
     b8 = ba.get(ofs + 7);
    return caml_int64_of_bytes([b8, b7, b6, b5, b4, b3, b2, b1]);
   }
   function caml_ba_uint8_set16(ba, i0, v){
    var ofs = ba.offset(i0);
    if(ofs + 1 >= ba.data.length) caml_array_bound_error();
    ba.set(ofs + 0, v & 0xff);
    ba.set(ofs + 1, v >>> 8 & 0xff);
    return 0;
   }
   function caml_ba_uint8_set32(ba, i0, v){
    var ofs = ba.offset(i0);
    if(ofs + 3 >= ba.data.length) caml_array_bound_error();
    ba.set(ofs + 0, v & 0xff);
    ba.set(ofs + 1, v >>> 8 & 0xff);
    ba.set(ofs + 2, v >>> 16 & 0xff);
    ba.set(ofs + 3, v >>> 24 & 0xff);
    return 0;
   }
   function caml_ba_uint8_set64(ba, i0, v){
    var ofs = ba.offset(i0);
    if(ofs + 7 >= ba.data.length) caml_array_bound_error();
    var v = caml_int64_to_bytes(v);
    for(var i = 0; i < 8; i++) ba.set(ofs + i, v[7 - i]);
    return 0;
   }
   function caml_backtrace_status(_unit){
    return caml_record_backtrace_flag ? 1 : 0;
   }
   function caml_bigstring_blit_ba_to_ba(ba1, pos1, ba2, pos2, len){
    if(12 != ba1.kind)
     caml_invalid_argument("caml_bigstring_blit_ba_to_ba: kind mismatch");
    if(12 != ba2.kind)
     caml_invalid_argument("caml_bigstring_blit_ba_to_ba: kind mismatch");
    if(len == 0) return 0;
    var ofs1 = ba1.offset(pos1), ofs2 = ba2.offset(pos2);
    if(ofs1 + len > ba1.data.length) caml_array_bound_error();
    if(ofs2 + len > ba2.data.length) caml_array_bound_error();
    var slice = ba1.data.subarray(ofs1, ofs1 + len);
    ba2.data.set(slice, pos2);
    return 0;
   }
   function caml_bigstring_blit_ba_to_bytes(ba1, pos1, bytes2, pos2, len){
    if(12 != ba1.kind)
     caml_invalid_argument("caml_bigstring_blit_string_to_ba: kind mismatch");
    if(len == 0) return 0;
    var ofs1 = ba1.offset(pos1);
    if(ofs1 + len > ba1.data.length) caml_array_bound_error();
    if(pos2 + len > caml_ml_bytes_length(bytes2)) caml_array_bound_error();
    var slice = ba1.data.slice(ofs1, ofs1 + len);
    caml_blit_bytes(caml_bytes_of_array(slice), 0, bytes2, pos2, len);
    return 0;
   }
   function caml_bigstring_blit_bytes_to_ba(str1, pos1, ba2, pos2, len){
    if(12 != ba2.kind)
     caml_invalid_argument("caml_bigstring_blit_string_to_ba: kind mismatch");
    if(len == 0) return 0;
    var ofs2 = ba2.offset(pos2);
    if(pos1 + len > caml_ml_bytes_length(str1)) caml_array_bound_error();
    if(ofs2 + len > ba2.data.length) caml_array_bound_error();
    var slice = caml_uint8_array_of_bytes(str1).slice(pos1, pos1 + len);
    ba2.data.set(slice, ofs2);
    return 0;
   }
   function caml_bigstring_blit_string_to_ba(str1, pos1, ba2, pos2, len){
    if(12 != ba2.kind)
     caml_invalid_argument("caml_bigstring_blit_string_to_ba: kind mismatch");
    if(len == 0) return 0;
    var ofs2 = ba2.offset(pos2);
    if(pos1 + len > caml_ml_string_length(str1)) caml_array_bound_error();
    if(ofs2 + len > ba2.data.length) caml_array_bound_error();
    var slice = caml_uint8_array_of_string(str1).slice(pos1, pos1 + len);
    ba2.data.set(slice, ofs2);
    return 0;
   }
   function caml_bigstring_memcmp(s1, pos1, s2, pos2, len){
    for(var i = 0; i < len; i++){
     var a = caml_ba_get_1(s1, pos1 + i), b = caml_ba_get_1(s2, pos2 + i);
     if(a < b) return - 1;
     if(a > b) return 1;
    }
    return 0;
   }
   function caml_blit_string(a, b, c, d, e){
    caml_blit_bytes(caml_bytes_of_string(a), b, c, d, e);
    return 0;
   }
   function caml_bswap16(x){return (x & 0x00FF) << 8 | (x & 0xFF00) >> 8;}
   function caml_build_symbols(symb){
    var r = {};
    if(symb)
     for(var i = 1; i < symb.length; i++)
      r[caml_jsstring_of_string(symb[i][1])] = symb[i][2];
    return r;
   }
   function caml_bytes_compare(s1, s2){
    s1.t & 6 && caml_convert_string_to_bytes(s1);
    s2.t & 6 && caml_convert_string_to_bytes(s2);
    return s1.c < s2.c ? - 1 : s1.c > s2.c ? 1 : 0;
   }
   function caml_bytes_equal(s1, s2){
    if(s1 === s2) return 1;
    s1.t & 6 && caml_convert_string_to_bytes(s1);
    s2.t & 6 && caml_convert_string_to_bytes(s2);
    return s1.c == s2.c ? 1 : 0;
   }
   function caml_bytes_unsafe_get(s, i){
    switch(s.t & 6){
      default: if(i >= s.c.length) return 0;
      case 0:
       return s.c.charCodeAt(i);
      case 4:
       return s.c[i];
    }
   }
   function caml_bytes_get(s, i){
    if(i >>> 0 >= s.l) caml_bytes_bound_error();
    return caml_bytes_unsafe_get(s, i);
   }
   function caml_bytes_get16(s, i){
    if(i >>> 0 >= s.l - 1) caml_bytes_bound_error();
    var
     b1 = caml_bytes_unsafe_get(s, i),
     b2 = caml_bytes_unsafe_get(s, i + 1);
    return b2 << 8 | b1;
   }
   function caml_bytes_get32(s, i){
    if(i >>> 0 >= s.l - 3) caml_bytes_bound_error();
    var
     b1 = caml_bytes_unsafe_get(s, i),
     b2 = caml_bytes_unsafe_get(s, i + 1),
     b3 = caml_bytes_unsafe_get(s, i + 2),
     b4 = caml_bytes_unsafe_get(s, i + 3);
    return b4 << 24 | b3 << 16 | b2 << 8 | b1;
   }
   function caml_bytes_get64(s, i){
    if(i >>> 0 >= s.l - 7) caml_bytes_bound_error();
    var a = new Array(8);
    for(var j = 0; j < 8; j++) a[7 - j] = caml_bytes_unsafe_get(s, i + j);
    return caml_int64_of_bytes(a);
   }
   function caml_bytes_lessequal(s1, s2){
    s1.t & 6 && caml_convert_string_to_bytes(s1);
    s2.t & 6 && caml_convert_string_to_bytes(s2);
    return s1.c <= s2.c ? 1 : 0;
   }
   function caml_bytes_greaterequal(s1, s2){return caml_bytes_lessequal(s2, s1);
   }
   function caml_bytes_lessthan(s1, s2){
    s1.t & 6 && caml_convert_string_to_bytes(s1);
    s2.t & 6 && caml_convert_string_to_bytes(s2);
    return s1.c < s2.c ? 1 : 0;
   }
   function caml_bytes_greaterthan(s1, s2){return caml_bytes_lessthan(s2, s1);
   }
   function caml_bytes_notequal(s1, s2){return 1 - caml_bytes_equal(s1, s2);}
   function caml_bytes_of_utf16_jsstring(s){
    var tag = 9;
    if(! jsoo_is_ascii(s)) tag = 8, s = caml_utf8_of_utf16(s);
    return new MlBytes(tag, s, s.length);
   }
   function caml_bytes_set16(s, i, i16){
    if(i >>> 0 >= s.l - 1) caml_bytes_bound_error();
    var b2 = 0xFF & i16 >> 8, b1 = 0xFF & i16;
    caml_bytes_unsafe_set(s, i + 0, b1);
    caml_bytes_unsafe_set(s, i + 1, b2);
    return 0;
   }
   function caml_bytes_set32(s, i, i32){
    if(i >>> 0 >= s.l - 3) caml_bytes_bound_error();
    var
     b4 = 0xFF & i32 >> 24,
     b3 = 0xFF & i32 >> 16,
     b2 = 0xFF & i32 >> 8,
     b1 = 0xFF & i32;
    caml_bytes_unsafe_set(s, i + 0, b1);
    caml_bytes_unsafe_set(s, i + 1, b2);
    caml_bytes_unsafe_set(s, i + 2, b3);
    caml_bytes_unsafe_set(s, i + 3, b4);
    return 0;
   }
   function caml_bytes_set64(s, i, i64){
    if(i >>> 0 >= s.l - 7) caml_bytes_bound_error();
    var a = caml_int64_to_bytes(i64);
    for(var j = 0; j < 8; j++) caml_bytes_unsafe_set(s, i + 7 - j, a[j]);
    return 0;
   }
   var caml_callback = caml_call_gen;
   function caml_cbrt_float(x){return Math.cbrt(x);}
   var caml_ml_channels = new Array();
   function caml_ml_channel_get(id){return caml_ml_channels[id];}
   function caml_channel_descriptor(chanid){
    var chan = caml_ml_channel_get(chanid);
    return chan.fd;
   }
   function caml_check_bound(array, index){
    if(index >>> 0 >= array.length - 1) caml_array_bound_error();
    return array;
   }
   function caml_classify_float(x){
    if(isFinite(x)){
     if(Math.abs(x) >= 2.2250738585072014e-308) return 0;
     if(x != 0) return 1;
     return 2;
    }
    return isNaN(x) ? 4 : 3;
   }
   function caml_is_continuation_tag(t){return 0;}
   function caml_int32_unmarshal(reader, size){size[0] = 4; return reader.read32s();
   }
   function caml_nativeint_unmarshal(reader, size){
    switch(reader.read8u()){
      case 1:
       size[0] = 4; return reader.read32s();
      case 2:
       caml_failwith("input_value: native integer value too large");
      default: caml_failwith("input_value: ill-formed native integer");
    }
   }
   function caml_int64_unmarshal(reader, size){
    var t = new Array(8);
    for(var j = 0; j < 8; j++) t[j] = reader.read8u();
    size[0] = 8;
    return caml_int64_of_bytes(t);
   }
   function caml_int64_marshal(writer, v, sizes){
    var b = caml_int64_to_bytes(v);
    for(var i = 0; i < 8; i++) writer.write(8, b[i]);
    sizes[0] = 8;
    sizes[1] = 8;
   }
   function caml_int64_compare(x, y, total){return x.compare(y);}
   function caml_int64_hash(v){return v.lo32() ^ v.hi32();}
   var
    caml_custom_ops =
      {"_j":
       {deserialize: caml_int64_unmarshal,
        serialize: caml_int64_marshal,
        fixed_length: 8,
        compare: caml_int64_compare,
        hash: caml_int64_hash},
       "_i": {deserialize: caml_int32_unmarshal, fixed_length: 4},
       "_n": {deserialize: caml_nativeint_unmarshal, fixed_length: 4},
       "_bigarray":
       {deserialize:
        function(reader, sz){
         return caml_ba_deserialize(reader, sz, "_bigarray");
        },
        serialize: caml_ba_serialize,
        compare: caml_ba_compare,
        hash: caml_ba_hash},
       "_bigarr02":
       {deserialize:
        function(reader, sz){
         return caml_ba_deserialize(reader, sz, "_bigarr02");
        },
        serialize: caml_ba_serialize,
        compare: caml_ba_compare,
        hash: caml_ba_hash}};
   function caml_compare_val_get_custom(a){
    return caml_custom_ops[a.caml_custom]
           && caml_custom_ops[a.caml_custom].compare;
   }
   function caml_compare_val_number_custom(num, custom, swap, total){
    var comp = caml_compare_val_get_custom(custom);
    if(comp){
     var x = swap > 0 ? comp(custom, num, total) : comp(num, custom, total);
     if(total && x != x) return swap;
     if(+ x != + x) return + x;
     if((x | 0) != 0) return x | 0;
    }
    return swap;
   }
   function caml_compare_val_tag(a){
    if(typeof a === "number")
     return 1000;
    else if(caml_is_ml_bytes(a))
     return 252;
    else if(caml_is_ml_string(a))
     return 1252;
    else if(a instanceof Array && a[0] === a[0] >>> 0 && a[0] <= 255){var tag = a[0] | 0; return tag == 254 ? 0 : tag;}
    else if(a instanceof String)
     return 12520;
    else if(typeof a == "string")
     return 12520;
    else if(a instanceof Number)
     return 1000;
    else if(a && a.caml_custom)
     return 1255;
    else if(a && a.compare)
     return 1256;
    else if(typeof a == "function")
     return 1247;
    else if(typeof a == "symbol") return 1251;
    return 1001;
   }
   function caml_int_compare(a, b){
    if(a < b) return - 1;
    if(a == b) return 0;
    return 1;
   }
   function caml_string_compare(s1, s2){
    return s1 < s2 ? - 1 : s1 > s2 ? 1 : 0;
   }
   function caml_compare_val(a, b, total){
    var stack = [];
    for(;;){
     if(! (total && a === b)){
      var tag_a = caml_compare_val_tag(a);
      if(tag_a == 250){a = a[1]; continue;}
      var tag_b = caml_compare_val_tag(b);
      if(tag_b == 250){b = b[1]; continue;}
      if(tag_a !== tag_b){
       if(tag_a == 1000){
        if(tag_b == 1255)
         return caml_compare_val_number_custom(a, b, - 1, total);
        return - 1;
       }
       if(tag_b == 1000){
        if(tag_a == 1255)
         return caml_compare_val_number_custom(b, a, 1, total);
        return 1;
       }
       return tag_a < tag_b ? - 1 : 1;
      }
      switch(tag_a){
        case 247:
         caml_invalid_argument("compare: functional value"); break;
        case 248:
         var x = caml_int_compare(a[2], b[2]); if(x != 0) return x | 0; break;
        case 249:
         caml_invalid_argument("compare: functional value"); break;
        case 250:
         caml_invalid_argument("equal: got Forward_tag, should not happen");
         break;
        case 251:
         caml_invalid_argument("equal: abstract value"); break;
        case 252:
         if(a !== b){
          var x = caml_bytes_compare(a, b);
          if(x != 0) return x | 0;
         }
         break;
        case 253:
         caml_invalid_argument("equal: got Double_tag, should not happen");
         break;
        case 254:
         caml_invalid_argument
          ("equal: got Double_array_tag, should not happen");
         break;
        case 255:
         caml_invalid_argument("equal: got Custom_tag, should not happen");
         break;
        case 1247:
         caml_invalid_argument("compare: functional value"); break;
        case 1255:
         var comp = caml_compare_val_get_custom(a);
         if(comp != caml_compare_val_get_custom(b))
          return a.caml_custom < b.caml_custom ? - 1 : 1;
         if(! comp) caml_invalid_argument("compare: abstract value");
         var x = comp(a, b, total);
         if(x != x) return total ? - 1 : x;
         if(x !== (x | 0)) return - 1;
         if(x != 0) return x | 0;
         break;
        case 1256:
         var x = a.compare(b, total);
         if(x != x) return total ? - 1 : x;
         if(x !== (x | 0)) return - 1;
         if(x != 0) return x | 0;
         break;
        case 1000:
         a = + a;
         b = + b;
         if(a < b) return - 1;
         if(a > b) return 1;
         if(a != b){
          if(! total) return NaN;
          if(a == a) return 1;
          if(b == b) return - 1;
         }
         break;
        case 1001:
         if(a < b) return - 1;
         if(a > b) return 1;
         if(a != b){
          if(! total) return NaN;
          if(a == a) return 1;
          if(b == b) return - 1;
         }
         break;
        case 1251:
         if(a !== b){if(! total) return NaN; return 1;} break;
        case 1252:
         var a = caml_jsbytes_of_string(a), b = caml_jsbytes_of_string(b);
         if(a !== b){if(a < b) return - 1; if(a > b) return 1;}
         break;
        case 12520:
         var a = a.toString(), b = b.toString();
         if(a !== b){if(a < b) return - 1; if(a > b) return 1;}
         break;
        case 246:
        case 254:
        default:
         if(caml_is_continuation_tag(tag_a)){
          caml_invalid_argument("compare: continuation value");
          break;
         }
         if(a.length != b.length) return a.length < b.length ? - 1 : 1;
         if(a.length > 1) stack.push(a, b, 1);
         break;
      }
     }
     if(stack.length == 0) return 0;
     var i = stack.pop();
     b = stack.pop();
     a = stack.pop();
     if(i + 1 < a.length) stack.push(a, b, i + 1);
     a = a[i];
     b = b[i];
    }
   }
   function caml_compare(a, b){return caml_compare_val(a, b, true);}
   function caml_continuation_use_noexc(cont){
    var stack = cont[1];
    cont[1] = 0;
    return stack;
   }
   function caml_continuation_use_and_update_handler_noexc
   (cont, hval, hexn, heff){
    var stack = caml_continuation_use_noexc(cont);
    stack[3] = [0, hval, hexn, heff];
    return stack;
   }
   function caml_convert_raw_backtrace(){return [0];}
   function caml_convert_raw_backtrace_slot(){
    caml_failwith("caml_convert_raw_backtrace_slot");
   }
   function caml_copysign_float(x, y){
    if(y == 0) y = 1 / y;
    x = Math.abs(x);
    return y < 0 ? - x : x;
   }
   function caml_cosh_float(x){return Math.cosh(x);}
   function caml_create_file(name, content){
    var root = resolve_fs_device(name);
    if(! root.device.register) caml_failwith("cannot register file");
    root.device.register(root.rest, content);
    return 0;
   }
   function caml_create_string(len){caml_invalid_argument("String.create");}
   var caml_custom_event_index = 0, caml_decompress_input = null;
   function caml_div(x, y){
    if(y == 0) caml_raise_zero_divide();
    return x / y | 0;
   }
   var caml_domain_dls = [0];
   function caml_domain_dls_get(unit){return caml_domain_dls;}
   function caml_domain_dls_set(a){caml_domain_dls = a;}
   var caml_domain_id = 0;
   function caml_ml_mutex_unlock(t){t.locked = false; return 0;}
   var caml_domain_latest_idx = 1;
   function caml_domain_spawn(f, mutex){
    var id = caml_domain_latest_idx++, old = caml_domain_id;
    caml_domain_id = id;
    var res = caml_callback(f, [0]);
    caml_domain_id = old;
    caml_ml_mutex_unlock(mutex);
    return id;
   }
   var caml_ephe_data_offset = 2, caml_ephe_key_offset = 3;
   function caml_ephe_unset_data(x){
    if(globalThis.FinalizationRegistry && globalThis.WeakRef)
     if(x[1] instanceof globalThis.FinalizationRegistry)
      for(var j = caml_ephe_key_offset; j < x.length; j++){
       var key = x[j];
       if(key instanceof globalThis.WeakRef){
        key = key.deref();
        if(key) x[1].unregister(key);
       }
      }
    x[caml_ephe_data_offset] = undefined;
    return 0;
   }
   function caml_ephe_set_data(x, data){
    if(globalThis.FinalizationRegistry && globalThis.WeakRef)
     if(! (x[1] instanceof globalThis.FinalizationRegistry)){
      x[1] =
       new
        globalThis.FinalizationRegistry
        (function(){caml_ephe_unset_data(x);});
      for(var j = caml_ephe_key_offset; j < x.length; j++){
       var key = x[j];
       if(key instanceof globalThis.WeakRef){
        key = key.deref();
        if(key) x[1].register(key, undefined, key);
       }
      }
     }
    x[caml_ephe_data_offset] = data;
    return 0;
   }
   function caml_ephe_blit_data(src, dst){
    var n = src[caml_ephe_data_offset];
    if(n === undefined)
     caml_ephe_unset_data(dst);
    else
     caml_ephe_set_data(dst, n);
    return 0;
   }
   function caml_ephe_blit_key(a1, i1, a2, i2, len){
    caml_array_blit
     (a1,
      caml_ephe_key_offset + i1 - 1,
      a2,
      caml_ephe_key_offset + i2 - 1,
      len);
    return 0;
   }
   function caml_ephe_check_data(x){
    return x[caml_ephe_data_offset] === undefined ? 0 : 1;
   }
   function caml_ephe_check_key(x, i){
    var weak = x[caml_ephe_key_offset + i];
    if(globalThis.WeakRef && weak instanceof globalThis.WeakRef)
     weak = weak.deref();
    return weak === undefined ? 0 : 1;
   }
   function caml_weak_create(n){
    if(n < 0) caml_invalid_argument("Weak.create");
    var x = [251, "caml_ephe_list_head"];
    x.length = caml_ephe_key_offset + n;
    return x;
   }
   function caml_ephe_create(n){var x = caml_weak_create(n); return x;}
   function caml_ephe_get_data(x){
    return x[caml_ephe_data_offset] === undefined
            ? 0
            : [0, x[caml_ephe_data_offset]];
   }
   function caml_obj_dup(x){
    var l = x.length, a = new Array(l);
    for(var i = 0; i < l; i++) a[i] = x[i];
    return a;
   }
   function caml_ephe_get_data_copy(x){
    return x[caml_ephe_data_offset] === undefined
            ? 0
            : [0, caml_obj_dup(x[caml_ephe_data_offset])];
   }
   function caml_ephe_get_key(x, i){
    if(i < 0 || caml_ephe_key_offset + i >= x.length)
     caml_invalid_argument("Weak.get_key");
    var weak = x[caml_ephe_key_offset + i];
    if(globalThis.WeakRef && weak instanceof globalThis.WeakRef)
     weak = weak.deref();
    return weak === undefined ? 0 : [0, weak];
   }
   function caml_ephe_get_key_copy(x, i){
    if(i < 0 || caml_ephe_key_offset + i >= x.length)
     caml_invalid_argument("Weak.get_copy");
    var y = caml_ephe_get_key(x, i);
    if(y === 0) return y;
    var z = y[1];
    if(z instanceof Array) return [0, caml_obj_dup(z)];
    return y;
   }
   function caml_ephe_set_key(x, i, v){
    if(i < 0 || caml_ephe_key_offset + i >= x.length)
     caml_invalid_argument("Weak.set");
    if(v instanceof Object && globalThis.WeakRef){
     if(x[1].register) x[1].register(v, undefined, v);
     x[caml_ephe_key_offset + i] = new globalThis.WeakRef(v);
    }
    else
     x[caml_ephe_key_offset + i] = v;
    return 0;
   }
   function caml_ephe_unset_key(x, i){
    if(i < 0 || caml_ephe_key_offset + i >= x.length)
     caml_invalid_argument("Weak.set");
    if
     (globalThis.WeakRef
      && x[caml_ephe_key_offset + i] instanceof globalThis.WeakRef
      && x[1].unregister){
     var old = x[caml_ephe_key_offset + i].deref();
     if(old !== undefined){
      var count = 0;
      for(var j = caml_ephe_key_offset; j < x.length; j++){
       var key = x[j];
       if(key instanceof globalThis.WeakRef){
        key = key.deref();
        if(key === old) count++;
       }
      }
      if(count == 1) x[1].unregister(old);
     }
    }
    x[caml_ephe_key_offset + i] = undefined;
    return 0;
   }
   function caml_equal(x, y){return + (caml_compare_val(x, y, false) == 0);}
   function caml_erf_float(x){
    var
     a1 = 0.254829592,
     a2 = - 0.284496736,
     a3 = 1.421413741,
     a4 = - 1.453152027,
     a5 = 1.061405429,
     p = 0.3275911,
     sign = 1;
    if(x < 0) sign = - 1;
    x = Math.abs(x);
    var
     t = 1.0 / (1.0 + p * x),
     y =
       1.0
       -
        ((((a5 * t + a4) * t + a3) * t + a2) * t + a1) * t
        * Math.exp(- (x * x));
    return sign * y;
   }
   function caml_erfc_float(x){return 1 - caml_erf_float(x);}
   function caml_eventlog_pause(unit){return 0;}
   function caml_eventlog_resume(unit){return 0;}
   var caml_executable_name = caml_argv[1];
   function caml_exp2_float(x){return Math.pow(2, x);}
   function caml_expm1_float(x){return Math.expm1(x);}
   function caml_is_special_exception(exn){
    switch(exn[2]){case - 8:case - 11:case - 12: return 1;default: return 0;
    }
   }
   function caml_format_exception(exn){
    var r = "";
    if(exn[0] == 0){
     r += exn[1][1];
     if
      (exn.length == 3 && exn[2][0] == 0 && caml_is_special_exception(exn[1]))
      var bucket = exn[2], start = 1;
     else
      var start = 2, bucket = exn;
     r += "(";
     for(var i = start; i < bucket.length; i++){
      if(i > start) r += ", ";
      var v = bucket[i];
      if(typeof v == "number")
       r += v.toString();
      else if(v instanceof MlBytes)
       r += '"' + v.toString() + '"';
      else if(typeof v == "string")
       r += '"' + v.toString() + '"';
      else
       r += "_";
     }
     r += ")";
    }
    else if(exn[0] == 248) r += exn[1];
    return r;
   }
   function caml_fatal_uncaught_exception(err){
    if(err instanceof Array && (err[0] == 0 || err[0] == 248)){
     var handler = caml_named_value("Printexc.handle_uncaught_exception");
     if(handler)
      caml_callback(handler, [err, false]);
     else{
      var
       msg = caml_format_exception(err),
       at_exit = caml_named_value("Pervasives.do_at_exit");
      if(at_exit) caml_callback(at_exit, [0]);
      console.error("Fatal error: exception " + msg);
      if(err.js_error) throw err.js_error;
     }
    }
    else
     throw err;
   }
   function caml_fill_bytes(s, i, l, c){
    if(l > 0)
     if(i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
      if(c == 0){
       s.c = "";
       s.t = 2;
      }
      else{
       s.c = caml_str_repeat(l, String.fromCharCode(c));
       s.t = l == s.l ? 0 : 2;
      }
     else{
      if(s.t != 4) caml_convert_bytes_to_array(s);
      for(l += i; i < l; i++) s.c[i] = c;
     }
    return 0;
   }
   function caml_final_register(){return 0;}
   var all_finalizers = new globalThis.Set();
   function caml_final_register_called_without_value(cb, a){
    if(globalThis.FinalizationRegistry && a instanceof Object){
     var
      x =
        new
         globalThis.FinalizationRegistry
         (function(x){all_finalizers.delete(x); cb(0); return;});
     x.register(a, x);
     all_finalizers.add(x);
    }
    return 0;
   }
   function caml_final_release(){return 0;}
   function caml_finish_formatting(f, rawbuffer){
    if(f.uppercase) rawbuffer = rawbuffer.toUpperCase();
    var len = rawbuffer.length;
    if(f.signedconv && (f.sign < 0 || f.signstyle != "-")) len++;
    if(f.alternate){if(f.base == 8) len += 1; if(f.base == 16) len += 2;}
    var buffer = "";
    if(f.justify == "+" && f.filler == " ")
     for(var i = len; i < f.width; i++) buffer += " ";
    if(f.signedconv)
     if(f.sign < 0)
      buffer += "-";
     else if(f.signstyle != "-") buffer += f.signstyle;
    if(f.alternate && f.base == 8) buffer += "0";
    if(f.alternate && f.base == 16) buffer += f.uppercase ? "0X" : "0x";
    if(f.justify == "+" && f.filler == "0")
     for(var i = len; i < f.width; i++) buffer += "0";
    buffer += rawbuffer;
    if(f.justify == "-") for(var i = len; i < f.width; i++) buffer += " ";
    return caml_string_of_jsbytes(buffer);
   }
   function caml_float_compare(x, y){
    if(x === y) return 0;
    if(x < y) return - 1;
    if(x > y) return 1;
    if(x === x) return 1;
    if(y === y) return - 1;
    return 0;
   }
   function caml_float_of_bytes(a){
    return caml_int64_float_of_bits(caml_int64_of_bytes(a));
   }
   function caml_float_of_string(s){
    var res;
    s = caml_jsbytes_of_string(s);
    res = + s;
    if(s.length > 0 && res === res) return res;
    s = s.replace(/_/g, "");
    res = + s;
    if(s.length > 0 && res === res || /^[+-]?nan$/i.test(s)) return res;
    var m = /^ *([+-]?)0x([0-9a-f]+)\.?([0-9a-f]*)(p([+-]?[0-9]+))?/i.exec(s);
    if(m){
     var
      m3 = m[3].replace(/0+$/, ""),
      mantissa = parseInt(m[1] + m[2] + m3, 16),
      exponent = (m[5] | 0) - 4 * m3.length;
     res = mantissa * Math.pow(2, exponent);
     return res;
    }
    if(/^\+?inf(inity)?$/i.test(s)) return Infinity;
    if(/^-inf(inity)?$/i.test(s)) return - Infinity;
    caml_failwith("float_of_string");
   }
   function caml_floatarray_blit(a1, i1, a2, i2, len){
    if(i2 <= i1)
     for(var j = 1; j <= len; j++) a2[i2 + j] = a1[i1 + j];
    else
     for(var j = len; j >= 1; j--) a2[i2 + j] = a1[i1 + j];
    return 0;
   }
   function caml_floatarray_create(len){
    if(len < 0) caml_array_bound_error();
    var len = len + 1 | 0, b = new Array(len);
    b[0] = 254;
    for(var i = 1; i < len; i++) b[i] = 0;
    return b;
   }
   function caml_fma_float(x, y, z){
    var
     SPLIT = Math.pow(2, 27) + 1,
     MIN_VALUE = Math.pow(2, - 1022),
     EPSILON = Math.pow(2, - 52),
     C = 416,
     A = Math.pow(2, + C),
     B = Math.pow(2, - C);
    function multiply(a, b){
     var
      at = SPLIT * a,
      ahi = at - (at - a),
      alo = a - ahi,
      bt = SPLIT * b,
      bhi = bt - (bt - b),
      blo = b - bhi,
      p = a * b,
      e = ahi * bhi - p + ahi * blo + alo * bhi + alo * blo;
     return {p: p, e: e};
    }
    function add(a, b){
     var s = a + b, v = s - a, e = a - (s - v) + (b - v);
     return {s: s, e: e};
    }
    function adjust(x, y){
     return x !== 0 && y !== 0 && SPLIT * x - (SPLIT * x - x) === x
             ? x * (1 + (x < 0 ? - 1 : + 1) * (y < 0 ? - 1 : + 1) * EPSILON)
             : x;
    }
    if
     (x === 0 || x !== x || x === + (1 / 0) || x === - (1 / 0) || y === 0
      || y !== y
      || y === + (1 / 0)
      || y === - (1 / 0))
     return x * y + z;
    if(z === 0) return x * y;
    if(z !== z || z === + (1 / 0) || z === - (1 / 0)) return z;
    var scale = 1;
    while(Math.abs(x) > A){scale *= A; x *= B;}
    while(Math.abs(y) > A){scale *= A; y *= B;}
    if(scale === 1 / 0) return x * y * scale;
    while(Math.abs(x) < B){scale *= B; x *= A;}
    while(Math.abs(y) < B){scale *= B; y *= A;}
    if(scale === 0) return z;
    var xs = x, ys = y, zs = z / scale;
    if(Math.abs(zs) > Math.abs(xs * ys) * 4 / EPSILON) return z;
    if(Math.abs(zs) < Math.abs(xs * ys) * EPSILON / 4 * EPSILON / 4)
     zs = (z < 0 ? - 1 : + 1) * MIN_VALUE;
    var
     xy = multiply(xs, ys),
     s = add(xy.p, zs),
     u = add(xy.e, s.e),
     i = add(s.s, u.s),
     f = i.s + adjust(i.e, u.e);
    if(f === 0) return f;
    var fs = f * scale;
    if(Math.abs(fs) > MIN_VALUE) return fs;
    return fs + adjust(f - fs / scale, i.e) * scale;
   }
   function caml_parse_format(fmt){
    fmt = caml_jsbytes_of_string(fmt);
    var len = fmt.length;
    if(len > 31) caml_invalid_argument("format_int: format too long");
    var
     f =
       {justify: "+",
        signstyle: "-",
        filler: " ",
        alternate: false,
        base: 0,
        signedconv: false,
        width: 0,
        uppercase: false,
        sign: 1,
        prec: - 1,
        conv: "f"};
    for(var i = 0; i < len; i++){
     var c = fmt.charAt(i);
     switch(c){
       case "-":
        f.justify = "-"; break;
       case "+":
       case " ":
        f.signstyle = c; break;
       case "0":
        f.filler = "0"; break;
       case "#":
        f.alternate = true; break;
       case "1":
       case "2":
       case "3":
       case "4":
       case "5":
       case "6":
       case "7":
       case "8":
       case "9":
        f.width = 0;
        while(c = fmt.charCodeAt(i) - 48, c >= 0 && c <= 9){f.width = f.width * 10 + c; i++;}
        i--;
        break;
       case ".":
        f.prec = 0;
        i++;
        while(c = fmt.charCodeAt(i) - 48, c >= 0 && c <= 9){f.prec = f.prec * 10 + c; i++;}
        i--;
       case "d":
       case "i":
        f.signedconv = true;
       case "u":
        f.base = 10; break;
       case "x":
        f.base = 16; break;
       case "X":
        f.base = 16; f.uppercase = true; break;
       case "o":
        f.base = 8; break;
       case "e":
       case "f":
       case "g":
        f.signedconv = true; f.conv = c; break;
       case "E":
       case "F":
       case "G":
        f.signedconv = true;
        f.uppercase = true;
        f.conv = c.toLowerCase();
        break;
     }
    }
    return f;
   }
   function caml_format_float(fmt, x){
    function toFixed(x, dp){
     if(Math.abs(x) < 1.0)
      return x.toFixed(dp);
     else{
      var e = parseInt(x.toString().split("+")[1]);
      if(e > 20){
       e -= 20;
       x /= Math.pow(10, e);
       x += new Array(e + 1).join("0");
       if(dp > 0) x = x + "." + new Array(dp + 1).join("0");
       return x;
      }
      else
       return x.toFixed(dp);
     }
    }
    var s, f = caml_parse_format(fmt), prec = f.prec < 0 ? 6 : f.prec;
    if(x < 0 || x == 0 && 1 / x == - Infinity){f.sign = - 1; x = - x;}
    if(isNaN(x)){
     s = "nan";
     f.filler = " ";
    }
    else if(! isFinite(x)){
     s = "inf";
     f.filler = " ";
    }
    else
     switch(f.conv){
       case "e":
        var s = x.toExponential(prec), i = s.length;
        if(s.charAt(i - 3) == "e")
         s = s.slice(0, i - 1) + "0" + s.slice(i - 1);
        break;
       case "f":
        s = toFixed(x, prec); break;
       case "g":
        prec = prec ? prec : 1;
        s = x.toExponential(prec - 1);
        var j = s.indexOf("e"), exp = + s.slice(j + 1);
        if(exp < - 4 || x >= 1e21 || x.toFixed(0).length > prec){
         var i = j - 1;
         while(s.charAt(i) == "0") i--;
         if(s.charAt(i) == ".") i--;
         s = s.slice(0, i + 1) + s.slice(j);
         i = s.length;
         if(s.charAt(i - 3) == "e")
          s = s.slice(0, i - 1) + "0" + s.slice(i - 1);
         break;
        }
        else{
         var p = prec;
         if(exp < 0){
          p -= exp + 1;
          s = x.toFixed(p);
         }
         else
          while(s = x.toFixed(p), s.length > prec + 1) p--;
         if(p){
          var i = s.length - 1;
          while(s.charAt(i) == "0") i--;
          if(s.charAt(i) == ".") i--;
          s = s.slice(0, i + 1);
         }
        }
        break;
     }
    return caml_finish_formatting(f, s);
   }
   function caml_format_int(fmt, i){
    if(caml_jsbytes_of_string(fmt) == "%d")
     return caml_string_of_jsbytes("" + i);
    var f = caml_parse_format(fmt);
    if(i < 0) if(f.signedconv){f.sign = - 1; i = - i;} else i >>>= 0;
    var s = i.toString(f.base);
    if(f.prec >= 0){
     f.filler = " ";
     var n = f.prec - s.length;
     if(n > 0) s = caml_str_repeat(n, "0") + s;
    }
    return caml_finish_formatting(f, s);
   }
   var caml_oo_last_id = 0;
   function caml_fresh_oo_id(){return caml_oo_last_id++;}
   function caml_frexp_float(x){
    if(x == 0 || ! isFinite(x)) return [0, x, 0];
    var neg = x < 0;
    if(neg) x = - x;
    var exp = Math.max(- 1023, jsoo_floor_log2(x) + 1);
    x *= Math.pow(2, - exp);
    while(x < 0.5){x *= 2; exp--;}
    while(x >= 1){x *= 0.5; exp++;}
    if(neg) x = - x;
    return [0, x, exp];
   }
   function jsoo_create_file(name, content){
    var
     name = caml_string_of_jsbytes(name),
     content = caml_string_of_jsbytes(content);
    return caml_create_file(name, content);
   }
   function caml_fs_init(){
    var tmp = globalThis.caml_fs_tmp;
    if(tmp)
     for(var i = 0; i < tmp.length; i++)
      jsoo_create_file(tmp[i].name, tmp[i].content);
    globalThis.jsoo_create_file = jsoo_create_file;
    globalThis.caml_fs_tmp = [];
    return 0;
   }
   function caml_gc_compaction(){return 0;}
   function caml_gc_counters(){return [254, 0, 0, 0];}
   function caml_gc_full_major(unit){
    if(typeof globalThis.gc == "function") globalThis.gc();
    return 0;
   }
   function caml_gc_get(){return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];}
   function caml_gc_huge_fallback_count(unit){return 0;}
   function caml_gc_major(unit){
    if(typeof globalThis.gc == "function") globalThis.gc();
    return 0;
   }
   function caml_gc_major_slice(work){return 0;}
   function caml_gc_minor(unit){
    if(typeof globalThis.gc == "function") globalThis.gc(true);
    return 0;
   }
   function caml_gc_minor_words(unit){return 0;}
   function caml_gc_quick_stat(){
    return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
   }
   function caml_gc_set(_control){return 0;}
   function caml_gc_stat(){return caml_gc_quick_stat();}
   function caml_get_continuation_callstack(){return [0];}
   function caml_get_current_callstack(){return [0];}
   function caml_get_exception_backtrace(){return 0;}
   function caml_get_exception_raw_backtrace(){return [0];}
   function caml_get_global_data(){return caml_global_data;}
   function caml_get_major_bucket(n){return 0;}
   function caml_get_major_credit(n){return 0;}
   function caml_get_minor_free(unit){return 0;}
   var caml_method_cache = [];
   function caml_get_public_method(obj, tag, cacheid){
    var meths = obj[1], ofs = caml_method_cache[cacheid];
    if(ofs === undefined)
     for(var i = caml_method_cache.length; i < cacheid; i++)
      caml_method_cache[i] = 0;
    else if(meths[ofs] === tag) return meths[ofs - 1];
    var li = 3, hi = meths[1] * 2 + 1, mi;
    while(li < hi){
     mi = li + hi >> 1 | 1;
     if(tag < meths[mi + 1]) hi = mi - 2; else li = mi;
    }
    caml_method_cache[cacheid] = li + 1;
    return tag == meths[li + 1] ? meths[li] : 0;
   }
   function caml_gr_arc_aux(ctx, cx, cy, ry, rx, a1, a2){
    while(a1 > a2) a2 += 360;
    a1 /= 180;
    a2 /= 180;
    var
     rot = 0,
     xPos,
     yPos,
     xPos_prev,
     yPos_prev,
     space = 2,
     num = (a2 - a1) * Math.PI * ((rx + ry) / 2) / space | 0,
     delta = (a2 - a1) * Math.PI / num,
     i = a1 * Math.PI;
    for(var j = 0; j <= num; j++){
     xPos =
      cx - rx * Math.sin(i) * Math.sin(rot * Math.PI)
      + ry * Math.cos(i) * Math.cos(rot * Math.PI);
     xPos = xPos.toFixed(2);
     yPos =
      cy + ry * Math.cos(i) * Math.sin(rot * Math.PI)
      + rx * Math.sin(i) * Math.cos(rot * Math.PI);
     yPos = yPos.toFixed(2);
     if(j == 0)
      ctx.moveTo(xPos, yPos);
     else if(xPos_prev != xPos || yPos_prev != yPos) ctx.lineTo(xPos, yPos);
     xPos_prev = xPos;
     yPos_prev = yPos;
     i -= delta;
    }
    return 0;
   }
   var caml_gr_state;
   function caml_gr_state_get(){
    if(caml_gr_state) return caml_gr_state;
    throw caml_maybe_attach_backtrace
           ([0,
             caml_named_value("Graphics.Graphic_failure"),
             caml_string_of_jsbytes("Not initialized")]);
   }
   function caml_gr_blit_image(im, x, y){
    var
     s = caml_gr_state_get(),
     im2 =
       s.context.getImageData
        (x, s.height - im.height - y, im.width, im.height);
    for(var i = 0; i < im2.data.length; i += 4){
     im.data[i] = im2.data[i];
     im.data[i + 1] = im2.data[i + 1];
     im.data[i + 2] = im2.data[i + 2];
     im.data[i + 3] = im2.data[i + 3];
    }
    return 0;
   }
   function caml_gr_clear_graph(){
    var s = caml_gr_state_get();
    s.canvas.width = s.width;
    s.canvas.height = s.height;
    return 0;
   }
   function caml_gr_close_graph(){
    var s = caml_gr_state_get();
    s.canvas.width = 0;
    s.canvas.height = 0;
    return 0;
   }
   function caml_gr_close_subwindow(a){
    caml_failwith("caml_gr_close_subwindow not Implemented");
   }
   function caml_gr_create_image(x, y){
    var s = caml_gr_state_get();
    return s.context.createImageData(x, y);
   }
   function caml_gr_current_x(){var s = caml_gr_state_get(); return s.x;}
   function caml_gr_current_y(){var s = caml_gr_state_get(); return s.y;}
   function caml_gr_display_mode(){
    caml_failwith("caml_gr_display_mode not Implemented");
   }
   function caml_gr_doc_of_state(state){
    if(state.canvas.ownerDocument) return state.canvas.ownerDocument;
   }
   function caml_gr_draw_arc(x, y, rx, ry, a1, a2){
    var s = caml_gr_state_get();
    s.context.beginPath();
    caml_gr_arc_aux(s.context, x, s.height - y, rx, ry, a1, a2);
    s.context.stroke();
    return 0;
   }
   function caml_gr_draw_str(str){
    var s = caml_gr_state_get(), m = s.context.measureText(str), dx = m.width;
    s.context.fillText(str, s.x, s.height - s.y);
    s.x += dx | 0;
    return 0;
   }
   function caml_gr_draw_char(c){
    caml_gr_draw_str(String.fromCharCode(c));
    return 0;
   }
   function caml_gr_draw_image(im, x, y){
    var s = caml_gr_state_get();
    if(! im.image){
     var canvas = document.createElement("canvas");
     canvas.width = s.width;
     canvas.height = s.height;
     canvas.getContext("2d").putImageData(im, 0, 0);
     var image = new globalThis.Image();
     image.onload =
      function(){
       s.context.drawImage(image, x, s.height - im.height - y);
       im.image = image;
      };
     image.src = canvas.toDataURL("image/png");
    }
    else
     s.context.drawImage(im.image, x, s.height - im.height - y);
    return 0;
   }
   function caml_gr_draw_rect(x, y, w, h){
    var s = caml_gr_state_get();
    s.context.strokeRect(x, s.height - y, w, - h);
    return 0;
   }
   function caml_gr_draw_string(str){
    caml_gr_draw_str(caml_jsstring_of_string(str));
    return 0;
   }
   function caml_gr_dump_image(im){
    var data = [0];
    for(var i = 0; i < im.height; i++){
     data[i + 1] = [0];
     for(var j = 0; j < im.width; j++){
      var
       o = i * (im.width * 4) + j * 4,
       r = im.data[o + 0],
       g = im.data[o + 1],
       b = im.data[o + 2];
      data[i + 1][j + 1] = (r << 16) + (g << 8) + b;
     }
    }
    return data;
   }
   function caml_gr_fill_arc(x, y, rx, ry, a1, a2){
    var s = caml_gr_state_get();
    s.context.beginPath();
    caml_gr_arc_aux(s.context, x, s.height - y, rx, ry, a1, a2);
    s.context.fill();
    return 0;
   }
   function caml_gr_fill_poly(ar){
    var s = caml_gr_state_get();
    s.context.beginPath();
    s.context.moveTo(ar[1][1], s.height - ar[1][2]);
    for(var i = 2; i < ar.length; i++)
     s.context.lineTo(ar[i][1], s.height - ar[i][2]);
    s.context.lineTo(ar[1][1], s.height - ar[1][2]);
    s.context.fill();
    return 0;
   }
   function caml_gr_fill_rect(x, y, w, h){
    var s = caml_gr_state_get();
    s.context.fillRect(x, s.height - y, w, - h);
    return 0;
   }
   function caml_gr_lineto(x, y){
    var s = caml_gr_state_get();
    s.context.beginPath();
    s.context.moveTo(s.x, s.height - s.y);
    s.context.lineTo(x, s.height - y);
    s.context.stroke();
    s.x = x;
    s.y = y;
    return 0;
   }
   function caml_gr_make_image(arr){
    var
     s = caml_gr_state_get(),
     h = arr.length - 1,
     w = arr[1].length - 1,
     im = s.context.createImageData(w, h);
    for(var i = 0; i < h; i++)
     for(var j = 0; j < w; j++){
      var c = arr[i + 1][j + 1], o = i * (w * 4) + j * 4;
      if(c == - 1){
       im.data[o + 0] = 0;
       im.data[o + 1] = 0;
       im.data[o + 2] = 0;
       im.data[o + 3] = 0;
      }
      else{
       im.data[o + 0] = c >> 16 & 0xff;
       im.data[o + 1] = c >> 8 & 0xff;
       im.data[o + 2] = c >> 0 & 0Xff;
       im.data[o + 3] = 0xff;
      }
     }
    return im;
   }
   function caml_gr_moveto(x, y){
    var s = caml_gr_state_get();
    s.x = x;
    s.y = y;
    return 0;
   }
   function caml_gr_set_window_title(name){
    var s = caml_gr_state_get();
    s.title = name;
    var jsname = caml_jsstring_of_string(name);
    if(s.set_title) s.set_title(jsname);
    return 0;
   }
   function caml_gr_set_line_width(w){
    var s = caml_gr_state_get();
    s.line_width = w;
    s.context.lineWidth = w;
    return 0;
   }
   function caml_gr_set_text_size(size){
    var s = caml_gr_state_get();
    s.text_size = size;
    s.context.font = s.text_size + "px " + caml_jsstring_of_string(s.font);
    return 0;
   }
   function caml_gr_set_font(f){
    var s = caml_gr_state_get();
    s.font = f;
    s.context.font = s.text_size + "px " + caml_jsstring_of_string(s.font);
    return 0;
   }
   function caml_gr_set_color(color){
    var s = caml_gr_state_get();
    function convert(number){
     var str = "" + number.toString(16);
     while(str.length < 2) str = "0" + str;
     return str;
    }
    var r = color >> 16 & 0xff, g = color >> 8 & 0xff, b = color >> 0 & 0xff;
    s.color = color;
    var c_str = "#" + convert(r) + convert(g) + convert(b);
    s.context.fillStyle = c_str;
    s.context.strokeStyle = c_str;
    return 0;
   }
   function caml_gr_resize_window(w, h){
    var s = caml_gr_state_get();
    s.width = w;
    s.height = h;
    s.canvas.width = w;
    s.canvas.height = h;
    return 0;
   }
   function caml_gr_state_init(){
    caml_gr_moveto(caml_gr_state.x, caml_gr_state.y);
    caml_gr_resize_window(caml_gr_state.width, caml_gr_state.height);
    caml_gr_set_line_width(caml_gr_state.line_width);
    caml_gr_set_text_size(caml_gr_state.text_size);
    caml_gr_set_font(caml_gr_state.font);
    caml_gr_set_color(caml_gr_state.color);
    caml_gr_set_window_title(caml_gr_state.title);
    caml_gr_state.context.textBaseline = "bottom";
   }
   function caml_gr_state_set(ctx){
    caml_gr_state = ctx;
    caml_gr_state_init();
    return 0;
   }
   function caml_gr_state_create(canvas, w, h){
    var context = canvas.getContext("2d");
    return {context: context,
            canvas: canvas,
            x: 0,
            y: 0,
            width: w,
            height: h,
            line_width: 1,
            font: caml_string_of_jsbytes("fixed"),
            text_size: 26,
            color: 0x000000,
            title: caml_string_of_jsbytes("")};
   }
   function caml_gr_open_graph(info){
    var info = caml_jsstring_of_string(info);
    function get(name){
     var res = info.match("(^|,) *" + name + " *= *([a-zA-Z0-9_]+) *(,|$)");
     if(res) return res[2];
    }
    var specs = [];
    if(! (info == "")) specs.push(info);
    var target = get("target");
    if(! target) target = "";
    var status = get("status");
    if(! status) specs.push("status=1");
    var w = get("width");
    w = w ? parseInt(w) : 200;
    specs.push("width=" + w);
    var h = get("height");
    h = h ? parseInt(h) : 200;
    specs.push("height=" + h);
    var win = globalThis.open("about:blank", target, specs.join(","));
    if(! win) caml_failwith("Graphics.open_graph: cannot open the window");
    var doc = win.document, canvas = doc.createElement("canvas");
    canvas.width = w;
    canvas.height = h;
    var ctx = caml_gr_state_create(canvas, w, h);
    ctx.set_title = function(title){doc.title = title;};
    caml_gr_state_set(ctx);
    var body = doc.body;
    body.style.margin = "0px";
    body.appendChild(canvas);
    return 0;
   }
   function caml_gr_open_subwindow(a, b, c, d){
    caml_failwith("caml_gr_open_subwindow not Implemented");
   }
   function caml_gr_plot(x, y){
    var
     s = caml_gr_state_get(),
     im = s.context.createImageData(1, 1),
     d = im.data,
     color = s.color;
    d[0] = color >> 16 & 0xff;
    d[1] = color >> 8 & 0xff, d[2] = color >> 0 & 0xff;
    d[3] = 0xFF;
    s.x = x;
    s.y = y;
    s.context.putImageData(im, x, s.height - y);
    return 0;
   }
   function caml_gr_point_color(x, y){
    var
     s = caml_gr_state_get(),
     im = s.context.getImageData(x, s.height - y, 1, 1),
     d = im.data;
    return (d[0] << 16) + (d[1] << 8) + d[2];
   }
   function caml_gr_remember_mode(){
    caml_failwith("caml_gr_remember_mode not Implemented");
   }
   function caml_gr_sigio_handler(){return 0;}
   function caml_gr_sigio_signal(){return 0;}
   function caml_gr_size_x(){var s = caml_gr_state_get(); return s.width;}
   function caml_gr_size_y(){var s = caml_gr_state_get(); return s.height;}
   function caml_gr_synchronize(){
    caml_failwith("caml_gr_synchronize not Implemented");
   }
   function caml_gr_text_size(txt){
    var
     s = caml_gr_state_get(),
     w = s.context.measureText(caml_jsstring_of_string(txt)).width;
    return [0, w, s.text_size];
   }
   function caml_gr_wait_event(_evl){
    caml_failwith
     ("caml_gr_wait_event not Implemented: use Graphics_js instead");
   }
   function caml_gr_window_id(a){
    caml_failwith("caml_gr_window_id not Implemented");
   }
   function caml_greaterequal(x, y){
    return + (caml_compare_val(x, y, false) >= 0);
   }
   function caml_greaterthan(x, y){
    return + (caml_compare_val(x, y, false) > 0);
   }
   function caml_hash_mix_jsbytes(h, s){
    var len = s.length, i, w;
    for(i = 0; i + 4 <= len; i += 4){
     w =
      s.charCodeAt(i) | s.charCodeAt(i + 1) << 8 | s.charCodeAt(i + 2) << 16
      | s.charCodeAt(i + 3) << 24;
     h = caml_hash_mix_int(h, w);
    }
    w = 0;
    switch(len & 3){
      case 3:
       w = s.charCodeAt(i + 2) << 16;
      case 2:
       w |= s.charCodeAt(i + 1) << 8;
      case 1:
       w |= s.charCodeAt(i); h = caml_hash_mix_int(h, w);
    }
    h ^= len;
    return h;
   }
   function caml_hash_mix_string(h, v){
    return caml_hash_mix_jsbytes(h, caml_jsbytes_of_string(v));
   }
   function caml_hash_mix_bytes_arr(h, s){
    var len = s.length, i, w;
    for(i = 0; i + 4 <= len; i += 4){
     w = s[i] | s[i + 1] << 8 | s[i + 2] << 16 | s[i + 3] << 24;
     h = caml_hash_mix_int(h, w);
    }
    w = 0;
    switch(len & 3){
      case 3:
       w = s[i + 2] << 16;
      case 2:
       w |= s[i + 1] << 8;
      case 1:
       w |= s[i]; h = caml_hash_mix_int(h, w);
    }
    h ^= len;
    return h;
   }
   function caml_ml_bytes_content(s){
    switch(s.t & 6){
      default: caml_convert_string_to_bytes(s);
      case 0:
       return s.c;
      case 4:
       return s.c;
    }
   }
   function caml_hash_mix_bytes(h, v){
    var content = caml_ml_bytes_content(v);
    return typeof content === "string"
            ? caml_hash_mix_jsbytes(h, content)
            : caml_hash_mix_bytes_arr(h, content);
   }
   function caml_hash_mix_final(h){
    h ^= h >>> 16;
    h = caml_mul(h, 0x85ebca6b | 0);
    h ^= h >>> 13;
    h = caml_mul(h, 0xc2b2ae35 | 0);
    h ^= h >>> 16;
    return h;
   }
   function caml_hash(count, limit, seed, obj){
    var queue, rd, wr, sz, num, h, v, i, len;
    sz = limit;
    if(sz < 0 || sz > 256) sz = 256;
    num = count;
    h = seed;
    queue = [obj];
    rd = 0;
    wr = 1;
    while(rd < wr && num > 0){
     v = queue[rd++];
     if(v && v.caml_custom){
      if
       (caml_custom_ops[v.caml_custom] && caml_custom_ops[v.caml_custom].hash){
       var hh = caml_custom_ops[v.caml_custom].hash(v);
       h = caml_hash_mix_int(h, hh);
       num--;
      }
     }
     else if(v instanceof Array && v[0] === (v[0] | 0))
      switch(v[0]){
        case 248:
         h = caml_hash_mix_int(h, v[2]); num--; break;
        case 250:
         queue[--rd] = v[1]; break;
        default:
         if(caml_is_continuation_tag(v[0])) break;
         var tag = v.length - 1 << 10 | v[0];
         h = caml_hash_mix_int(h, tag);
         for(i = 1, len = v.length; i < len; i++){if(wr >= sz) break; queue[wr++] = v[i];
         }
         break;
      }
     else if(caml_is_ml_bytes(v)){
      h = caml_hash_mix_bytes(h, v);
      num--;
     }
     else if(caml_is_ml_string(v)){
      h = caml_hash_mix_string(h, v);
      num--;
     }
     else if(typeof v === "string"){
      h = caml_hash_mix_jsbytes(h, v);
      num--;
     }
     else if(v === (v | 0)){
      h = caml_hash_mix_int(h, v + v + 1);
      num--;
     }
     else if(typeof v === "number"){h = caml_hash_mix_float(h, v); num--;}
    }
    h = caml_hash_mix_final(h);
    return h & 0x3FFFFFFF;
   }
   function caml_hash_mix_bigstring(h, bs){
    return caml_hash_mix_bytes_arr(h, bs.data);
   }
   function num_digits_nat(nat, ofs, len){
    for(var i = len - 1; i >= 0; i--) if(nat.data[ofs + i] != 0) return i + 1;
    return 1;
   }
   function caml_hash_nat(x){
    var len = num_digits_nat(x, 0, x.data.length), h = 0;
    for(var i = 0; i < len; i++) h = caml_hash_mix_int(h, x.data[i]);
    return h;
   }
   function caml_hexstring_of_float(x, prec, style){
    if(! isFinite(x)){
     if(isNaN(x)) return caml_string_of_jsstring("nan");
     return caml_string_of_jsstring(x > 0 ? "infinity" : "-infinity");
    }
    var sign = x == 0 && 1 / x == - Infinity ? 1 : x >= 0 ? 0 : 1;
    if(sign) x = - x;
    var exp = 0;
    if(x == 0)
     ;
    else if(x < 1)
     while(x < 1 && exp > - 1022){x *= 2; exp--;}
    else
     while(x >= 2){x /= 2; exp++;}
    var exp_sign = exp < 0 ? "" : "+", sign_str = "";
    if(sign)
     sign_str = "-";
    else
     switch(style){
       case 43:
        sign_str = "+"; break;
       case 32:
        sign_str = " "; break;
       default: break;
     }
    if(prec >= 0 && prec < 13){
     var cst = Math.pow(2, prec * 4);
     x = Math.round(x * cst) / cst;
    }
    var x_str = x.toString(16);
    if(prec >= 0){
     var idx = x_str.indexOf(".");
     if(idx < 0)
      x_str += "." + caml_str_repeat(prec, "0");
     else{
      var size = idx + 1 + prec;
      if(x_str.length < size)
       x_str += caml_str_repeat(size - x_str.length, "0");
      else
       x_str = x_str.substr(0, size);
     }
    }
    return caml_string_of_jsstring
            (sign_str + "0x" + x_str + "p" + exp_sign + exp.toString(10));
   }
   function caml_hypot_float(x, y){return Math.hypot(x, y);}
   var caml_marshal_header_size = 20;
   function caml_refill(chan){
    if(chan.refill != null){
     var str = chan.refill(), str_a = caml_uint8_array_of_string(str);
     if(str_a.length == 0)
      chan.refill = null;
     else{
      if(chan.buffer.length < chan.buffer_max + str_a.length){
       var b = new Uint8Array(chan.buffer_max + str_a.length);
       b.set(chan.buffer);
       chan.buffer = b;
      }
      chan.buffer.set(str_a, chan.buffer_max);
      chan.offset += str_a.length;
      chan.buffer_max += str_a.length;
     }
    }
    else{
     var
      nread =
        chan.file.read
         (chan.offset,
          chan.buffer,
          chan.buffer_max,
          chan.buffer.length - chan.buffer_max);
     chan.offset += nread;
     chan.buffer_max += nread;
    }
   }
   function caml_raise_end_of_file(){
    caml_raise_constant(caml_global_data.End_of_file);
   }
   function caml_marshal_data_size(s, ofs){
    var r = new UInt8ArrayReader(caml_uint8_array_of_bytes(s), ofs);
    function readvlq(overflow){
     var c = r.read8u(), n = c & 0x7F;
     while((c & 0x80) != 0){
      c = r.read8u();
      var n7 = n << 7;
      if(n != n7 >> 7) overflow[0] = true;
      n = n7 | c & 0x7F;
     }
     return n;
    }
    switch(r.read32u()){
      case 0x8495A6BE:
       var header_len = 20, data_len = r.read32u(); break;
      case 0x8495A6BD:
       var
        header_len = r.read8u() & 0x3F,
        overflow = [false],
        data_len = readvlq(overflow);
       if(overflow[0])
        caml_failwith
         ("Marshal.data_size: object too large to be read back on this platform");
       break;
      case 0x8495A6BF:
      default: caml_failwith("Marshal.data_size: bad object"); break;
    }
    return header_len - caml_marshal_header_size + data_len;
   }
   function caml_input_value_from_reader(reader, ofs){
    function readvlq(overflow){
     var c = reader.read8u(), n = c & 0x7F;
     while((c & 0x80) != 0){
      c = reader.read8u();
      var n7 = n << 7;
      if(n != n7 >> 7) overflow[0] = true;
      n = n7 | c & 0x7F;
     }
     return n;
    }
    var magic = reader.read32u();
    switch(magic){
      case 0x8495A6BE:
       var
        header_len = 20,
        compressed = 0,
        data_len = reader.read32u(),
        uncompressed_data_len = data_len,
        num_objects = reader.read32u(),
        _size_32 = reader.read32u(),
        _size_64 = reader.read32u();
       break;
      case 0x8495A6BD:
       var
        header_len = reader.read8u() & 0x3F,
        compressed = 1,
        overflow = [false],
        data_len = readvlq(overflow),
        uncompressed_data_len = readvlq(overflow),
        num_objects = readvlq(overflow),
        _size_32 = readvlq(overflow),
        _size_64 = readvlq(overflow);
       if(overflow[0])
        caml_failwith
         ("caml_input_value_from_reader: object too large to be read back on this platform");
       break;
      case 0x8495A6BF:
       caml_failwith
        ("caml_input_value_from_reader: object too large to be read back on a 32-bit platform");
       break;
      default:
       caml_failwith("caml_input_value_from_reader: bad object"); break;
    }
    var
     stack = [],
     intern_obj_table = num_objects > 0 ? [] : null,
     obj_counter = 0;
    function intern_rec(reader){
     var code = reader.read8u();
     if(code >= 0x40)
      if(code >= 0x80){
       var tag = code & 0xF, size = code >> 4 & 0x7, v = [tag];
       if(size == 0) return v;
       if(intern_obj_table) intern_obj_table[obj_counter++] = v;
       stack.push(v, size);
       return v;
      }
      else
       return code & 0x3F;
     else if(code >= 0x20){
      var len = code & 0x1F, v = reader.readstr(len);
      if(intern_obj_table) intern_obj_table[obj_counter++] = v;
      return v;
     }
     else
      switch(code){
        case 0x00:
         return reader.read8s();
        case 0x01:
         return reader.read16s();
        case 0x02:
         return reader.read32s();
        case 0x03:
         caml_failwith("input_value: integer too large"); break;
        case 0x04:
         var offset = reader.read8u();
         if(compressed == 0) offset = obj_counter - offset;
         return intern_obj_table[offset];
        case 0x05:
         var offset = reader.read16u();
         if(compressed == 0) offset = obj_counter - offset;
         return intern_obj_table[offset];
        case 0x06:
         var offset = reader.read32u();
         if(compressed == 0) offset = obj_counter - offset;
         return intern_obj_table[offset];
        case 0x08:
         var
          header = reader.read32u(),
          tag = header & 0xFF,
          size = header >> 10,
          v = [tag];
         if(size == 0) return v;
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         stack.push(v, size);
         return v;
        case 0x13:
         caml_failwith("input_value: data block too large"); break;
        case 0x09:
         var len = reader.read8u(), v = reader.readstr(len);
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         return v;
        case 0x0A:
         var len = reader.read32u(), v = reader.readstr(len);
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         return v;
        case 0x0C:
         var t = new Array(8);
         for(var i = 0; i < 8; i++) t[7 - i] = reader.read8u();
         var v = caml_float_of_bytes(t);
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         return v;
        case 0x0B:
         var t = new Array(8);
         for(var i = 0; i < 8; i++) t[i] = reader.read8u();
         var v = caml_float_of_bytes(t);
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         return v;
        case 0x0E:
         var len = reader.read8u(), v = new Array(len + 1);
         v[0] = 254;
         var t = new Array(8);
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         for(var i = 1; i <= len; i++){
          for(var j = 0; j < 8; j++) t[7 - j] = reader.read8u();
          v[i] = caml_float_of_bytes(t);
         }
         return v;
        case 0x0D:
         var len = reader.read8u(), v = new Array(len + 1);
         v[0] = 254;
         var t = new Array(8);
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         for(var i = 1; i <= len; i++){
          for(var j = 0; j < 8; j++) t[j] = reader.read8u();
          v[i] = caml_float_of_bytes(t);
         }
         return v;
        case 0x07:
         var len = reader.read32u(), v = new Array(len + 1);
         v[0] = 254;
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         var t = new Array(8);
         for(var i = 1; i <= len; i++){
          for(var j = 0; j < 8; j++) t[7 - j] = reader.read8u();
          v[i] = caml_float_of_bytes(t);
         }
         return v;
        case 0x0F:
         var len = reader.read32u(), v = new Array(len + 1);
         v[0] = 254;
         var t = new Array(8);
         for(var i = 1; i <= len; i++){
          for(var j = 0; j < 8; j++) t[j] = reader.read8u();
          v[i] = caml_float_of_bytes(t);
         }
         return v;
        case 0x10:
        case 0x11:
         caml_failwith("input_value: code pointer"); break;
        case 0x12:
        case 0x18:
        case 0x19:
         var c, s = "";
         while((c = reader.read8u()) != 0) s += String.fromCharCode(c);
         var ops = caml_custom_ops[s], expected_size;
         if(! ops)
          caml_failwith("input_value: unknown custom block identifier");
         switch(code){
           case 0x12: break;
           case 0x19:
            if(! ops.fixed_length)
             caml_failwith("input_value: expected a fixed-size custom block");
            expected_size = ops.fixed_length;
            break;
           case 0x18:
            expected_size = reader.read32u();
            reader.read32s();
            reader.read32s();
            break;
         }
         var
          old_pos = reader.i,
          size = [0],
          v = ops.deserialize(reader, size);
         if(expected_size != undefined)
          if(expected_size != size[0])
           caml_failwith
            ("input_value: incorrect length of serialized custom block");
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         return v;
        default: caml_failwith("input_value: ill-formed message");
      }
    }
    if(compressed)
     if(caml_decompress_input)
      var
       data = reader.readuint8array(data_len),
       res = new Uint8Array(uncompressed_data_len),
       res = caml_decompress_input(data, res),
       reader = new UInt8ArrayReader(res, 0);
     else
      caml_failwith("input_value: compressed object, cannot decompress");
    var res = intern_rec(reader);
    while(stack.length > 0){
     var size = stack.pop(), v = stack.pop(), d = v.length;
     if(d < size) stack.push(v, size);
     v[d] = intern_rec(reader);
    }
    if(typeof ofs != "number") ofs[0] = reader.i;
    return res;
   }
   function caml_string_of_bytes(s){
    s.t & 6 && caml_convert_string_to_bytes(s);
    return caml_string_of_jsbytes(s.c);
   }
   function caml_input_value_from_bytes(s, ofs){
    var
     reader =
       new
        MlStringReader
        (caml_string_of_bytes(s), typeof ofs == "number" ? ofs : ofs[0]);
    return caml_input_value_from_reader(reader, ofs);
   }
   function caml_input_value(chanid){
    var
     chan = caml_ml_channel_get(chanid),
     header = new Uint8Array(caml_marshal_header_size);
    function block(buffer, offset, n){
     var r = 0;
     while(r < n){
      if(chan.buffer_curr >= chan.buffer_max){
       chan.buffer_curr = 0;
       chan.buffer_max = 0;
       caml_refill(chan);
      }
      if(chan.buffer_curr >= chan.buffer_max) break;
      buffer[offset + r] = chan.buffer[chan.buffer_curr];
      chan.buffer_curr++;
      r++;
     }
     return r;
    }
    var r = block(header, 0, caml_marshal_header_size);
    if(r == 0)
     caml_raise_end_of_file();
    else if(r < caml_marshal_header_size)
     caml_failwith("input_value: truncated object");
    var
     len = caml_marshal_data_size(caml_bytes_of_array(header), 0),
     buf = new Uint8Array(len + caml_marshal_header_size);
    buf.set(header, 0);
    var r = block(buf, caml_marshal_header_size, len);
    if(r < len)
     caml_failwith("input_value: truncated object " + r + "  " + len);
    var
     offset = [0],
     res = caml_input_value_from_bytes(caml_bytes_of_array(buf), offset);
    chan.offset = chan.offset + offset[0];
    return res;
   }
   function caml_input_value_from_string(s, ofs){
    var reader = new MlStringReader(s, typeof ofs == "number" ? ofs : ofs[0]);
    return caml_input_value_from_reader(reader, ofs);
   }
   function caml_input_value_to_outside_heap(c){return caml_input_value(c);}
   function caml_install_signal_handler(){return 0;}
   function caml_int32_bswap(x){
    return (x & 0x000000FF) << 24 | (x & 0x0000FF00) << 8
           | (x & 0x00FF0000) >>> 8
           | (x & 0xFF000000) >>> 24;
   }
   function caml_int64_add(x, y){return x.add(y);}
   function caml_int64_and(x, y){return x.and(y);}
   function caml_int64_bswap(x){
    var y = caml_int64_to_bytes(x);
    return caml_int64_of_bytes
            ([y[7], y[6], y[5], y[4], y[3], y[2], y[1], y[0]]);
   }
   function caml_int64_div(x, y){return x.div(y);}
   function caml_int64_is_zero(x){return + x.isZero();}
   function caml_int64_of_int32(x){
    return new MlInt64(x & 0xffffff, x >> 24 & 0xffffff, x >> 31 & 0xffff);
   }
   function caml_int64_to_int32(x){return x.toInt();}
   function caml_int64_is_negative(x){return + x.isNeg();}
   function caml_int64_neg(x){return x.neg();}
   function caml_int64_format(fmt, x){
    var f = caml_parse_format(fmt);
    if(f.signedconv && caml_int64_is_negative(x)){f.sign = - 1; x = caml_int64_neg(x);}
    var
     buffer = "",
     wbase = caml_int64_of_int32(f.base),
     cvtbl = "0123456789abcdef";
    do{
     var p = x.udivmod(wbase);
     x = p.quotient;
     buffer = cvtbl.charAt(caml_int64_to_int32(p.modulus)) + buffer;
    }
    while
     (! caml_int64_is_zero(x));
    if(f.prec >= 0){
     f.filler = " ";
     var n = f.prec - buffer.length;
     if(n > 0) buffer = caml_str_repeat(n, "0") + buffer;
    }
    return caml_finish_formatting(f, buffer);
   }
   function caml_int64_mod(x, y){return x.mod(y);}
   function caml_int64_mul(x, y){return x.mul(y);}
   function caml_int64_ult(x, y){return x.ucompare(y) < 0;}
   function caml_parse_sign_and_base(s){
    var i = 0, len = caml_ml_string_length(s), base = 10, sign = 1;
    if(len > 0)
     switch(caml_string_unsafe_get(s, i)){
       case 45:
        i++; sign = - 1; break;
       case 43:
        i++; sign = 1; break;
     }
    if(i + 1 < len && caml_string_unsafe_get(s, i) == 48)
     switch(caml_string_unsafe_get(s, i + 1)){
       case 120:
       case 88:
        base = 16; i += 2; break;
       case 111:
       case 79:
        base = 8; i += 2; break;
       case 98:
       case 66:
        base = 2; i += 2; break;
       case 117:
       case 85:
        i += 2; break;
     }
    return [i, sign, base];
   }
   function caml_parse_digit(c){
    if(c >= 48 && c <= 57) return c - 48;
    if(c >= 65 && c <= 90) return c - 55;
    if(c >= 97 && c <= 122) return c - 87;
    return - 1;
   }
   function caml_int64_of_string(s){
    var
     r = caml_parse_sign_and_base(s),
     i = r[0],
     sign = r[1],
     base = r[2],
     base64 = caml_int64_of_int32(base),
     threshold =
       new MlInt64(0xffffff, 0xfffffff, 0xffff).udivmod(base64).quotient,
     c = caml_string_unsafe_get(s, i),
     d = caml_parse_digit(c);
    if(d < 0 || d >= base) caml_failwith("int_of_string");
    var res = caml_int64_of_int32(d);
    for(;;){
     i++;
     c = caml_string_unsafe_get(s, i);
     if(c == 95) continue;
     d = caml_parse_digit(c);
     if(d < 0 || d >= base) break;
     if(caml_int64_ult(threshold, res)) caml_failwith("int_of_string");
     d = caml_int64_of_int32(d);
     res = caml_int64_add(caml_int64_mul(base64, res), d);
     if(caml_int64_ult(res, d)) caml_failwith("int_of_string");
    }
    if(i != caml_ml_string_length(s)) caml_failwith("int_of_string");
    if(base == 10 && caml_int64_ult(new MlInt64(0, 0, 0x8000), res))
     caml_failwith("int_of_string");
    if(sign < 0) res = caml_int64_neg(res);
    return res;
   }
   function caml_int64_or(x, y){return x.or(y);}
   function caml_int64_shift_left(x, s){return x.shift_left(s);}
   function caml_int64_shift_right(x, s){return x.shift_right(s);}
   function caml_int64_shift_right_unsigned(x, s){return x.shift_right_unsigned(s);
   }
   function caml_int64_sub(x, y){return x.sub(y);}
   function caml_int64_to_float(x){return x.toFloat();}
   function caml_int64_xor(x, y){return x.xor(y);}
   function caml_int_of_string(s){
    var
     r = caml_parse_sign_and_base(s),
     i = r[0],
     sign = r[1],
     base = r[2],
     len = caml_ml_string_length(s),
     threshold = - 1 >>> 0,
     c = i < len ? caml_string_unsafe_get(s, i) : 0,
     d = caml_parse_digit(c);
    if(d < 0 || d >= base) caml_failwith("int_of_string");
    var res = d;
    for(i++; i < len; i++){
     c = caml_string_unsafe_get(s, i);
     if(c == 95) continue;
     d = caml_parse_digit(c);
     if(d < 0 || d >= base) break;
     res = base * res + d;
     if(res > threshold) caml_failwith("int_of_string");
    }
    if(i != len) caml_failwith("int_of_string");
    res = sign * res;
    if(base == 10 && (res | 0) != res) caml_failwith("int_of_string");
    return res | 0;
   }
   function caml_is_js(){return 1;}
   function caml_is_printable(c){return + (c > 31 && c < 127);}
   function caml_js_call(f, o, args){
    return f.apply(o, caml_js_from_array(args));
   }
   function caml_js_delete(o, f){delete o[f]; return 0;}
   function caml_js_equals(x, y){return + (x == y);}
   function caml_js_error_of_exception(exn){
    if(exn.js_error) return exn.js_error;
    return null;
   }
   function caml_js_error_option_of_exception(exn){
    if(exn.js_error) return [0, exn.js_error];
    return 0;
   }
   function caml_js_eval_string(s){return eval(caml_jsstring_of_string(s));}
   function caml_js_expr(s){
    console.error("caml_js_expr: fallback to runtime evaluation\n");
    return eval(caml_jsstring_of_string(s));
   }
   function caml_js_from_bool(x){return ! ! x;}
   function caml_js_from_float(x){return x;}
   function caml_js_from_string(s){return caml_jsstring_of_string(s);}
   function caml_js_fun_call(f, a){
    switch(a.length){
      case 1:
       return f();
      case 2:
       return f(a[1]);
      case 3:
       return f(a[1], a[2]);
      case 4:
       return f(a[1], a[2], a[3]);
      case 5:
       return f(a[1], a[2], a[3], a[4]);
      case 6:
       return f(a[1], a[2], a[3], a[4], a[5]);
      case 7:
       return f(a[1], a[2], a[3], a[4], a[5], a[6]);
      case 8:
       return f(a[1], a[2], a[3], a[4], a[5], a[6], a[7]);
    }
    return f.apply(null, caml_js_from_array(a));
   }
   function caml_js_function_arity(f){return f.l >= 0 ? f.l : f.l = f.length;}
   function caml_js_get(o, f){return o[f];}
   function caml_js_get_console(){
    var
     c = console,
     m =
       ["log",
        "debug",
        "info",
        "warn",
        "error",
        "assert",
        "dir",
        "dirxml",
        "trace",
        "group",
        "groupCollapsed",
        "groupEnd",
        "time",
        "timeEnd"];
    function f(){}
    for(var i = 0; i < m.length; i++) if(! c[m[i]]) c[m[i]] = f;
    return c;
   }
   function caml_js_html_entities(s){
    var entity = /^&#?[0-9a-zA-Z]+;$/;
    if(s.match(entity)){
     var str, temp = document.createElement("p");
     temp.innerHTML = s;
     str = temp.textContent || temp.innerText;
     temp = null;
     return str;
    }
    else
     caml_failwith("Invalid entity " + s);
   }
   var caml_js_regexps = {amp: /&/g, lt: /</g, quot: /\"/g, all: /[&<\"]/};
   function caml_js_html_escape(s){
    if(! caml_js_regexps.all.test(s)) return s;
    return s.replace(caml_js_regexps.amp, "&amp;").replace
             (caml_js_regexps.lt, "&lt;").replace
            (caml_js_regexps.quot, "&quot;");
   }
   function caml_js_instanceof(o, c){return o instanceof c ? 1 : 0;}
   function caml_js_meth_call(o, f, args){
    return o[caml_jsstring_of_string(f)].apply(o, caml_js_from_array(args));
   }
   function caml_js_new(c, a){
    switch(a.length){
      case 1:
       return new c;
      case 2:
       return new c(a[1]);
      case 3:
       return new c(a[1], a[2]);
      case 4:
       return new c(a[1], a[2], a[3]);
      case 5:
       return new c(a[1], a[2], a[3], a[4]);
      case 6:
       return new c(a[1], a[2], a[3], a[4], a[5]);
      case 7:
       return new c(a[1], a[2], a[3], a[4], a[5], a[6]);
      case 8:
       return new c(a[1], a[2], a[3], a[4], a[5], a[6], a[7]);
    }
    function F(){return c.apply(this, caml_js_from_array(a));}
    F.prototype = c.prototype;
    return new F;
   }
   function caml_js_object(a){
    var o = {};
    for(var i = 1; i < a.length; i++){
     var p = a[i];
     o[caml_jsstring_of_string(p[1])] = p[2];
    }
    return o;
   }
   function caml_js_on_ie(){
    var
     ua =
       globalThis.navigator && globalThis.navigator.userAgent
        ? globalThis.navigator.userAgent
        : "";
    return ua.indexOf("MSIE") != - 1 && ua.indexOf("Opera") != 0;
   }
   function caml_js_pure_expr(f){return caml_callback(f, [0]);}
   function caml_js_set(o, f, v){o[f] = v; return 0;}
   function caml_js_strict_equals(x, y){return + (x === y);}
   function caml_js_to_array(a){
    var len = a.length, b = new Array(len + 1);
    b[0] = 0;
    for(var i = 0; i < len; i++) b[i + 1] = a[i];
    return b;
   }
   function caml_js_to_bool(x){return + x;}
   function caml_js_to_byte_string(s){return caml_string_of_jsbytes(s);}
   function caml_js_to_float(x){return x;}
   function caml_js_to_int32(x){return x | 0;}
   function caml_js_to_string(s){return caml_string_of_jsstring(s);}
   function caml_js_typeof(o){return typeof o;}
   function caml_js_var(x){
    var x = caml_jsstring_of_string(x);
    if(! x.match(/^[a-zA-Z_$][a-zA-Z_$0-9]*(\.[a-zA-Z_$][a-zA-Z_$0-9]*)*$/))
     console.error
      ('caml_js_var: "' + x
       + '" is not a valid JavaScript variable. continuing ..');
    return eval(x);
   }
   function caml_js_wrap_callback(f){
    return function(){
     var len = arguments.length;
     if(len > 0){
      var args = new Array(len);
      for(var i = 0; i < len; i++) args[i] = arguments[i];
     }
     else
      args = [undefined];
     var res = caml_callback(f, args);
     return res instanceof Function ? caml_js_wrap_callback(res) : res;};
   }
   function caml_js_wrap_callback_arguments(f){
    return function(){
     var len = arguments.length, args = new Array(len);
     for(var i = 0; i < len; i++) args[i] = arguments[i];
     return caml_callback(f, [args]);};
   }
   function caml_js_wrap_callback_strict(arity, f){
    return function(){
     var
      n = arguments.length,
      args = new Array(arity),
      len = Math.min(arguments.length, arity);
     for(var i = 0; i < len; i++) args[i] = arguments[i];
     return caml_callback(f, args);};
   }
   function caml_js_wrap_callback_unsafe(f){
    return function(){
     var len = caml_js_function_arity(f), args = new Array(len);
     for(var i = 0; i < len; i++) args[i] = arguments[i];
     return caml_callback(f, args);};
   }
   function caml_js_wrap_meth_callback(f){
    return function(){
     var len = arguments.length, args = new Array(len + 1);
     args[0] = this;
     for(var i = 0; i < len; i++) args[i + 1] = arguments[i];
     var res = caml_callback(f, args);
     return res instanceof Function ? caml_js_wrap_callback(res) : res;};
   }
   function caml_js_wrap_meth_callback_arguments(f){
    return function(){
     var len = arguments.length, args = new Array(len);
     for(var i = 0; i < len; i++) args[i] = arguments[i];
     return caml_callback(f, [this, args]);};
   }
   function caml_js_wrap_meth_callback_strict(arity, f){
    return function(){
     var args = new Array(arity + 1), len = Math.min(arguments.length, arity);
     args[0] = this;
     for(var i = 0; i < len; i++) args[i + 1] = arguments[i];
     return caml_callback(f, args);};
   }
   function caml_js_wrap_meth_callback_unsafe(f){
    return function(){
     var len = caml_js_function_arity(f) - 1, args = new Array(len + 1);
     args[0] = this;
     for(var i = 0; i < len; i++) args[i + 1] = arguments[i];
     return caml_callback(f, args);};
   }
   function caml_jsoo_flags_effects(unit){return 0;}
   function caml_jsoo_flags_use_js_string(unit){return 1;}
   function caml_lazy_make_forward(v){return [250, v];}
   function caml_obj_tag(x){
    if(x instanceof Array && x[0] == x[0] >>> 0)
     return x[0];
    else if(caml_is_ml_bytes(x))
     return 252;
    else if(caml_is_ml_string(x))
     return 252;
    else if(x instanceof Function || typeof x == "function")
     return 247;
    else if(x && x.caml_custom) return 255; else return 1000;
   }
   function caml_lazy_read_result(o){
    return caml_obj_tag(o) == 250 ? o[1] : o;
   }
   function caml_obj_update_tag(b, o, n){
    if(b[0] == o){b[0] = n; return 1;}
    return 0;
   }
   function caml_lazy_reset_to_lazy(o){
    caml_obj_update_tag(o, 244, 246);
    return 0;
   }
   function caml_lazy_update_to_forcing(o){
    return o instanceof Array && o[0] == o[0] >>> 0
            && caml_obj_update_tag(o, 246, 244)
            ? 0
            : 1;
   }
   function caml_lazy_update_to_forward(o){
    caml_obj_update_tag(o, 244, 250);
    return 0;
   }
   function caml_ldexp_float(x, exp){
    exp |= 0;
    if(exp > 1023){
     exp -= 1023;
     x *= Math.pow(2, 1023);
     if(exp > 1023){exp -= 1023; x *= Math.pow(2, 1023);}
    }
    if(exp < - 1023){exp += 1023; x *= Math.pow(2, - 1023);}
    x *= Math.pow(2, exp);
    return x;
   }
   function caml_lessequal(x, y){
    return + (caml_compare_val(x, y, false) <= 0);
   }
   function caml_lessthan(x, y){return + (caml_compare_val(x, y, false) < 0);}
   function caml_lex_array(s){
    s = caml_jsbytes_of_string(s);
    var l = s.length / 2, a = new Array(l);
    for(var i = 0; i < l; i++)
     a[i] = (s.charCodeAt(2 * i) | s.charCodeAt(2 * i + 1) << 8) << 16 >> 16;
    return a;
   }
   function caml_lex_engine(tbl, start_state, lexbuf){
    var
     lex_buffer = 2,
     lex_buffer_len = 3,
     lex_start_pos = 5,
     lex_curr_pos = 6,
     lex_last_pos = 7,
     lex_last_action = 8,
     lex_eof_reached = 9,
     lex_base = 1,
     lex_backtrk = 2,
     lex_default = 3,
     lex_trans = 4,
     lex_check = 5;
    if(! tbl.lex_default){
     tbl.lex_base = caml_lex_array(tbl[lex_base]);
     tbl.lex_backtrk = caml_lex_array(tbl[lex_backtrk]);
     tbl.lex_check = caml_lex_array(tbl[lex_check]);
     tbl.lex_trans = caml_lex_array(tbl[lex_trans]);
     tbl.lex_default = caml_lex_array(tbl[lex_default]);
    }
    var
     c,
     state = start_state,
     buffer = caml_uint8_array_of_bytes(lexbuf[lex_buffer]);
    if(state >= 0){
     lexbuf[lex_last_pos] = lexbuf[lex_start_pos] = lexbuf[lex_curr_pos];
     lexbuf[lex_last_action] = - 1;
    }
    else
     state = - state - 1;
    for(;;){
     var base = tbl.lex_base[state];
     if(base < 0) return - base - 1;
     var backtrk = tbl.lex_backtrk[state];
     if(backtrk >= 0){
      lexbuf[lex_last_pos] = lexbuf[lex_curr_pos];
      lexbuf[lex_last_action] = backtrk;
     }
     if(lexbuf[lex_curr_pos] >= lexbuf[lex_buffer_len])
      if(lexbuf[lex_eof_reached] == 0) return - state - 1; else c = 256;
     else{c = buffer[lexbuf[lex_curr_pos]]; lexbuf[lex_curr_pos]++;}
     if(tbl.lex_check[base + c] == state)
      state = tbl.lex_trans[base + c];
     else
      state = tbl.lex_default[state];
     if(state < 0){
      lexbuf[lex_curr_pos] = lexbuf[lex_last_pos];
      if(lexbuf[lex_last_action] == - 1)
       caml_failwith("lexing: empty token");
      else
       return lexbuf[lex_last_action];
     }
     else if(c == 256) lexbuf[lex_eof_reached] = 0;
    }
   }
   function caml_list_mount_point(){
    var prev = 0;
    for(var i = 0; i < jsoo_mount_point.length; i++){
     var old = prev;
     prev = [0, caml_string_of_jsbytes(jsoo_mount_point[i].path), old];
    }
    return prev;
   }
   function caml_list_of_js_array(a){
    var l = 0;
    for(var i = a.length - 1; i >= 0; i--){var e = a[i]; l = [0, e, l];}
    return l;
   }
   function caml_list_to_js_array(l){
    var a = [];
    for(; l !== 0; l = l[2]) a.push(l[1]);
    return a;
   }
   function caml_log10_float(x){return Math.log10(x);}
   function caml_log1p_float(x){return Math.log1p(x);}
   function caml_log2_float(x){return Math.log2(x);}
   function caml_new_string(s){return caml_string_of_jsbytes(s);}
   function caml_lxm_next(v){
    function shift_l(x, k){return caml_int64_shift_left(x, k);}
    function shift_r(x, k){return caml_int64_shift_right_unsigned(x, k);}
    function or(a, b){return caml_int64_or(a, b);}
    function xor(a, b){return caml_int64_xor(a, b);}
    function add(a, b){return caml_int64_add(a, b);}
    function mul(a, b){return caml_int64_mul(a, b);}
    function rotl(x, k){return or(shift_l(x, k), shift_r(x, 64 - k));}
    function get(a, i){return caml_ba_get_1(a, i);}
    function set(a, i, x){return caml_ba_set_1(a, i, x);}
    var
     M = caml_int64_of_string(caml_new_string("0xd1342543de82ef95")),
     daba = caml_int64_of_string(caml_new_string("0xdaba0b6eb09322e3")),
     z,
     q0,
     q1,
     st = v,
     a = get(st, 0),
     s = get(st, 1),
     x0 = get(st, 2),
     x1 = get(st, 3);
    z = add(s, x0);
    z = mul(xor(z, shift_r(z, 32)), daba);
    z = mul(xor(z, shift_r(z, 32)), daba);
    z = xor(z, shift_r(z, 32));
    set(st, 1, add(mul(s, M), a));
    var q0 = x0, q1 = x1;
    q1 = xor(q1, q0);
    q0 = rotl(q0, 24);
    q0 = xor(xor(q0, q1), shift_l(q1, 16));
    q1 = rotl(q1, 37);
    set(st, 2, q0);
    set(st, 3, q1);
    return z;
   }
   function caml_make_float_vect(len){
    if(len < 0) caml_array_bound_error();
    var len = len + 1 | 0, b = new Array(len);
    b[0] = 254;
    for(var i = 1; i < len; i++) b[i] = 0;
    return b;
   }
   function caml_make_vect(len, init){
    if(len < 0) caml_array_bound_error();
    var len = len + 1 | 0, b = new Array(len);
    b[0] = 0;
    for(var i = 1; i < len; i++) b[i] = init;
    return b;
   }
   var
    caml_marshal_constants =
      {PREFIX_SMALL_BLOCK: 0x80,
       PREFIX_SMALL_INT: 0x40,
       PREFIX_SMALL_STRING: 0x20,
       CODE_INT8: 0x00,
       CODE_INT16: 0x01,
       CODE_INT32: 0x02,
       CODE_INT64: 0x03,
       CODE_SHARED8: 0x04,
       CODE_SHARED16: 0x05,
       CODE_SHARED32: 0x06,
       CODE_BLOCK32: 0x08,
       CODE_BLOCK64: 0x13,
       CODE_STRING8: 0x09,
       CODE_STRING32: 0x0A,
       CODE_DOUBLE_BIG: 0x0B,
       CODE_DOUBLE_LITTLE: 0x0C,
       CODE_DOUBLE_ARRAY8_BIG: 0x0D,
       CODE_DOUBLE_ARRAY8_LITTLE: 0x0E,
       CODE_DOUBLE_ARRAY32_BIG: 0x0F,
       CODE_DOUBLE_ARRAY32_LITTLE: 0x07,
       CODE_CODEPOINTER: 0x10,
       CODE_INFIXPOINTER: 0x11,
       CODE_CUSTOM: 0x12,
       CODE_CUSTOM_LEN: 0x18,
       CODE_CUSTOM_FIXED: 0x19};
   function caml_maybe_print_stats(unit){return 0;}
   function caml_md5_bytes(s, ofs, len){
    var ctx = caml_MD5Init(), a = caml_uint8_array_of_bytes(s);
    caml_MD5Update(ctx, a.subarray(ofs, ofs + len), len);
    return caml_string_of_array(caml_MD5Final(ctx));
   }
   function caml_ml_input_block(chanid, ba, i, l){
    var
     chan = caml_ml_channel_get(chanid),
     n = l,
     avail = chan.buffer_max - chan.buffer_curr;
    if(l <= avail){
     ba.set(chan.buffer.subarray(chan.buffer_curr, chan.buffer_curr + l), i);
     chan.buffer_curr += l;
    }
    else if(avail > 0){
     ba.set
      (chan.buffer.subarray(chan.buffer_curr, chan.buffer_curr + avail), i);
     chan.buffer_curr += avail;
     n = avail;
    }
    else{
     chan.buffer_curr = 0;
     chan.buffer_max = 0;
     caml_refill(chan);
     var avail = chan.buffer_max - chan.buffer_curr;
     if(n > avail) n = avail;
     ba.set(chan.buffer.subarray(chan.buffer_curr, chan.buffer_curr + n), i);
     chan.buffer_curr += n;
    }
    return n | 0;
   }
   function caml_md5_chan(chanid, toread){
    var ctx = caml_MD5Init(), buffer = new Uint8Array(4096);
    if(toread < 0)
     while(true){
      var read = caml_ml_input_block(chanid, buffer, 0, buffer.length);
      if(read == 0) break;
      caml_MD5Update(ctx, buffer.subarray(0, read), read);
     }
    else
     while(toread > 0){
      var
       read =
         caml_ml_input_block
          (chanid, buffer, 0, toread > buffer.length ? buffer.length : toread);
      if(read == 0) caml_raise_end_of_file();
      caml_MD5Update(ctx, buffer.subarray(0, read), read);
      toread -= read;
     }
    return caml_string_of_array(caml_MD5Final(ctx));
   }
   function caml_md5_string(s, ofs, len){
    return caml_md5_bytes(caml_bytes_of_string(s), ofs, len);
   }
   function caml_memprof_discard(t){return 0;}
   function caml_memprof_set(_control){return 0;}
   function caml_memprof_start(rate, stack_size, tracker){return 0;}
   function caml_memprof_stop(unit){return 0;}
   function caml_ml_channel_redirect(captured, into){
    var
     to_restore = caml_ml_channel_get(captured),
     new_ = caml_ml_channel_get(into);
    caml_ml_channels[captured] = new_;
    return to_restore;
   }
   function caml_ml_channel_restore(captured, to_restore){caml_ml_channels[captured] = to_restore; return 0;
   }
   function caml_ml_channel_size(chanid){
    var chan = caml_ml_channel_get(chanid);
    return chan.file.length();
   }
   function caml_ml_channel_size_64(chanid){
    var chan = caml_ml_channel_get(chanid);
    return caml_int64_of_float(chan.file.length());
   }
   var caml_sys_fds = new Array(3);
   function caml_sys_close(fd){
    var file = caml_sys_fds[fd];
    if(file) file.close();
    delete caml_sys_fds[fd];
    return 0;
   }
   function caml_ml_flush(chanid){
    var chan = caml_ml_channel_get(chanid);
    if(! chan.opened) caml_raise_sys_error("Cannot flush a closed channel");
    if(! chan.buffer || chan.buffer_curr == 0) return 0;
    if(chan.output)
     chan.output(caml_subarray_to_jsbytes(chan.buffer, 0, chan.buffer_curr));
    else
     chan.file.write(chan.offset, chan.buffer, 0, chan.buffer_curr);
    chan.offset += chan.buffer_curr;
    chan.buffer_curr = 0;
    return 0;
   }
   function caml_ml_close_channel(chanid){
    var chan = caml_ml_channel_get(chanid);
    if(chan.opened){
     chan.opened = false;
     caml_sys_close(chan.fd);
     chan.fd = - 1;
     chan.buffer = new Uint8Array(0);
     chan.buffer_curr = 0;
     chan.buffer_max = 0;
    }
    return 0;
   }
   function caml_ml_condition_broadcast(t){return 0;}
   function caml_ml_condition_new(unit){return {condition: 1};}
   function caml_ml_condition_signal(t){return 0;}
   function caml_ml_condition_wait(t, mutext){return 0;}
   function caml_ml_debug_info_status(){return 0;}
   function caml_ml_domain_cpu_relax(unit){return 0;}
   function caml_ml_domain_id(unit){return caml_domain_id;}
   function caml_ml_domain_set_name(_name){return 0;}
   var caml_ml_domain_unique_token_ = [0];
   function caml_ml_domain_unique_token(unit){return caml_ml_domain_unique_token_;
   }
   var caml_runtime_warnings = 0;
   function caml_ml_enable_runtime_warnings(bool){caml_runtime_warnings = bool; return 0;
   }
   function caml_ml_input(chanid, b, i, l){
    var ba = caml_uint8_array_of_bytes(b);
    return caml_ml_input_block(chanid, ba, i, l);
   }
   function caml_ml_input_bigarray(chanid, b, i, l){
    var ba = caml_ba_to_typed_array(b);
    return caml_ml_input_block(chanid, ba, i, l);
   }
   function caml_ml_input_char(chanid){
    var chan = caml_ml_channel_get(chanid);
    if(chan.buffer_curr >= chan.buffer_max){
     chan.buffer_curr = 0;
     chan.buffer_max = 0;
     caml_refill(chan);
    }
    if(chan.buffer_curr >= chan.buffer_max) caml_raise_end_of_file();
    var res = chan.buffer[chan.buffer_curr];
    chan.buffer_curr++;
    return res;
   }
   function caml_ml_input_int(chanid){
    var chan = caml_ml_channel_get(chanid), res = 0;
    for(var i = 0; i < 4; i++)
     res = (res << 8) + caml_ml_input_char(chanid) | 0;
    return res | 0;
   }
   function caml_ml_input_scan_line(chanid){
    var chan = caml_ml_channel_get(chanid), p = chan.buffer_curr;
    do
     if(p >= chan.buffer_max){
      if(chan.buffer_curr > 0){
       chan.buffer.set(chan.buffer.subarray(chan.buffer_curr), 0);
       p -= chan.buffer_curr;
       chan.buffer_max -= chan.buffer_curr;
       chan.buffer_curr = 0;
      }
      if(chan.buffer_max >= chan.buffer.length) return - chan.buffer_max | 0;
      var prev_max = chan.buffer_max;
      caml_refill(chan);
      if(prev_max == chan.buffer_max) return - chan.buffer_max | 0;
     }
    while
     (chan.buffer[p++] != 10);
    return p - chan.buffer_curr | 0;
   }
   function caml_ml_is_buffered(chanid){
    return caml_ml_channel_get(chanid).buffered ? 1 : 0;
   }
   function caml_ml_mutex_lock(t){
    if(t.locked)
     caml_failwith("Mutex.lock: mutex already locked. Cannot wait.");
    else
     t.locked = true;
    return 0;
   }
   function caml_ml_mutex_new(unit){return new MlMutex();}
   function caml_ml_mutex_try_lock(t){
    if(! t.locked){t.locked = true; return 1;}
    return 0;
   }
   function caml_sys_open_for_node(fd, flags){
    if(flags.name)
     try{
      var fs = require("fs"), fd2 = fs.openSync(flags.name, "rs");
      return new MlNodeFd(fd2, flags);
     }
     catch(e){}
    return new MlNodeFd(fd, flags);
   }
   function caml_sys_open_internal(file, idx){
    if(idx == undefined) idx = caml_sys_fds.length;
    caml_sys_fds[idx] = file;
    return idx | 0;
   }
   function caml_sys_open(name, flags, _perms){
    var f = {};
    while(flags){
     switch(flags[1]){
       case 0:
        f.rdonly = 1; break;
       case 1:
        f.wronly = 1; break;
       case 2:
        f.append = 1; break;
       case 3:
        f.create = 1; break;
       case 4:
        f.truncate = 1; break;
       case 5:
        f.excl = 1; break;
       case 6:
        f.binary = 1; break;
       case 7:
        f.text = 1; break;
       case 8:
        f.nonblock = 1; break;
     }
     flags = flags[2];
    }
    if(f.rdonly && f.wronly)
     caml_raise_sys_error
      (caml_jsbytes_of_string(name)
       + " : flags Open_rdonly and Open_wronly are not compatible");
    if(f.text && f.binary)
     caml_raise_sys_error
      (caml_jsbytes_of_string(name)
       + " : flags Open_text and Open_binary are not compatible");
    var root = resolve_fs_device(name), file = root.device.open(root.rest, f);
    return caml_sys_open_internal(file, undefined);
   }
   (function(){
      function file(fd, flags){
       return fs_node_supported()
               ? caml_sys_open_for_node(fd, flags)
               : new MlFakeFd_out(fd, flags);
      }
      caml_sys_open_internal
       (file(0, {rdonly: 1, altname: "/dev/stdin", isCharacterDevice: true}),
        0);
      caml_sys_open_internal
       (file(1, {buffered: 2, wronly: 1, isCharacterDevice: true}), 1);
      caml_sys_open_internal
       (file(2, {buffered: 2, wronly: 1, isCharacterDevice: true}), 2);
     }
     ());
   function caml_ml_open_descriptor_in(fd){
    var file = caml_sys_fds[fd];
    if(file.flags.wronly) caml_raise_sys_error("fd " + fd + " is writeonly");
    var
     refill = null,
     channel =
       {file: file,
        offset: file.flags.append ? file.length() : 0,
        fd: fd,
        opened: true,
        out: false,
        buffer_curr: 0,
        buffer_max: 0,
        buffer: new Uint8Array(65536),
        refill: refill};
    caml_ml_channels[channel.fd] = channel;
    return channel.fd;
   }
   function caml_ml_open_descriptor_out(fd){
    var file = caml_sys_fds[fd];
    if(file.flags.rdonly) caml_raise_sys_error("fd " + fd + " is readonly");
    var
     buffered = file.flags.buffered !== undefined ? file.flags.buffered : 1,
     channel =
       {file: file,
        offset: file.flags.append ? file.length() : 0,
        fd: fd,
        opened: true,
        out: true,
        buffer_curr: 0,
        buffer: new Uint8Array(65536),
        buffered: buffered};
    caml_ml_channels[channel.fd] = channel;
    return channel.fd;
   }
   function caml_ml_out_channels_list(){
    var l = 0;
    for(var c = 0; c < caml_ml_channels.length; c++)
     if
      (caml_ml_channels[c] && caml_ml_channels[c].opened
       && caml_ml_channels[c].out)
      l = [0, caml_ml_channels[c].fd, l];
    return l;
   }
   function caml_ml_output_ta(chanid, buffer, offset, len){
    var chan = caml_ml_channel_get(chanid);
    if(! chan.opened)
     caml_raise_sys_error("Cannot output to a closed channel");
    buffer = buffer.subarray(offset, offset + len);
    if(chan.buffer_curr + buffer.length > chan.buffer.length){
     var b = new Uint8Array(chan.buffer_curr + buffer.length);
     b.set(chan.buffer);
     chan.buffer = b;
    }
    switch(chan.buffered){
      case 0:
       chan.buffer.set(buffer, chan.buffer_curr);
       chan.buffer_curr += buffer.length;
       caml_ml_flush(chanid);
       break;
      case 1:
       chan.buffer.set(buffer, chan.buffer_curr);
       chan.buffer_curr += buffer.length;
       if(chan.buffer_curr >= chan.buffer.length) caml_ml_flush(chanid);
       break;
      case 2:
       var id = buffer.lastIndexOf(10);
       if(id < 0){
        chan.buffer.set(buffer, chan.buffer_curr);
        chan.buffer_curr += buffer.length;
        if(chan.buffer_curr >= chan.buffer.length) caml_ml_flush(chanid);
       }
       else{
        chan.buffer.set(buffer.subarray(0, id + 1), chan.buffer_curr);
        chan.buffer_curr += id + 1;
        caml_ml_flush(chanid);
        chan.buffer.set(buffer.subarray(id + 1), chan.buffer_curr);
        chan.buffer_curr += buffer.length - id - 1;
       }
       break;
    }
    return 0;
   }
   function caml_ml_output_bytes(chanid, buffer, offset, len){
    var buffer = caml_uint8_array_of_bytes(buffer);
    return caml_ml_output_ta(chanid, buffer, offset, len);
   }
   function caml_ml_output(chanid, buffer, offset, len){
    return caml_ml_output_bytes
            (chanid, caml_bytes_of_string(buffer), offset, len);
   }
   function caml_ml_output_bigarray(chanid, buffer, offset, len){
    var buffer = caml_ba_to_typed_array(buffer);
    return caml_ml_output_ta(chanid, buffer, offset, len);
   }
   function caml_ml_output_char(chanid, c){
    var s = caml_string_of_jsbytes(String.fromCharCode(c));
    caml_ml_output(chanid, s, 0, 1);
    return 0;
   }
   function caml_ml_output_int(chanid, i){
    var
     arr = [i >> 24 & 0xFF, i >> 16 & 0xFF, i >> 8 & 0xFF, i & 0xFF],
     s = caml_string_of_array(arr);
    caml_ml_output(chanid, s, 0, 4);
    return 0;
   }
   function caml_pos_in(chanid){
    var chan = caml_ml_channel_get(chanid);
    return chan.offset - (chan.buffer_max - chan.buffer_curr) | 0;
   }
   function caml_ml_pos_in(chanid){return caml_pos_in(chanid);}
   function caml_ml_pos_in_64(chanid){
    return caml_int64_of_float(caml_pos_in(chanid));
   }
   function caml_pos_out(chanid){
    var chan = caml_ml_channel_get(chanid);
    return chan.offset + chan.buffer_curr;
   }
   function caml_ml_pos_out(chanid){return caml_pos_out(chanid);}
   function caml_ml_pos_out_64(chanid){
    return caml_int64_of_float(caml_pos_out(chanid));
   }
   function caml_ml_runtime_events_pause(){return 0;}
   function caml_ml_runtime_events_resume(){return 0;}
   function caml_ml_runtime_events_start(){return 0;}
   function caml_ml_runtime_warnings_enabled(_unit){return caml_runtime_warnings;
   }
   function caml_seek_in(chanid, pos){
    var chan = caml_ml_channel_get(chanid);
    if(chan.refill != null) caml_raise_sys_error("Illegal seek");
    if
     (pos >= chan.offset - chan.buffer_max && pos <= chan.offset
      && chan.file.flags.binary)
     chan.buffer_curr = chan.buffer_max - (chan.offset - pos);
    else{chan.offset = pos; chan.buffer_curr = 0; chan.buffer_max = 0;}
    return 0;
   }
   function caml_ml_seek_in(chanid, pos){return caml_seek_in(chanid, pos);}
   function caml_ml_seek_in_64(chanid, pos){
    var pos = caml_int64_to_float(pos);
    return caml_seek_in(chanid, pos);
   }
   function caml_seek_out(chanid, pos){
    caml_ml_flush(chanid);
    var chan = caml_ml_channel_get(chanid);
    chan.offset = pos;
    return 0;
   }
   function caml_ml_seek_out(chanid, pos){return caml_seek_out(chanid, pos);}
   function caml_ml_seek_out_64(chanid, pos){
    var pos = caml_int64_to_float(pos);
    return caml_seek_out(chanid, pos);
   }
   function caml_ml_set_binary_mode(chanid, mode){
    var chan = caml_ml_channel_get(chanid);
    chan.file.flags.text = ! mode;
    chan.file.flags.binary = mode;
    return 0;
   }
   function caml_ml_set_buffered(chanid, v){
    caml_ml_channel_get(chanid).buffered = v;
    if(! v) caml_ml_flush(chanid);
    return 0;
   }
   function caml_ml_set_channel_name(chanid, name){
    var chan = caml_ml_channel_get(chanid);
    chan.name = name;
    return 0;
   }
   function caml_ml_set_channel_output(chanid, f){
    var chan = caml_ml_channel_get(chanid);
    chan.output = function(s){f(s);};
    return 0;
   }
   function caml_ml_set_channel_refill(chanid, f){
    caml_ml_channel_get(chanid).refill = f;
    return 0;
   }
   function caml_mod(x, y){if(y == 0) caml_raise_zero_divide(); return x % y;}
   function caml_modf_float(x){
    if(isFinite(x)){
     var neg = 1 / x < 0;
     x = Math.abs(x);
     var i = Math.floor(x), f = x - i;
     if(neg){i = - i; f = - f;}
     return [0, f, i];
    }
    if(isNaN(x)) return [0, NaN, NaN];
    return [0, 1 / x, x];
   }
   function caml_mount_autoload(name, f){
    var
     path = caml_make_path(name),
     name = caml_trailing_slash(path.join("/"));
    jsoo_mount_point.push({path: name, device: new MlFakeDevice(name, f)});
    return 0;
   }
   function caml_lex_run_mem(s, i, mem, curr_pos){
    for(;;){
     var dst = s.charCodeAt(i);
     i++;
     if(dst == 0xff) return;
     var src = s.charCodeAt(i);
     i++;
     if(src == 0xff)
      mem[dst + 1] = curr_pos;
     else
      mem[dst + 1] = mem[src + 1];
    }
   }
   function caml_lex_run_tag(s, i, mem){
    for(;;){
     var dst = s.charCodeAt(i);
     i++;
     if(dst == 0xff) return;
     var src = s.charCodeAt(i);
     i++;
     if(src == 0xff) mem[dst + 1] = - 1; else mem[dst + 1] = mem[src + 1];
    }
   }
   function caml_new_lex_engine(tbl, start_state, lexbuf){
    var
     lex_buffer = 2,
     lex_buffer_len = 3,
     lex_start_pos = 5,
     lex_curr_pos = 6,
     lex_last_pos = 7,
     lex_last_action = 8,
     lex_eof_reached = 9,
     lex_mem = 10,
     lex_base = 1,
     lex_backtrk = 2,
     lex_default = 3,
     lex_trans = 4,
     lex_check = 5,
     lex_base_code = 6,
     lex_backtrk_code = 7,
     lex_default_code = 8,
     lex_trans_code = 9,
     lex_check_code = 10,
     lex_code = 11;
    if(! tbl.lex_default){
     tbl.lex_base = caml_lex_array(tbl[lex_base]);
     tbl.lex_backtrk = caml_lex_array(tbl[lex_backtrk]);
     tbl.lex_check = caml_lex_array(tbl[lex_check]);
     tbl.lex_trans = caml_lex_array(tbl[lex_trans]);
     tbl.lex_default = caml_lex_array(tbl[lex_default]);
    }
    if(! tbl.lex_default_code){
     tbl.lex_base_code = caml_lex_array(tbl[lex_base_code]);
     tbl.lex_backtrk_code = caml_lex_array(tbl[lex_backtrk_code]);
     tbl.lex_check_code = caml_lex_array(tbl[lex_check_code]);
     tbl.lex_trans_code = caml_lex_array(tbl[lex_trans_code]);
     tbl.lex_default_code = caml_lex_array(tbl[lex_default_code]);
    }
    if(tbl.lex_code == null)
     tbl.lex_code = caml_jsbytes_of_string(tbl[lex_code]);
    var
     c,
     state = start_state,
     buffer = caml_uint8_array_of_bytes(lexbuf[lex_buffer]);
    if(state >= 0){
     lexbuf[lex_last_pos] = lexbuf[lex_start_pos] = lexbuf[lex_curr_pos];
     lexbuf[lex_last_action] = - 1;
    }
    else
     state = - state - 1;
    for(;;){
     var base = tbl.lex_base[state];
     if(base < 0){
      var pc_off = tbl.lex_base_code[state];
      caml_lex_run_tag(tbl.lex_code, pc_off, lexbuf[lex_mem]);
      return - base - 1;
     }
     var backtrk = tbl.lex_backtrk[state];
     if(backtrk >= 0){
      var pc_off = tbl.lex_backtrk_code[state];
      caml_lex_run_tag(tbl.lex_code, pc_off, lexbuf[lex_mem]);
      lexbuf[lex_last_pos] = lexbuf[lex_curr_pos];
      lexbuf[lex_last_action] = backtrk;
     }
     if(lexbuf[lex_curr_pos] >= lexbuf[lex_buffer_len])
      if(lexbuf[lex_eof_reached] == 0) return - state - 1; else c = 256;
     else{c = buffer[lexbuf[lex_curr_pos]]; lexbuf[lex_curr_pos]++;}
     var pstate = state;
     if(tbl.lex_check[base + c] == state)
      state = tbl.lex_trans[base + c];
     else
      state = tbl.lex_default[state];
     if(state < 0){
      lexbuf[lex_curr_pos] = lexbuf[lex_last_pos];
      if(lexbuf[lex_last_action] == - 1)
       caml_failwith("lexing: empty token");
      else
       return lexbuf[lex_last_action];
     }
     else{
      var base_code = tbl.lex_base_code[pstate], pc_off;
      if(tbl.lex_check_code[base_code + c] == pstate)
       pc_off = tbl.lex_trans_code[base_code + c];
      else
       pc_off = tbl.lex_default_code[pstate];
      if(pc_off > 0)
       caml_lex_run_mem
        (tbl.lex_code, pc_off, lexbuf[lex_mem], lexbuf[lex_curr_pos]);
      if(c == 256) lexbuf[lex_eof_reached] = 0;
     }
    }
   }
   function caml_nextafter_float(x, y){
    if(isNaN(x) || isNaN(y)) return NaN;
    if(x == y) return y;
    if(x == 0) return y < 0 ? - Math.pow(2, - 1074) : Math.pow(2, - 1074);
    var bits = caml_int64_bits_of_float(x), one = caml_int64_of_int32(1);
    if(x < y == x > 0)
     bits = caml_int64_add(bits, one);
    else
     bits = caml_int64_sub(bits, one);
    return caml_int64_float_of_bits(bits);
   }
   function caml_notequal(x, y){
    return + (caml_compare_val(x, y, false) != 0);
   }
   function caml_obj_add_offset(v, offset){
    caml_failwith("Obj.add_offset is not supported");
   }
   function caml_obj_block(tag, size){
    var o = new Array(size + 1);
    o[0] = tag;
    for(var i = 1; i <= size; i++) o[i] = 0;
    return o;
   }
   function caml_obj_compare_and_swap(x, i, old, n){
    if(x[i + 1] == old){x[i + 1] = n; return 1;}
    return 0;
   }
   function caml_obj_is_block(x){return + (x instanceof Array);}
   function caml_obj_is_shared(x){return 1;}
   function caml_obj_make_forward(b, v){b[0] = 250; b[1] = v; return 0;}
   function caml_obj_raw_field(o, i){return o[i + 1];}
   function caml_obj_reachable_words(o){return 0;}
   function caml_obj_set_raw_field(o, i, v){return o[i + 1] = v;}
   function caml_obj_set_tag(x, tag){x[0] = tag; return 0;}
   function caml_obj_truncate(x, s){
    if(s <= 0 || s + 1 > x.length) caml_invalid_argument("Obj.truncate");
    if(x.length != s + 1) x.length = s + 1;
    return 0;
   }
   function caml_obj_with_tag(tag, x){
    var l = x.length, a = new Array(l);
    a[0] = tag;
    for(var i = 1; i < l; i++) a[i] = x[i];
    return a;
   }
   function caml_ojs_new_arr(c, a){
    switch(a.length){
      case 0:
       return new c;
      case 1:
       return new c(a[0]);
      case 2:
       return new c(a[0], a[1]);
      case 3:
       return new c(a[0], a[1], a[2]);
      case 4:
       return new c(a[0], a[1], a[2], a[3]);
      case 5:
       return new c(a[0], a[1], a[2], a[3], a[4]);
      case 6:
       return new c(a[0], a[1], a[2], a[3], a[4], a[5]);
      case 7:
       return new c(a[0], a[1], a[2], a[3], a[4], a[5], a[6]);
    }
    function F(){return c.apply(this, a);}
    F.prototype = c.prototype;
    return new F;
   }
   var
    caml_output_val =
      function(){
        function Writer(){this.chunk = [];}
        Writer.prototype =
         {chunk_idx: 20,
          block_len: 0,
          obj_counter: 0,
          size_32: 0,
          size_64: 0,
          write:
          function(size, value){
           for(var i = size - 8; i >= 0; i -= 8)
            this.chunk[this.chunk_idx++] = value >> i & 0xFF;
          },
          write_at:
          function(pos, size, value){
           var pos = pos;
           for(var i = size - 8; i >= 0; i -= 8)
            this.chunk[pos++] = value >> i & 0xFF;
          },
          write_code:
          function(size, code, value){
           this.chunk[this.chunk_idx++] = code;
           for(var i = size - 8; i >= 0; i -= 8)
            this.chunk[this.chunk_idx++] = value >> i & 0xFF;
          },
          write_shared:
          function(offset){
           if(offset < 1 << 8)
            this.write_code(8, 0x04, offset);
           else if(offset < 1 << 16)
            this.write_code(16, 0x05, offset);
           else
            this.write_code(32, 0x06, offset);
          },
          pos: function(){return this.chunk_idx;},
          finalize:
          function(){
           this.block_len = this.chunk_idx - 20;
           this.chunk_idx = 0;
           this.write(32, 0x8495A6BE);
           this.write(32, this.block_len);
           this.write(32, this.obj_counter);
           this.write(32, this.size_32);
           this.write(32, this.size_64);
           return this.chunk;
          }};
        return function(v, flags){
         flags = caml_list_to_js_array(flags);
         var
          no_sharing = flags.indexOf(0) !== - 1,
          closures = flags.indexOf(1) !== - 1;
         if(closures)
          console.warn
           ("in caml_output_val: flag Marshal.Closures is not supported.");
         var
          writer = new Writer(),
          stack = [],
          intern_obj_table = no_sharing ? null : new MlObjectTable();
         function memo(v){
          if(no_sharing) return false;
          var existing_offset = intern_obj_table.recall(v);
          if(existing_offset){
           writer.write_shared(existing_offset);
           return true;
          }
          else{intern_obj_table.store(v); return false;}
         }
         function extern_rec(v){
          if(v.caml_custom){
           if(memo(v)) return;
           var
            name = v.caml_custom,
            ops = caml_custom_ops[name],
            sz_32_64 = [0, 0];
           if(! ops.serialize)
            caml_invalid_argument("output_value: abstract value (Custom)");
           if(ops.fixed_length == undefined){
            writer.write(8, 0x18);
            for(var i = 0; i < name.length; i++)
             writer.write(8, name.charCodeAt(i));
            writer.write(8, 0);
            var header_pos = writer.pos();
            for(var i = 0; i < 12; i++) writer.write(8, 0);
            ops.serialize(writer, v, sz_32_64);
            writer.write_at(header_pos, 32, sz_32_64[0]);
            writer.write_at(header_pos + 4, 32, 0);
            writer.write_at(header_pos + 8, 32, sz_32_64[1]);
           }
           else{
            writer.write(8, 0x19);
            for(var i = 0; i < name.length; i++)
             writer.write(8, name.charCodeAt(i));
            writer.write(8, 0);
            var old_pos = writer.pos();
            ops.serialize(writer, v, sz_32_64);
            if(ops.fixed_length != writer.pos() - old_pos)
             caml_failwith
              ("output_value: incorrect fixed sizes specified by " + name);
           }
           writer.size_32 += 2 + (sz_32_64[0] + 3 >> 2);
           writer.size_64 += 2 + (sz_32_64[1] + 7 >> 3);
          }
          else if(v instanceof Array && v[0] === (v[0] | 0)){
           if(v[0] == 251)
            caml_failwith("output_value: abstract value (Abstract)");
           if(caml_is_continuation_tag(v[0]))
            caml_invalid_argument("output_value: continuation value");
           if(v.length > 1 && memo(v)) return;
           if(v[0] < 16 && v.length - 1 < 8)
            writer.write(8, 0x80 + v[0] + (v.length - 1 << 4));
           else
            writer.write_code(32, 0x08, v.length - 1 << 10 | v[0]);
           writer.size_32 += v.length;
           writer.size_64 += v.length;
           if(v.length > 1) stack.push(v, 1);
          }
          else if(caml_is_ml_bytes(v)){
           if(! caml_is_ml_bytes(caml_string_of_jsbytes("")))
            caml_failwith
             ("output_value: [Bytes.t] cannot safely be marshaled with [--enable use-js-string]");
           if(memo(v)) return;
           var len = caml_ml_bytes_length(v);
           if(len < 0x20)
            writer.write(8, 0x20 + len);
           else if(len < 0x100)
            writer.write_code(8, 0x09, len);
           else
            writer.write_code(32, 0x0A, len);
           for(var i = 0; i < len; i++)
            writer.write(8, caml_bytes_unsafe_get(v, i));
           writer.size_32 += 1 + ((len + 4) / 4 | 0);
           writer.size_64 += 1 + ((len + 8) / 8 | 0);
          }
          else if(caml_is_ml_string(v)){
           if(memo(v)) return;
           var len = caml_ml_string_length(v);
           if(len < 0x20)
            writer.write(8, 0x20 + len);
           else if(len < 0x100)
            writer.write_code(8, 0x09, len);
           else
            writer.write_code(32, 0x0A, len);
           for(var i = 0; i < len; i++)
            writer.write(8, caml_string_unsafe_get(v, i));
           writer.size_32 += 1 + ((len + 4) / 4 | 0);
           writer.size_64 += 1 + ((len + 8) / 8 | 0);
          }
          else if(v != (v | 0)){
           var type_of_v = typeof v;
           if(type_of_v != "number")
            caml_failwith("output_value: abstract value (" + type_of_v + ")");
           if(memo(v)) return;
           var t = caml_int64_to_bytes(caml_int64_bits_of_float(v));
           writer.write(8, 0x0C);
           for(var i = 0; i < 8; i++) writer.write(8, t[7 - i]);
           writer.size_32 += 3;
           writer.size_64 += 2;
          }
          else if(v >= 0 && v < 0x40)
           writer.write(8, 0X40 + v);
          else if(v >= - (1 << 7) && v < 1 << 7)
           writer.write_code(8, 0x00, v);
          else if(v >= - (1 << 15) && v < 1 << 15)
           writer.write_code(16, 0x01, v);
          else
           writer.write_code(32, 0x02, v);
         }
         extern_rec(v);
         while(stack.length > 0){
          var i = stack.pop(), v = stack.pop();
          if(i + 1 < v.length) stack.push(v, i + 1);
          extern_rec(v[i]);
         }
         if(intern_obj_table)
          writer.obj_counter = intern_obj_table.objs.length;
         writer.finalize();
         return writer.chunk;};
       }
       ();
   function caml_output_value_to_string(v, flags){
    return caml_string_of_array(caml_output_val(v, flags));
   }
   function caml_output_value(chanid, v, flags){
    var s = caml_output_value_to_string(v, flags);
    caml_ml_output(chanid, s, 0, caml_ml_string_length(s));
    return 0;
   }
   function caml_output_value_to_buffer(s, ofs, len, v, flags){
    var t = caml_output_val(v, flags);
    if(t.length > len) caml_failwith("Marshal.to_buffer: buffer overflow");
    caml_blit_bytes(t, 0, s, ofs, t.length);
    return 0;
   }
   function caml_output_value_to_bytes(v, flags){
    return caml_bytes_of_array(caml_output_val(v, flags));
   }
   var caml_parser_trace = 0;
   function caml_parse_engine(tables, env, cmd, arg){
    var
     ERRCODE = 256,
     loop = 6,
     testshift = 7,
     shift = 8,
     shift_recover = 9,
     reduce = 10,
     READ_TOKEN = 0,
     RAISE_PARSE_ERROR = 1,
     GROW_STACKS_1 = 2,
     GROW_STACKS_2 = 3,
     COMPUTE_SEMANTIC_ACTION = 4,
     CALL_ERROR_FUNCTION = 5,
     env_s_stack = 1,
     env_v_stack = 2,
     env_symb_start_stack = 3,
     env_symb_end_stack = 4,
     env_stacksize = 5,
     env_stackbase = 6,
     env_curr_char = 7,
     env_lval = 8,
     env_symb_start = 9,
     env_symb_end = 10,
     env_asp = 11,
     env_rule_len = 12,
     env_rule_number = 13,
     env_sp = 14,
     env_state = 15,
     env_errflag = 16,
     tbl_transl_const = 2,
     tbl_transl_block = 3,
     tbl_lhs = 4,
     tbl_len = 5,
     tbl_defred = 6,
     tbl_dgoto = 7,
     tbl_sindex = 8,
     tbl_rindex = 9,
     tbl_gindex = 10,
     tbl_tablesize = 11,
     tbl_table = 12,
     tbl_check = 13,
     tbl_names_const = 15,
     tbl_names_block = 16;
    function log(x){
     var s = caml_string_of_jsbytes(x + "\n");
     caml_ml_output(2, s, 0, caml_ml_string_length(s));
    }
    function token_name(names, number){
     var str = caml_jsstring_of_string(names);
     if(str[0] == "\x00") return "<unknown token>";
     return str.split("\x00")[number];
    }
    function print_token(state, tok){
     var token, kind;
     if(tok instanceof Array){
      token = token_name(tables[tbl_names_block], tok[0]);
      if(typeof tok[1] == "number")
       kind = "" + tok[1];
      else if(typeof tok[1] == "string")
       kind = tok[1];
      else if(tok[1] instanceof MlBytes)
       kind = caml_jsbytes_of_string(tok[1]);
      else
       kind = "_";
      log("State " + state + ": read token " + token + "(" + kind + ")");
     }
     else{
      token = token_name(tables[tbl_names_const], tok);
      log("State " + state + ": read token " + token);
     }
    }
    if(! tables.dgoto){
     tables.defred = caml_lex_array(tables[tbl_defred]);
     tables.sindex = caml_lex_array(tables[tbl_sindex]);
     tables.check = caml_lex_array(tables[tbl_check]);
     tables.rindex = caml_lex_array(tables[tbl_rindex]);
     tables.table = caml_lex_array(tables[tbl_table]);
     tables.len = caml_lex_array(tables[tbl_len]);
     tables.lhs = caml_lex_array(tables[tbl_lhs]);
     tables.gindex = caml_lex_array(tables[tbl_gindex]);
     tables.dgoto = caml_lex_array(tables[tbl_dgoto]);
    }
    var
     res = 0,
     n,
     n1,
     n2,
     state1,
     sp = env[env_sp],
     state = env[env_state],
     errflag = env[env_errflag];
    exit:
    for(;;)
     next:
     switch(cmd){
       case 0:
        state = 0; errflag = 0;
       case 6:
        n = tables.defred[state];
        if(n != 0){cmd = reduce; break;}
        if(env[env_curr_char] >= 0){cmd = testshift; break;}
        res = READ_TOKEN;
        break exit;
       case 1:
        if(arg instanceof Array){
         env[env_curr_char] = tables[tbl_transl_block][arg[0] + 1];
         env[env_lval] = arg[1];
        }
        else{
         env[env_curr_char] = tables[tbl_transl_const][arg + 1];
         env[env_lval] = 0;
        }
        if(caml_parser_trace) print_token(state, arg);
       case 7:
        n1 = tables.sindex[state];
        n2 = n1 + env[env_curr_char];
        if
         (n1 != 0 && n2 >= 0 && n2 <= tables[tbl_tablesize]
          && tables.check[n2] == env[env_curr_char]){cmd = shift; break;}
        n1 = tables.rindex[state];
        n2 = n1 + env[env_curr_char];
        if
         (n1 != 0 && n2 >= 0 && n2 <= tables[tbl_tablesize]
          && tables.check[n2] == env[env_curr_char]){
         n = tables.table[n2];
         cmd = reduce;
         break;
        }
        if(errflag <= 0){res = CALL_ERROR_FUNCTION; break exit;}
       case 5:
        if(errflag < 3){
         errflag = 3;
         for(;;){
          state1 = env[env_s_stack][sp + 1];
          n1 = tables.sindex[state1];
          n2 = n1 + ERRCODE;
          if
           (n1 != 0 && n2 >= 0 && n2 <= tables[tbl_tablesize]
            && tables.check[n2] == ERRCODE){
           if(caml_parser_trace) log("Recovering in state " + state1);
           cmd = shift_recover;
           break next;
          }
          else{
           if(caml_parser_trace) log("Discarding state " + state1);
           if(sp <= env[env_stackbase]){
            if(caml_parser_trace) log("No more states to discard");
            return RAISE_PARSE_ERROR;
           }
           sp--;
          }
         }
        }
        else{
         if(env[env_curr_char] == 0) return RAISE_PARSE_ERROR;
         if(caml_parser_trace) log("Discarding last token read");
         env[env_curr_char] = - 1;
         cmd = loop;
         break;
        }
       case 8:
        env[env_curr_char] = - 1; if(errflag > 0) errflag--;
       case 9:
        if(caml_parser_trace)
         log("State " + state + ": shift to state " + tables.table[n2]);
        state = tables.table[n2];
        sp++;
        if(sp >= env[env_stacksize]){res = GROW_STACKS_1; break exit;}
       case 2:
        env[env_s_stack][sp + 1] = state;
        env[env_v_stack][sp + 1] = env[env_lval];
        env[env_symb_start_stack][sp + 1] = env[env_symb_start];
        env[env_symb_end_stack][sp + 1] = env[env_symb_end];
        cmd = loop;
        break;
       case 10:
        if(caml_parser_trace) log("State " + state + ": reduce by rule " + n);
        var m = tables.len[n];
        env[env_asp] = sp;
        env[env_rule_number] = n;
        env[env_rule_len] = m;
        sp = sp - m + 1;
        m = tables.lhs[n];
        state1 = env[env_s_stack][sp];
        n1 = tables.gindex[m];
        n2 = n1 + state1;
        if
         (n1 != 0 && n2 >= 0 && n2 <= tables[tbl_tablesize]
          && tables.check[n2] == state1)
         state = tables.table[n2];
        else
         state = tables.dgoto[m];
        if(sp >= env[env_stacksize]){res = GROW_STACKS_2; break exit;}
       case 3:
        res = COMPUTE_SEMANTIC_ACTION; break exit;
       case 4:
        env[env_s_stack][sp + 1] = state;
        env[env_v_stack][sp + 1] = arg;
        var asp = env[env_asp];
        env[env_symb_end_stack][sp + 1] = env[env_symb_end_stack][asp + 1];
        if(sp > asp)
         env[env_symb_start_stack][sp + 1] = env[env_symb_end_stack][asp + 1];
        cmd = loop;
        break;
       default: return RAISE_PARSE_ERROR;
     }
    env[env_sp] = sp;
    env[env_state] = state;
    env[env_errflag] = errflag;
    return res;
   }
   function caml_pure_js_expr(s){
    console.error("caml_pure_js_expr: fallback to runtime evaluation\n");
    return eval(caml_jsstring_of_string(s));
   }
   function caml_raise_not_a_dir(name){
    caml_raise_sys_error(name + ": Not a directory");
   }
   function caml_raise_not_found(){
    caml_raise_constant(caml_global_data.Not_found);
   }
   function caml_raw_backtrace_length(){return 0;}
   function caml_raw_backtrace_next_slot(){return 0;}
   function caml_raw_backtrace_slot(){
    caml_invalid_argument
     ("Printexc.get_raw_backtrace_slot: index out of bounds");
   }
   function caml_recommended_domain_count(unit){return 1;}
   function caml_record_backtrace(b){
    caml_record_backtrace_flag = b;
    return 0;
   }
   function caml_register_channel_for_spacetime(_channel){return 0;}
   function caml_register_global(n, v, name_opt){
    if(name_opt){
     var name = name_opt;
     if(globalThis.toplevelReloc)
      n = caml_callback(globalThis.toplevelReloc, [name]);
     else if(caml_global_data.symbols){
      if(! caml_global_data.symidx)
       caml_global_data.symidx = caml_build_symbols(caml_global_data.symbols);
      var nid = caml_global_data.symidx[name];
      if(nid >= 0)
       n = nid;
      else
       caml_failwith("caml_register_global: cannot locate " + name);
     }
    }
    caml_global_data[n + 1] = v;
    if(name_opt) caml_global_data[name_opt] = v;
   }
   function caml_register_named_value(nm, v){
    caml_named_values[caml_jsbytes_of_string(nm)] = v;
    return 0;
   }
   function caml_restore_raw_backtrace(exn, bt){return 0;}
   function caml_round_float(x){
    if(x >= 0){
     var y = Math.floor(x);
     return x - y >= 0.5 ? y + 1 : y;
    }
    else{var y = Math.ceil(x); return y - x >= 0.5 ? y - 1 : y;}
   }
   function caml_runtime_events_create_cursor(target){return {};}
   function caml_runtime_events_free_cursor(cursor){return 0;}
   function caml_runtime_events_read_poll(cursor, callbacks, num){return 0;}
   function caml_runtime_events_user_register
   (event_name, event_tag, event_type){
    caml_custom_event_index += 1;
    return [0, caml_custom_event_index, event_name, event_type, event_tag];
   }
   function caml_runtime_events_user_resolve(){return 0;}
   function caml_runtime_events_user_write(event, event_content){return 0;}
   function caml_runtime_parameters(_unit){return caml_string_of_jsbytes("");}
   function caml_runtime_variant(_unit){return caml_string_of_jsbytes("");}
   function caml_set_oo_id(b){b[2] = caml_oo_last_id++; return b;}
   function caml_set_parser_trace(bool){
    var oldflag = caml_parser_trace;
    caml_parser_trace = bool;
    return oldflag;
   }
   function caml_set_static_env(k, v){
    if(! globalThis.jsoo_static_env) globalThis.jsoo_static_env = {};
    globalThis.jsoo_static_env[k] = v;
    return 0;
   }
   function caml_signbit_float(x){if(x == 0) x = 1 / x; return x < 0 ? 1 : 0;}
   function caml_sinh_float(x){return Math.sinh(x);}
   function caml_spacetime_enabled(_unit){return 0;}
   function caml_spacetime_only_works_for_native_code(){
    caml_failwith("Spacetime profiling only works for native code");
   }
   function caml_str_initialize(unit){return 0;}
   function caml_string_bound_error(){
    caml_invalid_argument("index out of bounds");
   }
   function caml_string_concat(a, b){return a + b;}
   function caml_string_equal(s1, s2){if(s1 === s2) return 1; return 0;}
   function caml_string_get(s, i){
    if(i >>> 0 >= caml_ml_string_length(s)) caml_string_bound_error();
    return caml_string_unsafe_get(s, i);
   }
   function caml_string_get16(s, i){
    if(i >>> 0 >= caml_ml_string_length(s) - 1) caml_string_bound_error();
    var
     b1 = caml_string_unsafe_get(s, i),
     b2 = caml_string_unsafe_get(s, i + 1);
    return b2 << 8 | b1;
   }
   function caml_string_get32(s, i){
    if(i >>> 0 >= caml_ml_string_length(s) - 3) caml_string_bound_error();
    var
     b1 = caml_string_unsafe_get(s, i),
     b2 = caml_string_unsafe_get(s, i + 1),
     b3 = caml_string_unsafe_get(s, i + 2),
     b4 = caml_string_unsafe_get(s, i + 3);
    return b4 << 24 | b3 << 16 | b2 << 8 | b1;
   }
   function caml_string_get64(s, i){
    if(i >>> 0 >= caml_ml_string_length(s) - 7) caml_string_bound_error();
    var a = new Array(8);
    for(var j = 0; j < 8; j++) a[7 - j] = caml_string_unsafe_get(s, i + j);
    return caml_int64_of_bytes(a);
   }
   function caml_string_lessequal(s1, s2){return s1 <= s2 ? 1 : 0;}
   function caml_string_greaterequal(s1, s2){return caml_string_lessequal(s2, s1);
   }
   function caml_string_lessthan(s1, s2){return s1 < s2 ? 1 : 0;}
   function caml_string_greaterthan(s1, s2){return caml_string_lessthan(s2, s1);
   }
   function caml_string_hash(h, v){
    var h = caml_hash_mix_string(h, v), h = caml_hash_mix_final(h);
    return h & 0x3FFFFFFF;
   }
   function caml_string_notequal(s1, s2){
    return 1 - caml_string_equal(s1, s2);
   }
   function caml_string_set(s, i, c){caml_failwith("caml_string_set");}
   function caml_string_set16(s, i, i16){caml_failwith("caml_string_set16");}
   function caml_string_set32(s, i, i32){caml_failwith("caml_string_set32");}
   function caml_string_set64(s, i, i64){caml_failwith("caml_string_set64");}
   function caml_string_unsafe_set(s, i, c){
    caml_failwith("caml_string_unsafe_set");
   }
   function caml_sys_argv(a){return caml_argv;}
   function caml_sys_chdir(dir){
    var root = resolve_fs_device(dir);
    if(root.device.exists(root.rest)){
     if(root.rest)
      caml_current_dir = caml_trailing_slash(root.path + root.rest);
     else
      caml_current_dir = root.path;
     return 0;
    }
    else
     caml_raise_no_such_file(caml_jsbytes_of_string(dir));
   }
   function caml_sys_const_backend_type(){
    return [0, caml_string_of_jsbytes("js_of_ocaml")];
   }
   function caml_sys_const_big_endian(){return 0;}
   function caml_sys_const_int_size(){return 32;}
   function caml_sys_const_max_wosize(){return 0x7FFFFFFF / 4 | 0;}
   function caml_sys_const_naked_pointers_checked(_unit){return 0;}
   var
    os_type =
      globalThis.process && globalThis.process.platform
       && globalThis.process.platform == "win32"
       ? "Cygwin"
       : "Unix";
   function caml_sys_const_ostype_cygwin(){return os_type == "Cygwin" ? 1 : 0;
   }
   function caml_sys_const_ostype_unix(){return os_type == "Unix" ? 1 : 0;}
   function caml_sys_const_ostype_win32(){return os_type == "Win32" ? 1 : 0;}
   function caml_sys_const_word_size(){return 32;}
   function caml_sys_executable_name(a){return caml_executable_name;}
   function caml_sys_exit(code){
    if(globalThis.quit) globalThis.quit(code);
    if(globalThis.process && globalThis.process.exit)
     globalThis.process.exit(code);
    caml_invalid_argument("Function 'exit' not implemented");
   }
   function caml_sys_file_exists(name){
    var root = resolve_fs_device(name);
    return root.device.exists(root.rest);
   }
   function caml_sys_get_argv(a){return [0, caml_argv[1], caml_argv];}
   function caml_sys_get_config(){
    return [0, caml_string_of_jsbytes(os_type), 32, 0];
   }
   function caml_sys_getcwd(){
    return caml_string_of_jsbytes(caml_current_dir);
   }
   function caml_sys_getenv(name){
    var r = jsoo_sys_getenv(caml_jsstring_of_string(name));
    if(r === undefined) caml_raise_not_found();
    return caml_string_of_jsstring(r);
   }
   function caml_sys_is_directory(name){
    var root = resolve_fs_device(name), a = root.device.is_dir(root.rest);
    return a ? 1 : 0;
   }
   function caml_sys_is_regular_file(name){
    var root = resolve_fs_device(name);
    return root.device.isFile(root.rest);
   }
   function caml_sys_isatty(_chan){return 0;}
   function caml_sys_mkdir(name, perm){
    var root = resolve_fs_device(name);
    root.device.mkdir(root.rest, perm);
    return 0;
   }
   function caml_sys_modify_argv(arg){caml_argv = arg; return 0;}
   function caml_sys_random_seed(){
    if(globalThis.crypto)
     if(globalThis.crypto.getRandomValues){
      var a = globalThis.crypto.getRandomValues(new Int32Array(4));
      return [0, a[0], a[1], a[2], a[3]];
     }
     else if(globalThis.crypto.randomBytes){
      var a = new Int32Array(globalThis.crypto.randomBytes(16).buffer);
      return [0, a[0], a[1], a[2], a[3]];
     }
    var now = new Date().getTime(), x = now ^ 0xffffffff * Math.random();
    return [0, x];
   }
   function caml_sys_read_directory(name){
    var
     root = resolve_fs_device(name),
     a = root.device.readdir(root.rest),
     l = new Array(a.length + 1);
    l[0] = 0;
    for(var i = 0; i < a.length; i++) l[i + 1] = caml_string_of_jsbytes(a[i]);
    return l;
   }
   function caml_sys_remove(name){
    var root = resolve_fs_device(name), ok = root.device.unlink(root.rest);
    if(ok == 0) caml_raise_no_such_file(caml_jsbytes_of_string(name));
    return 0;
   }
   function caml_sys_rename(o, n){
    var o_root = resolve_fs_device(o), n_root = resolve_fs_device(n);
    if(o_root.device != n_root.device)
     caml_failwith("caml_sys_rename: cannot move file between two filesystem");
    if(! o_root.device.rename)
     caml_failwith("caml_sys_rename: no implemented");
    o_root.device.rename(o_root.rest, n_root.rest);
   }
   function caml_sys_rmdir(name){
    var root = resolve_fs_device(name);
    root.device.rmdir(root.rest);
    return 0;
   }
   function caml_sys_system_command(cmd){
    var cmd = caml_jsstring_of_string(cmd);
    if(typeof require != "undefined"){
     var child_process = require("child_process");
     if(child_process && child_process.execSync)
      try{child_process.execSync(cmd, {stdio: "inherit"}); return 0;}
      catch(e){return 1;}
    }
    else
     return 127;
   }
   var caml_initial_time = new Date().getTime() * 0.001;
   function caml_sys_time(){
    var now = new Date().getTime();
    return now * 0.001 - caml_initial_time;
   }
   function caml_sys_time_include_children(b){return caml_sys_time();}
   function caml_sys_unsafe_getenv(name){return caml_sys_getenv(name);}
   function caml_tanh_float(x){return Math.tanh(x);}
   function caml_to_js_string(s){return caml_jsstring_of_string(s);}
   function caml_trampoline(res){
    var c = 1;
    while(res && res.joo_tramp){
     res = res.joo_tramp.apply(null, res.joo_args);
     c++;
    }
    return res;
   }
   function caml_trampoline_return(f, args){return {joo_tramp: f, joo_args: args};
   }
   function caml_trunc_float(x){return Math.trunc(x);}
   function caml_unix_cleanup(){}
   function caml_unix_closedir(dir_handle){
    try{dir_handle.pointer.closeSync();}
    catch(e){
     var unix_error = caml_named_value("Unix.Unix_error");
     caml_raise_with_args
      (unix_error, make_unix_err_args("EBADF", "closedir", dir_handle.path));
    }
   }
   function caml_unix_filedescr_of_fd(x){return x;}
   function caml_unix_findclose(dir_handle){return caml_unix_closedir(dir_handle);
   }
   function caml_unix_opendir(path){
    var root = resolve_fs_device(path);
    if(! root.device.opendir)
     caml_failwith("caml_unix_opendir: not implemented");
    var dir_handle = root.device.opendir(root.rest, true);
    return {pointer: dir_handle, path: path};
   }
   function caml_unix_readdir(dir_handle){
    var entry;
    try{entry = dir_handle.pointer.readSync();}
    catch(e){
     var unix_error = caml_named_value("Unix.Unix_error");
     caml_raise_with_args
      (unix_error, make_unix_err_args("EBADF", "readdir", dir_handle.path));
    }
    if(entry === null)
     caml_raise_end_of_file();
    else
     return caml_string_of_jsstring(entry.name);
   }
   function caml_unix_findfirst(path){
    var path_js = caml_jsstring_of_string(path);
    path_js = path_js.replace(/(^|[\\\/])\*\.\*$/, "");
    path = caml_string_of_jsstring(path_js);
    var
     dir_handle = caml_unix_opendir(path),
     first_entry = caml_unix_readdir(dir_handle);
    return [0, first_entry, dir_handle];
   }
   function caml_unix_findnext(dir_handle){return caml_unix_readdir(dir_handle);
   }
   function caml_unix_getpwuid(unit){caml_raise_not_found();}
   function caml_unix_gettimeofday(){return new Date().getTime() / 1000;}
   function caml_unix_getuid(unit){
    if(globalThis.process && globalThis.process.getuid)
     return globalThis.process.getuid();
    caml_raise_not_found();
   }
   function caml_unix_gmtime(t){
    var
     d = new Date(t * 1000),
     d_num = d.getTime(),
     januaryfirst = new Date(Date.UTC(d.getUTCFullYear(), 0, 1)).getTime(),
     doy = Math.floor((d_num - januaryfirst) / 86400000);
    return [0,
            d.getUTCSeconds(),
            d.getUTCMinutes(),
            d.getUTCHours(),
            d.getUTCDate(),
            d.getUTCMonth(),
            d.getUTCFullYear() - 1900,
            d.getUTCDay(),
            doy,
            false | 0];
   }
   function caml_unix_has_symlink(unit){return fs_node_supported() ? 1 : 0;}
   function caml_unix_inet_addr_of_string(){return 0;}
   function caml_unix_isatty(fileDescriptor){
    if(fs_node_supported()){
     var tty = require("tty");
     return tty.isatty(fileDescriptor) ? 1 : 0;
    }
    else
     return 0;
   }
   function caml_unix_localtime(t){
    var
     d = new Date(t * 1000),
     d_num = d.getTime(),
     januaryfirst = new Date(d.getFullYear(), 0, 1).getTime(),
     doy = Math.floor((d_num - januaryfirst) / 86400000),
     jan = new Date(d.getFullYear(), 0, 1),
     jul = new Date(d.getFullYear(), 6, 1),
     stdTimezoneOffset =
       Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());
    return [0,
            d.getSeconds(),
            d.getMinutes(),
            d.getHours(),
            d.getDate(),
            d.getMonth(),
            d.getFullYear() - 1900,
            d.getDay(),
            doy,
            d.getTimezoneOffset() < stdTimezoneOffset | 0];
   }
   function caml_unix_lstat(name){
    var root = resolve_fs_device(name);
    if(! root.device.lstat) caml_failwith("caml_unix_lstat: not implemented");
    return root.device.lstat(root.rest, true);
   }
   function caml_unix_lstat_64(name){
    var r = caml_unix_lstat(name);
    r[9] = caml_int64_of_int32(r[9]);
    return r;
   }
   function caml_unix_mkdir(name, perm){
    var root = resolve_fs_device(name);
    if(! root.device.mkdir) caml_failwith("caml_unix_mkdir: not implemented");
    return root.device.mkdir(root.rest, perm, true);
   }
   function caml_unix_mktime(tm){
    var
     d = new Date(tm[6] + 1900, tm[5], tm[4], tm[3], tm[2], tm[1]).getTime(),
     t = Math.floor(d / 1000),
     tm2 = caml_unix_localtime(t);
    return [0, t, tm2];
   }
   function caml_unix_readlink(name){
    var root = resolve_fs_device(name);
    if(! root.device.readlink)
     caml_failwith("caml_unix_readlink: not implemented");
    return root.device.readlink(root.rest, true);
   }
   function caml_unix_rewinddir(dir_handle){
    caml_unix_closedir(dir_handle);
    var new_dir_handle = caml_unix_opendir(dir_handle.path);
    dir_handle.pointer = new_dir_handle.pointer;
    return 0;
   }
   function caml_unix_rmdir(name){
    var root = resolve_fs_device(name);
    if(! root.device.rmdir) caml_failwith("caml_unix_rmdir: not implemented");
    return root.device.rmdir(root.rest, true);
   }
   function caml_unix_startup(){}
   function caml_unix_stat(name){
    var root = resolve_fs_device(name);
    if(! root.device.stat) caml_failwith("caml_unix_stat: not implemented");
    return root.device.stat(root.rest, true);
   }
   function caml_unix_stat_64(name){
    var r = caml_unix_stat(name);
    r[9] = caml_int64_of_int32(r[9]);
    return r;
   }
   function caml_unix_symlink(to_dir, src, dst){
    var src_root = resolve_fs_device(src), dst_root = resolve_fs_device(dst);
    if(src_root.device != dst_root.device)
     caml_failwith
      ("caml_unix_symlink: cannot symlink between two filesystems");
    if(! src_root.device.symlink)
     caml_failwith("caml_unix_symlink: not implemented");
    return src_root.device.symlink(to_dir, src_root.rest, dst_root.rest, true);
   }
   function caml_unix_time(){return Math.floor(caml_unix_gettimeofday());}
   function caml_unix_unlink(name){
    var root = resolve_fs_device(name);
    if(! root.device.unlink)
     caml_failwith("caml_unix_unlink: not implemented");
    return root.device.unlink(root.rest, true);
   }
   function caml_unmount(name){
    var
     path = caml_make_path(name),
     name = caml_trailing_slash(path.join("/")),
     idx = - 1;
    for(var i = 0; i < jsoo_mount_point.length; i++)
     if(jsoo_mount_point[i].path == name) idx = i;
    if(idx > - 1) jsoo_mount_point.splice(idx, 1);
    return 0;
   }
   function caml_update_dummy(x, y){
    if(y.fun){x.fun = y.fun; return 0;}
    if(typeof y === "function"){x.fun = y; return 0;}
    var i = y.length;
    while(i--) x[i] = y[i];
    return 0;
   }
   function caml_weak_set(x, i, v){
    if(v == 0) caml_ephe_unset_key(x, i); else caml_ephe_set_key(x, i, v[1]);
    return 0;
   }
   function caml_wrap_exception(e){
    {
     if(e instanceof Array) return e;
     var exn;
     if
      (globalThis.RangeError && e instanceof globalThis.RangeError
       && e.message
       && e.message.match(/maximum call stack/i))
      exn = caml_global_data.Stack_overflow;
     else if
      (globalThis.InternalError && e instanceof globalThis.InternalError
       && e.message
       && e.message.match(/too much recursion/i))
      exn = caml_global_data.Stack_overflow;
     else if(e instanceof globalThis.Error && caml_named_value("jsError"))
      exn = [0, caml_named_value("jsError"), e];
     else
      exn = [0, caml_global_data.Failure, caml_string_of_jsstring(String(e))];
     if(e instanceof globalThis.Error) exn.js_error = e;
     return exn;
    }
   }
   function caml_xmlhttprequest_create(unit){
    if(typeof globalThis.XMLHttpRequest !== "undefined")
     try{return new globalThis.XMLHttpRequest;}catch(e){}
    if(typeof globalThis.activeXObject !== "undefined"){
     try{return new globalThis.activeXObject("Msxml2.XMLHTTP");}catch(e){}
     try{return new globalThis.activeXObject("Msxml3.XMLHTTP");}catch(e){}
     try{return new globalThis.activeXObject("Microsoft.XMLHTTP");}catch(e){}
    }
    caml_failwith("Cannot create a XMLHttpRequest");
   }
   function compare_digits_nat(nat1, ofs1, nat2, ofs2){
    if(nat1.data[ofs1] > nat2.data[ofs2]) return 1;
    if(nat1.data[ofs1] < nat2.data[ofs2]) return - 1;
    return 0;
   }
   function compare_nat(nat1, ofs1, len1, nat2, ofs2, len2){
    var
     a = num_digits_nat(nat1, ofs1, len1),
     b = num_digits_nat(nat2, ofs2, len2);
    if(a > b) return 1;
    if(a < b) return - 1;
    for(var i = len1 - 1; i >= 0; i--){
     if(nat1.data[ofs1 + i] >>> 0 > nat2.data[ofs2 + i] >>> 0) return 1;
     if(nat1.data[ofs1 + i] >>> 0 < nat2.data[ofs2 + i] >>> 0) return - 1;
    }
    return 0;
   }
   function compare_nat_real(nat1, nat2){
    return compare_nat(nat1, 0, nat1.data.length, nat2, 0, nat2.data.length);
   }
   function complement_nat(nat, ofs, len){
    for(var i = 0; i < len; i++)
     nat.data[ofs + i] = (- 1 >>> 0) - (nat.data[ofs + i] >>> 0);
   }
   function create_nat(size){
    var arr = new MlNat(size);
    for(var i = 0; i < size; i++) arr.data[i] = - 1;
    return arr;
   }
   function decr_nat(nat, ofs, len, carry_in){
    var borrow = carry_in == 1 ? 0 : 1;
    for(var i = 0; i < len; i++){
     var x = (nat.data[ofs + i] >>> 0) - borrow;
     nat.data[ofs + i] = x;
     if(x >= 0){borrow = 0; break;} else borrow = 1;
    }
    return borrow == 1 ? 0 : 1;
   }
   function deserialize_nat(reader, sz){
    var len = reader.read32s(), nat = new MlNat(len);
    for(var i = 0; i < len; i++) nat.data[i] = reader.read32s();
    sz[0] = len * 4;
    return nat;
   }
   function div_helper(a, b, c){
    var
     x = a * 65536 + (b >>> 16),
     y = Math.floor(x / c) * 65536,
     z = x % c * 65536,
     w = z + (b & 0x0000FFFF);
    return [y + Math.floor(w / c), w % c];
   }
   function div_digit_nat(natq, ofsq, natr, ofsr, nat1, ofs1, len, nat2, ofs2){
    var rem = nat1.data[ofs1 + len - 1] >>> 0;
    for(var i = len - 2; i >= 0; i--){
     var
      x = div_helper(rem, nat1.data[ofs1 + i] >>> 0, nat2.data[ofs2] >>> 0);
     natq.data[ofsq + i] = x[0];
     rem = x[1];
    }
    natr.data[ofsr] = rem;
    return 0;
   }
   function num_leading_zero_bits_in_digit(nat, ofs){
    var a = nat.data[ofs], b = 0;
    if(a & 0xFFFF0000){b += 16; a >>>= 16;}
    if(a & 0xFF00){b += 8; a >>>= 8;}
    if(a & 0xF0){b += 4; a >>>= 4;}
    if(a & 12){b += 2; a >>>= 2;}
    if(a & 2){b += 1; a >>>= 1;}
    if(a & 1) b += 1;
    return 32 - b;
   }
   function shift_left_nat(nat1, ofs1, len1, nat2, ofs2, nbits){
    if(nbits == 0){nat2.data[ofs2] = 0; return 0;}
    var wrap = 0;
    for(var i = 0; i < len1; i++){
     var a = nat1.data[ofs1 + i] >>> 0;
     nat1.data[ofs1 + i] = a << nbits | wrap;
     wrap = a >>> 32 - nbits;
    }
    nat2.data[ofs2] = wrap;
    return 0;
   }
   function shift_right_nat(nat1, ofs1, len1, nat2, ofs2, nbits){
    if(nbits == 0){nat2.data[ofs2] = 0; return 0;}
    var wrap = 0;
    for(var i = len1 - 1; i >= 0; i--){
     var a = nat1.data[ofs1 + i] >>> 0;
     nat1.data[ofs1 + i] = a >>> nbits | wrap;
     wrap = a << 32 - nbits;
    }
    nat2.data[ofs2] = wrap;
    return 0;
   }
   function set_to_zero_nat(nat, ofs, len){
    for(var i = 0; i < len; i++) nat.data[ofs + i] = 0;
    return 0;
   }
   function nat_of_array(l){return new MlNat(l);}
   function mult_digit_nat(nat1, ofs1, len1, nat2, ofs2, len2, nat3, ofs3){
    var carry = 0, a = nat3.data[ofs3] >>> 0;
    for(var i = 0; i < len2; i++){
     var
      x1 =
        (nat1.data[ofs1 + i] >>> 0)
        + (nat2.data[ofs2 + i] >>> 0) * (a & 0x0000FFFF)
        + carry,
      x2 = (nat2.data[ofs2 + i] >>> 0) * (a >>> 16);
     carry = Math.floor(x2 / 65536);
     var x3 = x1 + x2 % 65536 * 65536;
     nat1.data[ofs1 + i] = x3;
     carry += Math.floor(x3 / 4294967296);
    }
    return len2 < len1 && carry
            ? add_nat
              (nat1, ofs1 + len2, len1 - len2, nat_of_array([carry]), 0, 1, 0)
            : carry;
   }
   function sub_nat(nat1, ofs1, len1, nat2, ofs2, len2, carry_in){
    var borrow = carry_in == 1 ? 0 : 1;
    for(var i = 0; i < len2; i++){
     var
      x = (nat1.data[ofs1 + i] >>> 0) - (nat2.data[ofs2 + i] >>> 0) - borrow;
     nat1.data[ofs1 + i] = x;
     if(x >= 0) borrow = 0; else borrow = 1;
    }
    return decr_nat(nat1, ofs1 + len2, len1 - len2, borrow == 1 ? 0 : 1);
   }
   function div_nat(nat1, ofs1, len1, nat2, ofs2, len2){
    if(len2 == 1){
     div_digit_nat(nat1, ofs1 + 1, nat1, ofs1, nat1, ofs1, len1, nat2, ofs2);
     return 0;
    }
    var s = num_leading_zero_bits_in_digit(nat2, ofs2 + len2 - 1);
    shift_left_nat(nat2, ofs2, len2, nat_of_array([0]), 0, s);
    shift_left_nat(nat1, ofs1, len1, nat_of_array([0]), 0, s);
    var d = (nat2.data[ofs2 + len2 - 1] >>> 0) + 1, a = create_nat(len2 + 1);
    for(var i = len1 - 1; i >= len2; i--){
     var
      quo =
        d == 4294967296
         ? nat1.data[ofs1 + i] >>> 0
         : div_helper
            (nat1.data[ofs1 + i] >>> 0, nat1.data[ofs1 + i - 1] >>> 0, d)
           [0];
     set_to_zero_nat(a, 0, len2 + 1);
     mult_digit_nat(a, 0, len2 + 1, nat2, ofs2, len2, nat_of_array([quo]), 0);
     sub_nat(nat1, ofs1 + i - len2, len2 + 1, a, 0, len2 + 1, 1);
     while
     (nat1.data[ofs1 + i] != 0
      || compare_nat(nat1, ofs1 + i - len2, len2, nat2, ofs2, len2) >= 0){
      quo = quo + 1;
      sub_nat(nat1, ofs1 + i - len2, len2 + 1, nat2, ofs2, len2, 1);
     }
     nat1.data[ofs1 + i] = quo;
    }
    shift_right_nat(nat1, ofs1, len2, nat_of_array([0]), 0, s);
    shift_right_nat(nat2, ofs2, len2, nat_of_array([0]), 0, s);
    return 0;
   }
   function serialize_nat(writer, nat, sz){
    var len = nat.data.length;
    writer.write(32, len);
    for(var i = 0; i < len; i++) writer.write(32, nat.data[i]);
    sz[0] = len * 4;
    sz[1] = len * 8;
   }
   function initialize_nat(){
    caml_custom_ops["_nat"] =
     {deserialize: deserialize_nat,
      serialize: serialize_nat,
      hash: caml_hash_nat};
   }
   function is_digit_int(nat, ofs){if(nat.data[ofs] >= 0) return 1; return 0;}
   function is_digit_odd(nat, ofs){if(nat.data[ofs] & 1) return 1; return 0;}
   function is_digit_zero(nat, ofs){
    if(nat.data[ofs] == 0) return 1;
    return 0;
   }
   function jsoo_create_file_extern(name, content){
    if(globalThis.jsoo_create_file)
     globalThis.jsoo_create_file(name, content);
    else{
     if(! globalThis.caml_fs_tmp) globalThis.caml_fs_tmp = [];
     globalThis.caml_fs_tmp.push({name: name, content: content});
    }
    return 0;
   }
   function jsoo_effect_not_supported(){
    caml_failwith("Effect handlers are not supported");
   }
   function land_digit_nat(nat1, ofs1, nat2, ofs2){nat1.data[ofs1] &= nat2.data[ofs2]; return 0;
   }
   function length_nat(x){return x.data.length;}
   function lor_digit_nat(nat1, ofs1, nat2, ofs2){nat1.data[ofs1] |= nat2.data[ofs2]; return 0;
   }
   function lxor_digit_nat(nat1, ofs1, nat2, ofs2){nat1.data[ofs1] ^= nat2.data[ofs2]; return 0;
   }
   function ml_canvas_arc(canvas, p, radius, theta1, theta2, ccw){
    canvas.ctxt.arc(p[1], p[2], radius, theta1, theta2, ccw);
    return 0;
   }
   function ml_canvas_arc_to(canvas, p1, p2, radius){
    canvas.ctxt.arcTo(p1[1], p1[2], p2[1], p2[2], radius);
    return 0;
   }
   function ml_canvas_bezier_curve_to(canvas, p1, p2, p3){
    canvas.ctxt.bezierCurveTo(p1[1], p1[2], p2[1], p2[2], p3[1], p3[2]);
    return 0;
   }
   function ml_canvas_blit(dst_canvas, dpos, src_canvas, spos, size){
    var width = size[1], height = size[2];
    if(! _ml_canvas_valid_canvas_size(width, height))
     caml_invalid_argument("Canvas.blit: invalid dimensions");
    dst_canvas.ctxt.drawImage
     (src_canvas.surface,
      spos[1],
      spos[2],
      width,
      height,
      dpos[1],
      dpos[2],
      width,
      height);
    return 0;
   }
   function ml_canvas_clear_path(canvas){canvas.ctxt.beginPath(); return 0;}
   function ml_canvas_clip(canvas, nonzero){
    if(nonzero) canvas.ctxt.clip("nonzero"); else canvas.ctxt.clip();
    return 0;
   }
   function ml_canvas_clip_path(canvas, path, nonzero){
    if(nonzero)
     canvas.ctxt.clip(path, "nonzero");
    else
     canvas.ctxt.clip(path);
    return 0;
   }
   function ml_canvas_close_path(canvas){canvas.ctxt.closePath(); return 0;}
   function ml_canvas_commit(canvas){return 0;}
   function ml_canvas_compare(canvas1, canvas2){
    if(canvas1.id < canvas2.id)
     return - 1;
    else if(canvas1.id > canvas2.id) return 1; else return 0;
   }
   function ml_canvas_create_offscreen(size){
    _ml_canvas_ensure_initialized();
    var width = size[1], height = size[2];
    if(! _ml_canvas_valid_canvas_size(width, height))
     caml_invalid_argument("Canvas.createOffscreen: invalid dimensions");
    var
     id = ++_next_id,
     canvas =
       {name: null,
        frame: null,
        header: null,
        surface: surface,
        ctxt: ctxt,
        x: 0,
        y: 0,
        width: width,
        height: height,
        id: id,
        autocommit: false,
        resizeable: false,
        minimize: false,
        maximize: false,
        close: false},
     surface = document.createElement("canvas");
    surface.id = "s" + id;
    surface.width = width;
    surface.height = height;
    surface.style.position = "absolute";
    surface.canvas = canvas;
    canvas.surface = surface;
    var ctxt = surface.getContext("2d");
    ctxt.globalAlpha = 1.0;
    ctxt.lineWidth = 2.0;
    ctxt.fillStyle = "white";
    ctxt.strokeStyle = "black";
    canvas.ctxt = ctxt;
    return canvas;
   }
   function ml_canvas_create_offscreen_from_image_data(data){
    _ml_canvas_ensure_initialized();
    var
     width = caml_ba_dim(data, 1),
     height = caml_ba_dim(data, 0),
     canvas = ml_canvas_create_offscreen([0, width, height]);
    if(canvas === null) return null;
    var
     sta = new window.Uint8Array(caml_ba_to_typed_array(data).buffer),
     dta = new window.Uint8ClampedArray(sta.length);
    for(var i = 0; i < sta.length; i += 4){
     dta[i + 0] = sta[i + 2];
     dta[i + 1] = sta[i + 1];
     dta[i + 2] = sta[i + 0];
     dta[i + 3] = sta[i + 3];
    }
    if(window.ImageData === undefined){
     var image = canvas.ctxt.createImageData(width, height);
     image.data.set(dta);
    }
    else
     var image = new window.ImageData(dta, width, height);
    canvas.ctxt.putImageData(image, 0, 0);
    return canvas;
   }
   function ml_canvas_create_offscreen_from_png(filename, onload){
    _ml_canvas_ensure_initialized();
    var img = _ml_canvas_image_of_png_file(filename);
    if(img === null){
     caml_raise_with_string(caml_named_value("Read_png_failed"), filename);
     return 0;
    }
    img[0].then
     (function(__img){
       var
        canvas = ml_canvas_create_offscreen([0, img[1].width, img[1].height]);
       if(canvas === null) return 0;
       canvas.ctxt.drawImage(img[1], 0, 0);
       onload(canvas);
       return 0;
      });
    return 0;
   }
   function ml_canvas_create_onscreen
   (autocommit,
    decorated,
    resizeable,
    minimize,
    maximize,
    close,
    title,
    target,
    pos,
    size){
    _ml_canvas_ensure_initialized();
    var width = size[1], height = size[2];
    if(! _ml_canvas_valid_canvas_size(width, height))
     caml_invalid_argument("Canvas.blit: invalid dimensions");
    var
     pos = Optional_val(pos, [0, 0, 0]),
     x = pos[1],
     y = pos[2],
     autocommit = Optional_bool_val(autocommit, true),
     decorated = false,
     resizeable = Optional_bool_val(resizeable, true),
     minimize = Optional_bool_val(minimize, true),
     maximize = Optional_bool_val(maximize, true),
     close = Optional_bool_val(close, true),
     title = Optional_val(title, null),
     target = Optional_val(target, null);
    target = document.getElementById(target);
    if(target == null) target = document.body;
    var
     id = ++_next_id,
     canvas =
       {name: title,
        target: target,
        frame: null,
        header: null,
        surface: null,
        ctxt: null,
        x: x,
        y: y,
        width: width,
        height: height,
        id: id,
        autocommit: autocommit,
        resizeable: resizeable,
        minimize: minimize,
        maximize: maximize,
        close: close},
     header_height = decorated == true ? 30 : 0,
     frame = document.createElement("div");
    frame.id = "f" + id;
    if(resizeable == true){
     frame.style.width = "100%";
     frame.style.height = "100%";
    }
    else{
     frame.style.width = width + "px";
     frame.style.height = height + header_height + "px";
    }
    frame.style.visibility = "hidden";
    frame.oncontextmenu = function(){return false;};
    frame.canvas = canvas;
    canvas.frame = frame;
    target.appendChild(frame);
    var header = null;
    if(decorated === true){
     frame.style.border = "1px solid black";
     header = document.createElement("canvas");
     header.id = "h" + id;
     header.width = width;
     header.height = 30;
     _ml_canvas_decorate(header, minimize, maximize, close, title);
     header.onmousedown = _header_down_handler;
     header.canvas = canvas;
     canvas.header = header;
     frame.appendChild(header);
    }
    var surface = document.createElement("canvas");
    surface.id = "s" + id;
    surface.width = width;
    surface.height = height;
    surface.onmousedown = _surface_down_handler;
    surface.canvas = canvas;
    canvas.surface = surface;
    frame.appendChild(surface);
    if(resizeable === true){
     surface.style.width = "100%";
     surface.style.height = "100%";
     _resize.observe(surface);
    }
    var ctxt = surface.getContext("2d");
    ctxt.globalAlpha = 1.0;
    ctxt.lineWidth = 1.0;
    ctxt.fillStyle = "white";
    ctxt.strokeStyle = "black";
    canvas.ctxt = ctxt;
    ctxt.fillRect(0, 0, width, height);
    return canvas;
   }
   function ml_canvas_ellipse
   (canvas, p, radius, rotation, theta1, theta2, ccw){
    canvas.ctxt.ellipse
     (p[1], p[2], radius[1], radius[2], rotation, theta1, theta2, ccw);
    return 0;
   }
   function ml_canvas_export_png(canvas, filename){
    try{
     var data = canvas.surface.toDataURL("image/png").substring(22);
     caml_create_file(filename, window.atob(data));
    }
    catch(exn){
     caml_raise_with_string(caml_named_value("Write_png_failed"), filename);
    }
    return 0;
   }
   function ml_canvas_fill(canvas, nonzero){
    if(nonzero) canvas.ctxt.fill("nonzero"); else canvas.ctxt.fill();
    return 0;
   }
   function ml_canvas_fill_path(canvas, path, nonzero){
    if(nonzero)
     canvas.ctxt.fill(path, "nonzero");
    else
     canvas.ctxt.fill(path);
    return 0;
   }
   function ml_canvas_fill_rect(canvas, pos, size){
    canvas.ctxt.fillRect(pos[1], pos[2], size[1], size[2]);
    return 0;
   }
   function ml_canvas_fill_text(canvas, text, pos){
    canvas.ctxt.fillText(caml_jsstring_of_string(text), pos[1], pos[2]);
    return 0;
   }
   function ml_canvas_get_canvas(id){
    _ml_canvas_ensure_initialized();
    var surface = document.getElementById("s" + id);
    if(surface === null){caml_raise_not_found(); return 0;}
    return surface.canvas;
   }
   function ml_canvas_get_current_timestamp(){
    _ml_canvas_ensure_initialized();
    var e = new window.Event("dummy");
    return caml_int64_of_float(e.timeStamp * 1000.0);
   }
   function ml_canvas_get_fill_color(canvas){
    return typeof canvas.ctxt.fillStyle == "string"
            ? _int_of_color(canvas.ctxt.fillStyle)
            : 0;
   }
   function ml_canvas_get_fill_style(canvas){
    return Draw_style_val(canvas.ctxt.fillStyle);
   }
   function ml_canvas_get_global_alpha(canvas){return canvas.ctxt.globalAlpha;
   }
   function ml_canvas_get_global_composite_operation(canvas){return Val_compop(canvas.ctxt.globalCompositeOperation);
   }
   function ml_canvas_get_id(canvas){return canvas.id;}
   function ml_canvas_get_image_data(canvas, pos, size){
    var width = size[1], height = size[2];
    if(! _ml_canvas_valid_canvas_size(width, height))
     caml_invalid_argument("Canvas.getImageData: invalid dimensions");
    var
     image = canvas.ctxt.getImageData(pos[1], pos[2], width, height),
     sta = new window.Uint8Array(image.data.buffer),
     dta = new window.Uint8Array(sta.length);
    for(var i = 0; i < sta.length; i += 4){
     dta[i + 0] = sta[i + 2];
     dta[i + 1] = sta[i + 1];
     dta[i + 2] = sta[i + 0];
     dta[i + 3] = sta[i + 3];
    }
    return caml_ba_create_unsafe(3, 0, [height, width, 4], dta);
   }
   function ml_canvas_get_line_cap(canvas){return Val_cap_type(canvas.lineCap);
   }
   function ml_canvas_get_line_dash(canvas){
    var arr = canvas.ctxt.getLineDash();
    arr.unshift(254);
    return arr;
   }
   function ml_canvas_get_line_dash_offset(canvas){return canvas.ctxt.lineDashOffset;
   }
   function ml_canvas_get_line_join(canvas){return Val_join_type(canvas.lineJoin);
   }
   function ml_canvas_get_line_width(canvas){return canvas.ctxt.lineWidth;}
   function ml_canvas_get_miter_limit(canvas){return canvas.ctxt.miterLimit;}
   function ml_canvas_get_pixel(canvas, pos){
    var image = canvas.ctxt.getImageData(pos[1], pos[2], 1, 1);
    return image.data[3] << 24 >>> 0 | image.data[0] << 16
           | image.data[1] << 8
           | image.data[2] << 0;
   }
   function ml_canvas_get_position(canvas){
    return canvas.frame !== null ? [0, canvas.x, canvas.y] : [0, 0, 0];
   }
   function ml_canvas_get_shadow_blur(canvas){return canvas.ctxt.shadowBlur;}
   function ml_canvas_get_shadow_color(canvas){
    return _int_of_color(canvas.ctxt.shadowColor);
   }
   function ml_canvas_get_shadow_offset(canvas, offset){
    return [0, canvas.ctxt.shadowOffsetX, canvas.ctxt.shadowOffsetY];
   }
   function ml_canvas_get_size(canvas){
    return [0, canvas.width, canvas.height];
   }
   function ml_canvas_get_stroke_color(canvas){
    return typeof canvas.ctxt.strokeStyle == "string"
            ? _int_of_color(canvas.ctxt.strokeStyle)
            : 0;
   }
   function ml_canvas_get_stroke_style(canvas){
    return Draw_style_val(canvas.ctxt.strokeStyle);
    return 0;
   }
   function ml_canvas_gradient_add_color_stop(gradient, color, pos){gradient.addColorStop(pos, _color_of_int(color)); return 0;
   }
   function ml_canvas_gradient_create_conic(center, angle){
    return _internal_ctxt.createConicGradient(angle, center[1], center[2]);
   }
   function ml_canvas_gradient_create_linear(pos1, pos2){
    return _internal_ctxt.createLinearGradient
            (pos1[1], pos1[2], pos2[1], pos2[2]);
   }
   function ml_canvas_gradient_create_radial(center1, rad1, center2, rad2){
    return _internal_ctxt.createRadialGradient
            (center1[1], center1[2], rad1, center2[1], center2[2], rad2);
   }
   function ml_canvas_hash(canvas){
    var hash = caml_named_value("Hashtbl.hash");
    return hash(canvas.id);
   }
   function ml_canvas_image_data_blit(dst_data, dpos, src_data, spos, size){
    var width = size[1], height = size[2];
    if(! _ml_canvas_valid_canvas_size(width, height))
     caml_invalid_argument("ImageData.blit: invalid dimensions");
    var
     dwidth = caml_ba_dim(dst_data, 1),
     dheight = caml_ba_dim(dst_data, 0),
     swidth = caml_ba_dim(src_data, 1),
     sheight = caml_ba_dim(src_data, 0),
     blit_info =
       _ml_canvas_adjust_blit_info
        (dwidth,
         dheight,
         dpos[1],
         dpos[2],
         swidth,
         sheight,
         spos[1],
         spos[2],
         width,
         height),
     dx = blit_info[0],
     dy = blit_info[1],
     sx = blit_info[2],
     sy = blit_info[3],
     width = blit_info[4],
     height = blit_info[5];
    if(width > 0 && height > 0){
     var
      dta = new window.Uint32Array(caml_ba_to_typed_array(dst_data).buffer),
      sta = new window.Uint32Array(caml_ba_to_typed_array(src_data).buffer);
     for(var y = 0; y < height; ++y)
      for(var x = 0; x < width; ++x)
       dta[(dy + y) * dwidth + (dx + x)] = sta[(sy + y) * swidth + (sx + x)];
    }
    return 0;
   }
   function ml_canvas_image_data_create_from_png(filename, onload){
    _ml_canvas_ensure_initialized();
    var img = _ml_canvas_image_of_png_file(filename);
    if(img === null){
     caml_raise_with_string(caml_named_value("Read_png_failed"), filename);
     return 0;
    }
    img[0].then
     (function(__img){
       var ba = _ml_canvas_ba_of_img(img[1]);
       onload(ba);
       return 0;
      });
    return 0;
   }
   function ml_canvas_image_data_export_png(data, filename){
    _ml_canvas_ensure_initialized();
    try{
     var surface = _ml_canvas_surface_of_ba(data);
     if(surface !== null){
      var data = surface.toDataURL("image/png").substring(22);
      caml_create_file(filename, window.atob(data));
     }
    }
    catch(exn){
     caml_raise_with_string(caml_named_value("Write_png_failed"), filename);
    }
    return 0;
   }
   function ml_canvas_image_data_fill(data, color){
    var ta = new window.Uint32Array(caml_ba_to_typed_array(data).buffer);
    for(var i = 0; i < ta.length; i++) ta[i] = color;
    return 0;
   }
   function ml_canvas_image_data_get_pixel(data, pos){
    var ta = new window.Uint32Array(caml_ba_to_typed_array(data).buffer);
    return ta[pos[2] * caml_ba_dim(data, 1) + pos[1]];
   }
   function ml_canvas_image_data_get_size(data){
    return [0, caml_ba_dim(data, 1), caml_ba_dim(data, 0)];
   }
   function ml_canvas_image_data_import_png(data, pos, filename, onload){
    _ml_canvas_ensure_initialized();
    var
     img = _ml_canvas_image_of_png_file(filename),
     surface = _ml_canvas_surface_of_ba(data);
    if(img === null || surface === null){
     caml_raise_with_string(caml_named_value("Read_png_failed"), filename);
     return 0;
    }
    img[0].then
     (function(__img){
       var ctxt = surface.getContext("2d");
       ctxt.drawImage(img[1], pos[1], pos[2]);
       var
        image = ctxt.getImageData(0, 0, surface.width, surface.height),
        sta = new window.Uint8Array(image.data.buffer),
        dta = caml_ba_to_typed_array(data);
       for(var i = 0; i < dta.length; i++) dta[i] = sta[i];
       onload(data);
       return 0;
      });
    return 0;
   }
   function ml_canvas_image_data_put_pixel(data, pos, color){
    var ta = new window.Uint32Array(caml_ba_to_typed_array(data).buffer);
    ta[pos[2] * caml_ba_dim(data, 1) + pos[1]] = color;
    return 0;
   }
   function ml_canvas_image_data_sub(src_data, spos, size){
    var dwidth = size[1], dheight = size[2];
    if(! _ml_canvas_valid_canvas_size(dwidth, dheight))
     caml_invalid_argument("ImageData.blit: invalid dimensions");
    var
     swidth = caml_ba_dim(src_data, 1),
     sheight = caml_ba_dim(src_data, 0),
     ta = new window.Uint8Array(dwidth * dheight * 4),
     dst_data = caml_ba_create_unsafe(3, 0, [dheight, dwidth, 4], ta),
     blit_info =
       _ml_canvas_adjust_blit_info
        (dwidth,
         dheight,
         0,
         0,
         swidth,
         sheight,
         spos[1],
         spos[2],
         dwidth,
         dheight),
     dx = blit_info[0],
     dy = blit_info[1],
     sx = blit_info[2],
     sy = blit_info[3],
     width = blit_info[4],
     height = blit_info[5];
    if(width > 0 && height > 0){
     var
      dta = new window.Uint32Array(caml_ba_to_typed_array(dst_data).buffer),
      sta = new window.Uint32Array(caml_ba_to_typed_array(src_data).buffer);
     for(var y = 0; y < height; ++y)
      for(var x = 0; x < width; ++x)
       dta[(dy + y) * dwidth + (dx + x)] = sta[(sy + y) * swidth + (sx + x)];
    }
    return dst_data;
   }
   function ml_canvas_import_png(canvas, pos, filename, onload){
    var img = _ml_canvas_image_of_png_file(filename);
    if(img === null){
     caml_raise_with_string(caml_named_value("Read_png_failed"), filename);
     return 0;
    }
    img[0].then
     (function(__img){
       canvas.ctxt.drawImage(img[1], pos[1], pos[2]);
       onload(canvas);
       return 0;
      });
    return 0;
   }
   function ml_canvas_init(){
    if(_ml_canvas_initialized === true) return 0;
    document.addEventListener("keydown", _key_down_handler, {passive: true});
    document.addEventListener("keyup", _key_up_handler, {passive: true});
    document.addEventListener("mouseup", _up_handler, {passive: true});
    document.addEventListener("mousemove", _move_handler, {passive: true});
    window.requestAnimationFrame(_frame_handler);
    _ml_canvas_initialized = true;
    return 0;
   }
   function ml_canvas_int_of_key(keycode){return Key_code_val(keycode);}
   function ml_canvas_key_of_int(keycode){
    caml_invalid_argument("key_of_int: i must be in the 0-255 range");
    return Val_key_code(keycode);
   }
   function ml_canvas_line_to(canvas, p){
    canvas.ctxt.lineTo(p[1], p[2]);
    return 0;
   }
   function ml_canvas_move_to(canvas, p){
    canvas.ctxt.moveTo(p[1], p[2]);
    return 0;
   }
   function ml_canvas_path_add(path1, path2){path1.addPath(path2); return 0;}
   function ml_canvas_path_add_transformed(path1, path2, t){
    var m = new window.DOMMatrix([[1], t[2], t[3], t[4], t[5], t[6]]);
    path1.addPath(path2, m);
    return 0;
   }
   function ml_canvas_path_arc(path, p, radius, theta1, theta2, ccw){path.arc(p[1], p[2], radius, theta1, theta2, ccw); return 0;
   }
   function ml_canvas_path_arc_to(path, p1, p2, radius){
    path.arcTo(p1[1], p1[2], p2[1], p2[2], radius);
    return 0;
   }
   function ml_canvas_path_bezier_curve_to(path, cp1, cp2, p){
    path.bezierCurveTo(cp1[1], cp1[2], cp2[1], cp2[2], p[1], p[2]);
    return 0;
   }
   function ml_canvas_path_close(path){path.closePath(); return 0;}
   function ml_canvas_path_create(){return new window.Path2D();}
   function ml_canvas_path_ellipse
   (path, p, radius, rotation, theta1, theta2, ccw){
    path.ellipse
     (p[1], p[2], radius[1], radius[2], rotation, theta1, theta2, ccw);
    return 0;
   }
   function ml_canvas_path_line_to(path, p){path.lineTo(p[1], p[2]); return 0;
   }
   function ml_canvas_path_move_to(path, p){path.moveTo(p[1], p[2]); return 0;
   }
   function ml_canvas_path_quadratic_curve_to(path, cp, p){
    path.quadraticCurveTo(cp[1], cp[2], p[1], p[2]);
    return 0;
   }
   function ml_canvas_path_rect(path, pos, size){
    path.rect(pos[1], pos[2], size[1], size[2]);
    return 0;
   }
   function ml_canvas_pattern_create(image, repeat){
    var img_canv = _ml_canvas_surface_of_ba(image);
    return _internal_ctxt.createPattern(img_canv, Repeat_val(repeat));
   }
   function ml_canvas_put_image_data(canvas, dpos, data, spos, size){
    var width = size[1], height = size[2];
    if(! _ml_canvas_valid_canvas_size(width, height))
     caml_invalid_argument("Canvas.putImageData: invalid dimensions");
    var
     sta = new window.Uint8Array(caml_ba_to_typed_array(data).buffer),
     dta = new window.Uint8ClampedArray(sta.length);
    for(var i = 0; i < sta.length; i += 4){
     dta[i + 0] = sta[i + 2];
     dta[i + 1] = sta[i + 1];
     dta[i + 2] = sta[i + 0];
     dta[i + 3] = sta[i + 3];
    }
    if(window.ImageData === undefined){
     var
      image =
        canvas.ctxt.createImageData
         (caml_ba_dim(data, 1), caml_ba_dim(data, 0));
     image.data.set(dta);
    }
    else
     var
      image =
        new window.ImageData(dta, caml_ba_dim(data, 1), caml_ba_dim(data, 0));
    canvas.ctxt.putImageData
     (image, dpos[1], dpos[2], spos[1], spos[2], width, height);
    return 0;
   }
   function ml_canvas_put_pixel(canvas, pos, color){
    var image = canvas.ctxt.createImageData(1, 1);
    image.data[3] = (color & 0xFF000000) >>> 24;
    image.data[0] = (color & 0x00FF0000) >>> 16;
    image.data[1] = (color & 0x0000FF00) >>> 8;
    image.data[2] = (color & 0x000000FF) >>> 0;
    canvas.ctxt.putImageData(image, pos[1], pos[2]);
    return 0;
   }
   function ml_canvas_quadratic_curve_to(canvas, p1, p2){
    canvas.ctxt.quadraticCurveTo(p1[1], p1[2], p2[1], p2[2]);
    return 0;
   }
   function ml_canvas_rect(canvas, pos, size){
    canvas.ctxt.rect(pos[1], pos[2], size[1], size[2]);
    return 0;
   }
   function ml_canvas_restore(canvas){canvas.ctxt.restore(); return 0;}
   function ml_canvas_rotate(canvas, theta){canvas.ctxt.rotate(theta); return 0;
   }
   function ml_canvas_run(mlProcessEvent, mlContinuation){
    _ml_canvas_ensure_initialized();
    if(_ml_canvas_mlProcessEvent !== null) return 0;
    _ml_canvas_mlProcessEvent = mlProcessEvent;
    _ml_canvas_mlContinuation = mlContinuation;
    _ml_canvas_mlException = null;
    return 0;
   }
   function ml_canvas_save(canvas){canvas.ctxt.save(); return 0;}
   function ml_canvas_scale(canvas, vec){
    canvas.ctxt.scale(vec[1], vec[2]);
    return 0;
   }
   function ml_canvas_set_fill_color(canvas, color){
    canvas.ctxt.fillStyle = _color_of_int(color);
    return 0;
   }
   function ml_canvas_set_fill_gradient(canvas, grad){canvas.ctxt.fillStyle = grad; return 0;
   }
   function ml_canvas_set_fill_pattern(canvas, pattern){canvas.ctxt.fillStyle = pattern; return 0;
   }
   function ml_canvas_set_fill_style(canvas, style){
    canvas.ctxt.fillStyle = Val_draw_style(style);
    return 0;
   }
   function ml_canvas_set_font(canvas, family, size, slant, weight){
    canvas.ctxt.font =
     Slant_val(slant) + " " + weight + " " + size + "pt "
     + caml_jsstring_of_string(family);
    return 0;
   }
   function ml_canvas_set_global_alpha(canvas, global_alpha){canvas.ctxt.globalAlpha = global_alpha; return 0;
   }
   function ml_canvas_set_global_composite_operation(canvas, op){
    canvas.ctxt.globalCompositeOperation = Compop_val(op);
    return 0;
   }
   function ml_canvas_set_line_cap(canvas, cap){
    canvas.ctxt.lineCap = Cap_type_val(cap);
    return 0;
   }
   function ml_canvas_set_line_dash(canvas, dash){
    dash.shift();
    canvas.ctxt.setLineDash(dash);
    return 0;
   }
   function ml_canvas_set_line_dash_offset(canvas, offset){canvas.ctxt.lineDashOffset = offset; return 0;
   }
   function ml_canvas_set_line_join(canvas, join){
    canvas.ctxt.lineJoin = Join_type_val(join);
    return 0;
   }
   function ml_canvas_set_line_width(canvas, width){canvas.ctxt.lineWidth = width; return 0;
   }
   function ml_canvas_set_miter_limit(canvas, limit){canvas.ctxt.miterLimit = limit; return 0;
   }
   function ml_canvas_set_position(canvas, pos){
    if(canvas.frame !== null){
     var x = pos[1], y = pos[2];
     canvas.x = x;
     canvas.y = y;
     canvas.frame.style.left = x + "px";
     canvas.frame.style.top = y + "px";
    }
    return 0;
   }
   function ml_canvas_set_shadow_blur(canvas, blur){canvas.ctxt.shadowBlur = blur; return 0;
   }
   function ml_canvas_set_shadow_color(canvas, color){
    canvas.ctxt.shadowColor = _color_of_int(color);
    return 0;
   }
   function ml_canvas_set_shadow_offset(canvas, offset){
    canvas.ctxt.shadowOffsetX = offset[1];
    canvas.ctxt.shadowOffsetY = offset[2];
    return 0;
   }
   function ml_canvas_set_size(canvas, size){
    var width = size[1], height = size[2];
    if(! _ml_canvas_valid_canvas_size(width, height))
     caml_invalid_argument("Canvas.setSize: invalid dimensions");
    var img = canvas.ctxt.getImageData(0, 0, canvas.width, canvas.height);
    if(canvas.header !== null){
     canvas.header.width = width;
     _ml_canvas_decorate
      (canvas.header,
       canvas.minimize,
       canvas.maximize,
       canvas.close,
       canvas.name);
    }
    canvas.surface.width = canvas.width = width;
    canvas.surface.height = canvas.height = height;
    canvas.ctxt.fillRect(0, 0, width, height);
    canvas.ctxt.putImageData(img, 0, 0);
    return 0;
   }
   function ml_canvas_set_stroke_color(canvas, color){
    canvas.ctxt.strokeStyle = _color_of_int(color);
    return 0;
   }
   function ml_canvas_set_stroke_gradient(canvas, grad){canvas.ctxt.strokeStyle = grad; return 0;
   }
   function ml_canvas_set_stroke_pattern(canvas, pattern){canvas.ctxt.strokeStyle = pattern; return 0;
   }
   function ml_canvas_set_stroke_style(canvas, style){
    canvas.ctxt.strokeStyle = Val_draw_style(style);
    return 0;
   }
   function ml_canvas_set_transform(canvas, t){
    canvas.ctxt.setTransform(t[1], t[2], t[3], t[4], t[5], t[6]);
    return 0;
   }
   function ml_canvas_shear(canvas, vec){
    canvas.ctxt.transform(1.0, vec[2], vec[1], 1.0, 0.0, 0.0);
    return 0;
   }
   function ml_canvas_show(canvas){
    if(canvas.frame !== null){
     _focus = canvas;
     canvas.frame.style.visibility = "visible";
    }
    return 0;
   }
   function ml_canvas_stroke(canvas){canvas.ctxt.stroke(); return 0;}
   function ml_canvas_stroke_path(canvas, path){canvas.ctxt.stroke(path); return 0;
   }
   function ml_canvas_stroke_rect(canvas, pos, size){
    canvas.ctxt.strokeRect(pos[1], pos[2], size[1], size[2]);
    return 0;
   }
   function ml_canvas_stroke_text(canvas, text, pos){
    canvas.ctxt.strokeText(caml_jsstring_of_string(text), pos[1], pos[2]);
    return 0;
   }
   function ml_canvas_transform(canvas, t){
    canvas.ctxt.transform(t[1], t[2], t[3], t[4], t[5], t[6]);
    return 0;
   }
   function ml_canvas_translate(canvas, vec){
    canvas.ctxt.translate(vec[1], vec[2]);
    return 0;
   }
   function mult_nat(nat1, ofs1, len1, nat2, ofs2, len2, nat3, ofs3, len3){
    var carry = 0;
    for(var i = 0; i < len3; i++)
     carry +=
      mult_digit_nat
       (nat1, ofs1 + i, len1 - i, nat2, ofs2, len2, nat3, ofs3 + i);
    return carry;
   }
   function nth_digit_nat(nat, ofs){return nat.data[ofs];}
   function nth_digit_nat_native(nat, ofs){return nat.data[ofs];}
   var
    re_match =
      function(){
        var
         re_word_letters =
           [0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0xFF,
            0x03,
            0xFE,
            0xFF,
            0xFF,
            0x87,
            0xFE,
            0xFF,
            0xFF,
            0x07,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0xFF,
            0xFF,
            0x7F,
            0xFF,
            0xFF,
            0xFF,
            0x7F,
            0xFF],
         opcodes =
           {CHAR: 0,
            CHARNORM: 1,
            STRING: 2,
            STRINGNORM: 3,
            CHARCLASS: 4,
            BOL: 5,
            EOL: 6,
            WORDBOUNDARY: 7,
            BEGGROUP: 8,
            ENDGROUP: 9,
            REFGROUP: 10,
            ACCEPT: 11,
            SIMPLEOPT: 12,
            SIMPLESTAR: 13,
            SIMPLEPLUS: 14,
            GOTO: 15,
            PUSHBACK: 16,
            SETMARK: 17,
            CHECKPROGRESS: 18};
        function is_word_letter(c){
         return re_word_letters[c >> 3] >> (c & 7) & 1;
        }
        function in_bitset(s, i){
         return caml_string_get(s, i >> 3) >> (i & 7) & 1;
        }
        function re_match_impl(re, s, pos, partial){
         var
          prog = caml_js_from_array(re[1]),
          cpool = caml_js_from_array(re[2]),
          normtable = caml_jsbytes_of_string(re[3]),
          numgroups = re[4] | 0,
          numregisters = re[5] | 0,
          startchars = re[6] | 0,
          s = caml_uint8_array_of_string(s),
          pc = 0,
          quit = false,
          stack = [],
          groups = new Array(numgroups),
          re_register = new Array(numregisters);
         for(var i = 0; i < groups.length; i++)
          groups[i] = {start: - 1, end: - 1};
         groups[0].start = pos;
         function backtrack(){
          while(stack.length){
           var item = stack.pop();
           if(item.undo)
            item.undo.obj[item.undo.prop] = item.undo.value;
           else if(item.pos){pc = item.pos.pc; pos = item.pos.txt; return;}
          }
          quit = true;
         }
         function push(item){stack.push(item);}
         function accept(){
          groups[0].end = pos;
          var result = new Array(1 + groups.length * 2);
          result[0] = 0;
          for(var i = 0; i < groups.length; i++){
           var g = groups[i];
           if(g.start < 0 || g.end < 0) g.start = g.end = - 1;
           result[2 * i + 1] = g.start;
           result[2 * i + 1 + 1] = g.end;
          }
          return result;
         }
         function prefix_match(){
          if(partial) return accept(); else backtrack();
         }
         while(! quit){
          var
           op = prog[pc] & 0xff,
           sarg = prog[pc] >> 8,
           uarg = sarg & 0xff,
           c = s[pos],
           group;
          pc++;
          switch(op){
            case opcodes.CHAR:
             if(pos === s.length){prefix_match(); break;}
             if(c === uarg) pos++; else backtrack();
             break;
            case opcodes.CHARNORM:
             if(pos === s.length){prefix_match(); break;}
             if(normtable.charCodeAt(c) === uarg) pos++; else backtrack();
             break;
            case opcodes.STRING:
             for
             (var arg = caml_jsbytes_of_string(cpool[uarg]), i = 0;
              i < arg.length;
              i++){
              if(pos === s.length){prefix_match(); break;}
              if(c === arg.charCodeAt(i))
               c = s[++pos];
              else{backtrack(); break;}
             }
             break;
            case opcodes.STRINGNORM:
             for
             (var arg = caml_jsbytes_of_string(cpool[uarg]), i = 0;
              i < arg.length;
              i++){
              if(pos === s.length){prefix_match(); break;}
              if(normtable.charCodeAt(c) === arg.charCodeAt(i))
               c = s[++pos];
              else{backtrack(); break;}
             }
             break;
            case opcodes.CHARCLASS:
             if(pos === s.length){prefix_match(); break;}
             if(in_bitset(cpool[uarg], c)) pos++; else backtrack();
             break;
            case opcodes.BOL:
             if(pos > 0 && s[pos - 1] != 10) backtrack(); break;
            case opcodes.EOL:
             if(pos < s.length && s[pos] != 10) backtrack(); break;
            case opcodes.WORDBOUNDARY:
             if(pos == 0){
              if(pos === s.length){prefix_match(); break;}
              if(is_word_letter(s[0])) break;
              backtrack();
             }
             else if(pos === s.length){
              if(is_word_letter(s[pos - 1])) break;
              backtrack();
             }
             else{
              if(is_word_letter(s[pos - 1]) != is_word_letter(s[pos])) break;
              backtrack();
             }
             break;
            case opcodes.BEGGROUP:
             group = groups[uarg];
             push({undo: {obj: group, prop: "start", value: group.start}});
             group.start = pos;
             break;
            case opcodes.ENDGROUP:
             group = groups[uarg];
             push({undo: {obj: group, prop: "end", value: group.end}});
             group.end = pos;
             break;
            case opcodes.REFGROUP:
             group = groups[uarg];
             if(group.start < 0 || group.end < 0){backtrack(); break;}
             for(var i = group.start; i < group.end; i++){
              if(pos === s.length){prefix_match(); break;}
              if(s[i] != s[pos]){backtrack(); break;}
              pos++;
             }
             break;
            case opcodes.SIMPLEOPT:
             if(in_bitset(cpool[uarg], c)) pos++; break;
            case opcodes.SIMPLESTAR:
             while(in_bitset(cpool[uarg], c)) c = s[++pos]; break;
            case opcodes.SIMPLEPLUS:
             if(pos === s.length){prefix_match(); break;}
             if(in_bitset(cpool[uarg], c))
              do c = s[++pos];while(in_bitset(cpool[uarg], c));
             else
              backtrack();
             break;
            case opcodes.ACCEPT: return accept();
            case opcodes.GOTO:
             pc = pc + sarg; break;
            case opcodes.PUSHBACK:
             push({pos: {pc: pc + sarg, txt: pos}}); break;
            case opcodes.SETMARK:
             push
              ({undo: {obj: re_register, prop: uarg, value: re_register[uarg]}});
             re_register[uarg] = pos;
             break;
            case opcodes.CHECKPROGRESS:
             if(re_register[uarg] === pos) backtrack(); break;
            default: throw new Error("Invalid bytecode");
          }
         }
         return 0;
        }
        return re_match_impl;
       }
       ();
   function re_partial_match(re, s, pos){
    if(pos < 0 || pos > caml_ml_string_length(s))
     caml_invalid_argument("Str.partial_match");
    var res = re_match(re, s, pos, 1);
    return res ? res : [0];
   }
   function re_replacement_text(repl, groups, orig){
    var
     repl = caml_jsbytes_of_string(repl),
     len = repl.length,
     orig = caml_jsbytes_of_string(orig),
     res = "",
     n = 0,
     cur,
     start,
     end,
     c;
    while(n < len){
     cur = repl.charAt(n++);
     if(cur != "\\")
      res += cur;
     else{
      if(n == len) caml_failwith("Str.replace: illegal backslash sequence");
      cur = repl.charAt(n++);
      switch(cur){
        case "\\":
         res += cur; break;
        case "0":
        case "1":
        case "2":
        case "3":
        case "4":
        case "5":
        case "6":
        case "7":
        case "8":
        case "9":
         c = + cur;
         if(c * 2 >= groups.length - 1)
          caml_failwith("Str.replace: reference to unmatched group");
         start = caml_array_get(groups, c * 2);
         end = caml_array_get(groups, c * 2 + 1);
         if(start == - 1)
          caml_failwith("Str.replace: reference to unmatched group");
         res += orig.slice(start, end);
         break;
        default: res += "\\" + cur;
      }
     }
    }
    return caml_string_of_jsbytes(res);
   }
   function re_search_backward(re, s, pos){
    if(pos < 0 || pos > caml_ml_string_length(s))
     caml_invalid_argument("Str.search_backward");
    while(pos >= 0){
     var res = re_match(re, s, pos, 0);
     if(res) return res;
     pos--;
    }
    return [0];
   }
   function re_search_forward(re, s, pos){
    if(pos < 0 || pos > caml_ml_string_length(s))
     caml_invalid_argument("Str.search_forward");
    while(pos <= caml_ml_string_length(s)){
     var res = re_match(re, s, pos, 0);
     if(res) return res;
     pos++;
    }
    return [0];
   }
   function re_string_match(re, s, pos){
    if(pos < 0 || pos > caml_ml_string_length(s))
     caml_invalid_argument("Str.string_match");
    var res = re_match(re, s, pos, 0);
    return res ? res : [0];
   }
   function set_digit_nat(nat, ofs, digit){nat.data[ofs] = digit; return 0;}
   function set_digit_nat_native(nat, ofs, digit){nat.data[ofs] = digit; return 0;
   }
   function square_nat(nat1, ofs1, len1, nat2, ofs2, len2){
    var carry = 0;
    carry += add_nat(nat1, ofs1, len1, nat1, ofs1, len1, 0);
    carry += mult_nat(nat1, ofs1, len1, nat2, ofs2, len2, nat2, ofs2, len2);
    return carry;
   }
   function caml_setup_uncaught_exception_handler(){
    var process = globalThis.process;
    if(process && process.on)
     process.on
      ("uncaughtException",
       function(err, origin){
        caml_fatal_uncaught_exception(err);
        process.exit(2);
       });
    else if(globalThis.addEventListener)
     globalThis.addEventListener
      ("error",
       function(event){
        if(event.error) caml_fatal_uncaught_exception(event.error);
       });
   }
   caml_setup_uncaught_exception_handler();
   globalThis.jsoo_runtime =
    {ml_canvas_get_current_timestamp: ml_canvas_get_current_timestamp,
     ml_canvas_get_canvas: ml_canvas_get_canvas,
     ml_canvas_stop: ml_canvas_stop,
     ml_canvas_run: ml_canvas_run,
     _ml_canvas_process_event: _ml_canvas_process_event,
     _ml_canvas_mlException: _ml_canvas_mlException,
     _ml_canvas_mlContinuation: _ml_canvas_mlContinuation,
     _ml_canvas_mlProcessEvent: _ml_canvas_mlProcessEvent,
     ml_canvas_init: ml_canvas_init,
     ml_canvas_key_of_int: ml_canvas_key_of_int,
     ml_canvas_int_of_key: ml_canvas_int_of_key,
     ml_canvas_export_png: ml_canvas_export_png,
     ml_canvas_import_png: ml_canvas_import_png,
     ml_canvas_put_image_data: ml_canvas_put_image_data,
     ml_canvas_get_image_data: ml_canvas_get_image_data,
     ml_canvas_put_pixel: ml_canvas_put_pixel,
     ml_canvas_get_pixel: ml_canvas_get_pixel,
     ml_canvas_blit: ml_canvas_blit,
     ml_canvas_stroke_text: ml_canvas_stroke_text,
     ml_canvas_fill_text: ml_canvas_fill_text,
     ml_canvas_stroke_rect: ml_canvas_stroke_rect,
     ml_canvas_fill_rect: ml_canvas_fill_rect,
     ml_canvas_clip_path: ml_canvas_clip_path,
     ml_canvas_clip: ml_canvas_clip,
     ml_canvas_stroke_path: ml_canvas_stroke_path,
     ml_canvas_stroke: ml_canvas_stroke,
     ml_canvas_fill_path: ml_canvas_fill_path,
     ml_canvas_fill: ml_canvas_fill,
     ml_canvas_ellipse: ml_canvas_ellipse,
     ml_canvas_rect: ml_canvas_rect,
     ml_canvas_bezier_curve_to: ml_canvas_bezier_curve_to,
     ml_canvas_quadratic_curve_to: ml_canvas_quadratic_curve_to,
     ml_canvas_arc_to: ml_canvas_arc_to,
     ml_canvas_arc: ml_canvas_arc,
     ml_canvas_line_to: ml_canvas_line_to,
     ml_canvas_move_to: ml_canvas_move_to,
     ml_canvas_close_path: ml_canvas_close_path,
     ml_canvas_clear_path: ml_canvas_clear_path,
     ml_canvas_set_font: ml_canvas_set_font,
     ml_canvas_set_shadow_offset: ml_canvas_set_shadow_offset,
     ml_canvas_get_shadow_offset: ml_canvas_get_shadow_offset,
     ml_canvas_set_shadow_blur: ml_canvas_set_shadow_blur,
     ml_canvas_get_shadow_blur: ml_canvas_get_shadow_blur,
     ml_canvas_set_shadow_color: ml_canvas_set_shadow_color,
     ml_canvas_get_shadow_color: ml_canvas_get_shadow_color,
     ml_canvas_set_global_composite_operation:
     ml_canvas_set_global_composite_operation,
     ml_canvas_get_global_composite_operation:
     ml_canvas_get_global_composite_operation,
     ml_canvas_get_fill_style: ml_canvas_get_fill_style,
     ml_canvas_set_fill_style: ml_canvas_set_fill_style,
     ml_canvas_set_fill_pattern: ml_canvas_set_fill_pattern,
     ml_canvas_set_fill_gradient: ml_canvas_set_fill_gradient,
     ml_canvas_set_global_alpha: ml_canvas_set_global_alpha,
     ml_canvas_get_global_alpha: ml_canvas_get_global_alpha,
     ml_canvas_set_fill_color: ml_canvas_set_fill_color,
     ml_canvas_get_fill_color: ml_canvas_get_fill_color,
     ml_canvas_get_stroke_style: ml_canvas_get_stroke_style,
     ml_canvas_set_stroke_style: ml_canvas_set_stroke_style,
     ml_canvas_set_stroke_pattern: ml_canvas_set_stroke_pattern,
     ml_canvas_set_stroke_gradient: ml_canvas_set_stroke_gradient,
     ml_canvas_set_stroke_color: ml_canvas_set_stroke_color,
     ml_canvas_get_stroke_color: ml_canvas_get_stroke_color,
     ml_canvas_set_miter_limit: ml_canvas_set_miter_limit,
     ml_canvas_get_miter_limit: ml_canvas_get_miter_limit,
     ml_canvas_set_line_join: ml_canvas_set_line_join,
     ml_canvas_get_line_join: ml_canvas_get_line_join,
     ml_canvas_set_line_dash: ml_canvas_set_line_dash,
     ml_canvas_get_line_dash: ml_canvas_get_line_dash,
     ml_canvas_set_line_dash_offset: ml_canvas_set_line_dash_offset,
     ml_canvas_get_line_dash_offset: ml_canvas_get_line_dash_offset,
     ml_canvas_set_line_cap: ml_canvas_set_line_cap,
     ml_canvas_get_line_cap: ml_canvas_get_line_cap,
     ml_canvas_set_line_width: ml_canvas_set_line_width,
     ml_canvas_get_line_width: ml_canvas_get_line_width,
     _int_of_color: _int_of_color,
     _color_of_int: _color_of_int,
     ml_canvas_restore: ml_canvas_restore,
     ml_canvas_save: ml_canvas_save,
     ml_canvas_rotate: ml_canvas_rotate,
     ml_canvas_shear: ml_canvas_shear,
     ml_canvas_scale: ml_canvas_scale,
     ml_canvas_translate: ml_canvas_translate,
     ml_canvas_transform: ml_canvas_transform,
     ml_canvas_set_transform: ml_canvas_set_transform,
     ml_canvas_set_position: ml_canvas_set_position,
     ml_canvas_get_position: ml_canvas_get_position,
     ml_canvas_set_size: ml_canvas_set_size,
     ml_canvas_get_size: ml_canvas_get_size,
     ml_canvas_get_id: ml_canvas_get_id,
     ml_canvas_commit: ml_canvas_commit,
     ml_canvas_close: ml_canvas_close,
     ml_canvas_hide: ml_canvas_hide,
     ml_canvas_show: ml_canvas_show,
     ml_canvas_create_offscreen_from_png: ml_canvas_create_offscreen_from_png,
     ml_canvas_create_offscreen_from_image_data:
     ml_canvas_create_offscreen_from_image_data,
     ml_canvas_create_offscreen: ml_canvas_create_offscreen,
     ml_canvas_create_onscreen: ml_canvas_create_onscreen,
     _ml_canvas_decorate: _ml_canvas_decorate,
     _next_id: _next_id,
     ml_canvas_compare: ml_canvas_compare,
     ml_canvas_hash: ml_canvas_hash,
     ml_canvas_pattern_create: ml_canvas_pattern_create,
     ml_canvas_gradient_add_color_stop: ml_canvas_gradient_add_color_stop,
     ml_canvas_gradient_create_conic: ml_canvas_gradient_create_conic,
     ml_canvas_gradient_create_radial: ml_canvas_gradient_create_radial,
     ml_canvas_gradient_create_linear: ml_canvas_gradient_create_linear,
     ml_canvas_path_add_transformed: ml_canvas_path_add_transformed,
     ml_canvas_path_add: ml_canvas_path_add,
     ml_canvas_path_ellipse: ml_canvas_path_ellipse,
     ml_canvas_path_rect: ml_canvas_path_rect,
     ml_canvas_path_bezier_curve_to: ml_canvas_path_bezier_curve_to,
     ml_canvas_path_quadratic_curve_to: ml_canvas_path_quadratic_curve_to,
     ml_canvas_path_arc_to: ml_canvas_path_arc_to,
     ml_canvas_path_arc: ml_canvas_path_arc,
     ml_canvas_path_line_to: ml_canvas_path_line_to,
     ml_canvas_path_move_to: ml_canvas_path_move_to,
     ml_canvas_path_close: ml_canvas_path_close,
     ml_canvas_path_create: ml_canvas_path_create,
     ml_canvas_image_data_export_png: ml_canvas_image_data_export_png,
     ml_canvas_image_data_import_png: ml_canvas_image_data_import_png,
     ml_canvas_image_data_put_pixel: ml_canvas_image_data_put_pixel,
     ml_canvas_image_data_get_pixel: ml_canvas_image_data_get_pixel,
     ml_canvas_image_data_blit: ml_canvas_image_data_blit,
     ml_canvas_image_data_sub: ml_canvas_image_data_sub,
     _ml_canvas_adjust_blit_info: _ml_canvas_adjust_blit_info,
     ml_canvas_image_data_fill: ml_canvas_image_data_fill,
     ml_canvas_image_data_get_size: ml_canvas_image_data_get_size,
     ml_canvas_image_data_create_from_png:
     ml_canvas_image_data_create_from_png,
     _ml_canvas_surface_of_ba: _ml_canvas_surface_of_ba,
     _ml_canvas_ba_of_img: _ml_canvas_ba_of_img,
     _ml_canvas_image_of_png_file: _ml_canvas_image_of_png_file,
     _frame_handler: _frame_handler,
     _resize_handler: _resize_handler,
     _move_handler: _move_handler,
     _up_handler: _up_handler,
     _surface_down_handler: _surface_down_handler,
     _header_down_handler: _header_down_handler,
     _key_up_handler: _key_up_handler,
     _key_down_handler: _key_down_handler,
     _make_key_event: _make_key_event,
     _event_canvas_scale: _event_canvas_scale,
     _resize: _resize,
     _move: _move,
     _focus: _focus,
     _internal_ctxt: _internal_ctxt,
     _internal_canvas: _internal_canvas,
     _ml_canvas_valid_canvas_size: _ml_canvas_valid_canvas_size,
     _ml_canvas_ensure_initialized: _ml_canvas_ensure_initialized,
     _ml_canvas_initialized: _ml_canvas_initialized,
     Compop_val: Compop_val,
     Val_compop: Val_compop,
     Cap_type_val: Cap_type_val,
     Val_cap_type: Val_cap_type,
     Join_type_val: Join_type_val,
     Val_join_type: Val_join_type,
     Slant_val: Slant_val,
     Draw_style_val: Draw_style_val,
     Val_draw_style: Val_draw_style,
     Repeat_val: Repeat_val,
     Val_repeat: Val_repeat,
     Val_button_state: Val_button_state,
     Val_button: Val_button,
     Val_key_state: Val_key_state,
     Key_code_val: Key_code_val,
     Val_key_code: Val_key_code,
     Val_focus_in_out: Val_focus_in_out,
     Optional_val: Optional_val,
     Optional_bool_val: Optional_bool_val,
     COMPOP_TAG: COMPOP_TAG,
     CAP_TYPE_TAG: CAP_TYPE_TAG,
     JOIN_TYPE_TAG: JOIN_TYPE_TAG,
     SLANT_TAG: SLANT_TAG,
     REPEAT_TAG: REPEAT_TAG,
     STYLE_TAG: STYLE_TAG,
     EVENT_TAG: EVENT_TAG,
     BUTTON_STATE_TAG: BUTTON_STATE_TAG,
     BUTTON_TAG: BUTTON_TAG,
     KEY_STATE_TAG: KEY_STATE_TAG,
     KEY_TAG: KEY_TAG,
     FOCUS_TAG: FOCUS_TAG,
     keyname_to_keycode: keyname_to_keycode,
     BUTTON_STATE: BUTTON_STATE,
     BUTTON: BUTTON,
     KEY_STATE: KEY_STATE,
     KEY: KEY,
     FOCUS: FOCUS,
     SLANT: SLANT,
     caml_runtime_events_read_poll: caml_runtime_events_read_poll,
     caml_runtime_events_free_cursor: caml_runtime_events_free_cursor,
     caml_runtime_events_create_cursor: caml_runtime_events_create_cursor,
     caml_ml_runtime_events_resume: caml_ml_runtime_events_resume,
     caml_ml_runtime_events_pause: caml_ml_runtime_events_pause,
     caml_ml_runtime_events_start: caml_ml_runtime_events_start,
     caml_runtime_events_user_resolve: caml_runtime_events_user_resolve,
     caml_runtime_events_user_write: caml_runtime_events_user_write,
     caml_runtime_events_user_register: caml_runtime_events_user_register,
     caml_custom_event_index: caml_custom_event_index,
     caml_decompress_input: caml_decompress_input,
     jsoo_effect_not_supported: jsoo_effect_not_supported,
     caml_ml_condition_signal: caml_ml_condition_signal,
     caml_ml_condition_broadcast: caml_ml_condition_broadcast,
     caml_ml_condition_wait: caml_ml_condition_wait,
     caml_ml_condition_new: caml_ml_condition_new,
     caml_get_continuation_callstack: caml_get_continuation_callstack,
     caml_continuation_use_and_update_handler_noexc:
     caml_continuation_use_and_update_handler_noexc,
     caml_continuation_use_noexc: caml_continuation_use_noexc,
     caml_alloc_stack: caml_alloc_stack,
     caml_ml_mutex_unlock: caml_ml_mutex_unlock,
     caml_ml_mutex_try_lock: caml_ml_mutex_try_lock,
     caml_ml_mutex_lock: caml_ml_mutex_lock,
     caml_ml_mutex_new: caml_ml_mutex_new,
     MlMutex: MlMutex,
     caml_lxm_next: caml_lxm_next,
     caml_ml_domain_cpu_relax: caml_ml_domain_cpu_relax,
     caml_ml_domain_id: caml_ml_domain_id,
     caml_domain_spawn: caml_domain_spawn,
     caml_domain_id: caml_domain_id,
     caml_recommended_domain_count: caml_recommended_domain_count,
     caml_ml_domain_set_name: caml_ml_domain_set_name,
     caml_ml_domain_unique_token: caml_ml_domain_unique_token,
     caml_atomic_make_contended: caml_atomic_make_contended,
     caml_atomic_exchange: caml_atomic_exchange,
     caml_atomic_fetch_add: caml_atomic_fetch_add,
     caml_atomic_cas: caml_atomic_cas,
     caml_atomic_load: caml_atomic_load,
     caml_domain_dls_get: caml_domain_dls_get,
     caml_domain_dls_set: caml_domain_dls_set,
     caml_domain_dls: caml_domain_dls,
     caml_ephe_check_data: caml_ephe_check_data,
     caml_ephe_unset_data: caml_ephe_unset_data,
     caml_ephe_set_data: caml_ephe_set_data,
     caml_ephe_get_data_copy: caml_ephe_get_data_copy,
     caml_ephe_get_data: caml_ephe_get_data,
     caml_ephe_blit_data: caml_ephe_blit_data,
     caml_ephe_blit_key: caml_ephe_blit_key,
     caml_ephe_check_key: caml_ephe_check_key,
     caml_ephe_get_key_copy: caml_ephe_get_key_copy,
     caml_ephe_get_key: caml_ephe_get_key,
     caml_weak_set: caml_weak_set,
     caml_weak_create: caml_weak_create,
     caml_ephe_create: caml_ephe_create,
     caml_ephe_unset_key: caml_ephe_unset_key,
     caml_ephe_set_key: caml_ephe_set_key,
     caml_ephe_data_offset: caml_ephe_data_offset,
     caml_ephe_key_offset: caml_ephe_key_offset,
     caml_unix_inet_addr_of_string: caml_unix_inet_addr_of_string,
     caml_unix_findclose: caml_unix_findclose,
     caml_unix_findnext: caml_unix_findnext,
     caml_unix_findfirst: caml_unix_findfirst,
     caml_unix_rewinddir: caml_unix_rewinddir,
     caml_unix_closedir: caml_unix_closedir,
     caml_unix_readdir: caml_unix_readdir,
     caml_unix_opendir: caml_unix_opendir,
     caml_unix_has_symlink: caml_unix_has_symlink,
     caml_unix_getpwuid: caml_unix_getpwuid,
     caml_unix_getuid: caml_unix_getuid,
     caml_unix_unlink: caml_unix_unlink,
     caml_unix_readlink: caml_unix_readlink,
     caml_unix_symlink: caml_unix_symlink,
     caml_unix_rmdir: caml_unix_rmdir,
     caml_unix_mkdir: caml_unix_mkdir,
     caml_unix_lstat_64: caml_unix_lstat_64,
     caml_unix_lstat: caml_unix_lstat,
     caml_unix_stat_64: caml_unix_stat_64,
     caml_unix_stat: caml_unix_stat,
     make_unix_err_args: make_unix_err_args,
     caml_unix_isatty: caml_unix_isatty,
     caml_unix_filedescr_of_fd: caml_unix_filedescr_of_fd,
     caml_unix_cleanup: caml_unix_cleanup,
     caml_unix_startup: caml_unix_startup,
     caml_unix_mktime: caml_unix_mktime,
     caml_unix_localtime: caml_unix_localtime,
     caml_unix_gmtime: caml_unix_gmtime,
     caml_unix_time: caml_unix_time,
     caml_unix_gettimeofday: caml_unix_gettimeofday,
     caml_str_initialize: caml_str_initialize,
     re_replacement_text: re_replacement_text,
     re_partial_match: re_partial_match,
     re_string_match: re_string_match,
     re_search_backward: re_search_backward,
     re_search_forward: re_search_forward,
     re_match: re_match,
     caml_sys_is_regular_file: caml_sys_is_regular_file,
     caml_spacetime_only_works_for_native_code:
     caml_spacetime_only_works_for_native_code,
     caml_register_channel_for_spacetime: caml_register_channel_for_spacetime,
     caml_sys_const_naked_pointers_checked:
     caml_sys_const_naked_pointers_checked,
     caml_spacetime_enabled: caml_spacetime_enabled,
     caml_ml_runtime_warnings_enabled: caml_ml_runtime_warnings_enabled,
     caml_ml_enable_runtime_warnings: caml_ml_enable_runtime_warnings,
     caml_runtime_warnings: caml_runtime_warnings,
     caml_install_signal_handler: caml_install_signal_handler,
     caml_runtime_parameters: caml_runtime_parameters,
     caml_runtime_variant: caml_runtime_variant,
     caml_sys_isatty: caml_sys_isatty,
     caml_sys_get_config: caml_sys_get_config,
     os_type: os_type,
     caml_sys_const_backend_type: caml_sys_const_backend_type,
     caml_sys_const_ostype_cygwin: caml_sys_const_ostype_cygwin,
     caml_sys_const_ostype_win32: caml_sys_const_ostype_win32,
     caml_sys_const_ostype_unix: caml_sys_const_ostype_unix,
     caml_sys_const_max_wosize: caml_sys_const_max_wosize,
     caml_sys_const_int_size: caml_sys_const_int_size,
     caml_sys_const_word_size: caml_sys_const_word_size,
     caml_sys_const_big_endian: caml_sys_const_big_endian,
     caml_sys_random_seed: caml_sys_random_seed,
     caml_sys_time_include_children: caml_sys_time_include_children,
     caml_sys_time: caml_sys_time,
     caml_sys_system_command: caml_sys_system_command,
     caml_sys_executable_name: caml_sys_executable_name,
     caml_sys_modify_argv: caml_sys_modify_argv,
     caml_sys_argv: caml_sys_argv,
     caml_sys_get_argv: caml_sys_get_argv,
     caml_executable_name: caml_executable_name,
     caml_argv: caml_argv,
     caml_sys_unsafe_getenv: caml_sys_unsafe_getenv,
     caml_sys_getenv: caml_sys_getenv,
     jsoo_sys_getenv: jsoo_sys_getenv,
     caml_set_static_env: caml_set_static_env,
     caml_fatal_uncaught_exception: caml_fatal_uncaught_exception,
     caml_format_exception: caml_format_exception,
     caml_is_special_exception: caml_is_special_exception,
     caml_sys_exit: caml_sys_exit,
     caml_raise_sys_error: caml_raise_sys_error,
     caml_maybe_print_stats: caml_maybe_print_stats,
     caml_is_printable: caml_is_printable,
     caml_get_global_data: caml_get_global_data,
     caml_register_global: caml_register_global,
     caml_build_symbols: caml_build_symbols,
     caml_global_data: caml_global_data,
     caml_named_value: caml_named_value,
     caml_register_named_value: caml_register_named_value,
     caml_named_values: caml_named_values,
     caml_call_gen: caml_call_gen,
     caml_set_parser_trace: caml_set_parser_trace,
     caml_parse_engine: caml_parse_engine,
     caml_parser_trace: caml_parser_trace,
     caml_is_continuation_tag: caml_is_continuation_tag,
     caml_lazy_read_result: caml_lazy_read_result,
     caml_lazy_reset_to_lazy: caml_lazy_reset_to_lazy,
     caml_lazy_update_to_forward: caml_lazy_update_to_forward,
     caml_lazy_update_to_forcing: caml_lazy_update_to_forcing,
     caml_obj_update_tag: caml_obj_update_tag,
     caml_obj_add_offset: caml_obj_add_offset,
     caml_obj_reachable_words: caml_obj_reachable_words,
     caml_obj_set_raw_field: caml_obj_set_raw_field,
     caml_obj_raw_field: caml_obj_raw_field,
     caml_fresh_oo_id: caml_fresh_oo_id,
     caml_set_oo_id: caml_set_oo_id,
     caml_oo_last_id: caml_oo_last_id,
     caml_get_public_method: caml_get_public_method,
     caml_lazy_make_forward: caml_lazy_make_forward,
     caml_obj_is_shared: caml_obj_is_shared,
     caml_obj_compare_and_swap: caml_obj_compare_and_swap,
     caml_obj_make_forward: caml_obj_make_forward,
     caml_obj_truncate: caml_obj_truncate,
     caml_obj_dup: caml_obj_dup,
     caml_obj_with_tag: caml_obj_with_tag,
     caml_obj_block: caml_obj_block,
     caml_obj_set_tag: caml_obj_set_tag,
     caml_obj_tag: caml_obj_tag,
     caml_obj_is_block: caml_obj_is_block,
     caml_alloc_dummy_infix: caml_alloc_dummy_infix,
     caml_update_dummy: caml_update_dummy,
     deserialize_nat: deserialize_nat,
     serialize_nat: serialize_nat,
     lxor_digit_nat: lxor_digit_nat,
     lor_digit_nat: lor_digit_nat,
     land_digit_nat: land_digit_nat,
     compare_nat_real: compare_nat_real,
     compare_nat: compare_nat,
     compare_digits_nat: compare_digits_nat,
     shift_right_nat: shift_right_nat,
     div_nat: div_nat,
     div_digit_nat: div_digit_nat,
     div_helper: div_helper,
     shift_left_nat: shift_left_nat,
     square_nat: square_nat,
     mult_nat: mult_nat,
     mult_digit_nat: mult_digit_nat,
     sub_nat: sub_nat,
     decr_nat: decr_nat,
     complement_nat: complement_nat,
     add_nat: add_nat,
     incr_nat: incr_nat,
     is_digit_odd: is_digit_odd,
     is_digit_zero: is_digit_zero,
     is_digit_int: is_digit_int,
     num_leading_zero_bits_in_digit: num_leading_zero_bits_in_digit,
     num_digits_nat: num_digits_nat,
     nth_digit_nat_native: nth_digit_nat_native,
     set_digit_nat_native: set_digit_nat_native,
     nth_digit_nat: nth_digit_nat,
     set_digit_nat: set_digit_nat,
     blit_nat: blit_nat,
     set_to_zero_nat: set_to_zero_nat,
     create_nat: create_nat,
     nat_of_array: nat_of_array,
     length_nat: length_nat,
     caml_hash_nat: caml_hash_nat,
     MlNat: MlNat,
     initialize_nat: initialize_nat,
     caml_array_of_bytes: caml_array_of_bytes,
     caml_array_of_string: caml_array_of_string,
     caml_js_to_string: caml_js_to_string,
     caml_to_js_string: caml_to_js_string,
     caml_js_from_string: caml_js_from_string,
     caml_new_string: caml_new_string,
     caml_js_to_byte_string: caml_js_to_byte_string,
     caml_is_ml_string: caml_is_ml_string,
     caml_ml_bytes_content: caml_ml_bytes_content,
     caml_is_ml_bytes: caml_is_ml_bytes,
     caml_bytes_of_jsbytes: caml_bytes_of_jsbytes,
     caml_string_of_jsstring: caml_string_of_jsstring,
     caml_jsstring_of_string: caml_jsstring_of_string,
     caml_jsbytes_of_string: caml_jsbytes_of_string,
     caml_string_of_jsbytes: caml_string_of_jsbytes,
     caml_bytes_of_string: caml_bytes_of_string,
     caml_string_of_bytes: caml_string_of_bytes,
     caml_string_lessthan: caml_string_lessthan,
     caml_string_lessequal: caml_string_lessequal,
     caml_string_equal: caml_string_equal,
     caml_string_compare: caml_string_compare,
     caml_ml_string_length: caml_ml_string_length,
     caml_string_unsafe_set: caml_string_unsafe_set,
     caml_string_unsafe_get: caml_string_unsafe_get,
     caml_string_concat: caml_string_concat,
     caml_ml_bytes_length: caml_ml_bytes_length,
     caml_blit_string: caml_blit_string,
     caml_blit_bytes: caml_blit_bytes,
     caml_fill_bytes: caml_fill_bytes,
     caml_bytes_greaterthan: caml_bytes_greaterthan,
     caml_string_greaterthan: caml_string_greaterthan,
     caml_bytes_greaterequal: caml_bytes_greaterequal,
     caml_string_greaterequal: caml_string_greaterequal,
     caml_bytes_lessthan: caml_bytes_lessthan,
     caml_bytes_lessequal: caml_bytes_lessequal,
     caml_bytes_notequal: caml_bytes_notequal,
     caml_string_notequal: caml_string_notequal,
     caml_bytes_equal: caml_bytes_equal,
     caml_bytes_compare: caml_bytes_compare,
     caml_bytes_of_array: caml_bytes_of_array,
     caml_string_of_array: caml_string_of_array,
     caml_create_bytes: caml_create_bytes,
     caml_create_string: caml_create_string,
     caml_uint8_array_of_string: caml_uint8_array_of_string,
     caml_uint8_array_of_bytes: caml_uint8_array_of_bytes,
     caml_convert_bytes_to_array: caml_convert_bytes_to_array,
     caml_convert_string_to_bytes: caml_convert_string_to_bytes,
     MlBytes: MlBytes,
     caml_bytes_of_utf16_jsstring: caml_bytes_of_utf16_jsstring,
     caml_bytes_set: caml_bytes_set,
     caml_string_set64: caml_string_set64,
     caml_bytes_set64: caml_bytes_set64,
     caml_string_set32: caml_string_set32,
     caml_bytes_set32: caml_bytes_set32,
     caml_string_set16: caml_string_set16,
     caml_bytes_set16: caml_bytes_set16,
     caml_string_set: caml_string_set,
     caml_bytes_get: caml_bytes_get,
     caml_bytes_get64: caml_bytes_get64,
     caml_string_get64: caml_string_get64,
     caml_bytes_get32: caml_bytes_get32,
     caml_string_get32: caml_string_get32,
     caml_bytes_get16: caml_bytes_get16,
     caml_string_get16: caml_string_get16,
     caml_string_get: caml_string_get,
     caml_bytes_bound_error: caml_bytes_bound_error,
     caml_string_bound_error: caml_string_bound_error,
     caml_bytes_unsafe_set: caml_bytes_unsafe_set,
     caml_bytes_unsafe_get: caml_bytes_unsafe_get,
     jsoo_is_ascii: jsoo_is_ascii,
     caml_utf16_of_utf8: caml_utf16_of_utf8,
     caml_utf8_of_utf16: caml_utf8_of_utf16,
     caml_subarray_to_jsbytes: caml_subarray_to_jsbytes,
     caml_str_repeat: caml_str_repeat,
     caml_md5_bytes: caml_md5_bytes,
     caml_MD5Final: caml_MD5Final,
     caml_MD5Update: caml_MD5Update,
     caml_MD5Init: caml_MD5Init,
     caml_MD5Transform: caml_MD5Transform,
     caml_md5_string: caml_md5_string,
     caml_md5_chan: caml_md5_chan,
     caml_output_value_to_buffer: caml_output_value_to_buffer,
     caml_output_value_to_bytes: caml_output_value_to_bytes,
     caml_output_value_to_string: caml_output_value_to_string,
     caml_output_val: caml_output_val,
     MlObjectTable: MlObjectTable,
     caml_marshal_data_size: caml_marshal_data_size,
     caml_marshal_header_size: caml_marshal_header_size,
     caml_input_value_from_reader: caml_input_value_from_reader,
     caml_custom_ops: caml_custom_ops,
     caml_nativeint_unmarshal: caml_nativeint_unmarshal,
     caml_int32_unmarshal: caml_int32_unmarshal,
     caml_int64_marshal: caml_int64_marshal,
     caml_int64_unmarshal: caml_int64_unmarshal,
     caml_input_value_from_bytes: caml_input_value_from_bytes,
     caml_input_value_from_string: caml_input_value_from_string,
     caml_float_of_bytes: caml_float_of_bytes,
     BigStringReader: BigStringReader,
     MlStringReader: MlStringReader,
     UInt8ArrayReader: UInt8ArrayReader,
     caml_marshal_constants: caml_marshal_constants,
     caml_new_lex_engine: caml_new_lex_engine,
     caml_lex_engine: caml_lex_engine,
     caml_lex_array: caml_lex_array,
     caml_js_error_of_exception: caml_js_error_of_exception,
     caml_xmlhttprequest_create: caml_xmlhttprequest_create,
     caml_js_get_console: caml_js_get_console,
     caml_js_html_entities: caml_js_html_entities,
     caml_js_html_escape: caml_js_html_escape,
     caml_js_on_ie: caml_js_on_ie,
     caml_js_object: caml_js_object,
     caml_pure_js_expr: caml_pure_js_expr,
     caml_js_expr: caml_js_expr,
     caml_js_eval_string: caml_js_eval_string,
     caml_js_strict_equals: caml_js_strict_equals,
     caml_js_equals: caml_js_equals,
     caml_js_function_arity: caml_js_function_arity,
     caml_js_wrap_meth_callback_unsafe: caml_js_wrap_meth_callback_unsafe,
     caml_js_wrap_meth_callback_strict: caml_js_wrap_meth_callback_strict,
     caml_js_wrap_meth_callback_arguments:
     caml_js_wrap_meth_callback_arguments,
     caml_js_wrap_meth_callback: caml_js_wrap_meth_callback,
     caml_js_wrap_callback_unsafe: caml_js_wrap_callback_unsafe,
     caml_js_wrap_callback_strict: caml_js_wrap_callback_strict,
     caml_js_wrap_callback_arguments: caml_js_wrap_callback_arguments,
     caml_js_wrap_callback: caml_js_wrap_callback,
     caml_ojs_new_arr: caml_ojs_new_arr,
     caml_js_new: caml_js_new,
     caml_js_meth_call: caml_js_meth_call,
     caml_js_fun_call: caml_js_fun_call,
     caml_js_call: caml_js_call,
     caml_js_var: caml_js_var,
     caml_list_to_js_array: caml_list_to_js_array,
     caml_list_of_js_array: caml_list_of_js_array,
     caml_js_to_array: caml_js_to_array,
     caml_js_from_array: caml_js_from_array,
     caml_js_to_int32: caml_js_to_int32,
     caml_js_to_float: caml_js_to_float,
     caml_js_from_float: caml_js_from_float,
     caml_js_to_bool: caml_js_to_bool,
     caml_js_from_bool: caml_js_from_bool,
     caml_js_error_option_of_exception: caml_js_error_option_of_exception,
     caml_exn_with_js_backtrace: caml_exn_with_js_backtrace,
     caml_maybe_attach_backtrace: caml_maybe_attach_backtrace,
     caml_wrap_exception: caml_wrap_exception,
     caml_jsoo_flags_effects: caml_jsoo_flags_effects,
     caml_jsoo_flags_use_js_string: caml_jsoo_flags_use_js_string,
     caml_is_js: caml_is_js,
     caml_callback: caml_callback,
     caml_trampoline_return: caml_trampoline_return,
     caml_trampoline: caml_trampoline,
     caml_js_typeof: caml_js_typeof,
     caml_js_instanceof: caml_js_instanceof,
     caml_js_delete: caml_js_delete,
     caml_js_get: caml_js_get,
     caml_js_set: caml_js_set,
     caml_js_pure_expr: caml_js_pure_expr,
     caml_ml_set_buffered: caml_ml_set_buffered,
     caml_ml_is_buffered: caml_ml_is_buffered,
     caml_ml_output_int: caml_ml_output_int,
     caml_ml_pos_out_64: caml_ml_pos_out_64,
     caml_ml_pos_out: caml_ml_pos_out,
     caml_pos_out: caml_pos_out,
     caml_ml_seek_out_64: caml_ml_seek_out_64,
     caml_ml_seek_out: caml_ml_seek_out,
     caml_seek_out: caml_seek_out,
     caml_output_value: caml_output_value,
     caml_ml_output_char: caml_ml_output_char,
     caml_ml_output: caml_ml_output,
     caml_ml_output_bigarray: caml_ml_output_bigarray,
     caml_ml_output_bytes: caml_ml_output_bytes,
     caml_ml_output_ta: caml_ml_output_ta,
     caml_ml_flush: caml_ml_flush,
     caml_ml_input_scan_line: caml_ml_input_scan_line,
     caml_ml_pos_in_64: caml_ml_pos_in_64,
     caml_ml_pos_in: caml_ml_pos_in,
     caml_pos_in: caml_pos_in,
     caml_ml_seek_in_64: caml_ml_seek_in_64,
     caml_ml_seek_in: caml_ml_seek_in,
     caml_seek_in: caml_seek_in,
     caml_ml_input_int: caml_ml_input_int,
     caml_ml_input_char: caml_ml_input_char,
     caml_input_value_to_outside_heap: caml_input_value_to_outside_heap,
     caml_input_value: caml_input_value,
     caml_ml_input_block: caml_ml_input_block,
     caml_ml_input_bigarray: caml_ml_input_bigarray,
     caml_ml_input: caml_ml_input,
     caml_refill: caml_refill,
     caml_ml_set_channel_refill: caml_ml_set_channel_refill,
     caml_ml_set_channel_output: caml_ml_set_channel_output,
     caml_ml_channel_size_64: caml_ml_channel_size_64,
     caml_ml_channel_size: caml_ml_channel_size,
     caml_ml_close_channel: caml_ml_close_channel,
     caml_ml_set_binary_mode: caml_ml_set_binary_mode,
     caml_channel_descriptor: caml_channel_descriptor,
     caml_ml_open_descriptor_in: caml_ml_open_descriptor_in,
     caml_ml_open_descriptor_out: caml_ml_open_descriptor_out,
     caml_ml_out_channels_list: caml_ml_out_channels_list,
     caml_ml_channel_get: caml_ml_channel_get,
     caml_ml_channel_restore: caml_ml_channel_restore,
     caml_ml_channel_redirect: caml_ml_channel_redirect,
     caml_ml_channels: caml_ml_channels,
     caml_ml_set_channel_name: caml_ml_set_channel_name,
     caml_sys_open: caml_sys_open,
     caml_sys_close: caml_sys_close,
     caml_sys_fds: caml_sys_fds,
     caml_int64_bswap: caml_int64_bswap,
     caml_int32_bswap: caml_int32_bswap,
     caml_bswap16: caml_bswap16,
     caml_mod: caml_mod,
     caml_div: caml_div,
     caml_mul: caml_mul,
     caml_int_of_string: caml_int_of_string,
     caml_parse_digit: caml_parse_digit,
     caml_parse_sign_and_base: caml_parse_sign_and_base,
     caml_format_int: caml_format_int,
     caml_int64_hash: caml_int64_hash,
     caml_int64_to_bytes: caml_int64_to_bytes,
     caml_int64_of_bytes: caml_int64_of_bytes,
     caml_int64_hi32: caml_int64_hi32,
     caml_int64_lo32: caml_int64_lo32,
     caml_int64_create_lo_hi: caml_int64_create_lo_hi,
     caml_int64_create_lo_mi_hi: caml_int64_create_lo_mi_hi,
     caml_int64_of_string: caml_int64_of_string,
     caml_int64_format: caml_int64_format,
     caml_int64_of_float: caml_int64_of_float,
     caml_int64_to_float: caml_int64_to_float,
     caml_int64_to_int32: caml_int64_to_int32,
     caml_int64_of_int32: caml_int64_of_int32,
     caml_int64_mod: caml_int64_mod,
     caml_int64_div: caml_int64_div,
     caml_int64_shift_right: caml_int64_shift_right,
     caml_int64_shift_right_unsigned: caml_int64_shift_right_unsigned,
     caml_int64_shift_left: caml_int64_shift_left,
     caml_int64_xor: caml_int64_xor,
     caml_int64_or: caml_int64_or,
     caml_int64_and: caml_int64_and,
     caml_int64_is_negative: caml_int64_is_negative,
     caml_int64_is_zero: caml_int64_is_zero,
     caml_int64_mul: caml_int64_mul,
     caml_int64_sub: caml_int64_sub,
     caml_int64_add: caml_int64_add,
     caml_int64_neg: caml_int64_neg,
     caml_int64_compare: caml_int64_compare,
     caml_int64_ult: caml_int64_ult,
     MlInt64: MlInt64,
     caml_int64_offset: caml_int64_offset,
     caml_float_of_string: caml_float_of_string,
     caml_format_float: caml_format_float,
     caml_fma_float: caml_fma_float,
     caml_erfc_float: caml_erfc_float,
     caml_erf_float: caml_erf_float,
     caml_cbrt_float: caml_cbrt_float,
     caml_round_float: caml_round_float,
     caml_atanh_float: caml_atanh_float,
     caml_tanh_float: caml_tanh_float,
     caml_asinh_float: caml_asinh_float,
     caml_sinh_float: caml_sinh_float,
     caml_acosh_float: caml_acosh_float,
     caml_cosh_float: caml_cosh_float,
     caml_log10_float: caml_log10_float,
     caml_hypot_float: caml_hypot_float,
     caml_log2_float: caml_log2_float,
     caml_log1p_float: caml_log1p_float,
     caml_exp2_float: caml_exp2_float,
     caml_expm1_float: caml_expm1_float,
     caml_signbit_float: caml_signbit_float,
     caml_copysign_float: caml_copysign_float,
     caml_float_compare: caml_float_compare,
     caml_frexp_float: caml_frexp_float,
     caml_ldexp_float: caml_ldexp_float,
     caml_modf_float: caml_modf_float,
     caml_classify_float: caml_classify_float,
     caml_int32_float_of_bits: caml_int32_float_of_bits,
     caml_trunc_float: caml_trunc_float,
     caml_nextafter_float: caml_nextafter_float,
     caml_int64_float_of_bits: caml_int64_float_of_bits,
     caml_hexstring_of_float: caml_hexstring_of_float,
     caml_int32_bits_of_float: caml_int32_bits_of_float,
     caml_int64_bits_of_float: caml_int64_bits_of_float,
     jsoo_floor_log2: jsoo_floor_log2,
     caml_string_hash: caml_string_hash,
     caml_hash: caml_hash,
     caml_hash_mix_string: caml_hash_mix_string,
     caml_hash_mix_bytes: caml_hash_mix_bytes,
     caml_hash_mix_bytes_arr: caml_hash_mix_bytes_arr,
     caml_hash_mix_jsbytes: caml_hash_mix_jsbytes,
     caml_hash_mix_int64: caml_hash_mix_int64,
     caml_hash_mix_float: caml_hash_mix_float,
     caml_hash_mix_final: caml_hash_mix_final,
     caml_hash_mix_int: caml_hash_mix_int,
     caml_gr_close_subwindow: caml_gr_close_subwindow,
     caml_gr_open_subwindow: caml_gr_open_subwindow,
     caml_gr_window_id: caml_gr_window_id,
     caml_gr_display_mode: caml_gr_display_mode,
     caml_gr_remember_mode: caml_gr_remember_mode,
     caml_gr_synchronize: caml_gr_synchronize,
     caml_gr_wait_event: caml_gr_wait_event,
     caml_gr_sigio_signal: caml_gr_sigio_signal,
     caml_gr_sigio_handler: caml_gr_sigio_handler,
     caml_gr_blit_image: caml_gr_blit_image,
     caml_gr_create_image: caml_gr_create_image,
     caml_gr_draw_image: caml_gr_draw_image,
     caml_gr_dump_image: caml_gr_dump_image,
     caml_gr_make_image: caml_gr_make_image,
     caml_gr_text_size: caml_gr_text_size,
     caml_gr_set_text_size: caml_gr_set_text_size,
     caml_gr_set_font: caml_gr_set_font,
     caml_gr_draw_string: caml_gr_draw_string,
     caml_gr_draw_char: caml_gr_draw_char,
     caml_gr_draw_str: caml_gr_draw_str,
     caml_gr_fill_arc: caml_gr_fill_arc,
     caml_gr_fill_poly: caml_gr_fill_poly,
     caml_gr_fill_rect: caml_gr_fill_rect,
     caml_gr_set_line_width: caml_gr_set_line_width,
     caml_gr_draw_arc: caml_gr_draw_arc,
     caml_gr_arc_aux: caml_gr_arc_aux,
     caml_gr_draw_rect: caml_gr_draw_rect,
     caml_gr_lineto: caml_gr_lineto,
     caml_gr_current_y: caml_gr_current_y,
     caml_gr_current_x: caml_gr_current_x,
     caml_gr_moveto: caml_gr_moveto,
     caml_gr_point_color: caml_gr_point_color,
     caml_gr_plot: caml_gr_plot,
     caml_gr_set_color: caml_gr_set_color,
     caml_gr_size_y: caml_gr_size_y,
     caml_gr_size_x: caml_gr_size_x,
     caml_gr_clear_graph: caml_gr_clear_graph,
     caml_gr_resize_window: caml_gr_resize_window,
     caml_gr_set_window_title: caml_gr_set_window_title,
     caml_gr_close_graph: caml_gr_close_graph,
     caml_gr_doc_of_state: caml_gr_doc_of_state,
     caml_gr_state_create: caml_gr_state_create,
     caml_gr_state_init: caml_gr_state_init,
     caml_gr_open_graph: caml_gr_open_graph,
     caml_gr_state_set: caml_gr_state_set,
     caml_gr_state_get: caml_gr_state_get,
     caml_gr_state: caml_gr_state,
     caml_get_major_credit: caml_get_major_credit,
     caml_get_major_bucket: caml_get_major_bucket,
     caml_get_minor_free: caml_get_minor_free,
     caml_gc_minor_words: caml_gc_minor_words,
     caml_gc_major_slice: caml_gc_major_slice,
     caml_gc_huge_fallback_count: caml_gc_huge_fallback_count,
     caml_eventlog_pause: caml_eventlog_pause,
     caml_eventlog_resume: caml_eventlog_resume,
     caml_memprof_discard: caml_memprof_discard,
     caml_memprof_stop: caml_memprof_stop,
     caml_memprof_start: caml_memprof_start,
     caml_final_release: caml_final_release,
     caml_final_register_called_without_value:
     caml_final_register_called_without_value,
     caml_final_register: caml_final_register,
     caml_memprof_set: caml_memprof_set,
     caml_gc_get: caml_gc_get,
     caml_gc_set: caml_gc_set,
     caml_gc_stat: caml_gc_stat,
     caml_gc_quick_stat: caml_gc_quick_stat,
     caml_gc_counters: caml_gc_counters,
     caml_gc_compaction: caml_gc_compaction,
     caml_gc_full_major: caml_gc_full_major,
     caml_gc_major: caml_gc_major,
     caml_gc_minor: caml_gc_minor,
     caml_sys_open_for_node: caml_sys_open_for_node,
     MlNodeFd: MlNodeFd,
     MlNodeDevice: MlNodeDevice,
     fs_node_supported: fs_node_supported,
     MlFakeFd: MlFakeFd,
     MlFakeFd_out: MlFakeFd_out,
     MlFakeFile: MlFakeFile,
     MlFakeDevice: MlFakeDevice,
     caml_read_file_content: caml_read_file_content,
     jsoo_create_file: jsoo_create_file,
     caml_create_file: caml_create_file,
     caml_fs_init: caml_fs_init,
     jsoo_create_file_extern: jsoo_create_file_extern,
     caml_ba_map_file_bytecode: caml_ba_map_file_bytecode,
     caml_ba_map_file: caml_ba_map_file,
     caml_sys_rmdir: caml_sys_rmdir,
     caml_sys_mkdir: caml_sys_mkdir,
     caml_sys_rename: caml_sys_rename,
     caml_sys_is_directory: caml_sys_is_directory,
     caml_sys_remove: caml_sys_remove,
     caml_sys_read_directory: caml_sys_read_directory,
     caml_sys_file_exists: caml_sys_file_exists,
     caml_raise_not_a_dir: caml_raise_not_a_dir,
     caml_raise_no_such_file: caml_raise_no_such_file,
     caml_sys_chdir: caml_sys_chdir,
     caml_sys_getcwd: caml_sys_getcwd,
     caml_unmount: caml_unmount,
     caml_mount_autoload: caml_mount_autoload,
     resolve_fs_device: resolve_fs_device,
     caml_list_mount_point: caml_list_mount_point,
     jsoo_mount_point: jsoo_mount_point,
     caml_make_path: caml_make_path,
     path_is_absolute: path_is_absolute,
     MlFile: MlFile,
     caml_root: caml_root,
     caml_get_root: caml_get_root,
     caml_current_dir: caml_current_dir,
     caml_trailing_slash: caml_trailing_slash,
     caml_finish_formatting: caml_finish_formatting,
     caml_parse_format: caml_parse_format,
     caml_array_bound_error: caml_array_bound_error,
     caml_raise_not_found: caml_raise_not_found,
     caml_raise_zero_divide: caml_raise_zero_divide,
     caml_raise_end_of_file: caml_raise_end_of_file,
     caml_invalid_argument: caml_invalid_argument,
     caml_failwith: caml_failwith,
     caml_raise_with_string: caml_raise_with_string,
     caml_raise_with_args: caml_raise_with_args,
     caml_raise_with_arg: caml_raise_with_arg,
     caml_raise_constant: caml_raise_constant,
     caml_lessthan: caml_lessthan,
     caml_lessequal: caml_lessequal,
     caml_greaterthan: caml_greaterthan,
     caml_greaterequal: caml_greaterequal,
     caml_notequal: caml_notequal,
     caml_equal: caml_equal,
     caml_int_compare: caml_int_compare,
     caml_compare: caml_compare,
     caml_compare_val: caml_compare_val,
     caml_compare_val_number_custom: caml_compare_val_number_custom,
     caml_compare_val_get_custom: caml_compare_val_get_custom,
     caml_compare_val_tag: caml_compare_val_tag,
     caml_bigstring_blit_ba_to_bytes: caml_bigstring_blit_ba_to_bytes,
     caml_bigstring_blit_bytes_to_ba: caml_bigstring_blit_bytes_to_ba,
     caml_bigstring_blit_string_to_ba: caml_bigstring_blit_string_to_ba,
     caml_bigstring_blit_ba_to_ba: caml_bigstring_blit_ba_to_ba,
     caml_bigstring_memcmp: caml_bigstring_memcmp,
     bigstring_of_typed_array: bigstring_of_typed_array,
     bigstring_of_array_buffer: bigstring_of_array_buffer,
     bigstring_to_typed_array: bigstring_to_typed_array,
     bigstring_to_array_buffer: bigstring_to_array_buffer,
     caml_hash_mix_bigstring: caml_hash_mix_bigstring,
     caml_ba_from_typed_array: caml_ba_from_typed_array,
     caml_ba_kind_of_typed_array: caml_ba_kind_of_typed_array,
     caml_ba_to_typed_array: caml_ba_to_typed_array,
     caml_ba_hash: caml_ba_hash,
     caml_ba_create_from: caml_ba_create_from,
     caml_ba_deserialize: caml_ba_deserialize,
     caml_ba_serialize: caml_ba_serialize,
     caml_ba_reshape: caml_ba_reshape,
     caml_ba_slice: caml_ba_slice,
     caml_ba_sub: caml_ba_sub,
     caml_ba_blit: caml_ba_blit,
     caml_ba_fill: caml_ba_fill,
     caml_ba_set_3: caml_ba_set_3,
     caml_ba_set_2: caml_ba_set_2,
     caml_ba_set_1: caml_ba_set_1,
     caml_ba_uint8_set64: caml_ba_uint8_set64,
     caml_ba_uint8_set32: caml_ba_uint8_set32,
     caml_ba_uint8_set16: caml_ba_uint8_set16,
     caml_ba_set_generic: caml_ba_set_generic,
     caml_ba_get_3: caml_ba_get_3,
     caml_ba_get_2: caml_ba_get_2,
     caml_ba_get_1: caml_ba_get_1,
     caml_ba_uint8_get64: caml_ba_uint8_get64,
     caml_ba_uint8_get32: caml_ba_uint8_get32,
     caml_ba_uint8_get16: caml_ba_uint8_get16,
     caml_ba_get_generic: caml_ba_get_generic,
     caml_ba_dim_3: caml_ba_dim_3,
     caml_ba_dim_2: caml_ba_dim_2,
     caml_ba_dim_1: caml_ba_dim_1,
     caml_ba_dim: caml_ba_dim,
     caml_ba_num_dims: caml_ba_num_dims,
     caml_ba_layout: caml_ba_layout,
     caml_ba_kind: caml_ba_kind,
     caml_ba_change_layout: caml_ba_change_layout,
     caml_ba_create: caml_ba_create,
     caml_ba_create_unsafe: caml_ba_create_unsafe,
     caml_ba_compare: caml_ba_compare,
     Ml_Bigarray_c_1_1: Ml_Bigarray_c_1_1,
     Ml_Bigarray: Ml_Bigarray,
     caml_ba_custom_name: caml_ba_custom_name,
     caml_ba_create_buffer: caml_ba_create_buffer,
     caml_ba_get_size_per_element: caml_ba_get_size_per_element,
     caml_ba_get_size: caml_ba_get_size,
     caml_ba_init: caml_ba_init,
     caml_convert_raw_backtrace_slot: caml_convert_raw_backtrace_slot,
     caml_get_current_callstack: caml_get_current_callstack,
     caml_restore_raw_backtrace: caml_restore_raw_backtrace,
     caml_raw_backtrace_slot: caml_raw_backtrace_slot,
     caml_raw_backtrace_next_slot: caml_raw_backtrace_next_slot,
     caml_raw_backtrace_length: caml_raw_backtrace_length,
     caml_convert_raw_backtrace: caml_convert_raw_backtrace,
     caml_record_backtrace: caml_record_backtrace,
     caml_get_exception_raw_backtrace: caml_get_exception_raw_backtrace,
     caml_get_exception_backtrace: caml_get_exception_backtrace,
     caml_backtrace_status: caml_backtrace_status,
     caml_ml_debug_info_status: caml_ml_debug_info_status,
     caml_record_backtrace_flag: caml_record_backtrace_flag,
     caml_floatarray_create: caml_floatarray_create,
     caml_make_float_vect: caml_make_float_vect,
     caml_make_vect: caml_make_vect,
     caml_check_bound: caml_check_bound,
     caml_array_fill: caml_array_fill,
     caml_array_get: caml_array_get,
     caml_array_set: caml_array_set,
     caml_floatarray_blit: caml_floatarray_blit,
     caml_array_blit: caml_array_blit,
     caml_array_concat: caml_array_concat,
     caml_array_append: caml_array_append,
     caml_array_sub: caml_array_sub};
   var
    cst_Assert_failure = "Assert_failure",
    cst_Division_by_zero = "Division_by_zero",
    cst_End_of_file = "End_of_file",
    cst_Failure = "Failure",
    cst_Invalid_argument = "Invalid_argument",
    cst_Match_failure = "Match_failure",
    cst_Not_found = "Not_found",
    cst_Out_of_memory = "Out_of_memory",
    cst_Stack_overflow = "Stack_overflow",
    cst_Sys_blocked_io = "Sys_blocked_io",
    cst_Sys_error = "Sys_error",
    cst_Undefined_recursive_module = "Undefined_recursive_module";
   caml_fs_init();
   caml_register_global(0, [248, cst_Out_of_memory, -1], cst_Out_of_memory);
   caml_register_global(1, [248, cst_Sys_error, -2], cst_Sys_error);
   caml_register_global(2, [248, cst_Failure, -3], cst_Failure);
   caml_register_global
    (3, [248, cst_Invalid_argument, -4], cst_Invalid_argument);
   caml_register_global(4, [248, cst_End_of_file, -5], cst_End_of_file);
   caml_register_global
    (5, [248, cst_Division_by_zero, -6], cst_Division_by_zero);
   caml_register_global(6, [248, cst_Not_found, -7], cst_Not_found);
   caml_register_global(7, [248, cst_Match_failure, -8], cst_Match_failure);
   caml_register_global(8, [248, cst_Stack_overflow, -9], cst_Stack_overflow);
   caml_register_global(9, [248, cst_Sys_blocked_io, -10], cst_Sys_blocked_io);
   caml_register_global
    (10, [248, cst_Assert_failure, -11], cst_Assert_failure);
   caml_register_global
    (11,
     [248, cst_Undefined_recursive_module, -12],
     cst_Undefined_recursive_module);
   return;
  }
  (globalThis));


(function(a){"use strict";var
s="Sys_error",an="Stdlib__Obj",ap="Stdlib__Unit",ay="Stdlib__Nativeint",l="Stdlib__Gc",ax="Stdlib__Stack",r="CamlinternalFormat",R="Stdlib__Genlex",av="Stdlib__Random",q="Stdlib__Pervasives",A="Stack_overflow",ab="Stdlib__ArrayLabels",ae="Stdlib__Either",ai="Stdlib__Printexc",w="Stdlib__Map",z="Stdlib__Arg",Q="Undefined_recursive_module",au="Stdlib__Array",F="Assert_failure",P="CamlinternalFormatBasics",k="Stdlib__Lazy",O="Stdlib__Queue",v="Stdlib__Format",V="Stdlib__In_channel",f="Stdlib__Bool",E="Stdlib__BytesLabels",aF="Stdlib__Bytes",ag="Division_by_zero",ah="Unix",u="End_of_file",N="CamlinternalMod",D="Stdlib__Marshal",aa="React",aE="Out_of_memory",M="Stdlib__Parsing",af="Stdlib__Weak",ad="Not_found",aD="Failure",e="Stdlib__Int",p="Stdlib__StdLabels",d="Stdlib__Oo",K="Stdlib__Bigarray",L="Stdlib__List",$="Stdlib__Ephemeron",at="Stdlib__String",aC="Stdlib__Printf",U="Stdlib",as="Bigarray",am="Stdlib__Callback",T="Stdlib__Filename",al="Stdlib__Hashtbl",j="Invalid_argument",_="Stdlib__Fun",t="Stdlib__Option",y="Stdlib__Lexing",aB="Stdlib__ListLabels",ak="CamlinternalAtomic",aw="Stdlib__Atomic",aj="Stdlib__MoreLabels",Z="Stdlib__Result",i="Std_exit",J="Stdlib__Set",X="OcamlCanvas",Y="Stdlib__Buffer",aA="Match_failure",h="Stdlib__StringLabels",ar="Stdlib__Complex",S="Stdlib__Int64",W="Stdlib__Out_channel",o="Stdlib__Seq",I="UnixLabels",aq="Stdlib__Sys",ac="CamlinternalLazy",H="Sys_blocked_io",x="Stdlib__Float",G="Stdlib__Uchar",g="Stdlib__Scanf",n="CamlinternalOO",az="Stdlib__Digest",m="Stdlib__Stream",C="Stdlib__Char",B="Stdlib__Int32",ao="Dune__exe__Hello",c=a.jsoo_runtime,b=c.caml_get_global_data();b.prim_count=902;b.symbols=[0,[0,I,77],[0,ah,76],[0,Q,11],[0,s,10],[0,H,9],[0,af,56],[0,ap,31],[0,G,26],[0,aq,17],[0,h,70],[0,at,30],[0,m,44],[0,p,72],[0,ax,42],[0,J,40],[0,o,21],[0,g,58],[0,Z,23],[0,av,54],[0,O,43],[0,aC,47],[0,ai,50],[0,q,15],[0,M,39],[0,W,75],[0,t,22],[0,d,61],[0,an,18],[0,ay,37],[0,aj,71],[0,D,32],[0,w,41],[0,aB,68],[0,L,27],[0,y,38],[0,k,20],[0,S,36],[0,B,35],[0,e,28],[0,V,74],[0,al,55],[0,R,63],[0,l,52],[0,_,51],[0,v,57],[0,x,34],[0,T,65],[0,$,64],[0,ae,16],[0,az,53],[0,ar,66],[0,C,25],[0,am,59],[0,E,69],[0,aF,29],[0,Y,45],[0,f,24],[0,K,73],[0,aw,49],[0,ab,67],[0,au,33],[0,z,48],[0,U,14],[0,i,82],[0,A,8],[0,aa,79],[0,aE,7],[0,X,80],[0,ad,6],[0,aA,5],[0,j,4],[0,aD,3],[0,u,2],[0,ao,81],[0,ag,1],[0,n,60],[0,N,62],[0,ac,19],[0,P,12],[0,r,46],[0,ak,13],[0,as,78],[0,F,0]];b.sections=[0,[0,83,[0,[0,[0,[0,[0,0,[2,F],0,[0,0,[2,as],78,0,1],2],[2,ak],13,[0,0,[2,r],46,0,1],3],[2,P],12,[0,[0,0,[2,ac],19,[0,[0,0,[2,N],62,0,1],[2,n],60,0,2],3],[2,ag],1,[0,[0,0,[2,ao],81,0,1],[2,u],2,0,2],4],5],[2,aD],3,[0,[0,[0,[0,0,[2,j],4,0,1],[2,aA],5,[0,0,[2,ad],6,[0,0,[2,X],80,0,1],2],3],[2,aE],7,[0,[0,0,[2,aa],79,0,1],[2,A],8,[0,0,[2,i],82,0,1],2],4],[2,U],14,[0,[0,[0,0,[2,z],48,0,1],[2,au],33,[0,[0,0,[2,ab],67,0,1],[2,aw],49,[0,0,[2,K],73,0,1],2],3],[2,f],24,[0,[0,[0,0,[2,Y],45,0,1],[2,aF],29,[0,[0,0,[2,E],69,0,1],[2,am],59,0,2],3],[2,C],25,[0,[0,0,[2,ar],66,0,1],[2,az],53,0,2],4],5],6],7],[2,ae],16,[0,[0,[0,[0,[0,[0,0,[2,$],64,[0,0,[2,T],65,0,1],2],[2,x],34,[0,0,[2,v],57,0,1],3],[2,_],51,[0,0,[2,l],52,[0,[0,0,[2,R],63,0,1],[2,al],55,[0,0,[2,V],74,0,1],2],3],4],[2,e],28,[0,0,[2,B],35,[0,0,[2,S],36,0,1],2],5],[2,k],20,[0,[0,[0,0,[2,y],38,0,1],[2,L],27,[0,[0,[0,0,[2,aB],68,0,1],[2,w],41,0,2],[2,D],32,[0,[0,0,[2,aj],71,0,1],[2,ay],37,0,2],3],4],[2,an],18,[0,[0,0,[2,d],61,0,1],[2,t],22,[0,[0,0,[2,W],75,0,1],[2,M],39,0,2],3],5],6],[2,q],15,[0,[0,[0,[0,[0,0,[2,ai],50,0,1],[2,aC],47,0,2],[2,O],43,[0,[0,0,[2,av],54,0,1],[2,Z],23,[0,0,[2,g],58,0,1],2],3],[2,o],21,[0,[0,0,[2,J],40,0,1],[2,ax],42,[0,[0,[0,0,[2,p],72,0,1],[2,m],44,0,2],[2,at],30,[0,0,[2,h],70,0,1],3],4],5],[2,aq],17,[0,[0,0,[2,G],26,[0,0,[2,ap],31,[0,0,[2,af],56,0,1],2],3],[2,H],9,[0,[0,0,[2,s],10,0,1],[2,Q],11,[0,0,[2,ah],76,[0,0,[2,I],77,0,1],2],3],4],6],7],8]],0,c.caml_list_of_js_array(["BUTTON","BUTTON_STATE","BUTTON_STATE_TAG","BUTTON_TAG","BigStringReader","CAP_TYPE_TAG","COMPOP_TAG","Cap_type_val","Compop_val","Draw_style_val","EVENT_TAG","FOCUS","FOCUS_TAG","JOIN_TYPE_TAG","Join_type_val","KEY","KEY_STATE","KEY_STATE_TAG","KEY_TAG","Key_code_val","MlBytes","MlFakeDevice","MlFakeFd","MlFakeFd_out","MlFakeFile","MlFile","MlInt64","MlMutex","MlNat","MlNodeDevice","MlNodeFd","MlObjectTable","MlStringReader","Ml_Bigarray","Ml_Bigarray_c_1_1","Optional_bool_val","Optional_val","REPEAT_TAG","Repeat_val","SLANT","SLANT_TAG","STYLE_TAG","Slant_val","UInt8ArrayReader","Val_button","Val_button_state","Val_cap_type","Val_compop","Val_draw_style","Val_focus_in_out","Val_join_type","Val_key_code","Val_key_state","Val_repeat","_color_of_int","_event_canvas_scale","_focus","_frame_handler","_header_down_handler","_int_of_color","_internal_canvas","_internal_ctxt","_key_down_handler","_key_up_handler","_make_key_event","_ml_canvas_adjust_blit_info","_ml_canvas_ba_of_img","_ml_canvas_decorate","_ml_canvas_ensure_initialized","_ml_canvas_image_of_png_file","_ml_canvas_initialized","_ml_canvas_mlContinuation","_ml_canvas_mlException","_ml_canvas_mlProcessEvent","_ml_canvas_process_event","_ml_canvas_surface_of_ba","_ml_canvas_valid_canvas_size","_move","_move_handler","_next_id","_resize","_resize_handler","_surface_down_handler","_up_handler","add_nat","bigstring_of_array_buffer","bigstring_of_typed_array","bigstring_to_array_buffer","bigstring_to_typed_array","blit_nat","caml_MD5Final","caml_MD5Init","caml_MD5Transform","caml_MD5Update","caml_acosh_float","caml_alloc_dummy_infix","caml_alloc_stack","caml_argv","caml_array_append","caml_array_blit","caml_array_bound_error","caml_array_concat","caml_array_fill","caml_array_get","caml_array_of_bytes","caml_array_of_string","caml_array_set","caml_array_sub","caml_asinh_float","caml_atanh_float","caml_atomic_cas","caml_atomic_exchange","caml_atomic_fetch_add","caml_atomic_load","caml_atomic_make_contended","caml_ba_blit","caml_ba_change_layout","caml_ba_compare","caml_ba_create","caml_ba_create_buffer","caml_ba_create_from","caml_ba_create_unsafe","caml_ba_custom_name","caml_ba_deserialize","caml_ba_dim","caml_ba_dim_1","caml_ba_dim_2","caml_ba_dim_3","caml_ba_fill","caml_ba_from_typed_array","caml_ba_get_1","caml_ba_get_2","caml_ba_get_3","caml_ba_get_generic","caml_ba_get_size","caml_ba_get_size_per_element","caml_ba_hash","caml_ba_init","caml_ba_kind","caml_ba_kind_of_typed_array","caml_ba_layout","caml_ba_map_file","caml_ba_map_file_bytecode","caml_ba_num_dims","caml_ba_reshape","caml_ba_serialize","caml_ba_set_1","caml_ba_set_2","caml_ba_set_3","caml_ba_set_generic","caml_ba_slice","caml_ba_sub","caml_ba_to_typed_array","caml_ba_uint8_get16","caml_ba_uint8_get32","caml_ba_uint8_get64","caml_ba_uint8_set16","caml_ba_uint8_set32","caml_ba_uint8_set64","caml_backtrace_status","caml_bigstring_blit_ba_to_ba","caml_bigstring_blit_ba_to_bytes","caml_bigstring_blit_bytes_to_ba","caml_bigstring_blit_string_to_ba","caml_bigstring_memcmp","caml_blit_bytes","caml_blit_string","caml_bswap16","caml_build_symbols","caml_bytes_bound_error","caml_bytes_compare","caml_bytes_equal","caml_bytes_get","caml_bytes_get16","caml_bytes_get32","caml_bytes_get64","caml_bytes_greaterequal","caml_bytes_greaterthan","caml_bytes_lessequal","caml_bytes_lessthan","caml_bytes_notequal","caml_bytes_of_array","caml_bytes_of_jsbytes","caml_bytes_of_string","caml_bytes_of_utf16_jsstring","caml_bytes_set","caml_bytes_set16","caml_bytes_set32","caml_bytes_set64","caml_bytes_unsafe_get","caml_bytes_unsafe_set","caml_call_gen","caml_callback","caml_cbrt_float","caml_channel_descriptor","caml_check_bound","caml_classify_float","caml_compare","caml_compare_val","caml_compare_val_get_custom","caml_compare_val_number_custom","caml_compare_val_tag","caml_continuation_use_and_update_handler_noexc","caml_continuation_use_noexc","caml_convert_bytes_to_array","caml_convert_raw_backtrace","caml_convert_raw_backtrace_slot","caml_convert_string_to_bytes","caml_copysign_float","caml_cosh_float","caml_create_bytes","caml_create_file","caml_create_string","caml_current_dir","caml_custom_event_index","caml_custom_ops","caml_decompress_input","caml_div","caml_domain_dls","caml_domain_dls_get","caml_domain_dls_set","caml_domain_id","caml_domain_spawn","caml_ephe_blit_data","caml_ephe_blit_key","caml_ephe_check_data","caml_ephe_check_key","caml_ephe_create","caml_ephe_data_offset","caml_ephe_get_data","caml_ephe_get_data_copy","caml_ephe_get_key","caml_ephe_get_key_copy","caml_ephe_key_offset","caml_ephe_set_data","caml_ephe_set_key","caml_ephe_unset_data","caml_ephe_unset_key","caml_equal","caml_erf_float","caml_erfc_float","caml_eventlog_pause","caml_eventlog_resume","caml_executable_name","caml_exn_with_js_backtrace","caml_exp2_float","caml_expm1_float","caml_failwith","caml_fatal_uncaught_exception","caml_fill_bytes","caml_final_register","caml_final_register_called_without_value","caml_final_release","caml_finish_formatting","caml_float_compare","caml_float_of_bytes","caml_float_of_string","caml_floatarray_blit","caml_floatarray_create","caml_fma_float","caml_format_exception","caml_format_float","caml_format_int","caml_fresh_oo_id","caml_frexp_float","caml_fs_init","caml_gc_compaction","caml_gc_counters","caml_gc_full_major","caml_gc_get","caml_gc_huge_fallback_count","caml_gc_major","caml_gc_major_slice","caml_gc_minor","caml_gc_minor_words","caml_gc_quick_stat","caml_gc_set","caml_gc_stat","caml_get_continuation_callstack","caml_get_current_callstack","caml_get_exception_backtrace","caml_get_exception_raw_backtrace","caml_get_global_data","caml_get_major_bucket","caml_get_major_credit","caml_get_minor_free","caml_get_public_method","caml_get_root","caml_global_data","caml_gr_arc_aux","caml_gr_blit_image","caml_gr_clear_graph","caml_gr_close_graph","caml_gr_close_subwindow","caml_gr_create_image","caml_gr_current_x","caml_gr_current_y","caml_gr_display_mode","caml_gr_doc_of_state","caml_gr_draw_arc","caml_gr_draw_char","caml_gr_draw_image","caml_gr_draw_rect","caml_gr_draw_str","caml_gr_draw_string","caml_gr_dump_image","caml_gr_fill_arc","caml_gr_fill_poly","caml_gr_fill_rect","caml_gr_lineto","caml_gr_make_image","caml_gr_moveto","caml_gr_open_graph","caml_gr_open_subwindow","caml_gr_plot","caml_gr_point_color","caml_gr_remember_mode","caml_gr_resize_window","caml_gr_set_color","caml_gr_set_font","caml_gr_set_line_width","caml_gr_set_text_size","caml_gr_set_window_title","caml_gr_sigio_handler","caml_gr_sigio_signal","caml_gr_size_x","caml_gr_size_y","caml_gr_state","caml_gr_state_create","caml_gr_state_get","caml_gr_state_init","caml_gr_state_set","caml_gr_synchronize","caml_gr_text_size","caml_gr_wait_event","caml_gr_window_id","caml_greaterequal","caml_greaterthan","caml_hash","caml_hash_mix_bigstring","caml_hash_mix_bytes","caml_hash_mix_bytes_arr","caml_hash_mix_final","caml_hash_mix_float","caml_hash_mix_int","caml_hash_mix_int64","caml_hash_mix_jsbytes","caml_hash_mix_string","caml_hash_nat","caml_hexstring_of_float","caml_hypot_float","caml_input_value","caml_input_value_from_bytes","caml_input_value_from_reader","caml_input_value_from_string","caml_input_value_to_outside_heap","caml_install_signal_handler","caml_int32_bits_of_float","caml_int32_bswap","caml_int32_float_of_bits","caml_int32_unmarshal","caml_int64_add","caml_int64_and","caml_int64_bits_of_float","caml_int64_bswap","caml_int64_compare","caml_int64_create_lo_hi","caml_int64_create_lo_mi_hi","caml_int64_div","caml_int64_float_of_bits","caml_int64_format","caml_int64_hash","caml_int64_hi32","caml_int64_is_negative","caml_int64_is_zero","caml_int64_lo32","caml_int64_marshal","caml_int64_mod","caml_int64_mul","caml_int64_neg","caml_int64_of_bytes","caml_int64_of_float","caml_int64_of_int32","caml_int64_of_string","caml_int64_offset","caml_int64_or","caml_int64_shift_left","caml_int64_shift_right","caml_int64_shift_right_unsigned","caml_int64_sub","caml_int64_to_bytes","caml_int64_to_float","caml_int64_to_int32","caml_int64_ult","caml_int64_unmarshal","caml_int64_xor","caml_int_compare","caml_int_of_string","caml_invalid_argument","caml_is_continuation_tag","caml_is_js","caml_is_ml_bytes","caml_is_ml_string","caml_is_printable","caml_is_special_exception","caml_js_call","caml_js_delete","caml_js_equals","caml_js_error_of_exception","caml_js_error_option_of_exception","caml_js_eval_string","caml_js_expr","caml_js_from_array","caml_js_from_bool","caml_js_from_float","caml_js_from_string","caml_js_fun_call","caml_js_function_arity","caml_js_get","caml_js_get_console","caml_js_html_entities","caml_js_html_escape","caml_js_instanceof","caml_js_meth_call","caml_js_new","caml_js_object","caml_js_on_ie","caml_js_pure_expr","caml_js_set","caml_js_strict_equals","caml_js_to_array","caml_js_to_bool","caml_js_to_byte_string","caml_js_to_float","caml_js_to_int32","caml_js_to_string","caml_js_typeof","caml_js_var","caml_js_wrap_callback","caml_js_wrap_callback_arguments","caml_js_wrap_callback_strict","caml_js_wrap_callback_unsafe","caml_js_wrap_meth_callback","caml_js_wrap_meth_callback_arguments","caml_js_wrap_meth_callback_strict","caml_js_wrap_meth_callback_unsafe","caml_jsbytes_of_string","caml_jsoo_flags_effects","caml_jsoo_flags_use_js_string","caml_jsstring_of_string","caml_lazy_make_forward","caml_lazy_read_result","caml_lazy_reset_to_lazy","caml_lazy_update_to_forcing","caml_lazy_update_to_forward","caml_ldexp_float","caml_lessequal","caml_lessthan","caml_lex_array","caml_lex_engine","caml_list_mount_point","caml_list_of_js_array","caml_list_to_js_array","caml_log10_float","caml_log1p_float","caml_log2_float","caml_lxm_next","caml_make_float_vect","caml_make_path","caml_make_vect","caml_marshal_constants","caml_marshal_data_size","caml_marshal_header_size","caml_maybe_attach_backtrace","caml_maybe_print_stats","caml_md5_bytes","caml_md5_chan","caml_md5_string","caml_memprof_discard","caml_memprof_set","caml_memprof_start","caml_memprof_stop","caml_ml_bytes_content","caml_ml_bytes_length","caml_ml_channel_get","caml_ml_channel_redirect","caml_ml_channel_restore","caml_ml_channel_size","caml_ml_channel_size_64","caml_ml_channels","caml_ml_close_channel","caml_ml_condition_broadcast","caml_ml_condition_new","caml_ml_condition_signal","caml_ml_condition_wait","caml_ml_debug_info_status","caml_ml_domain_cpu_relax","caml_ml_domain_id","caml_ml_domain_set_name","caml_ml_domain_unique_token","caml_ml_enable_runtime_warnings","caml_ml_flush","caml_ml_input","caml_ml_input_bigarray","caml_ml_input_block","caml_ml_input_char","caml_ml_input_int","caml_ml_input_scan_line","caml_ml_is_buffered","caml_ml_mutex_lock","caml_ml_mutex_new","caml_ml_mutex_try_lock","caml_ml_mutex_unlock","caml_ml_open_descriptor_in","caml_ml_open_descriptor_out","caml_ml_out_channels_list","caml_ml_output","caml_ml_output_bigarray","caml_ml_output_bytes","caml_ml_output_char","caml_ml_output_int","caml_ml_output_ta","caml_ml_pos_in","caml_ml_pos_in_64","caml_ml_pos_out","caml_ml_pos_out_64","caml_ml_runtime_events_pause","caml_ml_runtime_events_resume","caml_ml_runtime_events_start","caml_ml_runtime_warnings_enabled","caml_ml_seek_in","caml_ml_seek_in_64","caml_ml_seek_out","caml_ml_seek_out_64","caml_ml_set_binary_mode","caml_ml_set_buffered","caml_ml_set_channel_name","caml_ml_set_channel_output","caml_ml_set_channel_refill","caml_ml_string_length","caml_mod","caml_modf_float","caml_mount_autoload","caml_mul","caml_named_value","caml_named_values","caml_nativeint_unmarshal","caml_new_lex_engine","caml_new_string","caml_nextafter_float","caml_notequal","caml_obj_add_offset","caml_obj_block","caml_obj_compare_and_swap","caml_obj_dup","caml_obj_is_block","caml_obj_is_shared","caml_obj_make_forward","caml_obj_raw_field","caml_obj_reachable_words","caml_obj_set_raw_field","caml_obj_set_tag","caml_obj_tag","caml_obj_truncate","caml_obj_update_tag","caml_obj_with_tag","caml_ojs_new_arr","caml_oo_last_id","caml_output_val","caml_output_value","caml_output_value_to_buffer","caml_output_value_to_bytes","caml_output_value_to_string","caml_parse_digit","caml_parse_engine","caml_parse_format","caml_parse_sign_and_base","caml_parser_trace","caml_pos_in","caml_pos_out","caml_pure_js_expr","caml_raise_constant","caml_raise_end_of_file","caml_raise_no_such_file","caml_raise_not_a_dir","caml_raise_not_found","caml_raise_sys_error","caml_raise_with_arg","caml_raise_with_args","caml_raise_with_string","caml_raise_zero_divide","caml_raw_backtrace_length","caml_raw_backtrace_next_slot","caml_raw_backtrace_slot","caml_read_file_content","caml_recommended_domain_count","caml_record_backtrace","caml_record_backtrace_flag","caml_refill","caml_register_channel_for_spacetime","caml_register_global","caml_register_named_value","caml_restore_raw_backtrace","caml_root","caml_round_float","caml_runtime_events_create_cursor","caml_runtime_events_free_cursor","caml_runtime_events_read_poll","caml_runtime_events_user_register","caml_runtime_events_user_resolve","caml_runtime_events_user_write","caml_runtime_parameters","caml_runtime_variant","caml_runtime_warnings","caml_seek_in","caml_seek_out","caml_set_oo_id","caml_set_parser_trace","caml_set_static_env","caml_signbit_float","caml_sinh_float","caml_spacetime_enabled","caml_spacetime_only_works_for_native_code","caml_str_initialize","caml_str_repeat","caml_string_bound_error","caml_string_compare","caml_string_concat","caml_string_equal","caml_string_get","caml_string_get16","caml_string_get32","caml_string_get64","caml_string_greaterequal","caml_string_greaterthan","caml_string_hash","caml_string_lessequal","caml_string_lessthan","caml_string_notequal","caml_string_of_array","caml_string_of_bytes","caml_string_of_jsbytes","caml_string_of_jsstring","caml_string_set","caml_string_set16","caml_string_set32","caml_string_set64","caml_string_unsafe_get","caml_string_unsafe_set","caml_subarray_to_jsbytes","caml_sys_argv","caml_sys_chdir","caml_sys_close","caml_sys_const_backend_type","caml_sys_const_big_endian","caml_sys_const_int_size","caml_sys_const_max_wosize","caml_sys_const_naked_pointers_checked","caml_sys_const_ostype_cygwin","caml_sys_const_ostype_unix","caml_sys_const_ostype_win32","caml_sys_const_word_size","caml_sys_executable_name","caml_sys_exit","caml_sys_fds","caml_sys_file_exists","caml_sys_get_argv","caml_sys_get_config","caml_sys_getcwd","caml_sys_getenv","caml_sys_is_directory","caml_sys_is_regular_file","caml_sys_isatty","caml_sys_mkdir","caml_sys_modify_argv","caml_sys_open","caml_sys_open_for_node","caml_sys_random_seed","caml_sys_read_directory","caml_sys_remove","caml_sys_rename","caml_sys_rmdir","caml_sys_system_command","caml_sys_time","caml_sys_time_include_children","caml_sys_unsafe_getenv","caml_tanh_float","caml_to_js_string","caml_trailing_slash","caml_trampoline","caml_trampoline_return","caml_trunc_float","caml_uint8_array_of_bytes","caml_uint8_array_of_string","caml_unix_cleanup","caml_unix_closedir","caml_unix_filedescr_of_fd","caml_unix_findclose","caml_unix_findfirst","caml_unix_findnext","caml_unix_getpwuid","caml_unix_gettimeofday","caml_unix_getuid","caml_unix_gmtime","caml_unix_has_symlink","caml_unix_inet_addr_of_string","caml_unix_isatty","caml_unix_localtime","caml_unix_lstat","caml_unix_lstat_64","caml_unix_mkdir","caml_unix_mktime","caml_unix_opendir","caml_unix_readdir","caml_unix_readlink","caml_unix_rewinddir","caml_unix_rmdir","caml_unix_startup","caml_unix_stat","caml_unix_stat_64","caml_unix_symlink","caml_unix_time","caml_unix_unlink","caml_unmount","caml_update_dummy","caml_utf16_of_utf8","caml_utf8_of_utf16","caml_weak_create","caml_weak_set","caml_wrap_exception","caml_xmlhttprequest_create","compare_digits_nat","compare_nat","compare_nat_real","complement_nat","create_nat","decr_nat","deserialize_nat","div_digit_nat","div_helper","div_nat","fs_node_supported","incr_nat","initialize_nat","is_digit_int","is_digit_odd","is_digit_zero","jsoo_create_file","jsoo_create_file_extern","jsoo_effect_not_supported","jsoo_floor_log2","jsoo_is_ascii","jsoo_mount_point","jsoo_sys_getenv","keyname_to_keycode","land_digit_nat","length_nat","lor_digit_nat","lxor_digit_nat","make_unix_err_args","ml_canvas_arc","ml_canvas_arc_to","ml_canvas_bezier_curve_to","ml_canvas_blit","ml_canvas_clear_path","ml_canvas_clip","ml_canvas_clip_path","ml_canvas_close","ml_canvas_close_path","ml_canvas_commit","ml_canvas_compare","ml_canvas_create_offscreen","ml_canvas_create_offscreen_from_image_data","ml_canvas_create_offscreen_from_png","ml_canvas_create_onscreen","ml_canvas_ellipse","ml_canvas_export_png","ml_canvas_fill","ml_canvas_fill_path","ml_canvas_fill_rect","ml_canvas_fill_text","ml_canvas_get_canvas","ml_canvas_get_current_timestamp","ml_canvas_get_fill_color","ml_canvas_get_fill_style","ml_canvas_get_global_alpha","ml_canvas_get_global_composite_operation","ml_canvas_get_id","ml_canvas_get_image_data","ml_canvas_get_line_cap","ml_canvas_get_line_dash","ml_canvas_get_line_dash_offset","ml_canvas_get_line_join","ml_canvas_get_line_width","ml_canvas_get_miter_limit","ml_canvas_get_pixel","ml_canvas_get_position","ml_canvas_get_shadow_blur","ml_canvas_get_shadow_color","ml_canvas_get_shadow_offset","ml_canvas_get_size","ml_canvas_get_stroke_color","ml_canvas_get_stroke_style","ml_canvas_gradient_add_color_stop","ml_canvas_gradient_create_conic","ml_canvas_gradient_create_linear","ml_canvas_gradient_create_radial","ml_canvas_hash","ml_canvas_hide","ml_canvas_image_data_blit","ml_canvas_image_data_create_from_png","ml_canvas_image_data_export_png","ml_canvas_image_data_fill","ml_canvas_image_data_get_pixel","ml_canvas_image_data_get_size","ml_canvas_image_data_import_png","ml_canvas_image_data_put_pixel","ml_canvas_image_data_sub","ml_canvas_import_png","ml_canvas_init","ml_canvas_int_of_key","ml_canvas_key_of_int","ml_canvas_line_to","ml_canvas_move_to","ml_canvas_path_add","ml_canvas_path_add_transformed","ml_canvas_path_arc","ml_canvas_path_arc_to","ml_canvas_path_bezier_curve_to","ml_canvas_path_close","ml_canvas_path_create","ml_canvas_path_ellipse","ml_canvas_path_line_to","ml_canvas_path_move_to","ml_canvas_path_quadratic_curve_to","ml_canvas_path_rect","ml_canvas_pattern_create","ml_canvas_put_image_data","ml_canvas_put_pixel","ml_canvas_quadratic_curve_to","ml_canvas_rect","ml_canvas_restore","ml_canvas_rotate","ml_canvas_run","ml_canvas_save","ml_canvas_scale","ml_canvas_set_fill_color","ml_canvas_set_fill_gradient","ml_canvas_set_fill_pattern","ml_canvas_set_fill_style","ml_canvas_set_font","ml_canvas_set_global_alpha","ml_canvas_set_global_composite_operation","ml_canvas_set_line_cap","ml_canvas_set_line_dash","ml_canvas_set_line_dash_offset","ml_canvas_set_line_join","ml_canvas_set_line_width","ml_canvas_set_miter_limit","ml_canvas_set_position","ml_canvas_set_shadow_blur","ml_canvas_set_shadow_color","ml_canvas_set_shadow_offset","ml_canvas_set_size","ml_canvas_set_stroke_color","ml_canvas_set_stroke_gradient","ml_canvas_set_stroke_pattern","ml_canvas_set_stroke_style","ml_canvas_set_transform","ml_canvas_shear","ml_canvas_show","ml_canvas_stop","ml_canvas_stroke","ml_canvas_stroke_path","ml_canvas_stroke_rect","ml_canvas_stroke_text","ml_canvas_transform","ml_canvas_translate","mult_digit_nat","mult_nat","nat_of_array","nth_digit_nat","nth_digit_nat_native","num_digits_nat","num_leading_zero_bits_in_digit","os_type","path_is_absolute","re_match","re_partial_match","re_replacement_text","re_search_backward","re_search_forward","re_string_match","resolve_fs_device","serialize_nat","set_digit_nat","set_digit_nat_native","set_to_zero_nat","shift_left_nat","shift_right_nat","square_nat","sub_nat"]),0];return}(globalThis));
//# 1 "../.js/default/stdlib/stdlib.cma.js"
// Generated by js_of_ocaml
//# 3 "../.js/default/stdlib/stdlib.cma.js"

//# 5 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function erase_rel(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var rest = param[1]; return [0, erase_rel(rest)];
      case 1:
       var rest$0 = param[1]; return [1, erase_rel(rest$0)];
      case 2:
       var rest$1 = param[1]; return [2, erase_rel(rest$1)];
      case 3:
       var rest$2 = param[1]; return [3, erase_rel(rest$2)];
      case 4:
       var rest$3 = param[1]; return [4, erase_rel(rest$3)];
      case 5:
       var rest$4 = param[1]; return [5, erase_rel(rest$4)];
      case 6:
       var rest$5 = param[1]; return [6, erase_rel(rest$5)];
      case 7:
       var rest$6 = param[1]; return [7, erase_rel(rest$6)];
      case 8:
       var rest$7 = param[2], ty = param[1];
       return [8, ty, erase_rel(rest$7)];
      case 9:
       var rest$8 = param[3], ty1 = param[1];
       return [9, ty1, ty1, erase_rel(rest$8)];
      case 10:
       var rest$9 = param[1]; return [10, erase_rel(rest$9)];
      case 11:
       var rest$10 = param[1]; return [11, erase_rel(rest$10)];
      case 12:
       var rest$11 = param[1]; return [12, erase_rel(rest$11)];
      case 13:
       var rest$12 = param[1]; return [13, erase_rel(rest$12)];
      default: var rest$13 = param[1]; return [14, erase_rel(rest$13)];
    }
   }
   function concat_fmtty(fmtty1, fmtty2){
    if(typeof fmtty1 === "number") return fmtty2;
    switch(fmtty1[0]){
      case 0:
       var rest = fmtty1[1]; return [0, concat_fmtty(rest, fmtty2)];
      case 1:
       var rest$0 = fmtty1[1]; return [1, concat_fmtty(rest$0, fmtty2)];
      case 2:
       var rest$1 = fmtty1[1]; return [2, concat_fmtty(rest$1, fmtty2)];
      case 3:
       var rest$2 = fmtty1[1]; return [3, concat_fmtty(rest$2, fmtty2)];
      case 4:
       var rest$3 = fmtty1[1]; return [4, concat_fmtty(rest$3, fmtty2)];
      case 5:
       var rest$4 = fmtty1[1]; return [5, concat_fmtty(rest$4, fmtty2)];
      case 6:
       var rest$5 = fmtty1[1]; return [6, concat_fmtty(rest$5, fmtty2)];
      case 7:
       var rest$6 = fmtty1[1]; return [7, concat_fmtty(rest$6, fmtty2)];
      case 8:
       var rest$7 = fmtty1[2], ty = fmtty1[1];
       return [8, ty, concat_fmtty(rest$7, fmtty2)];
      case 9:
       var rest$8 = fmtty1[3], ty2 = fmtty1[2], ty1 = fmtty1[1];
       return [9, ty1, ty2, concat_fmtty(rest$8, fmtty2)];
      case 10:
       var rest$9 = fmtty1[1]; return [10, concat_fmtty(rest$9, fmtty2)];
      case 11:
       var rest$10 = fmtty1[1]; return [11, concat_fmtty(rest$10, fmtty2)];
      case 12:
       var rest$11 = fmtty1[1]; return [12, concat_fmtty(rest$11, fmtty2)];
      case 13:
       var rest$12 = fmtty1[1]; return [13, concat_fmtty(rest$12, fmtty2)];
      default:
       var rest$13 = fmtty1[1]; return [14, concat_fmtty(rest$13, fmtty2)];
    }
   }
   function concat_fmt(fmt1, fmt2){
    if(typeof fmt1 === "number") return fmt2;
    switch(fmt1[0]){
      case 0:
       var rest = fmt1[1]; return [0, concat_fmt(rest, fmt2)];
      case 1:
       var rest$0 = fmt1[1]; return [1, concat_fmt(rest$0, fmt2)];
      case 2:
       var rest$1 = fmt1[2], pad = fmt1[1];
       return [2, pad, concat_fmt(rest$1, fmt2)];
      case 3:
       var rest$2 = fmt1[2], pad$0 = fmt1[1];
       return [3, pad$0, concat_fmt(rest$2, fmt2)];
      case 4:
       var rest$3 = fmt1[4], prec = fmt1[3], pad$1 = fmt1[2], iconv = fmt1[1];
       return [4, iconv, pad$1, prec, concat_fmt(rest$3, fmt2)];
      case 5:
       var
        rest$4 = fmt1[4],
        prec$0 = fmt1[3],
        pad$2 = fmt1[2],
        iconv$0 = fmt1[1];
       return [5, iconv$0, pad$2, prec$0, concat_fmt(rest$4, fmt2)];
      case 6:
       var
        rest$5 = fmt1[4],
        prec$1 = fmt1[3],
        pad$3 = fmt1[2],
        iconv$1 = fmt1[1];
       return [6, iconv$1, pad$3, prec$1, concat_fmt(rest$5, fmt2)];
      case 7:
       var
        rest$6 = fmt1[4],
        prec$2 = fmt1[3],
        pad$4 = fmt1[2],
        iconv$2 = fmt1[1];
       return [7, iconv$2, pad$4, prec$2, concat_fmt(rest$6, fmt2)];
      case 8:
       var
        rest$7 = fmt1[4],
        prec$3 = fmt1[3],
        pad$5 = fmt1[2],
        fconv = fmt1[1];
       return [8, fconv, pad$5, prec$3, concat_fmt(rest$7, fmt2)];
      case 9:
       var rest$8 = fmt1[2], pad$6 = fmt1[1];
       return [9, pad$6, concat_fmt(rest$8, fmt2)];
      case 10:
       var rest$9 = fmt1[1]; return [10, concat_fmt(rest$9, fmt2)];
      case 11:
       var rest$10 = fmt1[2], str = fmt1[1];
       return [11, str, concat_fmt(rest$10, fmt2)];
      case 12:
       var rest$11 = fmt1[2], chr = fmt1[1];
       return [12, chr, concat_fmt(rest$11, fmt2)];
      case 13:
       var rest$12 = fmt1[3], fmtty = fmt1[2], pad$7 = fmt1[1];
       return [13, pad$7, fmtty, concat_fmt(rest$12, fmt2)];
      case 14:
       var rest$13 = fmt1[3], fmtty$0 = fmt1[2], pad$8 = fmt1[1];
       return [14, pad$8, fmtty$0, concat_fmt(rest$13, fmt2)];
      case 15:
       var rest$14 = fmt1[1]; return [15, concat_fmt(rest$14, fmt2)];
      case 16:
       var rest$15 = fmt1[1]; return [16, concat_fmt(rest$15, fmt2)];
      case 17:
       var rest$16 = fmt1[2], fmting_lit = fmt1[1];
       return [17, fmting_lit, concat_fmt(rest$16, fmt2)];
      case 18:
       var rest$17 = fmt1[2], fmting_gen = fmt1[1];
       return [18, fmting_gen, concat_fmt(rest$17, fmt2)];
      case 19:
       var rest$18 = fmt1[1]; return [19, concat_fmt(rest$18, fmt2)];
      case 20:
       var rest$19 = fmt1[3], char_set = fmt1[2], width_opt = fmt1[1];
       return [20, width_opt, char_set, concat_fmt(rest$19, fmt2)];
      case 21:
       var rest$20 = fmt1[2], counter = fmt1[1];
       return [21, counter, concat_fmt(rest$20, fmt2)];
      case 22:
       var rest$21 = fmt1[1]; return [22, concat_fmt(rest$21, fmt2)];
      case 23:
       var rest$22 = fmt1[2], ign = fmt1[1];
       return [23, ign, concat_fmt(rest$22, fmt2)];
      default:
       var rest$23 = fmt1[3], f = fmt1[2], arity = fmt1[1];
       return [24, arity, f, concat_fmt(rest$23, fmt2)];
    }
   }
   var CamlinternalFormatBasics = [0, concat_fmtty, erase_rel, concat_fmt];
   runtime.caml_register_global
    (0, CamlinternalFormatBasics, "CamlinternalFormatBasics");
   return;
  }
  (globalThis));

//# 179 "../.js/default/stdlib/stdlib.cma.js"
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function make(v){return [0, v];}
   function get(r){return r[1];}
   function set(r, v){r[1] = v; return 0;}
   function exchange(r, v){var cur = r[1]; r[1] = v; return cur;}
   function compare_and_set(r, seen, v){
    var cur = r[1];
    return cur === seen ? (r[1] = v, 1) : 0;
   }
   function fetch_and_add(r, n){
    var cur = r[1];
    r[1] = cur + n | 0;
    return cur;
   }
   function incr(r){fetch_and_add(r, 1); return 0;}
   function decr(r){fetch_and_add(r, -1); return 0;}
   var
    CamlinternalAtomic =
      [0,
       make,
       get,
       set,
       exchange,
       compare_and_set,
       fetch_and_add,
       incr,
       decr];
   runtime.caml_register_global(0, CamlinternalAtomic, "CamlinternalAtomic");
   return;
  }
  (globalThis));

//# 215 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_false$0 = "false",
    cst_true$0 = "true",
    caml_create_bytes = runtime.caml_create_bytes,
    caml_float_of_string = runtime.caml_float_of_string,
    caml_int64_float_of_bits = runtime.caml_int64_float_of_bits,
    caml_int_of_string = runtime.caml_int_of_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_channel_size = runtime.caml_ml_channel_size,
    caml_ml_channel_size_64 = runtime.caml_ml_channel_size_64,
    caml_ml_close_channel = runtime.caml_ml_close_channel,
    caml_ml_flush = runtime.caml_ml_flush,
    caml_ml_input = runtime.caml_ml_input,
    caml_ml_input_char = runtime.caml_ml_input_char,
    caml_ml_open_descriptor_in = runtime.caml_ml_open_descriptor_in,
    caml_ml_open_descriptor_out = runtime.caml_ml_open_descriptor_out,
    caml_ml_output = runtime.caml_ml_output,
    caml_ml_output_bytes = runtime.caml_ml_output_bytes,
    caml_ml_output_char = runtime.caml_ml_output_char,
    caml_ml_set_binary_mode = runtime.caml_ml_set_binary_mode,
    caml_ml_set_channel_name = runtime.caml_ml_set_channel_name,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_concat = runtime.caml_string_concat,
    caml_string_of_bytes = runtime.caml_string_of_bytes,
    caml_sys_open = runtime.caml_sys_open,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    CamlinternalAtomic = global_data.CamlinternalAtomic,
    CamlinternalFormatBasics = global_data.CamlinternalFormatBasics,
    Invalid_argument = global_data.Invalid_argument,
    Failure = global_data.Failure,
    Match_failure = global_data.Match_failure,
    Assert_failure = global_data.Assert_failure,
    Not_found = global_data.Not_found,
    Out_of_memory = global_data.Out_of_memory,
    Stack_overflow = global_data.Stack_overflow,
    Sys_error = global_data.Sys_error,
    End_of_file = global_data.End_of_file,
    Division_by_zero = global_data.Division_by_zero,
    Sys_blocked_io = global_data.Sys_blocked_io,
    Undefined_recursive_module = global_data.Undefined_recursive_module;
   function failwith(s){
    throw caml_maybe_attach_backtrace([0, Failure, s], 1);
   }
   function invalid_arg(s){
    throw caml_maybe_attach_backtrace([0, Invalid_argument, s], 1);
   }
   var Exit = [248, "Stdlib.Exit", runtime.caml_fresh_oo_id(0)];
   function min(x, y){return runtime.caml_lessequal(x, y) ? x : y;}
   function max(x, y){return runtime.caml_greaterequal(x, y) ? x : y;}
   function abs(x){return 0 <= x ? x : - x | 0;}
   function lnot(x){return x ^ -1;}
   var
    infinity =
      caml_int64_float_of_bits
       (runtime.caml_int64_create_lo_mi_hi(0, 0, 32752)),
    neg_infinity =
      caml_int64_float_of_bits
       (runtime.caml_int64_create_lo_mi_hi(0, 0, 65520)),
    nan =
      caml_int64_float_of_bits
       (runtime.caml_int64_create_lo_mi_hi(1, 0, 32752)),
    max_float =
      caml_int64_float_of_bits
       (runtime.caml_int64_create_lo_mi_hi(16777215, 16777215, 32751)),
    min_float =
      caml_int64_float_of_bits(runtime.caml_int64_create_lo_mi_hi(0, 0, 16)),
    epsilon_float =
      caml_int64_float_of_bits
       (runtime.caml_int64_create_lo_mi_hi(0, 0, 15536)),
    symbol_concat = caml_string_concat,
    cst_char_of_int = "char_of_int",
    cst_true = cst_true$0,
    cst_false = cst_false$0,
    cst_bool_of_string = "bool_of_string",
    _a_ = [0, 1],
    _b_ = [0, 0];
   function char_of_int(n){
    if(0 <= n && 255 >= n) return n;
    return invalid_arg(cst_char_of_int);
   }
   function string_of_bool(b){return b ? cst_true : cst_false;}
   function bool_of_string(param){
    return param !== cst_false$0
            ? param !== cst_true$0 ? invalid_arg(cst_bool_of_string) : 1
            : 0;
   }
   function bool_of_string_opt(param){
    return param !== cst_false$0 ? param !== cst_true$0 ? 0 : _a_ : _b_;
   }
   function string_of_int(n){return "" + n;}
   function int_of_string_opt(s){
    try{var _u_ = [0, caml_int_of_string(s)]; return _u_;}
    catch(_v_){
     var _t_ = caml_wrap_exception(_v_);
     if(_t_[1] === Failure) return 0;
     throw caml_maybe_attach_backtrace(_t_, 0);
    }
   }
   function valid_float_lexem(s1){
    var l = caml_ml_string_length(s1), i = 0;
    for(;;){
     if(l <= i) return s1 + ".";
     var match = runtime.caml_string_get(s1, i);
     a:
     {
      if(48 <= match){if(58 > match) break a;} else if(45 === match) break a;
      return s1;
     }
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function string_of_float(f){
    return valid_float_lexem(runtime.caml_format_float("%.12g", f));
   }
   function float_of_string_opt(s){
    try{var _r_ = [0, caml_float_of_string(s)]; return _r_;}
    catch(_s_){
     var _q_ = caml_wrap_exception(_s_);
     if(_q_[1] === Failure) return 0;
     throw caml_maybe_attach_backtrace(_q_, 0);
    }
   }
   function symbol(l1, l2){
    if(! l1) return l2;
    var tl = l1[2], hd = l1[1];
    return [0, hd, symbol(tl, l2)];
   }
   var
    stdin = caml_ml_open_descriptor_in(0),
    stdout = caml_ml_open_descriptor_out(1),
    stderr = caml_ml_open_descriptor_out(2),
    _c_ = [0, 1, [0, 3, [0, 4, [0, 7, 0]]]],
    _d_ = [0, 1, [0, 3, [0, 4, [0, 6, 0]]]],
    cst_output = "output",
    cst_output_substring = "output_substring",
    _e_ = [0, 0, [0, 7, 0]],
    _f_ = [0, 0, [0, 6, 0]],
    cst_input = "input",
    cst_really_input = "really_input";
   function open_out_gen(mode, perm, name){
    var c = caml_ml_open_descriptor_out(caml_sys_open(name, mode, perm));
    caml_ml_set_channel_name(c, name);
    return c;
   }
   function open_out(name){return open_out_gen(_c_, 438, name);}
   function open_out_bin(name){return open_out_gen(_d_, 438, name);}
   function flush_all(param){
    var param$0 = runtime.caml_ml_out_channels_list(0);
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], a = param$0[1];
     try{caml_ml_flush(a);}
     catch(_p_){
      var _o_ = caml_wrap_exception(_p_);
      if(_o_[1] !== Sys_error) throw caml_maybe_attach_backtrace(_o_, 0);
     }
     param$0 = l;
    }
   }
   function output_bytes(oc, s){
    return caml_ml_output_bytes(oc, s, 0, caml_ml_bytes_length(s));
   }
   function output_string(oc, s){
    return caml_ml_output(oc, s, 0, caml_ml_string_length(s));
   }
   function output(oc, s, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs)
     return caml_ml_output_bytes(oc, s, ofs, len);
    return invalid_arg(cst_output);
   }
   function output_substring(oc, s, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_string_length(s) - len | 0) >= ofs)
     return caml_ml_output(oc, s, ofs, len);
    return invalid_arg(cst_output_substring);
   }
   function output_value(chan, v){
    return runtime.caml_output_value(chan, v, 0);
   }
   function close_out(oc){
    caml_ml_flush(oc);
    return caml_ml_close_channel(oc);
   }
   function close_out_noerr(oc){
    try{caml_ml_flush(oc);}catch(_n_){}
    try{var _l_ = caml_ml_close_channel(oc); return _l_;}catch(_m_){return 0;}
   }
   function open_in_gen(mode, perm, name){
    var c = caml_ml_open_descriptor_in(caml_sys_open(name, mode, perm));
    caml_ml_set_channel_name(c, name);
    return c;
   }
   function open_in(name){return open_in_gen(_e_, 0, name);}
   function open_in_bin(name){return open_in_gen(_f_, 0, name);}
   function input(ic, s, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs)
     return caml_ml_input(ic, s, ofs, len);
    return invalid_arg(cst_input);
   }
   function unsafe_really_input(ic, s, ofs, len){
    var ofs$0 = ofs, len$0 = len;
    for(;;){
     if(0 >= len$0) return 0;
     var r = caml_ml_input(ic, s, ofs$0, len$0);
     if(0 === r) throw caml_maybe_attach_backtrace(End_of_file, 1);
     var len$1 = len$0 - r | 0, ofs$1 = ofs$0 + r | 0;
     ofs$0 = ofs$1;
     len$0 = len$1;
    }
   }
   function really_input(ic, s, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs)
     return unsafe_really_input(ic, s, ofs, len);
    return invalid_arg(cst_really_input);
   }
   function really_input_string(ic, len){
    var s = caml_create_bytes(len);
    really_input(ic, s, 0, len);
    return caml_string_of_bytes(s);
   }
   function input_line(chan){
    function build_result(buf, pos, param){
     var pos$0 = pos, param$0 = param;
     for(;;){
      if(! param$0) return buf;
      var tl = param$0[2], hd = param$0[1], len = caml_ml_bytes_length(hd);
      runtime.caml_blit_bytes(hd, 0, buf, pos$0 - len | 0, len);
      var pos$1 = pos$0 - len | 0;
      pos$0 = pos$1;
      param$0 = tl;
     }
    }
    var accu = 0, len = 0;
    for(;;){
     var n = runtime.caml_ml_input_scan_line(chan);
     if(0 === n){
      if(! accu) throw caml_maybe_attach_backtrace(End_of_file, 1);
      var _k_ = build_result(caml_create_bytes(len), len, accu);
     }
     else{
      if(0 >= n){
       var beg = caml_create_bytes(- n | 0);
       caml_ml_input(chan, beg, 0, - n | 0);
       var len$1 = len - n | 0, accu$0 = [0, beg, accu];
       accu = accu$0;
       len = len$1;
       continue;
      }
      var res = caml_create_bytes(n - 1 | 0);
      caml_ml_input(chan, res, 0, n - 1 | 0);
      caml_ml_input_char(chan);
      if(accu)
       var
        len$0 = (len + n | 0) - 1 | 0,
        _k_ = build_result(caml_create_bytes(len$0), len$0, [0, res, accu]);
      else
       var _k_ = res;
     }
     return caml_string_of_bytes(_k_);
    }
   }
   function close_in_noerr(ic){
    try{var _i_ = caml_ml_close_channel(ic); return _i_;}catch(_j_){return 0;}
   }
   function print_char(c){return caml_ml_output_char(stdout, c);}
   function print_string(s){return output_string(stdout, s);}
   function print_bytes(s){return output_bytes(stdout, s);}
   function print_int(i){return output_string(stdout, "" + i);}
   function print_float(f){return output_string(stdout, string_of_float(f));}
   function print_endline(s){
    output_string(stdout, s);
    caml_ml_output_char(stdout, 10);
    return caml_ml_flush(stdout);
   }
   function print_newline(param){
    caml_ml_output_char(stdout, 10);
    return caml_ml_flush(stdout);
   }
   function prerr_char(c){return caml_ml_output_char(stderr, c);}
   function prerr_string(s){return output_string(stderr, s);}
   function prerr_bytes(s){return output_bytes(stderr, s);}
   function prerr_int(i){return output_string(stderr, "" + i);}
   function prerr_float(f){return output_string(stderr, string_of_float(f));}
   function prerr_endline(s){
    output_string(stderr, s);
    caml_ml_output_char(stderr, 10);
    return caml_ml_flush(stderr);
   }
   function prerr_newline(param){
    caml_ml_output_char(stderr, 10);
    return caml_ml_flush(stderr);
   }
   function read_line(param){caml_ml_flush(stdout); return input_line(stdin);}
   function read_int(param){return caml_int_of_string(read_line(0));}
   function read_int_opt(param){return int_of_string_opt(read_line(0));}
   function read_float(param){return caml_float_of_string(read_line(0));}
   function read_float_opt(param){return float_of_string_opt(read_line(0));}
   function string_of_format(param){var str = param[2]; return str;}
   function symbol$0(param, _h_){
    var
     str2 = _h_[2],
     fmt2 = _h_[1],
     str1 = param[2],
     fmt1 = param[1],
     s2 = "%," + str2;
    return [0, caml_call2(CamlinternalFormatBasics[3], fmt1, fmt2), str1 + s2];
   }
   var exit_function = caml_call1(CamlinternalAtomic[1], flush_all);
   function at_exit(f){
    for(;;){
     var
      f_yet_to_run = caml_call1(CamlinternalAtomic[1], 1),
      old_exit = caml_call1(CamlinternalAtomic[2], exit_function);
     let f_yet_to_run$0 = f_yet_to_run, old_exit$0 = old_exit;
     var
      new_exit =
        function(param){
         if(caml_call3(CamlinternalAtomic[5], f_yet_to_run$0, 1, 0))
          caml_call1(f, 0);
         return caml_call1(old_exit$0, 0);
        },
      success =
        caml_call3(CamlinternalAtomic[5], exit_function, old_exit, new_exit),
      _g_ = 1 - success;
     if(! _g_) return _g_;
    }
   }
   function do_at_exit(param){
    return caml_call1(caml_call1(CamlinternalAtomic[2], exit_function), 0);
   }
   function exit(retcode){
    do_at_exit(0);
    return runtime.caml_sys_exit(retcode);
   }
   runtime.caml_register_named_value("Pervasives.do_at_exit", do_at_exit);
   var
    Stdlib =
      [0,
       invalid_arg,
       failwith,
       Exit,
       Match_failure,
       Assert_failure,
       Invalid_argument,
       Failure,
       Not_found,
       Out_of_memory,
       Stack_overflow,
       Sys_error,
       End_of_file,
       Division_by_zero,
       Sys_blocked_io,
       Undefined_recursive_module,
       min,
       max,
       abs,
       2147483647,
       -2147483648,
       lnot,
       infinity,
       neg_infinity,
       nan,
       max_float,
       min_float,
       epsilon_float,
       symbol_concat,
       char_of_int,
       string_of_bool,
       bool_of_string_opt,
       bool_of_string,
       string_of_int,
       int_of_string_opt,
       string_of_float,
       float_of_string_opt,
       symbol,
       stdin,
       stdout,
       stderr,
       print_char,
       print_string,
       print_bytes,
       print_int,
       print_float,
       print_endline,
       print_newline,
       prerr_char,
       prerr_string,
       prerr_bytes,
       prerr_int,
       prerr_float,
       prerr_endline,
       prerr_newline,
       read_line,
       read_int_opt,
       read_int,
       read_float_opt,
       read_float,
       open_out,
       open_out_bin,
       open_out_gen,
       caml_ml_flush,
       flush_all,
       caml_ml_output_char,
       output_string,
       output_bytes,
       output,
       output_substring,
       caml_ml_output_char,
       runtime.caml_ml_output_int,
       output_value,
       runtime.caml_ml_seek_out,
       runtime.caml_ml_pos_out,
       caml_ml_channel_size,
       close_out,
       close_out_noerr,
       caml_ml_set_binary_mode,
       open_in,
       open_in_bin,
       open_in_gen,
       caml_ml_input_char,
       input_line,
       input,
       really_input,
       really_input_string,
       caml_ml_input_char,
       runtime.caml_ml_input_int,
       runtime.caml_input_value,
       runtime.caml_ml_seek_in,
       runtime.caml_ml_pos_in,
       caml_ml_channel_size,
       caml_ml_close_channel,
       close_in_noerr,
       caml_ml_set_binary_mode,
       [0,
        runtime.caml_ml_seek_out_64,
        runtime.caml_ml_pos_out_64,
        caml_ml_channel_size_64,
        runtime.caml_ml_seek_in_64,
        runtime.caml_ml_pos_in_64,
        caml_ml_channel_size_64],
       string_of_format,
       symbol$0,
       exit,
       at_exit,
       valid_float_lexem,
       unsafe_really_input,
       do_at_exit];
   runtime.caml_register_global(46, Stdlib, "Stdlib");
   return;
  }
  (globalThis));

//# 978 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception,
    global_data = runtime.caml_get_global_data(),
    ocaml_version = "4.14.0",
    ocaml_release = [0, 4, 14, 0, 0],
    Stdlib = global_data.Stdlib,
    executable_name = runtime.caml_sys_executable_name(0),
    os_type = runtime.caml_sys_get_config(0)[1],
    backend_type = [0, "js_of_ocaml"],
    unix = runtime.caml_sys_const_ostype_unix(0),
    win32 = runtime.caml_sys_const_ostype_win32(0),
    cygwin = runtime.caml_sys_const_ostype_cygwin(0),
    max_array_length = runtime.caml_sys_const_max_wosize(0),
    max_floatarray_length = max_array_length / 2 | 0,
    max_string_length = (4 * max_array_length | 0) - 1 | 0;
   function getenv_opt(s){
    try{var _d_ = [0, runtime.caml_sys_getenv(s)]; return _d_;}
    catch(_e_){
     var _c_ = caml_wrap_exception(_e_);
     if(_c_ === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(_c_, 0);
    }
   }
   var interactive = [0, 0];
   function set_signal(sig_num, sig_beh){return 0;}
   var Break = [248, "Stdlib.Sys.Break", runtime.caml_fresh_oo_id(0)];
   function catch_break(on){return on ? 0 : 0;}
   function Make(_b_, _a_){return [0, 1];}
   var
    Immediate64 = [0, Make],
    Stdlib_Sys =
      [0,
       executable_name,
       getenv_opt,
       interactive,
       os_type,
       backend_type,
       unix,
       win32,
       cygwin,
       32,
       32,
       0,
       max_string_length,
       max_array_length,
       max_floatarray_length,
       set_signal,
       -1,
       -2,
       -3,
       -4,
       -5,
       -6,
       -7,
       -8,
       -9,
       -10,
       -11,
       -12,
       -13,
       -14,
       -15,
       -16,
       -17,
       -18,
       -19,
       -20,
       -21,
       -22,
       -23,
       -24,
       -25,
       -26,
       -27,
       -28,
       Break,
       catch_break,
       ocaml_version,
       0,
       ocaml_release,
       runtime.caml_ml_enable_runtime_warnings,
       runtime.caml_ml_runtime_warnings_enabled,
       Immediate64];
   runtime.caml_register_global(4, Stdlib_Sys, "Stdlib__Sys");
   return;
  }
  (globalThis));

//# 1073 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Obj_extension_constructor$1 = "Obj.extension_constructor",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Sys = global_data.Stdlib__Sys;
   function is_block(a){return 1 - (typeof a === "number" ? 1 : 0);}
   var
    double_field = runtime.caml_array_get,
    set_double_field = runtime.caml_array_set,
    custom_tag = 255,
    _a_ = [0, "obj.ml", 95, 4],
    cst_Obj_extension_constructor = cst_Obj_extension_constructor$1,
    cst_Obj_extension_constructor$0 = cst_Obj_extension_constructor$1;
   function info(obj){
    if(caml_obj_tag(obj) !== 247)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
    var
     info = runtime.caml_obj_raw_field(obj, 1),
     arity = 64 === Stdlib_Sys[9] ? info >> 56 : info >> 24,
     start_env = info << 8 >>> 9 | 0;
    return [0, arity, start_env];
   }
   function of_val(x){
    a:
    {
     if(is_block(x) && caml_obj_tag(x) !== 248 && 1 <= x.length - 1){var slot = x[1]; break a;}
     var slot = x;
    }
    a:
    {
     if(is_block(slot) && caml_obj_tag(slot) === 248){var name = slot[1]; break a;}
     var name = caml_call1(Stdlib[1], cst_Obj_extension_constructor$0);
    }
    return caml_obj_tag(name) === 252
            ? slot
            : caml_call1(Stdlib[1], cst_Obj_extension_constructor);
   }
   function name(slot){return slot[1];}
   function id(slot){return slot[2];}
   var
    Extension_constructor = [0, of_val, name, id],
    extension_constructor = Extension_constructor[1],
    extension_name = Extension_constructor[2],
    extension_id = Extension_constructor[3],
    max_ephe_length = Stdlib_Sys[13] - 2 | 0,
    cst_Obj_Ephemeron_create = "Obj.Ephemeron.create",
    cst_Obj_Ephemeron_get_key = "Obj.Ephemeron.get_key",
    cst_Obj_Ephemeron_get_key_copy = "Obj.Ephemeron.get_key_copy",
    cst_Obj_Ephemeron_set_key = "Obj.Ephemeron.set_key",
    cst_Obj_Ephemeron_unset_key = "Obj.Ephemeron.unset_key",
    cst_Obj_Ephemeron_check_key = "Obj.Ephemeron.check_key",
    cst_Obj_Ephemeron_blit_key = "Obj.Ephemeron.blit_key";
   function create(l){
    var _g_ = 0 <= l ? 1 : 0, _h_ = _g_ ? l <= max_ephe_length ? 1 : 0 : _g_;
    if(1 - _h_) caml_call1(Stdlib[1], cst_Obj_Ephemeron_create);
    return runtime.caml_ephe_create(l);
   }
   function length(x){return x.length - 3 | 0;}
   function raise_if_invalid_offset(e, o, msg){
    var
     _d_ = 0 <= o ? 1 : 0,
     _e_ = _d_ ? o < length(e) ? 1 : 0 : _d_,
     _f_ = 1 - _e_;
    return _f_ ? caml_call1(Stdlib[1], msg) : _f_;
   }
   function get_key(e, o){
    raise_if_invalid_offset(e, o, cst_Obj_Ephemeron_get_key);
    return runtime.caml_ephe_get_key(e, o);
   }
   function get_key_copy(e, o){
    raise_if_invalid_offset(e, o, cst_Obj_Ephemeron_get_key_copy);
    return runtime.caml_ephe_get_key_copy(e, o);
   }
   function set_key(e, o, x){
    raise_if_invalid_offset(e, o, cst_Obj_Ephemeron_set_key);
    return runtime.caml_ephe_set_key(e, o, x);
   }
   function unset_key(e, o){
    raise_if_invalid_offset(e, o, cst_Obj_Ephemeron_unset_key);
    return runtime.caml_ephe_unset_key(e, o);
   }
   function check_key(e, o){
    raise_if_invalid_offset(e, o, cst_Obj_Ephemeron_check_key);
    return runtime.caml_ephe_check_key(e, o);
   }
   function blit_key(e1, o1, e2, o2, l){
    if
     (0 <= l
      &&
       0 <= o1
       && (length(e1) - l | 0) >= o1 && 0 <= o2 && (length(e2) - l | 0) >= o2){
     var
      _b_ = 0 !== l ? 1 : 0,
      _c_ = _b_ ? runtime.caml_ephe_blit_key(e1, o1, e2, o2, l) : _b_;
     return _c_;
    }
    return caml_call1(Stdlib[1], cst_Obj_Ephemeron_blit_key);
   }
   var
    Stdlib_Obj =
      [0,
       is_block,
       double_field,
       set_double_field,
       0,
       245,
       246,
       247,
       248,
       249,
       250,
       251,
       251,
       252,
       253,
       254,
       custom_tag,
       custom_tag,
       1000,
       1001,
       1002,
       [0, info],
       Extension_constructor,
       extension_constructor,
       extension_name,
       extension_id,
       [0,
        create,
        length,
        get_key,
        get_key_copy,
        set_key,
        unset_key,
        check_key,
        blit_key,
        runtime.caml_ephe_get_data,
        runtime.caml_ephe_get_data_copy,
        runtime.caml_ephe_set_data,
        runtime.caml_ephe_unset_data,
        runtime.caml_ephe_check_data,
        runtime.caml_ephe_blit_data,
        max_ephe_length]];
   runtime.caml_register_global(13, Stdlib_Obj, "Stdlib__Obj");
   return;
  }
  (globalThis));

//# 1235 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_make_forward = runtime.caml_obj_make_forward,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Obj = global_data.Stdlib__Obj,
    Undefined =
      [248, "CamlinternalLazy.Undefined", runtime.caml_fresh_oo_id(0)];
   function raise_undefined(param){
    throw caml_maybe_attach_backtrace(Undefined, 1);
   }
   function force_lazy_block(blk){
    var closure = blk[1];
    blk[1] = raise_undefined;
    try{
     var result = caml_call1(closure, 0);
     caml_obj_make_forward(blk, result);
     return result;
    }
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     blk[1] = function(param){throw caml_maybe_attach_backtrace(e, 0);};
     throw caml_maybe_attach_backtrace(e, 0);
    }
   }
   function force_val_lazy_block(blk){
    var closure = blk[1];
    blk[1] = raise_undefined;
    var result = caml_call1(closure, 0);
    caml_obj_make_forward(blk, result);
    return result;
   }
   function force(lzv){
    var t = caml_obj_tag(lzv);
    return t === Stdlib_Obj[10]
            ? lzv[1]
            : t !== Stdlib_Obj[6] ? lzv : force_lazy_block(lzv);
   }
   function force_val(lzv){
    var t = caml_obj_tag(lzv);
    return t === Stdlib_Obj[10]
            ? lzv[1]
            : t !== Stdlib_Obj[6] ? lzv : force_val_lazy_block(lzv);
   }
   var
    CamlinternalLazy =
      [0, Undefined, force_lazy_block, force_val_lazy_block, force, force_val];
   runtime.caml_register_global(2, CamlinternalLazy, "CamlinternalLazy");
   return;
  }
  (globalThis));

//# 1300 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, caml_obj_tag = runtime.caml_obj_tag;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    CamlinternalLazy = global_data.CamlinternalLazy,
    Stdlib_Obj = global_data.Stdlib__Obj,
    Undefined = CamlinternalLazy[1],
    force_val = CamlinternalLazy[5];
   function from_fun(f){
    var x = runtime.caml_obj_block(Stdlib_Obj[6], 1);
    x[1] = f;
    return x;
   }
   function from_val(v){
    var t = caml_obj_tag(v);
    if(t !== Stdlib_Obj[10] && t !== Stdlib_Obj[6] && t !== Stdlib_Obj[14])
     return v;
    return runtime.caml_lazy_make_forward(v);
   }
   function is_val(l){
    var _i_ = Stdlib_Obj[6];
    return caml_obj_tag(l) !== _i_ ? 1 : 0;
   }
   function map(f, x){
    return [246,
            function(_f_){
             var
              _g_ = caml_obj_tag(x),
              _h_ =
                250 === _g_
                 ? x[1]
                 : 246 === _g_ ? caml_call1(CamlinternalLazy[2], x) : x;
             return caml_call1(f, _h_);
            }];
   }
   function map_val(f, x){
    if(! is_val(x))
     return [246,
             function(_c_){
              var
               _d_ = caml_obj_tag(x),
               _e_ =
                 250 === _d_
                  ? x[1]
                  : 246 === _d_ ? caml_call1(CamlinternalLazy[2], x) : x;
              return caml_call1(f, _e_);
             }];
    var
     _a_ = caml_obj_tag(x),
     _b_ =
       250 === _a_
        ? x[1]
        : 246 === _a_ ? caml_call1(CamlinternalLazy[2], x) : x;
    return from_val(caml_call1(f, _b_));
   }
   var
    Stdlib_Lazy =
      [0,
       Undefined,
       map,
       is_val,
       from_val,
       map_val,
       from_fun,
       force_val,
       from_fun,
       from_val,
       is_val];
   runtime.caml_register_global(2, Stdlib_Lazy, "Stdlib__Lazy");
   return;
  }
  (globalThis));

//# 1382 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Assert_failure = global_data.Assert_failure,
    CamlinternalAtomic = global_data.CamlinternalAtomic,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Stdlib = global_data.Stdlib,
    Stdlib_Lazy = global_data.Stdlib__Lazy,
    cst_Seq_init = "Seq.init",
    cst_Seq_take = "Seq.take",
    cst_Seq_drop = "Seq.drop";
   function empty(param){return 0;}
   function return$0(x, param){return [0, x, empty];}
   function cons(x, next, param){return [0, x, next];}
   function append(seq1, seq2, param){
    var match = caml_call1(seq1, 0);
    if(! match) return caml_call1(seq2, 0);
    var next = match[2], x = match[1];
    return [0, x, function(_av_){return append(next, seq2, _av_);}];
   }
   function map(f, seq, param){
    var match = caml_call1(seq, 0);
    if(! match) return 0;
    var next = match[2], x = match[1];
    return [0, caml_call1(f, x), function(_au_){return map(f, next, _au_);}];
   }
   function filter_map(f, seq, param){
    var seq$0 = seq;
    for(;;){
     var match = caml_call1(seq$0, 0);
     if(! match) return 0;
     var next = match[2], x = match[1], match$0 = caml_call1(f, x);
     if(match$0){
      var y = match$0[1];
      return [0, y, function(_at_){return filter_map(f, next, _at_);}];
     }
     seq$0 = next;
    }
   }
   function filter(f, seq, param){
    var seq$0 = seq;
    for(;;){
     var match = caml_call1(seq$0, 0);
     if(! match) return 0;
     var next = match[2], x = match[1];
     if(caml_call1(f, x))
      return [0, x, function(_as_){return filter(f, next, _as_);}];
     seq$0 = next;
    }
   }
   function concat(seq, param){
    var match = caml_call1(seq, 0);
    if(! match) return 0;
    var next = match[2], x = match[1];
    return append(x, function(_ar_){return concat(next, _ar_);}, 0);
   }
   function flat_map(f, seq, param){
    var match = caml_call1(seq, 0);
    if(! match) return 0;
    var next = match[2], x = match[1];
    return append
            (caml_call1(f, x),
             function(_aq_){return flat_map(f, next, _aq_);},
             0);
   }
   function fold_left(f, acc, seq){
    var acc$0 = acc, seq$0 = seq;
    for(;;){
     var match = caml_call1(seq$0, 0);
     if(! match) return acc$0;
     var next = match[2], x = match[1], acc$1 = caml_call2(f, acc$0, x);
     acc$0 = acc$1;
     seq$0 = next;
    }
   }
   function iter(f, seq){
    var seq$0 = seq;
    for(;;){
     var match = caml_call1(seq$0, 0);
     if(! match) return 0;
     var next = match[2], x = match[1];
     caml_call1(f, x);
     seq$0 = next;
    }
   }
   function unfold(f, u, param){
    var match = caml_call1(f, u);
    if(! match) return 0;
    var match$0 = match[1], u$0 = match$0[2], x = match$0[1];
    return [0, x, function(_ap_){return unfold(f, u$0, _ap_);}];
   }
   function is_empty(xs){return caml_call1(xs, 0) ? 0 : 1;}
   function uncons(xs){
    var match = caml_call1(xs, 0);
    if(! match) return 0;
    var xs$0 = match[2], x = match[1];
    return [0, [0, x, xs$0]];
   }
   function length(xs$1){
    var accu = 0, xs = xs$1;
    for(;;){
     var match = caml_call1(xs, 0);
     if(! match) return accu;
     var xs$0 = match[2], accu$0 = accu + 1 | 0;
     accu = accu$0;
     xs = xs$0;
    }
   }
   function iteri(f, xs$1){
    var i = 0, xs = xs$1;
    for(;;){
     var match = caml_call1(xs, 0);
     if(! match) return 0;
     var xs$0 = match[2], x = match[1];
     caml_call2(f, i, x);
     var i$0 = i + 1 | 0;
     i = i$0;
     xs = xs$0;
    }
   }
   function fold_lefti(f, accu$1, xs$1){
    var accu = accu$1, i = 0, xs = xs$1;
    for(;;){
     var match = caml_call1(xs, 0);
     if(! match) return accu;
     var
      xs$0 = match[2],
      x = match[1],
      accu$0 = caml_call3(f, accu, i, x),
      i$0 = i + 1 | 0;
     accu = accu$0;
     i = i$0;
     xs = xs$0;
    }
   }
   function for_all(p, xs){
    var xs$0 = xs;
    for(;;){
     var match = caml_call1(xs$0, 0);
     if(! match) return 1;
     var xs$1 = match[2], x = match[1], _ao_ = caml_call1(p, x);
     if(! _ao_) return _ao_;
     xs$0 = xs$1;
    }
   }
   function exists(p, xs){
    var xs$0 = xs;
    for(;;){
     var match = caml_call1(xs$0, 0);
     if(! match) return 0;
     var xs$1 = match[2], x = match[1], _an_ = caml_call1(p, x);
     if(_an_) return _an_;
     xs$0 = xs$1;
    }
   }
   function find(p, xs){
    var xs$0 = xs;
    for(;;){
     var match = caml_call1(xs$0, 0);
     if(! match) return 0;
     var xs$1 = match[2], x = match[1];
     if(caml_call1(p, x)) return [0, x];
     xs$0 = xs$1;
    }
   }
   function find_map(f, xs){
    var xs$0 = xs;
    for(;;){
     var match = caml_call1(xs$0, 0);
     if(! match) return 0;
     var xs$1 = match[2], x = match[1], result = caml_call1(f, x);
     if(result) return result;
     xs$0 = xs$1;
    }
   }
   function iter2(f, xs, ys){
    var xs$0 = xs, ys$0 = ys;
    for(;;){
     var match = caml_call1(xs$0, 0);
     if(! match) return 0;
     var xs$1 = match[2], x = match[1], match$0 = caml_call1(ys$0, 0);
     if(! match$0) return 0;
     var ys$1 = match$0[2], y = match$0[1];
     caml_call2(f, x, y);
     xs$0 = xs$1;
     ys$0 = ys$1;
    }
   }
   function fold_left2(f, accu, xs, ys){
    var accu$0 = accu, xs$0 = xs, ys$0 = ys;
    for(;;){
     var match = caml_call1(xs$0, 0);
     if(! match) return accu$0;
     var xs$1 = match[2], x = match[1], match$0 = caml_call1(ys$0, 0);
     if(! match$0) return accu$0;
     var
      ys$1 = match$0[2],
      y = match$0[1],
      accu$1 = caml_call3(f, accu$0, x, y);
     accu$0 = accu$1;
     xs$0 = xs$1;
     ys$0 = ys$1;
    }
   }
   function for_all2(f, xs, ys){
    var xs$0 = xs, ys$0 = ys;
    for(;;){
     var match = caml_call1(xs$0, 0);
     if(! match) return 1;
     var xs$1 = match[2], x = match[1], match$0 = caml_call1(ys$0, 0);
     if(! match$0) return 1;
     var ys$1 = match$0[2], y = match$0[1], _am_ = caml_call2(f, x, y);
     if(! _am_) return _am_;
     xs$0 = xs$1;
     ys$0 = ys$1;
    }
   }
   function exists2(f, xs, ys){
    var xs$0 = xs, ys$0 = ys;
    for(;;){
     var match = caml_call1(xs$0, 0);
     if(! match) return 0;
     var xs$1 = match[2], x = match[1], match$0 = caml_call1(ys$0, 0);
     if(! match$0) return 0;
     var ys$1 = match$0[2], y = match$0[1], _al_ = caml_call2(f, x, y);
     if(_al_) return _al_;
     xs$0 = xs$1;
     ys$0 = ys$1;
    }
   }
   function equal(eq, xs, ys){
    var xs$0 = xs, ys$0 = ys;
    for(;;){
     var match = caml_call1(xs$0, 0), match$0 = caml_call1(ys$0, 0);
     if(match){
      if(match$0){
       var
        ys$1 = match$0[2],
        y = match$0[1],
        xs$1 = match[2],
        x = match[1],
        _ak_ = caml_call2(eq, x, y);
       if(! _ak_) return _ak_;
       xs$0 = xs$1;
       ys$0 = ys$1;
       continue;
      }
     }
     else if(! match$0) return 1;
     return 0;
    }
   }
   function compare(cmp, xs, ys){
    var xs$0 = xs, ys$0 = ys;
    for(;;){
     var match = caml_call1(xs$0, 0), match$0 = caml_call1(ys$0, 0);
     if(! match) return match$0 ? -1 : 0;
     var xs$1 = match[2], x = match[1];
     if(! match$0) return 1;
     var ys$1 = match$0[2], y = match$0[1], c = caml_call2(cmp, x, y);
     if(0 !== c) return c;
     xs$0 = xs$1;
     ys$0 = ys$1;
    }
   }
   function init_aux(f, i, j, param){
    if(i >= j) return 0;
    var _ai_ = i + 1 | 0;
    return [0,
            caml_call1(f, i),
            function(_aj_){return init_aux(f, _ai_, j, _aj_);}];
   }
   function init(n, f){
    if(0 > n) return caml_call1(Stdlib[1], cst_Seq_init);
    var _ag_ = 0;
    return function(_ah_){return init_aux(f, _ag_, n, _ah_);};
   }
   function repeat(x, param){
    return [0, x, function(_af_){return repeat(x, _af_);}];
   }
   function forever(f, param){
    return [0, caml_call1(f, 0), function(_ae_){return forever(f, _ae_);}];
   }
   function cycle_nonempty(xs, param){
    return append(xs, function(_ad_){return cycle_nonempty(xs, _ad_);}, 0);
   }
   function cycle(xs, param){
    var match = caml_call1(xs, 0);
    if(! match) return 0;
    var xs$0 = match[2], x = match[1];
    function _aa_(_ac_){return cycle_nonempty(xs, _ac_);}
    return [0, x, function(_ab_){return append(xs$0, _aa_, _ab_);}];
   }
   function iterate1(f, x, param){
    var y = caml_call1(f, x);
    return [0, y, function(_$_){return iterate1(f, y, _$_);}];
   }
   function iterate(f, x){
    function next(___){return iterate1(f, x, ___);}
    return function(_Z_){return [0, x, next];};
   }
   function mapi_aux(f, i, xs, param){
    var match = caml_call1(xs, 0);
    if(! match) return 0;
    var xs$0 = match[2], x = match[1], _X_ = i + 1 | 0;
    return [0,
            caml_call2(f, i, x),
            function(_Y_){return mapi_aux(f, _X_, xs$0, _Y_);}];
   }
   function mapi(f, xs){
    var _V_ = 0;
    return function(_W_){return mapi_aux(f, _V_, xs, _W_);};
   }
   function tail_scan(f, s, xs, param){
    var match = caml_call1(xs, 0);
    if(! match) return 0;
    var xs$0 = match[2], x = match[1], s$0 = caml_call2(f, s, x);
    return [0, s$0, function(_U_){return tail_scan(f, s$0, xs$0, _U_);}];
   }
   function scan(f, s, xs){
    function next(_T_){return tail_scan(f, s, xs, _T_);}
    return function(_S_){return [0, s, next];};
   }
   function take_aux(n, xs){
    return 0 === n
            ? empty
            : function
             (param){
              var match = caml_call1(xs, 0);
              if(! match) return 0;
              var xs$0 = match[2], x = match[1];
              return [0, x, take_aux(n - 1 | 0, xs$0)];
             };
   }
   function take(n, xs){
    if(n < 0) caml_call1(Stdlib[1], cst_Seq_take);
    return take_aux(n, xs);
   }
   function drop(n, xs){
    return 0 <= n
            ? 0
              === n
              ? xs
              : function
               (param){
                var n$0 = n, xs$0 = xs;
                for(;;){
                 var match = caml_call1(xs$0, 0);
                 if(! match) return 0;
                 var xs$1 = match[2], n$1 = n$0 - 1 | 0;
                 if(0 === n$1) return caml_call1(xs$1, 0);
                 n$0 = n$1;
                 xs$0 = xs$1;
                }
               }
            : caml_call1(Stdlib[1], cst_Seq_drop);
   }
   function take_while(p, xs, param){
    var match = caml_call1(xs, 0);
    if(! match) return 0;
    var xs$0 = match[2], x = match[1];
    return caml_call1(p, x)
            ? [0, x, function(_R_){return take_while(p, xs$0, _R_);}]
            : 0;
   }
   function drop_while(p, xs, param){
    var xs$0 = xs;
    for(;;){
     var node = caml_call1(xs$0, 0);
     if(! node) return 0;
     var xs$1 = node[2], x = node[1];
     if(! caml_call1(p, x)) return node;
     xs$0 = xs$1;
    }
   }
   function group(eq, xs, param){
    var match = caml_call1(xs, 0);
    if(! match) return 0;
    var xs$0 = match[2], x = match[1], _K_ = caml_call1(eq, x);
    function _L_(_Q_){return drop_while(_K_, xs$0, _Q_);}
    var _M_ = caml_call1(eq, x);
    function next(_P_){return take_while(_M_, xs$0, _P_);}
    return [0,
            function(_O_){return [0, x, next];},
            function(_N_){return group(eq, _L_, _N_);}];
   }
   var
    Forced_twice =
      [248, "Stdlib.Seq.Forced_twice", runtime.caml_fresh_oo_id(0)],
    to_lazy = Stdlib_Lazy[6],
    _a_ = [0, "seq.ml", 596, 4];
   function failure(param){
    throw caml_maybe_attach_backtrace(Forced_twice, 1);
   }
   function memoize(xs){
    function s$0(param){
     var match = caml_call1(xs, 0);
     if(! match) return 0;
     var xs$0 = match[2], x = match[1];
     return [0, x, memoize(xs$0)];
    }
    var s = caml_call1(to_lazy, s$0);
    return function(_J_){
     var _I_ = runtime.caml_obj_tag(s);
     return 250 === _I_
             ? s[1]
             : 246 === _I_ ? caml_call1(CamlinternalLazy[2], s) : s;};
   }
   function once(xs){
    function f(param){
     var match = caml_call1(xs, 0);
     if(! match) return 0;
     var xs$0 = match[2], x = match[1];
     return [0, x, once(xs$0)];
    }
    var action = caml_call1(CamlinternalAtomic[1], f);
    return function(param){
     var f = caml_call2(CamlinternalAtomic[4], action, failure);
     return caml_call1(f, 0);};
   }
   function zip(xs, ys, param){
    var match = caml_call1(xs, 0);
    if(! match) return 0;
    var xs$0 = match[2], x = match[1], match$0 = caml_call1(ys, 0);
    if(! match$0) return 0;
    var ys$0 = match$0[2], y = match$0[1];
    return [0, [0, x, y], function(_H_){return zip(xs$0, ys$0, _H_);}];
   }
   function map2(f, xs, ys, param){
    var match = caml_call1(xs, 0);
    if(! match) return 0;
    var xs$0 = match[2], x = match[1], match$0 = caml_call1(ys, 0);
    if(! match$0) return 0;
    var ys$0 = match$0[2], y = match$0[1];
    return [0,
            caml_call2(f, x, y),
            function(_G_){return map2(f, xs$0, ys$0, _G_);}];
   }
   function interleave(xs, ys, param){
    var match = caml_call1(xs, 0);
    if(! match) return caml_call1(ys, 0);
    var xs$0 = match[2], x = match[1];
    return [0, x, function(_F_){return interleave(ys, xs$0, _F_);}];
   }
   function sorted_merge1(cmp, x, xs, y, ys){
    return 0 < caml_call2(cmp, x, y)
            ? [0,
              y,
              function(_D_){
               var match = caml_call1(ys, 0);
               if(! match) return [0, x, xs];
               var ys$0 = match[2], y = match[1];
               return sorted_merge1(cmp, x, xs, y, ys$0);
              }]
            : [0,
              x,
              function(_E_){
               var match = caml_call1(xs, 0);
               if(! match) return [0, y, ys];
               var xs$0 = match[2], x = match[1];
               return sorted_merge1(cmp, x, xs$0, y, ys);
              }];
   }
   function sorted_merge(cmp, xs, ys, param){
    var match = caml_call1(xs, 0), match$0 = caml_call1(ys, 0);
    if(match){
     if(match$0){
      var ys$0 = match$0[2], y = match$0[1], xs$0 = match[2], x = match[1];
      return sorted_merge1(cmp, x, xs$0, y, ys$0);
     }
     var c = match;
    }
    else{if(! match$0) return 0; var c = match$0;}
    return c;
   }
   function map_fst(xys, param){
    var match = caml_call1(xys, 0);
    if(! match) return 0;
    var xys$0 = match[2], x = match[1][1];
    return [0, x, function(_C_){return map_fst(xys$0, _C_);}];
   }
   function map_snd(xys, param){
    var match = caml_call1(xys, 0);
    if(! match) return 0;
    var xys$0 = match[2], y = match[1][2];
    return [0, y, function(_B_){return map_snd(xys$0, _B_);}];
   }
   function unzip(xys){
    return [0,
            function(_A_){return map_fst(xys, _A_);},
            function(_z_){return map_snd(xys, _z_);}];
   }
   function filter_map_find_left_map(f, xs, param){
    var xs$0 = xs;
    for(;;){
     var match = caml_call1(xs$0, 0);
     if(! match) return 0;
     var xs$1 = match[2], x = match[1], match$0 = caml_call1(f, x);
     if(0 === match$0[0]){
      var y = match$0[1];
      return [0,
              y,
              function(_y_){return filter_map_find_left_map(f, xs$1, _y_);}];
     }
     xs$0 = xs$1;
    }
   }
   function filter_map_find_right_map(f, xs, param){
    var xs$0 = xs;
    for(;;){
     var match = caml_call1(xs$0, 0);
     if(! match) return 0;
     var xs$1 = match[2], x = match[1], match$0 = caml_call1(f, x);
     if(0 !== match$0[0]){
      var z = match$0[1];
      return [0,
              z,
              function(_x_){return filter_map_find_right_map(f, xs$1, _x_);}];
     }
     xs$0 = xs$1;
    }
   }
   function partition_map(f, xs){
    return [0,
            function(_w_){return filter_map_find_left_map(f, xs, _w_);},
            function(_v_){return filter_map_find_right_map(f, xs, _v_);}];
   }
   function partition(p, xs){
    function _s_(x){return 1 - caml_call1(p, x);}
    return [0,
            function(_u_){return filter(p, xs, _u_);},
            function(_t_){return filter(_s_, xs, _t_);}];
   }
   function peel(xss){
    return unzip(function(_r_){return filter_map(uncons, xss, _r_);});
   }
   function transpose(xss, param){
    var match = peel(xss), tails = match[2], heads = match[1];
    if(! is_empty(heads))
     return [0, heads, function(_q_){return transpose(tails, _q_);}];
    if(is_empty(tails)) return 0;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
   }
   function _b_(remainders, xss, param){
    var match = caml_call1(xss, 0);
    if(! match) return transpose(remainders, 0);
    var xss$0 = match[2], xs = match[1], match$0 = caml_call1(xs, 0);
    if(match$0){
     var
      xs$0 = match$0[2],
      x = match$0[1],
      match$1 = peel(remainders),
      tails = match$1[2],
      heads = match$1[1],
      _l_ = function(_p_){return [0, xs$0, tails];};
     return [0,
             function(_o_){return [0, x, heads];},
             function(_n_){return _b_(_l_, xss$0, _n_);}];
    }
    var
     match$2 = peel(remainders),
     tails$0 = match$2[2],
     heads$0 = match$2[1];
    return [0, heads$0, function(_m_){return _b_(tails$0, xss$0, _m_);}];
   }
   function map_product(f, xs, ys){
    function _f_(x){
     function _j_(y){return caml_call2(f, x, y);}
     return function(_k_){return map(_j_, ys, _k_);};
    }
    function xss(_i_){return map(_f_, xs, _i_);}
    function _e_(_h_){return _b_(empty, xss, _h_);}
    return function(_g_){return concat(_e_, _g_);};
   }
   function product(xs, ys){
    return map_product(function(x, y){return [0, x, y];}, xs, ys);
   }
   function of_dispenser(it){
    function c(param){
     var match = caml_call1(it, 0);
     if(! match) return 0;
     var x = match[1];
     return [0, x, c];
    }
    return c;
   }
   function to_dispenser(xs){
    var s = [0, xs];
    return function(param){
     var match = caml_call1(s[1], 0);
     if(! match) return 0;
     var xs = match[2], x = match[1];
     s[1] = xs;
     return [0, x];};
   }
   function ints(i, param){
    var _c_ = i + 1 | 0;
    return [0, i, function(_d_){return ints(_c_, _d_);}];
   }
   var
    Stdlib_Seq =
      [0,
       is_empty,
       uncons,
       length,
       iter,
       fold_left,
       iteri,
       fold_lefti,
       for_all,
       exists,
       find,
       find_map,
       iter2,
       fold_left2,
       for_all2,
       exists2,
       equal,
       compare,
       empty,
       return$0,
       cons,
       init,
       unfold,
       repeat,
       forever,
       cycle,
       iterate,
       map,
       mapi,
       filter,
       filter_map,
       scan,
       take,
       drop,
       take_while,
       drop_while,
       group,
       memoize,
       Forced_twice,
       once,
       transpose,
       append,
       concat,
       flat_map,
       flat_map,
       zip,
       map2,
       interleave,
       sorted_merge,
       product,
       map_product,
       unzip,
       unzip,
       partition_map,
       partition,
       of_dispenser,
       to_dispenser,
       ints];
   runtime.caml_register_global(10, Stdlib_Seq, "Stdlib__Seq");
   return;
  }
  (globalThis));

//# 2338 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_bytes_unsafe_set = runtime.caml_bytes_unsafe_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_string_of_bytes = runtime.caml_string_of_bytes;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "\\\\",
    cst$0 = "\\'",
    Stdlib = global_data.Stdlib,
    cst_Char_chr = "Char.chr",
    cst_b = "\\b",
    cst_t = "\\t",
    cst_n = "\\n",
    cst_r = "\\r";
   function chr(n){
    if(0 <= n && 255 >= n) return n;
    return caml_call1(Stdlib[1], cst_Char_chr);
   }
   function escaped(c){
    a:
    {
     if(40 <= c){
      if(92 === c) return cst;
      if(127 > c) break a;
     }
     else{
      if(32 <= c){if(39 <= c) return cst$0; break a;}
      if(14 > c)
       switch(c){
         case 8:
          return cst_b;
         case 9:
          return cst_t;
         case 10:
          return cst_n;
         case 13:
          return cst_r;
       }
     }
     var s = caml_create_bytes(4);
     caml_bytes_unsafe_set(s, 0, 92);
     caml_bytes_unsafe_set(s, 1, 48 + (c / 100 | 0) | 0);
     caml_bytes_unsafe_set(s, 2, 48 + ((c / 10 | 0) % 10 | 0) | 0);
     caml_bytes_unsafe_set(s, 3, 48 + (c % 10 | 0) | 0);
     return caml_string_of_bytes(s);
    }
    var s$0 = caml_create_bytes(1);
    caml_bytes_unsafe_set(s$0, 0, c);
    return caml_string_of_bytes(s$0);
   }
   function lowercase(c){
    var _b_ = c - 192 | 0;
    a:
    {
     if(30 < _b_ >>> 0){
      if(25 < _b_ + 127 >>> 0) break a;
     }
     else if(23 === _b_) break a;
     return c + 32 | 0;
    }
    return c;
   }
   function uppercase(c){
    var _a_ = c - 224 | 0;
    a:
    {
     if(30 < _a_ >>> 0){
      if(25 < _a_ + 127 >>> 0) break a;
     }
     else if(23 === _a_) break a;
     return c - 32 | 0;
    }
    return c;
   }
   function lowercase_ascii(c){return 25 < c - 65 >>> 0 ? c : c + 32 | 0;}
   function uppercase_ascii(c){return 25 < c - 97 >>> 0 ? c : c - 32 | 0;}
   function compare(c1, c2){return c1 - c2 | 0;}
   function equal(c1, c2){return 0 === (c1 - c2 | 0) ? 1 : 0;}
   var
    Stdlib_Char =
      [0,
       chr,
       escaped,
       lowercase,
       uppercase,
       lowercase_ascii,
       uppercase_ascii,
       compare,
       equal];
   runtime.caml_register_global(8, Stdlib_Char, "Stdlib__Char");
   return;
  }
  (globalThis));

//# 2443 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_uchar_ml = "uchar.ml",
    caml_format_int = runtime.caml_format_int,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    err_no_pred = "U+0000 has no predecessor",
    err_no_succ = "U+10FFFF has no successor",
    Assert_failure = global_data.Assert_failure,
    Stdlib = global_data.Stdlib,
    cst_is_not_an_Unicode_scalar_v = " is not an Unicode scalar value",
    cst_is_not_a_latin1_character = " is not a latin1 character",
    cst_U = "U+",
    lo_bound = 55295,
    hi_bound = 57344;
   function succ(u){
    return u === 55295
            ? hi_bound
            : u === 1114111 ? caml_call1(Stdlib[1], err_no_succ) : u + 1 | 0;
   }
   function pred(u){
    return u === 57344
            ? lo_bound
            : u === 0 ? caml_call1(Stdlib[1], err_no_pred) : u - 1 | 0;
   }
   function is_valid(i){
    var _n_ = 0 <= i ? 1 : 0, _o_ = _n_ ? i <= 55295 ? 1 : 0 : _n_;
    if(_o_)
     var _p_ = _o_;
    else
     var _q_ = 57344 <= i ? 1 : 0, _p_ = _q_ ? i <= 1114111 ? 1 : 0 : _q_;
    return _p_;
   }
   function of_int(i){
    if(is_valid(i)) return i;
    var
     _m_ =
       caml_call2
        (Stdlib[28], caml_format_int("%X", i), cst_is_not_an_Unicode_scalar_v);
    return caml_call1(Stdlib[1], _m_);
   }
   function is_char(u){return u < 256 ? 1 : 0;}
   function of_char(c){return c;}
   function to_char(u){
    if(255 >= u) return u;
    var
     _k_ =
       caml_call2
        (Stdlib[28],
         caml_format_int("%04X", u),
         cst_is_not_a_latin1_character),
     _l_ = caml_call2(Stdlib[28], cst_U, _k_);
    return caml_call1(Stdlib[1], _l_);
   }
   function unsafe_to_char(_j_){return _j_;}
   function equal(_i_, _h_){return _i_ === _h_ ? 1 : 0;}
   var
    compare = runtime.caml_int_compare,
    _a_ = [0, cst_uchar_ml, 85, 7],
    _b_ = [0, cst_uchar_ml, 80, 18],
    _c_ = [0, cst_uchar_ml, 91, 7],
    _d_ = [0, cst_uchar_ml, 88, 18];
   function hash(_g_){return _g_;}
   function utf_decode_is_valid(d){return 1 === (d >>> 27 | 0) ? 1 : 0;}
   function utf_decode_length(d){return (d >>> 24 | 0) & 7;}
   function utf_decode_uchar(d){return d & 16777215;}
   function utf_decode(n, u){return (8 | n) << 24 | u;}
   function utf_decode_invalid(n){return n << 24 | 65533;}
   function utf_8_byte_length(u){
    if(0 > u) throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
    if(127 >= u) return 1;
    if(2047 >= u) return 2;
    if(65535 >= u) return 3;
    if(1114111 < u)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
    return 4;
   }
   function utf_16_byte_length(u){
    if(0 > u) throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
    if(65535 >= u) return 2;
    if(1114111 < u)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
    return 4;
   }
   var
    Stdlib_Uchar =
      [0,
       0,
       1114111,
       65279,
       65533,
       succ,
       pred,
       is_valid,
       of_int,
       function(_f_){return _f_;},
       function(_e_){return _e_;},
       is_char,
       of_char,
       to_char,
       unsafe_to_char,
       equal,
       compare,
       hash,
       utf_decode_is_valid,
       utf_decode_uchar,
       utf_decode_length,
       utf_decode,
       utf_decode_invalid,
       utf_8_byte_length,
       utf_16_byte_length];
   runtime.caml_register_global(13, Stdlib_Uchar, "Stdlib__Uchar");
   return;
  }
  (globalThis));

//# 2575 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_List_nth$1 = "List.nth",
    caml_compare = runtime.caml_compare,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib_Sys = global_data.Stdlib__Sys,
    cst_hd = "hd",
    cst_tl = "tl",
    cst_nth = "nth",
    cst_List_nth = cst_List_nth$1,
    cst_List_nth$0 = cst_List_nth$1;
   function length(l$0){
    var len = 0, param = l$0;
    for(;;){
     if(! param) return len;
     var l = param[2], len$0 = len + 1 | 0;
     len = len$0;
     param = l;
    }
   }
   function cons(a, l){return [0, a, l];}
   function hd(param){
    if(! param) return caml_call1(Stdlib[2], cst_hd);
    var a = param[1];
    return a;
   }
   function tl(param){
    if(! param) return caml_call1(Stdlib[2], cst_tl);
    var l = param[2];
    return l;
   }
   function nth(l, n){
    if(0 > n) return caml_call1(Stdlib[1], cst_List_nth);
    var l$0 = l, n$0 = n;
    for(;;){
     if(! l$0) return caml_call1(Stdlib[2], cst_nth);
     var l$1 = l$0[2], a = l$0[1];
     if(0 === n$0) return a;
     var n$1 = n$0 - 1 | 0;
     l$0 = l$1;
     n$0 = n$1;
    }
   }
   function nth_opt(l, n){
    if(0 > n) return caml_call1(Stdlib[1], cst_List_nth$0);
    var l$0 = l, n$0 = n;
    for(;;){
     if(! l$0) return 0;
     var l$1 = l$0[2], a = l$0[1];
     if(0 === n$0) return [0, a];
     var n$1 = n$0 - 1 | 0;
     l$0 = l$1;
     n$0 = n$1;
    }
   }
   var append = Stdlib[37];
   function rev_append(l1, l2){
    var l1$0 = l1, l2$0 = l2;
    for(;;){
     if(! l1$0) return l2$0;
     var l1$1 = l1$0[2], a = l1$0[1], l2$1 = [0, a, l2$0];
     l1$0 = l1$1;
     l2$0 = l2$1;
    }
   }
   function rev(l){return rev_append(l, 0);}
   function init_aux(i, n, f){
    if(n <= i) return 0;
    var r = caml_call1(f, i);
    return [0, r, init_aux(i + 1 | 0, n, f)];
   }
   var
    cst_List_map2 = "List.map2",
    cst_List_iter2 = "List.iter2",
    cst_List_fold_left2 = "List.fold_left2",
    cst_List_fold_right2 = "List.fold_right2",
    cst_List_for_all2 = "List.for_all2",
    cst_List_exists2 = "List.exists2",
    _b_ = [0, 0, 0],
    cst_List_combine = "List.combine",
    cst_List_rev_map2 = "List.rev_map2",
    cst_List_init = "List.init",
    rev_init_threshold = typeof Stdlib_Sys[5] === "number" ? 10000 : 50;
   function init(len, f){
    if(0 > len) return caml_call1(Stdlib[1], cst_List_init);
    if(rev_init_threshold >= len) return init_aux(0, len, f);
    var acc = 0, i = 0;
    for(;;){
     if(len <= i) return rev(acc);
     var i$0 = i + 1 | 0, acc$0 = [0, caml_call1(f, i), acc];
     acc = acc$0;
     i = i$0;
    }
   }
   function flatten(param){
    if(! param) return 0;
    var r = param[2], l = param[1], _H_ = flatten(r);
    return caml_call2(Stdlib[37], l, _H_);
   }
   function map(f, param){
    if(! param) return 0;
    var l = param[2], a = param[1], r = caml_call1(f, a);
    return [0, r, map(f, l)];
   }
   function _a_(i, f, param){
    if(! param) return 0;
    var l = param[2], a = param[1], r = caml_call2(f, i, a);
    return [0, r, _a_(i + 1 | 0, f, l)];
   }
   function mapi(f, l){return _a_(0, f, l);}
   function rev_map(f, l){
    var accu = 0, param = l;
    for(;;){
     if(! param) return accu;
     var l$0 = param[2], a = param[1], accu$0 = [0, caml_call1(f, a), accu];
     accu = accu$0;
     param = l$0;
    }
   }
   function iter(f, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], a = param$0[1];
     caml_call1(f, a);
     param$0 = l;
    }
   }
   function iteri(f, l$0){
    var i = 0, param = l$0;
    for(;;){
     if(! param) return 0;
     var l = param[2], a = param[1];
     caml_call2(f, i, a);
     var i$0 = i + 1 | 0;
     i = i$0;
     param = l;
    }
   }
   function fold_left(f, accu, l){
    var accu$0 = accu, l$0 = l;
    for(;;){
     if(! l$0) return accu$0;
     var l$1 = l$0[2], a = l$0[1], accu$1 = caml_call2(f, accu$0, a);
     accu$0 = accu$1;
     l$0 = l$1;
    }
   }
   function fold_right(f, l, accu){
    if(! l) return accu;
    var l$0 = l[2], a = l[1];
    return caml_call2(f, a, fold_right(f, l$0, accu));
   }
   function map2(f, l1, l2){
    if(l1){
     if(l2){
      var
       l2$0 = l2[2],
       a2 = l2[1],
       l1$0 = l1[2],
       a1 = l1[1],
       r = caml_call2(f, a1, a2);
      return [0, r, map2(f, l1$0, l2$0)];
     }
    }
    else if(! l2) return 0;
    return caml_call1(Stdlib[1], cst_List_map2);
   }
   function rev_map2(f, l1, l2){
    var accu = 0, l1$0 = l1, l2$0 = l2;
    for(;;){
     if(l1$0){
      if(l2$0){
       var
        l2$1 = l2$0[2],
        a2 = l2$0[1],
        l1$1 = l1$0[2],
        a1 = l1$0[1],
        accu$0 = [0, caml_call2(f, a1, a2), accu];
       accu = accu$0;
       l1$0 = l1$1;
       l2$0 = l2$1;
       continue;
      }
     }
     else if(! l2$0) return accu;
     return caml_call1(Stdlib[1], cst_List_rev_map2);
    }
   }
   function iter2(f, l1, l2){
    var l1$0 = l1, l2$0 = l2;
    for(;;){
     if(l1$0){
      if(l2$0){
       var l2$1 = l2$0[2], a2 = l2$0[1], l1$1 = l1$0[2], a1 = l1$0[1];
       caml_call2(f, a1, a2);
       l1$0 = l1$1;
       l2$0 = l2$1;
       continue;
      }
     }
     else if(! l2$0) return 0;
     return caml_call1(Stdlib[1], cst_List_iter2);
    }
   }
   function fold_left2(f, accu, l1, l2){
    var accu$0 = accu, l1$0 = l1, l2$0 = l2;
    for(;;){
     if(l1$0){
      if(l2$0){
       var
        l2$1 = l2$0[2],
        a2 = l2$0[1],
        l1$1 = l1$0[2],
        a1 = l1$0[1],
        accu$1 = caml_call3(f, accu$0, a1, a2);
       accu$0 = accu$1;
       l1$0 = l1$1;
       l2$0 = l2$1;
       continue;
      }
     }
     else if(! l2$0) return accu$0;
     return caml_call1(Stdlib[1], cst_List_fold_left2);
    }
   }
   function fold_right2(f, l1, l2, accu){
    if(l1){
     if(l2){
      var l2$0 = l2[2], a2 = l2[1], l1$0 = l1[2], a1 = l1[1];
      return caml_call3(f, a1, a2, fold_right2(f, l1$0, l2$0, accu));
     }
    }
    else if(! l2) return accu;
    return caml_call1(Stdlib[1], cst_List_fold_right2);
   }
   function for_all(p, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 1;
     var l = param$0[2], a = param$0[1], _G_ = caml_call1(p, a);
     if(! _G_) return _G_;
     param$0 = l;
    }
   }
   function exists(p, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], a = param$0[1], _F_ = caml_call1(p, a);
     if(_F_) return _F_;
     param$0 = l;
    }
   }
   function for_all2(p, l1, l2){
    var l1$0 = l1, l2$0 = l2;
    for(;;){
     if(l1$0){
      if(l2$0){
       var
        l2$1 = l2$0[2],
        a2 = l2$0[1],
        l1$1 = l1$0[2],
        a1 = l1$0[1],
        _E_ = caml_call2(p, a1, a2);
       if(! _E_) return _E_;
       l1$0 = l1$1;
       l2$0 = l2$1;
       continue;
      }
     }
     else if(! l2$0) return 1;
     return caml_call1(Stdlib[1], cst_List_for_all2);
    }
   }
   function exists2(p, l1, l2){
    var l1$0 = l1, l2$0 = l2;
    for(;;){
     if(l1$0){
      if(l2$0){
       var
        l2$1 = l2$0[2],
        a2 = l2$0[1],
        l1$1 = l1$0[2],
        a1 = l1$0[1],
        _D_ = caml_call2(p, a1, a2);
       if(_D_) return _D_;
       l1$0 = l1$1;
       l2$0 = l2$1;
       continue;
      }
     }
     else if(! l2$0) return 0;
     return caml_call1(Stdlib[1], cst_List_exists2);
    }
   }
   function mem(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var
      l = param$0[2],
      a = param$0[1],
      _C_ = 0 === caml_compare(a, x) ? 1 : 0;
     if(_C_) return _C_;
     param$0 = l;
    }
   }
   function memq(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], a = param$0[1], _B_ = a === x ? 1 : 0;
     if(_B_) return _B_;
     param$0 = l;
    }
   }
   function assoc(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var l = param$0[2], match = param$0[1], b = match[2], a = match[1];
     if(0 === caml_compare(a, x)) return b;
     param$0 = l;
    }
   }
   function assoc_opt(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], match = param$0[1], b = match[2], a = match[1];
     if(0 === caml_compare(a, x)) return [0, b];
     param$0 = l;
    }
   }
   function assq(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var l = param$0[2], match = param$0[1], b = match[2], a = match[1];
     if(a === x) return b;
     param$0 = l;
    }
   }
   function assq_opt(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], match = param$0[1], b = match[2], a = match[1];
     if(a === x) return [0, b];
     param$0 = l;
    }
   }
   function mem_assoc(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var
      l = param$0[2],
      a = param$0[1][1],
      _A_ = 0 === caml_compare(a, x) ? 1 : 0;
     if(_A_) return _A_;
     param$0 = l;
    }
   }
   function mem_assq(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], a = param$0[1][1], _z_ = a === x ? 1 : 0;
     if(_z_) return _z_;
     param$0 = l;
    }
   }
   function remove_assoc(x, param){
    if(! param) return 0;
    var l = param[2], pair = param[1], a = pair[1];
    return 0 === caml_compare(a, x) ? l : [0, pair, remove_assoc(x, l)];
   }
   function remove_assq(x, param){
    if(! param) return 0;
    var l = param[2], pair = param[1], a = pair[1];
    return a === x ? l : [0, pair, remove_assq(x, l)];
   }
   function find(p, param){
    var param$0 = param;
    for(;;){
     if(! param$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var l = param$0[2], x = param$0[1];
     if(caml_call1(p, x)) return x;
     param$0 = l;
    }
   }
   function find_opt(p, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], x = param$0[1];
     if(caml_call1(p, x)) return [0, x];
     param$0 = l;
    }
   }
   function find_map(f, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], x = param$0[1], result = caml_call1(f, x);
     if(result) return result;
     param$0 = l;
    }
   }
   function find_all(p){
    var accu = 0;
    return function(param$0){
     var accu$0 = accu, param = param$0;
     for(;;){
      if(! param) return rev(accu$0);
      var l = param[2], x = param[1];
      if(caml_call1(p, x)){
       var accu$1 = [0, x, accu$0];
       accu$0 = accu$1;
       param = l;
      }
      else
       param = l;
     }};
   }
   function filteri(p, l){
    var i = 0, acc = 0, param = l;
    for(;;){
     if(! param) return rev(acc);
     var
      l$0 = param[2],
      x = param[1],
      acc$0 = caml_call2(p, i, x) ? [0, x, acc] : acc,
      i$0 = i + 1 | 0;
     i = i$0;
     acc = acc$0;
     param = l$0;
    }
   }
   function filter_map(f){
    var accu = 0;
    return function(param$0){
     var accu$0 = accu, param = param$0;
     for(;;){
      if(! param) return rev(accu$0);
      var l = param[2], x = param[1], match = caml_call1(f, x);
      if(match){
       var v = match[1], accu$1 = [0, v, accu$0];
       accu$0 = accu$1;
       param = l;
      }
      else
       param = l;
     }};
   }
   function concat_map(f, l){
    var acc = 0, param = l;
    for(;;){
     if(! param) return rev(acc);
     var
      l$0 = param[2],
      x = param[1],
      xs = caml_call1(f, x),
      acc$0 = rev_append(xs, acc);
     acc = acc$0;
     param = l$0;
    }
   }
   function fold_left_map(f, accu, l){
    var accu$0 = accu, l_accu = 0, param = l;
    for(;;){
     if(! param) return [0, accu$0, rev(l_accu)];
     var
      l$0 = param[2],
      x = param[1],
      match = caml_call2(f, accu$0, x),
      x$0 = match[2],
      accu$1 = match[1],
      l_accu$0 = [0, x$0, l_accu];
     accu$0 = accu$1;
     l_accu = l_accu$0;
     param = l$0;
    }
   }
   function partition(p, l){
    var yes = 0, no = 0, param = l;
    for(;;){
     if(! param){var _y_ = rev(no); return [0, rev(yes), _y_];}
     var l$0 = param[2], x = param[1];
     if(caml_call1(p, x)){
      var yes$0 = [0, x, yes];
      yes = yes$0;
      param = l$0;
     }
     else{var no$0 = [0, x, no]; no = no$0; param = l$0;}
    }
   }
   function partition_map(p, l){
    var left = 0, right = 0, param = l;
    for(;;){
     if(! param){var _x_ = rev(right); return [0, rev(left), _x_];}
     var l$0 = param[2], x = param[1], match = caml_call1(p, x);
     if(0 === match[0]){
      var v = match[1], left$0 = [0, v, left];
      left = left$0;
      param = l$0;
     }
     else{
      var v$0 = match[1], right$0 = [0, v$0, right];
      right = right$0;
      param = l$0;
     }
    }
   }
   function split(param){
    if(! param) return _b_;
    var
     l = param[2],
     match = param[1],
     y = match[2],
     x = match[1],
     match$0 = split(l),
     ry = match$0[2],
     rx = match$0[1];
    return [0, [0, x, rx], [0, y, ry]];
   }
   function combine(l1, l2){
    if(l1){
     if(l2){
      var l2$0 = l2[2], a2 = l2[1], l1$0 = l1[2], a1 = l1[1];
      return [0, [0, a1, a2], combine(l1$0, l2$0)];
     }
    }
    else if(! l2) return 0;
    return caml_call1(Stdlib[1], cst_List_combine);
   }
   function merge(cmp, l1, l2){
    if(! l1) return l2;
    if(! l2) return l1;
    var t2 = l2[2], h2 = l2[1], t1 = l1[2], h1 = l1[1];
    return 0 < caml_call2(cmp, h1, h2)
            ? [0, h2, merge(cmp, l1, t2)]
            : [0, h1, merge(cmp, t1, l2)];
   }
   function stable_sort(cmp, l){
    function sort(n, l){
     if(2 === n){
      if(l){
       var match = l[2];
       if(match){
        var
         tl = match[2],
         x2 = match[1],
         x1 = l[1],
         s =
           0 < caml_call2(cmp, x1, x2)
            ? [0, x2, [0, x1, 0]]
            : [0, x1, [0, x2, 0]];
        return [0, s, tl];
       }
      }
     }
     else if(3 === n && l){
      var _w_ = l[2];
      if(_w_){
       var match$2 = _w_[2];
       if(match$2){
        var
         tl$1 = match$2[2],
         x3 = match$2[1],
         x2$0 = _w_[1],
         x1$0 = l[1],
         s$0 =
           0 < caml_call2(cmp, x1$0, x2$0)
            ? 0
              < caml_call2(cmp, x1$0, x3)
              ? 0
                < caml_call2(cmp, x2$0, x3)
                ? [0, x3, [0, x2$0, [0, x1$0, 0]]]
                : [0, x2$0, [0, x3, [0, x1$0, 0]]]
              : [0, x2$0, [0, x1$0, [0, x3, 0]]]
            : 0
              < caml_call2(cmp, x2$0, x3)
              ? 0
                < caml_call2(cmp, x1$0, x3)
                ? [0, x3, [0, x1$0, [0, x2$0, 0]]]
                : [0, x1$0, [0, x3, [0, x2$0, 0]]]
              : [0, x1$0, [0, x2$0, [0, x3, 0]]];
        return [0, s$0, tl$1];
       }
      }
     }
     var
      n1 = n >> 1,
      n2 = n - n1 | 0,
      match$0 = rev_sort(n1, l),
      l2$0 = match$0[2],
      s1 = match$0[1],
      match$1 = rev_sort(n2, l2$0),
      tl$0 = match$1[2],
      s2 = match$1[1],
      l1 = s1,
      l2 = s2,
      accu = 0;
     for(;;){
      if(l1){
       if(l2){
        var t2 = l2[2], h2 = l2[1], t1 = l1[2], h1 = l1[1];
        if(0 < caml_call2(cmp, h1, h2)){
         var accu$0 = [0, h1, accu];
         l1 = t1;
         accu = accu$0;
         continue;
        }
        var accu$1 = [0, h2, accu];
        l2 = t2;
        accu = accu$1;
        continue;
       }
       var _v_ = rev_append(l1, accu);
      }
      else
       var _v_ = rev_append(l2, accu);
      return [0, _v_, tl$0];
     }
    }
    function rev_sort(n, l){
     if(2 === n){
      if(l){
       var match = l[2];
       if(match){
        var
         tl = match[2],
         x2 = match[1],
         x1 = l[1],
         s =
           0 < caml_call2(cmp, x1, x2)
            ? [0, x1, [0, x2, 0]]
            : [0, x2, [0, x1, 0]];
        return [0, s, tl];
       }
      }
     }
     else if(3 === n && l){
      var _u_ = l[2];
      if(_u_){
       var match$2 = _u_[2];
       if(match$2){
        var
         tl$1 = match$2[2],
         x3 = match$2[1],
         x2$0 = _u_[1],
         x1$0 = l[1],
         s$0 =
           0 < caml_call2(cmp, x1$0, x2$0)
            ? 0
              < caml_call2(cmp, x2$0, x3)
              ? [0, x1$0, [0, x2$0, [0, x3, 0]]]
              : 0
                < caml_call2(cmp, x1$0, x3)
                ? [0, x1$0, [0, x3, [0, x2$0, 0]]]
                : [0, x3, [0, x1$0, [0, x2$0, 0]]]
            : 0
              < caml_call2(cmp, x1$0, x3)
              ? [0, x2$0, [0, x1$0, [0, x3, 0]]]
              : 0
                < caml_call2(cmp, x2$0, x3)
                ? [0, x2$0, [0, x3, [0, x1$0, 0]]]
                : [0, x3, [0, x2$0, [0, x1$0, 0]]];
        return [0, s$0, tl$1];
       }
      }
     }
     var
      n1 = n >> 1,
      n2 = n - n1 | 0,
      match$0 = sort(n1, l),
      l2$0 = match$0[2],
      s1 = match$0[1],
      match$1 = sort(n2, l2$0),
      tl$0 = match$1[2],
      s2 = match$1[1],
      l1 = s1,
      l2 = s2,
      accu = 0;
     for(;;){
      if(l1){
       if(l2){
        var t2 = l2[2], h2 = l2[1], t1 = l1[2], h1 = l1[1];
        if(0 < caml_call2(cmp, h1, h2)){
         var accu$0 = [0, h2, accu];
         l2 = t2;
         accu = accu$0;
         continue;
        }
        var accu$1 = [0, h1, accu];
        l1 = t1;
        accu = accu$1;
        continue;
       }
       var _t_ = rev_append(l1, accu);
      }
      else
       var _t_ = rev_append(l2, accu);
      return [0, _t_, tl$0];
     }
    }
    var len = length(l);
    return 2 <= len ? sort(len, l)[1] : l;
   }
   function sort_uniq(cmp, l){
    function sort(n, l){
     if(2 === n){
      if(l){
       var match = l[2];
       if(match){
        var
         tl = match[2],
         x2 = match[1],
         x1 = l[1],
         c$0 = caml_call2(cmp, x1, x2),
         s =
           0 === c$0
            ? [0, x1, 0]
            : 0 <= c$0 ? [0, x2, [0, x1, 0]] : [0, x1, [0, x2, 0]];
        return [0, s, tl];
       }
      }
     }
     else if(3 === n && l){
      var _n_ = l[2];
      if(_n_){
       var match$2 = _n_[2];
       if(match$2){
        var
         tl$1 = match$2[2],
         x3 = match$2[1],
         x2$0 = _n_[1],
         x1$0 = l[1],
         c$1 = caml_call2(cmp, x1$0, x2$0);
        if(0 === c$1)
         var
          c$2 = caml_call2(cmp, x2$0, x3),
          _o_ =
            0 === c$2
             ? [0, x2$0, 0]
             : 0 <= c$2 ? [0, x3, [0, x2$0, 0]] : [0, x2$0, [0, x3, 0]],
          s$0 = _o_;
        else if(0 <= c$1){
         var c$3 = caml_call2(cmp, x1$0, x3);
         if(0 === c$3)
          var _p_ = [0, x2$0, [0, x1$0, 0]];
         else if(0 <= c$3)
          var
           c$4 = caml_call2(cmp, x2$0, x3),
           _q_ =
             0 === c$4
              ? [0, x2$0, [0, x1$0, 0]]
              : 0
                <= c$4
                ? [0, x3, [0, x2$0, [0, x1$0, 0]]]
                : [0, x2$0, [0, x3, [0, x1$0, 0]]],
           _p_ = _q_;
         else
          var _p_ = [0, x2$0, [0, x1$0, [0, x3, 0]]];
         var s$0 = _p_;
        }
        else{
         var c$5 = caml_call2(cmp, x2$0, x3);
         if(0 === c$5)
          var _r_ = [0, x1$0, [0, x2$0, 0]];
         else if(0 <= c$5)
          var
           c$6 = caml_call2(cmp, x1$0, x3),
           _s_ =
             0 === c$6
              ? [0, x1$0, [0, x2$0, 0]]
              : 0
                <= c$6
                ? [0, x3, [0, x1$0, [0, x2$0, 0]]]
                : [0, x1$0, [0, x3, [0, x2$0, 0]]],
           _r_ = _s_;
         else
          var _r_ = [0, x1$0, [0, x2$0, [0, x3, 0]]];
         var s$0 = _r_;
        }
        return [0, s$0, tl$1];
       }
      }
     }
     var
      n1 = n >> 1,
      n2 = n - n1 | 0,
      match$0 = rev_sort(n1, l),
      l2$0 = match$0[2],
      s1 = match$0[1],
      match$1 = rev_sort(n2, l2$0),
      tl$0 = match$1[2],
      s2 = match$1[1],
      l1 = s1,
      l2 = s2,
      accu = 0;
     for(;;){
      if(l1){
       if(l2){
        var
         t2 = l2[2],
         h2 = l2[1],
         t1 = l1[2],
         h1 = l1[1],
         c = caml_call2(cmp, h1, h2);
        if(0 === c){
         var accu$0 = [0, h1, accu];
         l1 = t1;
         l2 = t2;
         accu = accu$0;
         continue;
        }
        if(0 < c){
         var accu$1 = [0, h1, accu];
         l1 = t1;
         accu = accu$1;
         continue;
        }
        var accu$2 = [0, h2, accu];
        l2 = t2;
        accu = accu$2;
        continue;
       }
       var _m_ = rev_append(l1, accu);
      }
      else
       var _m_ = rev_append(l2, accu);
      return [0, _m_, tl$0];
     }
    }
    function rev_sort(n, l){
     if(2 === n){
      if(l){
       var match = l[2];
       if(match){
        var
         tl = match[2],
         x2 = match[1],
         x1 = l[1],
         c$0 = caml_call2(cmp, x1, x2),
         s =
           0 === c$0
            ? [0, x1, 0]
            : 0 < c$0 ? [0, x1, [0, x2, 0]] : [0, x2, [0, x1, 0]];
        return [0, s, tl];
       }
      }
     }
     else if(3 === n && l){
      var _g_ = l[2];
      if(_g_){
       var match$2 = _g_[2];
       if(match$2){
        var
         tl$1 = match$2[2],
         x3 = match$2[1],
         x2$0 = _g_[1],
         x1$0 = l[1],
         c$1 = caml_call2(cmp, x1$0, x2$0);
        if(0 === c$1)
         var
          c$2 = caml_call2(cmp, x2$0, x3),
          _h_ =
            0 === c$2
             ? [0, x2$0, 0]
             : 0 < c$2 ? [0, x2$0, [0, x3, 0]] : [0, x3, [0, x2$0, 0]],
          s$0 = _h_;
        else if(0 < c$1){
         var c$3 = caml_call2(cmp, x2$0, x3);
         if(0 === c$3)
          var _i_ = [0, x1$0, [0, x2$0, 0]];
         else if(0 < c$3)
          var _i_ = [0, x1$0, [0, x2$0, [0, x3, 0]]];
         else
          var
           c$4 = caml_call2(cmp, x1$0, x3),
           _j_ =
             0 === c$4
              ? [0, x1$0, [0, x2$0, 0]]
              : 0
                < c$4
                ? [0, x1$0, [0, x3, [0, x2$0, 0]]]
                : [0, x3, [0, x1$0, [0, x2$0, 0]]],
           _i_ = _j_;
         var s$0 = _i_;
        }
        else{
         var c$5 = caml_call2(cmp, x1$0, x3);
         if(0 === c$5)
          var _k_ = [0, x2$0, [0, x1$0, 0]];
         else if(0 < c$5)
          var _k_ = [0, x2$0, [0, x1$0, [0, x3, 0]]];
         else
          var
           c$6 = caml_call2(cmp, x2$0, x3),
           _l_ =
             0 === c$6
              ? [0, x2$0, [0, x1$0, 0]]
              : 0
                < c$6
                ? [0, x2$0, [0, x3, [0, x1$0, 0]]]
                : [0, x3, [0, x2$0, [0, x1$0, 0]]],
           _k_ = _l_;
         var s$0 = _k_;
        }
        return [0, s$0, tl$1];
       }
      }
     }
     var
      n1 = n >> 1,
      n2 = n - n1 | 0,
      match$0 = sort(n1, l),
      l2$0 = match$0[2],
      s1 = match$0[1],
      match$1 = sort(n2, l2$0),
      tl$0 = match$1[2],
      s2 = match$1[1],
      l1 = s1,
      l2 = s2,
      accu = 0;
     for(;;){
      if(l1){
       if(l2){
        var
         t2 = l2[2],
         h2 = l2[1],
         t1 = l1[2],
         h1 = l1[1],
         c = caml_call2(cmp, h1, h2);
        if(0 === c){
         var accu$0 = [0, h1, accu];
         l1 = t1;
         l2 = t2;
         accu = accu$0;
         continue;
        }
        if(0 <= c){
         var accu$1 = [0, h2, accu];
         l2 = t2;
         accu = accu$1;
         continue;
        }
        var accu$2 = [0, h1, accu];
        l1 = t1;
        accu = accu$2;
        continue;
       }
       var _f_ = rev_append(l1, accu);
      }
      else
       var _f_ = rev_append(l2, accu);
      return [0, _f_, tl$0];
     }
    }
    var len = length(l);
    return 2 <= len ? sort(len, l)[1] : l;
   }
   function compare_lengths(l1, l2){
    var l1$0 = l1, l2$0 = l2;
    for(;;){
     if(! l1$0) return l2$0 ? -1 : 0;
     if(! l2$0) return 1;
     var l2$1 = l2$0[2], l1$1 = l1$0[2];
     l1$0 = l1$1;
     l2$0 = l2$1;
    }
   }
   function compare_length_with(l, n){
    var l$0 = l, n$0 = n;
    for(;;){
     if(! l$0) return 0 === n$0 ? 0 : 0 < n$0 ? -1 : 1;
     var l$1 = l$0[2];
     if(0 >= n$0) return 1;
     var n$1 = n$0 - 1 | 0;
     l$0 = l$1;
     n$0 = n$1;
    }
   }
   function equal(eq, l1, l2){
    var l1$0 = l1, l2$0 = l2;
    for(;;){
     if(l1$0){
      if(l2$0){
       var
        l2$1 = l2$0[2],
        a2 = l2$0[1],
        l1$1 = l1$0[2],
        a1 = l1$0[1],
        _e_ = caml_call2(eq, a1, a2);
       if(! _e_) return _e_;
       l1$0 = l1$1;
       l2$0 = l2$1;
       continue;
      }
     }
     else if(! l2$0) return 1;
     return 0;
    }
   }
   function compare(cmp, l1, l2){
    var l1$0 = l1, l2$0 = l2;
    for(;;){
     if(! l1$0) return l2$0 ? -1 : 0;
     var l1$1 = l1$0[2], a1 = l1$0[1];
     if(! l2$0) return 1;
     var l2$1 = l2$0[2], a2 = l2$0[1], c = caml_call2(cmp, a1, a2);
     if(0 !== c) return c;
     l1$0 = l1$1;
     l2$0 = l2$1;
    }
   }
   function to_seq(l){
    function aux(l, param){
     if(! l) return 0;
     var tail = l[2], x = l[1];
     return [0, x, function(_d_){return aux(tail, _d_);}];
    }
    return function(_c_){return aux(l, _c_);};
   }
   function of_seq(seq){
    function direct(depth, seq){
     if(0 === depth)
      return rev
              (caml_call3
                (Stdlib_Seq[5], function(acc, x){return [0, x, acc];}, 0, seq));
     var match = caml_call1(seq, 0);
     if(! match) return 0;
     var next = match[2], x = match[1];
     return [0, x, direct(depth - 1 | 0, next)];
    }
    return direct(500, seq);
   }
   var
    Stdlib_List =
      [0,
       length,
       compare_lengths,
       compare_length_with,
       cons,
       hd,
       tl,
       nth,
       nth_opt,
       rev,
       init,
       append,
       rev_append,
       flatten,
       flatten,
       equal,
       compare,
       iter,
       iteri,
       map,
       mapi,
       rev_map,
       filter_map,
       concat_map,
       fold_left_map,
       fold_left,
       fold_right,
       iter2,
       map2,
       rev_map2,
       fold_left2,
       fold_right2,
       for_all,
       exists,
       for_all2,
       exists2,
       mem,
       memq,
       find,
       find_opt,
       find_map,
       find_all,
       find_all,
       filteri,
       partition,
       partition_map,
       assoc,
       assoc_opt,
       assq,
       assq_opt,
       mem_assoc,
       mem_assq,
       remove_assoc,
       remove_assq,
       split,
       combine,
       stable_sort,
       stable_sort,
       stable_sort,
       sort_uniq,
       merge,
       to_seq,
       of_seq];
   runtime.caml_register_global(18, Stdlib_List, "Stdlib__List");
   return;
  }
  (globalThis));

//# 3709 "../.js/default/stdlib/stdlib.cma.js"
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function abs(x){return 0 <= x ? x : - x | 0;}
   function lognot(x){return x ^ -1;}
   function equal(_b_, _a_){return _b_ === _a_ ? 1 : 0;}
   var compare = runtime.caml_int_compare;
   function min(x, y){return x <= y ? x : y;}
   function max(x, y){return y <= x ? x : y;}
   function to_string(x){return "" + x;}
   var
    Stdlib_Int =
      [0,
       0,
       1,
       -1,
       abs,
       2147483647,
       -2147483648,
       lognot,
       equal,
       compare,
       min,
       max,
       to_string];
   runtime.caml_register_global(1, Stdlib_Int, "Stdlib__Int");
   return;
  }
  (globalThis));

//# 3741 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_bytes_ml = "bytes.ml",
    cst_index_out_of_bounds$3 = "index out of bounds",
    caml_blit_bytes = runtime.caml_blit_bytes,
    caml_bswap16 = runtime.caml_bswap16,
    caml_bytes_get = runtime.caml_bytes_get,
    caml_bytes_get16 = runtime.caml_bytes_get16,
    caml_bytes_get32 = runtime.caml_bytes_get32,
    caml_bytes_get64 = runtime.caml_bytes_get64,
    caml_bytes_of_string = runtime.caml_bytes_of_string,
    caml_bytes_set = runtime.caml_bytes_set,
    caml_bytes_set16 = runtime.caml_bytes_set16,
    caml_bytes_set32 = runtime.caml_bytes_set32,
    caml_bytes_set64 = runtime.caml_bytes_set64,
    caml_bytes_unsafe_get = runtime.caml_bytes_unsafe_get,
    caml_bytes_unsafe_set = runtime.caml_bytes_unsafe_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_fill_bytes = runtime.caml_fill_bytes,
    caml_int32_bswap = runtime.caml_int32_bswap,
    caml_int64_bswap = runtime.caml_int64_bswap,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_string_of_bytes = runtime.caml_string_of_bytes,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Uchar = global_data.Stdlib__Uchar,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib_Char = global_data.Stdlib__Char;
   function make(n, c){
    var s = caml_create_bytes(n);
    caml_fill_bytes(s, 0, n, c);
    return s;
   }
   function init(n, f){
    var s = caml_create_bytes(n), _ap_ = n - 1 | 0, _ao_ = 0;
    if(_ap_ >= 0){
     var i = _ao_;
     for(;;){
      caml_bytes_unsafe_set(s, i, caml_call1(f, i));
      var _aq_ = i + 1 | 0;
      if(_ap_ === i) break;
      i = _aq_;
     }
    }
    return s;
   }
   var
    empty = caml_create_bytes(0),
    cst_String_sub_Bytes_sub = "String.sub / Bytes.sub",
    cst_Bytes_extend = "Bytes.extend",
    cst_String_fill_Bytes_fill = "String.fill / Bytes.fill",
    cst_Bytes_blit = "Bytes.blit",
    cst_String_blit_Bytes_blit_str = "String.blit / Bytes.blit_string",
    cst_Bytes_concat = "Bytes.concat",
    cst_String_index_from_Bytes_in = "String.index_from / Bytes.index_from",
    cst_String_index_from_opt_Byte =
      "String.index_from_opt / Bytes.index_from_opt",
    cst_String_rindex_from_Bytes_r = "String.rindex_from / Bytes.rindex_from",
    cst_String_rindex_from_opt_Byt =
      "String.rindex_from_opt / Bytes.rindex_from_opt",
    cst_String_contains_from_Bytes =
      "String.contains_from / Bytes.contains_from",
    cst_String_rcontains_from_Byte =
      "String.rcontains_from / Bytes.rcontains_from";
   function copy(s){
    var len = caml_ml_bytes_length(s), r = caml_create_bytes(len);
    caml_blit_bytes(s, 0, r, 0, len);
    return r;
   }
   function to_string(b){return caml_string_of_bytes(copy(b));}
   function of_string(s){return copy(caml_bytes_of_string(s));}
   function sub(s, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs){
     var r = caml_create_bytes(len);
     caml_blit_bytes(s, ofs, r, 0, len);
     return r;
    }
    return caml_call1(Stdlib[1], cst_String_sub_Bytes_sub);
   }
   function sub_string(b, ofs, len){
    return caml_string_of_bytes(sub(b, ofs, len));
   }
   function symbol(a, b){
    var c = a + b | 0, _an_ = b < 0 ? 1 : 0, match = c < 0 ? 1 : 0;
    a:
    {
     if(a < 0){if(_an_ && ! match) break a;} else if(! _an_ && match) break a;
     return c;
    }
    return caml_call1(Stdlib[1], cst_Bytes_extend);
   }
   function extend(s, left, right){
    var
     len = symbol(symbol(caml_ml_bytes_length(s), left), right),
     r = caml_create_bytes(len);
    if(0 <= left)
     var dstoff = left, srcoff = 0;
    else
     var dstoff = 0, srcoff = - left | 0;
    var
     cpylen =
       caml_call2
        (Stdlib_Int[10],
         caml_ml_bytes_length(s) - srcoff | 0,
         len - dstoff | 0);
    if(0 < cpylen) caml_blit_bytes(s, srcoff, r, dstoff, cpylen);
    return r;
   }
   function fill(s, ofs, len, c){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs)
     return caml_fill_bytes(s, ofs, len, c);
    return caml_call1(Stdlib[1], cst_String_fill_Bytes_fill);
   }
   function blit(s1, ofs1, s2, ofs2, len){
    if
     (0 <= len
      &&
       0 <= ofs1
       &&
        (caml_ml_bytes_length(s1) - len | 0) >= ofs1
        && 0 <= ofs2 && (caml_ml_bytes_length(s2) - len | 0) >= ofs2)
     return caml_blit_bytes(s1, ofs1, s2, ofs2, len);
    return caml_call1(Stdlib[1], cst_Bytes_blit);
   }
   function blit_string(s1, ofs1, s2, ofs2, len){
    if
     (0 <= len
      &&
       0 <= ofs1
       &&
        (runtime.caml_ml_string_length(s1) - len | 0) >= ofs1
        && 0 <= ofs2 && (caml_ml_bytes_length(s2) - len | 0) >= ofs2)
     return runtime.caml_blit_string(s1, ofs1, s2, ofs2, len);
    return caml_call1(Stdlib[1], cst_String_blit_Bytes_blit_str);
   }
   function iter(f, a){
    var _al_ = caml_ml_bytes_length(a) - 1 | 0, _ak_ = 0;
    if(_al_ >= 0){
     var i = _ak_;
     for(;;){
      caml_call1(f, caml_bytes_unsafe_get(a, i));
      var _am_ = i + 1 | 0;
      if(_al_ === i) break;
      i = _am_;
     }
    }
    return 0;
   }
   function iteri(f, a){
    var _ai_ = caml_ml_bytes_length(a) - 1 | 0, _ah_ = 0;
    if(_ai_ >= 0){
     var i = _ah_;
     for(;;){
      caml_call2(f, i, caml_bytes_unsafe_get(a, i));
      var _aj_ = i + 1 | 0;
      if(_ai_ === i) break;
      i = _aj_;
     }
    }
    return 0;
   }
   function concat(sep, l){
    if(! l) return empty;
    var seplen = caml_ml_bytes_length(sep);
    a:
    {
     b:
     {
      var acc = 0, param = l, pos$1 = 0;
      for(;;){
       if(! param) break;
       var hd = param[1];
       if(! param[2]) break b;
       var
        tl = param[2],
        x = (caml_ml_bytes_length(hd) + seplen | 0) + acc | 0,
        acc$0 = acc <= x ? x : caml_call1(Stdlib[1], cst_Bytes_concat);
       acc = acc$0;
       param = tl;
      }
      var _ag_ = acc;
      break a;
     }
     var _ag_ = caml_ml_bytes_length(hd) + acc | 0;
    }
    var dst = caml_create_bytes(_ag_), pos = pos$1, param$0 = l;
    for(;;){
     if(! param$0) return dst;
     var hd$0 = param$0[1];
     if(! param$0[2]){
      caml_blit_bytes(hd$0, 0, dst, pos, caml_ml_bytes_length(hd$0));
      return dst;
     }
     var tl$0 = param$0[2];
     caml_blit_bytes(hd$0, 0, dst, pos, caml_ml_bytes_length(hd$0));
     caml_blit_bytes
      (sep, 0, dst, pos + caml_ml_bytes_length(hd$0) | 0, seplen);
     var pos$0 = (pos + caml_ml_bytes_length(hd$0) | 0) + seplen | 0;
     pos = pos$0;
     param$0 = tl$0;
    }
   }
   function cat(s1, s2){
    var
     l1 = caml_ml_bytes_length(s1),
     l2 = caml_ml_bytes_length(s2),
     r = caml_create_bytes(l1 + l2 | 0);
    caml_blit_bytes(s1, 0, r, 0, l1);
    caml_blit_bytes(s2, 0, r, l1, l2);
    return r;
   }
   function is_space(param){
    var _af_ = param - 9 | 0;
    a:
    {
     if(4 < _af_ >>> 0){if(23 !== _af_) break a;} else if(2 === _af_) break a;
     return 1;
    }
    return 0;
   }
   function trim(s){
    var len = caml_ml_bytes_length(s), i = [0, 0];
    for(;;){
     if(i[1] >= len) break;
     if(! is_space(caml_bytes_unsafe_get(s, i[1]))) break;
     i[1]++;
    }
    var j = [0, len - 1 | 0];
    for(;;){
     if(i[1] <= j[1] && is_space(caml_bytes_unsafe_get(s, j[1]))){j[1]--; continue;}
     return i[1] <= j[1] ? sub(s, i[1], (j[1] - i[1] | 0) + 1 | 0) : empty;
    }
   }
   function escaped(s){
    var n = [0, 0], ___ = caml_ml_bytes_length(s) - 1 | 0, _Z_ = 0;
    if(___ >= 0){
     var i$0 = _Z_;
     for(;;){
      var match = caml_bytes_unsafe_get(s, i$0);
      a:
      {
       b:
       {
        c:
        {
         if(32 <= match){
          var _ac_ = match - 34 | 0;
          if(58 < _ac_ >>> 0){
           if(93 <= _ac_) break c;
          }
          else if(56 < _ac_ - 1 >>> 0) break b;
          var _ad_ = 1;
          break a;
         }
         if(11 <= match){
          if(13 === match) break b;
         }
         else if(8 <= match) break b;
        }
        var _ad_ = 4;
        break a;
       }
       var _ad_ = 2;
      }
      n[1] = n[1] + _ad_ | 0;
      var _ae_ = i$0 + 1 | 0;
      if(___ === i$0) break;
      i$0 = _ae_;
     }
    }
    if(n[1] === caml_ml_bytes_length(s)) return copy(s);
    var s$0 = caml_create_bytes(n[1]);
    n[1] = 0;
    var _aa_ = caml_ml_bytes_length(s) - 1 | 0, _$_ = 0;
    if(_aa_ >= 0){
     var i = _$_;
     for(;;){
      var c = caml_bytes_unsafe_get(s, i);
      a:
      {
       b:
       {
        c:
        {
         if(35 <= c){
          if(92 !== c){if(127 <= c) break c; break b;}
         }
         else{
          if(32 > c){
           if(14 <= c) break c;
           switch(c){
             case 8:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 98);
              break a;
             case 9:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 116);
              break a;
             case 10:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 110);
              break a;
             case 13:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 114);
              break a;
             default: break c;
           }
          }
          if(34 > c) break b;
         }
         caml_bytes_unsafe_set(s$0, n[1], 92);
         n[1]++;
         caml_bytes_unsafe_set(s$0, n[1], c);
         break a;
        }
        caml_bytes_unsafe_set(s$0, n[1], 92);
        n[1]++;
        caml_bytes_unsafe_set(s$0, n[1], 48 + (c / 100 | 0) | 0);
        n[1]++;
        caml_bytes_unsafe_set(s$0, n[1], 48 + ((c / 10 | 0) % 10 | 0) | 0);
        n[1]++;
        caml_bytes_unsafe_set(s$0, n[1], 48 + (c % 10 | 0) | 0);
        break a;
       }
       caml_bytes_unsafe_set(s$0, n[1], c);
      }
      n[1]++;
      var _ab_ = i + 1 | 0;
      if(_aa_ === i) break;
      i = _ab_;
     }
    }
    return s$0;
   }
   function map(f, s){
    var l = caml_ml_bytes_length(s);
    if(0 === l) return s;
    var r = caml_create_bytes(l), _X_ = l - 1 | 0, _W_ = 0;
    if(_X_ >= 0){
     var i = _W_;
     for(;;){
      caml_bytes_unsafe_set(r, i, caml_call1(f, caml_bytes_unsafe_get(s, i)));
      var _Y_ = i + 1 | 0;
      if(_X_ === i) break;
      i = _Y_;
     }
    }
    return r;
   }
   function mapi(f, s){
    var l = caml_ml_bytes_length(s);
    if(0 === l) return s;
    var r = caml_create_bytes(l), _U_ = l - 1 | 0, _T_ = 0;
    if(_U_ >= 0){
     var i = _T_;
     for(;;){
      caml_bytes_unsafe_set
       (r, i, caml_call2(f, i, caml_bytes_unsafe_get(s, i)));
      var _V_ = i + 1 | 0;
      if(_U_ === i) break;
      i = _V_;
     }
    }
    return r;
   }
   function fold_left(f, x, a){
    var r = [0, x], _R_ = caml_ml_bytes_length(a) - 1 | 0, _Q_ = 0;
    if(_R_ >= 0){
     var i = _Q_;
     for(;;){
      r[1] = caml_call2(f, r[1], caml_bytes_unsafe_get(a, i));
      var _S_ = i + 1 | 0;
      if(_R_ === i) break;
      i = _S_;
     }
    }
    return r[1];
   }
   function fold_right(f, a, x){
    var r = [0, x], _O_ = caml_ml_bytes_length(a) - 1 | 0;
    if(_O_ >= 0){
     var i = _O_;
     for(;;){
      r[1] = caml_call2(f, caml_bytes_unsafe_get(a, i), r[1]);
      var _P_ = i - 1 | 0;
      if(0 === i) break;
      i = _P_;
     }
    }
    return r[1];
   }
   function exists(p, s){
    var n = caml_ml_bytes_length(s), i = 0;
    for(;;){
     if(i === n) return 0;
     if(caml_call1(p, caml_bytes_unsafe_get(s, i))) return 1;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function for_all(p, s){
    var n = caml_ml_bytes_length(s), i = 0;
    for(;;){
     if(i === n) return 1;
     if(! caml_call1(p, caml_bytes_unsafe_get(s, i))) return 0;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function uppercase_ascii(s){return map(Stdlib_Char[6], s);}
   function lowercase_ascii(s){return map(Stdlib_Char[5], s);}
   function apply1(f, s){
    if(0 === caml_ml_bytes_length(s)) return s;
    var r = copy(s);
    caml_bytes_unsafe_set(r, 0, caml_call1(f, caml_bytes_unsafe_get(s, 0)));
    return r;
   }
   function capitalize_ascii(s){return apply1(Stdlib_Char[6], s);}
   function uncapitalize_ascii(s){return apply1(Stdlib_Char[5], s);}
   function starts_with(prefix, s){
    var
     len_s = caml_ml_bytes_length(s),
     len_pre = caml_ml_bytes_length(prefix),
     _N_ = len_pre <= len_s ? 1 : 0;
    if(! _N_) return _N_;
    var i = 0;
    for(;;){
     if(i === len_pre) return 1;
     if(caml_bytes_unsafe_get(s, i) !== caml_bytes_unsafe_get(prefix, i))
      return 0;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function ends_with(suffix, s){
    var
     len_s = caml_ml_bytes_length(s),
     len_suf = caml_ml_bytes_length(suffix),
     diff = len_s - len_suf | 0,
     _M_ = 0 <= diff ? 1 : 0;
    if(! _M_) return _M_;
    var i = 0;
    for(;;){
     if(i === len_suf) return 1;
     if
      (caml_bytes_unsafe_get(s, diff + i | 0)
       !== caml_bytes_unsafe_get(suffix, i))
      return 0;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function index_rec(s, lim, i, c){
    var i$0 = i;
    for(;;){
     if(lim <= i$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     if(caml_bytes_unsafe_get(s, i$0) === c) return i$0;
     var i$1 = i$0 + 1 | 0;
     i$0 = i$1;
    }
   }
   function index(s, c){return index_rec(s, caml_ml_bytes_length(s), 0, c);}
   function index_rec_opt(s, lim, i, c){
    var i$0 = i;
    for(;;){
     if(lim <= i$0) return 0;
     if(caml_bytes_unsafe_get(s, i$0) === c) return [0, i$0];
     var i$1 = i$0 + 1 | 0;
     i$0 = i$1;
    }
   }
   function index_opt(s, c){
    return index_rec_opt(s, caml_ml_bytes_length(s), 0, c);
   }
   function index_from(s, i, c){
    var l = caml_ml_bytes_length(s);
    if(0 <= i && l >= i) return index_rec(s, l, i, c);
    return caml_call1(Stdlib[1], cst_String_index_from_Bytes_in);
   }
   function index_from_opt(s, i, c){
    var l = caml_ml_bytes_length(s);
    if(0 <= i && l >= i) return index_rec_opt(s, l, i, c);
    return caml_call1(Stdlib[1], cst_String_index_from_opt_Byte);
   }
   function rindex_rec(s, i, c){
    var i$0 = i;
    for(;;){
     if(0 > i$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     if(caml_bytes_unsafe_get(s, i$0) === c) return i$0;
     var i$1 = i$0 - 1 | 0;
     i$0 = i$1;
    }
   }
   function rindex(s, c){
    return rindex_rec(s, caml_ml_bytes_length(s) - 1 | 0, c);
   }
   function rindex_from(s, i, c){
    if(-1 <= i && caml_ml_bytes_length(s) > i) return rindex_rec(s, i, c);
    return caml_call1(Stdlib[1], cst_String_rindex_from_Bytes_r);
   }
   function rindex_rec_opt(s, i, c){
    var i$0 = i;
    for(;;){
     if(0 > i$0) return 0;
     if(caml_bytes_unsafe_get(s, i$0) === c) return [0, i$0];
     var i$1 = i$0 - 1 | 0;
     i$0 = i$1;
    }
   }
   function rindex_opt(s, c){
    return rindex_rec_opt(s, caml_ml_bytes_length(s) - 1 | 0, c);
   }
   function rindex_from_opt(s, i, c){
    if(-1 <= i && caml_ml_bytes_length(s) > i) return rindex_rec_opt(s, i, c);
    return caml_call1(Stdlib[1], cst_String_rindex_from_opt_Byt);
   }
   function contains_from(s, i, c){
    var l = caml_ml_bytes_length(s);
    if(0 <= i && l >= i)
     try{index_rec(s, l, i, c); var _K_ = 1; return _K_;}
     catch(_L_){
      var _J_ = caml_wrap_exception(_L_);
      if(_J_ === Stdlib[8]) return 0;
      throw caml_maybe_attach_backtrace(_J_, 0);
     }
    return caml_call1(Stdlib[1], cst_String_contains_from_Bytes);
   }
   function contains(s, c){return contains_from(s, 0, c);}
   function rcontains_from(s, i, c){
    if(0 <= i && caml_ml_bytes_length(s) > i)
     try{rindex_rec(s, i, c); var _H_ = 1; return _H_;}
     catch(_I_){
      var _G_ = caml_wrap_exception(_I_);
      if(_G_ === Stdlib[8]) return 0;
      throw caml_maybe_attach_backtrace(_G_, 0);
     }
    return caml_call1(Stdlib[1], cst_String_rcontains_from_Byte);
   }
   var
    compare = runtime.caml_bytes_compare,
    cst_Bytes_of_seq_cannot_grow_b = "Bytes.of_seq: cannot grow bytes";
   function split_on_char(sep, s){
    var
     r = [0, 0],
     j = [0, caml_ml_bytes_length(s)],
     _C_ = caml_ml_bytes_length(s) - 1 | 0;
    if(_C_ >= 0){
     var i = _C_;
     for(;;){
      if(caml_bytes_unsafe_get(s, i) === sep){
       var _E_ = r[1];
       r[1] = [0, sub(s, i + 1 | 0, (j[1] - i | 0) - 1 | 0), _E_];
       j[1] = i;
      }
      var _F_ = i - 1 | 0;
      if(0 === i) break;
      i = _F_;
     }
    }
    var _D_ = r[1];
    return [0, sub(s, 0, j[1]), _D_];
   }
   function uppercase(s){return map(Stdlib_Char[4], s);}
   function lowercase(s){return map(Stdlib_Char[3], s);}
   function capitalize(s){return apply1(Stdlib_Char[4], s);}
   function uncapitalize(s){return apply1(Stdlib_Char[3], s);}
   function to_seq(s){
    function aux(i, param){
     if(i === caml_ml_bytes_length(s)) return 0;
     var x = caml_bytes_get(s, i), _A_ = i + 1 | 0;
     return [0, x, function(_B_){return aux(_A_, _B_);}];
    }
    var _y_ = 0;
    return function(_z_){return aux(_y_, _z_);};
   }
   function to_seqi(s){
    function aux(i, param){
     if(i === caml_ml_bytes_length(s)) return 0;
     var x = caml_bytes_get(s, i), _w_ = i + 1 | 0;
     return [0, [0, i, x], function(_x_){return aux(_w_, _x_);}];
    }
    var _u_ = 0;
    return function(_v_){return aux(_u_, _v_);};
   }
   function of_seq(i){
    var n = [0, 0], buf = [0, make(256, 0)];
    caml_call2
     (Stdlib_Seq[4],
      function(c){
       if(n[1] === caml_ml_bytes_length(buf[1])){
        var
         new_len =
           caml_call2
            (Stdlib_Int[10],
             2 * caml_ml_bytes_length(buf[1]) | 0,
             Stdlib_Sys[12]);
        if(caml_ml_bytes_length(buf[1]) === new_len)
         caml_call1(Stdlib[2], cst_Bytes_of_seq_cannot_grow_b);
        var new_buf = make(new_len, 0);
        blit(buf[1], 0, new_buf, 0, n[1]);
        buf[1] = new_buf;
       }
       caml_bytes_set(buf[1], n[1], c);
       n[1]++;
       return 0;
      },
      i);
    return sub(buf[1], 0, n[1]);
   }
   function unsafe_get_uint16_le(b, i){
    return Stdlib_Sys[11]
            ? caml_bswap16(caml_bytes_get16(b, i))
            : caml_bytes_get16(b, i);
   }
   function unsafe_get_uint16_be(b, i){
    return Stdlib_Sys[11]
            ? caml_bytes_get16(b, i)
            : caml_bswap16(caml_bytes_get16(b, i));
   }
   function get_int8(b, i){
    var _s_ = Stdlib_Sys[10] - 8 | 0, _t_ = Stdlib_Sys[10] - 8 | 0;
    return caml_bytes_get(b, i) << _t_ >> _s_;
   }
   function get_uint16_le(b, i){
    return Stdlib_Sys[11]
            ? caml_bswap16(caml_bytes_get16(b, i))
            : caml_bytes_get16(b, i);
   }
   function get_uint16_be(b, i){
    return Stdlib_Sys[11]
            ? caml_bytes_get16(b, i)
            : caml_bswap16(caml_bytes_get16(b, i));
   }
   function get_int16_ne(b, i){
    var _q_ = Stdlib_Sys[10] - 16 | 0, _r_ = Stdlib_Sys[10] - 16 | 0;
    return caml_bytes_get16(b, i) << _r_ >> _q_;
   }
   function get_int16_le(b, i){
    var _o_ = Stdlib_Sys[10] - 16 | 0, _p_ = Stdlib_Sys[10] - 16 | 0;
    return get_uint16_le(b, i) << _p_ >> _o_;
   }
   function get_int16_be(b, i){
    var _m_ = Stdlib_Sys[10] - 16 | 0, _n_ = Stdlib_Sys[10] - 16 | 0;
    return get_uint16_be(b, i) << _n_ >> _m_;
   }
   function get_int32_le(b, i){
    return Stdlib_Sys[11]
            ? caml_int32_bswap(caml_bytes_get32(b, i))
            : caml_bytes_get32(b, i);
   }
   function get_int32_be(b, i){
    return Stdlib_Sys[11]
            ? caml_bytes_get32(b, i)
            : caml_int32_bswap(caml_bytes_get32(b, i));
   }
   function get_int64_le(b, i){
    return Stdlib_Sys[11]
            ? caml_int64_bswap(caml_bytes_get64(b, i))
            : caml_bytes_get64(b, i);
   }
   function get_int64_be(b, i){
    return Stdlib_Sys[11]
            ? caml_bytes_get64(b, i)
            : caml_int64_bswap(caml_bytes_get64(b, i));
   }
   function unsafe_set_uint16_le(b, i, x){
    if(Stdlib_Sys[11]){caml_bytes_set16(b, i, caml_bswap16(x)); return;}
    caml_bytes_set16(b, i, x);
    return;
   }
   function unsafe_set_uint16_be(b, i, x){
    if(Stdlib_Sys[11]){caml_bytes_set16(b, i, x); return;}
    caml_bytes_set16(b, i, caml_bswap16(x));
    return;
   }
   function set_int16_le(b, i, x){
    return Stdlib_Sys[11]
            ? caml_bytes_set16(b, i, caml_bswap16(x))
            : caml_bytes_set16(b, i, x);
   }
   function set_int16_be(b, i, x){
    return Stdlib_Sys[11]
            ? caml_bytes_set16(b, i, x)
            : caml_bytes_set16(b, i, caml_bswap16(x));
   }
   function set_int32_le(b, i, x){
    return Stdlib_Sys[11]
            ? caml_bytes_set32(b, i, caml_int32_bswap(x))
            : caml_bytes_set32(b, i, x);
   }
   function set_int32_be(b, i, x){
    return Stdlib_Sys[11]
            ? caml_bytes_set32(b, i, x)
            : caml_bytes_set32(b, i, caml_int32_bswap(x));
   }
   function set_int64_le(b, i, x){
    return Stdlib_Sys[11]
            ? caml_bytes_set64(b, i, caml_int64_bswap(x))
            : caml_bytes_set64(b, i, x);
   }
   function set_int64_be(b, i, x){
    return Stdlib_Sys[11]
            ? caml_bytes_set64(b, i, x)
            : caml_bytes_set64(b, i, caml_int64_bswap(x));
   }
   var
    set_uint8 = caml_bytes_set,
    set_uint16_ne = caml_bytes_set16,
    dec_invalid = Stdlib_Uchar[22],
    _a_ = [0, cst_bytes_ml, 667, 9],
    _b_ = [0, cst_bytes_ml, 642, 20],
    cst_index_out_of_bounds = cst_index_out_of_bounds$3,
    cst_index_out_of_bounds$0 = cst_index_out_of_bounds$3,
    _c_ = [0, cst_bytes_ml, 765, 9],
    _d_ = [0, cst_bytes_ml, 754, 20],
    cst_index_out_of_bounds$1 = cst_index_out_of_bounds$3,
    cst_index_out_of_bounds$2 = cst_index_out_of_bounds$3,
    _e_ = [0, cst_bytes_ml, 819, 9],
    _f_ = [0, cst_bytes_ml, 808, 20];
   function dec_ret(n, u){
    var _l_ = caml_call1(Stdlib_Uchar[9], u);
    return caml_call2(Stdlib_Uchar[21], n, _l_);
   }
   function not_in_x80_to_xBF(b){return 2 !== (b >>> 6 | 0) ? 1 : 0;}
   function not_in_xA0_to_xBF(b){return 5 !== (b >>> 5 | 0) ? 1 : 0;}
   function not_in_x80_to_x9F(b){return 4 !== (b >>> 5 | 0) ? 1 : 0;}
   function not_in_x90_to_xBF(b){
    var _j_ = b < 144 ? 1 : 0, _k_ = _j_ || (191 < b ? 1 : 0);
    return _k_;
   }
   function not_in_x80_to_x8F(b){return 8 !== (b >>> 4 | 0) ? 1 : 0;}
   function utf_8_uchar_3(b0, b1, b2){
    return (b0 & 15) << 12 | (b1 & 63) << 6 | b2 & 63;
   }
   function utf_8_uchar_4(b0, b1, b2, b3){
    return (b0 & 7) << 18 | (b1 & 63) << 12 | (b2 & 63) << 6 | b3 & 63;
   }
   function get_utf_8_uchar(b, i){
    var b0 = caml_bytes_get(b, i), max = caml_ml_bytes_length(b) - 1 | 0;
    a:
    {
     if(224 <= b0){
      if(237 <= b0){
       if(245 <= b0) break a;
       switch(b0 - 237 | 0){
         case 0:
          var i$0 = i + 1 | 0;
          if(max < i$0) return caml_call1(dec_invalid, 1);
          var b1$4 = caml_bytes_unsafe_get(b, i$0);
          if(not_in_x80_to_x9F(b1$4)) return caml_call1(dec_invalid, 1);
          var i$1 = i$0 + 1 | 0;
          if(max < i$1) return caml_call1(dec_invalid, 2);
          var b2$3 = caml_bytes_unsafe_get(b, i$1);
          return not_in_x80_to_xBF(b2$3)
                  ? caml_call1(dec_invalid, 2)
                  : dec_ret(3, utf_8_uchar_3(b0, b1$4, b2$3));
         case 3:
          var i$4 = i + 1 | 0;
          if(max < i$4) return caml_call1(dec_invalid, 1);
          var b1$2 = caml_bytes_unsafe_get(b, i$4);
          if(not_in_x90_to_xBF(b1$2)) return caml_call1(dec_invalid, 1);
          var i$5 = i$4 + 1 | 0;
          if(max < i$5) return caml_call1(dec_invalid, 2);
          var b2$1 = caml_bytes_unsafe_get(b, i$5);
          if(not_in_x80_to_xBF(b2$1)) return caml_call1(dec_invalid, 2);
          var i$6 = i$5 + 1 | 0;
          if(max < i$6) return caml_call1(dec_invalid, 3);
          var b3$1 = caml_bytes_unsafe_get(b, i$6);
          return not_in_x80_to_xBF(b3$1)
                  ? caml_call1(dec_invalid, 3)
                  : dec_ret(4, utf_8_uchar_4(b0, b1$2, b2$1, b3$1));
         case 7:
          var i$10 = i + 1 | 0;
          if(max < i$10) return caml_call1(dec_invalid, 1);
          var b1$0 = caml_bytes_unsafe_get(b, i$10);
          if(not_in_x80_to_x8F(b1$0)) return caml_call1(dec_invalid, 1);
          var i$11 = i$10 + 1 | 0;
          if(max < i$11) return caml_call1(dec_invalid, 2);
          var b2 = caml_bytes_unsafe_get(b, i$11);
          if(not_in_x80_to_xBF(b2)) return caml_call1(dec_invalid, 2);
          var i$12 = i$11 + 1 | 0;
          if(max < i$12) return caml_call1(dec_invalid, 3);
          var b3 = caml_bytes_unsafe_get(b, i$12);
          return not_in_x80_to_xBF(b3)
                  ? caml_call1(dec_invalid, 3)
                  : dec_ret(4, utf_8_uchar_4(b0, b1$0, b2, b3));
         case 1:
         case 2: break;
         default:
          var i$7 = i + 1 | 0;
          if(max < i$7) return caml_call1(dec_invalid, 1);
          var b1$1 = caml_bytes_unsafe_get(b, i$7);
          if(not_in_x80_to_xBF(b1$1)) return caml_call1(dec_invalid, 1);
          var i$8 = i$7 + 1 | 0;
          if(max < i$8) return caml_call1(dec_invalid, 2);
          var b2$0 = caml_bytes_unsafe_get(b, i$8);
          if(not_in_x80_to_xBF(b2$0)) return caml_call1(dec_invalid, 2);
          var i$9 = i$8 + 1 | 0;
          if(max < i$9) return caml_call1(dec_invalid, 3);
          var b3$0 = caml_bytes_unsafe_get(b, i$9);
          return not_in_x80_to_xBF(b3$0)
                  ? caml_call1(dec_invalid, 3)
                  : dec_ret(4, utf_8_uchar_4(b0, b1$1, b2$0, b3$0));
       }
      }
      else if(225 > b0){
       var i$13 = i + 1 | 0;
       if(max < i$13) return caml_call1(dec_invalid, 1);
       var b1$5 = caml_bytes_unsafe_get(b, i$13);
       if(not_in_xA0_to_xBF(b1$5)) return caml_call1(dec_invalid, 1);
       var i$14 = i$13 + 1 | 0;
       if(max < i$14) return caml_call1(dec_invalid, 2);
       var b2$4 = caml_bytes_unsafe_get(b, i$14);
       return not_in_x80_to_xBF(b2$4)
               ? caml_call1(dec_invalid, 2)
               : dec_ret(3, utf_8_uchar_3(b0, b1$5, b2$4));
      }
      var i$2 = i + 1 | 0;
      if(max < i$2) return caml_call1(dec_invalid, 1);
      var b1$3 = caml_bytes_unsafe_get(b, i$2);
      if(not_in_x80_to_xBF(b1$3)) return caml_call1(dec_invalid, 1);
      var i$3 = i$2 + 1 | 0;
      if(max < i$3) return caml_call1(dec_invalid, 2);
      var b2$2 = caml_bytes_unsafe_get(b, i$3);
      return not_in_x80_to_xBF(b2$2)
              ? caml_call1(dec_invalid, 2)
              : dec_ret(3, utf_8_uchar_3(b0, b1$3, b2$2));
     }
     if(128 > b0) return dec_ret(1, b0);
     if(194 <= b0){
      var i$15 = i + 1 | 0;
      if(max < i$15) return caml_call1(dec_invalid, 1);
      var b1 = caml_bytes_unsafe_get(b, i$15);
      return not_in_x80_to_xBF(b1)
              ? caml_call1(dec_invalid, 1)
              : dec_ret(2, (b0 & 31) << 6 | b1 & 63);
     }
    }
    return caml_call1(dec_invalid, 1);
   }
   function set_utf_8_uchar(b, i, u){
    function set(_i_, _h_, _g_){caml_bytes_unsafe_set(_i_, _h_, _g_); return;}
    var
     max = caml_ml_bytes_length(b) - 1 | 0,
     u$0 = caml_call1(Stdlib_Uchar[10], u);
    if(0 > u$0)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
    if(127 >= u$0){caml_bytes_set(b, i, u$0); return 1;}
    if(2047 >= u$0){
     var last$1 = i + 1 | 0;
     return max < last$1
             ? 0
             : (caml_bytes_set
                (b, i, 192 | u$0 >>> 6 | 0),
               set(b, last$1, 128 | u$0 & 63),
               2);
    }
    if(65535 >= u$0){
     var last$0 = i + 2 | 0;
     return max < last$0
             ? 0
             : (caml_bytes_set
                (b, i, 224 | u$0 >>> 12 | 0),
               set(b, i + 1 | 0, 128 | (u$0 >>> 6 | 0) & 63),
               set(b, last$0, 128 | u$0 & 63),
               3);
    }
    if(1114111 < u$0)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
    var last = i + 3 | 0;
    return max < last
            ? 0
            : (caml_bytes_set
               (b, i, 240 | u$0 >>> 18 | 0),
              set(b, i + 1 | 0, 128 | (u$0 >>> 12 | 0) & 63),
              set(b, i + 2 | 0, 128 | (u$0 >>> 6 | 0) & 63),
              set(b, last, 128 | u$0 & 63),
              4);
   }
   function is_valid_utf_8(b){
    var max = caml_ml_bytes_length(b) - 1 | 0, i = 0;
    for(;;){
     if(max < i) return 1;
     var match = caml_bytes_unsafe_get(b, i);
     a:
     {
      if(224 <= match){
       if(237 <= match){
        if(245 <= match) break a;
        switch(match - 237 | 0){
          case 0:
           var last = i + 2 | 0;
           if
            (max >= last
             &&
              !
              not_in_x80_to_x9F(caml_bytes_unsafe_get(b, i + 1 | 0))
              && ! not_in_x80_to_xBF(caml_bytes_unsafe_get(b, last))){var i$0 = last + 1 | 0; i = i$0; continue;}
           return 0;
          case 3:
           var last$1 = i + 3 | 0;
           if
            (max >= last$1
             &&
              !
              not_in_x90_to_xBF(caml_bytes_unsafe_get(b, i + 1 | 0))
              &&
               !
               not_in_x80_to_xBF(caml_bytes_unsafe_get(b, i + 2 | 0))
               && ! not_in_x80_to_xBF(caml_bytes_unsafe_get(b, last$1))){var i$2 = last$1 + 1 | 0; i = i$2; continue;}
           return 0;
          case 7:
           var last$3 = i + 3 | 0;
           if
            (max >= last$3
             &&
              !
              not_in_x80_to_x8F(caml_bytes_unsafe_get(b, i + 1 | 0))
              &&
               !
               not_in_x80_to_xBF(caml_bytes_unsafe_get(b, i + 2 | 0))
               && ! not_in_x80_to_xBF(caml_bytes_unsafe_get(b, last$3))){var i$4 = last$3 + 1 | 0; i = i$4; continue;}
           return 0;
          case 1:
          case 2: break;
          default:
           var last$2 = i + 3 | 0;
           if
            (max >= last$2
             &&
              !
              not_in_x80_to_xBF(caml_bytes_unsafe_get(b, i + 1 | 0))
              &&
               !
               not_in_x80_to_xBF(caml_bytes_unsafe_get(b, i + 2 | 0))
               && ! not_in_x80_to_xBF(caml_bytes_unsafe_get(b, last$2))){var i$3 = last$2 + 1 | 0; i = i$3; continue;}
           return 0;
        }
       }
       else if(225 > match){
        var last$4 = i + 2 | 0;
        if
         (max >= last$4
          &&
           !
           not_in_xA0_to_xBF(caml_bytes_unsafe_get(b, i + 1 | 0))
           && ! not_in_x80_to_xBF(caml_bytes_unsafe_get(b, last$4))){var i$5 = last$4 + 1 | 0; i = i$5; continue;}
        return 0;
       }
       var last$0 = i + 2 | 0;
       if
        (max >= last$0
         &&
          !
          not_in_x80_to_xBF(caml_bytes_unsafe_get(b, i + 1 | 0))
          && ! not_in_x80_to_xBF(caml_bytes_unsafe_get(b, last$0))){var i$1 = last$0 + 1 | 0; i = i$1; continue;}
       return 0;
      }
      if(128 > match){var i$7 = i + 1 | 0; i = i$7; continue;}
      if(194 <= match){
       var last$5 = i + 1 | 0;
       if
        (max >= last$5
         && ! not_in_x80_to_xBF(caml_bytes_unsafe_get(b, last$5))){var i$6 = last$5 + 1 | 0; i = i$6; continue;}
       return 0;
      }
     }
     return 0;
    }
   }
   function get_utf_16be_uchar(b, i){
    var max = caml_ml_bytes_length(b) - 1 | 0;
    if(0 <= i && max >= i){
     if(i === max) return caml_call1(dec_invalid, 1);
     var hi = unsafe_get_uint16_be(b, i);
     if(55296 <= hi && 57343 >= hi){
      if(56319 < hi) return caml_call1(dec_invalid, 2);
      var last = i + 3 | 0;
      if(max < last) return caml_call1(dec_invalid, (max - i | 0) + 1 | 0);
      var lo = unsafe_get_uint16_be(b, i + 2 | 0);
      if(56320 <= lo && 57343 >= lo){
       var u = ((hi & 1023) << 10 | lo & 1023) + 65536 | 0;
       return dec_ret(4, u);
      }
      return caml_call1(dec_invalid, 2);
     }
     return dec_ret(2, hi);
    }
    return caml_call1(Stdlib[1], cst_index_out_of_bounds);
   }
   function set_utf_16be_uchar(b, i, u){
    var max = caml_ml_bytes_length(b) - 1 | 0;
    if(0 <= i && max >= i){
     var u$0 = caml_call1(Stdlib_Uchar[10], u);
     if(0 > u$0)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
     if(65535 >= u$0){
      var last$0 = i + 1 | 0;
      return max < last$0 ? 0 : (unsafe_set_uint16_be(b, i, u$0), 2);
     }
     if(1114111 < u$0)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
     var last = i + 3 | 0;
     if(max < last) return 0;
     var
      u$1 = u$0 - 65536 | 0,
      hi = 55296 | u$1 >>> 10 | 0,
      lo = 56320 | u$1 & 1023;
     unsafe_set_uint16_be(b, i, hi);
     unsafe_set_uint16_be(b, i + 2 | 0, lo);
     return 4;
    }
    return caml_call1(Stdlib[1], cst_index_out_of_bounds$0);
   }
   function is_valid_utf_16be(b){
    var max = caml_ml_bytes_length(b) - 1 | 0, i = 0;
    for(;;){
     if(max < i) return 1;
     if(i === max) return 0;
     var u = unsafe_get_uint16_be(b, i);
     if(55296 <= u && 57343 >= u){
      if(56319 < u) return 0;
      var last = i + 3 | 0;
      if(max < last) return 0;
      var u$0 = unsafe_get_uint16_be(b, i + 2 | 0);
      if(56320 <= u$0 && 57343 >= u$0){
       var i$1 = i + 4 | 0;
       i = i$1;
       continue;
      }
      return 0;
     }
     var i$0 = i + 2 | 0;
     i = i$0;
    }
   }
   function get_utf_16le_uchar(b, i){
    var max = caml_ml_bytes_length(b) - 1 | 0;
    if(0 <= i && max >= i){
     if(i === max) return caml_call1(dec_invalid, 1);
     var hi = unsafe_get_uint16_le(b, i);
     if(55296 <= hi && 57343 >= hi){
      if(56319 < hi) return caml_call1(dec_invalid, 2);
      var last = i + 3 | 0;
      if(max < last) return caml_call1(dec_invalid, (max - i | 0) + 1 | 0);
      var lo = unsafe_get_uint16_le(b, i + 2 | 0);
      if(56320 <= lo && 57343 >= lo){
       var u = ((hi & 1023) << 10 | lo & 1023) + 65536 | 0;
       return dec_ret(4, u);
      }
      return caml_call1(dec_invalid, 2);
     }
     return dec_ret(2, hi);
    }
    return caml_call1(Stdlib[1], cst_index_out_of_bounds$1);
   }
   function set_utf_16le_uchar(b, i, u){
    var max = caml_ml_bytes_length(b) - 1 | 0;
    if(0 <= i && max >= i){
     var u$0 = caml_call1(Stdlib_Uchar[10], u);
     if(0 > u$0)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _f_], 1);
     if(65535 >= u$0){
      var last$0 = i + 1 | 0;
      return max < last$0 ? 0 : (unsafe_set_uint16_le(b, i, u$0), 2);
     }
     if(1114111 < u$0)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
     var last = i + 3 | 0;
     if(max < last) return 0;
     var
      u$1 = u$0 - 65536 | 0,
      hi = 55296 | u$1 >>> 10 | 0,
      lo = 56320 | u$1 & 1023;
     unsafe_set_uint16_le(b, i, hi);
     unsafe_set_uint16_le(b, i + 2 | 0, lo);
     return 4;
    }
    return caml_call1(Stdlib[1], cst_index_out_of_bounds$2);
   }
   function is_valid_utf_16le(b){
    var max = caml_ml_bytes_length(b) - 1 | 0, i = 0;
    for(;;){
     if(max < i) return 1;
     if(i === max) return 0;
     var u = unsafe_get_uint16_le(b, i);
     if(55296 <= u && 57343 >= u){
      if(56319 < u) return 0;
      var last = i + 3 | 0;
      if(max < last) return 0;
      var u$0 = unsafe_get_uint16_le(b, i + 2 | 0);
      if(56320 <= u$0 && 57343 >= u$0){
       var i$1 = i + 4 | 0;
       i = i$1;
       continue;
      }
      return 0;
     }
     var i$0 = i + 2 | 0;
     i = i$0;
    }
   }
   var
    Stdlib_Bytes =
      [0,
       make,
       init,
       empty,
       copy,
       of_string,
       to_string,
       sub,
       sub_string,
       extend,
       fill,
       blit,
       blit_string,
       concat,
       cat,
       iter,
       iteri,
       map,
       mapi,
       fold_left,
       fold_right,
       for_all,
       exists,
       trim,
       escaped,
       index,
       index_opt,
       rindex,
       rindex_opt,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       contains,
       contains_from,
       rcontains_from,
       uppercase,
       lowercase,
       capitalize,
       uncapitalize,
       uppercase_ascii,
       lowercase_ascii,
       capitalize_ascii,
       uncapitalize_ascii,
       compare,
       runtime.caml_bytes_equal,
       starts_with,
       ends_with,
       caml_string_of_bytes,
       caml_bytes_of_string,
       split_on_char,
       to_seq,
       to_seqi,
       of_seq,
       get_utf_8_uchar,
       set_utf_8_uchar,
       is_valid_utf_8,
       get_utf_16be_uchar,
       set_utf_16be_uchar,
       is_valid_utf_16be,
       get_utf_16le_uchar,
       set_utf_16le_uchar,
       is_valid_utf_16le,
       caml_bytes_get,
       get_int8,
       caml_bytes_get16,
       get_uint16_be,
       get_uint16_le,
       get_int16_ne,
       get_int16_be,
       get_int16_le,
       caml_bytes_get32,
       get_int32_be,
       get_int32_le,
       caml_bytes_get64,
       get_int64_be,
       get_int64_le,
       set_uint8,
       caml_bytes_set,
       set_uint16_ne,
       set_int16_be,
       set_int16_le,
       caml_bytes_set16,
       set_int16_be,
       set_int16_le,
       caml_bytes_set32,
       set_int32_be,
       set_int32_le,
       caml_bytes_set64,
       set_int64_be,
       set_int64_le];
   runtime.caml_register_global(30, Stdlib_Bytes, "Stdlib__Bytes");
   return;
  }
  (globalThis));

//# 4969 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$0 = "",
    caml_blit_string = runtime.caml_blit_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_equal = runtime.caml_string_equal,
    caml_string_unsafe_get = runtime.caml_string_unsafe_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$0,
    empty = cst$0,
    Stdlib = global_data.Stdlib,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    bts = Stdlib_Bytes[48],
    bos = Stdlib_Bytes[49];
   function make(n, c){
    return caml_call1(bts, caml_call2(Stdlib_Bytes[1], n, c));
   }
   function init(n, f){
    return caml_call1(bts, caml_call2(Stdlib_Bytes[2], n, f));
   }
   function copy(s){
    var _ac_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call1(Stdlib_Bytes[4], _ac_));
   }
   var of_bytes = Stdlib_Bytes[6], to_bytes = Stdlib_Bytes[5];
   function sub(s, ofs, len){
    var _ab_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call3(Stdlib_Bytes[7], _ab_, ofs, len));
   }
   var
    fill = Stdlib_Bytes[10],
    blit = Stdlib_Bytes[12],
    cst_String_concat = "String.concat";
   function concat(sep, l){
    if(! l) return cst;
    var seplen = caml_ml_string_length(sep);
    a:
    {
     b:
     {
      var acc = 0, param = l, pos$1 = 0;
      for(;;){
       if(! param) break;
       var hd = param[1];
       if(! param[2]) break b;
       var
        tl = param[2],
        x = (caml_ml_string_length(hd) + seplen | 0) + acc | 0,
        acc$0 = acc <= x ? x : caml_call1(Stdlib[1], cst_String_concat);
       acc = acc$0;
       param = tl;
      }
      var _aa_ = acc;
      break a;
     }
     var _aa_ = caml_ml_string_length(hd) + acc | 0;
    }
    var dst = runtime.caml_create_bytes(_aa_), pos = pos$1, param$0 = l;
    for(;;){
     if(param$0){
      var hd$0 = param$0[1];
      if(param$0[2]){
       var tl$0 = param$0[2];
       caml_blit_string(hd$0, 0, dst, pos, caml_ml_string_length(hd$0));
       caml_blit_string
        (sep, 0, dst, pos + caml_ml_string_length(hd$0) | 0, seplen);
       var pos$0 = (pos + caml_ml_string_length(hd$0) | 0) + seplen | 0;
       pos = pos$0;
       param$0 = tl$0;
       continue;
      }
      caml_blit_string(hd$0, 0, dst, pos, caml_ml_string_length(hd$0));
     }
     return caml_call1(bts, dst);
    }
   }
   var
    cat = Stdlib[28],
    cst_String_index_from_Bytes_in = "String.index_from / Bytes.index_from",
    cst_String_index_from_opt_Byte =
      "String.index_from_opt / Bytes.index_from_opt",
    cst_String_rindex_from_Bytes_r = "String.rindex_from / Bytes.rindex_from",
    cst_String_rindex_from_opt_Byt =
      "String.rindex_from_opt / Bytes.rindex_from_opt",
    cst_String_contains_from_Bytes =
      "String.contains_from / Bytes.contains_from",
    cst_String_rcontains_from_Byte =
      "String.rcontains_from / Bytes.rcontains_from";
   function iter(f, s){
    var ___ = caml_ml_string_length(s) - 1 | 0, _Z_ = 0;
    if(___ >= 0){
     var i = _Z_;
     for(;;){
      caml_call1(f, caml_string_unsafe_get(s, i));
      var _$_ = i + 1 | 0;
      if(___ === i) break;
      i = _$_;
     }
    }
    return 0;
   }
   function iteri(f, s){
    var _X_ = caml_ml_string_length(s) - 1 | 0, _W_ = 0;
    if(_X_ >= 0){
     var i = _W_;
     for(;;){
      caml_call2(f, i, caml_string_unsafe_get(s, i));
      var _Y_ = i + 1 | 0;
      if(_X_ === i) break;
      i = _Y_;
     }
    }
    return 0;
   }
   function map(f, s){
    var _V_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call2(Stdlib_Bytes[17], f, _V_));
   }
   function mapi(f, s){
    var _U_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call2(Stdlib_Bytes[18], f, _U_));
   }
   function fold_right(f, x, a){
    var _T_ = caml_call1(bos, x);
    return caml_call3(Stdlib_Bytes[20], f, _T_, a);
   }
   function fold_left(f, a, x){
    var _S_ = caml_call1(bos, x);
    return caml_call3(Stdlib_Bytes[19], f, a, _S_);
   }
   function exists(f, s){
    var _R_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[22], f, _R_);
   }
   function for_all(f, s){
    var _Q_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[21], f, _Q_);
   }
   function is_space(param){
    var _P_ = param - 9 | 0;
    a:
    {
     if(4 < _P_ >>> 0){if(23 !== _P_) break a;} else if(2 === _P_) break a;
     return 1;
    }
    return 0;
   }
   function trim(s){
    if(s == cst$0) return s;
    if
     (!
      is_space(caml_string_unsafe_get(s, 0))
      &&
       !
       is_space(caml_string_unsafe_get(s, caml_ml_string_length(s) - 1 | 0)))
     return s;
    var _O_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call1(Stdlib_Bytes[23], _O_));
   }
   function escaped(s){
    var n = caml_ml_string_length(s), i = 0;
    for(;;){
     if(n <= i) return s;
     var _M_ = caml_string_unsafe_get(s, i) - 32 | 0;
     a:
     {
      if(59 < _M_ >>> 0){
       if(33 < _M_ - 61 >>> 0) break a;
      }
      else if(2 === _M_) break a;
      var i$0 = i + 1 | 0;
      i = i$0;
      continue;
     }
     var _N_ = caml_call1(bos, s);
     return caml_call1(bts, caml_call1(Stdlib_Bytes[24], _N_));
    }
   }
   function index_rec(s, lim, i, c){
    var i$0 = i;
    for(;;){
     if(lim <= i$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     if(caml_string_unsafe_get(s, i$0) === c) return i$0;
     var i$1 = i$0 + 1 | 0;
     i$0 = i$1;
    }
   }
   function index(s, c){return index_rec(s, caml_ml_string_length(s), 0, c);}
   function index_rec_opt(s, lim, i, c){
    var i$0 = i;
    for(;;){
     if(lim <= i$0) return 0;
     if(caml_string_unsafe_get(s, i$0) === c) return [0, i$0];
     var i$1 = i$0 + 1 | 0;
     i$0 = i$1;
    }
   }
   function index_opt(s, c){
    return index_rec_opt(s, caml_ml_string_length(s), 0, c);
   }
   function index_from(s, i, c){
    var l = caml_ml_string_length(s);
    if(0 <= i && l >= i) return index_rec(s, l, i, c);
    return caml_call1(Stdlib[1], cst_String_index_from_Bytes_in);
   }
   function index_from_opt(s, i, c){
    var l = caml_ml_string_length(s);
    if(0 <= i && l >= i) return index_rec_opt(s, l, i, c);
    return caml_call1(Stdlib[1], cst_String_index_from_opt_Byte);
   }
   function rindex_rec(s, i, c){
    var i$0 = i;
    for(;;){
     if(0 > i$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     if(caml_string_unsafe_get(s, i$0) === c) return i$0;
     var i$1 = i$0 - 1 | 0;
     i$0 = i$1;
    }
   }
   function rindex(s, c){
    return rindex_rec(s, caml_ml_string_length(s) - 1 | 0, c);
   }
   function rindex_from(s, i, c){
    if(-1 <= i && caml_ml_string_length(s) > i) return rindex_rec(s, i, c);
    return caml_call1(Stdlib[1], cst_String_rindex_from_Bytes_r);
   }
   function rindex_rec_opt(s, i, c){
    var i$0 = i;
    for(;;){
     if(0 > i$0) return 0;
     if(caml_string_unsafe_get(s, i$0) === c) return [0, i$0];
     var i$1 = i$0 - 1 | 0;
     i$0 = i$1;
    }
   }
   function rindex_opt(s, c){
    return rindex_rec_opt(s, caml_ml_string_length(s) - 1 | 0, c);
   }
   function rindex_from_opt(s, i, c){
    if(-1 <= i && caml_ml_string_length(s) > i)
     return rindex_rec_opt(s, i, c);
    return caml_call1(Stdlib[1], cst_String_rindex_from_opt_Byt);
   }
   function contains_from(s, i, c){
    var l = caml_ml_string_length(s);
    if(0 <= i && l >= i)
     try{index_rec(s, l, i, c); var _K_ = 1; return _K_;}
     catch(_L_){
      var _J_ = caml_wrap_exception(_L_);
      if(_J_ === Stdlib[8]) return 0;
      throw caml_maybe_attach_backtrace(_J_, 0);
     }
    return caml_call1(Stdlib[1], cst_String_contains_from_Bytes);
   }
   function contains(s, c){return contains_from(s, 0, c);}
   function rcontains_from(s, i, c){
    if(0 <= i && caml_ml_string_length(s) > i)
     try{rindex_rec(s, i, c); var _H_ = 1; return _H_;}
     catch(_I_){
      var _G_ = caml_wrap_exception(_I_);
      if(_G_ === Stdlib[8]) return 0;
      throw caml_maybe_attach_backtrace(_G_, 0);
     }
    return caml_call1(Stdlib[1], cst_String_rcontains_from_Byte);
   }
   function uppercase_ascii(s){
    var _F_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call1(Stdlib_Bytes[40], _F_));
   }
   function lowercase_ascii(s){
    var _E_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call1(Stdlib_Bytes[41], _E_));
   }
   function capitalize_ascii(s){
    var _D_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call1(Stdlib_Bytes[42], _D_));
   }
   function uncapitalize_ascii(s){
    var _C_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call1(Stdlib_Bytes[43], _C_));
   }
   function starts_with(prefix, s){
    var
     len_s = caml_ml_string_length(s),
     len_pre = caml_ml_string_length(prefix),
     _B_ = len_pre <= len_s ? 1 : 0;
    if(! _B_) return _B_;
    var i = 0;
    for(;;){
     if(i === len_pre) return 1;
     if(caml_string_unsafe_get(s, i) !== caml_string_unsafe_get(prefix, i))
      return 0;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function ends_with(suffix, s){
    var
     len_s = caml_ml_string_length(s),
     len_suf = caml_ml_string_length(suffix),
     diff = len_s - len_suf | 0,
     _A_ = 0 <= diff ? 1 : 0;
    if(! _A_) return _A_;
    var i = 0;
    for(;;){
     if(i === len_suf) return 1;
     if
      (caml_string_unsafe_get(s, diff + i | 0)
       !== caml_string_unsafe_get(suffix, i))
      return 0;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function split_on_char(sep, s){
    var
     r = [0, 0],
     j = [0, caml_ml_string_length(s)],
     _w_ = caml_ml_string_length(s) - 1 | 0;
    if(_w_ >= 0){
     var i = _w_;
     for(;;){
      if(caml_string_unsafe_get(s, i) === sep){
       var _y_ = r[1];
       r[1] = [0, sub(s, i + 1 | 0, (j[1] - i | 0) - 1 | 0), _y_];
       j[1] = i;
      }
      var _z_ = i - 1 | 0;
      if(0 === i) break;
      i = _z_;
     }
    }
    var _x_ = r[1];
    return [0, sub(s, 0, j[1]), _x_];
   }
   function uppercase(s){
    var _v_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call1(Stdlib_Bytes[36], _v_));
   }
   function lowercase(s){
    var _u_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call1(Stdlib_Bytes[37], _u_));
   }
   function capitalize(s){
    var _t_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call1(Stdlib_Bytes[38], _t_));
   }
   function uncapitalize(s){
    var _s_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call1(Stdlib_Bytes[39], _s_));
   }
   var compare = runtime.caml_string_compare;
   function to_seq(s){
    var _r_ = caml_call1(bos, s);
    return caml_call1(Stdlib_Bytes[51], _r_);
   }
   function to_seqi(s){
    var _q_ = caml_call1(bos, s);
    return caml_call1(Stdlib_Bytes[52], _q_);
   }
   function of_seq(g){
    return caml_call1(bts, caml_call1(Stdlib_Bytes[53], g));
   }
   function get_utf_8_uchar(s, i){
    var _p_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[54], _p_, i);
   }
   function is_valid_utf_8(s){
    var _o_ = caml_call1(bos, s);
    return caml_call1(Stdlib_Bytes[56], _o_);
   }
   function get_utf_16be_uchar(s, i){
    var _n_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[57], _n_, i);
   }
   function is_valid_utf_16be(s){
    var _m_ = caml_call1(bos, s);
    return caml_call1(Stdlib_Bytes[59], _m_);
   }
   function get_utf_16le_uchar(s, i){
    var _l_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[60], _l_, i);
   }
   function is_valid_utf_16le(s){
    var _k_ = caml_call1(bos, s);
    return caml_call1(Stdlib_Bytes[62], _k_);
   }
   function get_int8(s, i){
    var _j_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[64], _j_, i);
   }
   function get_uint16_le(s, i){
    var _i_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[67], _i_, i);
   }
   function get_uint16_be(s, i){
    var _h_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[66], _h_, i);
   }
   function get_int16_ne(s, i){
    var _g_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[68], _g_, i);
   }
   function get_int16_le(s, i){
    var _f_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[70], _f_, i);
   }
   function get_int16_be(s, i){
    var _e_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[69], _e_, i);
   }
   function get_int32_le(s, i){
    var _d_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[73], _d_, i);
   }
   function get_int32_be(s, i){
    var _c_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[72], _c_, i);
   }
   function get_int64_le(s, i){
    var _b_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[76], _b_, i);
   }
   function get_int64_be(s, i){
    var _a_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[75], _a_, i);
   }
   var
    Stdlib_String =
      [0,
       make,
       init,
       empty,
       of_bytes,
       to_bytes,
       concat,
       cat,
       caml_string_equal,
       compare,
       starts_with,
       ends_with,
       contains_from,
       rcontains_from,
       contains,
       sub,
       split_on_char,
       map,
       mapi,
       fold_left,
       fold_right,
       for_all,
       exists,
       trim,
       escaped,
       uppercase_ascii,
       lowercase_ascii,
       capitalize_ascii,
       uncapitalize_ascii,
       iter,
       iteri,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       index,
       index_opt,
       rindex,
       rindex_opt,
       to_seq,
       to_seqi,
       of_seq,
       get_utf_8_uchar,
       is_valid_utf_8,
       get_utf_16be_uchar,
       is_valid_utf_16be,
       get_utf_16le_uchar,
       is_valid_utf_16le,
       blit,
       copy,
       fill,
       uppercase,
       lowercase,
       capitalize,
       uncapitalize,
       runtime.caml_string_get,
       get_int8,
       runtime.caml_string_get16,
       get_uint16_be,
       get_uint16_le,
       get_int16_ne,
       get_int16_be,
       get_int16_le,
       runtime.caml_string_get32,
       get_int32_be,
       get_int32_le,
       runtime.caml_string_get64,
       get_int64_be,
       get_int64_le];
   runtime.caml_register_global(12, Stdlib_String, "Stdlib__String");
   return;
  }
  (globalThis));

//# 5572 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_array_sub = runtime.caml_array_sub,
    caml_check_bound = runtime.caml_check_bound,
    caml_make_vect = runtime.caml_make_vect,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Seq = global_data.Stdlib__Seq,
    Assert_failure = global_data.Assert_failure,
    Stdlib = global_data.Stdlib,
    make_float = runtime.caml_make_float_vect,
    Floatarray = [0],
    cst_Array_init = "Array.init",
    cst_Array_sub = "Array.sub",
    cst_Array_fill = "Array.fill",
    cst_Array_blit = "Array.blit",
    cst_Array_iter2_arrays_must_ha =
      "Array.iter2: arrays must have the same length",
    cst_Array_map2_arrays_must_hav =
      "Array.map2: arrays must have the same length",
    cst_Array_for_all2 = "Array.for_all2",
    cst_Array_exists2 = "Array.exists2",
    cst_Array_combine = "Array.combine";
   function init(l, f){
    if(0 === l) return [0];
    if(0 > l) return caml_call1(Stdlib[1], cst_Array_init);
    var res = caml_make_vect(l, caml_call1(f, 0)), _aq_ = l - 1 | 0, _ap_ = 1;
    if(_aq_ >= 1){
     var i = _ap_;
     for(;;){
      res[1 + i] = caml_call1(f, i);
      var _ar_ = i + 1 | 0;
      if(_aq_ === i) break;
      i = _ar_;
     }
    }
    return res;
   }
   function make_matrix(sx, sy, init){
    var res = caml_make_vect(sx, [0]), _an_ = sx - 1 | 0, _am_ = 0;
    if(_an_ >= 0){
     var x = _am_;
     for(;;){
      res[1 + x] = caml_make_vect(sy, init);
      var _ao_ = x + 1 | 0;
      if(_an_ === x) break;
      x = _ao_;
     }
    }
    return res;
   }
   function copy(a){
    var l = a.length - 1;
    return 0 === l ? [0] : caml_array_sub(a, 0, l);
   }
   function append(a1, a2){
    var l1 = a1.length - 1;
    return 0 === l1
            ? copy(a2)
            : 0
              === a2.length - 1
              ? caml_array_sub(a1, 0, l1)
              : runtime.caml_array_append(a1, a2);
   }
   function sub(a, ofs, len){
    if(0 <= ofs && 0 <= len && (a.length - 1 - len | 0) >= ofs)
     return caml_array_sub(a, ofs, len);
    return caml_call1(Stdlib[1], cst_Array_sub);
   }
   function fill(a, ofs, len, v){
    if(0 <= ofs && 0 <= len && (a.length - 1 - len | 0) >= ofs)
     return runtime.caml_array_fill(a, ofs, len, v);
    return caml_call1(Stdlib[1], cst_Array_fill);
   }
   function blit(a1, ofs1, a2, ofs2, len){
    if
     (0 <= len
      &&
       0 <= ofs1
       &&
        (a1.length - 1 - len | 0) >= ofs1
        && 0 <= ofs2 && (a2.length - 1 - len | 0) >= ofs2)
     return runtime.caml_array_blit(a1, ofs1, a2, ofs2, len);
    return caml_call1(Stdlib[1], cst_Array_blit);
   }
   function iter(f, a){
    var _ak_ = a.length - 2 | 0, _aj_ = 0;
    if(_ak_ >= 0){
     var i = _aj_;
     for(;;){
      caml_call1(f, a[1 + i]);
      var _al_ = i + 1 | 0;
      if(_ak_ === i) break;
      i = _al_;
     }
    }
    return 0;
   }
   function iter2(f, a, b){
    if(a.length - 1 !== b.length - 1)
     return caml_call1(Stdlib[1], cst_Array_iter2_arrays_must_ha);
    var _ah_ = a.length - 2 | 0, _ag_ = 0;
    if(_ah_ >= 0){
     var i = _ag_;
     for(;;){
      caml_call2(f, a[1 + i], b[1 + i]);
      var _ai_ = i + 1 | 0;
      if(_ah_ === i) break;
      i = _ai_;
     }
    }
    return 0;
   }
   function map(f, a){
    var l = a.length - 1;
    if(0 === l) return [0];
    var
     r = caml_make_vect(l, caml_call1(f, a[1])),
     _ae_ = l - 1 | 0,
     _ad_ = 1;
    if(_ae_ >= 1){
     var i = _ad_;
     for(;;){
      r[1 + i] = caml_call1(f, a[1 + i]);
      var _af_ = i + 1 | 0;
      if(_ae_ === i) break;
      i = _af_;
     }
    }
    return r;
   }
   function map2(f, a, b){
    var la = a.length - 1, lb = b.length - 1;
    if(la !== lb)
     return caml_call1(Stdlib[1], cst_Array_map2_arrays_must_hav);
    if(0 === la) return [0];
    var
     r = caml_make_vect(la, caml_call2(f, a[1], b[1])),
     _ab_ = la - 1 | 0,
     _aa_ = 1;
    if(_ab_ >= 1){
     var i = _aa_;
     for(;;){
      r[1 + i] = caml_call2(f, a[1 + i], b[1 + i]);
      var _ac_ = i + 1 | 0;
      if(_ab_ === i) break;
      i = _ac_;
     }
    }
    return r;
   }
   function iteri(f, a){
    var ___ = a.length - 2 | 0, _Z_ = 0;
    if(___ >= 0){
     var i = _Z_;
     for(;;){
      caml_call2(f, i, a[1 + i]);
      var _$_ = i + 1 | 0;
      if(___ === i) break;
      i = _$_;
     }
    }
    return 0;
   }
   function mapi(f, a){
    var l = a.length - 1;
    if(0 === l) return [0];
    var
     r = caml_make_vect(l, caml_call2(f, 0, a[1])),
     _X_ = l - 1 | 0,
     _W_ = 1;
    if(_X_ >= 1){
     var i = _W_;
     for(;;){
      r[1 + i] = caml_call2(f, i, a[1 + i]);
      var _Y_ = i + 1 | 0;
      if(_X_ === i) break;
      i = _Y_;
     }
    }
    return r;
   }
   function to_list(a){
    var i$1 = a.length - 2 | 0, i = i$1, res = 0;
    for(;;){
     if(0 > i) return res;
     var res$0 = [0, a[1 + i], res], i$0 = i - 1 | 0;
     i = i$0;
     res = res$0;
    }
   }
   function list_length(accu, param){
    var accu$0 = accu, param$0 = param;
    for(;;){
     if(! param$0) return accu$0;
     var t = param$0[2], accu$1 = accu$0 + 1 | 0;
     accu$0 = accu$1;
     param$0 = t;
    }
   }
   function of_list(l){
    if(! l) return [0];
    var
     tl = l[2],
     hd = l[1],
     a = caml_make_vect(list_length(0, l), hd),
     i = 1,
     param = tl;
    for(;;){
     if(! param) return a;
     var tl$0 = param[2], hd$0 = param[1];
     a[1 + i] = hd$0;
     var i$0 = i + 1 | 0;
     i = i$0;
     param = tl$0;
    }
   }
   function fold_left(f, x, a){
    var r = [0, x], _U_ = a.length - 2 | 0, _T_ = 0;
    if(_U_ >= 0){
     var i = _T_;
     for(;;){
      r[1] = caml_call2(f, r[1], a[1 + i]);
      var _V_ = i + 1 | 0;
      if(_U_ === i) break;
      i = _V_;
     }
    }
    return r[1];
   }
   function fold_left_map(f, acc, input_array){
    var len = input_array.length - 1;
    if(0 === len) return [0, acc, [0]];
    var
     match = caml_call2(f, acc, input_array[1]),
     elt = match[2],
     acc$0 = match[1],
     output_array = caml_make_vect(len, elt),
     acc$1 = [0, acc$0],
     _R_ = len - 1 | 0,
     _Q_ = 1;
    if(_R_ >= 1){
     var i = _Q_;
     for(;;){
      var
       match$0 = caml_call2(f, acc$1[1], input_array[1 + i]),
       elt$0 = match$0[2],
       acc$2 = match$0[1];
      acc$1[1] = acc$2;
      output_array[1 + i] = elt$0;
      var _S_ = i + 1 | 0;
      if(_R_ === i) break;
      i = _S_;
     }
    }
    return [0, acc$1[1], output_array];
   }
   function fold_right(f, a, x){
    var r = [0, x], _O_ = a.length - 2 | 0;
    if(_O_ >= 0){
     var i = _O_;
     for(;;){
      r[1] = caml_call2(f, a[1 + i], r[1]);
      var _P_ = i - 1 | 0;
      if(0 === i) break;
      i = _P_;
     }
    }
    return r[1];
   }
   function exists(p, a){
    var n = a.length - 1, i = 0;
    for(;;){
     if(i === n) return 0;
     if(caml_call1(p, a[1 + i])) return 1;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function for_all(p, a){
    var n = a.length - 1, i = 0;
    for(;;){
     if(i === n) return 1;
     if(! caml_call1(p, a[1 + i])) return 0;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function for_all2(p, l1, l2){
    var n1 = l1.length - 1, n2 = l2.length - 1;
    if(n1 !== n2) return caml_call1(Stdlib[1], cst_Array_for_all2);
    var i = 0;
    for(;;){
     if(i === n1) return 1;
     if(! caml_call2(p, l1[1 + i], l2[1 + i])) return 0;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function exists2(p, l1, l2){
    var n1 = l1.length - 1, n2 = l2.length - 1;
    if(n1 !== n2) return caml_call1(Stdlib[1], cst_Array_exists2);
    var i = 0;
    for(;;){
     if(i === n1) return 0;
     if(caml_call2(p, l1[1 + i], l2[1 + i])) return 1;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function mem(x, a){
    var n = a.length - 1, i = 0;
    for(;;){
     if(i === n) return 0;
     if(0 === runtime.caml_compare(a[1 + i], x)) return 1;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function memq(x, a){
    var n = a.length - 1, i = 0;
    for(;;){
     if(i === n) return 0;
     if(x === a[1 + i]) return 1;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function find_opt(p, a){
    var n = a.length - 1, i = 0;
    for(;;){
     if(i === n) return 0;
     var x = a[1 + i];
     if(caml_call1(p, x)) return [0, x];
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function find_map(f, a){
    var n = a.length - 1, i = 0;
    for(;;){
     if(i === n) return 0;
     var r = caml_call1(f, a[1 + i]);
     if(r) return r;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function split(x){
    if(runtime.caml_equal(x, [0])) return [0, [0], [0]];
    var
     match = x[1],
     b0 = match[2],
     a0 = match[1],
     n = x.length - 1,
     a = caml_make_vect(n, a0),
     b = caml_make_vect(n, b0),
     _M_ = n - 1 | 0,
     _L_ = 1;
    if(_M_ >= 1){
     var i = _L_;
     for(;;){
      var match$0 = x[1 + i], bi = match$0[2], ai = match$0[1];
      a[1 + i] = ai;
      b[1 + i] = bi;
      var _N_ = i + 1 | 0;
      if(_M_ === i) break;
      i = _N_;
     }
    }
    return [0, a, b];
   }
   function combine(a, b){
    var na = a.length - 1, nb = b.length - 1;
    if(na !== nb) caml_call1(Stdlib[1], cst_Array_combine);
    if(0 === na) return [0];
    var x = caml_make_vect(na, [0, a[1], b[1]]), _J_ = na - 1 | 0, _I_ = 1;
    if(_J_ >= 1){
     var i = _I_;
     for(;;){
      x[1 + i] = [0, a[1 + i], b[1 + i]];
      var _K_ = i + 1 | 0;
      if(_J_ === i) break;
      i = _K_;
     }
    }
    return x;
   }
   var
    Bottom = [248, "Stdlib.Array.Bottom", runtime.caml_fresh_oo_id(0)],
    _a_ = [0, "array.ml", 322, 4];
   function sort(cmp, a){
    function maxson(l, i){
     var i31 = ((i + i | 0) + i | 0) + 1 | 0, x = [0, i31];
     if((i31 + 2 | 0) < l){
      var _B_ = i31 + 1 | 0, _C_ = caml_check_bound(a, _B_)[1 + _B_];
      if(caml_call2(cmp, caml_check_bound(a, i31)[1 + i31], _C_) < 0)
       x[1] = i31 + 1 | 0;
      var
       _D_ = i31 + 2 | 0,
       _E_ = caml_check_bound(a, _D_)[1 + _D_],
       _F_ = x[1];
      if(caml_call2(cmp, caml_check_bound(a, _F_)[1 + _F_], _E_) < 0)
       x[1] = i31 + 2 | 0;
      return x[1];
     }
     if((i31 + 1 | 0) < l){
      var _G_ = i31 + 1 | 0, _H_ = caml_check_bound(a, _G_)[1 + _G_];
      if(0 > caml_call2(cmp, caml_check_bound(a, i31)[1 + i31], _H_))
       return i31 + 1 | 0;
     }
     if(i31 < l) return i31;
     throw caml_maybe_attach_backtrace([0, Bottom, i], 1);
    }
    var l = a.length - 1, _v_ = ((l + 1 | 0) / 3 | 0) - 1 | 0;
    if(_v_ >= 0){
     var i$6 = _v_;
     for(;;){
      var e$1 = caml_check_bound(a, i$6)[1 + i$6];
      try{
       var i = i$6;
       for(;;){
        var j = maxson(l, i);
        if(0 >= caml_call2(cmp, caml_check_bound(a, j)[1 + j], e$1)) break;
        var _s_ = caml_check_bound(a, j)[1 + j];
        caml_check_bound(a, i)[1 + i] = _s_;
        i = j;
       }
       caml_check_bound(a, i)[1 + i] = e$1;
      }
      catch(exn$0){
       var exn = caml_wrap_exception(exn$0);
       if(exn[1] !== Bottom) throw caml_maybe_attach_backtrace(exn, 0);
       var i$0 = exn[2];
       caml_check_bound(a, i$0)[1 + i$0] = e$1;
      }
      var _A_ = i$6 - 1 | 0;
      if(0 === i$6) break;
      i$6 = _A_;
     }
    }
    var _w_ = l - 1 | 0;
    if(_w_ >= 2){
     var i$4 = _w_;
     for(;;){
      var e$0 = caml_check_bound(a, i$4)[1 + i$4];
      a[1 + i$4] = caml_check_bound(a, 0)[1];
      var i$5 = 0;
      try{
       var i$1 = i$5;
       for(;;){
        var j$0 = maxson(i$4, i$1), _t_ = caml_check_bound(a, j$0)[1 + j$0];
        caml_check_bound(a, i$1)[1 + i$1] = _t_;
        i$1 = j$0;
       }
      }
      catch(exn){
       var exn$0 = caml_wrap_exception(exn);
       if(exn$0[1] !== Bottom) throw caml_maybe_attach_backtrace(exn$0, 0);
       var i$2 = exn$0[2];
       a:
       {
        b:
        {
         var i$3 = i$2;
         for(;;){
          var father = (i$3 - 1 | 0) / 3 | 0;
          if(i$3 === father)
           throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
          if
           (0 <= caml_call2(cmp, caml_check_bound(a, father)[1 + father], e$0))
           break;
          var _u_ = caml_check_bound(a, father)[1 + father];
          caml_check_bound(a, i$3)[1 + i$3] = _u_;
          if(0 >= father) break b;
          i$3 = father;
         }
         caml_check_bound(a, i$3)[1 + i$3] = e$0;
         break a;
        }
        caml_check_bound(a, 0)[1] = e$0;
       }
       var _z_ = i$4 - 1 | 0;
       if(2 === i$4) break;
       i$4 = _z_;
      }
     }
    }
    var _x_ = 1 < l ? 1 : 0;
    if(_x_){
     var e = caml_check_bound(a, 1)[2];
     a[2] = caml_check_bound(a, 0)[1];
     a[1] = e;
     var _y_ = 0;
    }
    else
     var _y_ = _x_;
    return _y_;
   }
   function stable_sort(cmp, a){
    function merge(src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs){
     var
      src1r = src1ofs + src1len | 0,
      src2r = src2ofs + src2len | 0,
      s2$1 = caml_check_bound(src2, src2ofs)[1 + src2ofs],
      s1$1 = caml_check_bound(a, src1ofs)[1 + src1ofs],
      i1 = src1ofs,
      s1 = s1$1,
      i2 = src2ofs,
      s2 = s2$1,
      d = dstofs;
     for(;;)
      if(0 < caml_call2(cmp, s1, s2)){
       caml_check_bound(dst, d)[1 + d] = s2;
       var i2$0 = i2 + 1 | 0;
       if(i2$0 >= src2r) return blit(a, i1, dst, d + 1 | 0, src1r - i1 | 0);
       var d$0 = d + 1 | 0, s2$0 = caml_check_bound(src2, i2$0)[1 + i2$0];
       i2 = i2$0;
       s2 = s2$0;
       d = d$0;
      }
      else{
       caml_check_bound(dst, d)[1 + d] = s1;
       var i1$0 = i1 + 1 | 0;
       if(i1$0 >= src1r)
        return blit(src2, i2, dst, d + 1 | 0, src2r - i2 | 0);
       var d$1 = d + 1 | 0, s1$0 = caml_check_bound(a, i1$0)[1 + i1$0];
       i1 = i1$0;
       s1 = s1$0;
       d = d$1;
      }
    }
    function isortto(srcofs, dst, dstofs, len){
     var _k_ = len - 1 | 0, _j_ = 0;
     if(_k_ >= 0){
      var i = _j_;
      for(;;){
       var
        _l_ = srcofs + i | 0,
        e = caml_check_bound(a, _l_)[1 + _l_],
        j = [0, (dstofs + i | 0) - 1 | 0];
       for(;;){
        if(dstofs > j[1]) break;
        var _m_ = j[1];
        if(0 >= caml_call2(cmp, caml_check_bound(dst, _m_)[1 + _m_], e))
         break;
        var
         _n_ = j[1],
         _o_ = caml_check_bound(dst, _n_)[1 + _n_],
         _p_ = j[1] + 1 | 0;
        caml_check_bound(dst, _p_)[1 + _p_] = _o_;
        j[1]--;
       }
       var _q_ = j[1] + 1 | 0;
       caml_check_bound(dst, _q_)[1 + _q_] = e;
       var _r_ = i + 1 | 0;
       if(_k_ === i) break;
       i = _r_;
      }
     }
     return 0;
    }
    function sortto(srcofs, dst, dstofs, len){
     if(len <= 5) return isortto(srcofs, dst, dstofs, len);
     var l1 = len / 2 | 0, l2 = len - l1 | 0;
     sortto(srcofs + l1 | 0, dst, dstofs + l1 | 0, l2);
     sortto(srcofs, a, srcofs + l2 | 0, l1);
     return merge(srcofs + l2 | 0, l1, dst, dstofs + l1 | 0, l2, dst, dstofs);
    }
    var l = a.length - 1;
    if(l <= 5) return isortto(0, a, 0, l);
    var
     l1 = l / 2 | 0,
     l2 = l - l1 | 0,
     t = caml_make_vect(l2, caml_check_bound(a, 0)[1]);
    sortto(l1, t, 0, l2);
    sortto(0, a, l2, l1);
    return merge(l2, l1, t, 0, l2, a, 0);
   }
   function to_seq(a){
    function aux(i, param){
     if(i >= a.length - 1) return 0;
     var x = a[1 + i], _h_ = i + 1 | 0;
     return [0, x, function(_i_){return aux(_h_, _i_);}];
    }
    var _f_ = 0;
    return function(_g_){return aux(_f_, _g_);};
   }
   function to_seqi(a){
    function aux(i, param){
     if(i >= a.length - 1) return 0;
     var x = a[1 + i], _d_ = i + 1 | 0;
     return [0, [0, i, x], function(_e_){return aux(_d_, _e_);}];
    }
    var _b_ = 0;
    return function(_c_){return aux(_b_, _c_);};
   }
   function of_seq(i$2){
    var
     l =
       caml_call3
        (Stdlib_Seq[5], function(acc, x){return [0, x, acc];}, 0, i$2);
    if(! l) return [0];
    var
     tl = l[2],
     hd = l[1],
     len = list_length(0, l),
     a = caml_make_vect(len, hd),
     i$1 = len - 2 | 0,
     i = i$1,
     param = tl;
    for(;;){
     if(! param) return a;
     var tl$0 = param[2], hd$0 = param[1];
     a[1 + i] = hd$0;
     var i$0 = i - 1 | 0;
     i = i$0;
     param = tl$0;
    }
   }
   var
    Stdlib_Array =
      [0,
       make_float,
       init,
       make_matrix,
       make_matrix,
       append,
       runtime.caml_array_concat,
       sub,
       copy,
       fill,
       blit,
       to_list,
       of_list,
       iter,
       iteri,
       map,
       mapi,
       fold_left,
       fold_left_map,
       fold_right,
       iter2,
       map2,
       for_all,
       exists,
       for_all2,
       exists2,
       mem,
       memq,
       find_opt,
       find_map,
       split,
       combine,
       sort,
       stable_sort,
       stable_sort,
       to_seq,
       to_seqi,
       of_seq,
       Floatarray];
   runtime.caml_register_global(14, Stdlib_Array, "Stdlib__Array");
   return;
  }
  (globalThis));

//# 7011 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_greaterequal = runtime.caml_greaterequal,
    caml_int_compare = runtime.caml_int_compare,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_mul = runtime.caml_mul,
    caml_wrap_exception = runtime.caml_wrap_exception,
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Assert_failure = global_data.Assert_failure,
    zero = 0,
    one = 1;
   function succ(n){return n + 1 | 0;}
   function pred(n){return n - 1 | 0;}
   function abs(n){return caml_greaterequal(n, 0) ? n : - n | 0;}
   function lognot(n){return n ^ -1;}
   var
    _a_ = Stdlib_Sys[9],
    _b_ = [0, "int32.ml", 69, 6],
    minus_one = -1,
    min_int = -2147483648,
    max_int = 2147483647;
   if(32 === _a_)
    var
     max_int$0 = Stdlib[19],
     unsigned_to_int =
       function(n){
        if(0 >= caml_int_compare(0, n) && 0 >= caml_int_compare(n, max_int$0))
         return [0, n];
        return 0;
       };
   else{
    if(64 !== _a_)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
    var unsigned_to_int = function(n){return [0, n & -1];};
   }
   function to_string(n){return runtime.caml_format_int("%d", n);}
   function of_string_opt(s){
    try{var _d_ = [0, runtime.caml_int_of_string(s)]; return _d_;}
    catch(_e_){
     var _c_ = caml_wrap_exception(_e_);
     if(_c_[1] === Stdlib[7]) return 0;
     throw caml_maybe_attach_backtrace(_c_, 0);
    }
   }
   var compare = caml_int_compare;
   function equal(x, y){return 0 === caml_int_compare(x, y) ? 1 : 0;}
   function unsigned_compare(n, m){
    var y = m + 2147483648 | 0, x = n + 2147483648 | 0;
    return caml_int_compare(x, y);
   }
   function min(x, y){return runtime.caml_lessequal(x, y) ? x : y;}
   function max(x, y){return caml_greaterequal(x, y) ? x : y;}
   function unsigned_div(n, d){
    if(runtime.caml_lessthan(d, 0))
     return 0 <= unsigned_compare(n, d) ? one : zero;
    var q = runtime.caml_div(n >>> 1 | 0, d) << 1, r = n - caml_mul(q, d) | 0;
    return 0 <= unsigned_compare(r, d) ? q + 1 | 0 : q;
   }
   function unsigned_rem(n, d){
    return n - caml_mul(unsigned_div(n, d), d) | 0;
   }
   var
    Stdlib_Int32 =
      [0,
       zero,
       one,
       minus_one,
       unsigned_div,
       unsigned_rem,
       succ,
       pred,
       abs,
       max_int,
       min_int,
       lognot,
       unsigned_to_int,
       of_string_opt,
       to_string,
       compare,
       unsigned_compare,
       equal,
       min,
       max];
   runtime.caml_register_global(14, Stdlib_Int32, "Stdlib__Int32");
   return;
  }
  (globalThis));

//# 7106 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_greaterequal = runtime.caml_greaterequal,
    caml_int64_add = runtime.caml_int64_add,
    caml_int64_compare = runtime.caml_int64_compare,
    caml_int64_mul = runtime.caml_int64_mul,
    caml_int64_sub = runtime.caml_int64_sub,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception,
    global_data = runtime.caml_get_global_data(),
    _a_ = runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
    zero = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    one = runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
    minus_one = runtime.caml_int64_create_lo_mi_hi(16777215, 16777215, 65535),
    min_int = runtime.caml_int64_create_lo_mi_hi(0, 0, 32768),
    max_int = runtime.caml_int64_create_lo_mi_hi(16777215, 16777215, 32767),
    Stdlib = global_data.Stdlib,
    _b_ = runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
    _c_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _d_ = runtime.caml_int64_create_lo_mi_hi(16777215, 16777215, 65535);
   function succ(n){return caml_int64_add(n, _a_);}
   function pred(n){return caml_int64_sub(n, _b_);}
   function abs(n){
    return caml_greaterequal(n, _c_) ? n : runtime.caml_int64_neg(n);
   }
   function lognot(n){return runtime.caml_int64_xor(n, _d_);}
   var max_int$0 = runtime.caml_int64_of_int32(Stdlib[19]);
   function unsigned_to_int(n){
    if
     (0 >= caml_int64_compare(zero, n)
      && 0 >= caml_int64_compare(n, max_int$0))
     return [0, runtime.caml_int64_to_int32(n)];
    return 0;
   }
   function to_string(n){return runtime.caml_int64_format("%d", n);}
   function of_string_opt(s){
    try{var _f_ = [0, runtime.caml_int64_of_string(s)]; return _f_;}
    catch(_g_){
     var _e_ = caml_wrap_exception(_g_);
     if(_e_[1] === Stdlib[7]) return 0;
     throw caml_maybe_attach_backtrace(_e_, 0);
    }
   }
   function compare(x, y){return caml_int64_compare(x, y);}
   function equal(x, y){return 0 === caml_int64_compare(x, y) ? 1 : 0;}
   function unsigned_compare(n, m){
    var y = caml_int64_sub(m, min_int), x = caml_int64_sub(n, min_int);
    return caml_int64_compare(x, y);
   }
   function min(x, y){return runtime.caml_lessequal(x, y) ? x : y;}
   function max(x, y){return caml_greaterequal(x, y) ? x : y;}
   function unsigned_div(n, d){
    if(runtime.caml_lessthan(d, zero))
     return 0 <= unsigned_compare(n, d) ? one : zero;
    var
     q =
       runtime.caml_int64_shift_left
        (runtime.caml_int64_div
          (runtime.caml_int64_shift_right_unsigned(n, 1), d),
         1),
     r = caml_int64_sub(n, caml_int64_mul(q, d));
    return 0 <= unsigned_compare(r, d) ? caml_int64_add(q, _a_) : q;
   }
   function unsigned_rem(n, d){
    return caml_int64_sub(n, caml_int64_mul(unsigned_div(n, d), d));
   }
   var
    Stdlib_Int64 =
      [0,
       zero,
       one,
       minus_one,
       unsigned_div,
       unsigned_rem,
       succ,
       pred,
       abs,
       max_int,
       min_int,
       lognot,
       unsigned_to_int,
       of_string_opt,
       to_string,
       compare,
       unsigned_compare,
       equal,
       min,
       max];
   runtime.caml_register_global(11, Stdlib_Int64, "Stdlib__Int64");
   return;
  }
  (globalThis));

//# 7204 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_greaterequal = runtime.caml_greaterequal,
    caml_int_compare = runtime.caml_int_compare,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_mul = runtime.caml_mul,
    caml_wrap_exception = runtime.caml_wrap_exception,
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Sys = global_data.Stdlib__Sys,
    zero = 0,
    one = 1;
   function succ(n){return n + 1 | 0;}
   function pred(n){return n - 1 | 0;}
   function abs(n){return caml_greaterequal(n, 0) ? n : - n | 0;}
   var
    size = Stdlib_Sys[9],
    min_int = 1 << (size - 1 | 0),
    max_int = min_int - 1 | 0;
   function lognot(n){return n ^ -1;}
   var max_int$0 = Stdlib[19];
   function unsigned_to_int(n){
    if(0 >= caml_int_compare(0, n) && 0 >= caml_int_compare(n, max_int$0))
     return [0, n];
    return 0;
   }
   function to_string(n){return runtime.caml_format_int("%d", n);}
   function of_string_opt(s){
    try{var _b_ = [0, runtime.caml_int_of_string(s)]; return _b_;}
    catch(_c_){
     var _a_ = caml_wrap_exception(_c_);
     if(_a_[1] === Stdlib[7]) return 0;
     throw caml_maybe_attach_backtrace(_a_, 0);
    }
   }
   var compare = caml_int_compare;
   function equal(x, y){return 0 === caml_int_compare(x, y) ? 1 : 0;}
   function unsigned_compare(n, m){
    var y = m - min_int | 0, x = n - min_int | 0;
    return caml_int_compare(x, y);
   }
   function min(x, y){return runtime.caml_lessequal(x, y) ? x : y;}
   function max(x, y){return caml_greaterequal(x, y) ? x : y;}
   function unsigned_div(n, d){
    if(runtime.caml_lessthan(d, 0))
     return 0 <= unsigned_compare(n, d) ? one : zero;
    var q = runtime.caml_div(n >>> 1 | 0, d) << 1, r = n - caml_mul(q, d) | 0;
    return 0 <= unsigned_compare(r, d) ? q + 1 | 0 : q;
   }
   function unsigned_rem(n, d){
    return n - caml_mul(unsigned_div(n, d), d) | 0;
   }
   var
    Stdlib_Nativeint =
      [0,
       zero,
       one,
       -1,
       unsigned_div,
       unsigned_rem,
       succ,
       pred,
       abs,
       size,
       max_int,
       min_int,
       lognot,
       unsigned_to_int,
       of_string_opt,
       to_string,
       compare,
       unsigned_compare,
       equal,
       min,
       max];
   runtime.caml_register_global(12, Stdlib_Nativeint, "Stdlib__Nativeint");
   return;
  }
  (globalThis));

//# 8582 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Map_bal$3 = "Map.bal",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Seq = global_data.Stdlib__Seq,
    cst_Map_bal = cst_Map_bal$3,
    cst_Map_bal$0 = cst_Map_bal$3,
    cst_Map_bal$1 = cst_Map_bal$3,
    cst_Map_bal$2 = cst_Map_bal$3,
    cst_Map_remove_min_elt = "Map.remove_min_elt",
    _a_ = [0, 0, 0, 0],
    _b_ = [0, "map.ml", 400, 10],
    _c_ = [0, 0, 0],
    Stdlib_Map =
      [0,
       function(Ord){
        function height(param){
         if(! param) return 0;
         var h = param[5];
         return h;
        }
        function create(l, x, d, r){
         var
          hl = height(l),
          hr = height(r),
          _K_ = hr <= hl ? hl + 1 | 0 : hr + 1 | 0;
         return [0, l, x, d, r, _K_];
        }
        function singleton(x, d){return [0, 0, x, d, 0, 1];}
        function bal(l, x, d, r){
         if(l) var h = l[5], hl = h; else var hl = 0;
         if(r) var h$0 = r[5], hr = h$0; else var hr = 0;
         if((hr + 2 | 0) < hl){
          if(! l) return caml_call1(Stdlib[1], cst_Map_bal$0);
          var lr = l[4], ld = l[3], lv = l[2], ll = l[1], _F_ = height(lr);
          if(_F_ <= height(ll))
           return create(ll, lv, ld, create(lr, x, d, r));
          if(! lr) return caml_call1(Stdlib[1], cst_Map_bal);
          var
           lrr = lr[4],
           lrd = lr[3],
           lrv = lr[2],
           lrl = lr[1],
           _G_ = create(lrr, x, d, r);
          return create(create(ll, lv, ld, lrl), lrv, lrd, _G_);
         }
         if((hl + 2 | 0) >= hr){
          var _J_ = hr <= hl ? hl + 1 | 0 : hr + 1 | 0;
          return [0, l, x, d, r, _J_];
         }
         if(! r) return caml_call1(Stdlib[1], cst_Map_bal$2);
         var rr = r[4], rd = r[3], rv = r[2], rl = r[1], _H_ = height(rl);
         if(_H_ <= height(rr)) return create(create(l, x, d, rl), rv, rd, rr);
         if(! rl) return caml_call1(Stdlib[1], cst_Map_bal$1);
         var
          rlr = rl[4],
          rld = rl[3],
          rlv = rl[2],
          rll = rl[1],
          _I_ = create(rlr, rv, rd, rr);
         return create(create(l, x, d, rll), rlv, rld, _I_);
        }
        var empty = 0;
        function is_empty(param){return param ? 0 : 1;}
        function add(x, data, m){
         if(! m) return [0, 0, x, data, 0, 1];
         var
          h = m[5],
          r = m[4],
          d = m[3],
          v = m[2],
          l = m[1],
          c = caml_call2(Ord[1], x, v);
         if(0 === c) return d === data ? m : [0, l, x, data, r, h];
         if(0 <= c){
          var rr = add(x, data, r);
          return r === rr ? m : bal(l, v, d, rr);
         }
         var ll = add(x, data, l);
         return l === ll ? m : bal(ll, v, d, r);
        }
        function find(x, param){
         var param$0 = param;
         for(;;){
          if(! param$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
          var
           r = param$0[4],
           d = param$0[3],
           v = param$0[2],
           l = param$0[1],
           c = caml_call2(Ord[1], x, v);
          if(0 === c) return d;
          var r$0 = 0 <= c ? r : l;
          param$0 = r$0;
         }
        }
        function find_first(f, param$0){
         var param$1 = param$0;
         for(;;){
          if(! param$1) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
          var
           r$0 = param$1[4],
           d0$1 = param$1[3],
           v0$1 = param$1[2],
           l$0 = param$1[1];
          if(caml_call1(f, v0$1)){
           var v0 = v0$1, d0 = d0$1, param = l$0;
           for(;;){
            if(! param) return [0, v0, d0];
            var r = param[4], d0$0 = param[3], v0$0 = param[2], l = param[1];
            if(caml_call1(f, v0$0)){
             v0 = v0$0;
             d0 = d0$0;
             param = l;
            }
            else
             param = r;
           }
          }
          else
           param$1 = r$0;
         }
        }
        function find_first_opt(f, param$0){
         var param$1 = param$0;
         for(;;){
          if(! param$1) return 0;
          var
           r$0 = param$1[4],
           d0$1 = param$1[3],
           v0$1 = param$1[2],
           l$0 = param$1[1];
          if(caml_call1(f, v0$1)){
           var v0 = v0$1, d0 = d0$1, param = l$0;
           for(;;){
            if(! param) return [0, [0, v0, d0]];
            var r = param[4], d0$0 = param[3], v0$0 = param[2], l = param[1];
            if(caml_call1(f, v0$0)){
             v0 = v0$0;
             d0 = d0$0;
             param = l;
            }
            else
             param = r;
           }
          }
          else
           param$1 = r$0;
         }
        }
        function find_last(f, param$0){
         var param$1 = param$0;
         for(;;){
          if(! param$1) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
          var
           r$0 = param$1[4],
           d0$1 = param$1[3],
           v0$1 = param$1[2],
           l$0 = param$1[1];
          if(caml_call1(f, v0$1)){
           var v0 = v0$1, d0 = d0$1, param = r$0;
           for(;;){
            if(! param) return [0, v0, d0];
            var r = param[4], d0$0 = param[3], v0$0 = param[2], l = param[1];
            if(caml_call1(f, v0$0)){
             v0 = v0$0;
             d0 = d0$0;
             param = r;
            }
            else
             param = l;
           }
          }
          else
           param$1 = l$0;
         }
        }
        function find_last_opt(f, param$0){
         var param$1 = param$0;
         for(;;){
          if(! param$1) return 0;
          var
           r$0 = param$1[4],
           d0$1 = param$1[3],
           v0$1 = param$1[2],
           l$0 = param$1[1];
          if(caml_call1(f, v0$1)){
           var v0 = v0$1, d0 = d0$1, param = r$0;
           for(;;){
            if(! param) return [0, [0, v0, d0]];
            var r = param[4], d0$0 = param[3], v0$0 = param[2], l = param[1];
            if(caml_call1(f, v0$0)){
             v0 = v0$0;
             d0 = d0$0;
             param = r;
            }
            else
             param = l;
           }
          }
          else
           param$1 = l$0;
         }
        }
        function find_opt(x, param){
         var param$0 = param;
         for(;;){
          if(! param$0) return 0;
          var
           r = param$0[4],
           d = param$0[3],
           v = param$0[2],
           l = param$0[1],
           c = caml_call2(Ord[1], x, v);
          if(0 === c) return [0, d];
          var r$0 = 0 <= c ? r : l;
          param$0 = r$0;
         }
        }
        function mem(x, param){
         var param$0 = param;
         for(;;){
          if(! param$0) return 0;
          var
           r = param$0[4],
           v = param$0[2],
           l = param$0[1],
           c = caml_call2(Ord[1], x, v),
           _E_ = 0 === c ? 1 : 0;
          if(_E_) return _E_;
          var r$0 = 0 <= c ? r : l;
          param$0 = r$0;
         }
        }
        function min_binding(param){
         var param$0 = param;
         for(;;){
          if(! param$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
          var l = param$0[1];
          if(! l){var d = param$0[3], v = param$0[2]; return [0, v, d];}
          param$0 = l;
         }
        }
        function min_binding_opt(param){
         var param$0 = param;
         for(;;){
          if(! param$0) return 0;
          var l = param$0[1];
          if(! l){var d = param$0[3], v = param$0[2]; return [0, [0, v, d]];}
          param$0 = l;
         }
        }
        function max_binding(param){
         var param$0 = param;
         for(;;){
          if(! param$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
          if(! param$0[4]){
           var d = param$0[3], v = param$0[2];
           return [0, v, d];
          }
          var r = param$0[4];
          param$0 = r;
         }
        }
        function max_binding_opt(param){
         var param$0 = param;
         for(;;){
          if(! param$0) return 0;
          if(! param$0[4]){
           var d = param$0[3], v = param$0[2];
           return [0, [0, v, d]];
          }
          var r = param$0[4];
          param$0 = r;
         }
        }
        function remove_min_binding(param){
         if(! param) return caml_call1(Stdlib[1], cst_Map_remove_min_elt);
         var l = param[1];
         if(l){
          var r = param[4], d = param[3], v = param[2];
          return bal(remove_min_binding(l), v, d, r);
         }
         var r$0 = param[4];
         return r$0;
        }
        function _d_(t1, t2){
         if(! t1) return t2;
         if(! t2) return t1;
         var match = min_binding(t2), d = match[2], x = match[1];
         return bal(t1, x, d, remove_min_binding(t2));
        }
        function remove(x, m){
         if(! m) return 0;
         var
          r = m[4],
          d = m[3],
          v = m[2],
          l = m[1],
          c = caml_call2(Ord[1], x, v);
         if(0 === c) return _d_(l, r);
         if(0 <= c){
          var rr = remove(x, r);
          return r === rr ? m : bal(l, v, d, rr);
         }
         var ll = remove(x, l);
         return l === ll ? m : bal(ll, v, d, r);
        }
        function update(x, f, m){
         if(! m){
          var match$0 = caml_call1(f, 0);
          if(! match$0) return 0;
          var data$0 = match$0[1];
          return [0, 0, x, data$0, 0, 1];
         }
         var
          h = m[5],
          r = m[4],
          d = m[3],
          v = m[2],
          l = m[1],
          c = caml_call2(Ord[1], x, v);
         if(0 === c){
          var match = caml_call1(f, [0, d]);
          if(! match) return _d_(l, r);
          var data = match[1];
          return d === data ? m : [0, l, x, data, r, h];
         }
         if(0 <= c){
          var rr = update(x, f, r);
          return r === rr ? m : bal(l, v, d, rr);
         }
         var ll = update(x, f, l);
         return l === ll ? m : bal(ll, v, d, r);
        }
        function iter(f, param){
         var param$0 = param;
         for(;;){
          if(! param$0) return 0;
          var r = param$0[4], d = param$0[3], v = param$0[2], l = param$0[1];
          iter(f, l);
          caml_call2(f, v, d);
          param$0 = r;
         }
        }
        function map(f, param){
         if(! param) return 0;
         var
          h = param[5],
          r = param[4],
          d = param[3],
          v = param[2],
          l = param[1],
          l$0 = map(f, l),
          d$0 = caml_call1(f, d),
          r$0 = map(f, r);
         return [0, l$0, v, d$0, r$0, h];
        }
        function mapi(f, param){
         if(! param) return 0;
         var
          h = param[5],
          r = param[4],
          d = param[3],
          v = param[2],
          l = param[1],
          l$0 = mapi(f, l),
          d$0 = caml_call2(f, v, d),
          r$0 = mapi(f, r);
         return [0, l$0, v, d$0, r$0, h];
        }
        function fold(f, m, accu){
         var m$0 = m, accu$0 = accu;
         for(;;){
          if(! m$0) return accu$0;
          var
           r = m$0[4],
           d = m$0[3],
           v = m$0[2],
           l = m$0[1],
           accu$1 = caml_call3(f, v, d, fold(f, l, accu$0));
          m$0 = r;
          accu$0 = accu$1;
         }
        }
        function for_all(p, param){
         var param$0 = param;
         for(;;){
          if(! param$0) return 1;
          var
           r = param$0[4],
           d = param$0[3],
           v = param$0[2],
           l = param$0[1],
           _B_ = caml_call2(p, v, d);
          if(_B_){
           var _C_ = for_all(p, l);
           if(_C_){param$0 = r; continue;}
           var _D_ = _C_;
          }
          else
           var _D_ = _B_;
          return _D_;
         }
        }
        function exists(p, param){
         var param$0 = param;
         for(;;){
          if(! param$0) return 0;
          var
           r = param$0[4],
           d = param$0[3],
           v = param$0[2],
           l = param$0[1],
           _y_ = caml_call2(p, v, d);
          if(_y_)
           var _z_ = _y_;
          else{
           var _A_ = exists(p, l);
           if(! _A_){param$0 = r; continue;}
           var _z_ = _A_;
          }
          return _z_;
         }
        }
        function add_min_binding(k, x, param){
         if(! param) return singleton(k, x);
         var r = param[4], d = param[3], v = param[2], l = param[1];
         return bal(add_min_binding(k, x, l), v, d, r);
        }
        function add_max_binding(k, x, param){
         if(! param) return singleton(k, x);
         var r = param[4], d = param[3], v = param[2], l = param[1];
         return bal(l, v, d, add_max_binding(k, x, r));
        }
        function join(l, v, d, r){
         if(! l) return add_min_binding(v, d, r);
         if(! r) return add_max_binding(v, d, l);
         var
          rh = r[5],
          rr = r[4],
          rd = r[3],
          rv = r[2],
          rl = r[1],
          lh = l[5],
          lr = l[4],
          ld = l[3],
          lv = l[2],
          ll = l[1];
         return (rh + 2 | 0) < lh
                 ? bal(ll, lv, ld, join(lr, v, d, r))
                 : (lh
                   + 2
                   | 0)
                   < rh
                   ? bal(join(l, v, d, rl), rv, rd, rr)
                   : create(l, v, d, r);
        }
        function concat(t1, t2){
         if(! t1) return t2;
         if(! t2) return t1;
         var match = min_binding(t2), d = match[2], x = match[1];
         return join(t1, x, d, remove_min_binding(t2));
        }
        function concat_or_join(t1, v, d, t2){
         if(! d) return concat(t1, t2);
         var d$0 = d[1];
         return join(t1, v, d$0, t2);
        }
        function split(x, param){
         if(! param) return _a_;
         var
          r = param[4],
          d = param[3],
          v = param[2],
          l = param[1],
          c = caml_call2(Ord[1], x, v);
         if(0 === c) return [0, l, [0, d], r];
         if(0 <= c){
          var
           match = split(x, r),
           rr = match[3],
           pres = match[2],
           lr = match[1];
          return [0, join(l, v, d, lr), pres, rr];
         }
         var
          match$0 = split(x, l),
          rl = match$0[3],
          pres$0 = match$0[2],
          ll = match$0[1];
         return [0, ll, pres$0, join(rl, v, d, r)];
        }
        function merge(f, s1, s2){
         if(s1){
          var h1 = s1[5], r1 = s1[4], d1 = s1[3], v1 = s1[2], l1 = s1[1];
          if(height(s2) <= h1){
           var
            match = split(v1, s2),
            r2 = match[3],
            d2 = match[2],
            l2 = match[1],
            _u_ = merge(f, r1, r2),
            _v_ = caml_call3(f, v1, [0, d1], d2);
           return concat_or_join(merge(f, l1, l2), v1, _v_, _u_);
          }
         }
         else if(! s2) return 0;
         if(! s2)
          throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
         var
          r2$0 = s2[4],
          d2$0 = s2[3],
          v2 = s2[2],
          l2$0 = s2[1],
          match$0 = split(v2, s1),
          r1$0 = match$0[3],
          d1$0 = match$0[2],
          l1$0 = match$0[1],
          _w_ = merge(f, r1$0, r2$0),
          _x_ = caml_call3(f, v2, d1$0, [0, d2$0]);
         return concat_or_join(merge(f, l1$0, l2$0), v2, _x_, _w_);
        }
        function union(f, s1, s2){
         if(s1){
          if(s2){
           var
            h2 = s2[5],
            r2 = s2[4],
            d2 = s2[3],
            v2 = s2[2],
            l2 = s2[1],
            h1 = s1[5],
            r1 = s1[4],
            d1 = s1[3],
            v1 = s1[2],
            l1 = s1[1];
           if(h2 <= h1){
            var
             match = split(v1, s2),
             r2$0 = match[3],
             d2$0 = match[2],
             l2$0 = match[1],
             l = union(f, l1, l2$0),
             r = union(f, r1, r2$0);
            if(! d2$0) return join(l, v1, d1, r);
            var d2$1 = d2$0[1];
            return concat_or_join(l, v1, caml_call3(f, v1, d1, d2$1), r);
           }
           var
            match$0 = split(v2, s1),
            r1$0 = match$0[3],
            d1$0 = match$0[2],
            l1$0 = match$0[1],
            l$0 = union(f, l1$0, l2),
            r$0 = union(f, r1$0, r2);
           if(! d1$0) return join(l$0, v2, d2, r$0);
           var d1$1 = d1$0[1];
           return concat_or_join(l$0, v2, caml_call3(f, v2, d1$1, d2), r$0);
          }
          var s = s1;
         }
         else
          var s = s2;
         return s;
        }
        function filter(p, m){
         if(! m) return 0;
         var
          r = m[4],
          d = m[3],
          v = m[2],
          l = m[1],
          l$0 = filter(p, l),
          pvd = caml_call2(p, v, d),
          r$0 = filter(p, r);
         if(! pvd) return concat(l$0, r$0);
         if(l === l$0 && r === r$0) return m;
         return join(l$0, v, d, r$0);
        }
        function filter_map(f, param){
         if(! param) return 0;
         var
          r = param[4],
          d = param[3],
          v = param[2],
          l = param[1],
          l$0 = filter_map(f, l),
          fvd = caml_call2(f, v, d),
          r$0 = filter_map(f, r);
         if(! fvd) return concat(l$0, r$0);
         var d$0 = fvd[1];
         return join(l$0, v, d$0, r$0);
        }
        function partition(p, param){
         if(! param) return _c_;
         var
          r = param[4],
          d = param[3],
          v = param[2],
          l = param[1],
          match = partition(p, l),
          lf = match[2],
          lt = match[1],
          pvd = caml_call2(p, v, d),
          match$0 = partition(p, r),
          rf = match$0[2],
          rt = match$0[1];
         if(pvd){
          var _s_ = concat(lf, rf);
          return [0, join(lt, v, d, rt), _s_];
         }
         var _t_ = join(lf, v, d, rf);
         return [0, concat(lt, rt), _t_];
        }
        function cons_enum(m, e){
         var m$0 = m, e$0 = e;
         for(;;){
          if(! m$0) return e$0;
          var
           r = m$0[4],
           d = m$0[3],
           v = m$0[2],
           l = m$0[1],
           e$1 = [0, v, d, r, e$0];
          m$0 = l;
          e$0 = e$1;
         }
        }
        function compare(cmp, m1, m2){
         var
          e2$2 = cons_enum(m2, 0),
          e1$2 = cons_enum(m1, 0),
          e1 = e1$2,
          e2 = e2$2;
         for(;;){
          if(! e1) return e2 ? -1 : 0;
          if(! e2) return 1;
          var
           e2$0 = e2[4],
           r2 = e2[3],
           d2 = e2[2],
           v2 = e2[1],
           e1$0 = e1[4],
           r1 = e1[3],
           d1 = e1[2],
           v1 = e1[1],
           c = caml_call2(Ord[1], v1, v2);
          if(0 !== c) return c;
          var c$0 = caml_call2(cmp, d1, d2);
          if(0 !== c$0) return c$0;
          var e2$1 = cons_enum(r2, e2$0), e1$1 = cons_enum(r1, e1$0);
          e1 = e1$1;
          e2 = e2$1;
         }
        }
        function equal(cmp, m1, m2){
         var
          e2$2 = cons_enum(m2, 0),
          e1$2 = cons_enum(m1, 0),
          e1 = e1$2,
          e2 = e2$2;
         for(;;){
          if(! e1) return e2 ? 0 : 1;
          if(! e2) return 0;
          var
           e2$0 = e2[4],
           r2 = e2[3],
           d2 = e2[2],
           v2 = e2[1],
           e1$0 = e1[4],
           r1 = e1[3],
           d1 = e1[2],
           v1 = e1[1],
           _p_ = 0 === caml_call2(Ord[1], v1, v2) ? 1 : 0;
          if(_p_){
           var _q_ = caml_call2(cmp, d1, d2);
           if(_q_){
            var e2$1 = cons_enum(r2, e2$0), e1$1 = cons_enum(r1, e1$0);
            e1 = e1$1;
            e2 = e2$1;
            continue;
           }
           var _r_ = _q_;
          }
          else
           var _r_ = _p_;
          return _r_;
         }
        }
        function cardinal(param){
         if(! param) return 0;
         var r = param[4], l = param[1], _o_ = cardinal(r);
         return (cardinal(l) + 1 | 0) + _o_ | 0;
        }
        function bindings_aux(accu, param){
         var accu$0 = accu, param$0 = param;
         for(;;){
          if(! param$0) return accu$0;
          var
           r = param$0[4],
           d = param$0[3],
           v = param$0[2],
           l = param$0[1],
           accu$1 = [0, [0, v, d], bindings_aux(accu$0, r)];
          accu$0 = accu$1;
          param$0 = l;
         }
        }
        function bindings(s){return bindings_aux(0, s);}
        function add_seq(i, m){
         return caml_call3
                 (Stdlib_Seq[5],
                  function(m, param){
                   var v = param[2], k = param[1];
                   return add(k, v, m);
                  },
                  m,
                  i);
        }
        function of_seq(i){return add_seq(i, empty);}
        function seq_of_enum(c, param){
         if(! c) return 0;
         var
          rest = c[4],
          t = c[3],
          v = c[2],
          k = c[1],
          _m_ = cons_enum(t, rest);
         return [0, [0, k, v], function(_n_){return seq_of_enum(_m_, _n_);}];
        }
        function to_seq(m){
         var _k_ = cons_enum(m, 0);
         return function(_l_){return seq_of_enum(_k_, _l_);};
        }
        function snoc_enum(s, e){
         var s$0 = s, e$0 = e;
         for(;;){
          if(! s$0) return e$0;
          var
           r = s$0[4],
           d = s$0[3],
           v = s$0[2],
           l = s$0[1],
           e$1 = [0, v, d, l, e$0];
          s$0 = r;
          e$0 = e$1;
         }
        }
        function rev_seq_of_enum(c, param){
         if(! c) return 0;
         var
          rest = c[4],
          t = c[3],
          v = c[2],
          k = c[1],
          _i_ = snoc_enum(t, rest);
         return [0,
                 [0, k, v],
                 function(_j_){return rev_seq_of_enum(_i_, _j_);}];
        }
        function to_rev_seq(c){
         var _g_ = snoc_enum(c, 0);
         return function(_h_){return rev_seq_of_enum(_g_, _h_);};
        }
        function to_seq_from(low, m){
         a:
         {
          b:
          {
           var m$0 = m, c = 0;
           for(;;){
            if(! m$0) break;
            var
             r = m$0[4],
             d = m$0[3],
             v = m$0[2],
             l = m$0[1],
             n = caml_call2(Ord[1], v, low);
            if(0 === n) break b;
            if(0 <= n){
             var c$0 = [0, v, d, r, c];
             m$0 = l;
             c = c$0;
            }
            else
             m$0 = r;
           }
           var _e_ = c;
           break a;
          }
          var _e_ = [0, v, d, r, c];
         }
         return function(_f_){return seq_of_enum(_e_, _f_);};
        }
        return [0,
                empty,
                is_empty,
                mem,
                add,
                update,
                singleton,
                remove,
                merge,
                union,
                compare,
                equal,
                iter,
                fold,
                for_all,
                exists,
                filter,
                filter_map,
                partition,
                cardinal,
                bindings,
                min_binding,
                min_binding_opt,
                max_binding,
                max_binding_opt,
                min_binding,
                min_binding_opt,
                split,
                find,
                find_opt,
                find_first,
                find_first_opt,
                find_last,
                find_last_opt,
                map,
                mapi,
                to_seq,
                to_rev_seq,
                to_seq_from,
                add_seq,
                of_seq];
       }];
   runtime.caml_register_global(11, Stdlib_Map, "Stdlib__Map");
   return;
  }
  (globalThis));

//# 10064 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_buffer_ml = "buffer.ml",
    caml_blit_string = runtime.caml_blit_string,
    caml_bswap16 = runtime.caml_bswap16,
    caml_bytes_unsafe_get = runtime.caml_bytes_unsafe_get,
    caml_bytes_unsafe_set = runtime.caml_bytes_unsafe_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_int32_bswap = runtime.caml_int32_bswap,
    caml_int64_bswap = runtime.caml_int64_bswap,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib = global_data.Stdlib,
    Stdlib_String = global_data.Stdlib__String,
    Assert_failure = global_data.Assert_failure,
    cst_Buffer_sub = "Buffer.sub",
    cst_Buffer_blit = "Buffer.blit",
    cst_Buffer_nth = "Buffer.nth",
    _a_ = [0, cst_buffer_ml, 94, 2],
    _b_ = [0, cst_buffer_ml, 93, 2],
    cst_Buffer_add_cannot_grow_buf = "Buffer.add: cannot grow buffer";
   function create(n){
    var
     n$0 = 1 <= n ? n : 1,
     n$1 = Stdlib_Sys[12] < n$0 ? Stdlib_Sys[12] : n$0,
     s = caml_create_bytes(n$1);
    return [0, s, 0, n$1, s];
   }
   function contents(b){return caml_call3(Stdlib_Bytes[8], b[1], 0, b[2]);}
   function to_bytes(b){return caml_call3(Stdlib_Bytes[7], b[1], 0, b[2]);}
   function sub(b, ofs, len){
    if(0 <= ofs && 0 <= len && (b[2] - len | 0) >= ofs)
     return caml_call3(Stdlib_Bytes[8], b[1], ofs, len);
    return caml_call1(Stdlib[1], cst_Buffer_sub);
   }
   function blit(src, srcoff, dst, dstoff, len){
    if
     (0 <= len
      &&
       0 <= srcoff
       &&
        (src[2] - len | 0) >= srcoff
        && 0 <= dstoff && (caml_ml_bytes_length(dst) - len | 0) >= dstoff)
     return runtime.caml_blit_bytes(src[1], srcoff, dst, dstoff, len);
    return caml_call1(Stdlib[1], cst_Buffer_blit);
   }
   function nth(b, ofs){
    if(0 <= ofs && b[2] > ofs) return caml_bytes_unsafe_get(b[1], ofs);
    return caml_call1(Stdlib[1], cst_Buffer_nth);
   }
   function length(b){return b[2];}
   function clear(b){b[2] = 0; return 0;}
   function reset(b){
    b[2] = 0;
    b[1] = b[4];
    b[3] = caml_ml_bytes_length(b[1]);
    return 0;
   }
   function resize(b, more){
    var old_pos = b[2], old_len = b[3], new_len = [0, old_len];
    for(;;){
     if(new_len[1] >= (old_pos + more | 0)) break;
     new_len[1] = 2 * new_len[1] | 0;
    }
    if(Stdlib_Sys[12] < new_len[1])
     if((old_pos + more | 0) <= Stdlib_Sys[12])
      new_len[1] = Stdlib_Sys[12];
     else
      caml_call1(Stdlib[2], cst_Buffer_add_cannot_grow_buf);
    var new_buffer = caml_create_bytes(new_len[1]);
    caml_call5(Stdlib_Bytes[11], b[1], 0, new_buffer, 0, b[2]);
    b[1] = new_buffer;
    b[3] = new_len[1];
    if((b[2] + more | 0) > b[3])
     throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
    if((old_pos + more | 0) <= b[3]) return;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
   }
   function add_char(b, c){
    var pos = b[2];
    if(b[3] <= pos) resize(b, 1);
    caml_bytes_unsafe_set(b[1], pos, c);
    b[2] = pos + 1 | 0;
    return 0;
   }
   var
    uchar_utf_8_byte_length_max = 4,
    uchar_utf_16_byte_length_max = 4,
    cst_Buffer_add_substring_add_s = "Buffer.add_substring/add_subbytes",
    _c_ = [0, cst_buffer_ml, 212, 2],
    cst_Buffer_add_channel = "Buffer.add_channel",
    _d_ = [0, cst_buffer_ml, 231, 9],
    cst_Buffer_truncate = "Buffer.truncate";
   function add_utf_8_uchar(b, u){
    for(;;){
     var pos = b[2];
     if(b[3] <= pos) resize(b, uchar_utf_8_byte_length_max);
     var n = caml_call3(Stdlib_Bytes[55], b[1], pos, u);
     if(0 !== n){b[2] = pos + n | 0; return 0;}
     resize(b, uchar_utf_8_byte_length_max);
    }
   }
   function add_utf_16be_uchar(b, u){
    for(;;){
     var pos = b[2];
     if(b[3] <= pos) resize(b, uchar_utf_16_byte_length_max);
     var n = caml_call3(Stdlib_Bytes[58], b[1], pos, u);
     if(0 !== n){b[2] = pos + n | 0; return 0;}
     resize(b, uchar_utf_16_byte_length_max);
    }
   }
   function add_utf_16le_uchar(b, u){
    for(;;){
     var pos = b[2];
     if(b[3] <= pos) resize(b, uchar_utf_16_byte_length_max);
     var n = caml_call3(Stdlib_Bytes[61], b[1], pos, u);
     if(0 !== n){b[2] = pos + n | 0; return 0;}
     resize(b, uchar_utf_16_byte_length_max);
    }
   }
   function add_substring(b, s, offset, len){
    var _t_ = offset < 0 ? 1 : 0;
    if(_t_)
     var _u_ = _t_;
    else
     var
      _v_ = len < 0 ? 1 : 0,
      _u_ = _v_ || ((caml_ml_string_length(s) - len | 0) < offset ? 1 : 0);
    if(_u_) caml_call1(Stdlib[1], cst_Buffer_add_substring_add_s);
    var new_position = b[2] + len | 0;
    if(b[3] < new_position) resize(b, len);
    caml_blit_string(s, offset, b[1], b[2], len);
    b[2] = new_position;
    return 0;
   }
   function add_subbytes(b, s, offset, len){
    return add_substring(b, caml_call1(Stdlib_Bytes[48], s), offset, len);
   }
   function add_string(b, s){
    var len = caml_ml_string_length(s), new_position = b[2] + len | 0;
    if(b[3] < new_position) resize(b, len);
    caml_blit_string(s, 0, b[1], b[2], len);
    b[2] = new_position;
    return 0;
   }
   function add_bytes(b, s){
    return add_string(b, caml_call1(Stdlib_Bytes[48], s));
   }
   function add_buffer(b, bs){return add_subbytes(b, bs[1], 0, bs[2]);}
   function add_channel(b, ic, to_read$1){
    var
     _r_ = to_read$1 < 0 ? 1 : 0,
     _s_ = _r_ || (Stdlib_Sys[12] < to_read$1 ? 1 : 0);
    if(_s_) caml_call1(Stdlib[1], cst_Buffer_add_channel);
    if(b[3] < (b[2] + to_read$1 | 0)) resize(b, to_read$1);
    var
     ofs$1 = b[2],
     buf = b[1],
     already_read = 0,
     ofs = ofs$1,
     to_read = to_read$1;
    for(;;){
     if(0 !== to_read){
      var r = caml_call4(Stdlib[84], ic, buf, ofs, to_read);
      if(0 !== r){
       var
        already_read$0 = already_read + r | 0,
        ofs$0 = ofs + r | 0,
        to_read$0 = to_read - r | 0;
       already_read = already_read$0;
       ofs = ofs$0;
       to_read = to_read$0;
       continue;
      }
     }
     if((b[2] + already_read | 0) > b[3])
      throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
     b[2] = b[2] + already_read | 0;
     if(already_read < to_read$1)
      throw caml_maybe_attach_backtrace(Stdlib[12], 1);
     return 0;
    }
   }
   function output_buffer(oc, b){
    return caml_call4(Stdlib[68], oc, b[1], 0, b[2]);
   }
   function add_substitute(b, f, s){
    var lim$1 = caml_ml_string_length(s), previous = 32, i$4 = 0;
    for(;;){
     if(i$4 >= lim$1){
      var _q_ = 92 === previous ? 1 : 0;
      return _q_ ? add_char(b, previous) : _q_;
     }
     var previous$0 = caml_string_get(s, i$4);
     if(36 === previous$0)
      if(92 === previous){
       add_char(b, previous$0);
       var i$5 = i$4 + 1 | 0;
       previous = 32;
       i$4 = i$5;
      }
      else{
       var start$0 = i$4 + 1 | 0;
       if(lim$1 <= start$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
       var opening = caml_string_get(s, start$0);
       a:
       {
        if(40 !== opening && 123 !== opening){
         var start = start$0 + 1 | 0, lim$0 = caml_ml_string_length(s);
         b:
         {
          c:
          {
           d:
           {
            var i$2 = start;
            for(;;){
             if(lim$0 <= i$2) break c;
             var match = caml_string_get(s, i$2);
             if(91 <= match){
              if(97 <= match){
               if(123 <= match) break d;
              }
              else if(95 !== match) break d;
             }
             else
              if(58 <= match){
               if(65 > match) break;
              }
              else if(48 > match) break d;
             var i$3 = i$2 + 1 | 0;
             i$2 = i$3;
            }
           }
           var stop$0 = i$2;
           break b;
          }
          var stop$0 = lim$0;
         }
         var
          match$0 =
            [0,
             caml_call3(Stdlib_String[15], s, start$0, stop$0 - start$0 | 0),
             stop$0];
         break a;
        }
        var new_start = start$0 + 1 | 0, k$2 = 0;
        if(40 === opening)
         var closing = 41;
        else{
         if(123 !== opening)
          throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
         var closing = 125;
        }
        var lim = caml_ml_string_length(s), k = k$2, stop = new_start;
        for(;;){
         if(lim <= stop) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
         if(caml_string_get(s, stop) === opening){
          var i = stop + 1 | 0, k$0 = k + 1 | 0;
          k = k$0;
          stop = i;
         }
         else if(caml_string_get(s, stop) === closing){
          if(0 === k) break;
          var i$0 = stop + 1 | 0, k$1 = k - 1 | 0;
          k = k$1;
          stop = i$0;
         }
         else{var i$1 = stop + 1 | 0; stop = i$1;}
        }
        var
         match$0 =
           [0,
            caml_call3
             (Stdlib_String[15], s, new_start, (stop - start$0 | 0) - 1 | 0),
            stop + 1 | 0];
       }
       var next_i = match$0[2], ident = match$0[1];
       add_string(b, caml_call1(f, ident));
       previous = 32;
       i$4 = next_i;
      }
     else if(92 === previous){
      add_char(b, 92);
      add_char(b, previous$0);
      var i$6 = i$4 + 1 | 0;
      previous = 32;
      i$4 = i$6;
     }
     else if(92 === previous$0){
      var i$7 = i$4 + 1 | 0;
      previous = previous$0;
      i$4 = i$7;
     }
     else{
      add_char(b, previous$0);
      var i$8 = i$4 + 1 | 0;
      previous = previous$0;
      i$4 = i$8;
     }
    }
   }
   function truncate(b, len){
    if(0 <= len && b[2] >= len){b[2] = len; return 0;}
    return caml_call1(Stdlib[1], cst_Buffer_truncate);
   }
   function to_seq(b){
    function aux(i, param){
     if(b[2] <= i) return 0;
     var x = caml_bytes_unsafe_get(b[1], i), _o_ = i + 1 | 0;
     return [0, x, function(_p_){return aux(_o_, _p_);}];
    }
    var _m_ = 0;
    return function(_n_){return aux(_m_, _n_);};
   }
   function to_seqi(b){
    function aux(i, param){
     if(b[2] <= i) return 0;
     var x = caml_bytes_unsafe_get(b[1], i), _k_ = i + 1 | 0;
     return [0, [0, i, x], function(_l_){return aux(_k_, _l_);}];
    }
    var _i_ = 0;
    return function(_j_){return aux(_i_, _j_);};
   }
   function add_seq(b, seq){
    return caml_call2
            (Stdlib_Seq[4], function(_h_){return add_char(b, _h_);}, seq);
   }
   function of_seq(i){var b = create(32); add_seq(b, i); return b;}
   function add_int8(b, x){
    var new_position = b[2] + 1 | 0;
    if(b[3] < new_position) resize(b, 1);
    caml_bytes_unsafe_set(b[1], b[2], x);
    b[2] = new_position;
    return 0;
   }
   function add_int16_ne(b, x){
    var new_position = b[2] + 2 | 0;
    if(b[3] < new_position) resize(b, 2);
    runtime.caml_bytes_set16(b[1], b[2], x);
    b[2] = new_position;
    return 0;
   }
   function add_int32_ne(b, x){
    var new_position = b[2] + 4 | 0;
    if(b[3] < new_position) resize(b, 4);
    runtime.caml_bytes_set32(b[1], b[2], x);
    b[2] = new_position;
    return 0;
   }
   function add_int64_ne(b, x){
    var new_position = b[2] + 8 | 0;
    if(b[3] < new_position) resize(b, 8);
    runtime.caml_bytes_set64(b[1], b[2], x);
    b[2] = new_position;
    return 0;
   }
   function add_int16_le(b, x){
    var _g_ = Stdlib_Sys[11] ? caml_bswap16(x) : x;
    return add_int16_ne(b, _g_);
   }
   function add_int16_be(b, x){
    var x$0 = Stdlib_Sys[11] ? x : caml_bswap16(x);
    return add_int16_ne(b, x$0);
   }
   function add_int32_le(b, x){
    var _f_ = Stdlib_Sys[11] ? caml_int32_bswap(x) : x;
    return add_int32_ne(b, _f_);
   }
   function add_int32_be(b, x){
    var x$0 = Stdlib_Sys[11] ? x : caml_int32_bswap(x);
    return add_int32_ne(b, x$0);
   }
   function add_int64_le(b, x){
    var _e_ = Stdlib_Sys[11] ? caml_int64_bswap(x) : x;
    return add_int64_ne(b, _e_);
   }
   function add_int64_be(b, x){
    var x$0 = Stdlib_Sys[11] ? x : caml_int64_bswap(x);
    return add_int64_ne(b, x$0);
   }
   var
    Stdlib_Buffer =
      [0,
       create,
       contents,
       to_bytes,
       sub,
       blit,
       nth,
       length,
       clear,
       reset,
       output_buffer,
       truncate,
       add_char,
       add_utf_8_uchar,
       add_utf_16le_uchar,
       add_utf_16be_uchar,
       add_string,
       add_bytes,
       add_substring,
       add_subbytes,
       add_substitute,
       add_buffer,
       add_channel,
       to_seq,
       to_seqi,
       add_seq,
       of_seq,
       add_int8,
       add_int8,
       add_int16_ne,
       add_int16_be,
       add_int16_le,
       add_int16_ne,
       add_int16_be,
       add_int16_le,
       add_int32_ne,
       add_int32_be,
       add_int32_le,
       add_int64_ne,
       add_int64_be,
       add_int64_le];
   runtime.caml_register_global(17, Stdlib_Buffer, "Stdlib__Buffer");
   return;
  }
  (globalThis));

//# 10531 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$43 = "",
    cst_and = " and ",
    cst_Li$3 = "%Li",
    cst_i$3 = "%i",
    cst_li$3 = "%li",
    cst_ni$3 = "%ni",
    cst_u$0 = "%u",
    cst$42 = "' '",
    cst$41 = "'#'",
    cst$39 = "'*'",
    cst$40 = "'+'",
    cst$44 = ", ",
    cst_0$3 = "0",
    cst_at_character_number = ": at character number ",
    cst$38 = "@[",
    cst$37 = "@{",
    cst_bad_input_format_type_mism =
      "bad input: format type mismatch between ",
    cst_bad_input_format_type_mism$0 =
      "bad input: format type mismatch between %S and %S",
    cst_camlinternalFormat_ml = "camlinternalFormat.ml",
    cst_invalid_format = "invalid format ",
    cst_precision$3 = "precision",
    caml_blit_string = runtime.caml_blit_string,
    caml_bytes_set = runtime.caml_bytes_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_format_float = runtime.caml_format_float,
    caml_format_int = runtime.caml_format_int,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_notequal = runtime.caml_notequal,
    caml_string_get = runtime.caml_string_get,
    caml_string_unsafe_get = runtime.caml_string_unsafe_get,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst$9 = "%{",
    cst$10 = "%}",
    cst$11 = "%(",
    cst$12 = "%)",
    cst$13 = "%?",
    cst$18 = cst$37,
    cst$19 = cst$38,
    cst$20 = cst$37,
    cst$21 = cst$38,
    cst$22 = cst$37,
    cst$23 = cst$38,
    cst$26 = cst$39,
    cst$24 = "'-'",
    cst$25 = cst$39,
    cst$27 = cst$40,
    cst$28 = cst$41,
    cst$29 = cst$42,
    cst$30 = cst$40,
    cst$31 = "'_'",
    sub_format = [0, 0, cst$43],
    formatting_lit = [0, "@;", 1, 0],
    cst$35 = cst$41,
    cst$32 = cst$40,
    cst$33 = cst$40,
    cst$34 = cst$42,
    cst$36 = cst$40,
    cst_unexpected_end_of_format = "unexpected end of format",
    cst$17 = ".",
    cst$14 = "%!",
    cst$15 = cst$37,
    cst$16 = cst$38,
    cst$8 = "%%",
    cst$0 = "@]",
    cst$1 = "@}",
    cst$2 = "@?",
    cst$3 = "@\n",
    cst$4 = "@.",
    cst$5 = "@@",
    cst$6 = "@%",
    cst$7 = "@",
    cst = ".*",
    Assert_failure = global_data.Assert_failure,
    CamlinternalFormatBasics = global_data.CamlinternalFormatBasics,
    Stdlib = global_data.Stdlib,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Char = global_data.Stdlib__Char,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_Int = global_data.Stdlib__Int,
    _a_ = [0, 0, 0],
    cst_c = "%c",
    cst_s = "%s",
    cst_i = cst_i$3,
    cst_li = cst_li$3,
    cst_ni = cst_ni$3,
    cst_Li = cst_Li$3,
    cst_f = "%f",
    cst_B = "%B",
    cst_a = "%a",
    cst_t = "%t",
    cst_r = "%r",
    cst_r$0 = "%_r",
    cst_0c = "0c",
    _b_ = [0, cst_camlinternalFormat_ml, 850, 23],
    _c_ = [0, cst_camlinternalFormat_ml, 837, 26],
    _d_ = [0, cst_camlinternalFormat_ml, 847, 28],
    _e_ = [0, cst_camlinternalFormat_ml, 815, 21],
    _f_ = [0, cst_camlinternalFormat_ml, 819, 21],
    _g_ = [0, cst_camlinternalFormat_ml, 823, 19],
    _h_ = [0, cst_camlinternalFormat_ml, 827, 22],
    _i_ = [0, cst_camlinternalFormat_ml, 832, 30],
    _j_ = [0, cst_camlinternalFormat_ml, 851, 23],
    _k_ = [0, cst_camlinternalFormat_ml, 836, 26],
    _l_ = [0, cst_camlinternalFormat_ml, 846, 28],
    _m_ = [0, cst_camlinternalFormat_ml, 814, 21],
    _n_ = [0, cst_camlinternalFormat_ml, 818, 21],
    _o_ = [0, cst_camlinternalFormat_ml, 822, 19],
    _p_ = [0, cst_camlinternalFormat_ml, 826, 22],
    _q_ = [0, cst_camlinternalFormat_ml, 831, 30];
   function create_char_set(param){return caml_call2(Stdlib_Bytes[1], 32, 0);}
   function add_in_char_set(char_set, c){
    var
     str_ind = c >>> 3 | 0,
     mask = 1 << (c & 7),
     _cU_ = runtime.caml_bytes_get(char_set, str_ind) | mask;
    return caml_bytes_set(char_set, str_ind, caml_call1(Stdlib[29], _cU_));
   }
   function freeze_char_set(char_set){
    return caml_call1(Stdlib_Bytes[6], char_set);
   }
   function rev_char_set(char_set){
    var char_set$0 = create_char_set(0), i = 0;
    for(;;){
     var _cS_ = caml_string_get(char_set, i) ^ 255;
     caml_bytes_set(char_set$0, i, caml_call1(Stdlib[29], _cS_));
     var _cT_ = i + 1 | 0;
     if(31 === i) return caml_call1(Stdlib_Bytes[48], char_set$0);
     i = _cT_;
    }
   }
   function is_in_char_set(char_set, c){
    var str_ind = c >>> 3 | 0, mask = 1 << (c & 7);
    return 0 !== (caml_string_get(char_set, str_ind) & mask) ? 1 : 0;
   }
   function pad_of_pad_opt(pad_opt){
    if(! pad_opt) return 0;
    var width = pad_opt[1];
    return [0, 1, width];
   }
   function param_format_of_ignored_format(ign, fmt){
    if(typeof ign === "number")
     switch(ign){
       case 0:
        return [0, [0, fmt]];
       case 1:
        return [0, [1, fmt]];
       case 2:
        return [0, [19, fmt]];
       default: return [0, [22, fmt]];
     }
    switch(ign[0]){
      case 0:
       var pad_opt = ign[1]; return [0, [2, pad_of_pad_opt(pad_opt), fmt]];
      case 1:
       var pad_opt$0 = ign[1];
       return [0, [3, pad_of_pad_opt(pad_opt$0), fmt]];
      case 2:
       var pad_opt$1 = ign[2], iconv = ign[1];
       return [0, [4, iconv, pad_of_pad_opt(pad_opt$1), 0, fmt]];
      case 3:
       var pad_opt$2 = ign[2], iconv$0 = ign[1];
       return [0, [5, iconv$0, pad_of_pad_opt(pad_opt$2), 0, fmt]];
      case 4:
       var pad_opt$3 = ign[2], iconv$1 = ign[1];
       return [0, [6, iconv$1, pad_of_pad_opt(pad_opt$3), 0, fmt]];
      case 5:
       var pad_opt$4 = ign[2], iconv$2 = ign[1];
       return [0, [7, iconv$2, pad_of_pad_opt(pad_opt$4), 0, fmt]];
      case 6:
       var prec_opt = ign[2], pad_opt$5 = ign[1];
       if(prec_opt)
        var ndec = prec_opt[1], _cR_ = [0, ndec];
       else
        var _cR_ = 0;
       return [0, [8, _a_, pad_of_pad_opt(pad_opt$5), _cR_, fmt]];
      case 7:
       var pad_opt$6 = ign[1];
       return [0, [9, pad_of_pad_opt(pad_opt$6), fmt]];
      case 8:
       var fmtty = ign[2], pad_opt$7 = ign[1];
       return [0, [13, pad_opt$7, fmtty, fmt]];
      case 9:
       var fmtty$0 = ign[2], pad_opt$8 = ign[1];
       return [0, [14, pad_opt$8, fmtty$0, fmt]];
      case 10:
       var char_set = ign[2], width_opt = ign[1];
       return [0, [20, width_opt, char_set, fmt]];
      default: var counter = ign[1]; return [0, [21, counter, fmt]];
    }
   }
   function default_float_precision(fconv){return 5 === fconv[2] ? 12 : -6;}
   function buffer_create(init_size){
    return [0, 0, caml_create_bytes(init_size)];
   }
   function buffer_check_size(buf, overhead){
    var
     len = runtime.caml_ml_bytes_length(buf[2]),
     min_len = buf[1] + overhead | 0;
    if(len < min_len){
     var
      new_len = caml_call2(Stdlib_Int[11], len * 2 | 0, min_len),
      new_str = caml_create_bytes(new_len);
     caml_call5(Stdlib_Bytes[11], buf[2], 0, new_str, 0, len);
     buf[2] = new_str;
    }
    return;
   }
   function buffer_add_char(buf, c){
    buffer_check_size(buf, 1);
    caml_bytes_set(buf[2], buf[1], c);
    buf[1] = buf[1] + 1 | 0;
    return;
   }
   function buffer_add_string(buf, s){
    var str_len = caml_ml_string_length(s);
    buffer_check_size(buf, str_len);
    caml_call5(Stdlib_String[48], s, 0, buf[2], buf[1], str_len);
    buf[1] = buf[1] + str_len | 0;
    return;
   }
   function buffer_contents(buf){
    return caml_call3(Stdlib_Bytes[8], buf[2], 0, buf[1]);
   }
   function char_of_iconv(iconv){
    switch(iconv){
      case 6:
      case 7:
       return 120;
      case 8:
      case 9:
       return 88;
      case 10:
      case 11:
       return 111;
      case 12:
      case 15:
       return 117;
      case 0:
      case 1:
      case 2:
      case 13:
       return 100;
      default: return 105;
    }
   }
   function char_of_fconv(opt, fconv){
    if(opt) var sth = opt[1], cF = sth; else var cF = 70;
    switch(fconv[2]){
      case 0:
       return 102;
      case 1:
       return 101;
      case 2:
       return 69;
      case 3:
       return 103;
      case 4:
       return 71;
      case 5:
       return cF;
      case 6:
       return 104;
      case 7:
       return 72;
      default: return 70;
    }
   }
   function bprint_padty(buf, padty){
    switch(padty){
      case 0:
       return buffer_add_char(buf, 45);
      case 1:
       return;
      default: return buffer_add_char(buf, 48);
    }
   }
   function bprint_ignored_flag(buf, ign_flag){
    return ign_flag ? buffer_add_char(buf, 95) : ign_flag;
   }
   function bprint_pad_opt(buf, pad_opt){
    if(! pad_opt) return;
    var width = pad_opt[1];
    return buffer_add_string(buf, caml_call1(Stdlib_Int[12], width));
   }
   function bprint_padding(buf, pad){
    if(typeof pad === "number") return;
    if(0 === pad[0]){
     var n = pad[2], padty = pad[1];
     bprint_padty(buf, padty);
     return buffer_add_string(buf, caml_call1(Stdlib_Int[12], n));
    }
    var padty$0 = pad[1];
    bprint_padty(buf, padty$0);
    return buffer_add_char(buf, 42);
   }
   function bprint_precision(buf, prec){
    if(typeof prec !== "number"){
     var n = prec[1];
     buffer_add_char(buf, 46);
     return buffer_add_string(buf, caml_call1(Stdlib_Int[12], n));
    }
    if(prec) return buffer_add_string(buf, cst);
    return;
   }
   function bprint_iconv_flag(buf, iconv){
    switch(iconv){
      case 1:
      case 4:
       return buffer_add_char(buf, 43);
      case 2:
      case 5:
       return buffer_add_char(buf, 32);
      case 7:
      case 9:
      case 11:
      case 13:
      case 14:
      case 15:
       return buffer_add_char(buf, 35);
      default: return;
    }
   }
   function bprint_altint_fmt(buf, ign_flag, iconv, pad, prec, c){
    buffer_add_char(buf, 37);
    bprint_ignored_flag(buf, ign_flag);
    bprint_iconv_flag(buf, iconv);
    bprint_padding(buf, pad);
    bprint_precision(buf, prec);
    buffer_add_char(buf, c);
    return buffer_add_char(buf, char_of_iconv(iconv));
   }
   function bprint_fconv_flag(buf, fconv){
    switch(fconv[1]){
      case 0: break;
      case 1:
       buffer_add_char(buf, 43); break;
      default: buffer_add_char(buf, 32);
    }
    if(8 <= fconv[2]) return buffer_add_char(buf, 35);
    return;
   }
   function string_of_formatting_lit(formatting_lit){
    if(typeof formatting_lit === "number")
     switch(formatting_lit){
       case 0:
        return cst$0;
       case 1:
        return cst$1;
       case 2:
        return cst$2;
       case 3:
        return cst$3;
       case 4:
        return cst$4;
       case 5:
        return cst$5;
       default: return cst$6;
     }
    switch(formatting_lit[0]){
      case 0:
       var str = formatting_lit[1]; return str;
      case 1:
       var str$0 = formatting_lit[1]; return str$0;
      default:
       var c = formatting_lit[1], _cQ_ = caml_call2(Stdlib_String[1], 1, c);
       return caml_call2(Stdlib[28], cst$7, _cQ_);
    }
   }
   function bprint_char_literal(buf, chr){
    return 37 === chr
            ? buffer_add_string(buf, cst$8)
            : buffer_add_char(buf, chr);
   }
   function bprint_string_literal(buf, str){
    var _cO_ = caml_ml_string_length(str) - 1 | 0, _cN_ = 0;
    if(_cO_ >= 0){
     var i = _cN_;
     for(;;){
      bprint_char_literal(buf, caml_string_get(str, i));
      var _cP_ = i + 1 | 0;
      if(_cO_ === i) break;
      i = _cP_;
     }
    }
    return;
   }
   function bprint_fmtty(buf, fmtty){
    var fmtty$0 = fmtty;
    for(;;){
     if(typeof fmtty$0 === "number") return;
     switch(fmtty$0[0]){
       case 0:
        var fmtty$1 = fmtty$0[1];
        buffer_add_string(buf, cst_c);
        fmtty$0 = fmtty$1;
        break;
       case 1:
        var fmtty$2 = fmtty$0[1];
        buffer_add_string(buf, cst_s);
        fmtty$0 = fmtty$2;
        break;
       case 2:
        var fmtty$3 = fmtty$0[1];
        buffer_add_string(buf, cst_i);
        fmtty$0 = fmtty$3;
        break;
       case 3:
        var fmtty$4 = fmtty$0[1];
        buffer_add_string(buf, cst_li);
        fmtty$0 = fmtty$4;
        break;
       case 4:
        var fmtty$5 = fmtty$0[1];
        buffer_add_string(buf, cst_ni);
        fmtty$0 = fmtty$5;
        break;
       case 5:
        var fmtty$6 = fmtty$0[1];
        buffer_add_string(buf, cst_Li);
        fmtty$0 = fmtty$6;
        break;
       case 6:
        var fmtty$7 = fmtty$0[1];
        buffer_add_string(buf, cst_f);
        fmtty$0 = fmtty$7;
        break;
       case 7:
        var fmtty$8 = fmtty$0[1];
        buffer_add_string(buf, cst_B);
        fmtty$0 = fmtty$8;
        break;
       case 8:
        var fmtty$9 = fmtty$0[2], sub_fmtty = fmtty$0[1];
        buffer_add_string(buf, cst$9);
        bprint_fmtty(buf, sub_fmtty);
        buffer_add_string(buf, cst$10);
        fmtty$0 = fmtty$9;
        break;
       case 9:
        var fmtty$10 = fmtty$0[3], sub_fmtty$0 = fmtty$0[1];
        buffer_add_string(buf, cst$11);
        bprint_fmtty(buf, sub_fmtty$0);
        buffer_add_string(buf, cst$12);
        fmtty$0 = fmtty$10;
        break;
       case 10:
        var fmtty$11 = fmtty$0[1];
        buffer_add_string(buf, cst_a);
        fmtty$0 = fmtty$11;
        break;
       case 11:
        var fmtty$12 = fmtty$0[1];
        buffer_add_string(buf, cst_t);
        fmtty$0 = fmtty$12;
        break;
       case 12:
        var fmtty$13 = fmtty$0[1];
        buffer_add_string(buf, cst$13);
        fmtty$0 = fmtty$13;
        break;
       case 13:
        var fmtty$14 = fmtty$0[1];
        buffer_add_string(buf, cst_r);
        fmtty$0 = fmtty$14;
        break;
       default:
        var fmtty$15 = fmtty$0[1];
        buffer_add_string(buf, cst_r$0);
        fmtty$0 = fmtty$15;
     }
    }
   }
   function int_of_custom_arity(param){
    if(! param) return 0;
    var x = param[1];
    return 1 + int_of_custom_arity(x) | 0;
   }
   function string_of_fmt(fmt){
    var buf = buffer_create(16);
    function fmtiter(fmt, ign_flag){
     var fmt$0 = fmt, ign_flag$0 = ign_flag;
     for(;;){
      if(typeof fmt$0 === "number") return;
      switch(fmt$0[0]){
        case 0:
         var rest = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         buffer_add_char(buf, 99);
         fmt$0 = rest;
         ign_flag$0 = 0;
         break;
        case 1:
         var rest$0 = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         buffer_add_char(buf, 67);
         fmt$0 = rest$0;
         ign_flag$0 = 0;
         break;
        case 2:
         var rest$1 = fmt$0[2], pad = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         bprint_padding(buf, pad);
         buffer_add_char(buf, 115);
         fmt$0 = rest$1;
         ign_flag$0 = 0;
         break;
        case 3:
         var rest$2 = fmt$0[2], pad$0 = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         bprint_padding(buf, pad$0);
         buffer_add_char(buf, 83);
         fmt$0 = rest$2;
         ign_flag$0 = 0;
         break;
        case 4:
         var
          rest$3 = fmt$0[4],
          prec = fmt$0[3],
          pad$1 = fmt$0[2],
          iconv = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         bprint_iconv_flag(buf, iconv);
         bprint_padding(buf, pad$1);
         bprint_precision(buf, prec);
         buffer_add_char(buf, char_of_iconv(iconv));
         fmt$0 = rest$3;
         ign_flag$0 = 0;
         break;
        case 5:
         var
          rest$4 = fmt$0[4],
          prec$0 = fmt$0[3],
          pad$2 = fmt$0[2],
          iconv$0 = fmt$0[1];
         bprint_altint_fmt(buf, ign_flag$0, iconv$0, pad$2, prec$0, 108);
         fmt$0 = rest$4;
         ign_flag$0 = 0;
         break;
        case 6:
         var
          rest$5 = fmt$0[4],
          prec$1 = fmt$0[3],
          pad$3 = fmt$0[2],
          iconv$1 = fmt$0[1];
         bprint_altint_fmt(buf, ign_flag$0, iconv$1, pad$3, prec$1, 110);
         fmt$0 = rest$5;
         ign_flag$0 = 0;
         break;
        case 7:
         var
          rest$6 = fmt$0[4],
          prec$2 = fmt$0[3],
          pad$4 = fmt$0[2],
          iconv$2 = fmt$0[1];
         bprint_altint_fmt(buf, ign_flag$0, iconv$2, pad$4, prec$2, 76);
         fmt$0 = rest$6;
         ign_flag$0 = 0;
         break;
        case 8:
         var
          rest$7 = fmt$0[4],
          prec$3 = fmt$0[3],
          pad$5 = fmt$0[2],
          fconv = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         bprint_fconv_flag(buf, fconv);
         bprint_padding(buf, pad$5);
         bprint_precision(buf, prec$3);
         buffer_add_char(buf, char_of_fconv(0, fconv));
         fmt$0 = rest$7;
         ign_flag$0 = 0;
         break;
        case 9:
         var rest$8 = fmt$0[2], pad$6 = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         bprint_padding(buf, pad$6);
         buffer_add_char(buf, 66);
         fmt$0 = rest$8;
         ign_flag$0 = 0;
         break;
        case 10:
         var rest$9 = fmt$0[1];
         buffer_add_string(buf, cst$14);
         fmt$0 = rest$9;
         break;
        case 11:
         var rest$10 = fmt$0[2], str = fmt$0[1];
         bprint_string_literal(buf, str);
         fmt$0 = rest$10;
         break;
        case 12:
         var rest$11 = fmt$0[2], chr = fmt$0[1];
         bprint_char_literal(buf, chr);
         fmt$0 = rest$11;
         break;
        case 13:
         var rest$12 = fmt$0[3], fmtty = fmt$0[2], pad_opt = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         bprint_pad_opt(buf, pad_opt);
         buffer_add_char(buf, 123);
         bprint_fmtty(buf, fmtty);
         buffer_add_char(buf, 37);
         buffer_add_char(buf, 125);
         fmt$0 = rest$12;
         ign_flag$0 = 0;
         break;
        case 14:
         var rest$13 = fmt$0[3], fmtty$0 = fmt$0[2], pad_opt$0 = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         bprint_pad_opt(buf, pad_opt$0);
         buffer_add_char(buf, 40);
         bprint_fmtty(buf, fmtty$0);
         buffer_add_char(buf, 37);
         buffer_add_char(buf, 41);
         fmt$0 = rest$13;
         ign_flag$0 = 0;
         break;
        case 15:
         var rest$14 = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         buffer_add_char(buf, 97);
         fmt$0 = rest$14;
         ign_flag$0 = 0;
         break;
        case 16:
         var rest$15 = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         buffer_add_char(buf, 116);
         fmt$0 = rest$15;
         ign_flag$0 = 0;
         break;
        case 17:
         var rest$16 = fmt$0[2], fmting_lit = fmt$0[1];
         bprint_string_literal(buf, string_of_formatting_lit(fmting_lit));
         fmt$0 = rest$16;
         break;
        case 18:
         var rest$17 = fmt$0[2], fmting_gen = fmt$0[1];
         if(0 === fmting_gen[0]){
          var str$0 = fmting_gen[1][2];
          buffer_add_string(buf, cst$15);
          buffer_add_string(buf, str$0);
         }
         else{
          var str$1 = fmting_gen[1][2];
          buffer_add_string(buf, cst$16);
          buffer_add_string(buf, str$1);
         }
         fmt$0 = rest$17;
         break;
        case 19:
         var rest$18 = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         buffer_add_char(buf, 114);
         fmt$0 = rest$18;
         ign_flag$0 = 0;
         break;
        case 20:
         var rest$19 = fmt$0[3], char_set = fmt$0[2], width_opt = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         bprint_pad_opt(buf, width_opt);
         var
          print_char =
            function(buf, i){
             var c = caml_call1(Stdlib[29], i);
             return 37 === c
                     ? (buffer_add_char(buf, 37), buffer_add_char(buf, 37))
                     : 64
                       === c
                       ? (buffer_add_char(buf, 37), buffer_add_char(buf, 64))
                       : buffer_add_char(buf, c);
            };
         buffer_add_char(buf, 91);
         var
          set =
            is_in_char_set(char_set, 0)
             ? (buffer_add_char(buf, 94), rev_char_set(char_set))
             : char_set;
         let set$0 = set;
         var
          is_alone =
            function(c){
             var
              after = caml_call1(Stdlib_Char[1], c + 1 | 0),
              before = caml_call1(Stdlib_Char[1], c - 1 | 0),
              _cJ_ = is_in_char_set(set$0, c);
             if(_cJ_)
              var
               _cK_ = is_in_char_set(set$0, before),
               _cL_ = _cK_ ? is_in_char_set(set$0, after) : _cK_,
               _cM_ = 1 - _cL_;
             else
              var _cM_ = _cJ_;
             return _cM_;
            };
         if(is_alone(93)) buffer_add_char(buf, 93);
         a:
         b:
         {
          c:
          {
           d:
           {
            var i = 1;
            for(;;){
             if(i >= 256) break;
             if(is_in_char_set(set, caml_call1(Stdlib[29], i))){
              var switcher = caml_call1(Stdlib[29], i) - 45 | 0;
              if(48 < switcher >>> 0){
               if(210 <= switcher) break d;
              }
              else if(46 < switcher - 1 >>> 0){
               var i$2 = i + 1 | 0;
               i = i$2;
               continue;
              }
              var i$1 = i + 1 | 0;
              if(is_in_char_set(set, caml_call1(Stdlib[29], i$1))){
               var switcher$0 = caml_call1(Stdlib[29], i$1) - 45 | 0;
               if(48 < switcher$0 >>> 0){
                if(210 <= switcher$0) break c;
               }
               else if
                (46 < switcher$0 - 1 >>> 0
                 && ! is_in_char_set(set, caml_call1(Stdlib[29], i$1 + 1 | 0))){
                print_char(buf, i$1 - 1 | 0);
                var i$5 = i$1 + 1 | 0;
                i = i$5;
                continue;
               }
               if(is_in_char_set(set, caml_call1(Stdlib[29], i$1 + 1 | 0))){
                var j = i$1 + 2 | 0, i$3 = i$1 - 1 | 0, j$0 = j;
                for(;;){
                 if(256 === j$0) break;
                 if(! is_in_char_set(set, caml_call1(Stdlib[29], j$0))) break;
                 var j$1 = j$0 + 1 | 0;
                 j$0 = j$1;
                }
                print_char(buf, i$3);
                print_char(buf, 45);
                print_char(buf, j$0 - 1 | 0);
                if(j$0 >= 256) break b;
                var i$7 = j$0 + 1 | 0;
                i = i$7;
               }
               else{
                print_char(buf, i$1 - 1 | 0);
                print_char(buf, i$1);
                var i$4 = i$1 + 2 | 0;
                i = i$4;
               }
              }
              else{
               print_char(buf, i$1 - 1 | 0);
               var i$6 = i$1 + 1 | 0;
               i = i$6;
              }
             }
             else{var i$0 = i + 1 | 0; i = i$0;}
            }
            break a;
           }
           print_char(buf, 255);
           break a;
          }
          print_char(buf, 254);
          print_char(buf, 255);
          break a;
         }
         if(is_alone(45)) buffer_add_char(buf, 45);
         buffer_add_char(buf, 93);
         fmt$0 = rest$19;
         ign_flag$0 = 0;
         break;
        case 21:
         var rest$20 = fmt$0[2], counter = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         switch(counter){
           case 0:
            var _cF_ = 108; break;
           case 1:
            var _cF_ = 110; break;
           default: var _cF_ = 78;
         }
         buffer_add_char(buf, _cF_);
         fmt$0 = rest$20;
         ign_flag$0 = 0;
         break;
        case 22:
         var rest$21 = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         bprint_string_literal(buf, cst_0c);
         fmt$0 = rest$21;
         ign_flag$0 = 0;
         break;
        case 23:
         var
          rest$22 = fmt$0[2],
          ign = fmt$0[1],
          fmt$1 = param_format_of_ignored_format(ign, rest$22)[1];
         fmt$0 = fmt$1;
         ign_flag$0 = 1;
         break;
        default:
         var
          rest$23 = fmt$0[3],
          arity = fmt$0[1],
          _cH_ = int_of_custom_arity(arity),
          _cG_ = 1;
         if(_cH_ >= 1){
          var i$8 = _cG_;
          for(;;){
           buffer_add_char(buf, 37);
           bprint_ignored_flag(buf, ign_flag$0);
           buffer_add_char(buf, 63);
           var _cI_ = i$8 + 1 | 0;
           if(_cH_ === i$8) break;
           i$8 = _cI_;
          }
         }
         fmt$0 = rest$23;
         ign_flag$0 = 0;
      }
     }
    }
    fmtiter(fmt, 0);
    return buffer_contents(buf);
   }
   function symm(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var rest = param[1]; return [0, symm(rest)];
      case 1:
       var rest$0 = param[1]; return [1, symm(rest$0)];
      case 2:
       var rest$1 = param[1]; return [2, symm(rest$1)];
      case 3:
       var rest$2 = param[1]; return [3, symm(rest$2)];
      case 4:
       var rest$3 = param[1]; return [4, symm(rest$3)];
      case 5:
       var rest$4 = param[1]; return [5, symm(rest$4)];
      case 6:
       var rest$5 = param[1]; return [6, symm(rest$5)];
      case 7:
       var rest$6 = param[1]; return [7, symm(rest$6)];
      case 8:
       var rest$7 = param[2], ty = param[1]; return [8, ty, symm(rest$7)];
      case 9:
       var rest$8 = param[3], ty2 = param[2], ty1 = param[1];
       return [9, ty2, ty1, symm(rest$8)];
      case 10:
       var rest$9 = param[1]; return [10, symm(rest$9)];
      case 11:
       var rest$10 = param[1]; return [11, symm(rest$10)];
      case 12:
       var rest$11 = param[1]; return [12, symm(rest$11)];
      case 13:
       var rest$12 = param[1]; return [13, symm(rest$12)];
      default: var rest$13 = param[1]; return [14, symm(rest$13)];
    }
   }
   function fmtty_rel_det(param){
    if(typeof param === "number")
     return [0,
             function(param){return;},
             function(param){return;},
             function(param){return;},
             function(param){return;}];
    switch(param[0]){
      case 0:
       var
        rest = param[1],
        match = fmtty_rel_det(rest),
        de = match[4],
        ed = match[3],
        af = match[2],
        fa = match[1];
       return [0,
               function(param){fa(0); return;},
               function(param){af(0); return;},
               ed,
               de];
      case 1:
       var
        rest$0 = param[1],
        match$0 = fmtty_rel_det(rest$0),
        de$0 = match$0[4],
        ed$0 = match$0[3],
        af$0 = match$0[2],
        fa$0 = match$0[1];
       return [0,
               function(param){fa$0(0); return;},
               function(param){af$0(0); return;},
               ed$0,
               de$0];
      case 2:
       var
        rest$1 = param[1],
        match$1 = fmtty_rel_det(rest$1),
        de$1 = match$1[4],
        ed$1 = match$1[3],
        af$1 = match$1[2],
        fa$1 = match$1[1];
       return [0,
               function(param){fa$1(0); return;},
               function(param){af$1(0); return;},
               ed$1,
               de$1];
      case 3:
       var
        rest$2 = param[1],
        match$2 = fmtty_rel_det(rest$2),
        de$2 = match$2[4],
        ed$2 = match$2[3],
        af$2 = match$2[2],
        fa$2 = match$2[1];
       return [0,
               function(param){fa$2(0); return;},
               function(param){af$2(0); return;},
               ed$2,
               de$2];
      case 4:
       var
        rest$3 = param[1],
        match$3 = fmtty_rel_det(rest$3),
        de$3 = match$3[4],
        ed$3 = match$3[3],
        af$3 = match$3[2],
        fa$3 = match$3[1];
       return [0,
               function(param){fa$3(0); return;},
               function(param){af$3(0); return;},
               ed$3,
               de$3];
      case 5:
       var
        rest$4 = param[1],
        match$4 = fmtty_rel_det(rest$4),
        de$4 = match$4[4],
        ed$4 = match$4[3],
        af$4 = match$4[2],
        fa$4 = match$4[1];
       return [0,
               function(param){fa$4(0); return;},
               function(param){af$4(0); return;},
               ed$4,
               de$4];
      case 6:
       var
        rest$5 = param[1],
        match$5 = fmtty_rel_det(rest$5),
        de$5 = match$5[4],
        ed$5 = match$5[3],
        af$5 = match$5[2],
        fa$5 = match$5[1];
       return [0,
               function(param){fa$5(0); return;},
               function(param){af$5(0); return;},
               ed$5,
               de$5];
      case 7:
       var
        rest$6 = param[1],
        match$6 = fmtty_rel_det(rest$6),
        de$6 = match$6[4],
        ed$6 = match$6[3],
        af$6 = match$6[2],
        fa$6 = match$6[1];
       return [0,
               function(param){fa$6(0); return;},
               function(param){af$6(0); return;},
               ed$6,
               de$6];
      case 8:
       var
        rest$7 = param[2],
        match$7 = fmtty_rel_det(rest$7),
        de$7 = match$7[4],
        ed$7 = match$7[3],
        af$7 = match$7[2],
        fa$7 = match$7[1];
       return [0,
               function(param){fa$7(0); return;},
               function(param){af$7(0); return;},
               ed$7,
               de$7];
      case 9:
       var
        rest$8 = param[3],
        ty2 = param[2],
        ty1 = param[1],
        match$8 = fmtty_rel_det(rest$8),
        de$8 = match$8[4],
        ed$8 = match$8[3],
        af$8 = match$8[2],
        fa$8 = match$8[1],
        ty = trans(symm(ty1), ty2),
        match$9 = fmtty_rel_det(ty),
        jd = match$9[4],
        dj = match$9[3],
        ga = match$9[2],
        ag = match$9[1];
       return [0,
               function(param){fa$8(0); ag(0); return;},
               function(param){ga(0); af$8(0); return;},
               function(param){ed$8(0); dj(0); return;},
               function(param){jd(0); de$8(0); return;}];
      case 10:
       var
        rest$9 = param[1],
        match$10 = fmtty_rel_det(rest$9),
        de$9 = match$10[4],
        ed$9 = match$10[3],
        af$9 = match$10[2],
        fa$9 = match$10[1];
       return [0,
               function(param){fa$9(0); return;},
               function(param){af$9(0); return;},
               ed$9,
               de$9];
      case 11:
       var
        rest$10 = param[1],
        match$11 = fmtty_rel_det(rest$10),
        de$10 = match$11[4],
        ed$10 = match$11[3],
        af$10 = match$11[2],
        fa$10 = match$11[1];
       return [0,
               function(param){fa$10(0); return;},
               function(param){af$10(0); return;},
               ed$10,
               de$10];
      case 12:
       var
        rest$11 = param[1],
        match$12 = fmtty_rel_det(rest$11),
        de$11 = match$12[4],
        ed$11 = match$12[3],
        af$11 = match$12[2],
        fa$11 = match$12[1];
       return [0,
               function(param){fa$11(0); return;},
               function(param){af$11(0); return;},
               ed$11,
               de$11];
      case 13:
       var
        rest$12 = param[1],
        match$13 = fmtty_rel_det(rest$12),
        de$12 = match$13[4],
        ed$12 = match$13[3],
        af$12 = match$13[2],
        fa$12 = match$13[1];
       return [0,
               function(param){fa$12(0); return;},
               function(param){af$12(0); return;},
               function(param){ed$12(0); return;},
               function(param){de$12(0); return;}];
      default:
       var
        rest$13 = param[1],
        match$14 = fmtty_rel_det(rest$13),
        de$13 = match$14[4],
        ed$13 = match$14[3],
        af$13 = match$14[2],
        fa$13 = match$14[1];
       return [0,
               function(param){fa$13(0); return;},
               function(param){af$13(0); return;},
               function(param){ed$13(0); return;},
               function(param){de$13(0); return;}];
    }
   }
   function trans(ty1, ty2){
    a:
    {
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           if(typeof ty1 !== "number"){
            switch(ty1[0]){
              case 0:
               var rest1 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 0:
                   var rest2 = ty2[1]; return [0, trans(rest1, rest2)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 1:
               var rest1$0 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 1:
                   var rest2$0 = ty2[1]; return [1, trans(rest1$0, rest2$0)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 2:
               var rest1$1 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 2:
                   var rest2$1 = ty2[1]; return [2, trans(rest1$1, rest2$1)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 3:
               var rest1$2 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 3:
                   var rest2$2 = ty2[1]; return [3, trans(rest1$2, rest2$2)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 4:
               var rest1$3 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 4:
                   var rest2$3 = ty2[1]; return [4, trans(rest1$3, rest2$3)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 5:
               var rest1$4 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 5:
                   var rest2$4 = ty2[1]; return [5, trans(rest1$4, rest2$4)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 6:
               var rest1$5 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 6:
                   var rest2$5 = ty2[1]; return [6, trans(rest1$5, rest2$5)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 7:
               var rest1$6 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 7:
                   var rest2$6 = ty2[1]; return [7, trans(rest1$6, rest2$6)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 8:
               var rest1$7 = ty1[2], ty1$0 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 8:
                   var
                    rest2$7 = ty2[2],
                    ty2$0 = ty2[1],
                    _cE_ = trans(rest1$7, rest2$7);
                   return [8, trans(ty1$0, ty2$0), _cE_];
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _k_], 1);
              case 9:
               var rest1$8 = ty1[3], ty12 = ty1[2], ty11 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 8:
                   break f;
                  case 9:
                   var
                    rest2$8 = ty2[3],
                    ty22 = ty2[2],
                    ty21 = ty2[1],
                    ty = trans(symm(ty12), ty21),
                    match = fmtty_rel_det(ty),
                    f4 = match[4],
                    f2 = match[2];
                   f2(0);
                   f4(0);
                   return [9, ty11, ty22, trans(rest1$8, rest2$8)];
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _l_], 1);
              case 10:
               var rest1$9 = ty1[1];
               if(typeof ty2 !== "number" && 10 === ty2[0]){
                var rest2$9 = ty2[1];
                return [10, trans(rest1$9, rest2$9)];
               }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _m_], 1);
              case 11:
               var rest1$10 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 10:
                   break a;
                  case 11:
                   var rest2$10 = ty2[1];
                   return [11, trans(rest1$10, rest2$10)];
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _n_], 1);
              case 12:
               var rest1$11 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   var rest2$11 = ty2[1];
                   return [12, trans(rest1$11, rest2$11)];
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _o_], 1);
              case 13:
               var rest1$12 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   var rest2$12 = ty2[1];
                   return [13, trans(rest1$12, rest2$12)];
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _p_], 1);
              default:
               var rest1$13 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   var rest2$13 = ty2[1];
                   return [14, trans(rest1$13, rest2$13)];
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _q_], 1);
            }
            throw caml_maybe_attach_backtrace([0, Assert_failure, _j_], 1);
           }
           if(typeof ty2 === "number") return 0;
           switch(ty2[0]){
             case 10:
              break a;
             case 11:
              break b;
             case 12:
              break c;
             case 13:
              break d;
             case 14:
              break e;
             case 8:
              break f;
             case 9: break;
             default:
              throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
           }
          }
          throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
         }
         throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
        }
        throw caml_maybe_attach_backtrace([0, Assert_failure, _i_], 1);
       }
       throw caml_maybe_attach_backtrace([0, Assert_failure, _h_], 1);
      }
      throw caml_maybe_attach_backtrace([0, Assert_failure, _g_], 1);
     }
     throw caml_maybe_attach_backtrace([0, Assert_failure, _f_], 1);
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
   }
   function fmtty_of_fmt(fmtty){
    var fmtty$0 = fmtty;
    for(;;){
     if(typeof fmtty$0 === "number") return 0;
     switch(fmtty$0[0]){
       case 0:
        var rest = fmtty$0[1]; return [0, fmtty_of_fmt(rest)];
       case 1:
        var rest$0 = fmtty$0[1]; return [0, fmtty_of_fmt(rest$0)];
       case 2:
        var rest$1 = fmtty$0[2], pad = fmtty$0[1];
        return fmtty_of_padding_fmtty(pad, [1, fmtty_of_fmt(rest$1)]);
       case 3:
        var rest$2 = fmtty$0[2], pad$0 = fmtty$0[1];
        return fmtty_of_padding_fmtty(pad$0, [1, fmtty_of_fmt(rest$2)]);
       case 4:
        var
         rest$3 = fmtty$0[4],
         prec = fmtty$0[3],
         pad$1 = fmtty$0[2],
         ty_rest = fmtty_of_fmt(rest$3),
         prec_ty = fmtty_of_precision_fmtty(prec, [2, ty_rest]);
        return fmtty_of_padding_fmtty(pad$1, prec_ty);
       case 5:
        var
         rest$4 = fmtty$0[4],
         prec$0 = fmtty$0[3],
         pad$2 = fmtty$0[2],
         ty_rest$0 = fmtty_of_fmt(rest$4),
         prec_ty$0 = fmtty_of_precision_fmtty(prec$0, [3, ty_rest$0]);
        return fmtty_of_padding_fmtty(pad$2, prec_ty$0);
       case 6:
        var
         rest$5 = fmtty$0[4],
         prec$1 = fmtty$0[3],
         pad$3 = fmtty$0[2],
         ty_rest$1 = fmtty_of_fmt(rest$5),
         prec_ty$1 = fmtty_of_precision_fmtty(prec$1, [4, ty_rest$1]);
        return fmtty_of_padding_fmtty(pad$3, prec_ty$1);
       case 7:
        var
         rest$6 = fmtty$0[4],
         prec$2 = fmtty$0[3],
         pad$4 = fmtty$0[2],
         ty_rest$2 = fmtty_of_fmt(rest$6),
         prec_ty$2 = fmtty_of_precision_fmtty(prec$2, [5, ty_rest$2]);
        return fmtty_of_padding_fmtty(pad$4, prec_ty$2);
       case 8:
        var
         rest$7 = fmtty$0[4],
         prec$3 = fmtty$0[3],
         pad$5 = fmtty$0[2],
         ty_rest$3 = fmtty_of_fmt(rest$7),
         prec_ty$3 = fmtty_of_precision_fmtty(prec$3, [6, ty_rest$3]);
        return fmtty_of_padding_fmtty(pad$5, prec_ty$3);
       case 9:
        var rest$8 = fmtty$0[2], pad$6 = fmtty$0[1];
        return fmtty_of_padding_fmtty(pad$6, [7, fmtty_of_fmt(rest$8)]);
       case 10:
        var fmtty$1 = fmtty$0[1]; fmtty$0 = fmtty$1; break;
       case 11:
        var fmtty$2 = fmtty$0[2]; fmtty$0 = fmtty$2; break;
       case 12:
        var fmtty$3 = fmtty$0[2]; fmtty$0 = fmtty$3; break;
       case 13:
        var rest$9 = fmtty$0[3], ty = fmtty$0[2];
        return [8, ty, fmtty_of_fmt(rest$9)];
       case 14:
        var rest$10 = fmtty$0[3], ty$0 = fmtty$0[2];
        return [9, ty$0, ty$0, fmtty_of_fmt(rest$10)];
       case 15:
        var rest$11 = fmtty$0[1]; return [10, fmtty_of_fmt(rest$11)];
       case 16:
        var rest$12 = fmtty$0[1]; return [11, fmtty_of_fmt(rest$12)];
       case 17:
        var fmtty$4 = fmtty$0[2]; fmtty$0 = fmtty$4; break;
       case 18:
        var
         rest$13 = fmtty$0[2],
         formatting_gen = fmtty$0[1],
         _cB_ = fmtty_of_fmt(rest$13);
        if(0 === formatting_gen[0])
         var fmt = formatting_gen[1][1], _cC_ = fmtty_of_fmt(fmt);
        else
         var fmt$0 = formatting_gen[1][1], _cC_ = fmtty_of_fmt(fmt$0);
        return caml_call2(CamlinternalFormatBasics[1], _cC_, _cB_);
       case 19:
        var rest$14 = fmtty$0[1]; return [13, fmtty_of_fmt(rest$14)];
       case 20:
        var rest$15 = fmtty$0[3]; return [1, fmtty_of_fmt(rest$15)];
       case 21:
        var rest$16 = fmtty$0[2]; return [2, fmtty_of_fmt(rest$16)];
       case 22:
        var rest$17 = fmtty$0[1]; return [0, fmtty_of_fmt(rest$17)];
       case 23:
        var fmtty$5 = fmtty$0[2], ign = fmtty$0[1];
        if(typeof ign === "number")
         switch(ign){
           case 0:
            fmtty$0 = fmtty$5; break;
           case 1:
            fmtty$0 = fmtty$5; break;
           case 2:
            return [14, fmtty_of_fmt(fmtty$5)];
           default: fmtty$0 = fmtty$5;
         }
        else
         switch(ign[0]){
           case 0:
            fmtty$0 = fmtty$5; break;
           case 1:
            fmtty$0 = fmtty$5; break;
           case 2:
            fmtty$0 = fmtty$5; break;
           case 3:
            fmtty$0 = fmtty$5; break;
           case 4:
            fmtty$0 = fmtty$5; break;
           case 5:
            fmtty$0 = fmtty$5; break;
           case 6:
            fmtty$0 = fmtty$5; break;
           case 7:
            fmtty$0 = fmtty$5; break;
           case 8:
            fmtty$0 = fmtty$5; break;
           case 9:
            var fmtty$6 = ign[2], _cD_ = fmtty_of_fmt(fmtty$5);
            return caml_call2(CamlinternalFormatBasics[1], fmtty$6, _cD_);
           case 10:
            fmtty$0 = fmtty$5; break;
           default: fmtty$0 = fmtty$5;
         }
        break;
       default:
        var rest$18 = fmtty$0[3], arity = fmtty$0[1];
        return fmtty_of_custom(arity, fmtty_of_fmt(rest$18));
     }
    }
   }
   function fmtty_of_custom(arity, fmtty){
    if(! arity) return fmtty;
    var arity$0 = arity[1];
    return [12, fmtty_of_custom(arity$0, fmtty)];
   }
   function fmtty_of_padding_fmtty(pad, fmtty){
    return typeof pad === "number" ? fmtty : 0 === pad[0] ? fmtty : [2, fmtty];
   }
   function fmtty_of_precision_fmtty(prec, fmtty){
    return typeof prec === "number" ? prec ? [2, fmtty] : fmtty : fmtty;
   }
   var
    Type_mismatch =
      [248, "CamlinternalFormat.Type_mismatch", runtime.caml_fresh_oo_id(0)],
    cst_d = "%d",
    cst_d$0 = "%+d",
    cst_d$1 = "% d",
    cst_i$0 = cst_i$3,
    cst_i$1 = "%+i",
    cst_i$2 = "% i",
    cst_x = "%x",
    cst_x$0 = "%#x",
    cst_X = "%X",
    cst_X$0 = "%#X",
    cst_o = "%o",
    cst_o$0 = "%#o",
    cst_u = cst_u$0,
    cst_Ld = "%Ld",
    cst_Ld$0 = "%+Ld",
    cst_Ld$1 = "% Ld",
    cst_Li$0 = cst_Li$3,
    cst_Li$1 = "%+Li",
    cst_Li$2 = "% Li",
    cst_Lx = "%Lx",
    cst_Lx$0 = "%#Lx",
    cst_LX = "%LX",
    cst_LX$0 = "%#LX",
    cst_Lo = "%Lo",
    cst_Lo$0 = "%#Lo",
    cst_Lu = "%Lu",
    cst_ld = "%ld",
    cst_ld$0 = "%+ld",
    cst_ld$1 = "% ld",
    cst_li$0 = cst_li$3,
    cst_li$1 = "%+li",
    cst_li$2 = "% li",
    cst_lx = "%lx",
    cst_lx$0 = "%#lx",
    cst_lX = "%lX",
    cst_lX$0 = "%#lX",
    cst_lo = "%lo",
    cst_lo$0 = "%#lo",
    cst_lu = "%lu",
    cst_nd = "%nd",
    cst_nd$0 = "%+nd",
    cst_nd$1 = "% nd",
    cst_ni$0 = cst_ni$3,
    cst_ni$1 = "%+ni",
    cst_ni$2 = "% ni",
    cst_nx = "%nx",
    cst_nx$0 = "%#nx",
    cst_nX = "%nX",
    cst_nX$0 = "%#nX",
    cst_no = "%no",
    cst_no$0 = "%#no",
    cst_nu = "%nu",
    _r_ = [0, 103],
    cst_neg_infinity = "neg_infinity",
    cst_infinity = "infinity",
    cst_nan = "nan",
    _s_ = [0, cst_camlinternalFormat_ml, 1558, 4],
    cst_Printf_bad_conversion = "Printf: bad conversion %[",
    _t_ = [0, cst_camlinternalFormat_ml, 1626, 39],
    _u_ = [0, cst_camlinternalFormat_ml, 1649, 31],
    _v_ = [0, cst_camlinternalFormat_ml, 1650, 31],
    cst_Printf_bad_conversion$0 = "Printf: bad conversion %_",
    _w_ = [0, cst_camlinternalFormat_ml, 1830, 8],
    _x_ = [0, 0, 4],
    _y_ =
      [0,
       [11, "invalid box description ", [3, 0, 0]],
       "invalid box description %S"],
    _z_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11, cst_at_character_number, [4, 0, 0, 0, [11, cst$44, [2, 0, 0]]]]]],
       "invalid format %S: at character number %d, %s"],
    cst_non_zero_widths_are_unsupp =
      "non-zero widths are unsupported for %c conversions",
    _A_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          cst_at_character_number,
          [4, 0, 0, 0, [11, ", '", [0, [11, "' without ", [2, 0, 0]]]]]]]],
       "invalid format %S: at character number %d, '%c' without %s"],
    _B_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          cst_at_character_number,
          [4, 0, 0, 0, [11, cst$44, [2, 0, [11, " expected, read ", [1, 0]]]]]]]],
       "invalid format %S: at character number %d, %s expected, read %C"],
    _C_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          cst_at_character_number,
          [4, 0, 0, 0, [11, ", duplicate flag ", [1, 0]]]]]],
       "invalid format %S: at character number %d, duplicate flag %C"],
    cst_padding = "padding",
    _D_ = [0, 1, 0],
    cst_0 = cst_0$3,
    _E_ = [0, 0],
    cst_precision = cst_precision$3,
    _F_ = [1, 0],
    _G_ = [1, 1],
    cst_precision$0 = cst_precision$3,
    _H_ = [1, 1],
    cst_precision$1 = cst_precision$3,
    cst_0$0 = cst_0$3,
    _I_ = [1, 1],
    cst_0$1 = cst_0$3,
    cst_0$2 = "'0'",
    _J_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          cst_at_character_number,
          [4,
           0,
           0,
           0,
           [11, ', invalid conversion "', [12, 37, [0, [12, 34, 0]]]]]]]],
       'invalid format %S: at character number %d, invalid conversion "%%%c"'],
    _K_ = [0, 0],
    cst_padding$0 = "`padding'",
    _L_ = [0, 0],
    cst_precision$2 = "`precision'",
    _M_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          cst_at_character_number,
          [4,
           0,
           0,
           0,
           [11,
            ", flag ",
            [1,
             [11,
              " is only allowed after the '",
              [12, 37, [11, "', before padding and precision", 0]]]]]]]]],
       "invalid format %S: at character number %d, flag %C is only allowed after the '%%', before padding and precision"],
    _N_ = [0, [12, 64, 0]],
    _O_ = [0, "@ ", 1, 0],
    _P_ = [0, "@,", 0, 0],
    _Q_ = [2, 60],
    _R_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          ": '",
          [12,
           37,
           [11,
            "' alone is not accepted in character sets, use ",
            [12,
             37,
             [12,
              37,
              [11, " instead at position ", [4, 0, 0, 0, [12, 46, 0]]]]]]]]]],
       "invalid format %S: '%%' alone is not accepted in character sets, use %%%% instead at position %d."],
    _S_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          ": integer ",
          [4, 0, 0, 0, [11, " is greater than the limit ", [4, 0, 0, 0, 0]]]]]],
       "invalid format %S: integer %d is greater than the limit %d"],
    _T_ = [0, cst_camlinternalFormat_ml, 2837, 11],
    cst_digit = "digit",
    _U_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          ': unclosed sub-format, expected "',
          [12, 37, [0, [11, '" at character number ', [4, 0, 0, 0, 0]]]]]]],
       'invalid format %S: unclosed sub-format, expected "%%%c" at character number %d'],
    cst_character = "character ')'",
    cst_character$0 = "character '}'",
    _V_ = [0, cst_camlinternalFormat_ml, 2899, 34],
    _W_ = [0, cst_camlinternalFormat_ml, 2935, 28],
    _X_ = [0, cst_camlinternalFormat_ml, 2957, 11],
    _Y_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          cst_at_character_number,
          [4,
           0,
           0,
           0,
           [11,
            cst$44,
            [2,
             0,
             [11,
              " is incompatible with '",
              [0, [11, "' in sub-format ", [3, 0, 0]]]]]]]]]],
       "invalid format %S: at character number %d, %s is incompatible with '%c' in sub-format %S"],
    _Z_ =
      [0,
       [11, cst_bad_input_format_type_mism, [3, 0, [11, cst_and, [3, 0, 0]]]],
       cst_bad_input_format_type_mism$0],
    ___ =
      [0,
       [11, cst_bad_input_format_type_mism, [3, 0, [11, cst_and, [3, 0, 0]]]],
       cst_bad_input_format_type_mism$0];
   function type_padding(pad, fmtty){
    if(typeof pad === "number") return [0, 0, fmtty];
    if(0 === pad[0]){
     var w = pad[2], padty = pad[1];
     return [0, [0, padty, w], fmtty];
    }
    if(typeof fmtty !== "number" && 2 === fmtty[0]){
     var rest = fmtty[1], padty$0 = pad[1];
     return [0, [1, padty$0], rest];
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function type_padprec(pad, prec, fmtty){
    var match = type_padding(pad, fmtty);
    if(typeof prec !== "number"){
     var rest$1 = match[2], pad$2 = match[1], p = prec[1];
     return [0, pad$2, [0, p], rest$1];
    }
    if(! prec){
     var rest$0 = match[2], pad$1 = match[1];
     return [0, pad$1, 0, rest$0];
    }
    var match$0 = match[2];
    if(typeof match$0 !== "number" && 2 === match$0[0]){
     var rest = match$0[1], pad$0 = match[1];
     return [0, pad$0, 1, rest];
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function type_format(fmt, fmtty){
    var _cA_ = type_format_gen(fmt, fmtty);
    if(typeof _cA_[2] !== "number")
     throw caml_maybe_attach_backtrace(Type_mismatch, 1);
    var fmt$0 = _cA_[1];
    return fmt$0;
   }
   function type_format_gen(fmt, fmtty0){
    if(typeof fmt === "number") return [0, 0, fmtty0];
    switch(fmt[0]){
      case 0:
       if(typeof fmtty0 !== "number" && 0 === fmtty0[0]){
        var
         fmtty_rest = fmtty0[1],
         fmt_rest = fmt[1],
         match = type_format_gen(fmt_rest, fmtty_rest),
         fmtty = match[2],
         fmt$0 = match[1];
        return [0, [0, fmt$0], fmtty];
       }
       break;
      case 1:
       if(typeof fmtty0 !== "number" && 0 === fmtty0[0]){
        var
         fmtty_rest$0 = fmtty0[1],
         fmt_rest$0 = fmt[1],
         match$0 = type_format_gen(fmt_rest$0, fmtty_rest$0),
         fmtty$0 = match$0[2],
         fmt$1 = match$0[1];
        return [0, [1, fmt$1], fmtty$0];
       }
       break;
      case 2:
       var
        fmt_rest$1 = fmt[2],
        pad = fmt[1],
        match$1 = type_padding(pad, fmtty0),
        pad$0 = match$1[1],
        match$2 = match$1[2];
       if(typeof match$2 !== "number" && 1 === match$2[0]){
        var
         fmtty_rest$1 = match$2[1],
         match$3 = type_format_gen(fmt_rest$1, fmtty_rest$1),
         fmtty$1 = match$3[2],
         fmt$2 = match$3[1];
        return [0, [2, pad$0, fmt$2], fmtty$1];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 3:
       var
        fmt_rest$2 = fmt[2],
        pad$1 = fmt[1],
        match$4 = type_padding(pad$1, fmtty0),
        pad$2 = match$4[1],
        match$5 = match$4[2];
       if(typeof match$5 !== "number" && 1 === match$5[0]){
        var
         fmtty_rest$2 = match$5[1],
         match$6 = type_format_gen(fmt_rest$2, fmtty_rest$2),
         fmtty$2 = match$6[2],
         fmt$3 = match$6[1];
        return [0, [3, pad$2, fmt$3], fmtty$2];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 4:
       var
        fmt_rest$3 = fmt[4],
        prec = fmt[3],
        pad$3 = fmt[2],
        iconv = fmt[1],
        match$7 = type_padprec(pad$3, prec, fmtty0),
        pad$4 = match$7[1],
        match$8 = match$7[3];
       if(typeof match$8 !== "number" && 2 === match$8[0]){
        var
         fmtty_rest$3 = match$8[1],
         prec$0 = match$7[2],
         match$9 = type_format_gen(fmt_rest$3, fmtty_rest$3),
         fmtty$3 = match$9[2],
         fmt$4 = match$9[1];
        return [0, [4, iconv, pad$4, prec$0, fmt$4], fmtty$3];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 5:
       var
        fmt_rest$4 = fmt[4],
        prec$1 = fmt[3],
        pad$5 = fmt[2],
        iconv$0 = fmt[1],
        match$10 = type_padprec(pad$5, prec$1, fmtty0),
        pad$6 = match$10[1],
        match$11 = match$10[3];
       if(typeof match$11 !== "number" && 3 === match$11[0]){
        var
         fmtty_rest$4 = match$11[1],
         prec$2 = match$10[2],
         match$12 = type_format_gen(fmt_rest$4, fmtty_rest$4),
         fmtty$4 = match$12[2],
         fmt$5 = match$12[1];
        return [0, [5, iconv$0, pad$6, prec$2, fmt$5], fmtty$4];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 6:
       var
        fmt_rest$5 = fmt[4],
        prec$3 = fmt[3],
        pad$7 = fmt[2],
        iconv$1 = fmt[1],
        match$13 = type_padprec(pad$7, prec$3, fmtty0),
        pad$8 = match$13[1],
        match$14 = match$13[3];
       if(typeof match$14 !== "number" && 4 === match$14[0]){
        var
         fmtty_rest$5 = match$14[1],
         prec$4 = match$13[2],
         match$15 = type_format_gen(fmt_rest$5, fmtty_rest$5),
         fmtty$5 = match$15[2],
         fmt$6 = match$15[1];
        return [0, [6, iconv$1, pad$8, prec$4, fmt$6], fmtty$5];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 7:
       var
        fmt_rest$6 = fmt[4],
        prec$5 = fmt[3],
        pad$9 = fmt[2],
        iconv$2 = fmt[1],
        match$16 = type_padprec(pad$9, prec$5, fmtty0),
        pad$10 = match$16[1],
        match$17 = match$16[3];
       if(typeof match$17 !== "number" && 5 === match$17[0]){
        var
         fmtty_rest$6 = match$17[1],
         prec$6 = match$16[2],
         match$18 = type_format_gen(fmt_rest$6, fmtty_rest$6),
         fmtty$6 = match$18[2],
         fmt$7 = match$18[1];
        return [0, [7, iconv$2, pad$10, prec$6, fmt$7], fmtty$6];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 8:
       var
        fmt_rest$7 = fmt[4],
        prec$7 = fmt[3],
        pad$11 = fmt[2],
        fconv = fmt[1],
        match$19 = type_padprec(pad$11, prec$7, fmtty0),
        pad$12 = match$19[1],
        match$20 = match$19[3];
       if(typeof match$20 !== "number" && 6 === match$20[0]){
        var
         fmtty_rest$7 = match$20[1],
         prec$8 = match$19[2],
         match$21 = type_format_gen(fmt_rest$7, fmtty_rest$7),
         fmtty$7 = match$21[2],
         fmt$8 = match$21[1];
        return [0, [8, fconv, pad$12, prec$8, fmt$8], fmtty$7];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 9:
       var
        fmt_rest$8 = fmt[2],
        pad$13 = fmt[1],
        match$22 = type_padding(pad$13, fmtty0),
        pad$14 = match$22[1],
        match$23 = match$22[2];
       if(typeof match$23 !== "number" && 7 === match$23[0]){
        var
         fmtty_rest$8 = match$23[1],
         match$24 = type_format_gen(fmt_rest$8, fmtty_rest$8),
         fmtty$8 = match$24[2],
         fmt$9 = match$24[1];
        return [0, [9, pad$14, fmt$9], fmtty$8];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 10:
       var
        fmt_rest$9 = fmt[1],
        match$25 = type_format_gen(fmt_rest$9, fmtty0),
        fmtty$9 = match$25[2],
        fmt$10 = match$25[1];
       return [0, [10, fmt$10], fmtty$9];
      case 11:
       var
        fmt_rest$10 = fmt[2],
        str = fmt[1],
        match$26 = type_format_gen(fmt_rest$10, fmtty0),
        fmtty$10 = match$26[2],
        fmt$11 = match$26[1];
       return [0, [11, str, fmt$11], fmtty$10];
      case 12:
       var
        fmt_rest$11 = fmt[2],
        chr = fmt[1],
        match$27 = type_format_gen(fmt_rest$11, fmtty0),
        fmtty$11 = match$27[2],
        fmt$12 = match$27[1];
       return [0, [12, chr, fmt$12], fmtty$11];
      case 13:
       if(typeof fmtty0 !== "number" && 8 === fmtty0[0]){
        var
         fmtty_rest$9 = fmtty0[2],
         sub_fmtty = fmtty0[1],
         fmt_rest$12 = fmt[3],
         sub_fmtty$0 = fmt[2],
         pad_opt = fmt[1];
        if(caml_notequal([0, sub_fmtty$0], [0, sub_fmtty]))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         match$28 = type_format_gen(fmt_rest$12, fmtty_rest$9),
         fmtty$12 = match$28[2],
         fmt$13 = match$28[1];
        return [0, [13, pad_opt, sub_fmtty, fmt$13], fmtty$12];
       }
       break;
      case 14:
       if(typeof fmtty0 !== "number" && 9 === fmtty0[0]){
        var
         fmtty_rest$10 = fmtty0[3],
         sub_fmtty1 = fmtty0[1],
         fmt_rest$13 = fmt[3],
         sub_fmtty$1 = fmt[2],
         pad_opt$0 = fmt[1],
         _cy_ = [0, caml_call1(CamlinternalFormatBasics[2], sub_fmtty1)];
        if
         (caml_notequal
           ([0, caml_call1(CamlinternalFormatBasics[2], sub_fmtty$1)], _cy_))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         match$29 =
           type_format_gen
            (fmt_rest$13,
             caml_call1(CamlinternalFormatBasics[2], fmtty_rest$10)),
         fmtty$13 = match$29[2],
         fmt$14 = match$29[1];
        return [0, [14, pad_opt$0, sub_fmtty1, fmt$14], fmtty$13];
       }
       break;
      case 15:
       if(typeof fmtty0 !== "number" && 10 === fmtty0[0]){
        var
         fmtty_rest$11 = fmtty0[1],
         fmt_rest$14 = fmt[1],
         match$30 = type_format_gen(fmt_rest$14, fmtty_rest$11),
         fmtty$14 = match$30[2],
         fmt$15 = match$30[1];
        return [0, [15, fmt$15], fmtty$14];
       }
       break;
      case 16:
       if(typeof fmtty0 !== "number" && 11 === fmtty0[0]){
        var
         fmtty_rest$12 = fmtty0[1],
         fmt_rest$15 = fmt[1],
         match$31 = type_format_gen(fmt_rest$15, fmtty_rest$12),
         fmtty$15 = match$31[2],
         fmt$16 = match$31[1];
        return [0, [16, fmt$16], fmtty$15];
       }
       break;
      case 17:
       var
        fmt_rest$16 = fmt[2],
        formatting_lit = fmt[1],
        match$32 = type_format_gen(fmt_rest$16, fmtty0),
        fmtty$16 = match$32[2],
        fmt$17 = match$32[1];
       return [0, [17, formatting_lit, fmt$17], fmtty$16];
      case 18:
       var fmt_rest$17 = fmt[2], formatting_gen = fmt[1];
       if(0 === formatting_gen[0]){
        var
         match$36 = formatting_gen[1],
         str$0 = match$36[2],
         fmt1 = match$36[1],
         match$37 = type_format_gen(fmt1, fmtty0),
         fmtty2 = match$37[2],
         fmt2 = match$37[1],
         match$38 = type_format_gen(fmt_rest$17, fmtty2),
         fmtty3 = match$38[2],
         fmt3 = match$38[1];
        return [0, [18, [0, [0, fmt2, str$0]], fmt3], fmtty3];
       }
       var
        match$39 = formatting_gen[1],
        str$1 = match$39[2],
        fmt1$0 = match$39[1],
        match$40 = type_format_gen(fmt1$0, fmtty0),
        fmtty2$0 = match$40[2],
        fmt2$0 = match$40[1],
        match$41 = type_format_gen(fmt_rest$17, fmtty2$0),
        fmtty3$0 = match$41[2],
        fmt3$0 = match$41[1];
       return [0, [18, [1, [0, fmt2$0, str$1]], fmt3$0], fmtty3$0];
      case 19:
       if(typeof fmtty0 !== "number" && 13 === fmtty0[0]){
        var
         fmtty_rest$13 = fmtty0[1],
         fmt_rest$18 = fmt[1],
         match$33 = type_format_gen(fmt_rest$18, fmtty_rest$13),
         fmtty$17 = match$33[2],
         fmt$18 = match$33[1];
        return [0, [19, fmt$18], fmtty$17];
       }
       break;
      case 20:
       if(typeof fmtty0 !== "number" && 1 === fmtty0[0]){
        var
         fmtty_rest$14 = fmtty0[1],
         fmt_rest$19 = fmt[3],
         char_set = fmt[2],
         width_opt = fmt[1],
         match$34 = type_format_gen(fmt_rest$19, fmtty_rest$14),
         fmtty$18 = match$34[2],
         fmt$19 = match$34[1];
        return [0, [20, width_opt, char_set, fmt$19], fmtty$18];
       }
       break;
      case 21:
       if(typeof fmtty0 !== "number" && 2 === fmtty0[0]){
        var
         fmtty_rest$15 = fmtty0[1],
         fmt_rest$20 = fmt[2],
         counter = fmt[1],
         match$35 = type_format_gen(fmt_rest$20, fmtty_rest$15),
         fmtty$19 = match$35[2],
         fmt$20 = match$35[1];
        return [0, [21, counter, fmt$20], fmtty$19];
       }
       break;
      case 23:
       var rest = fmt[2], ign = fmt[1];
       if(typeof ign !== "number")
        switch(ign[0]){
          case 0:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 1:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 2:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 3:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 4:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 5:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 6:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 7:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 8:
           var sub_fmtty$2 = ign[2], pad_opt$1 = ign[1];
           return type_ignored_param_one
                   ([8, pad_opt$1, sub_fmtty$2], rest, fmtty0);
          case 9:
           var
            sub_fmtty$3 = ign[2],
            pad_opt$2 = ign[1],
            _cz_ = type_ignored_format_substituti(sub_fmtty$3, rest, fmtty0),
            match$43 = _cz_[2],
            fmtty$21 = match$43[2],
            fmt$22 = match$43[1],
            sub_fmtty$4 = _cz_[1];
           return [0, [23, [9, pad_opt$2, sub_fmtty$4], fmt$22], fmtty$21];
          case 10:
           return type_ignored_param_one(ign, rest, fmtty0);
          default: return type_ignored_param_one(ign, rest, fmtty0);
        }
       switch(ign){
         case 0:
          return type_ignored_param_one(ign, rest, fmtty0);
         case 1:
          return type_ignored_param_one(ign, rest, fmtty0);
         case 2:
          if(typeof fmtty0 !== "number" && 14 === fmtty0[0]){
           var
            fmtty_rest$16 = fmtty0[1],
            match$42 = type_format_gen(rest, fmtty_rest$16),
            fmtty$20 = match$42[2],
            fmt$21 = match$42[1];
           return [0, [23, 2, fmt$21], fmtty$20];
          }
          throw caml_maybe_attach_backtrace(Type_mismatch, 1);
         default: return type_ignored_param_one(ign, rest, fmtty0);
       }
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function type_ignored_param_one(ign, fmt, fmtty){
    var
     match = type_format_gen(fmt, fmtty),
     fmtty$0 = match[2],
     fmt$0 = match[1];
    return [0, [23, ign, fmt$0], fmtty$0];
   }
   function type_ignored_format_substituti(sub_fmtty, fmt, fmtty){
    if(typeof sub_fmtty === "number")
     return [0, 0, type_format_gen(fmt, fmtty)];
    switch(sub_fmtty[0]){
      case 0:
       if(typeof fmtty !== "number" && 0 === fmtty[0]){
        var
         fmtty_rest = fmtty[1],
         sub_fmtty_rest = sub_fmtty[1],
         match =
           type_ignored_format_substituti(sub_fmtty_rest, fmt, fmtty_rest),
         fmt$0 = match[2],
         sub_fmtty_rest$0 = match[1];
        return [0, [0, sub_fmtty_rest$0], fmt$0];
       }
       break;
      case 1:
       if(typeof fmtty !== "number" && 1 === fmtty[0]){
        var
         fmtty_rest$0 = fmtty[1],
         sub_fmtty_rest$1 = sub_fmtty[1],
         match$0 =
           type_ignored_format_substituti(sub_fmtty_rest$1, fmt, fmtty_rest$0),
         fmt$1 = match$0[2],
         sub_fmtty_rest$2 = match$0[1];
        return [0, [1, sub_fmtty_rest$2], fmt$1];
       }
       break;
      case 2:
       if(typeof fmtty !== "number" && 2 === fmtty[0]){
        var
         fmtty_rest$1 = fmtty[1],
         sub_fmtty_rest$3 = sub_fmtty[1],
         match$1 =
           type_ignored_format_substituti(sub_fmtty_rest$3, fmt, fmtty_rest$1),
         fmt$2 = match$1[2],
         sub_fmtty_rest$4 = match$1[1];
        return [0, [2, sub_fmtty_rest$4], fmt$2];
       }
       break;
      case 3:
       if(typeof fmtty !== "number" && 3 === fmtty[0]){
        var
         fmtty_rest$2 = fmtty[1],
         sub_fmtty_rest$5 = sub_fmtty[1],
         match$2 =
           type_ignored_format_substituti(sub_fmtty_rest$5, fmt, fmtty_rest$2),
         fmt$3 = match$2[2],
         sub_fmtty_rest$6 = match$2[1];
        return [0, [3, sub_fmtty_rest$6], fmt$3];
       }
       break;
      case 4:
       if(typeof fmtty !== "number" && 4 === fmtty[0]){
        var
         fmtty_rest$3 = fmtty[1],
         sub_fmtty_rest$7 = sub_fmtty[1],
         match$3 =
           type_ignored_format_substituti(sub_fmtty_rest$7, fmt, fmtty_rest$3),
         fmt$4 = match$3[2],
         sub_fmtty_rest$8 = match$3[1];
        return [0, [4, sub_fmtty_rest$8], fmt$4];
       }
       break;
      case 5:
       if(typeof fmtty !== "number" && 5 === fmtty[0]){
        var
         fmtty_rest$4 = fmtty[1],
         sub_fmtty_rest$9 = sub_fmtty[1],
         match$4 =
           type_ignored_format_substituti(sub_fmtty_rest$9, fmt, fmtty_rest$4),
         fmt$5 = match$4[2],
         sub_fmtty_rest$10 = match$4[1];
        return [0, [5, sub_fmtty_rest$10], fmt$5];
       }
       break;
      case 6:
       if(typeof fmtty !== "number" && 6 === fmtty[0]){
        var
         fmtty_rest$5 = fmtty[1],
         sub_fmtty_rest$11 = sub_fmtty[1],
         match$5 =
           type_ignored_format_substituti
            (sub_fmtty_rest$11, fmt, fmtty_rest$5),
         fmt$6 = match$5[2],
         sub_fmtty_rest$12 = match$5[1];
        return [0, [6, sub_fmtty_rest$12], fmt$6];
       }
       break;
      case 7:
       if(typeof fmtty !== "number" && 7 === fmtty[0]){
        var
         fmtty_rest$6 = fmtty[1],
         sub_fmtty_rest$13 = sub_fmtty[1],
         match$6 =
           type_ignored_format_substituti
            (sub_fmtty_rest$13, fmt, fmtty_rest$6),
         fmt$7 = match$6[2],
         sub_fmtty_rest$14 = match$6[1];
        return [0, [7, sub_fmtty_rest$14], fmt$7];
       }
       break;
      case 8:
       if(typeof fmtty !== "number" && 8 === fmtty[0]){
        var
         fmtty_rest$7 = fmtty[2],
         sub2_fmtty = fmtty[1],
         sub_fmtty_rest$15 = sub_fmtty[2],
         sub2_fmtty$0 = sub_fmtty[1];
        if(caml_notequal([0, sub2_fmtty$0], [0, sub2_fmtty]))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         match$7 =
           type_ignored_format_substituti
            (sub_fmtty_rest$15, fmt, fmtty_rest$7),
         fmt$8 = match$7[2],
         sub_fmtty_rest$16 = match$7[1];
        return [0, [8, sub2_fmtty, sub_fmtty_rest$16], fmt$8];
       }
       break;
      case 9:
       if(typeof fmtty !== "number" && 9 === fmtty[0]){
        var
         fmtty_rest$8 = fmtty[3],
         sub2_fmtty$1 = fmtty[2],
         sub1_fmtty = fmtty[1],
         sub_fmtty_rest$17 = sub_fmtty[3],
         sub2_fmtty$2 = sub_fmtty[2],
         sub1_fmtty$0 = sub_fmtty[1],
         _cw_ = [0, caml_call1(CamlinternalFormatBasics[2], sub1_fmtty)];
        if
         (caml_notequal
           ([0, caml_call1(CamlinternalFormatBasics[2], sub1_fmtty$0)], _cw_))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var _cx_ = [0, caml_call1(CamlinternalFormatBasics[2], sub2_fmtty$1)];
        if
         (caml_notequal
           ([0, caml_call1(CamlinternalFormatBasics[2], sub2_fmtty$2)], _cx_))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         sub_fmtty$0 = trans(symm(sub1_fmtty), sub2_fmtty$1),
         match$8 = fmtty_rel_det(sub_fmtty$0),
         f4 = match$8[4],
         f2 = match$8[2];
        f2(0);
        f4(0);
        var
         match$9 =
           type_ignored_format_substituti
            (caml_call1(CamlinternalFormatBasics[2], sub_fmtty_rest$17),
             fmt,
             fmtty_rest$8),
         fmt$9 = match$9[2],
         sub_fmtty_rest$18 = match$9[1];
        return [0,
                [9, sub1_fmtty, sub2_fmtty$1, symm(sub_fmtty_rest$18)],
                fmt$9];
       }
       break;
      case 10:
       if(typeof fmtty !== "number" && 10 === fmtty[0]){
        var
         fmtty_rest$9 = fmtty[1],
         sub_fmtty_rest$19 = sub_fmtty[1],
         match$10 =
           type_ignored_format_substituti
            (sub_fmtty_rest$19, fmt, fmtty_rest$9),
         fmt$10 = match$10[2],
         sub_fmtty_rest$20 = match$10[1];
        return [0, [10, sub_fmtty_rest$20], fmt$10];
       }
       break;
      case 11:
       if(typeof fmtty !== "number" && 11 === fmtty[0]){
        var
         fmtty_rest$10 = fmtty[1],
         sub_fmtty_rest$21 = sub_fmtty[1],
         match$11 =
           type_ignored_format_substituti
            (sub_fmtty_rest$21, fmt, fmtty_rest$10),
         fmt$11 = match$11[2],
         sub_fmtty_rest$22 = match$11[1];
        return [0, [11, sub_fmtty_rest$22], fmt$11];
       }
       break;
      case 13:
       if(typeof fmtty !== "number" && 13 === fmtty[0]){
        var
         fmtty_rest$11 = fmtty[1],
         sub_fmtty_rest$23 = sub_fmtty[1],
         match$12 =
           type_ignored_format_substituti
            (sub_fmtty_rest$23, fmt, fmtty_rest$11),
         fmt$12 = match$12[2],
         sub_fmtty_rest$24 = match$12[1];
        return [0, [13, sub_fmtty_rest$24], fmt$12];
       }
       break;
      case 14:
       if(typeof fmtty !== "number" && 14 === fmtty[0]){
        var
         fmtty_rest$12 = fmtty[1],
         sub_fmtty_rest$25 = sub_fmtty[1],
         match$13 =
           type_ignored_format_substituti
            (sub_fmtty_rest$25, fmt, fmtty_rest$12),
         fmt$13 = match$13[2],
         sub_fmtty_rest$26 = match$13[1];
        return [0, [14, sub_fmtty_rest$26], fmt$13];
       }
       break;
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function recast(fmt, fmtty){
    var _cv_ = symm(fmtty);
    return type_format(fmt, caml_call1(CamlinternalFormatBasics[2], _cv_));
   }
   function fix_padding(padty, width, str){
    var
     len = caml_ml_string_length(str),
     padty$0 = 0 <= width ? padty : 0,
     width$0 = caml_call1(Stdlib[18], width);
    if(width$0 <= len) return str;
    var
     _cu_ = 2 === padty$0 ? 48 : 32,
     res = caml_call2(Stdlib_Bytes[1], width$0, _cu_);
    switch(padty$0){
      case 0:
       caml_call5(Stdlib_String[48], str, 0, res, 0, len); break;
      case 1:
       caml_call5(Stdlib_String[48], str, 0, res, width$0 - len | 0, len);
       break;
      default:
       a:
       if(0 < len){
        if
         (43 !== caml_string_get(str, 0)
          && 45 !== caml_string_get(str, 0) && 32 !== caml_string_get(str, 0))
         break a;
        caml_bytes_set(res, 0, caml_string_get(str, 0));
        caml_call5
         (Stdlib_String[48],
          str,
          1,
          res,
          (width$0 - len | 0) + 1 | 0,
          len - 1 | 0);
        break;
       }
       a:
       if(1 < len && 48 === caml_string_get(str, 0)){
        if(120 !== caml_string_get(str, 1) && 88 !== caml_string_get(str, 1))
         break a;
        caml_bytes_set(res, 1, caml_string_get(str, 1));
        caml_call5
         (Stdlib_String[48],
          str,
          2,
          res,
          (width$0 - len | 0) + 2 | 0,
          len - 2 | 0);
        break;
       }
       caml_call5(Stdlib_String[48], str, 0, res, width$0 - len | 0, len);
    }
    return caml_call1(Stdlib_Bytes[48], res);
   }
   function fix_int_precision(prec, str){
    var
     prec$0 = caml_call1(Stdlib[18], prec),
     len = caml_ml_string_length(str),
     c = caml_string_get(str, 0);
    a:
    {
     b:
     {
      if(58 > c){
       if(32 !== c){
        if(43 > c) break a;
        switch(c - 43 | 0){
          case 5:
           c:
           if(len < (prec$0 + 2 | 0) && 1 < len){
            if
             (120 !== caml_string_get(str, 1)
              && 88 !== caml_string_get(str, 1))
             break c;
            var res$1 = caml_call2(Stdlib_Bytes[1], prec$0 + 2 | 0, 48);
            caml_bytes_set(res$1, 1, caml_string_get(str, 1));
            caml_call5
             (Stdlib_String[48],
              str,
              2,
              res$1,
              (prec$0 - len | 0) + 4 | 0,
              len - 2 | 0);
            return caml_call1(Stdlib_Bytes[48], res$1);
           }
           break b;
          case 0:
          case 2: break;
          case 1:
          case 3:
          case 4:
           break a;
          default: break b;
        }
       }
       if(len >= (prec$0 + 1 | 0)) break a;
       var res$0 = caml_call2(Stdlib_Bytes[1], prec$0 + 1 | 0, 48);
       caml_bytes_set(res$0, 0, c);
       caml_call5
        (Stdlib_String[48],
         str,
         1,
         res$0,
         (prec$0 - len | 0) + 2 | 0,
         len - 1 | 0);
       return caml_call1(Stdlib_Bytes[48], res$0);
      }
      if(71 <= c){if(5 < c - 97 >>> 0) break a;} else if(65 > c) break a;
     }
     if(len < prec$0){
      var res = caml_call2(Stdlib_Bytes[1], prec$0, 48);
      caml_call5(Stdlib_String[48], str, 0, res, prec$0 - len | 0, len);
      return caml_call1(Stdlib_Bytes[48], res);
     }
    }
    return str;
   }
   function string_to_caml_string(str){
    var
     str$0 = caml_call1(Stdlib_String[24], str),
     l = caml_ml_string_length(str$0),
     res = caml_call2(Stdlib_Bytes[1], l + 2 | 0, 34);
    caml_blit_string(str$0, 0, res, 1, l);
    return caml_call1(Stdlib_Bytes[48], res);
   }
   function format_of_fconv(fconv, prec){
    var
     prec$0 = caml_call1(Stdlib[18], prec),
     symb = char_of_fconv(_r_, fconv),
     buf = buffer_create(16);
    buffer_add_char(buf, 37);
    bprint_fconv_flag(buf, fconv);
    buffer_add_char(buf, 46);
    buffer_add_string(buf, caml_call1(Stdlib_Int[12], prec$0));
    buffer_add_char(buf, symb);
    return buffer_contents(buf);
   }
   function transform_int_alt(iconv, s){
    if(13 > iconv) return s;
    var n = [0, 0], _cp_ = caml_ml_string_length(s) - 1 | 0, _co_ = 0;
    if(_cp_ >= 0){
     var i$0 = _co_;
     for(;;){
      if(9 >= caml_string_unsafe_get(s, i$0) - 48 >>> 0) n[1]++;
      var _ct_ = i$0 + 1 | 0;
      if(_cp_ === i$0) break;
      i$0 = _ct_;
     }
    }
    var
     digits = n[1],
     buf =
       caml_create_bytes
        (caml_ml_string_length(s) + ((digits - 1 | 0) / 3 | 0) | 0),
     pos = [0, 0];
    function put(c){caml_bytes_set(buf, pos[1], c); pos[1]++; return;}
    var
     left = [0, ((digits - 1 | 0) % 3 | 0) + 1 | 0],
     _cr_ = caml_ml_string_length(s) - 1 | 0,
     _cq_ = 0;
    if(_cr_ >= 0){
     var i = _cq_;
     for(;;){
      var c = caml_string_unsafe_get(s, i);
      if(9 < c - 48 >>> 0)
       put(c);
      else{if(0 === left[1]){put(95); left[1] = 3;} left[1]--; put(c);}
      var _cs_ = i + 1 | 0;
      if(_cr_ === i) break;
      i = _cs_;
     }
    }
    return caml_call1(Stdlib_Bytes[48], buf);
   }
   function convert_int(iconv, n){
    switch(iconv){
      case 1:
       var _cn_ = cst_d$0; break;
      case 2:
       var _cn_ = cst_d$1; break;
      case 4:
       var _cn_ = cst_i$1; break;
      case 5:
       var _cn_ = cst_i$2; break;
      case 6:
       var _cn_ = cst_x; break;
      case 7:
       var _cn_ = cst_x$0; break;
      case 8:
       var _cn_ = cst_X; break;
      case 9:
       var _cn_ = cst_X$0; break;
      case 10:
       var _cn_ = cst_o; break;
      case 11:
       var _cn_ = cst_o$0; break;
      case 0:
      case 13:
       var _cn_ = cst_d; break;
      case 3:
      case 14:
       var _cn_ = cst_i$0; break;
      default: var _cn_ = cst_u;
    }
    return transform_int_alt(iconv, caml_format_int(_cn_, n));
   }
   function convert_int32(iconv, n){
    switch(iconv){
      case 1:
       var _cm_ = cst_ld$0; break;
      case 2:
       var _cm_ = cst_ld$1; break;
      case 4:
       var _cm_ = cst_li$1; break;
      case 5:
       var _cm_ = cst_li$2; break;
      case 6:
       var _cm_ = cst_lx; break;
      case 7:
       var _cm_ = cst_lx$0; break;
      case 8:
       var _cm_ = cst_lX; break;
      case 9:
       var _cm_ = cst_lX$0; break;
      case 10:
       var _cm_ = cst_lo; break;
      case 11:
       var _cm_ = cst_lo$0; break;
      case 0:
      case 13:
       var _cm_ = cst_ld; break;
      case 3:
      case 14:
       var _cm_ = cst_li$0; break;
      default: var _cm_ = cst_lu;
    }
    return transform_int_alt(iconv, caml_format_int(_cm_, n));
   }
   function convert_nativeint(iconv, n){
    switch(iconv){
      case 1:
       var _cl_ = cst_nd$0; break;
      case 2:
       var _cl_ = cst_nd$1; break;
      case 4:
       var _cl_ = cst_ni$1; break;
      case 5:
       var _cl_ = cst_ni$2; break;
      case 6:
       var _cl_ = cst_nx; break;
      case 7:
       var _cl_ = cst_nx$0; break;
      case 8:
       var _cl_ = cst_nX; break;
      case 9:
       var _cl_ = cst_nX$0; break;
      case 10:
       var _cl_ = cst_no; break;
      case 11:
       var _cl_ = cst_no$0; break;
      case 0:
      case 13:
       var _cl_ = cst_nd; break;
      case 3:
      case 14:
       var _cl_ = cst_ni$0; break;
      default: var _cl_ = cst_nu;
    }
    return transform_int_alt(iconv, caml_format_int(_cl_, n));
   }
   function convert_int64(iconv, n){
    switch(iconv){
      case 1:
       var _ck_ = cst_Ld$0; break;
      case 2:
       var _ck_ = cst_Ld$1; break;
      case 4:
       var _ck_ = cst_Li$1; break;
      case 5:
       var _ck_ = cst_Li$2; break;
      case 6:
       var _ck_ = cst_Lx; break;
      case 7:
       var _ck_ = cst_Lx$0; break;
      case 8:
       var _ck_ = cst_LX; break;
      case 9:
       var _ck_ = cst_LX$0; break;
      case 10:
       var _ck_ = cst_Lo; break;
      case 11:
       var _ck_ = cst_Lo$0; break;
      case 0:
      case 13:
       var _ck_ = cst_Ld; break;
      case 3:
      case 14:
       var _ck_ = cst_Li$0; break;
      default: var _ck_ = cst_Lu;
    }
    return transform_int_alt(iconv, runtime.caml_int64_format(_ck_, n));
   }
   function convert_float(fconv, prec, x){
    function hex(param){
     switch(fconv[1]){
       case 0:
        var sign = 45; break;
       case 1:
        var sign = 43; break;
       default: var sign = 32;
     }
     return runtime.caml_hexstring_of_float(x, prec, sign);
    }
    function caml_special_val(str){
     var match = runtime.caml_classify_float(x);
     return 3 === match
             ? x < 0. ? cst_neg_infinity : cst_infinity
             : 4 <= match ? cst_nan : str;
    }
    switch(fconv[2]){
      case 5:
       var
        str = caml_format_float(format_of_fconv(fconv, prec), x),
        len = caml_ml_string_length(str),
        i = 0;
       for(;;){
        if(i === len)
         var _ch_ = 0;
        else{
         var _cg_ = caml_string_get(str, i) - 46 | 0;
         a:
         {
          if(23 < _cg_ >>> 0){
           if(55 === _cg_) break a;
          }
          else if(21 < _cg_ - 1 >>> 0) break a;
          var i$0 = i + 1 | 0;
          i = i$0;
          continue;
         }
         var _ch_ = 1;
        }
        var _ci_ = _ch_ ? str : caml_call2(Stdlib[28], str, cst$17);
        return caml_special_val(_ci_);
       }
      case 6:
       return hex(0);
      case 7:
       var _cj_ = hex(0); return caml_call1(Stdlib_String[25], _cj_);
      case 8:
       return caml_special_val(hex(0));
      default: return caml_format_float(format_of_fconv(fconv, prec), x);
    }
   }
   function string_of_fmtty(fmtty){
    var buf = buffer_create(16);
    bprint_fmtty(buf, fmtty);
    return buffer_contents(buf);
   }
   function make_printf$0(counter, k, acc, fmt){
    var k$0 = k, acc$0 = acc, fmt$0 = fmt;
    for(;;){
     if(typeof fmt$0 === "number") return caml_call1(k$0, acc$0);
     switch(fmt$0[0]){
       case 0:
        var rest = fmt$0[1];
        return function(c){
         var new_acc = [5, acc$0, c];
         return make_printf(k$0, new_acc, rest);};
       case 1:
        var rest$0 = fmt$0[1];
        return function(c){
         var
          str = caml_call1(Stdlib_Char[2], c),
          l = caml_ml_string_length(str),
          res = caml_call2(Stdlib_Bytes[1], l + 2 | 0, 39);
         caml_blit_string(str, 0, res, 1, l);
         var new_acc = [4, acc$0, caml_call1(Stdlib_Bytes[48], res)];
         return make_printf(k$0, new_acc, rest$0);};
       case 2:
        var rest$1 = fmt$0[2], pad = fmt$0[1];
        return make_padding
                (k$0, acc$0, rest$1, pad, function(str){return str;});
       case 3:
        var rest$2 = fmt$0[2], pad$0 = fmt$0[1];
        return make_padding(k$0, acc$0, rest$2, pad$0, string_to_caml_string);
       case 4:
        var
         rest$3 = fmt$0[4],
         prec = fmt$0[3],
         pad$1 = fmt$0[2],
         iconv = fmt$0[1];
        return make_int_padding_precision
                (k$0, acc$0, rest$3, pad$1, prec, convert_int, iconv);
       case 5:
        var
         rest$4 = fmt$0[4],
         prec$0 = fmt$0[3],
         pad$2 = fmt$0[2],
         iconv$0 = fmt$0[1];
        return make_int_padding_precision
                (k$0, acc$0, rest$4, pad$2, prec$0, convert_int32, iconv$0);
       case 6:
        var
         rest$5 = fmt$0[4],
         prec$1 = fmt$0[3],
         pad$3 = fmt$0[2],
         iconv$1 = fmt$0[1];
        return make_int_padding_precision
                (k$0,
                 acc$0,
                 rest$5,
                 pad$3,
                 prec$1,
                 convert_nativeint,
                 iconv$1);
       case 7:
        var
         rest$6 = fmt$0[4],
         prec$2 = fmt$0[3],
         pad$4 = fmt$0[2],
         iconv$2 = fmt$0[1];
        return make_int_padding_precision
                (k$0, acc$0, rest$6, pad$4, prec$2, convert_int64, iconv$2);
       case 8:
        var
         rest$7 = fmt$0[4],
         prec$3 = fmt$0[3],
         pad$5 = fmt$0[2],
         fconv = fmt$0[1];
        if(typeof pad$5 === "number"){
         if(typeof prec$3 === "number")
          return prec$3
                  ? function
                   (p, x){
                    var str = convert_float(fconv, p, x);
                    return make_printf(k$0, [4, acc$0, str], rest$7);
                   }
                  : function
                   (x){
                    var
                     str =
                       convert_float(fconv, default_float_precision(fconv), x);
                    return make_printf(k$0, [4, acc$0, str], rest$7);
                   };
         var p = prec$3[1];
         return function(x){
          var str = convert_float(fconv, p, x);
          return make_printf(k$0, [4, acc$0, str], rest$7);};
        }
        if(0 === pad$5[0]){
         var w = pad$5[2], padty = pad$5[1];
         if(typeof prec$3 === "number")
          return prec$3
                  ? function
                   (p, x){
                    var str = fix_padding(padty, w, convert_float(fconv, p, x));
                    return make_printf(k$0, [4, acc$0, str], rest$7);
                   }
                  : function
                   (x){
                    var
                     str =
                       convert_float(fconv, default_float_precision(fconv), x),
                     str$0 = fix_padding(padty, w, str);
                    return make_printf(k$0, [4, acc$0, str$0], rest$7);
                   };
         var p$0 = prec$3[1];
         return function(x){
          var str = fix_padding(padty, w, convert_float(fconv, p$0, x));
          return make_printf(k$0, [4, acc$0, str], rest$7);};
        }
        var padty$0 = pad$5[1];
        if(typeof prec$3 === "number")
         return prec$3
                 ? function
                  (w, p, x){
                   var
                    str = fix_padding(padty$0, w, convert_float(fconv, p, x));
                   return make_printf(k$0, [4, acc$0, str], rest$7);
                  }
                 : function
                  (w, x){
                   var
                    str =
                      convert_float(fconv, default_float_precision(fconv), x),
                    str$0 = fix_padding(padty$0, w, str);
                   return make_printf(k$0, [4, acc$0, str$0], rest$7);
                  };
        var p$1 = prec$3[1];
        return function(w, x){
         var str = fix_padding(padty$0, w, convert_float(fconv, p$1, x));
         return make_printf(k$0, [4, acc$0, str], rest$7);};
       case 9:
        var rest$8 = fmt$0[2], pad$6 = fmt$0[1];
        return make_padding(k$0, acc$0, rest$8, pad$6, Stdlib[30]);
       case 10:
        var rest$9 = fmt$0[1], acc$1 = [7, acc$0];
        acc$0 = acc$1;
        fmt$0 = rest$9;
        break;
       case 11:
        var rest$10 = fmt$0[2], str = fmt$0[1], acc$2 = [2, acc$0, str];
        acc$0 = acc$2;
        fmt$0 = rest$10;
        break;
       case 12:
        var rest$11 = fmt$0[2], chr = fmt$0[1], acc$3 = [3, acc$0, chr];
        acc$0 = acc$3;
        fmt$0 = rest$11;
        break;
       case 13:
        var
         rest$12 = fmt$0[3],
         sub_fmtty = fmt$0[2],
         ty = string_of_fmtty(sub_fmtty);
        return function(str){
         return make_printf(k$0, [4, acc$0, ty], rest$12);};
       case 14:
        var rest$13 = fmt$0[3], fmtty = fmt$0[2];
        return function(param){
         var fmt = param[1], _cf_ = recast(fmt, fmtty);
         return make_printf
                 (k$0,
                  acc$0,
                  caml_call2(CamlinternalFormatBasics[3], _cf_, rest$13));};
       case 15:
        var rest$14 = fmt$0[1];
        return function(f, x){
         return make_printf
                 (k$0,
                  [6, acc$0, function(o){return caml_call2(f, o, x);}],
                  rest$14);};
       case 16:
        var rest$15 = fmt$0[1];
        return function(f){return make_printf(k$0, [6, acc$0, f], rest$15);};
       case 17:
        var
         rest$16 = fmt$0[2],
         fmting_lit = fmt$0[1],
         acc$4 = [0, acc$0, fmting_lit];
        acc$0 = acc$4;
        fmt$0 = rest$16;
        break;
       case 18:
        var _cd_ = fmt$0[1];
        if(0 === _cd_[0]){
         var rest$17 = fmt$0[2], fmt$1 = _cd_[1][1];
         let acc = acc$0, k = k$0, rest = rest$17;
         var
          k$1 =
            function(kacc){return make_printf(k, [1, acc, [0, kacc]], rest);};
         k$0 = k$1;
         acc$0 = 0;
         fmt$0 = fmt$1;
        }
        else{
         var rest$18 = fmt$0[2], fmt$2 = _cd_[1][1];
         let acc = acc$0, k = k$0, rest = rest$18;
         var
          k$2 =
            function(kacc){return make_printf(k, [1, acc, [1, kacc]], rest);};
         k$0 = k$2;
         acc$0 = 0;
         fmt$0 = fmt$2;
        }
        break;
       case 19:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _s_], 1);
       case 20:
        var
         rest$19 = fmt$0[3],
         new_acc = [8, acc$0, cst_Printf_bad_conversion];
        return function(param){return make_printf(k$0, new_acc, rest$19);};
       case 21:
        var rest$20 = fmt$0[2];
        return function(n){
         var new_acc = [4, acc$0, caml_format_int(cst_u$0, n)];
         return make_printf(k$0, new_acc, rest$20);};
       case 22:
        var rest$21 = fmt$0[1];
        return function(c){
         var new_acc = [5, acc$0, c];
         return make_printf(k$0, new_acc, rest$21);};
       case 23:
        var rest$22 = fmt$0[2], ign = fmt$0[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (make_ignored_param$0, [0, k$0, acc$0, ign, rest$22]);
        var counter$1 = counter + 1 | 0;
        return make_ignored_param$0(counter$1, k$0, acc$0, ign, rest$22);
       default:
        var
         rest$23 = fmt$0[3],
         f = fmt$0[2],
         arity = fmt$0[1],
         _ce_ = caml_call1(f, 0);
        if(counter >= 50)
         return caml_trampoline_return
                 (make_custom$0, [0, k$0, acc$0, rest$23, arity, _ce_]);
        var counter$0 = counter + 1 | 0;
        return make_custom$0(counter$0, k$0, acc$0, rest$23, arity, _ce_);
     }
    }
   }
   function make_printf(k, acc, fmt){
    return caml_trampoline(make_printf$0(0, k, acc, fmt));
   }
   function make_ignored_param$0(counter, k, acc, ign, fmt){
    if(typeof ign === "number")
     switch(ign){
       case 0:
        if(counter >= 50)
         return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
        var counter$0 = counter + 1 | 0;
        return make_invalid_arg(counter$0, k, acc, fmt);
       case 1:
        if(counter >= 50)
         return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
        var counter$1 = counter + 1 | 0;
        return make_invalid_arg(counter$1, k, acc, fmt);
       case 2:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _t_], 1);
       default:
        if(counter >= 50)
         return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
        var counter$2 = counter + 1 | 0;
        return make_invalid_arg(counter$2, k, acc, fmt);
     }
    switch(ign[0]){
      case 0:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$3 = counter + 1 | 0;
       return make_invalid_arg(counter$3, k, acc, fmt);
      case 1:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$4 = counter + 1 | 0;
       return make_invalid_arg(counter$4, k, acc, fmt);
      case 2:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$5 = counter + 1 | 0;
       return make_invalid_arg(counter$5, k, acc, fmt);
      case 3:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$6 = counter + 1 | 0;
       return make_invalid_arg(counter$6, k, acc, fmt);
      case 4:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$7 = counter + 1 | 0;
       return make_invalid_arg(counter$7, k, acc, fmt);
      case 5:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$8 = counter + 1 | 0;
       return make_invalid_arg(counter$8, k, acc, fmt);
      case 6:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$9 = counter + 1 | 0;
       return make_invalid_arg(counter$9, k, acc, fmt);
      case 7:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$10 = counter + 1 | 0;
       return make_invalid_arg(counter$10, k, acc, fmt);
      case 8:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$11 = counter + 1 | 0;
       return make_invalid_arg(counter$11, k, acc, fmt);
      case 9:
       var fmtty = ign[2];
       if(counter >= 50)
        return caml_trampoline_return
                (make_from_fmtty$0, [0, k, acc, fmtty, fmt]);
       var counter$14 = counter + 1 | 0;
       return make_from_fmtty$0(counter$14, k, acc, fmtty, fmt);
      case 10:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$12 = counter + 1 | 0;
       return make_invalid_arg(counter$12, k, acc, fmt);
      default:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$13 = counter + 1 | 0;
       return make_invalid_arg(counter$13, k, acc, fmt);
    }
   }
   function make_ignored_param(k, acc, ign, fmt){
    return caml_trampoline(make_ignored_param$0(0, k, acc, ign, fmt));
   }
   function make_from_fmtty$0(counter, k, acc, fmtty, fmt){
    if(typeof fmtty !== "number")
     switch(fmtty[0]){
       case 0:
        var rest = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest, fmt);};
       case 1:
        var rest$0 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$0, fmt);};
       case 2:
        var rest$1 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$1, fmt);};
       case 3:
        var rest$2 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$2, fmt);};
       case 4:
        var rest$3 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$3, fmt);};
       case 5:
        var rest$4 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$4, fmt);};
       case 6:
        var rest$5 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$5, fmt);};
       case 7:
        var rest$6 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$6, fmt);};
       case 8:
        var rest$7 = fmtty[2];
        return function(param){return make_from_fmtty(k, acc, rest$7, fmt);};
       case 9:
        var
         rest$8 = fmtty[3],
         ty2 = fmtty[2],
         ty1 = fmtty[1],
         ty = trans(symm(ty1), ty2);
        return function(param){
         return make_from_fmtty
                 (k,
                  acc,
                  caml_call2(CamlinternalFormatBasics[1], ty, rest$8),
                  fmt);};
       case 10:
        var rest$9 = fmtty[1];
        return function(param, _cc_){
         return make_from_fmtty(k, acc, rest$9, fmt);};
       case 11:
        var rest$10 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$10, fmt);};
       case 12:
        var rest$11 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$11, fmt);};
       case 13:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _u_], 1);
       default:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _v_], 1);
     }
    if(counter >= 50)
     return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
    var counter$0 = counter + 1 | 0;
    return make_invalid_arg(counter$0, k, acc, fmt);
   }
   function make_from_fmtty(k, acc, fmtty, fmt){
    return caml_trampoline(make_from_fmtty$0(0, k, acc, fmtty, fmt));
   }
   function make_invalid_arg(counter, k, acc, fmt){
    var _cb_ = [8, acc, cst_Printf_bad_conversion$0];
    if(counter >= 50)
     return caml_trampoline_return(make_printf$0, [0, k, _cb_, fmt]);
    var counter$0 = counter + 1 | 0;
    return make_printf$0(counter$0, k, _cb_, fmt);
   }
   function make_padding(k, acc, fmt, pad, trans){
    if(typeof pad === "number")
     return function(x){
      var new_acc = [4, acc, caml_call1(trans, x)];
      return make_printf(k, new_acc, fmt);};
    if(0 === pad[0]){
     var width = pad[2], padty = pad[1];
     return function(x){
      var new_acc = [4, acc, fix_padding(padty, width, caml_call1(trans, x))];
      return make_printf(k, new_acc, fmt);};
    }
    var padty$0 = pad[1];
    return function(w, x){
     var new_acc = [4, acc, fix_padding(padty$0, w, caml_call1(trans, x))];
     return make_printf(k, new_acc, fmt);};
   }
   function make_int_padding_precision(k, acc, fmt, pad, prec, trans, iconv){
    if(typeof pad === "number"){
     if(typeof prec === "number")
      return prec
              ? function
               (p, x){
                var str = fix_int_precision(p, caml_call2(trans, iconv, x));
                return make_printf(k, [4, acc, str], fmt);
               }
              : function
               (x){
                var str = caml_call2(trans, iconv, x);
                return make_printf(k, [4, acc, str], fmt);
               };
     var p = prec[1];
     return function(x){
      var str = fix_int_precision(p, caml_call2(trans, iconv, x));
      return make_printf(k, [4, acc, str], fmt);};
    }
    if(0 === pad[0]){
     var w = pad[2], padty = pad[1];
     if(typeof prec === "number")
      return prec
              ? function
               (p, x){
                var
                 str =
                   fix_padding
                    (padty,
                     w,
                     fix_int_precision(p, caml_call2(trans, iconv, x)));
                return make_printf(k, [4, acc, str], fmt);
               }
              : function
               (x){
                var str = fix_padding(padty, w, caml_call2(trans, iconv, x));
                return make_printf(k, [4, acc, str], fmt);
               };
     var p$0 = prec[1];
     return function(x){
      var
       str =
         fix_padding
          (padty, w, fix_int_precision(p$0, caml_call2(trans, iconv, x)));
      return make_printf(k, [4, acc, str], fmt);};
    }
    var padty$0 = pad[1];
    if(typeof prec === "number")
     return prec
             ? function
              (w, p, x){
               var
                str =
                  fix_padding
                   (padty$0,
                    w,
                    fix_int_precision(p, caml_call2(trans, iconv, x)));
               return make_printf(k, [4, acc, str], fmt);
              }
             : function
              (w, x){
               var str = fix_padding(padty$0, w, caml_call2(trans, iconv, x));
               return make_printf(k, [4, acc, str], fmt);
              };
    var p$1 = prec[1];
    return function(w, x){
     var
      str =
        fix_padding
         (padty$0, w, fix_int_precision(p$1, caml_call2(trans, iconv, x)));
     return make_printf(k, [4, acc, str], fmt);};
   }
   function make_custom$0(counter, k, acc, rest, arity, f){
    if(arity){
     var arity$0 = arity[1];
     return function(x){
      return make_custom(k, acc, rest, arity$0, caml_call1(f, x));};
    }
    var _ca_ = [4, acc, f];
    if(counter >= 50)
     return caml_trampoline_return(make_printf$0, [0, k, _ca_, rest]);
    var counter$0 = counter + 1 | 0;
    return make_printf$0(counter$0, k, _ca_, rest);
   }
   function make_custom(k, acc, rest, arity, f){
    return caml_trampoline(make_custom$0(0, k, acc, rest, arity, f));
   }
   function make_iprintf$0(counter, k, o, fmt){
    var k$0 = k, fmt$0 = fmt;
    for(;;){
     if(typeof fmt$0 === "number") return caml_call1(k$0, o);
     switch(fmt$0[0]){
       case 0:
        var rest = fmt$0[1], x = make_iprintf(k$0, o, rest);
        return function(_b$_){return x;};
       case 1:
        var rest$0 = fmt$0[1], x$0 = make_iprintf(k$0, o, rest$0);
        return function(_b__){return x$0;};
       case 2:
        var _bM_ = fmt$0[1];
        if(typeof _bM_ === "number"){
         var rest$1 = fmt$0[2], x$1 = make_iprintf(k$0, o, rest$1);
         return function(_b9_){return x$1;};
        }
        if(0 === _bM_[0]){
         var rest$2 = fmt$0[2], x$2 = make_iprintf(k$0, o, rest$2);
         return function(_b8_){return x$2;};
        }
        var
         rest$3 = fmt$0[2],
         x$3 = make_iprintf(k$0, o, rest$3),
         x$4 = function(_b7_){return x$3;};
        return function(_b6_){return x$4;};
       case 3:
        var _bN_ = fmt$0[1];
        if(typeof _bN_ === "number"){
         var rest$4 = fmt$0[2], x$5 = make_iprintf(k$0, o, rest$4);
         return function(_b5_){return x$5;};
        }
        if(0 === _bN_[0]){
         var rest$5 = fmt$0[2], x$6 = make_iprintf(k$0, o, rest$5);
         return function(_b4_){return x$6;};
        }
        var
         rest$6 = fmt$0[2],
         x$7 = make_iprintf(k$0, o, rest$6),
         x$8 = function(_b3_){return x$7;};
        return function(_b2_){return x$8;};
       case 4:
        var rest$7 = fmt$0[4], prec = fmt$0[3], pad = fmt$0[2];
        return fn_of_padding_precision(k$0, o, rest$7, pad, prec);
       case 5:
        var rest$8 = fmt$0[4], prec$0 = fmt$0[3], pad$0 = fmt$0[2];
        return fn_of_padding_precision(k$0, o, rest$8, pad$0, prec$0);
       case 6:
        var rest$9 = fmt$0[4], prec$1 = fmt$0[3], pad$1 = fmt$0[2];
        return fn_of_padding_precision(k$0, o, rest$9, pad$1, prec$1);
       case 7:
        var rest$10 = fmt$0[4], prec$2 = fmt$0[3], pad$2 = fmt$0[2];
        return fn_of_padding_precision(k$0, o, rest$10, pad$2, prec$2);
       case 8:
        var rest$11 = fmt$0[4], prec$3 = fmt$0[3], pad$3 = fmt$0[2];
        return fn_of_padding_precision(k$0, o, rest$11, pad$3, prec$3);
       case 9:
        var _bO_ = fmt$0[1];
        if(typeof _bO_ === "number"){
         var rest$12 = fmt$0[2], x$9 = make_iprintf(k$0, o, rest$12);
         return function(_b1_){return x$9;};
        }
        if(0 === _bO_[0]){
         var rest$13 = fmt$0[2], x$10 = make_iprintf(k$0, o, rest$13);
         return function(_b0_){return x$10;};
        }
        var
         rest$14 = fmt$0[2],
         x$11 = make_iprintf(k$0, o, rest$14),
         x$12 = function(_bZ_){return x$11;};
        return function(_bY_){return x$12;};
       case 10:
        var rest$15 = fmt$0[1]; fmt$0 = rest$15; break;
       case 11:
        var rest$16 = fmt$0[2]; fmt$0 = rest$16; break;
       case 12:
        var rest$17 = fmt$0[2]; fmt$0 = rest$17; break;
       case 13:
        var rest$18 = fmt$0[3], x$13 = make_iprintf(k$0, o, rest$18);
        return function(_bX_){return x$13;};
       case 14:
        var rest$19 = fmt$0[3], fmtty = fmt$0[2];
        return function(param){
         var fmt = param[1], _bW_ = recast(fmt, fmtty);
         return make_iprintf
                 (k$0,
                  o,
                  caml_call2(CamlinternalFormatBasics[3], _bW_, rest$19));};
       case 15:
        var
         rest$20 = fmt$0[1],
         x$14 = make_iprintf(k$0, o, rest$20),
         x$15 = function(_bV_){return x$14;};
        return function(_bU_){return x$15;};
       case 16:
        var rest$21 = fmt$0[1], x$16 = make_iprintf(k$0, o, rest$21);
        return function(_bT_){return x$16;};
       case 17:
        var rest$22 = fmt$0[2]; fmt$0 = rest$22; break;
       case 18:
        var _bP_ = fmt$0[1];
        if(0 === _bP_[0]){
         var rest$23 = fmt$0[2], fmt$1 = _bP_[1][1];
         let k = k$0, rest = rest$23;
         var k$1 = function(koc){return make_iprintf(k, koc, rest);};
         k$0 = k$1;
         fmt$0 = fmt$1;
        }
        else{
         var rest$24 = fmt$0[2], fmt$2 = _bP_[1][1];
         let k = k$0, rest = rest$24;
         var k$2 = function(koc){return make_iprintf(k, koc, rest);};
         k$0 = k$2;
         fmt$0 = fmt$2;
        }
        break;
       case 19:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _w_], 1);
       case 20:
        var rest$25 = fmt$0[3], x$17 = make_iprintf(k$0, o, rest$25);
        return function(_bS_){return x$17;};
       case 21:
        var rest$26 = fmt$0[2], x$18 = make_iprintf(k$0, o, rest$26);
        return function(_bR_){return x$18;};
       case 22:
        var rest$27 = fmt$0[1], x$19 = make_iprintf(k$0, o, rest$27);
        return function(_bQ_){return x$19;};
       case 23:
        var rest$28 = fmt$0[2], ign = fmt$0[1];
        return make_ignored_param
                (function(param){return caml_call1(k$0, o);}, 0, ign, rest$28);
       default:
        var rest$29 = fmt$0[3], arity = fmt$0[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (fn_of_custom_arity$0, [0, k$0, o, rest$29, arity]);
        var counter$0 = counter + 1 | 0;
        return fn_of_custom_arity$0(counter$0, k$0, o, rest$29, arity);
     }
    }
   }
   function make_iprintf(k, o, fmt){
    return caml_trampoline(make_iprintf$0(0, k, o, fmt));
   }
   function fn_of_padding_precision(k, o, fmt, pad, prec){
    if(typeof pad === "number"){
     if(typeof prec !== "number"){
      var x$2 = make_iprintf(k, o, fmt);
      return function(_bL_){return x$2;};
     }
     if(prec){
      var x = make_iprintf(k, o, fmt), x$0 = function(_bK_){return x;};
      return function(_bJ_){return x$0;};
     }
     var x$1 = make_iprintf(k, o, fmt);
     return function(_bI_){return x$1;};
    }
    if(0 === pad[0]){
     if(typeof prec !== "number"){
      var x$6 = make_iprintf(k, o, fmt);
      return function(_bH_){return x$6;};
     }
     if(prec){
      var x$3 = make_iprintf(k, o, fmt), x$4 = function(_bG_){return x$3;};
      return function(_bF_){return x$4;};
     }
     var x$5 = make_iprintf(k, o, fmt);
     return function(_bE_){return x$5;};
    }
    if(typeof prec !== "number"){
     var x$12 = make_iprintf(k, o, fmt), x$13 = function(_bD_){return x$12;};
     return function(_bC_){return x$13;};
    }
    if(prec){
     var
      x$7 = make_iprintf(k, o, fmt),
      x$8 = function(_bB_){return x$7;},
      x$9 = function(_bA_){return x$8;};
     return function(_bz_){return x$9;};
    }
    var x$10 = make_iprintf(k, o, fmt);
    function x$11(_by_){return x$10;}
    return function(_bx_){return x$11;};
   }
   function fn_of_custom_arity$0(counter, k, o, fmt, param){
    if(param){
     var arity = param[1], x = fn_of_custom_arity(k, o, fmt, arity);
     return function(_bw_){return x;};
    }
    if(counter >= 50)
     return caml_trampoline_return(make_iprintf$0, [0, k, o, fmt]);
    var counter$0 = counter + 1 | 0;
    return make_iprintf$0(counter$0, k, o, fmt);
   }
   function fn_of_custom_arity(k, o, fmt, param){
    return caml_trampoline(fn_of_custom_arity$0(0, k, o, fmt, param));
   }
   function output_acc(o, acc){
    var acc$0 = acc;
    for(;;){
     if(typeof acc$0 === "number") return 0;
     switch(acc$0[0]){
       case 0:
        var
         fmting_lit = acc$0[2],
         p = acc$0[1],
         s = string_of_formatting_lit(fmting_lit);
        output_acc(o, p);
        return caml_call2(Stdlib[66], o, s);
       case 1:
        var match = acc$0[2], p$0 = acc$0[1];
        if(0 === match[0]){
         var acc$1 = match[1];
         output_acc(o, p$0);
         caml_call2(Stdlib[66], o, cst$18);
         acc$0 = acc$1;
        }
        else{
         var acc$2 = match[1];
         output_acc(o, p$0);
         caml_call2(Stdlib[66], o, cst$19);
         acc$0 = acc$2;
        }
        break;
       case 6:
        var f = acc$0[2], p$3 = acc$0[1];
        output_acc(o, p$3);
        return caml_call1(f, o);
       case 7:
        var p$4 = acc$0[1];
        output_acc(o, p$4);
        return caml_call1(Stdlib[63], o);
       case 8:
        var msg = acc$0[2], p$5 = acc$0[1];
        output_acc(o, p$5);
        return caml_call1(Stdlib[1], msg);
       case 2:
       case 4:
        var s$0 = acc$0[2], p$1 = acc$0[1];
        output_acc(o, p$1);
        return caml_call2(Stdlib[66], o, s$0);
       default:
        var c = acc$0[2], p$2 = acc$0[1];
        output_acc(o, p$2);
        return caml_call2(Stdlib[65], o, c);
     }
    }
   }
   function bufput_acc(b, acc){
    var acc$0 = acc;
    for(;;){
     if(typeof acc$0 === "number") return 0;
     switch(acc$0[0]){
       case 0:
        var
         fmting_lit = acc$0[2],
         p = acc$0[1],
         s = string_of_formatting_lit(fmting_lit);
        bufput_acc(b, p);
        return caml_call2(Stdlib_Buffer[16], b, s);
       case 1:
        var match = acc$0[2], p$0 = acc$0[1];
        if(0 === match[0]){
         var acc$1 = match[1];
         bufput_acc(b, p$0);
         caml_call2(Stdlib_Buffer[16], b, cst$20);
         acc$0 = acc$1;
        }
        else{
         var acc$2 = match[1];
         bufput_acc(b, p$0);
         caml_call2(Stdlib_Buffer[16], b, cst$21);
         acc$0 = acc$2;
        }
        break;
       case 6:
        var f = acc$0[2], p$3 = acc$0[1];
        bufput_acc(b, p$3);
        return caml_call1(f, b);
       case 7:
        var acc$3 = acc$0[1]; acc$0 = acc$3; break;
       case 8:
        var msg = acc$0[2], p$4 = acc$0[1];
        bufput_acc(b, p$4);
        return caml_call1(Stdlib[1], msg);
       case 2:
       case 4:
        var s$0 = acc$0[2], p$1 = acc$0[1];
        bufput_acc(b, p$1);
        return caml_call2(Stdlib_Buffer[16], b, s$0);
       default:
        var c = acc$0[2], p$2 = acc$0[1];
        bufput_acc(b, p$2);
        return caml_call2(Stdlib_Buffer[12], b, c);
     }
    }
   }
   function strput_acc(b, acc){
    var acc$0 = acc;
    for(;;){
     if(typeof acc$0 === "number") return 0;
     switch(acc$0[0]){
       case 0:
        var
         fmting_lit = acc$0[2],
         p = acc$0[1],
         s = string_of_formatting_lit(fmting_lit);
        strput_acc(b, p);
        return caml_call2(Stdlib_Buffer[16], b, s);
       case 1:
        var match = acc$0[2], p$0 = acc$0[1];
        if(0 === match[0]){
         var acc$1 = match[1];
         strput_acc(b, p$0);
         caml_call2(Stdlib_Buffer[16], b, cst$22);
         acc$0 = acc$1;
        }
        else{
         var acc$2 = match[1];
         strput_acc(b, p$0);
         caml_call2(Stdlib_Buffer[16], b, cst$23);
         acc$0 = acc$2;
        }
        break;
       case 6:
        var f = acc$0[2], p$3 = acc$0[1];
        strput_acc(b, p$3);
        var _bv_ = caml_call1(f, 0);
        return caml_call2(Stdlib_Buffer[16], b, _bv_);
       case 7:
        var acc$3 = acc$0[1]; acc$0 = acc$3; break;
       case 8:
        var msg = acc$0[2], p$4 = acc$0[1];
        strput_acc(b, p$4);
        return caml_call1(Stdlib[1], msg);
       case 2:
       case 4:
        var s$0 = acc$0[2], p$1 = acc$0[1];
        strput_acc(b, p$1);
        return caml_call2(Stdlib_Buffer[16], b, s$0);
       default:
        var c = acc$0[2], p$2 = acc$0[1];
        strput_acc(b, p$2);
        return caml_call2(Stdlib_Buffer[12], b, c);
     }
    }
   }
   function failwith_message(param){
    var fmt = param[1], buf = caml_call1(Stdlib_Buffer[1], 256);
    function k(acc){
     strput_acc(buf, acc);
     var _bu_ = caml_call1(Stdlib_Buffer[2], buf);
     return caml_call1(Stdlib[2], _bu_);
    }
    return make_printf(k, 0, fmt);
   }
   function open_box_of_string(str){
    if(str == cst$43) return _x_;
    var len = caml_ml_string_length(str);
    function invalid_box(param){
     return caml_call1(failwith_message(_y_), str);
    }
    function parse_spaces(i){
     var i$0 = i;
     for(;;){
      if(i$0 === len) return i$0;
      var match = caml_string_get(str, i$0);
      if(9 !== match && 32 !== match) return i$0;
      var i$1 = i$0 + 1 | 0;
      i$0 = i$1;
     }
    }
    var wstart = parse_spaces(0);
    a:
    b:
    {
     var wend = wstart;
     for(;;){
      if(wend === len) break b;
      if(25 < caml_string_get(str, wend) - 97 >>> 0) break;
      var j = wend + 1 | 0;
      wend = j;
     }
     break a;
    }
    var
     box_name = caml_call3(Stdlib_String[15], str, wstart, wend - wstart | 0),
     nstart = parse_spaces(wend);
    a:
    b:
    {
     var nend = nstart;
     for(;;){
      if(nend === len) break b;
      var match = caml_string_get(str, nend);
      if(48 <= match){if(58 <= match) break;} else if(45 !== match) break;
      var j$0 = nend + 1 | 0;
      nend = j$0;
     }
     break a;
    }
    if(nstart === nend)
     var indent = 0;
    else
     try{
      var
       _bs_ =
         runtime.caml_int_of_string
          (caml_call3(Stdlib_String[15], str, nstart, nend - nstart | 0)),
       indent = _bs_;
     }
     catch(_bt_){
      var _br_ = caml_wrap_exception(_bt_);
      if(_br_[1] !== Stdlib[7]) throw caml_maybe_attach_backtrace(_br_, 0);
      var indent = invalid_box(0);
     }
    var exp_end = parse_spaces(nend);
    if(exp_end !== len) invalid_box(0);
    a:
    {
     if(box_name !== cst$43 && box_name !== "b"){
      if(box_name === "h"){var box_type = 0; break a;}
      if(box_name === "hov"){var box_type = 3; break a;}
      if(box_name === "hv"){var box_type = 2; break a;}
      if(box_name !== "v"){var box_type = invalid_box(0); break a;}
      var box_type = 1;
      break a;
     }
     var box_type = 4;
    }
    return [0, indent, box_type];
   }
   function make_padding_fmt_ebb(pad, fmt){
    if(typeof pad === "number") return [0, 0, fmt];
    if(0 === pad[0]){var w = pad[2], s = pad[1]; return [0, [0, s, w], fmt];}
    var s$0 = pad[1];
    return [0, [1, s$0], fmt];
   }
   function make_padprec_fmt_ebb(pad, prec, fmt){
    if(typeof prec === "number")
     var match = prec ? [0, 1] : [0, 0];
    else
     var p = prec[1], match = [0, [0, p]];
    var prec$0 = match[1];
    if(typeof pad === "number") return [0, 0, prec$0, fmt];
    if(0 === pad[0]){
     var w = pad[2], s = pad[1];
     return [0, [0, s, w], prec$0, fmt];
    }
    var s$0 = pad[1];
    return [0, [1, s$0], prec$0, fmt];
   }
   function fmt_ebb_of_string(legacy_behavior, str){
    if(legacy_behavior)
     var flag = legacy_behavior[1], legacy_behavior$0 = flag;
    else
     var legacy_behavior$0 = 1;
    function invalid_format_message(str_ind, msg){
     return caml_call3(failwith_message(_z_), str, str_ind, msg);
    }
    function invalid_format_without(str_ind, c, s){
     return caml_call4(failwith_message(_A_), str, str_ind, c, s);
    }
    function expected_character(str_ind, expected, read){
     return caml_call4(failwith_message(_B_), str, str_ind, expected, read);
    }
    function parse(lit_start, end_ind){
     a:
     {
      var str_ind = lit_start;
      for(;;){
       if(str_ind === end_ind) return add_literal(lit_start, str_ind, 0);
       var match = caml_string_get(str, str_ind);
       if(37 === match) break;
       if(64 === match) break a;
       var str_ind$1 = str_ind + 1 | 0;
       str_ind = str_ind$1;
      }
      var str_ind$2 = str_ind + 1 | 0;
      if(str_ind$2 === end_ind)
       invalid_format_message(end_ind, cst_unexpected_end_of_format);
      var
       match$1 =
         95 === caml_string_get(str, str_ind$2)
          ? parse_flags(str_ind, str_ind$2 + 1 | 0, end_ind, 1)
          : parse_flags(str_ind, str_ind$2, end_ind, 0),
       fmt_rest = match$1[1];
      return add_literal(lit_start, str_ind, fmt_rest);
     }
     var str_ind$0 = str_ind + 1 | 0;
     a:
     if(str_ind$0 === end_ind)
      var match$0 = _N_;
     else{
      var c = caml_string_get(str, str_ind$0);
      if(65 <= c){
       if(94 <= c){
        var switcher = c - 123 | 0;
        if(2 >= switcher >>> 0)
         switch(switcher){
           case 0:
            var match$0 = parse_tag(1, str_ind$0 + 1 | 0, end_ind); break a;
           case 1: break;
           default:
            var
             fmt_rest$2 = parse(str_ind$0 + 1 | 0, end_ind)[1],
             match$0 = [0, [17, 1, fmt_rest$2]];
            break a;
         }
       }
       else if(91 <= c)
        switch(c - 91 | 0){
          case 0:
           var match$0 = parse_tag(0, str_ind$0 + 1 | 0, end_ind); break a;
          case 1: break;
          default:
           var
            fmt_rest$3 = parse(str_ind$0 + 1 | 0, end_ind)[1],
            match$0 = [0, [17, 0, fmt_rest$3]];
           break a;
        }
      }
      else{
       if(10 === c){
        var
         fmt_rest$4 = parse(str_ind$0 + 1 | 0, end_ind)[1],
         match$0 = [0, [17, 3, fmt_rest$4]];
        break a;
       }
       if(32 <= c)
        switch(c - 32 | 0){
          case 0:
           var
            fmt_rest$5 = parse(str_ind$0 + 1 | 0, end_ind)[1],
            match$0 = [0, [17, _O_, fmt_rest$5]];
           break a;
          case 5:
           if
            ((str_ind$0 + 1 | 0) < end_ind
             && 37 === caml_string_get(str, str_ind$0 + 1 | 0)){
            var
             fmt_rest$6 = parse(str_ind$0 + 2 | 0, end_ind)[1],
             match$0 = [0, [17, 6, fmt_rest$6]];
            break a;
           }
           var
            fmt_rest$7 = parse(str_ind$0, end_ind)[1],
            match$0 = [0, [12, 64, fmt_rest$7]];
           break a;
          case 12:
           var
            fmt_rest$8 = parse(str_ind$0 + 1 | 0, end_ind)[1],
            match$0 = [0, [17, _P_, fmt_rest$8]];
           break a;
          case 14:
           var
            fmt_rest$9 = parse(str_ind$0 + 1 | 0, end_ind)[1],
            match$0 = [0, [17, 4, fmt_rest$9]];
           break a;
          case 27:
           var str_ind$3 = str_ind$0 + 1 | 0;
           b:
           try{
            var
             _bg_ = str_ind$3 === end_ind ? 1 : 0,
             _bh_ = _bg_ || (60 !== caml_string_get(str, str_ind$3) ? 1 : 0);
            if(_bh_) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
            var
             str_ind_1 = parse_spaces(str_ind$3 + 1 | 0, end_ind),
             match$2 = caml_string_get(str, str_ind_1);
            c:
            {
             if(48 <= match$2){
              if(58 > match$2) break c;
             }
             else if(45 === match$2) break c;
             throw caml_maybe_attach_backtrace(Stdlib[8], 1);
            }
            var
             match$3 = parse_integer(str_ind_1, end_ind),
             width = match$3[2],
             str_ind_2 = match$3[1],
             str_ind_3 = parse_spaces(str_ind_2, end_ind),
             switcher$0 = caml_string_get(str, str_ind_3) - 45 | 0;
            if(12 < switcher$0 >>> 0){
             if(17 === switcher$0){
              var
               s =
                 caml_call3
                  (Stdlib_String[15],
                   str,
                   str_ind$3 - 2 | 0,
                   (str_ind_3 - str_ind$3 | 0) + 3 | 0),
               _bi_ = [0, s, width, 0],
               _bj_ = str_ind_3 + 1 | 0,
               formatting_lit$0 = _bi_,
               next_ind = _bj_;
              break b;
             }
            }
            else if(1 < switcher$0 - 1 >>> 0){
             var
              match$4 = parse_integer(str_ind_3, end_ind),
              offset = match$4[2],
              str_ind_4 = match$4[1],
              str_ind_5 = parse_spaces(str_ind_4, end_ind);
             if(62 !== caml_string_get(str, str_ind_5))
              throw caml_maybe_attach_backtrace(Stdlib[8], 1);
             var
              s$0 =
                caml_call3
                 (Stdlib_String[15],
                  str,
                  str_ind$3 - 2 | 0,
                  (str_ind_5 - str_ind$3 | 0) + 3 | 0),
              _bk_ = [0, s$0, width, offset],
              _bl_ = str_ind_5 + 1 | 0,
              formatting_lit$0 = _bk_,
              next_ind = _bl_;
             break b;
            }
            throw caml_maybe_attach_backtrace(Stdlib[8], 1);
           }
           catch(_bq_){
            var _bf_ = caml_wrap_exception(_bq_);
            if(_bf_ !== Stdlib[8] && _bf_[1] !== Stdlib[7])
             throw caml_maybe_attach_backtrace(_bf_, 0);
            var formatting_lit$0 = formatting_lit, next_ind = str_ind$3;
           }
           var
            fmt_rest$12 = parse(next_ind, end_ind)[1],
            match$0 = [0, [17, formatting_lit$0, fmt_rest$12]];
           break a;
          case 28:
           var str_ind$4 = str_ind$0 + 1 | 0;
           try{
            var
             str_ind_1$0 = parse_spaces(str_ind$4, end_ind),
             match$6 = caml_string_get(str, str_ind_1$0);
            b:
            {
             c:
             {
              if(48 <= match$6){
               if(58 > match$6) break c;
              }
              else if(45 === match$6) break c;
              var _bo_ = 0;
              break b;
             }
             var
              match$7 = parse_integer(str_ind_1$0, end_ind),
              size = match$7[2],
              str_ind_2$0 = match$7[1],
              str_ind_3$0 = parse_spaces(str_ind_2$0, end_ind);
             if(62 !== caml_string_get(str, str_ind_3$0))
              throw caml_maybe_attach_backtrace(Stdlib[8], 1);
             var
              s$1 =
                caml_call3
                 (Stdlib_String[15],
                  str,
                  str_ind$4 - 2 | 0,
                  (str_ind_3$0 - str_ind$4 | 0) + 3 | 0),
              _bo_ = [0, [0, str_ind_3$0 + 1 | 0, [1, s$1, size]]];
            }
            var _bn_ = _bo_;
           }
           catch(_bp_){
            var _bm_ = caml_wrap_exception(_bp_);
            if(_bm_ !== Stdlib[8] && _bm_[1] !== Stdlib[7])
             throw caml_maybe_attach_backtrace(_bm_, 0);
            var _bn_ = 0;
           }
           if(_bn_)
            var
             match$5 = _bn_[1],
             formatting_lit$1 = match$5[2],
             next_ind$0 = match$5[1],
             fmt_rest$13 = parse(next_ind$0, end_ind)[1],
             _be_ = [0, [17, formatting_lit$1, fmt_rest$13]];
           else
            var
             fmt_rest$14 = parse(str_ind$4, end_ind)[1],
             _be_ = [0, [17, _Q_, fmt_rest$14]];
           var match$0 = _be_;
           break a;
          case 31:
           var
            fmt_rest$10 = parse(str_ind$0 + 1 | 0, end_ind)[1],
            match$0 = [0, [17, 2, fmt_rest$10]];
           break a;
          case 32:
           var
            fmt_rest$11 = parse(str_ind$0 + 1 | 0, end_ind)[1],
            match$0 = [0, [17, 5, fmt_rest$11]];
           break a;
        }
      }
      var
       fmt_rest$1 = parse(str_ind$0 + 1 | 0, end_ind)[1],
       match$0 = [0, [17, [2, c], fmt_rest$1]];
     }
     var fmt_rest$0 = match$0[1];
     return add_literal(lit_start, str_ind, fmt_rest$0);
    }
    function parse_flags(pct_ind, str_ind, end_ind, ign){
     var
      zero = [0, 0],
      minus = [0, 0],
      plus = [0, 0],
      space = [0, 0],
      hash = [0, 0];
     function set_flag(str_ind, flag){
      var _bb_ = flag[1], _bc_ = _bb_ ? 1 - legacy_behavior$0 : _bb_;
      if(_bc_){
       var _bd_ = caml_string_get(str, str_ind);
       caml_call3(failwith_message(_C_), str, str_ind, _bd_);
      }
      flag[1] = 1;
      return;
     }
     a:
     b:
     {
      var str_ind$0 = str_ind;
      c:
      for(;;){
       if(str_ind$0 === end_ind)
        invalid_format_message(end_ind, cst_unexpected_end_of_format);
       var switcher = caml_string_get(str, str_ind$0) - 32 | 0;
       if(16 < switcher >>> 0) break b;
       switch(switcher){
         case 0:
          set_flag(str_ind$0, space);
          var str_ind$1 = str_ind$0 + 1 | 0;
          str_ind$0 = str_ind$1;
          break;
         case 3:
          set_flag(str_ind$0, hash);
          var str_ind$2 = str_ind$0 + 1 | 0;
          str_ind$0 = str_ind$2;
          break;
         case 11:
          set_flag(str_ind$0, plus);
          var str_ind$3 = str_ind$0 + 1 | 0;
          str_ind$0 = str_ind$3;
          break;
         case 13:
          set_flag(str_ind$0, minus);
          var str_ind$4 = str_ind$0 + 1 | 0;
          str_ind$0 = str_ind$4;
          break;
         case 16:
          set_flag(str_ind$0, zero);
          var str_ind$5 = str_ind$0 + 1 | 0;
          str_ind$0 = str_ind$5;
          break;
         default: break c;
       }
      }
      break a;
     }
     var
      space$0 = space[1],
      hash$0 = hash[1],
      plus$0 = plus[1],
      minus$0 = minus[1],
      zero$0 = zero[1];
     if(str_ind$0 === end_ind)
      invalid_format_message(end_ind, cst_unexpected_end_of_format);
     var
      padty =
        zero$0
         ? minus$0
           ? legacy_behavior$0
             ? 0
             : incompatible_flag(pct_ind, str_ind$0, 45, cst_0)
           : 2
         : minus$0 ? 0 : 1,
      match = caml_string_get(str, str_ind$0);
     if(48 <= match){
      if(58 > match){
       var
        match$0 = parse_positive(str_ind$0, end_ind, 0),
        width = match$0[2],
        new_ind = match$0[1];
       return parse_after_padding
               (pct_ind,
                new_ind,
                end_ind,
                minus$0,
                plus$0,
                hash$0,
                space$0,
                ign,
                [0, padty, width]);
      }
     }
     else if(42 === match)
      return parse_after_padding
              (pct_ind,
               str_ind$0 + 1 | 0,
               end_ind,
               minus$0,
               plus$0,
               hash$0,
               space$0,
               ign,
               [1, padty]);
     switch(padty){
       case 0:
        if(1 - legacy_behavior$0)
         invalid_format_without(str_ind$0 - 1 | 0, 45, cst_padding);
        return parse_after_padding
                (pct_ind,
                 str_ind$0,
                 end_ind,
                 minus$0,
                 plus$0,
                 hash$0,
                 space$0,
                 ign,
                 0);
       case 1:
        return parse_after_padding
                (pct_ind,
                 str_ind$0,
                 end_ind,
                 minus$0,
                 plus$0,
                 hash$0,
                 space$0,
                 ign,
                 0);
       default:
        return parse_after_padding
                (pct_ind,
                 str_ind$0,
                 end_ind,
                 minus$0,
                 plus$0,
                 hash$0,
                 space$0,
                 ign,
                 _D_);
     }
    }
    function parse_after_padding
    (pct_ind, str_ind, end_ind, minus, plus, hash, space, ign, pad){
     if(str_ind === end_ind)
      invalid_format_message(end_ind, cst_unexpected_end_of_format);
     var symb = caml_string_get(str, str_ind);
     if(46 !== symb)
      return parse_conversion
              (pct_ind,
               str_ind + 1 | 0,
               end_ind,
               plus,
               hash,
               space,
               ign,
               pad,
               0,
               pad,
               symb);
     var str_ind$0 = str_ind + 1 | 0;
     if(str_ind$0 === end_ind)
      invalid_format_message(end_ind, cst_unexpected_end_of_format);
     function parse_literal(minus, str_ind){
      var
       match = parse_positive(str_ind, end_ind, 0),
       prec = match[2],
       new_ind = match[1];
      return parse_after_precision
              (pct_ind,
               new_ind,
               end_ind,
               minus,
               plus,
               hash,
               space,
               ign,
               pad,
               [0, prec]);
     }
     var symb$0 = caml_string_get(str, str_ind$0);
     if(48 <= symb$0){
      if(58 > symb$0) return parse_literal(minus, str_ind$0);
     }
     else if(42 <= symb$0)
      switch(symb$0 - 42 | 0){
        case 0:
         return parse_after_precision
                 (pct_ind,
                  str_ind$0 + 1 | 0,
                  end_ind,
                  minus,
                  plus,
                  hash,
                  space,
                  ign,
                  pad,
                  1);
        case 1:
        case 3:
         if(legacy_behavior$0){
          var
           _ba_ = str_ind$0 + 1 | 0,
           minus$0 = minus || (45 === symb$0 ? 1 : 0);
          return parse_literal(minus$0, _ba_);
         }
         break;
      }
     return legacy_behavior$0
             ? parse_after_precision
               (pct_ind,
                str_ind$0,
                end_ind,
                minus,
                plus,
                hash,
                space,
                ign,
                pad,
                _E_)
             : invalid_format_without(str_ind$0 - 1 | 0, 46, cst_precision);
    }
    function parse_after_precision
    (pct_ind, str_ind, end_ind, minus, plus, hash, space, ign, pad, prec){
     if(str_ind === end_ind)
      invalid_format_message(end_ind, cst_unexpected_end_of_format);
     function parse_conv(padprec){
      return parse_conversion
              (pct_ind,
               str_ind + 1 | 0,
               end_ind,
               plus,
               hash,
               space,
               ign,
               pad,
               prec,
               padprec,
               caml_string_get(str, str_ind));
     }
     if(typeof pad !== "number") return parse_conv(pad);
     if(typeof prec === "number" && ! prec) return parse_conv(0);
     if(minus){
      if(typeof prec === "number") return parse_conv(_F_);
      var n = prec[1];
      return parse_conv([0, 0, n]);
     }
     if(typeof prec === "number") return parse_conv(_G_);
     var n$0 = prec[1];
     return parse_conv([0, 1, n$0]);
    }
    function parse_conversion
    (pct_ind,
     str_ind,
     end_ind,
     plus,
     hash,
     space,
     ign,
     pad,
     prec,
     padprec,
     symb){
     var
      plus_used = [0, 0],
      hash_used = [0, 0],
      space_used = [0, 0],
      ign_used = [0, 0],
      pad_used = [0, 0],
      prec_used = [0, 0];
     function get_plus(param){plus_used[1] = 1; return plus;}
     function get_hash(param){hash_used[1] = 1; return hash;}
     function get_space(param){space_used[1] = 1; return space;}
     function get_ign(param){ign_used[1] = 1; return ign;}
     function get_pad(param){pad_used[1] = 1; return pad;}
     function get_prec(param){prec_used[1] = 1; return prec;}
     function get_padprec(param){pad_used[1] = 1; return padprec;}
     function get_int_pad(param){
      var pad = get_pad(0), match = get_prec(0);
      if(typeof match === "number" && ! match) return pad;
      if(typeof pad === "number") return 0;
      if(0 !== pad[0])
       return 2 <= pad[1]
               ? legacy_behavior$0
                 ? _H_
                 : incompatible_flag(pct_ind, str_ind, 48, cst_precision$1)
               : pad;
      if(2 > pad[1]) return pad;
      var n = pad[2];
      return legacy_behavior$0
              ? [0, 1, n]
              : incompatible_flag(pct_ind, str_ind, 48, cst_precision$0);
     }
     function check_no_0(symb, pad){
      if(typeof pad === "number") return pad;
      if(0 !== pad[0])
       return 2 <= pad[1]
               ? legacy_behavior$0
                 ? _I_
                 : incompatible_flag(pct_ind, str_ind, symb, cst_0$1)
               : pad;
      if(2 > pad[1]) return pad;
      var width = pad[2];
      return legacy_behavior$0
              ? [0, 1, width]
              : incompatible_flag(pct_ind, str_ind, symb, cst_0$0);
     }
     function opt_of_pad(c, pad){
      if(typeof pad === "number") return 0;
      if(0 === pad[0])
       switch(pad[1]){
         case 0:
          var width = pad[2];
          return legacy_behavior$0
                  ? [0, width]
                  : incompatible_flag(pct_ind, str_ind, c, cst$24);
         case 1:
          var width$0 = pad[2]; return [0, width$0];
         default:
          var width$1 = pad[2];
          return legacy_behavior$0
                  ? [0, width$1]
                  : incompatible_flag(pct_ind, str_ind, c, cst_0$2);
       }
      return incompatible_flag(pct_ind, str_ind, c, cst$25);
     }
     function get_pad_opt(c){return opt_of_pad(c, get_pad(0));}
     function get_padprec_opt(c){return opt_of_pad(c, get_padprec(0));}
     a:
     {
      if(124 > symb)
       switch(symb){
         case 33:
          var
           fmt_rest$5 = parse(str_ind, end_ind)[1],
           fmt_result = [0, [10, fmt_rest$5]];
          break a;
         case 40:
          var
           sub_end = search_subformat_end(str_ind, end_ind, 41),
           fmt_rest$7 = parse(sub_end + 2 | 0, end_ind)[1],
           sub_fmt = parse(str_ind, sub_end)[1],
           sub_fmtty = fmtty_of_fmt(sub_fmt);
          if(get_ign(0))
           var
            ignored$2 = [9, get_pad_opt(95), sub_fmtty],
            _aJ_ = [0, [23, ignored$2, fmt_rest$7]];
          else
           var _aJ_ = [0, [14, get_pad_opt(40), sub_fmtty, fmt_rest$7]];
          var fmt_result = _aJ_;
          break a;
         case 44:
          var fmt_result = parse(str_ind, end_ind); break a;
         case 67:
          var
           fmt_rest$10 = parse(str_ind, end_ind)[1],
           _aL_ =
             get_ign(0) ? [0, [23, 1, fmt_rest$10]] : [0, [1, fmt_rest$10]],
           fmt_result = _aL_;
          break a;
         case 78:
          var fmt_rest$14 = parse(str_ind, end_ind)[1], counter$0 = 2;
          if(get_ign(0))
           var
            ignored$6 = [11, counter$0],
            _aR_ = [0, [23, ignored$6, fmt_rest$14]];
          else
           var _aR_ = [0, [21, counter$0, fmt_rest$14]];
          var fmt_result = _aR_;
          break a;
         case 83:
          var
           pad$6 = check_no_0(symb, get_padprec(0)),
           fmt_rest$15 = parse(str_ind, end_ind)[1];
          if(get_ign(0))
           var
            ignored$7 = [1, get_padprec_opt(95)],
            _aS_ = [0, [23, ignored$7, fmt_rest$15]];
          else
           var
            match$5 = make_padding_fmt_ebb(pad$6, fmt_rest$15),
            fmt_rest$16 = match$5[2],
            pad$7 = match$5[1],
            _aS_ = [0, [3, pad$7, fmt_rest$16]];
          var fmt_result = _aS_;
          break a;
         case 91:
          if(str_ind === end_ind)
           invalid_format_message(end_ind, cst_unexpected_end_of_format);
          var
           char_set = create_char_set(0),
           add_range =
             function(c$0, c){
              if(c >= c$0){
               var i = c$0;
               for(;;){
                add_in_char_set(char_set, caml_call1(Stdlib[29], i));
                var _a$_ = i + 1 | 0;
                if(c === i) break;
                i = _a$_;
               }
              }
              return;
             },
           fail_single_percent =
             function(str_ind){
              return caml_call2(failwith_message(_R_), str, str_ind);
             },
           parse_char_set_content =
             function(counter, str_ind, end_ind){
              var str_ind$0 = str_ind;
              for(;;){
               if(str_ind$0 === end_ind)
                invalid_format_message(end_ind, cst_unexpected_end_of_format);
               var c = caml_string_get(str, str_ind$0);
               if(45 !== c){
                if(93 === c) return str_ind$0 + 1 | 0;
                var _a__ = str_ind$0 + 1 | 0;
                if(counter >= 50)
                 return caml_trampoline_return
                         (parse_char_set_after_char$0, [0, _a__, end_ind, c]);
                var counter$0 = counter + 1 | 0;
                return parse_char_set_after_char$0
                        (counter$0, _a__, end_ind, c);
               }
               add_in_char_set(char_set, 45);
               var str_ind$1 = str_ind$0 + 1 | 0;
               str_ind$0 = str_ind$1;
              }
             },
           parse_char_set_after_char$0 =
             function(counter, str_ind, end_ind, c){
              var str_ind$0 = str_ind, c$0 = c;
              for(;;){
               if(str_ind$0 === end_ind)
                invalid_format_message(end_ind, cst_unexpected_end_of_format);
               var c$1 = caml_string_get(str, str_ind$0);
               a:
               {
                if(46 <= c$1){
                 if(64 !== c$1){
                  if(93 !== c$1) break a;
                  add_in_char_set(char_set, c$0);
                  return str_ind$0 + 1 | 0;
                 }
                }
                else if(37 !== c$1){
                 if(45 > c$1) break a;
                 var str_ind$2 = str_ind$0 + 1 | 0;
                 if(str_ind$2 === end_ind)
                  invalid_format_message
                   (end_ind, cst_unexpected_end_of_format);
                 var c$2 = caml_string_get(str, str_ind$2);
                 if(37 === c$2){
                  if((str_ind$2 + 1 | 0) === end_ind)
                   invalid_format_message
                    (end_ind, cst_unexpected_end_of_format);
                  var c$3 = caml_string_get(str, str_ind$2 + 1 | 0);
                  if(37 !== c$3 && 64 !== c$3)
                   return fail_single_percent(str_ind$2);
                  add_range(c$0, c$3);
                  var _a8_ = str_ind$2 + 2 | 0;
                  if(counter >= 50)
                   return caml_trampoline_return
                           (parse_char_set_content, [0, _a8_, end_ind]);
                  var counter$1 = counter + 1 | 0;
                  return parse_char_set_content(counter$1, _a8_, end_ind);
                 }
                 if(93 === c$2){
                  add_in_char_set(char_set, c$0);
                  add_in_char_set(char_set, 45);
                  return str_ind$2 + 1 | 0;
                 }
                 add_range(c$0, c$2);
                 var _a9_ = str_ind$2 + 1 | 0;
                 if(counter >= 50)
                  return caml_trampoline_return
                          (parse_char_set_content, [0, _a9_, end_ind]);
                 var counter$0 = counter + 1 | 0;
                 return parse_char_set_content(counter$0, _a9_, end_ind);
                }
                if(37 === c$0){
                 add_in_char_set(char_set, c$1);
                 var _a7_ = str_ind$0 + 1 | 0;
                 if(counter >= 50)
                  return caml_trampoline_return
                          (parse_char_set_content, [0, _a7_, end_ind]);
                 var counter$2 = counter + 1 | 0;
                 return parse_char_set_content(counter$2, _a7_, end_ind);
                }
               }
               if(37 === c$0) fail_single_percent(str_ind$0);
               add_in_char_set(char_set, c$0);
               var str_ind$1 = str_ind$0 + 1 | 0;
               str_ind$0 = str_ind$1;
               c$0 = c$1;
              }
             },
           parse_char_set_after_char =
             function(str_ind, end_ind, c){
              return caml_trampoline
                      (parse_char_set_after_char$0(0, str_ind, end_ind, c));
             };
          if(str_ind === end_ind)
           invalid_format_message(end_ind, cst_unexpected_end_of_format);
          if(94 === caml_string_get(str, str_ind))
           var
            str_ind$0 = str_ind + 1 | 0,
            reverse = 1,
            str_ind$1 = str_ind$0;
          else
           var reverse = 0, str_ind$1 = str_ind;
          if(str_ind$1 === end_ind)
           invalid_format_message(end_ind, cst_unexpected_end_of_format);
          var
           c = caml_string_get(str, str_ind$1),
           next_ind = parse_char_set_after_char(str_ind$1 + 1 | 0, end_ind, c),
           char_set$0 = freeze_char_set(char_set),
           char_set$1 = reverse ? rev_char_set(char_set$0) : char_set$0,
           fmt_rest$19 = parse(next_ind, end_ind)[1];
          if(get_ign(0))
           var
            ignored$9 = [10, get_pad_opt(95), char_set$1],
            _aX_ = [0, [23, ignored$9, fmt_rest$19]];
          else
           var _aX_ = [0, [20, get_pad_opt(91), char_set$1, fmt_rest$19]];
          var fmt_result = _aX_;
          break a;
         case 97:
          var
           fmt_rest$20 = parse(str_ind, end_ind)[1],
           fmt_result = [0, [15, fmt_rest$20]];
          break a;
         case 99:
          var
           char_format =
             function(fmt_rest){
              return get_ign(0) ? [0, [23, 0, fmt_rest]] : [0, [0, fmt_rest]];
             },
           fmt_rest$21 = parse(str_ind, end_ind)[1],
           match$7 = get_pad_opt(99);
          if(match$7){
           if(0 === match$7[1])
            var
             _aY_ =
               get_ign(0) ? [0, [23, 3, fmt_rest$21]] : [0, [22, fmt_rest$21]],
             _aZ_ = _aY_;
           else
            var
             _aZ_ =
               legacy_behavior$0
                ? char_format(fmt_rest$21)
                : invalid_format_message
                  (str_ind, cst_non_zero_widths_are_unsupp);
           var _a0_ = _aZ_;
          }
          else
           var _a0_ = char_format(fmt_rest$21);
          var fmt_result = _a0_;
          break a;
         case 114:
          var
           fmt_rest$22 = parse(str_ind, end_ind)[1],
           _a1_ =
             get_ign(0) ? [0, [23, 2, fmt_rest$22]] : [0, [19, fmt_rest$22]],
           fmt_result = _a1_;
          break a;
         case 115:
          var
           pad$9 = check_no_0(symb, get_padprec(0)),
           fmt_rest$23 = parse(str_ind, end_ind)[1];
          if(get_ign(0))
           var
            ignored$10 = [0, get_padprec_opt(95)],
            _a2_ = [0, [23, ignored$10, fmt_rest$23]];
          else
           var
            match$8 = make_padding_fmt_ebb(pad$9, fmt_rest$23),
            fmt_rest$24 = match$8[2],
            pad$10 = match$8[1],
            _a2_ = [0, [2, pad$10, fmt_rest$24]];
          var fmt_result = _a2_;
          break a;
         case 116:
          var
           fmt_rest$25 = parse(str_ind, end_ind)[1],
           fmt_result = [0, [16, fmt_rest$25]];
          break a;
         case 123:
          var
           sub_end$0 = search_subformat_end(str_ind, end_ind, 125),
           sub_fmt$0 = parse(str_ind, sub_end$0)[1],
           fmt_rest$26 = parse(sub_end$0 + 2 | 0, end_ind)[1],
           sub_fmtty$0 = fmtty_of_fmt(sub_fmt$0);
          if(get_ign(0))
           var
            ignored$11 = [8, get_pad_opt(95), sub_fmtty$0],
            _a3_ = [0, [23, ignored$11, fmt_rest$26]];
          else
           var _a3_ = [0, [13, get_pad_opt(123), sub_fmtty$0, fmt_rest$26]];
          var fmt_result = _a3_;
          break a;
         case 66:
         case 98:
          var
           pad$3 = check_no_0(symb, get_padprec(0)),
           fmt_rest$8 = parse(str_ind, end_ind)[1];
          if(get_ign(0))
           var
            ignored$3 = [7, get_padprec_opt(95)],
            _aK_ = [0, [23, ignored$3, fmt_rest$8]];
          else
           var
            match$3 = make_padding_fmt_ebb(pad$3, fmt_rest$8),
            fmt_rest$9 = match$3[2],
            pad$4 = match$3[1],
            _aK_ = [0, [9, pad$4, fmt_rest$9]];
          var fmt_result = _aK_;
          break a;
         case 37:
         case 64:
          var
           fmt_rest$6 = parse(str_ind, end_ind)[1],
           fmt_result = [0, [12, symb, fmt_rest$6]];
          break a;
         case 76:
         case 108:
         case 110:
          if(str_ind !== end_ind){
           var symb$0 = caml_string_get(str, str_ind), _a4_ = symb$0 - 88 | 0;
           b:
           {
            if(32 >= _a4_ >>> 0)
             switch(_a4_){
               case 0:
               case 12:
               case 17:
               case 23:
               case 29:
               case 32:
                var _aQ_ = 1; break b;
             }
            var _aQ_ = 0;
           }
           if(_aQ_) break;
          }
          var fmt_rest$13 = parse(str_ind, end_ind)[1];
          b:
          {
           if(108 <= symb){
            if(111 > symb)
             switch(symb - 108 | 0){
               case 0:
                var counter = 0; break b;
               case 1: break;
               default: var counter = 1; break b;
             }
           }
           else if(76 === symb){var counter = 2; break b;}
           throw caml_maybe_attach_backtrace([0, Assert_failure, _V_], 1);
          }
          if(get_ign(0))
           var
            ignored$5 = [11, counter],
            _aP_ = [0, [23, ignored$5, fmt_rest$13]];
          else
           var _aP_ = [0, [21, counter, fmt_rest$13]];
          var fmt_result = _aP_;
          break a;
         case 32:
         case 35:
         case 43:
         case 45:
         case 95:
          var
           fmt_result = caml_call3(failwith_message(_M_), str, pct_ind, symb);
          break a;
         case 88:
         case 100:
         case 105:
         case 111:
         case 117:
         case 120:
          var
           _aT_ = get_space(0),
           _aU_ = get_hash(0),
           iconv$2 =
             compute_int_conv(pct_ind, str_ind, get_plus(0), _aU_, _aT_, symb),
           fmt_rest$17 = parse(str_ind, end_ind)[1];
          if(get_ign(0))
           var
            ignored$8 = [2, iconv$2, get_pad_opt(95)],
            _aV_ = [0, [23, ignored$8, fmt_rest$17]];
          else
           var
            _aW_ = get_prec(0),
            match$6 = make_padprec_fmt_ebb(get_int_pad(0), _aW_, fmt_rest$17),
            fmt_rest$18 = match$6[3],
            prec$4 = match$6[2],
            pad$8 = match$6[1],
            _aV_ = [0, [4, iconv$2, pad$8, prec$4, fmt_rest$18]];
          var fmt_result = _aV_;
          break a;
         case 69:
         case 70:
         case 71:
         case 72:
         case 101:
         case 102:
         case 103:
         case 104:
          var
           space$1 = get_space(0),
           hash$1 = get_hash(0),
           plus$2 = get_plus(0),
           flag =
             plus$2
              ? space$1
                ? legacy_behavior$0
                  ? 1
                  : incompatible_flag(pct_ind, str_ind, 32, cst$36)
                : 1
              : space$1 ? 2 : 0;
          b:
          {
           c:
           if(73 <= symb){
            var switcher = symb - 101 | 0;
            if(3 >= switcher >>> 0){
             switch(switcher){
               case 0:
                var _a5_ = 1; break;
               case 1:
                var _a5_ = 0; break;
               case 2:
                var _a5_ = 3; break;
               default: var _a5_ = 6;
             }
             var kind = _a5_;
             break b;
            }
           }
           else if(69 <= symb){
            switch(symb - 69 | 0){
              case 0:
               var _a6_ = 2; break;
              case 1:
               break c;
              case 2:
               var _a6_ = 4; break;
              default: var _a6_ = 7;
            }
            var kind = _a6_;
            break b;
           }
           if(hash$1){
            if(70 === symb){var kind = 8; break b;}
           }
           else if(70 === symb){var kind = 5; break b;}
           throw caml_maybe_attach_backtrace([0, Assert_failure, _X_], 1);
          }
          var
           fconv = [0, flag, kind],
           fmt_rest$11 = parse(str_ind, end_ind)[1];
          if(get_ign(0)){
           var match = get_prec(0);
           if(typeof match === "number")
            var
             _aM_ =
               match ? incompatible_flag(pct_ind, str_ind, 95, cst$26) : 0;
           else
            var ndec = match[1], _aM_ = [0, ndec];
           var
            ignored$4 = [6, get_pad_opt(95), _aM_],
            _aN_ = [0, [23, ignored$4, fmt_rest$11]];
          }
          else
           var
            _aO_ = get_prec(0),
            match$4 = make_padprec_fmt_ebb(get_pad(0), _aO_, fmt_rest$11),
            fmt_rest$12 = match$4[3],
            prec$3 = match$4[2],
            pad$5 = match$4[1],
            _aN_ = [0, [8, fconv, pad$5, prec$3, fmt_rest$12]];
          var fmt_result = _aN_;
          break a;
       }
      b:
      if(108 <= symb){
       if(111 > symb){
        switch(symb - 108 | 0){
          case 0:
           var
            _at_ = caml_string_get(str, str_ind),
            _au_ = get_space(0),
            _av_ = get_hash(0),
            iconv =
              compute_int_conv
               (pct_ind, str_ind + 1 | 0, get_plus(0), _av_, _au_, _at_),
            fmt_rest = parse(str_ind + 1 | 0, end_ind)[1];
           if(get_ign(0))
            var
             ignored = [3, iconv, get_pad_opt(95)],
             _aw_ = [0, [23, ignored, fmt_rest]];
           else
            var
             _ay_ = get_prec(0),
             match$0 = make_padprec_fmt_ebb(get_int_pad(0), _ay_, fmt_rest),
             fmt_rest$0 = match$0[3],
             prec$0 = match$0[2],
             pad$0 = match$0[1],
             _aw_ = [0, [5, iconv, pad$0, prec$0, fmt_rest$0]];
           var _ax_ = _aw_;
           break;
          case 1:
           break b;
          default:
           var
            _az_ = caml_string_get(str, str_ind),
            _aA_ = get_space(0),
            _aB_ = get_hash(0),
            iconv$0 =
              compute_int_conv
               (pct_ind, str_ind + 1 | 0, get_plus(0), _aB_, _aA_, _az_),
            fmt_rest$1 = parse(str_ind + 1 | 0, end_ind)[1];
           if(get_ign(0))
            var
             ignored$0 = [4, iconv$0, get_pad_opt(95)],
             _aC_ = [0, [23, ignored$0, fmt_rest$1]];
           else
            var
             _aD_ = get_prec(0),
             match$1 = make_padprec_fmt_ebb(get_int_pad(0), _aD_, fmt_rest$1),
             fmt_rest$2 = match$1[3],
             prec$1 = match$1[2],
             pad$1 = match$1[1],
             _aC_ = [0, [6, iconv$0, pad$1, prec$1, fmt_rest$2]];
           var _ax_ = _aC_;
        }
        var fmt_result = _ax_;
        break a;
       }
      }
      else if(76 === symb){
       var
        _aE_ = caml_string_get(str, str_ind),
        _aF_ = get_space(0),
        _aG_ = get_hash(0),
        iconv$1 =
          compute_int_conv
           (pct_ind, str_ind + 1 | 0, get_plus(0), _aG_, _aF_, _aE_),
        fmt_rest$3 = parse(str_ind + 1 | 0, end_ind)[1];
       if(get_ign(0))
        var
         ignored$1 = [5, iconv$1, get_pad_opt(95)],
         _aH_ = [0, [23, ignored$1, fmt_rest$3]];
       else
        var
         _aI_ = get_prec(0),
         match$2 = make_padprec_fmt_ebb(get_int_pad(0), _aI_, fmt_rest$3),
         fmt_rest$4 = match$2[3],
         prec$2 = match$2[2],
         pad$2 = match$2[1],
         _aH_ = [0, [7, iconv$1, pad$2, prec$2, fmt_rest$4]];
       var fmt_result = _aH_;
       break a;
      }
      var
       fmt_result =
         caml_call3(failwith_message(_J_), str, str_ind - 1 | 0, symb);
     }
     if(1 - legacy_behavior$0){
      var _ak_ = 1 - plus_used[1], plus$0 = _ak_ ? plus : _ak_;
      if(plus$0) incompatible_flag(pct_ind, str_ind, symb, cst$27);
      var _al_ = 1 - hash_used[1], hash$0 = _al_ ? hash : _al_;
      if(hash$0) incompatible_flag(pct_ind, str_ind, symb, cst$28);
      var _am_ = 1 - space_used[1], space$0 = _am_ ? space : _am_;
      if(space$0) incompatible_flag(pct_ind, str_ind, symb, cst$29);
      var
       _an_ = 1 - pad_used[1],
       _ao_ = _an_ ? caml_notequal([0, pad], _K_) : _an_;
      if(_ao_) incompatible_flag(pct_ind, str_ind, symb, cst_padding$0);
      var
       _ap_ = 1 - prec_used[1],
       _aq_ = _ap_ ? caml_notequal([0, prec], _L_) : _ap_;
      if(_aq_){
       var _ar_ = ign ? 95 : symb;
       incompatible_flag(pct_ind, str_ind, _ar_, cst_precision$2);
      }
      var plus$1 = ign ? plus : ign;
      if(plus$1) incompatible_flag(pct_ind, str_ind, 95, cst$30);
     }
     var _as_ = 1 - ign_used[1], ign$0 = _as_ ? ign : _as_;
     a:
     if(ign$0){
      b:
      {
       if(38 <= symb){
        if(44 !== symb && 64 !== symb) break b;
       }
       else if(33 !== symb && 37 > symb) break b;
       if(legacy_behavior$0) break a;
      }
      incompatible_flag(pct_ind, str_ind, symb, cst$31);
     }
     return fmt_result;
    }
    function parse_tag(is_open_tag, str_ind, end_ind){
     try{
      if(str_ind === end_ind) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
      if(60 !== caml_string_get(str, str_ind))
       throw caml_maybe_attach_backtrace(Stdlib[8], 1);
      var ind = caml_call3(Stdlib_String[31], str, str_ind + 1 | 0, 62);
      if(end_ind <= ind) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
      var
       sub_str =
         caml_call3
          (Stdlib_String[15], str, str_ind, (ind - str_ind | 0) + 1 | 0),
       fmt_rest$0 = parse(ind + 1 | 0, end_ind)[1],
       sub_fmt = parse(str_ind, ind + 1 | 0)[1],
       sub_format$0 = [0, sub_fmt, sub_str],
       formatting$0 = is_open_tag ? [0, sub_format$0] : [1, sub_format$0],
       _ai_ = [0, [18, formatting$0, fmt_rest$0]];
      return _ai_;
     }
     catch(_aj_){
      var _ah_ = caml_wrap_exception(_aj_);
      if(_ah_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_ah_, 0);
      var
       fmt_rest = parse(str_ind, end_ind)[1],
       formatting = is_open_tag ? [0, sub_format] : [1, sub_format];
      return [0, [18, formatting, fmt_rest]];
     }
    }
    function parse_spaces(str_ind, end_ind){
     var str_ind$0 = str_ind;
     for(;;){
      if(str_ind$0 === end_ind)
       invalid_format_message(end_ind, cst_unexpected_end_of_format);
      if(32 !== caml_string_get(str, str_ind$0)) return str_ind$0;
      var str_ind$1 = str_ind$0 + 1 | 0;
      str_ind$0 = str_ind$1;
     }
    }
    function parse_positive(str_ind, end_ind, acc){
     var str_ind$0 = str_ind, acc$0 = acc;
     for(;;){
      if(str_ind$0 === end_ind)
       invalid_format_message(end_ind, cst_unexpected_end_of_format);
      var c = caml_string_get(str, str_ind$0);
      if(9 < c - 48 >>> 0) return [0, str_ind$0, acc$0];
      var new_acc = (acc$0 * 10 | 0) + (c - 48 | 0) | 0;
      if(Stdlib_Sys[12] < new_acc){
       var _ag_ = Stdlib_Sys[12];
       return caml_call3(failwith_message(_S_), str, new_acc, _ag_);
      }
      var str_ind$1 = str_ind$0 + 1 | 0;
      str_ind$0 = str_ind$1;
      acc$0 = new_acc;
     }
    }
    function parse_integer(str_ind, end_ind){
     if(str_ind === end_ind)
      invalid_format_message(end_ind, cst_unexpected_end_of_format);
     var match = caml_string_get(str, str_ind);
     if(48 <= match){
      if(58 > match) return parse_positive(str_ind, end_ind, 0);
     }
     else if(45 === match){
      if((str_ind + 1 | 0) === end_ind)
       invalid_format_message(end_ind, cst_unexpected_end_of_format);
      var c = caml_string_get(str, str_ind + 1 | 0);
      if(9 < c - 48 >>> 0)
       return expected_character(str_ind + 1 | 0, cst_digit, c);
      var
       match$0 = parse_positive(str_ind + 1 | 0, end_ind, 0),
       n = match$0[2],
       next_ind = match$0[1];
      return [0, next_ind, - n | 0];
     }
     throw caml_maybe_attach_backtrace([0, Assert_failure, _T_], 1);
    }
    function add_literal(lit_start, str_ind, fmt){
     var size = str_ind - lit_start | 0;
     return 0 === size
             ? [0, fmt]
             : 1
               === size
               ? [0, [12, caml_string_get(str, lit_start), fmt]]
               : [0,
                 [11,
                  caml_call3(Stdlib_String[15], str, lit_start, size),
                  fmt]];
    }
    function search_subformat_end(str_ind, end_ind, c){
     var str_ind$0 = str_ind;
     for(;;){
      if(str_ind$0 === end_ind)
       caml_call3(failwith_message(_U_), str, c, end_ind);
      if(37 === caml_string_get(str, str_ind$0)){
       if((str_ind$0 + 1 | 0) === end_ind)
        invalid_format_message(end_ind, cst_unexpected_end_of_format);
       if(caml_string_get(str, str_ind$0 + 1 | 0) === c) return str_ind$0;
       var match = caml_string_get(str, str_ind$0 + 1 | 0);
       if(95 <= match){
        if(123 <= match){
         if(126 > match)
          switch(match - 123 | 0){
            case 0:
             var
              sub_end = search_subformat_end(str_ind$0 + 2 | 0, end_ind, 125),
              str_ind$2 = sub_end + 2 | 0;
             str_ind$0 = str_ind$2;
             continue;
            case 1: break;
            default:
             return expected_character(str_ind$0 + 1 | 0, cst_character, 125);
          }
        }
        else if(96 > match){
         if((str_ind$0 + 2 | 0) === end_ind)
          invalid_format_message(end_ind, cst_unexpected_end_of_format);
         var match$0 = caml_string_get(str, str_ind$0 + 2 | 0);
         if(40 === match$0){
          var
           sub_end$0 = search_subformat_end(str_ind$0 + 3 | 0, end_ind, 41),
           str_ind$3 = sub_end$0 + 2 | 0;
          str_ind$0 = str_ind$3;
          continue;
         }
         if(123 === match$0){
          var
           sub_end$1 = search_subformat_end(str_ind$0 + 3 | 0, end_ind, 125),
           str_ind$4 = sub_end$1 + 2 | 0;
          str_ind$0 = str_ind$4;
          continue;
         }
         var str_ind$5 = str_ind$0 + 3 | 0;
         str_ind$0 = str_ind$5;
         continue;
        }
       }
       else{
        if(40 === match){
         var
          sub_end$2 = search_subformat_end(str_ind$0 + 2 | 0, end_ind, 41),
          str_ind$6 = sub_end$2 + 2 | 0;
         str_ind$0 = str_ind$6;
         continue;
        }
        if(41 === match)
         return expected_character(str_ind$0 + 1 | 0, cst_character$0, 41);
       }
       var str_ind$1 = str_ind$0 + 2 | 0;
       str_ind$0 = str_ind$1;
      }
      else{var str_ind$7 = str_ind$0 + 1 | 0; str_ind$0 = str_ind$7;}
     }
    }
    function compute_int_conv(pct_ind, str_ind, plus, hash, space, symb){
     var plus$0 = plus, hash$0 = hash, space$0 = space;
     for(;;){
      a:
      {
       if(plus$0){
        if(! hash$0){
         if(space$0) break a;
         if(100 === symb) return 1;
         if(105 === symb) return 4;
         break a;
        }
       }
       else{
        if(! hash$0){
         if(space$0){
          if(100 === symb) return 2;
          if(105 === symb) return 5;
          break a;
         }
         var switcher$1 = symb - 88 | 0;
         if(32 < switcher$1 >>> 0) break a;
         switch(switcher$1){
           case 0:
            return 8;
           case 12:
            return 0;
           case 17:
            return 3;
           case 23:
            return 10;
           case 29:
            return 12;
           case 32:
            return 6;
           default: break a;
         }
        }
        if(! space$0){
         var switcher$0 = symb - 88 | 0;
         if(32 >= switcher$0 >>> 0)
          switch(switcher$0){
            case 0:
             return 9;
            case 12:
             return 13;
            case 17:
             return 14;
            case 23:
             return 11;
            case 29:
             return 15;
            case 32:
             return 7;
          }
        }
       }
       var switcher = symb - 88 | 0;
       if(32 >= switcher >>> 0)
        switch(switcher){
          case 0:
           if(legacy_behavior$0) return 9; break;
          case 23:
           if(legacy_behavior$0) return 11; break;
          case 32:
           if(legacy_behavior$0) return 7; break;
          case 12:
          case 17:
          case 29:
           if(! legacy_behavior$0)
            return incompatible_flag(pct_ind, str_ind, symb, cst$35);
           hash$0 = 0;
           continue;
        }
      }
      if(plus$0)
       if(space$0){
        if(! legacy_behavior$0)
         return incompatible_flag(pct_ind, str_ind, 32, cst$32);
        space$0 = 0;
       }
       else{
        if(! legacy_behavior$0)
         return incompatible_flag(pct_ind, str_ind, symb, cst$33);
        plus$0 = 0;
       }
      else{
       if(! space$0)
        throw caml_maybe_attach_backtrace([0, Assert_failure, _W_], 1);
       if(! legacy_behavior$0)
        return incompatible_flag(pct_ind, str_ind, symb, cst$34);
       space$0 = 0;
      }
     }
    }
    function incompatible_flag(pct_ind, str_ind, symb, option){
     var
      subfmt =
        caml_call3(Stdlib_String[15], str, pct_ind, str_ind - pct_ind | 0);
     return caml_call5
             (failwith_message(_Y_), str, pct_ind, option, symb, subfmt);
    }
    return parse(0, caml_ml_string_length(str));
   }
   function format_of_string_fmtty(str, fmtty){
    var fmt = fmt_ebb_of_string(0, str)[1];
    try{var _ae_ = [0, type_format(fmt, fmtty), str]; return _ae_;}
    catch(_af_){
     var _ac_ = caml_wrap_exception(_af_);
     if(_ac_ !== Type_mismatch) throw caml_maybe_attach_backtrace(_ac_, 0);
     var _ad_ = string_of_fmtty(fmtty);
     return caml_call2(failwith_message(_Z_), str, _ad_);
    }
   }
   function format_of_string_format(str, param){
    var
     str$0 = param[2],
     fmt = param[1],
     fmt$0 = fmt_ebb_of_string(0, str)[1];
    try{
     var _aa_ = [0, type_format(fmt$0, fmtty_of_fmt(fmt)), str];
     return _aa_;
    }
    catch(_ab_){
     var _$_ = caml_wrap_exception(_ab_);
     if(_$_ === Type_mismatch)
      return caml_call2(failwith_message(___), str, str$0);
     throw caml_maybe_attach_backtrace(_$_, 0);
    }
   }
   var
    CamlinternalFormat =
      [0,
       is_in_char_set,
       rev_char_set,
       create_char_set,
       add_in_char_set,
       freeze_char_set,
       param_format_of_ignored_format,
       make_printf,
       make_iprintf,
       output_acc,
       bufput_acc,
       strput_acc,
       type_format,
       fmt_ebb_of_string,
       format_of_string_fmtty,
       format_of_string_format,
       char_of_iconv,
       string_of_formatting_lit,
       string_of_fmtty,
       string_of_fmt,
       open_box_of_string,
       symm,
       trans,
       recast];
   runtime.caml_register_global(197, CamlinternalFormat, "CamlinternalFormat");
   return;
  }
  (globalThis));

//# 15834 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    CamlinternalFormat = global_data.CamlinternalFormat,
    Stdlib = global_data.Stdlib;
   function kfprintf(k, o, param){
    var fmt = param[1];
    return caml_call3
            (CamlinternalFormat[7],
             function(acc){
              caml_call2(CamlinternalFormat[9], o, acc);
              return caml_call1(k, o);
             },
             0,
             fmt);
   }
   function kbprintf(k, b, param){
    var fmt = param[1];
    return caml_call3
            (CamlinternalFormat[7],
             function(acc){
              caml_call2(CamlinternalFormat[10], b, acc);
              return caml_call1(k, b);
             },
             0,
             fmt);
   }
   function ikfprintf(k, oc, param){
    var fmt = param[1];
    return caml_call3(CamlinternalFormat[8], k, oc, fmt);
   }
   function fprintf(oc, fmt){
    return kfprintf(function(_d_){return 0;}, oc, fmt);
   }
   function bprintf(b, fmt){
    return kbprintf(function(_c_){return 0;}, b, fmt);
   }
   function ifprintf(oc, fmt){
    return ikfprintf(function(_b_){return 0;}, oc, fmt);
   }
   function ibprintf(b, fmt){
    return ikfprintf(function(_a_){return 0;}, b, fmt);
   }
   function printf(fmt){return fprintf(Stdlib[39], fmt);}
   function eprintf(fmt){return fprintf(Stdlib[40], fmt);}
   function ksprintf(k, param){
    var fmt = param[1];
    function k$0(acc){
     var buf = caml_call1(Stdlib_Buffer[1], 64);
     caml_call2(CamlinternalFormat[11], buf, acc);
     return caml_call1(k, caml_call1(Stdlib_Buffer[2], buf));
    }
    return caml_call3(CamlinternalFormat[7], k$0, 0, fmt);
   }
   function sprintf(fmt){return ksprintf(function(s){return s;}, fmt);}
   var
    Stdlib_Printf =
      [0,
       fprintf,
       printf,
       eprintf,
       sprintf,
       bprintf,
       ifprintf,
       ibprintf,
       kfprintf,
       ikfprintf,
       ksprintf,
       kbprintf,
       ikfprintf,
       ksprintf];
   runtime.caml_register_global(3, Stdlib_Printf, "Stdlib__Printf");
   return;
  }
  (globalThis));

//# 16644 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    CamlinternalAtomic = global_data.CamlinternalAtomic,
    make = CamlinternalAtomic[1],
    get = CamlinternalAtomic[2],
    set = CamlinternalAtomic[3],
    exchange = CamlinternalAtomic[4],
    compare_and_set = CamlinternalAtomic[5],
    fetch_and_add = CamlinternalAtomic[6],
    incr = CamlinternalAtomic[7],
    decr = CamlinternalAtomic[8],
    Stdlib_Atomic =
      [0,
       make,
       get,
       set,
       exchange,
       compare_and_set,
       fetch_and_add,
       incr,
       decr];
   runtime.caml_register_global(1, Stdlib_Atomic, "Stdlib__Atomic");
   return;
  }
  (globalThis));

//# 16676 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$4 = "",
    cst_s = "%s\n",
    cst_Program_not_linked_with_g_$0 =
      "(Program not linked with -g, cannot print stack backtrace)\n",
    cst_characters = ", characters ",
    cst_Fatal_error_exception = "Fatal error: exception ",
    cst_Fatal_error_exception_s = "Fatal error: exception %s\n",
    cst_Uncaught_exception = "Uncaught exception: ",
    cst_Uncaught_exception_s = "Uncaught exception: %s\n",
    caml_check_bound = runtime.caml_check_bound,
    caml_get_exception_raw_backtra = runtime.caml_get_exception_raw_backtrace,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$4,
    cst$3 = cst$4,
    partial = [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, 0]]],
    cst$1 = cst$4,
    cst$2 = cst$4,
    cst = "_",
    locfmt =
      [0,
       [11,
        'File "',
        [2,
         0,
         [11,
          '", line ',
          [4,
           0,
           0,
           0,
           [11,
            cst_characters,
            [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, [11, ": ", [2, 0, 0]]]]]]]]]],
       'File "%s", line %d, characters %d-%d: %s'],
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Atomic = global_data.Stdlib__Atomic,
    Stdlib = global_data.Stdlib,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_Obj = global_data.Stdlib__Obj,
    printers = caml_call1(Stdlib_Atomic[1], 0),
    _a_ = [0, [3, 0, 0], "%S"],
    _b_ = [0, [4, 0, 0, 0, 0], "%d"],
    _c_ = [0, [11, ", ", [2, 0, [2, 0, 0]]], ", %s%s"],
    _d_ = [0, [12, 40, [2, 0, [2, 0, [12, 41, 0]]]], "(%s%s)"],
    _e_ = [0, [12, 40, [2, 0, [12, 41, 0]]], "(%s)"],
    cst_Out_of_memory = "Out of memory",
    cst_Stack_overflow = "Stack overflow",
    cst_Pattern_matching_failed = "Pattern matching failed",
    cst_Assertion_failed = "Assertion failed",
    cst_Undefined_recursive_module = "Undefined recursive module",
    _f_ =
      [0,
       [11, cst_Uncaught_exception, [2, 0, [12, 10, 0]]],
       cst_Uncaught_exception_s],
    _g_ =
      [0,
       [11, cst_Uncaught_exception, [2, 0, [12, 10, 0]]],
       cst_Uncaught_exception_s],
    cst_Raised_at = "Raised at",
    cst_Re_raised_at = "Re-raised at",
    cst_Raised_by_primitive_operat = "Raised by primitive operation at",
    cst_Called_from = "Called from",
    cst_inlined = " (inlined)",
    _h_ =
      [0,
       [2,
        0,
        [12,
         32,
         [2,
          0,
          [11,
           ' in file "',
           [2,
            0,
            [12,
             34,
             [2,
              0,
              [11, ", line ", [4, 0, 0, 0, [11, cst_characters, partial]]]]]]]]]],
       '%s %s in file "%s"%s, line %d, characters %d-%d'],
    _i_ = [0, [2, 0, [11, " unknown location", 0]], "%s unknown location"],
    _j_ = [0, [2, 0, [12, 10, 0]], cst_s],
    _k_ =
      [0,
       [11, cst_Program_not_linked_with_g_$0, 0],
       cst_Program_not_linked_with_g_$0],
    _l_ = [0, [2, 0, [12, 10, 0]], cst_s],
    cst_Program_not_linked_with_g_ = cst_Program_not_linked_with_g_$0;
   function field(x, i){
    var f = x[1 + i];
    if(! caml_call1(Stdlib_Obj[1], f))
     return caml_call2(Stdlib_Printf[4], _b_, f);
    var _ag_ = Stdlib_Obj[13];
    if(caml_obj_tag(f) === _ag_) return caml_call2(Stdlib_Printf[4], _a_, f);
    var _ah_ = Stdlib_Obj[14];
    return caml_obj_tag(f) === _ah_ ? caml_call1(Stdlib[35], f) : cst;
   }
   function other_fields(x, i){
    if(x.length - 1 <= i) return cst$0;
    var _ae_ = other_fields(x, i + 1 | 0), _af_ = field(x, i);
    return caml_call3(Stdlib_Printf[4], _c_, _af_, _ae_);
   }
   function use_printers(x){
    var param = caml_call1(Stdlib_Atomic[2], printers);
    for(;;){
     if(! param) return 0;
     var tl = param[2], hd = param[1];
     a:
     {
      try{var val = caml_call1(hd, x);}catch(_ad_){break a;}
      if(val){var s = val[1]; return [0, s];}
     }
     param = tl;
    }
   }
   function to_string_default(x){
    if(x === Stdlib[9]) return cst_Out_of_memory;
    if(x === Stdlib[10]) return cst_Stack_overflow;
    if(x[1] === Stdlib[4]){
     var
      match$0 = x[2],
      char$0 = match$0[3],
      line = match$0[2],
      file = match$0[1];
     return caml_call6
             (Stdlib_Printf[4],
              locfmt,
              file,
              line,
              char$0,
              char$0 + 5 | 0,
              cst_Pattern_matching_failed);
    }
    if(x[1] === Stdlib[5]){
     var
      match$1 = x[2],
      char$1 = match$1[3],
      line$0 = match$1[2],
      file$0 = match$1[1];
     return caml_call6
             (Stdlib_Printf[4],
              locfmt,
              file$0,
              line$0,
              char$1,
              char$1 + 6 | 0,
              cst_Assertion_failed);
    }
    if(x[1] === Stdlib[15]){
     var
      match$2 = x[2],
      char$2 = match$2[3],
      line$1 = match$2[2],
      file$1 = match$2[1];
     return caml_call6
             (Stdlib_Printf[4],
              locfmt,
              file$1,
              line$1,
              char$2,
              char$2 + 6 | 0,
              cst_Undefined_recursive_module);
    }
    if(0 !== caml_obj_tag(x)) return x[1];
    var constructor = x[1][1], match = x.length - 1;
    if(2 < match >>> 0)
     var
      _$_ = other_fields(x, 2),
      _aa_ = field(x, 1),
      _ac_ = caml_call3(Stdlib_Printf[4], _d_, _aa_, _$_);
    else
     switch(match){
       case 0:
        var _ac_ = cst$1; break;
       case 1:
        var _ac_ = cst$2; break;
       default:
        var
         _ab_ = field(x, 1),
         _ac_ = caml_call2(Stdlib_Printf[4], _e_, _ab_);
     }
    return caml_call2(Stdlib[28], constructor, _ac_);
   }
   function to_string(e){
    var match = use_printers(e);
    if(! match) return to_string_default(e);
    var s = match[1];
    return s;
   }
   function print(fct, arg){
    try{var ___ = caml_call1(fct, arg); return ___;}
    catch(x$0){
     var x = caml_wrap_exception(x$0), _Z_ = to_string(x);
     caml_call2(Stdlib_Printf[3], _f_, _Z_);
     caml_call1(Stdlib[63], Stdlib[40]);
     throw caml_maybe_attach_backtrace(x, 0);
    }
   }
   function catch$0(fct, arg){
    try{var _Y_ = caml_call1(fct, arg); return _Y_;}
    catch(x$0){
     var x = caml_wrap_exception(x$0);
     caml_call1(Stdlib[63], Stdlib[39]);
     var _X_ = to_string(x);
     caml_call2(Stdlib_Printf[3], _g_, _X_);
     return caml_call1(Stdlib[99], 2);
    }
   }
   function raw_backtrace_entries(bt){return bt;}
   function convert_raw_backtrace(bt){
    return [0, runtime.caml_convert_raw_backtrace(bt)];
   }
   function format_backtrace_slot(pos, slot){
    function info(is_raise){
     return is_raise
             ? 0 === pos ? cst_Raised_at : cst_Re_raised_at
             : 0 === pos ? cst_Raised_by_primitive_operat : cst_Called_from;
    }
    if(0 === slot[0]){
     var
      _P_ = slot[5],
      _Q_ = slot[4],
      _R_ = slot[3],
      _S_ = slot[6] ? cst_inlined : cst$3,
      _T_ = slot[2],
      _U_ = slot[7],
      _V_ = info(slot[1]);
     return [0,
             caml_call8
              (Stdlib_Printf[4], _h_, _V_, _U_, _T_, _S_, _R_, _Q_, _P_)];
    }
    if(slot[1]) return 0;
    var _W_ = info(0);
    return [0, caml_call2(Stdlib_Printf[4], _i_, _W_)];
   }
   function print_raw_backtrace(outchan, raw_backtrace){
    var backtrace = convert_raw_backtrace(raw_backtrace);
    if(! backtrace) return caml_call2(Stdlib_Printf[1], outchan, _k_);
    var a = backtrace[1], _N_ = a.length - 2 | 0, _M_ = 0;
    if(_N_ >= 0){
     var i = _M_;
     for(;;){
      var match = format_backtrace_slot(i, caml_check_bound(a, i)[1 + i]);
      if(match){
       var str = match[1];
       caml_call3(Stdlib_Printf[1], outchan, _j_, str);
      }
      var _O_ = i + 1 | 0;
      if(_N_ === i) break;
      i = _O_;
     }
    }
    return 0;
   }
   function print_backtrace(outchan){
    return print_raw_backtrace(outchan, caml_get_exception_raw_backtra(0));
   }
   function raw_backtrace_to_string(raw_backtrace){
    var backtrace = convert_raw_backtrace(raw_backtrace);
    if(! backtrace) return cst_Program_not_linked_with_g_;
    var
     a = backtrace[1],
     b = caml_call1(Stdlib_Buffer[1], 1024),
     _K_ = a.length - 2 | 0,
     _J_ = 0;
    if(_K_ >= 0){
     var i = _J_;
     for(;;){
      var match = format_backtrace_slot(i, caml_check_bound(a, i)[1 + i]);
      if(match){
       var str = match[1];
       caml_call3(Stdlib_Printf[5], b, _l_, str);
      }
      var _L_ = i + 1 | 0;
      if(_K_ === i) break;
      i = _L_;
     }
    }
    return caml_call1(Stdlib_Buffer[2], b);
   }
   function backtrace_slot_is_raise(param){
    return 0 === param[0] ? param[1] : param[1];
   }
   function backtrace_slot_is_inline(param){return 0 === param[0] ? param[6] : 0;
   }
   function backtrace_slot_location(param){
    return 0 === param[0]
            ? [0, [0, param[2], param[3], param[4], param[5]]]
            : 0;
   }
   function backtrace_slot_defname(param){
    if(0 === param[0] && param[7] !== cst$4) return [0, param[7]];
    return 0;
   }
   function backtrace_slots(raw_backtrace){
    var match = convert_raw_backtrace(raw_backtrace);
    if(! match) return 0;
    var backtrace = match[1], i$1 = backtrace.length - 2 | 0, i = i$1;
    for(;;){
     if(-1 === i)
      var _I_ = 0;
     else{
      var _H_ = 0 === caml_check_bound(backtrace, i)[1 + i][0] ? 1 : 0;
      if(! _H_){var i$0 = i - 1 | 0; i = i$0; continue;}
      var _I_ = _H_;
     }
     return _I_ ? [0, backtrace] : 0;
    }
   }
   function backtrace_slots_of_raw_entry(entry){return backtrace_slots([0, entry]);
   }
   function raw_backtrace_length(bt){return bt.length - 1;}
   function get_backtrace(param){
    return raw_backtrace_to_string(caml_get_exception_raw_backtra(0));
   }
   function register_printer(fn){
    for(;;){
     var
      old_printers = caml_call1(Stdlib_Atomic[2], printers),
      new_printers = [0, fn, old_printers],
      success =
        caml_call3(Stdlib_Atomic[5], printers, old_printers, new_printers),
      _G_ = 1 - success;
     if(! _G_) return _G_;
    }
   }
   function exn_slot(x){return 0 === caml_obj_tag(x) ? x[1] : x;}
   function exn_slot_id(x){var slot = exn_slot(x); return slot[2];}
   function exn_slot_name(x){var slot = exn_slot(x); return slot[1];}
   var
    errors =
      [0,
        cst$4,
        "(Cannot print locations:\n bytecode executable program file not found)",
        "(Cannot print locations:\n bytecode executable program file appears to be corrupt)",
        "(Cannot print locations:\n bytecode executable program file has wrong magic number)",
        "(Cannot print locations:\n bytecode executable program file cannot be opened;\n -- too many open files. Try running with OCAMLRUNPARAM=b=2)"].slice
       (),
    _m_ =
      [0,
       [11, cst_Fatal_error_exception, [2, 0, [12, 10, 0]]],
       cst_Fatal_error_exception_s];
   function default_uncaught_exception_han(exn, raw_backtrace){
    var _D_ = to_string(exn);
    caml_call2(Stdlib_Printf[3], _m_, _D_);
    print_raw_backtrace(Stdlib[40], raw_backtrace);
    var status = runtime.caml_ml_debug_info_status(0);
    if(status < 0){
     var
      _E_ = caml_call1(Stdlib[18], status),
      _F_ = caml_check_bound(errors, _E_)[1 + _E_];
     caml_call1(Stdlib[53], _F_);
    }
    return caml_call1(Stdlib[63], Stdlib[40]);
   }
   var uncaught_exception_handler = [0, default_uncaught_exception_han];
   function set_uncaught_exception_handler(fn){
    uncaught_exception_handler[1] = fn;
    return 0;
   }
   var
    empty_backtrace = [0],
    cst_Fatal_error_out_of_memory_ =
      "Fatal error: out of memory in uncaught exception handler",
    _n_ =
      [0,
       [11, cst_Fatal_error_exception, [2, 0, [12, 10, 0]]],
       cst_Fatal_error_exception_s],
    _o_ =
      [0,
       [11,
        "Fatal error in uncaught exception handler: exception ",
        [2, 0, [12, 10, 0]]],
       "Fatal error in uncaught exception handler: exception %s\n"];
   function handle_uncaught_exception(exn$0, debugger_in_use){
    try{
     try{
      var
       raw_backtrace =
         debugger_in_use ? empty_backtrace : caml_get_exception_raw_backtra(0);
      try{caml_call1(Stdlib[103], 0);}catch(_C_){}
      try{
       var
        _y_ = caml_call2(uncaught_exception_handler[1], exn$0, raw_backtrace),
        _x_ = _y_;
      }
      catch(exn$1){
       var
        exn = caml_wrap_exception(exn$1),
        raw_backtrace$0 = caml_get_exception_raw_backtra(0),
        _v_ = to_string(exn$0);
       caml_call2(Stdlib_Printf[3], _n_, _v_);
       print_raw_backtrace(Stdlib[40], raw_backtrace);
       var _w_ = to_string(exn);
       caml_call2(Stdlib_Printf[3], _o_, _w_);
       print_raw_backtrace(Stdlib[40], raw_backtrace$0);
       var _x_ = caml_call1(Stdlib[63], Stdlib[40]);
      }
      var _z_ = _x_;
     }
     catch(_B_){
      var _u_ = caml_wrap_exception(_B_);
      if(_u_ !== Stdlib[9]) throw caml_maybe_attach_backtrace(_u_, 0);
      var _z_ = caml_call1(Stdlib[53], cst_Fatal_error_out_of_memory_);
     }
     return _z_;
    }
    catch(_A_){return 0;}
   }
   runtime.caml_register_named_value
    ("Printexc.handle_uncaught_exception", handle_uncaught_exception);
   var
    Stdlib_Printexc =
      [0,
       to_string,
       to_string_default,
       print,
       catch$0,
       print_backtrace,
       get_backtrace,
       runtime.caml_record_backtrace,
       runtime.caml_backtrace_status,
       register_printer,
       use_printers,
       raw_backtrace_entries,
       function(_t_){return caml_get_exception_raw_backtra(_t_);},
       print_raw_backtrace,
       raw_backtrace_to_string,
       default_uncaught_exception_han,
       set_uncaught_exception_handler,
       backtrace_slots,
       backtrace_slots_of_raw_entry,
       [0,
        backtrace_slot_is_raise,
        backtrace_slot_is_inline,
        backtrace_slot_location,
        backtrace_slot_defname,
        format_backtrace_slot],
       raw_backtrace_length,
       function(_s_, _r_){return runtime.caml_raw_backtrace_slot(_s_, _r_);},
       function(_q_){return runtime.caml_convert_raw_backtrace_slot(_q_);},
       function(_p_){return runtime.caml_raw_backtrace_next_slot(_p_);},
       exn_slot_id,
       exn_slot_name];
   runtime.caml_register_global(42, Stdlib_Printexc, "Stdlib__Printexc");
   return;
  }
  (globalThis));

//# 17162 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_restore_raw_backtrace = runtime.caml_restore_raw_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Stdlib = global_data.Stdlib;
   function const$0(c, param){return c;}
   function flip(f, x, y){return caml_call2(f, y, x);}
   function negate(p, v){return 1 - caml_call1(p, v);}
   var
    Finally_raised =
      [248, "Stdlib.Fun.Finally_raised", runtime.caml_fresh_oo_id(0)],
    cst_Fun_Finally_raised = "Fun.Finally_raised: ";
   caml_call1
    (Stdlib_Printexc[9],
     function(param){
      if(param[1] !== Finally_raised) return 0;
      var exn = param[2], _a_ = caml_call1(Stdlib_Printexc[1], exn);
      return [0, caml_call2(Stdlib[28], cst_Fun_Finally_raised, _a_)];
     });
   function protect(finally$0, work){
    function finally_no_exn(param){
     try{caml_call1(finally$0, 0); return;}
     catch(e$0){
      var
       e = caml_wrap_exception(e$0),
       bt = caml_call1(Stdlib_Printexc[12], 0),
       exn = [0, Finally_raised, e];
      caml_restore_raw_backtrace(exn, bt);
      throw caml_maybe_attach_backtrace(exn, 0);
     }
    }
    try{var result = caml_call1(work, 0);}
    catch(work_exn$0){
     var
      work_exn = caml_wrap_exception(work_exn$0),
      work_bt = caml_call1(Stdlib_Printexc[12], 0);
     finally_no_exn(0);
     caml_restore_raw_backtrace(work_exn, work_bt);
     throw caml_maybe_attach_backtrace(work_exn, 0);
    }
    finally_no_exn(0);
    return result;
   }
   var Stdlib_Fun = [0, const$0, flip, negate, protect, Finally_raised];
   runtime.caml_register_global(4, Stdlib_Fun, "Stdlib__Fun");
   return;
  }
  (globalThis));

//# 17394 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Digest_from_hex$1 = "Digest.from_hex",
    caml_bytes_unsafe_set = runtime.caml_bytes_unsafe_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_md5_string = runtime.caml_md5_string,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Char = global_data.Stdlib__Char,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_String = global_data.Stdlib__String,
    compare = Stdlib_String[9],
    equal = Stdlib_String[8],
    cst_Digest_substring = "Digest.substring",
    cst_Digest_to_hex = "Digest.to_hex",
    cst_Digest_from_hex = cst_Digest_from_hex$1,
    cst_Digest_from_hex$0 = cst_Digest_from_hex$1;
   function string(str){
    return caml_md5_string(str, 0, caml_ml_string_length(str));
   }
   function bytes(b){return string(caml_call1(Stdlib_Bytes[48], b));}
   function substring(str, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_string_length(str) - len | 0) >= ofs)
     return caml_md5_string(str, ofs, len);
    return caml_call1(Stdlib[1], cst_Digest_substring);
   }
   function subbytes(b, ofs, len){
    return substring(caml_call1(Stdlib_Bytes[48], b), ofs, len);
   }
   function file(filename){
    var ic = caml_call1(Stdlib[80], filename);
    try{var d = runtime.caml_md5_chan(ic, -1);}
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     caml_call1(Stdlib[93], ic);
     throw caml_maybe_attach_backtrace(e, 0);
    }
    caml_call1(Stdlib[93], ic);
    return d;
   }
   function output(chan, digest){return caml_call2(Stdlib[66], chan, digest);}
   function input(chan){return caml_call2(Stdlib[86], chan, 16);}
   function char_hex(n){var _e_ = 10 <= n ? 87 : 48; return n + _e_ | 0;}
   function to_hex(d){
    if(16 !== caml_ml_string_length(d))
     caml_call1(Stdlib[1], cst_Digest_to_hex);
    var result = caml_create_bytes(32), i = 0;
    for(;;){
     var x = caml_string_get(d, i);
     caml_bytes_unsafe_set(result, i * 2 | 0, char_hex(x >>> 4 | 0));
     caml_bytes_unsafe_set(result, (i * 2 | 0) + 1 | 0, char_hex(x & 15));
     var _d_ = i + 1 | 0;
     if(15 === i) return caml_call1(Stdlib_Bytes[48], result);
     i = _d_;
    }
   }
   function from_hex(s){
    if(32 !== caml_ml_string_length(s))
     caml_call1(Stdlib[1], cst_Digest_from_hex);
    function digit(c){
     if(65 <= c){
      if(97 <= c){
       if(103 > c) return (c - 97 | 0) + 10 | 0;
      }
      else if(71 > c) return (c - 65 | 0) + 10 | 0;
     }
     else if(9 >= c - 48 >>> 0) return c - 48 | 0;
     throw caml_maybe_attach_backtrace
            ([0, Stdlib[6], cst_Digest_from_hex$0], 1);
    }
    var result = caml_create_bytes(16), i = 0;
    for(;;){
     var
      i$0 = 2 * i | 0,
      _a_ = digit(caml_string_get(s, i$0 + 1 | 0)),
      _b_ = (digit(caml_string_get(s, i$0)) << 4) + _a_ | 0;
     runtime.caml_bytes_set(result, i, caml_call1(Stdlib_Char[1], _b_));
     var _c_ = i + 1 | 0;
     if(15 === i) return caml_call1(Stdlib_Bytes[48], result);
     i = _c_;
    }
   }
   var
    Stdlib_Digest =
      [0,
       compare,
       equal,
       string,
       bytes,
       substring,
       subbytes,
       file,
       output,
       input,
       to_hex,
       from_hex];
   runtime.caml_register_global(8, Stdlib_Digest, "Stdlib__Digest");
   return;
  }
  (globalThis));

//# 17515 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_check_bound = runtime.caml_check_bound,
    caml_greaterthan = runtime.caml_greaterthan,
    caml_int64_of_int32 = runtime.caml_int64_of_int32,
    caml_int64_or = runtime.caml_int64_or,
    caml_int64_shift_left = runtime.caml_int64_shift_left,
    caml_int64_shift_right_unsigne = runtime.caml_int64_shift_right_unsigned,
    caml_int64_sub = runtime.caml_int64_sub,
    caml_int64_to_int32 = runtime.caml_int64_to_int32,
    caml_lessequal = runtime.caml_lessequal,
    caml_mod = runtime.caml_mod,
    caml_string_get = runtime.caml_string_get,
    caml_sys_random_seed = runtime.caml_sys_random_seed;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Int32 = global_data.Stdlib__Int32,
    Stdlib_Int64 = global_data.Stdlib__Int64,
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_Digest = global_data.Stdlib__Digest,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Nativeint = global_data.Stdlib__Nativeint,
    cst_x = "x",
    cst_Random_int = "Random.int",
    cst_Random_full_int = "Random.full_int",
    cst_Random_int32 = "Random.int32",
    _a_ = runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
    _b_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    cst_Random_int64 = "Random.int64";
   function new_state(param){return [0, runtime.caml_make_vect(55, 0), 0];}
   function assign(st1, st2){
    caml_call5(Stdlib_Array[10], st2[1], 0, st1[1], 0, 55);
    st1[2] = st2[2];
    return 0;
   }
   function full_init(s, seed){
    var
     seed$0 = 0 === seed.length - 1 ? [0, 0] : seed,
     l = seed$0.length - 1,
     i$0 = 0;
    for(;;){
     caml_check_bound(s[1], i$0)[1 + i$0] = i$0;
     var _q_ = i$0 + 1 | 0;
     if(54 === i$0) break;
     i$0 = _q_;
    }
    var
     accu = [0, cst_x],
     _n_ = 54 + caml_call2(Stdlib_Int[11], 55, l) | 0,
     _m_ = 0;
    if(_n_ >= 0){
     var i = _m_;
     for(;;){
      var
       j = i % 55 | 0,
       k = caml_mod(i, l),
       x = caml_check_bound(seed$0, k)[1 + k],
       accu$0 = accu[1],
       _g_ = caml_call1(Stdlib_Int[12], x),
       _h_ = caml_call2(Stdlib[28], accu$0, _g_);
      accu[1] = caml_call1(Stdlib_Digest[3], _h_);
      var
       d = accu[1],
       _i_ = caml_string_get(d, 3) << 24,
       _j_ = caml_string_get(d, 2) << 16,
       _k_ = caml_string_get(d, 1) << 8,
       _l_ = ((caml_string_get(d, 0) + _k_ | 0) + _j_ | 0) + _i_ | 0,
       _o_ = (caml_check_bound(s[1], j)[1 + j] ^ _l_) & 1073741823;
      caml_check_bound(s[1], j)[1 + j] = _o_;
      var _p_ = i + 1 | 0;
      if(_n_ === i) break;
      i = _p_;
     }
    }
    s[2] = 0;
    return 0;
   }
   function make(seed){
    var result = new_state(0);
    full_init(result, seed);
    return result;
   }
   function make_self_init(param){return make(caml_sys_random_seed(0));}
   function copy(s){
    var result = new_state(0);
    assign(result, s);
    return result;
   }
   function bits(s){
    s[2] = (s[2] + 1 | 0) % 55 | 0;
    var
     _d_ = s[2],
     curval = caml_check_bound(s[1], _d_)[1 + _d_],
     _e_ = (s[2] + 24 | 0) % 55 | 0,
     newval =
       caml_check_bound(s[1], _e_)[1 + _e_]
       + (curval ^ (curval >>> 25 | 0) & 31)
       | 0,
     newval30 = newval & 1073741823,
     _f_ = s[2];
    caml_check_bound(s[1], _f_)[1 + _f_] = newval30;
    return newval30;
   }
   function intaux(s, n){
    for(;;){
     var r = bits(s), v = caml_mod(r, n);
     if(((1073741823 - n | 0) + 1 | 0) >= (r - v | 0)) return v;
    }
   }
   function int$0(s, bound){
    if(1073741823 >= bound && 0 < bound) return intaux(s, bound);
    return caml_call1(Stdlib[1], cst_Random_int);
   }
   function full_int(s, bound){
    if(0 >= bound) return caml_call1(Stdlib[1], cst_Random_full_int);
    if(1073741823 >= bound) return intaux(s, bound);
    for(;;){
     var b1 = bits(s), b2 = bits(s), max_int_32 = 2147483647;
     if(bound <= 2147483647)
      var
       bpos = (b2 & 1073725440) << 1 | b1 >>> 15 | 0,
       max_int = max_int_32,
       r = bpos;
     else
      var
       b3 = bits(s),
       r$0 = ((b3 & 1073741312) << 12 | b2 >>> 9 | 0) << 20 | b1 >>> 10 | 0,
       max_int$0 = Stdlib[19],
       max_int = max_int$0,
       r = r$0;
     var v = caml_mod(r, bound);
     if(((max_int - bound | 0) + 1 | 0) >= (r - v | 0)) return v;
    }
   }
   function int32(s, bound){
    if(caml_lessequal(bound, 0))
     return caml_call1(Stdlib[1], cst_Random_int32);
    for(;;){
     var
      b1 = bits(s),
      b2 = (bits(s) & 1) << 30,
      r = b1 | b2,
      v = caml_mod(r, bound);
     if(! caml_greaterthan(r - v | 0, (Stdlib_Int32[9] - bound | 0) + 1 | 0))
      return v;
    }
   }
   function int64(s, bound){
    if(caml_lessequal(bound, _b_))
     return caml_call1(Stdlib[1], cst_Random_int64);
    for(;;){
     var
      b1 = caml_int64_of_int32(bits(s)),
      b2 = caml_int64_shift_left(caml_int64_of_int32(bits(s)), 30),
      b3 = caml_int64_shift_left(caml_int64_of_int32(bits(s) & 7), 60),
      r = caml_int64_or(b1, caml_int64_or(b2, b3)),
      v = runtime.caml_int64_mod(r, bound);
     if
      (!
       caml_greaterthan
        (caml_int64_sub(r, v),
         runtime.caml_int64_add(caml_int64_sub(Stdlib_Int64[9], bound), _a_)))
      return v;
    }
   }
   var
    _c_ =
      [0,
       987910699,
       495797812,
       364182224,
       414272206,
       318284740,
       990407751,
       383018966,
       270373319,
       840823159,
       24560019,
       536292337,
       512266505,
       189156120,
       730249596,
       143776328,
       51606627,
       140166561,
       366354223,
       1003410265,
       700563762,
       981890670,
       913149062,
       526082594,
       1021425055,
       784300257,
       667753350,
       630144451,
       949649812,
       48546892,
       415514493,
       258888527,
       511570777,
       89983870,
       283659902,
       308386020,
       242688715,
       482270760,
       865188196,
       1027664170,
       207196989,
       193777847,
       619708188,
       671350186,
       149669678,
       257044018,
       87658204,
       558145612,
       183450813,
       28133145,
       901332182,
       710253903,
       510646120,
       652377910,
       409934019,
       801085050],
    nativeint =
      32 === Stdlib_Nativeint[9]
       ? function(s, bound){return int32(s, bound);}
       : function
        (s, bound){
         return caml_int64_to_int32(int64(s, caml_int64_of_int32(bound)));
        };
   function float$0(s, bound){
    var r1 = bits(s), r2 = bits(s);
    return (r1 / 1073741824. + r2) / 1073741824. * bound;
   }
   function bool(s){return 0 === (bits(s) & 1) ? 1 : 0;}
   function bits32(s){
    var b1 = bits(s) >>> 14 | 0, b2 = bits(s) >>> 14 | 0;
    return b1 | b2 << 16;
   }
   function bits64(s){
    var
     b1 = caml_int64_shift_right_unsigne(caml_int64_of_int32(bits(s)), 9),
     b2 = caml_int64_shift_right_unsigne(caml_int64_of_int32(bits(s)), 9),
     b3 = caml_int64_shift_right_unsigne(caml_int64_of_int32(bits(s)), 8);
    return caml_int64_or
            (b1,
             caml_int64_or
              (caml_int64_shift_left(b2, 21), caml_int64_shift_left(b3, 42)));
   }
   var
    nativebits =
      32 === Stdlib_Nativeint[9]
       ? function(s){return bits32(s);}
       : function(s){return caml_int64_to_int32(bits64(s));},
    default$0 = [0, _c_.slice(), 0];
   function bits$0(param){return bits(default$0);}
   function int$1(bound){return int$0(default$0, bound);}
   function full_int$0(bound){return full_int(default$0, bound);}
   function int32$0(bound){return int32(default$0, bound);}
   function nativeint$0(bound){return nativeint(default$0, bound);}
   function int64$0(bound){return int64(default$0, bound);}
   function float$1(scale){return float$0(default$0, scale);}
   function bool$0(param){return bool(default$0);}
   function bits32$0(param){return bits32(default$0);}
   function bits64$0(param){return bits64(default$0);}
   function nativebits$0(param){return nativebits(default$0);}
   function full_init$0(seed){return full_init(default$0, seed);}
   function init(seed){return full_init(default$0, [0, seed]);}
   function self_init(param){
    var seed = caml_sys_random_seed(0);
    return full_init(default$0, seed);
   }
   function get_state(param){return copy(default$0);}
   function set_state(s){return assign(default$0, s);}
   var
    Stdlib_Random =
      [0,
       init,
       full_init$0,
       self_init,
       bits$0,
       int$1,
       full_int$0,
       int32$0,
       nativeint$0,
       int64$0,
       float$1,
       bool$0,
       bits32$0,
       bits64$0,
       nativebits$0,
       [0,
        make,
        make_self_init,
        copy,
        bits,
        int$0,
        full_int,
        int32,
        nativeint,
        int64,
        float$0,
        bool,
        bits32,
        bits64,
        nativebits],
       get_state,
       set_state];
   runtime.caml_register_global(18, Stdlib_Random, "Stdlib__Random");
   return;
  }
  (globalThis));

//# 17849 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_check_bound = runtime.caml_check_bound,
    caml_compare = runtime.caml_compare,
    caml_hash = runtime.caml_hash,
    caml_make_vect = runtime.caml_make_vect,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_sys_getenv = runtime.caml_sys_getenv,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    _d_ = [0, 0],
    cst = "",
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib = global_data.Stdlib,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Stdlib_Random = global_data.Stdlib__Random,
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_Array = global_data.Stdlib__Array;
   global_data.Assert_failure;
   var Stdlib_String = global_data.Stdlib__String;
   function ongoing_traversal(h){
    var _aq_ = h.length - 1 < 4 ? 1 : 0, _ar_ = _aq_ || (h[4] < 0 ? 1 : 0);
    return _ar_;
   }
   function flip_ongoing_traversal(h){h[4] = - h[4] | 0; return 0;}
   var
    cst_Hashtbl_unsupported_hash_t = "Hashtbl: unsupported hash table format";
   try{var _f_ = caml_sys_getenv("OCAMLRUNPARAM"), params = _f_;}
   catch(_ao_){
    var _a_ = caml_wrap_exception(_ao_);
    if(_a_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_a_, 0);
    try{var _e_ = caml_sys_getenv("CAMLRUNPARAM"), _c_ = _e_;}
    catch(_ap_){
     var _b_ = caml_wrap_exception(_ap_);
     if(_b_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_b_, 0);
     var _c_ = cst;
    }
    var params = _c_;
   }
   var
    randomized_default = caml_call2(Stdlib_String[14], params, 82),
    randomized = [0, randomized_default];
   function randomize(param){randomized[1] = 1; return 0;}
   function is_randomized(param){return randomized[1];}
   var
    prng = [246, function(_an_){return caml_call1(Stdlib_Random[15][2], 0);}];
   function power_2_above(x, n){
    var x$0 = x;
    for(;;){
     if(n <= x$0) return x$0;
     if(Stdlib_Sys[13] < (x$0 * 2 | 0)) return x$0;
     var x$1 = x$0 * 2 | 0;
     x$0 = x$1;
    }
   }
   function create(opt, initial_size){
    if(opt) var sth = opt[1], random = sth; else var random = randomized[1];
    var s = power_2_above(16, initial_size);
    if(random)
     var
      _al_ = caml_obj_tag(prng),
      _am_ =
        250 === _al_
         ? prng[1]
         : 246 === _al_ ? caml_call1(CamlinternalLazy[2], prng) : prng,
      seed = caml_call1(Stdlib_Random[15][4], _am_);
    else
     var seed = 0;
    return [0, 0, caml_make_vect(s, 0), seed, s];
   }
   function clear(h){
    var _ak_ = 0 < h[1] ? 1 : 0;
    return _ak_
            ? (h
               [1]
              = 0,
              caml_call4(Stdlib_Array[9], h[2], 0, h[2].length - 1, 0))
            : _ak_;
   }
   function reset(h){
    var len = h[2].length - 1;
    if(4 <= h.length - 1 && len !== caml_call1(Stdlib[18], h[4])){
     h[1] = 0;
     h[2] = caml_make_vect(caml_call1(Stdlib[18], h[4]), 0);
     return 0;
    }
    return clear(h);
   }
   function copy_bucketlist(param){
    if(! param) return 0;
    var
     key = param[1],
     data = param[2],
     next = param[3],
     prec$1 = [0, key, data, next],
     prec = prec$1,
     param$0 = next;
    for(;;){
     if(! param$0) return prec$1;
     var
      key$0 = param$0[1],
      data$0 = param$0[2],
      next$0 = param$0[3],
      prec$0 = [0, key$0, data$0, next$0];
     prec[3] = prec$0;
     prec = prec$0;
     param$0 = next$0;
    }
   }
   function copy(h){
    var
     _ah_ = h[4],
     _ai_ = h[3],
     _aj_ = caml_call2(Stdlib_Array[15], copy_bucketlist, h[2]);
    return [0, h[1], _aj_, _ai_, _ah_];
   }
   function length(h){return h[1];}
   function insert_all_buckets(indexfun, inplace, odata, ndata){
    var
     nsize = ndata.length - 1,
     ndata_tail = caml_make_vect(nsize, 0),
     _ab_ = odata.length - 2 | 0,
     _aa_ = 0;
    if(_ab_ >= 0){
     var i$0 = _aa_;
     for(;;){
      var cell$1 = caml_check_bound(odata, i$0)[1 + i$0], cell = cell$1;
      for(;;){
       if(! cell) break;
       var
        key = cell[1],
        data = cell[2],
        next = cell[3],
        cell$0 = inplace ? cell : [0, key, data, 0],
        nidx = caml_call1(indexfun, key),
        match = caml_check_bound(ndata_tail, nidx)[1 + nidx];
       if(match)
        match[3] = cell$0;
       else
        caml_check_bound(ndata, nidx)[1 + nidx] = cell$0;
       caml_check_bound(ndata_tail, nidx)[1 + nidx] = cell$0;
       cell = next;
      }
      var _ag_ = i$0 + 1 | 0;
      if(_ab_ === i$0) break;
      i$0 = _ag_;
     }
    }
    if(inplace){
     var _ad_ = nsize - 1 | 0, _ac_ = 0;
     if(_ad_ >= 0){
      var i = _ac_;
      for(;;){
       var match$0 = caml_check_bound(ndata_tail, i)[1 + i];
       if(match$0) match$0[3] = 0;
       var _af_ = i + 1 | 0;
       if(_ad_ === i) break;
       i = _af_;
      }
     }
     var _ae_ = 0;
    }
    else
     var _ae_ = inplace;
    return _ae_;
   }
   function resize(indexfun, h){
    var
     odata = h[2],
     osize = odata.length - 1,
     nsize = osize * 2 | 0,
     _$_ = nsize < Stdlib_Sys[13] ? 1 : 0;
    if(! _$_) return _$_;
    var ndata = caml_make_vect(nsize, 0), inplace = 1 - ongoing_traversal(h);
    h[2] = ndata;
    return insert_all_buckets(caml_call1(indexfun, h), inplace, odata, ndata);
   }
   function iter(f, h){
    var old_trav = ongoing_traversal(h);
    if(1 - old_trav) flip_ongoing_traversal(h);
    try{
     var d = h[2], _X_ = d.length - 2 | 0, _W_ = 0;
     if(_X_ >= 0){
      var i = _W_;
      for(;;){
       var param = caml_check_bound(d, i)[1 + i];
       for(;;){
        if(! param) break;
        var key = param[1], data = param[2], next = param[3];
        caml_call2(f, key, data);
        param = next;
       }
       var ___ = i + 1 | 0;
       if(_X_ === i) break;
       i = ___;
      }
     }
     var _Y_ = 1 - old_trav, _Z_ = _Y_ ? flip_ongoing_traversal(h) : _Y_;
     return _Z_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(old_trav) throw caml_maybe_attach_backtrace(exn, 0);
     flip_ongoing_traversal(h);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function filter_map_inplace(f, h){
    var d = h[2], old_trav = ongoing_traversal(h);
    if(1 - old_trav) flip_ongoing_traversal(h);
    try{
     var _S_ = d.length - 2 | 0, _R_ = 0;
     if(_S_ >= 0){
      var i = _R_;
      for(;;){
       var slot$0 = caml_check_bound(h[2], i)[1 + i], prec = 0, slot = slot$0;
       for(;;){
        if(! slot) break;
        var
         key = slot[1],
         data = slot[2],
         next = slot[3],
         match = caml_call2(f, key, data);
        if(match){
         var data$0 = match[1];
         if(prec)
          prec[3] = slot;
         else
          caml_check_bound(h[2], i)[1 + i] = slot;
         slot[2] = data$0;
         prec = slot;
         slot = next;
        }
        else{h[1] = h[1] - 1 | 0; slot = next;}
       }
       if(prec) prec[3] = 0; else caml_check_bound(h[2], i)[1 + i] = 0;
       var _V_ = i + 1 | 0;
       if(_S_ === i) break;
       i = _V_;
      }
     }
     var _T_ = 1 - old_trav, _U_ = _T_ ? flip_ongoing_traversal(h) : _T_;
     return _U_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(old_trav) throw caml_maybe_attach_backtrace(exn, 0);
     flip_ongoing_traversal(h);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function fold(f, h, init){
    var old_trav = ongoing_traversal(h);
    if(1 - old_trav) flip_ongoing_traversal(h);
    try{
     var d = h[2], accu$1 = [0, init], _O_ = d.length - 2 | 0, _N_ = 0;
     if(_O_ >= 0){
      var i = _N_;
      for(;;){
       var
        accu$2 = accu$1[1],
        b$0 = caml_check_bound(d, i)[1 + i],
        b = b$0,
        accu = accu$2;
       for(;;){
        if(! b) break;
        var
         key = b[1],
         data = b[2],
         next = b[3],
         accu$0 = caml_call3(f, key, data, accu);
        b = next;
        accu = accu$0;
       }
       accu$1[1] = accu;
       var _Q_ = i + 1 | 0;
       if(_O_ === i) break;
       i = _Q_;
      }
     }
     if(1 - old_trav) flip_ongoing_traversal(h);
     var _P_ = accu$1[1];
     return _P_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(old_trav) throw caml_maybe_attach_backtrace(exn, 0);
     flip_ongoing_traversal(h);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function bucket_length(accu, param){
    var accu$0 = accu, param$0 = param;
    for(;;){
     if(! param$0) return accu$0;
     var next = param$0[3], accu$1 = accu$0 + 1 | 0;
     accu$0 = accu$1;
     param$0 = next;
    }
   }
   function stats(h){
    var
     mbl =
       caml_call3
        (Stdlib_Array[17],
         function(m, b){
          var _M_ = bucket_length(0, b);
          return caml_call2(Stdlib_Int[11], m, _M_);
         },
         0,
         h[2]),
     histo = caml_make_vect(mbl + 1 | 0, 0);
    caml_call2
     (Stdlib_Array[13],
      function(b){
       var l = bucket_length(0, b);
       histo[1 + l] = caml_check_bound(histo, l)[1 + l] + 1 | 0;
       return 0;
      },
      h[2]);
    return [0, h[1], h[2].length - 1, mbl, histo];
   }
   function to_seq(tbl){
    var tbl_data = tbl[2];
    function aux(i, buck, param){
     var i$0 = i, buck$0 = buck;
     for(;;){
      if(buck$0){
       var key = buck$0[1], data = buck$0[2], next = buck$0[3];
       return [0, [0, key, data], function(_L_){return aux(i$0, next, _L_);}];
      }
      if(i$0 === tbl_data.length - 1) return 0;
      var
       buck$1 = caml_check_bound(tbl_data, i$0)[1 + i$0],
       i$1 = i$0 + 1 | 0;
      i$0 = i$1;
      buck$0 = buck$1;
     }
    }
    var _I_ = 0, _J_ = 0;
    return function(_K_){return aux(_J_, _I_, _K_);};
   }
   function to_seq_keys(m){
    var _G_ = to_seq(m);
    return caml_call2(Stdlib_Seq[27], function(_H_){return _H_[1];}, _G_);
   }
   function to_seq_values(m){
    var _E_ = to_seq(m);
    return caml_call2(Stdlib_Seq[27], function(_F_){return _F_[2];}, _E_);
   }
   function MakeSeeded(H){
    function key_index(h, key){
     var _D_ = h[2].length - 2 | 0;
     return caml_call2(H[2], h[3], key) & _D_;
    }
    function add(h, key, data){
     var
      i = key_index(h, key),
      bucket = [0, key, data, caml_check_bound(h[2], i)[1 + i]];
     caml_check_bound(h[2], i)[1 + i] = bucket;
     h[1] = h[1] + 1 | 0;
     var _C_ = h[2].length - 1 << 1 < h[1] ? 1 : 0;
     return _C_ ? resize(key_index, h) : _C_;
    }
    function remove(h, key){
     var
      i = key_index(h, key),
      c = caml_check_bound(h[2], i)[1 + i],
      prec$0 = 0,
      prec = c;
     for(;;){
      if(! prec) return 0;
      var k = prec[1], next = prec[3];
      if(caml_call2(H[1], k, key)){
       h[1] = h[1] - 1 | 0;
       return prec$0
               ? (prec$0[3] = next, 0)
               : (caml_check_bound(h[2], i)[1 + i] = next, 0);
      }
      prec$0 = prec;
      prec = next;
     }
    }
    function find(h, key){
     var
      _B_ = key_index(h, key),
      match = caml_check_bound(h[2], _B_)[1 + _B_];
     if(! match) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var k1 = match[1], d1 = match[2], next1 = match[3];
     if(caml_call2(H[1], key, k1)) return d1;
     if(! next1) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var k2 = next1[1], d2 = next1[2], next2 = next1[3];
     if(caml_call2(H[1], key, k2)) return d2;
     if(! next2) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var k3 = next2[1], d3 = next2[2], next3 = next2[3];
     if(caml_call2(H[1], key, k3)) return d3;
     var param = next3;
     for(;;){
      if(! param) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
      var k = param[1], data = param[2], next = param[3];
      if(caml_call2(H[1], key, k)) return data;
      param = next;
     }
    }
    function find_opt(h, key){
     var
      _A_ = key_index(h, key),
      match = caml_check_bound(h[2], _A_)[1 + _A_];
     if(! match) return 0;
     var k1 = match[1], d1 = match[2], next1 = match[3];
     if(caml_call2(H[1], key, k1)) return [0, d1];
     if(! next1) return 0;
     var k2 = next1[1], d2 = next1[2], next2 = next1[3];
     if(caml_call2(H[1], key, k2)) return [0, d2];
     if(! next2) return 0;
     var k3 = next2[1], d3 = next2[2], next3 = next2[3];
     if(caml_call2(H[1], key, k3)) return [0, d3];
     var param = next3;
     for(;;){
      if(! param) return 0;
      var k = param[1], data = param[2], next = param[3];
      if(caml_call2(H[1], key, k)) return [0, data];
      param = next;
     }
    }
    function find_all(h, key){
     function find_in_bucket(param){
      var param$0 = param;
      for(;;){
       if(! param$0) return 0;
       var k = param$0[1], d = param$0[2], next = param$0[3];
       if(caml_call2(H[1], k, key)) return [0, d, find_in_bucket(next)];
       param$0 = next;
      }
     }
     var _z_ = key_index(h, key);
     return find_in_bucket(caml_check_bound(h[2], _z_)[1 + _z_]);
    }
    function replace(h, key, data){
     var
      i = key_index(h, key),
      l = caml_check_bound(h[2], i)[1 + i],
      slot = l;
     for(;;){
      if(slot){
       var k = slot[1], next = slot[3];
       if(! caml_call2(H[1], k, key)){slot = next; continue;}
       slot[1] = key;
       slot[2] = data;
       var _w_ = 0;
      }
      else
       var _w_ = 1;
      if(_w_){
       caml_check_bound(h[2], i)[1 + i] = [0, key, data, l];
       h[1] = h[1] + 1 | 0;
       var _x_ = h[2].length - 1 << 1 < h[1] ? 1 : 0;
       if(_x_) return resize(key_index, h);
       var _y_ = _x_;
      }
      else
       var _y_ = _w_;
      return _y_;
     }
    }
    function mem(h, key){
     var
      _v_ = key_index(h, key),
      param = caml_check_bound(h[2], _v_)[1 + _v_];
     for(;;){
      if(! param) return 0;
      var k = param[1], next = param[3], _u_ = caml_call2(H[1], k, key);
      if(_u_) return _u_;
      param = next;
     }
    }
    function add_seq(tbl, i){
     return caml_call2
             (Stdlib_Seq[4],
              function(param){
               var v = param[2], k = param[1];
               return add(tbl, k, v);
              },
              i);
    }
    function replace_seq(tbl, i){
     return caml_call2
             (Stdlib_Seq[4],
              function(param){
               var v = param[2], k = param[1];
               return replace(tbl, k, v);
              },
              i);
    }
    function of_seq(i){
     var tbl = create(0, 16);
     replace_seq(tbl, i);
     return tbl;
    }
    return [0,
            create,
            clear,
            reset,
            copy,
            add,
            remove,
            find,
            find_opt,
            find_all,
            replace,
            mem,
            iter,
            filter_map_inplace,
            fold,
            length,
            stats,
            to_seq,
            to_seq_keys,
            to_seq_values,
            add_seq,
            replace_seq,
            of_seq];
   }
   function Make(H){
    var equal = H[1];
    function hash(seed, x){return caml_call1(H[2], x);}
    var
     include = MakeSeeded([0, equal, hash]),
     _t_ = include[1],
     clear = include[2],
     reset = include[3],
     copy = include[4],
     add = include[5],
     remove = include[6],
     find = include[7],
     find_opt = include[8],
     find_all = include[9],
     replace = include[10],
     mem = include[11],
     iter = include[12],
     filter_map_inplace = include[13],
     fold = include[14],
     length = include[15],
     stats = include[16],
     to_seq = include[17],
     to_seq_keys = include[18],
     to_seq_values = include[19],
     add_seq = include[20],
     replace_seq = include[21];
    function create(sz){return caml_call2(_t_, _d_, sz);}
    function of_seq(i){
     var tbl = caml_call2(_t_, _d_, 16);
     caml_call2(replace_seq, tbl, i);
     return tbl;
    }
    return [0,
            create,
            clear,
            reset,
            copy,
            add,
            remove,
            find,
            find_opt,
            find_all,
            replace,
            mem,
            iter,
            filter_map_inplace,
            fold,
            length,
            stats,
            to_seq,
            to_seq_keys,
            to_seq_values,
            add_seq,
            replace_seq,
            of_seq];
   }
   function hash(x){return caml_hash(10, 100, 0, x);}
   function hash_param(n1, n2, x){return caml_hash(n1, n2, 0, x);}
   function seeded_hash(seed, x){return caml_hash(10, 100, seed, x);}
   function key_index(h, key){
    return 4 <= h.length - 1
            ? caml_hash(10, 100, h[3], key) & (h[2].length - 2 | 0)
            : caml_call1(Stdlib[1], cst_Hashtbl_unsupported_hash_t);
   }
   function add(h, key, data){
    var
     i = key_index(h, key),
     bucket = [0, key, data, caml_check_bound(h[2], i)[1 + i]];
    caml_check_bound(h[2], i)[1 + i] = bucket;
    h[1] = h[1] + 1 | 0;
    var _s_ = h[2].length - 1 << 1 < h[1] ? 1 : 0;
    return _s_ ? resize(key_index, h) : _s_;
   }
   function remove(h, key){
    var
     i = key_index(h, key),
     c = caml_check_bound(h[2], i)[1 + i],
     prec$0 = 0,
     prec = c;
    for(;;){
     if(! prec) return 0;
     var k = prec[1], next = prec[3];
     if(0 === caml_compare(k, key)){
      h[1] = h[1] - 1 | 0;
      return prec$0
              ? (prec$0[3] = next, 0)
              : (caml_check_bound(h[2], i)[1 + i] = next, 0);
     }
     prec$0 = prec;
     prec = next;
    }
   }
   function find(h, key){
    var _r_ = key_index(h, key), match = caml_check_bound(h[2], _r_)[1 + _r_];
    if(! match) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    var k1 = match[1], d1 = match[2], next1 = match[3];
    if(0 === caml_compare(key, k1)) return d1;
    if(! next1) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    var k2 = next1[1], d2 = next1[2], next2 = next1[3];
    if(0 === caml_compare(key, k2)) return d2;
    if(! next2) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    var k3 = next2[1], d3 = next2[2], next3 = next2[3];
    if(0 === caml_compare(key, k3)) return d3;
    var param = next3;
    for(;;){
     if(! param) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var k = param[1], data = param[2], next = param[3];
     if(0 === caml_compare(key, k)) return data;
     param = next;
    }
   }
   function find_opt(h, key){
    var _q_ = key_index(h, key), match = caml_check_bound(h[2], _q_)[1 + _q_];
    if(! match) return 0;
    var k1 = match[1], d1 = match[2], next1 = match[3];
    if(0 === caml_compare(key, k1)) return [0, d1];
    if(! next1) return 0;
    var k2 = next1[1], d2 = next1[2], next2 = next1[3];
    if(0 === caml_compare(key, k2)) return [0, d2];
    if(! next2) return 0;
    var k3 = next2[1], d3 = next2[2], next3 = next2[3];
    if(0 === caml_compare(key, k3)) return [0, d3];
    var param = next3;
    for(;;){
     if(! param) return 0;
     var k = param[1], data = param[2], next = param[3];
     if(0 === caml_compare(key, k)) return [0, data];
     param = next;
    }
   }
   function find_all(h, key){
    function find_in_bucket(param){
     var param$0 = param;
     for(;;){
      if(! param$0) return 0;
      var k = param$0[1], data = param$0[2], next = param$0[3];
      if(0 === caml_compare(k, key)) return [0, data, find_in_bucket(next)];
      param$0 = next;
     }
    }
    var _p_ = key_index(h, key);
    return find_in_bucket(caml_check_bound(h[2], _p_)[1 + _p_]);
   }
   function replace(h, key, data){
    var i = key_index(h, key), l = caml_check_bound(h[2], i)[1 + i], slot = l;
    for(;;){
     if(slot){
      var k = slot[1], next = slot[3];
      if(0 !== caml_compare(k, key)){slot = next; continue;}
      slot[1] = key;
      slot[2] = data;
      var _m_ = 0;
     }
     else
      var _m_ = 1;
     if(_m_){
      caml_check_bound(h[2], i)[1 + i] = [0, key, data, l];
      h[1] = h[1] + 1 | 0;
      var _n_ = h[2].length - 1 << 1 < h[1] ? 1 : 0;
      if(_n_) return resize(key_index, h);
      var _o_ = _n_;
     }
     else
      var _o_ = _m_;
     return _o_;
    }
   }
   function mem(h, key){
    var _l_ = key_index(h, key), param = caml_check_bound(h[2], _l_)[1 + _l_];
    for(;;){
     if(! param) return 0;
     var
      k = param[1],
      next = param[3],
      _k_ = 0 === caml_compare(k, key) ? 1 : 0;
     if(_k_) return _k_;
     param = next;
    }
   }
   function add_seq(tbl, i){
    return caml_call2
            (Stdlib_Seq[4],
             function(param){
              var v = param[2], k = param[1];
              return add(tbl, k, v);
             },
             i);
   }
   function replace_seq(tbl, i){
    return caml_call2
            (Stdlib_Seq[4],
             function(param){
              var v = param[2], k = param[1];
              return replace(tbl, k, v);
             },
             i);
   }
   function of_seq(i){
    var tbl = create(0, 16);
    replace_seq(tbl, i);
    return tbl;
   }
   function rebuild(opt, h){
    if(opt) var sth = opt[1], random = sth; else var random = randomized[1];
    var s = power_2_above(16, h[2].length - 1);
    if(random)
     var
      _g_ = caml_obj_tag(prng),
      _h_ =
        250 === _g_
         ? prng[1]
         : 246 === _g_ ? caml_call1(CamlinternalLazy[2], prng) : prng,
      seed = caml_call1(Stdlib_Random[15][4], _h_);
    else
     var seed = 4 <= h.length - 1 ? h[3] : 0;
    var
     _i_ = 4 <= h.length - 1 ? h[4] : s,
     h$0 = [0, h[1], caml_make_vect(s, 0), seed, _i_];
    insert_all_buckets
     (function(_j_){return key_index(h$0, _j_);}, 0, h[2], h$0[2]);
    return h$0;
   }
   var
    Stdlib_Hashtbl =
      [0,
       create,
       clear,
       reset,
       copy,
       add,
       find,
       find_opt,
       find_all,
       mem,
       remove,
       replace,
       iter,
       filter_map_inplace,
       fold,
       length,
       randomize,
       is_randomized,
       rebuild,
       stats,
       to_seq,
       to_seq_keys,
       to_seq_values,
       add_seq,
       replace_seq,
       of_seq,
       Make,
       MakeSeeded,
       hash,
       seeded_hash,
       hash_param,
       caml_hash];
   runtime.caml_register_global(15, Stdlib_Hashtbl, "Stdlib__Hashtbl");
   return;
  }
  (globalThis));

//# 18661 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_check_bound = runtime.caml_check_bound,
    caml_make_vect = runtime.caml_make_vect,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_mod = runtime.caml_mod;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Obj = global_data.Stdlib__Obj,
    cst_Weak_create = "Weak.create",
    cst_Weak_set = "Weak.set",
    cst_Weak_get = "Weak.get",
    cst_Weak_get_copy = "Weak.get_copy",
    cst_Weak_check = "Weak.check",
    cst_Weak_blit = "Weak.blit",
    cst_Weak_fill = "Weak.fill",
    cst_Weak_Make_hash_bucket_cann = "Weak.Make: hash bucket cannot grow more";
   function create(l){
    var
     _J_ = 0 <= l ? 1 : 0,
     _K_ = _J_ ? l <= Stdlib_Obj[26][15] ? 1 : 0 : _J_;
    if(1 - _K_) caml_call1(Stdlib[1], cst_Weak_create);
    return runtime.caml_weak_create(l);
   }
   function length(x){return x.length - 3 | 0;}
   function raise_if_invalid_offset(e, o, msg){
    var
     _G_ = 0 <= o ? 1 : 0,
     _H_ = _G_ ? o < length(e) ? 1 : 0 : _G_,
     _I_ = 1 - _H_;
    return _I_ ? caml_call1(Stdlib[1], msg) : _I_;
   }
   function set(e, o, x){
    raise_if_invalid_offset(e, o, cst_Weak_set);
    if(! x) return runtime.caml_ephe_unset_key(e, o);
    var x$0 = x[1];
    return runtime.caml_ephe_set_key(e, o, x$0);
   }
   function get(e, o){
    raise_if_invalid_offset(e, o, cst_Weak_get);
    return runtime.caml_ephe_get_key(e, o);
   }
   function get_copy(e, o){
    raise_if_invalid_offset(e, o, cst_Weak_get_copy);
    return runtime.caml_ephe_get_key_copy(e, o);
   }
   function check(e, o){
    raise_if_invalid_offset(e, o, cst_Weak_check);
    return runtime.caml_ephe_check_key(e, o);
   }
   function blit(e1, o1, e2, o2, l){
    if
     (0 <= l
      &&
       0 <= o1
       && (length(e1) - l | 0) >= o1 && 0 <= o2 && (length(e2) - l | 0) >= o2){
     var
      _E_ = 0 !== l ? 1 : 0,
      _F_ = _E_ ? runtime.caml_ephe_blit_key(e1, o1, e2, o2, l) : _E_;
     return _F_;
    }
    return caml_call1(Stdlib[1], cst_Weak_blit);
   }
   function fill(ar, ofs, len, x){
    if(0 <= ofs && 0 <= len && (length(ar) - len | 0) >= ofs){
     var _C_ = (ofs + len | 0) - 1 | 0;
     if(_C_ >= ofs){
      var i = ofs;
      for(;;){
       set(ar, i, x);
       var _D_ = i + 1 | 0;
       if(_C_ === i) break;
       i = _D_;
      }
     }
     return 0;
    }
    throw caml_maybe_attach_backtrace([0, Stdlib[6], cst_Weak_fill], 1);
   }
   function Make(H){
    var emptybucket = create(0);
    function get_index(t, h){
     return caml_mod(h & Stdlib[19], t[1].length - 1);
    }
    var limit = 7;
    function create$0(sz){
     var
      sz$0 = 7 <= sz ? sz : 7,
      sz$1 = Stdlib_Sys[13] < sz$0 ? Stdlib_Sys[13] : sz$0;
     return [0,
             caml_make_vect(sz$1, emptybucket),
             caml_make_vect(sz$1, [0]),
             limit,
             0,
             0];
    }
    function clear(t){
     var _A_ = t[1].length - 2 | 0, _z_ = 0;
     if(_A_ >= 0){
      var i = _z_;
      for(;;){
       caml_check_bound(t[1], i)[1 + i] = emptybucket;
       caml_check_bound(t[2], i)[1 + i] = [0];
       var _B_ = i + 1 | 0;
       if(_A_ === i) break;
       i = _B_;
      }
     }
     t[3] = limit;
     t[4] = 0;
     return 0;
    }
    function fold(f, t, init){
     var i = 0;
     return caml_call3
             (Stdlib_Array[19],
              function(b, accu$1){
               var i$0 = i, accu = accu$1;
               for(;;){
                if(length(b) <= i$0) return accu;
                var match = get(b, i$0);
                if(match){
                 var
                  v = match[1],
                  accu$0 = caml_call2(f, v, accu),
                  i$1 = i$0 + 1 | 0;
                 i$0 = i$1;
                 accu = accu$0;
                }
                else{var i$2 = i$0 + 1 | 0; i$0 = i$2;}
               }
              },
              t[1],
              init);
    }
    function iter(f, t){
     var i = 0;
     return caml_call2
             (Stdlib_Array[13],
              function(b){
               var i$0 = i;
               for(;;){
                if(length(b) <= i$0) return 0;
                var match = get(b, i$0);
                if(match){
                 var v = match[1];
                 caml_call1(f, v);
                 var i$1 = i$0 + 1 | 0;
                 i$0 = i$1;
                }
                else{var i$2 = i$0 + 1 | 0; i$0 = i$2;}
               }
              },
              t[1]);
    }
    function count_bucket(i, b, accu){
     var i$0 = i, accu$0 = accu;
     for(;;){
      if(length(b) <= i$0) return accu$0;
      var
       _y_ = check(b, i$0) ? 1 : 0,
       accu$1 = accu$0 + _y_ | 0,
       i$1 = i$0 + 1 | 0;
      i$0 = i$1;
      accu$0 = accu$1;
     }
    }
    function count(t){
     var _v_ = 0;
     return caml_call3
             (Stdlib_Array[19],
              function(_w_, _x_){return count_bucket(_v_, _w_, _x_);},
              t[1],
              0);
    }
    function add_aux(t, setter, d, h, index){
     var
      bucket$0 = caml_check_bound(t[1], index)[1 + index],
      hashes = caml_check_bound(t[2], index)[1 + index],
      sz = length(bucket$0),
      i$3 = 0;
     for(;;){
      if(sz <= i$3) break;
      if(! check(bucket$0, i$3)){
       caml_call3(setter, bucket$0, i$3, d);
       caml_check_bound(hashes, i$3)[1 + i$3] = h;
       return 0;
      }
      var i$5 = i$3 + 1 | 0;
      i$3 = i$5;
     }
     var
      newsz =
        caml_call2
         (Stdlib_Int[10],
          ((3 * sz | 0) / 2 | 0) + 3 | 0,
          Stdlib_Sys[13] - 2 | 0);
     if(newsz <= sz) caml_call1(Stdlib[2], cst_Weak_Make_hash_bucket_cann);
     var newbucket$0 = create(newsz), newhashes = caml_make_vect(newsz, 0);
     blit(bucket$0, 0, newbucket$0, 0, sz);
     caml_call5(Stdlib_Array[10], hashes, 0, newhashes, 0, sz);
     caml_call3(setter, newbucket$0, sz, d);
     caml_check_bound(newhashes, sz)[1 + sz] = h;
     caml_check_bound(t[1], index)[1 + index] = newbucket$0;
     caml_check_bound(t[2], index)[1 + index] = newhashes;
     var _r_ = sz <= t[3] ? 1 : 0, _s_ = _r_ ? t[3] < newsz ? 1 : 0 : _r_;
     if(_s_){
      t[4] = t[4] + 1 | 0;
      var i$4 = 0;
      for(;;){
       var
        _h_ = t[5],
        bucket = caml_check_bound(t[1], _h_)[1 + _h_],
        _i_ = t[5],
        hbucket = caml_check_bound(t[2], _i_)[1 + _i_],
        len = length(bucket),
        prev_len = (((len - 3 | 0) * 2 | 0) + 2 | 0) / 3 | 0,
        live = count_bucket(0, bucket, 0);
       if(live <= prev_len){
        var j$2 = length(bucket) - 1 | 0, i$0 = 0, j = j$2;
        for(;;){
         if(prev_len > j) break;
         if(check(bucket, i$0)){
          var i$1 = i$0 + 1 | 0;
          i$0 = i$1;
         }
         else if(check(bucket, j)){
          blit(bucket, j, bucket, i$0, 1);
          var _j_ = caml_check_bound(hbucket, j)[1 + j];
          caml_check_bound(hbucket, i$0)[1 + i$0] = _j_;
          var j$0 = j - 1 | 0, i$2 = i$0 + 1 | 0;
          i$0 = i$2;
          j = j$0;
         }
         else{var j$1 = j - 1 | 0; j = j$1;}
        }
        if(0 === prev_len){
         var _k_ = t[5];
         caml_check_bound(t[1], _k_)[1 + _k_] = emptybucket;
         var _l_ = t[5];
         caml_check_bound(t[2], _l_)[1 + _l_] = [0];
        }
        else{
         var newbucket = create(prev_len);
         blit(bucket, 0, newbucket, 0, prev_len);
         var _o_ = t[5];
         caml_check_bound(t[1], _o_)[1 + _o_] = newbucket;
         var
          _p_ = caml_call3(Stdlib_Array[7], hbucket, 0, prev_len),
          _q_ = t[5];
         caml_check_bound(t[2], _q_)[1 + _q_] = _p_;
        }
        var
         _m_ = t[3] < len ? 1 : 0,
         _n_ = _m_ ? prev_len <= t[3] ? 1 : 0 : _m_;
        if(_n_) t[4] = t[4] - 1 | 0;
       }
       t[5] = caml_mod(t[5] + 1 | 0, t[1].length - 1);
       var _u_ = i$4 + 1 | 0;
       if(2 === i$4) break;
       i$4 = _u_;
      }
     }
     var _t_ = ((t[1].length - 1) / 2 | 0) < t[4] ? 1 : 0;
     if(! _t_) return _t_;
     var
      oldlen = t[1].length - 1,
      newlen =
        caml_call2
         (Stdlib_Int[10], ((3 * oldlen | 0) / 2 | 0) + 3 | 0, Stdlib_Sys[13]);
     if(oldlen < newlen){
      var newt = create$0(newlen), i = 0;
      caml_call2
       (Stdlib_Array[14],
        function(j, ob){
         var oi = i;
         for(;;){
          if(length(ob) <= oi) return 0;
          if(check(ob, oi)){
           var oh = caml_check_bound(t[2], j)[1 + j];
           let oi$0 = oi;
           var
            setter =
              function(nb, ni, param){return blit(ob, oi$0, nb, ni, 1);},
            h = caml_check_bound(oh, oi)[1 + oi];
           add_aux(newt, setter, 0, h, get_index(newt, h));
           var i$0 = oi + 1 | 0;
           oi = i$0;
          }
          else{var i$1 = oi + 1 | 0; oi = i$1;}
         }
        },
        t[1]);
      t[1] = newt[1];
      t[2] = newt[2];
      t[3] = newt[3];
      t[4] = newt[4];
      t[5] = caml_mod(t[5], newt[1].length - 1);
      return 0;
     }
     t[3] = Stdlib[19];
     t[4] = 0;
     return 0;
    }
    function add(t, d){
     var h = caml_call1(H[2], d);
     return add_aux(t, set, [0, d], h, get_index(t, h));
    }
    function find_or(t, d, ifnotfound){
     var
      h = caml_call1(H[2], d),
      index = get_index(t, h),
      bucket = caml_check_bound(t[1], index)[1 + index],
      hashes = caml_check_bound(t[2], index)[1 + index],
      sz = length(bucket),
      i = 0;
     for(;;){
      if(sz <= i) return caml_call2(ifnotfound, h, index);
      if(h === caml_check_bound(hashes, i)[1 + i]){
       var match = get_copy(bucket, i);
       if(match){
        var v = match[1];
        if(caml_call2(H[1], v, d)){
         var match$0 = get(bucket, i);
         if(match$0){var v$0 = match$0[1]; return v$0;}
         var i$0 = i + 1 | 0;
         i = i$0;
         continue;
        }
       }
       var i$1 = i + 1 | 0;
       i = i$1;
      }
      else{var i$2 = i + 1 | 0; i = i$2;}
     }
    }
    function merge(t, d){
     return find_or
             (t,
              d,
              function(h, index){add_aux(t, set, [0, d], h, index); return d;});
    }
    function find(t, d){
     return find_or
             (t,
              d,
              function(h, index){
               throw caml_maybe_attach_backtrace(Stdlib[8], 1);
              });
    }
    function find_opt(t, d){
     var
      h = caml_call1(H[2], d),
      index = get_index(t, h),
      bucket = caml_check_bound(t[1], index)[1 + index],
      hashes = caml_check_bound(t[2], index)[1 + index],
      sz = length(bucket),
      i = 0;
     for(;;){
      if(sz <= i) return 0;
      if(h === caml_check_bound(hashes, i)[1 + i]){
       var match = get_copy(bucket, i);
       if(match){
        var v = match[1];
        if(caml_call2(H[1], v, d)){
         var v$0 = get(bucket, i);
         if(v$0) return v$0;
         var i$0 = i + 1 | 0;
         i = i$0;
         continue;
        }
       }
       var i$1 = i + 1 | 0;
       i = i$1;
      }
      else{var i$2 = i + 1 | 0; i = i$2;}
     }
    }
    function find_shadow(t, d, iffound, ifnotfound){
     var
      h = caml_call1(H[2], d),
      index = get_index(t, h),
      bucket = caml_check_bound(t[1], index)[1 + index],
      hashes = caml_check_bound(t[2], index)[1 + index],
      sz = length(bucket),
      i = 0;
     for(;;){
      if(sz <= i) return ifnotfound;
      if(h === caml_check_bound(hashes, i)[1 + i]){
       var match = get_copy(bucket, i);
       if(match){
        var v = match[1];
        if(caml_call2(H[1], v, d)) return caml_call2(iffound, bucket, i);
       }
       var i$0 = i + 1 | 0;
       i = i$0;
      }
      else{var i$1 = i + 1 | 0; i = i$1;}
     }
    }
    function remove(t, d){
     return find_shadow(t, d, function(w, i){return set(w, i, 0);}, 0);
    }
    function mem(t, d){
     return find_shadow(t, d, function(w, i){return 1;}, 0);
    }
    function find_all(t, d){
     var
      h = caml_call1(H[2], d),
      index = get_index(t, h),
      bucket = caml_check_bound(t[1], index)[1 + index],
      hashes = caml_check_bound(t[2], index)[1 + index],
      sz = length(bucket),
      i = 0,
      accu = 0;
     for(;;){
      if(sz <= i) return accu;
      if(h === caml_check_bound(hashes, i)[1 + i]){
       var match = get_copy(bucket, i);
       if(match){
        var v = match[1];
        if(caml_call2(H[1], v, d)){
         var match$0 = get(bucket, i);
         if(match$0){
          var v$0 = match$0[1], accu$0 = [0, v$0, accu], i$0 = i + 1 | 0;
          i = i$0;
          accu = accu$0;
          continue;
         }
         var i$1 = i + 1 | 0;
         i = i$1;
         continue;
        }
       }
       var i$2 = i + 1 | 0;
       i = i$2;
      }
      else{var i$3 = i + 1 | 0; i = i$3;}
     }
    }
    function stats(t){
     var
      len = t[1].length - 1,
      lens = caml_call2(Stdlib_Array[15], length, t[1]);
     caml_call2(Stdlib_Array[32], runtime.caml_int_compare, lens);
     var
      totlen =
        caml_call3
         (Stdlib_Array[17],
          function(_g_, _f_){return _g_ + _f_ | 0;},
          0,
          lens),
      _a_ = len - 1 | 0,
      _c_ = len / 2 | 0,
      _b_ = caml_check_bound(lens, _a_)[1 + _a_],
      _d_ = caml_check_bound(lens, _c_)[1 + _c_],
      _e_ = caml_check_bound(lens, 0)[1];
     return [0, len, count(t), totlen, _e_, _d_, _b_];
    }
    return [0,
            create$0,
            clear,
            merge,
            add,
            remove,
            find,
            find_opt,
            find_all,
            mem,
            iter,
            fold,
            count,
            stats];
   }
   var
    Stdlib_Weak =
      [0, create, length, set, get, get_copy, check, fill, blit, Make];
   runtime.caml_register_global(13, Stdlib_Weak, "Stdlib__Weak");
   return;
  }
  (globalThis));

//# 22408 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_register_named_value = runtime.caml_register_named_value,
    global_data = runtime.caml_get_global_data(),
    Stdlib_Obj = global_data.Stdlib__Obj,
    register = caml_register_named_value;
   function register_exception(name, exn){
    var
     _a_ = Stdlib_Obj[8],
     slot = runtime.caml_obj_tag(exn) === _a_ ? exn : exn[1];
    return caml_register_named_value(name, slot);
   }
   var Stdlib_Callback = [0, register, register_exception];
   runtime.caml_register_global(1, Stdlib_Callback, "Stdlib__Callback");
   return;
  }
  (globalThis));

//# 26624 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bigarray_Array3_of_array_n$1 =
      "Bigarray.Array3.of_array: non-cubic data",
    caml_ba_change_layout = runtime.caml_ba_change_layout,
    caml_ba_create = runtime.caml_ba_create,
    caml_ba_dim_1 = runtime.caml_ba_dim_1,
    caml_ba_dim_2 = runtime.caml_ba_dim_2,
    caml_ba_kind = runtime.caml_ba_kind,
    caml_ba_num_dims = runtime.caml_ba_num_dims,
    caml_ba_reshape = runtime.caml_ba_reshape,
    caml_ba_set_1 = runtime.caml_ba_set_1,
    caml_ba_set_2 = runtime.caml_ba_set_2,
    caml_ba_set_3 = runtime.caml_ba_set_3,
    caml_ba_set_generic = runtime.caml_ba_set_generic,
    caml_ba_slice = runtime.caml_ba_slice,
    caml_check_bound = runtime.caml_check_bound,
    caml_make_vect = runtime.caml_make_vect,
    caml_mul = runtime.caml_mul;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Sys = global_data.Stdlib__Sys;
   function kind_size_in_bytes(param){
    switch(param){
      case 0:
       return 4;
      case 1:
       return 8;
      case 2:
       return 1;
      case 3:
       return 1;
      case 4:
       return 2;
      case 5:
       return 2;
      case 6:
       return 4;
      case 7:
       return 8;
      case 8:
       return Stdlib_Sys[9] / 8 | 0;
      case 9:
       return Stdlib_Sys[9] / 8 | 0;
      case 10:
       return 8;
      case 11:
       return 16;
      default: return 1;
    }
   }
   var
    cst_Bigarray_Array2_of_array_n =
      "Bigarray.Array2.of_array: non-rectangular data",
    cst_Bigarray_Array3_of_array_n = cst_Bigarray_Array3_of_array_n$1,
    cst_Bigarray_Array3_of_array_n$0 = cst_Bigarray_Array3_of_array_n$1,
    cst_Bigarray_array0_of_genarra = "Bigarray.array0_of_genarray",
    cst_Bigarray_array1_of_genarra = "Bigarray.array1_of_genarray",
    cst_Bigarray_array2_of_genarra = "Bigarray.array2_of_genarray",
    cst_Bigarray_array3_of_genarra = "Bigarray.array3_of_genarray";
   function cloop(arr, idx, f, col, max){
    if(col === idx.length - 1){
     caml_ba_set_generic(arr, idx, caml_call1(f, idx));
     return;
    }
    var _am_ = caml_check_bound(max, col)[1 + col] - 1 | 0, _al_ = 0;
    if(_am_ >= 0){
     var j = _al_;
     for(;;){
      caml_check_bound(idx, col)[1 + col] = j;
      cloop(arr, idx, f, col + 1 | 0, max);
      var _an_ = j + 1 | 0;
      if(_am_ === j) break;
      j = _an_;
     }
    }
    return;
   }
   function floop(arr, idx, f, col, max){
    if(0 > col){caml_ba_set_generic(arr, idx, caml_call1(f, idx)); return;}
    var _aj_ = caml_check_bound(max, col)[1 + col], _ai_ = 1;
    if(_aj_ >= 1){
     var j = _ai_;
     for(;;){
      caml_check_bound(idx, col)[1 + col] = j;
      floop(arr, idx, f, col - 1 | 0, max);
      var _ak_ = j + 1 | 0;
      if(_aj_ === j) break;
      j = _ak_;
     }
    }
    return;
   }
   function init(kind, layout, dims, f){
    var arr = caml_ba_create(kind, layout, dims), match = dims.length - 1;
    return 0 === match
            ? arr
            : layout
              ? (floop
                 (arr, caml_make_vect(match, 1), f, match - 1 | 0, dims),
                arr)
              : (cloop(arr, caml_make_vect(match, 0), f, 0, dims), arr);
   }
   function dims(a){
    var
     n = caml_ba_num_dims(a),
     d = caml_make_vect(n, 0),
     _af_ = n - 1 | 0,
     _ae_ = 0;
    if(_af_ >= 0){
     var i = _ae_;
     for(;;){
      var _ag_ = runtime.caml_ba_dim(a, i);
      caml_check_bound(d, i)[1 + i] = _ag_;
      var _ah_ = i + 1 | 0;
      if(_af_ === i) break;
      i = _ah_;
     }
    }
    return d;
   }
   function size_in_bytes(arr){
    var
     _ac_ = dims(arr),
     _ad_ = caml_call3(Stdlib_Array[17], caml_mul, 1, _ac_);
    return caml_mul(kind_size_in_bytes(caml_ba_kind(arr)), _ad_);
   }
   function create(kind, layout){return caml_ba_create(kind, layout, [0]);}
   function get(arr){return runtime.caml_ba_get_generic(arr, [0]);}
   function set(arr){
    var _aa_ = [0];
    return function(_ab_){return caml_ba_set_generic(arr, _aa_, _ab_);};
   }
   function size_in_bytes$0(arr){
    return kind_size_in_bytes(caml_ba_kind(arr));
   }
   function of_value(kind, layout, v){
    var a = create(kind, layout);
    set(a)(v);
    return a;
   }
   function create$0(kind, layout, dim){
    return caml_ba_create(kind, layout, [0, dim]);
   }
   function size_in_bytes$1(arr){
    var _$_ = caml_ba_dim_1(arr);
    return caml_mul(kind_size_in_bytes(caml_ba_kind(arr)), _$_);
   }
   function slice(a, n){
    return runtime.caml_ba_layout(a)
            ? caml_ba_slice(a, [0, n])
            : caml_ba_slice(a, [0, n]);
   }
   function init$0(kind, layout, dim, f){
    var arr = create$0(kind, layout, dim);
    if(layout){
     var _Z_ = 1;
     if(dim >= 1){
      var i$0 = _Z_;
      for(;;){
       caml_ba_set_1(arr, i$0, caml_call1(f, i$0));
       var ___ = i$0 + 1 | 0;
       if(dim === i$0) break;
       i$0 = ___;
      }
     }
     return arr;
    }
    var _X_ = dim - 1 | 0, _W_ = 0;
    if(_X_ >= 0){
     var i = _W_;
     for(;;){
      caml_ba_set_1(arr, i, caml_call1(f, i));
      var _Y_ = i + 1 | 0;
      if(_X_ === i) break;
      i = _Y_;
     }
    }
    return arr;
   }
   function of_array(kind, layout, data){
    var
     ba = create$0(kind, layout, data.length - 1),
     ofs = layout ? 1 : 0,
     _U_ = data.length - 2 | 0,
     _T_ = 0;
    if(_U_ >= 0){
     var i = _T_;
     for(;;){
      caml_ba_set_1(ba, i + ofs | 0, caml_check_bound(data, i)[1 + i]);
      var _V_ = i + 1 | 0;
      if(_U_ === i) break;
      i = _V_;
     }
    }
    return ba;
   }
   function create$1(kind, layout, dim1, dim2){
    return caml_ba_create(kind, layout, [0, dim1, dim2]);
   }
   function size_in_bytes$2(arr){
    var _R_ = caml_ba_dim_2(arr), _S_ = caml_ba_dim_1(arr);
    return caml_mul(caml_mul(kind_size_in_bytes(caml_ba_kind(arr)), _S_), _R_);
   }
   function slice_left(a, n){return caml_ba_slice(a, [0, n]);}
   function slice_right(a, n){return caml_ba_slice(a, [0, n]);}
   function init$1(kind, layout, dim1, dim2, f){
    var arr = create$1(kind, layout, dim1, dim2);
    if(layout){
     var _N_ = 1;
     if(dim2 >= 1){
      var j$0 = _N_;
      for(;;){
       var _O_ = 1;
       if(dim1 >= 1){
        var i$0 = _O_;
        for(;;){
         caml_ba_set_2(arr, i$0, j$0, caml_call2(f, i$0, j$0));
         var _Q_ = i$0 + 1 | 0;
         if(dim1 === i$0) break;
         i$0 = _Q_;
        }
       }
       var _P_ = j$0 + 1 | 0;
       if(dim2 === j$0) break;
       j$0 = _P_;
      }
     }
     return arr;
    }
    var _I_ = dim1 - 1 | 0, _H_ = 0;
    if(_I_ >= 0){
     var i = _H_;
     for(;;){
      var _K_ = dim2 - 1 | 0, _J_ = 0;
      if(_K_ >= 0){
       var j = _J_;
       for(;;){
        caml_ba_set_2(arr, i, j, caml_call2(f, i, j));
        var _M_ = j + 1 | 0;
        if(_K_ === j) break;
        j = _M_;
       }
      }
      var _L_ = i + 1 | 0;
      if(_I_ === i) break;
      i = _L_;
     }
    }
    return arr;
   }
   function of_array$0(kind, layout, data){
    var
     dim1 = data.length - 1,
     dim2 = 0 === dim1 ? 0 : caml_check_bound(data, 0)[1].length - 1,
     ba = create$1(kind, layout, dim1, dim2),
     ofs = layout ? 1 : 0,
     _C_ = dim1 - 1 | 0,
     _B_ = 0;
    if(_C_ >= 0){
     var i = _B_;
     for(;;){
      var row = caml_check_bound(data, i)[1 + i];
      if(row.length - 1 !== dim2)
       caml_call1(Stdlib[1], cst_Bigarray_Array2_of_array_n);
      var _E_ = dim2 - 1 | 0, _D_ = 0;
      if(_E_ >= 0){
       var j = _D_;
       for(;;){
        caml_ba_set_2
         (ba, i + ofs | 0, j + ofs | 0, caml_check_bound(row, j)[1 + j]);
        var _G_ = j + 1 | 0;
        if(_E_ === j) break;
        j = _G_;
       }
      }
      var _F_ = i + 1 | 0;
      if(_C_ === i) break;
      i = _F_;
     }
    }
    return ba;
   }
   function create$2(kind, layout, dim1, dim2, dim3){
    return caml_ba_create(kind, layout, [0, dim1, dim2, dim3]);
   }
   function size_in_bytes$3(arr){
    var
     _y_ = runtime.caml_ba_dim_3(arr),
     _z_ = caml_ba_dim_2(arr),
     _A_ = caml_ba_dim_1(arr);
    return caml_mul
            (caml_mul
              (caml_mul(kind_size_in_bytes(caml_ba_kind(arr)), _A_), _z_),
             _y_);
   }
   function slice_left_1(a, n, m){return caml_ba_slice(a, [0, n, m]);}
   function slice_right_1(a, n, m){return caml_ba_slice(a, [0, n, m]);}
   function slice_left_2(a, n){return caml_ba_slice(a, [0, n]);}
   function slice_right_2(a, n){return caml_ba_slice(a, [0, n]);}
   function init$2(kind, layout, dim1, dim2, dim3, f){
    var arr = create$2(kind, layout, dim1, dim2, dim3);
    if(layout){
     var _s_ = 1;
     if(dim3 >= 1){
      var k$0 = _s_;
      for(;;){
       var _t_ = 1;
       if(dim2 >= 1){
        var j$0 = _t_;
        for(;;){
         var _v_ = 1;
         if(dim1 >= 1){
          var i$0 = _v_;
          for(;;){
           caml_ba_set_3(arr, i$0, j$0, k$0, caml_call3(f, i$0, j$0, k$0));
           var _x_ = i$0 + 1 | 0;
           if(dim1 === i$0) break;
           i$0 = _x_;
          }
         }
         var _w_ = j$0 + 1 | 0;
         if(dim2 === j$0) break;
         j$0 = _w_;
        }
       }
       var _u_ = k$0 + 1 | 0;
       if(dim3 === k$0) break;
       k$0 = _u_;
      }
     }
     return arr;
    }
    var _k_ = dim1 - 1 | 0, _j_ = 0;
    if(_k_ >= 0){
     var i = _j_;
     for(;;){
      var _m_ = dim2 - 1 | 0, _l_ = 0;
      if(_m_ >= 0){
       var j = _l_;
       for(;;){
        var _p_ = dim3 - 1 | 0, _o_ = 0;
        if(_p_ >= 0){
         var k = _o_;
         for(;;){
          caml_ba_set_3(arr, i, j, k, caml_call3(f, i, j, k));
          var _r_ = k + 1 | 0;
          if(_p_ === k) break;
          k = _r_;
         }
        }
        var _q_ = j + 1 | 0;
        if(_m_ === j) break;
        j = _q_;
       }
      }
      var _n_ = i + 1 | 0;
      if(_k_ === i) break;
      i = _n_;
     }
    }
    return arr;
   }
   function of_array$1(kind, layout, data){
    var
     dim1 = data.length - 1,
     dim2 = 0 === dim1 ? 0 : caml_check_bound(data, 0)[1].length - 1,
     dim3 =
       0 === dim2
        ? 0
        : caml_check_bound(caml_check_bound(data, 0)[1], 0)[1].length - 1,
     ba = create$2(kind, layout, dim1, dim2, dim3),
     ofs = layout ? 1 : 0,
     _b_ = dim1 - 1 | 0,
     _a_ = 0;
    if(_b_ >= 0){
     var i = _a_;
     for(;;){
      var row = caml_check_bound(data, i)[1 + i];
      if(row.length - 1 !== dim2)
       caml_call1(Stdlib[1], cst_Bigarray_Array3_of_array_n);
      var _d_ = dim2 - 1 | 0, _c_ = 0;
      if(_d_ >= 0){
       var j = _c_;
       for(;;){
        var col = caml_check_bound(row, j)[1 + j];
        if(col.length - 1 !== dim3)
         caml_call1(Stdlib[1], cst_Bigarray_Array3_of_array_n$0);
        var _g_ = dim3 - 1 | 0, _f_ = 0;
        if(_g_ >= 0){
         var k = _f_;
         for(;;){
          caml_ba_set_3
           (ba,
            i + ofs | 0,
            j + ofs | 0,
            k + ofs | 0,
            caml_check_bound(col, k)[1 + k]);
          var _i_ = k + 1 | 0;
          if(_g_ === k) break;
          k = _i_;
         }
        }
        var _h_ = j + 1 | 0;
        if(_d_ === j) break;
        j = _h_;
       }
      }
      var _e_ = i + 1 | 0;
      if(_b_ === i) break;
      i = _e_;
     }
    }
    return ba;
   }
   function array0_of_genarray(a){
    return 0 === caml_ba_num_dims(a)
            ? a
            : caml_call1(Stdlib[1], cst_Bigarray_array0_of_genarra);
   }
   function array1_of_genarray(a){
    return 1 === caml_ba_num_dims(a)
            ? a
            : caml_call1(Stdlib[1], cst_Bigarray_array1_of_genarra);
   }
   function array2_of_genarray(a){
    return 2 === caml_ba_num_dims(a)
            ? a
            : caml_call1(Stdlib[1], cst_Bigarray_array2_of_genarra);
   }
   function array3_of_genarray(a){
    return 3 === caml_ba_num_dims(a)
            ? a
            : caml_call1(Stdlib[1], cst_Bigarray_array3_of_genarra);
   }
   function reshape_0(a){return caml_ba_reshape(a, [0]);}
   function reshape_1(a, dim1){return caml_ba_reshape(a, [0, dim1]);}
   function reshape_2(a, dim1, dim2){
    return caml_ba_reshape(a, [0, dim1, dim2]);
   }
   function reshape_3(a, dim1, dim2, dim3){
    return caml_ba_reshape(a, [0, dim1, dim2, dim3]);
   }
   var
    Stdlib_Bigarray =
      [0,
       0,
       1,
       10,
       11,
       2,
       3,
       4,
       5,
       8,
       6,
       7,
       9,
       12,
       kind_size_in_bytes,
       0,
       1,
       [0, init, dims, size_in_bytes],
       [0,
        create,
        of_value,
        caml_ba_change_layout,
        size_in_bytes$0,
        get,
        set,
        of_value],
       [0,
        create$0,
        init$0,
        caml_ba_change_layout,
        size_in_bytes$1,
        slice,
        of_array],
       [0,
        create$1,
        init$1,
        caml_ba_change_layout,
        size_in_bytes$2,
        slice_left,
        slice_right,
        of_array$0],
       [0,
        create$2,
        init$2,
        caml_ba_change_layout,
        size_in_bytes$3,
        slice_left_1,
        slice_right_1,
        slice_left_2,
        slice_right_2,
        of_array$1],
       array0_of_genarray,
       array1_of_genarray,
       array2_of_genarray,
       array3_of_genarray,
       caml_ba_reshape,
       reshape_0,
       reshape_1,
       reshape_2,
       reshape_3];
   runtime.caml_register_global(10, Stdlib_Bigarray, "Stdlib__Bigarray");
   return;
  }
  (globalThis));


//# 1 "../.js/default/unix/unix.cma.js"
// Generated by js_of_ocaml
//# 3 "../.js/default/unix/unix.cma.js"

//# 7 "../.js/default/unix/unix.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$6 = "",
    cst$7 = ", ",
    cst_c$1 = "-c",
    cst_bin_sh = "/bin/sh",
    cst_0_0_0_0$0 = "0.0.0.0",
    cst_127_0_0_1$0 = "127.0.0.1",
    cst_Unix_Unix_error = "Unix.Unix_error",
    cst_tcp$2 = "tcp",
    cst_udp$2 = "udp",
    caml_channel_descriptor = runtime.caml_channel_descriptor,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_unix_inet_addr_of_string = runtime.caml_unix_inet_addr_of_string,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$5 = cst$6,
    cst$4 = cst$6,
    cst$1 = ': "',
    cst$2 = '"',
    cst$3 = ": ",
    shell = cst_bin_sh,
    cst = cst$6,
    cst$0 = cst$6,
    Stdlib = global_data.Stdlib,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Fun = global_data.Stdlib__Fun,
    Stdlib_Int = global_data.Stdlib__Int;
   global_data.Stdlib__Array;
   var
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Callback = global_data.Stdlib__Callback,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Unix_error = [248, cst_Unix_Unix_error, runtime.caml_fresh_oo_id(0)];
   caml_call2
    (Stdlib_Callback[2], cst_Unix_Unix_error, [0, Unix_error, 0, cst$0, cst]);
   var
    cst_E2BIG = "E2BIG",
    _a_ =
      [0,
       [11,
        "Unix.Unix_error(Unix.",
        [2, 0, [11, cst$7, [3, 0, [11, cst$7, [3, 0, [12, 41, 0]]]]]]],
       "Unix.Unix_error(Unix.%s, %S, %S)"],
    cst_EACCES = "EACCES",
    cst_EAGAIN = "EAGAIN",
    cst_EBADF = "EBADF",
    cst_EBUSY = "EBUSY",
    cst_ECHILD = "ECHILD",
    cst_EDEADLK = "EDEADLK",
    cst_EDOM = "EDOM",
    cst_EEXIST = "EEXIST",
    cst_EFAULT = "EFAULT",
    cst_EFBIG = "EFBIG",
    cst_EINTR = "EINTR",
    cst_EINVAL = "EINVAL",
    cst_EIO = "EIO",
    cst_EISDIR = "EISDIR",
    cst_EMFILE = "EMFILE",
    cst_EMLINK = "EMLINK",
    cst_ENAMETOOLONG = "ENAMETOOLONG",
    cst_ENFILE = "ENFILE",
    cst_ENODEV = "ENODEV",
    cst_ENOENT = "ENOENT",
    cst_ENOEXEC = "ENOEXEC",
    cst_ENOLCK = "ENOLCK",
    cst_ENOMEM = "ENOMEM",
    cst_ENOSPC = "ENOSPC",
    cst_ENOSYS = "ENOSYS",
    cst_ENOTDIR = "ENOTDIR",
    cst_ENOTEMPTY = "ENOTEMPTY",
    cst_ENOTTY = "ENOTTY",
    cst_ENXIO = "ENXIO",
    cst_EPERM = "EPERM",
    cst_EPIPE = "EPIPE",
    cst_ERANGE = "ERANGE",
    cst_EROFS = "EROFS",
    cst_ESPIPE = "ESPIPE",
    cst_ESRCH = "ESRCH",
    cst_EXDEV = "EXDEV",
    cst_EWOULDBLOCK = "EWOULDBLOCK",
    cst_EINPROGRESS = "EINPROGRESS",
    cst_EALREADY = "EALREADY",
    cst_ENOTSOCK = "ENOTSOCK",
    cst_EDESTADDRREQ = "EDESTADDRREQ",
    cst_EMSGSIZE = "EMSGSIZE",
    cst_EPROTOTYPE = "EPROTOTYPE",
    cst_ENOPROTOOPT = "ENOPROTOOPT",
    cst_EPROTONOSUPPORT = "EPROTONOSUPPORT",
    cst_ESOCKTNOSUPPORT = "ESOCKTNOSUPPORT",
    cst_EOPNOTSUPP = "EOPNOTSUPP",
    cst_EPFNOSUPPORT = "EPFNOSUPPORT",
    cst_EAFNOSUPPORT = "EAFNOSUPPORT",
    cst_EADDRINUSE = "EADDRINUSE",
    cst_EADDRNOTAVAIL = "EADDRNOTAVAIL",
    cst_ENETDOWN = "ENETDOWN",
    cst_ENETUNREACH = "ENETUNREACH",
    cst_ENETRESET = "ENETRESET",
    cst_ECONNABORTED = "ECONNABORTED",
    cst_ECONNRESET = "ECONNRESET",
    cst_ENOBUFS = "ENOBUFS",
    cst_EISCONN = "EISCONN",
    cst_ENOTCONN = "ENOTCONN",
    cst_ESHUTDOWN = "ESHUTDOWN",
    cst_ETOOMANYREFS = "ETOOMANYREFS",
    cst_ETIMEDOUT = "ETIMEDOUT",
    cst_ECONNREFUSED = "ECONNREFUSED",
    cst_EHOSTDOWN = "EHOSTDOWN",
    cst_EHOSTUNREACH = "EHOSTUNREACH",
    cst_ELOOP = "ELOOP",
    cst_EOVERFLOW = "EOVERFLOW",
    _b_ = [0, [11, "EUNKNOWNERR ", [4, 0, 0, 0, 0]], "EUNKNOWNERR %d"];
   caml_call1
    (Stdlib_Printexc[9],
     function(param){
      if(param[1] !== Unix_error) return 0;
      var s = param[4], s$0 = param[3], e = param[2];
      if(typeof e === "number"){
       var _cS_ = e;
       if(34 <= _cS_)
        switch(_cS_){
          case 34:
           var msg = cst_ESPIPE; break;
          case 35:
           var msg = cst_ESRCH; break;
          case 36:
           var msg = cst_EXDEV; break;
          case 37:
           var msg = cst_EWOULDBLOCK; break;
          case 38:
           var msg = cst_EINPROGRESS; break;
          case 39:
           var msg = cst_EALREADY; break;
          case 40:
           var msg = cst_ENOTSOCK; break;
          case 41:
           var msg = cst_EDESTADDRREQ; break;
          case 42:
           var msg = cst_EMSGSIZE; break;
          case 43:
           var msg = cst_EPROTOTYPE; break;
          case 44:
           var msg = cst_ENOPROTOOPT; break;
          case 45:
           var msg = cst_EPROTONOSUPPORT; break;
          case 46:
           var msg = cst_ESOCKTNOSUPPORT; break;
          case 47:
           var msg = cst_EOPNOTSUPP; break;
          case 48:
           var msg = cst_EPFNOSUPPORT; break;
          case 49:
           var msg = cst_EAFNOSUPPORT; break;
          case 50:
           var msg = cst_EADDRINUSE; break;
          case 51:
           var msg = cst_EADDRNOTAVAIL; break;
          case 52:
           var msg = cst_ENETDOWN; break;
          case 53:
           var msg = cst_ENETUNREACH; break;
          case 54:
           var msg = cst_ENETRESET; break;
          case 55:
           var msg = cst_ECONNABORTED; break;
          case 56:
           var msg = cst_ECONNRESET; break;
          case 57:
           var msg = cst_ENOBUFS; break;
          case 58:
           var msg = cst_EISCONN; break;
          case 59:
           var msg = cst_ENOTCONN; break;
          case 60:
           var msg = cst_ESHUTDOWN; break;
          case 61:
           var msg = cst_ETOOMANYREFS; break;
          case 62:
           var msg = cst_ETIMEDOUT; break;
          case 63:
           var msg = cst_ECONNREFUSED; break;
          case 64:
           var msg = cst_EHOSTDOWN; break;
          case 65:
           var msg = cst_EHOSTUNREACH; break;
          case 66:
           var msg = cst_ELOOP; break;
          default: var msg = cst_EOVERFLOW;
        }
       else
        switch(_cS_){
          case 0:
           var msg = cst_E2BIG; break;
          case 1:
           var msg = cst_EACCES; break;
          case 2:
           var msg = cst_EAGAIN; break;
          case 3:
           var msg = cst_EBADF; break;
          case 4:
           var msg = cst_EBUSY; break;
          case 5:
           var msg = cst_ECHILD; break;
          case 6:
           var msg = cst_EDEADLK; break;
          case 7:
           var msg = cst_EDOM; break;
          case 8:
           var msg = cst_EEXIST; break;
          case 9:
           var msg = cst_EFAULT; break;
          case 10:
           var msg = cst_EFBIG; break;
          case 11:
           var msg = cst_EINTR; break;
          case 12:
           var msg = cst_EINVAL; break;
          case 13:
           var msg = cst_EIO; break;
          case 14:
           var msg = cst_EISDIR; break;
          case 15:
           var msg = cst_EMFILE; break;
          case 16:
           var msg = cst_EMLINK; break;
          case 17:
           var msg = cst_ENAMETOOLONG; break;
          case 18:
           var msg = cst_ENFILE; break;
          case 19:
           var msg = cst_ENODEV; break;
          case 20:
           var msg = cst_ENOENT; break;
          case 21:
           var msg = cst_ENOEXEC; break;
          case 22:
           var msg = cst_ENOLCK; break;
          case 23:
           var msg = cst_ENOMEM; break;
          case 24:
           var msg = cst_ENOSPC; break;
          case 25:
           var msg = cst_ENOSYS; break;
          case 26:
           var msg = cst_ENOTDIR; break;
          case 27:
           var msg = cst_ENOTEMPTY; break;
          case 28:
           var msg = cst_ENOTTY; break;
          case 29:
           var msg = cst_ENXIO; break;
          case 30:
           var msg = cst_EPERM; break;
          case 31:
           var msg = cst_EPIPE; break;
          case 32:
           var msg = cst_ERANGE; break;
          default: var msg = cst_EROFS;
        }
      }
      else
       var x = e[1], msg = caml_call2(Stdlib_Printf[4], _b_, x);
      return [0, caml_call4(Stdlib_Printf[4], _a_, msg, s$0, s)];
     });
   var cst_failed = '" failed', cst_on = ' on "';
   function handle_unix_error(f, arg){
    try{var _cR_ = caml_call1(f, arg); return _cR_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Unix_error) throw caml_maybe_attach_backtrace(exn, 0);
     var
      arg$0 = exn[4],
      fun_name = exn[3],
      err = exn[2],
      _cP_ = runtime.caml_check_bound(runtime.caml_sys_argv(0), 0)[1];
     caml_call1(Stdlib[49], _cP_);
     caml_call1(Stdlib[49], cst$1);
     caml_call1(Stdlib[49], fun_name);
     caml_call1(Stdlib[49], cst_failed);
     if(0 < caml_ml_string_length(arg$0)){
      caml_call1(Stdlib[49], cst_on);
      caml_call1(Stdlib[49], arg$0);
      caml_call1(Stdlib[49], cst$2);
     }
     caml_call1(Stdlib[49], cst$3);
     var _cQ_ = runtime.unix_error_message(err);
     caml_call1(Stdlib[53], _cQ_);
     return caml_call1(Stdlib[99], 2);
    }
   }
   var
    stdin = 0,
    stdout = 1,
    stderr = 2,
    cst_Unix_read = "Unix.read",
    cst_Unix_write = "Unix.write",
    cst_Unix_single_write = "Unix.single_write",
    _c_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0);
   function read(fd, buf, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(buf) - len | 0) >= ofs)
     return runtime.unix_read(fd, buf, ofs, len);
    return caml_call1(Stdlib[1], cst_Unix_read);
   }
   function write(fd, buf, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(buf) - len | 0) >= ofs)
     return runtime.unix_write(fd, buf, ofs, len);
    return caml_call1(Stdlib[1], cst_Unix_write);
   }
   function single_write(fd, buf, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(buf) - len | 0) >= ofs)
     return runtime.unix_single_write(fd, buf, ofs, len);
    return caml_call1(Stdlib[1], cst_Unix_single_write);
   }
   function write_substring(fd, buf, ofs, len){
    return write(fd, caml_call1(Stdlib_Bytes[49], buf), ofs, len);
   }
   function single_write_substring(fd, buf, ofs, len){
    return single_write(fd, caml_call1(Stdlib_Bytes[49], buf), ofs, len);
   }
   function map_file(fd, opt, kind, layout, shared, dims){
    if(opt) var sth = opt[1], pos = sth; else var pos = _c_;
    return runtime.caml_unix_map_file_bytecode
            (fd, kind, layout, shared, dims, pos);
   }
   function pause(param){
    var sigs = runtime.unix_sigprocmask(1, 0);
    return runtime.unix_sigsuspend(sigs);
   }
   function sleep(duration){return runtime.unix_sleep(duration);}
   function is_inet6_addr(s){return 16 === caml_ml_string_length(s) ? 1 : 0;}
   var
    inet_addr_any = caml_unix_inet_addr_of_string(cst_0_0_0_0$0),
    inet_addr_loopback = caml_unix_inet_addr_of_string(cst_127_0_0_1$0),
    inet6_addr_any = caml_unix_inet_addr_of_string("::"),
    inet6_addr_loopback = caml_unix_inet_addr_of_string("::1"),
    cst_Unix_recv = "Unix.recv",
    cst_Unix_recvfrom = "Unix.recvfrom",
    cst_Unix_send = "Unix.send",
    cst_Unix_sendto = "Unix.sendto",
    cst_udp = cst_udp$2,
    cst_0_0_0_0 = cst_0_0_0_0$0,
    cst_127_0_0_1 = cst_127_0_0_1$0,
    cst_tcp = cst_tcp$2,
    cst_udp$0 = cst_udp$2,
    cst_tcp$0 = cst_tcp$2,
    cst_udp$1 = cst_udp$2,
    cst_tcp$1 = cst_tcp$2,
    cst_c = cst_c$1,
    _d_ = [0, 1];
   function domain_of_sockaddr(param){
    if(0 === param[0]) return 0;
    var a = param[1];
    return is_inet6_addr(a) ? 2 : 1;
   }
   function recv(fd, buf, ofs, len, flags){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(buf) - len | 0) >= ofs)
     return runtime.unix_recv(fd, buf, ofs, len, flags);
    return caml_call1(Stdlib[1], cst_Unix_recv);
   }
   function recvfrom(fd, buf, ofs, len, flags){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(buf) - len | 0) >= ofs)
     return runtime.unix_recvfrom(fd, buf, ofs, len, flags);
    return caml_call1(Stdlib[1], cst_Unix_recvfrom);
   }
   function send(fd, buf, ofs, len, flags){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(buf) - len | 0) >= ofs)
     return runtime.unix_send(fd, buf, ofs, len, flags);
    return caml_call1(Stdlib[1], cst_Unix_send);
   }
   function sendto(fd, buf, ofs, len, flags, addr){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(buf) - len | 0) >= ofs)
     return runtime.unix_sendto(fd, buf, ofs, len, flags, addr);
    return caml_call1(Stdlib[1], cst_Unix_sendto);
   }
   function send_substring(fd, buf, ofs, len, flags){
    return send(fd, caml_call1(Stdlib_Bytes[49], buf), ofs, len, flags);
   }
   function sendto_substring(fd, buf, ofs, len, flags, addr){
    return sendto
            (fd, caml_call1(Stdlib_Bytes[49], buf), ofs, len, flags, addr);
   }
   function getsockopt(fd, opt){return runtime.unix_getsockopt(0, fd, opt);}
   function setsockopt(fd, opt, v){
    return runtime.unix_setsockopt(0, fd, opt, v);
   }
   function getsockopt_int(fd, opt){
    return runtime.unix_getsockopt(1, fd, opt);
   }
   function setsockopt_int(fd, opt, v){
    return runtime.unix_setsockopt(1, fd, opt, v);
   }
   function getsockopt_optint(fd, opt){
    return runtime.unix_getsockopt(2, fd, opt);
   }
   function setsockopt_optint(fd, opt, v){
    return runtime.unix_setsockopt(2, fd, opt, v);
   }
   function getsockopt_float(fd, opt){
    return runtime.unix_getsockopt(3, fd, opt);
   }
   function setsockopt_float(fd, opt, v){
    return runtime.unix_setsockopt(3, fd, opt, v);
   }
   function getsockopt_error(fd){return runtime.unix_getsockopt(4, fd, 0);}
   function getaddrinfo(node, service, opts){
    try{
     var
      _cG_ = runtime.unix_getaddrinfo(node, service, opts),
      _cH_ = caml_call1(Stdlib_List[9], _cG_);
     return _cH_;
    }
    catch(_cI_){
     var _cF_ = caml_wrap_exception(_cI_);
     if(_cF_[1] !== Stdlib[6]) throw caml_maybe_attach_backtrace(_cF_, 0);
     var opt_socktype = [0, 0], opt_protocol = [0, 0];
     caml_call2
      (Stdlib_List[17],
       function(param){
        if(typeof param === "number"){if(2 === param) return 0;}
        else
         switch(param[0]){
           case 1:
            var s = param[1]; opt_socktype[1] = [0, s]; return 0;
           case 2:
            var p = param[1]; opt_protocol[1] = p; return 0;
         }
        return 0;
       },
       opts);
     var
      get_port =
        function(ty, kind){
         if(service == cst$6) return [0, [0, ty, 0], 0];
         try{
          var _cM_ = [0, [0, ty, runtime.caml_int_of_string(service)], 0];
          return _cM_;
         }
         catch(_cN_){
          var _cJ_ = caml_wrap_exception(_cN_);
          if(_cJ_[1] !== Stdlib[7])
           throw caml_maybe_attach_backtrace(_cJ_, 0);
          try{
           var
            _cL_ =
              [0, [0, ty, runtime.unix_getservbyname(service, kind)[3]], 0];
           return _cL_;
          }
          catch(_cO_){
           var _cK_ = caml_wrap_exception(_cO_);
           if(_cK_ === Stdlib[8]) return 0;
           throw caml_maybe_attach_backtrace(_cK_, 0);
          }
         }
        },
      _cA_ = opt_socktype[1];
     if(_cA_)
      var
       ty = _cA_[1],
       _cB_ =
         1 === ty
          ? get_port(1, cst_udp)
          : ty
            ? service == cst$6 ? [0, [0, ty, 0], 0] : 0
            : get_port(0, cst_tcp),
       ports = _cB_;
     else
      var
       _cD_ = get_port(1, cst_udp$0),
       _cE_ = get_port(0, cst_tcp$0),
       ports = caml_call2(Stdlib[37], _cE_, _cD_);
     var
      addresses =
        node == cst$6
         ? caml_call2
            (Stdlib_List[36], 2, opts)
           ? [0, [0, inet_addr_any, cst_0_0_0_0], 0]
           : [0, [0, inet_addr_loopback, cst_127_0_0_1], 0]
         : [0, [0, caml_unix_inet_addr_of_string(node), node], 0],
      _cC_ =
        caml_call2
         (Stdlib_List[19],
          function(param){
           var port = param[2], ty = param[1];
           return caml_call2
                   (Stdlib_List[19],
                    function(param){
                     var name = param[2], addr = param[1];
                     return [0, 1, ty, opt_protocol[1], [1, addr, port], name];
                    },
                    addresses);
          },
          ports);
     return caml_call1(Stdlib_List[14], _cC_);
    }
   }
   function getnameinfo(addr, opts){
    try{var _cw_ = runtime.unix_getnameinfo(addr, opts); return _cw_;}
    catch(_cx_){
     var _cv_ = caml_wrap_exception(_cx_);
     if(_cv_[1] !== Stdlib[6]) throw caml_maybe_attach_backtrace(_cv_, 0);
     if(0 === addr[0]){var f = addr[1]; return [0, cst$4, f];}
     var p = addr[2], a = addr[1];
     try{
      if(caml_call2(Stdlib_List[36], 1, opts))
       throw caml_maybe_attach_backtrace(Stdlib[8], 1);
      var _cu_ = runtime.unix_gethostbyaddr(a)[1], hostname = _cu_;
     }
     catch(_cz_){
      var _cr_ = caml_wrap_exception(_cz_);
      if(_cr_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_cr_, 0);
      if(caml_call2(Stdlib_List[36], 2, opts))
       throw caml_maybe_attach_backtrace(Stdlib[8], 1);
      var hostname = runtime.unix_string_of_inet_addr(a);
     }
     try{
      if(caml_call2(Stdlib_List[36], 3, opts))
       throw caml_maybe_attach_backtrace(Stdlib[8], 1);
      var
       kind = caml_call2(Stdlib_List[36], 4, opts) ? cst_udp$1 : cst_tcp$1,
       _ct_ = runtime.unix_getservbyport(p, kind)[1],
       service = _ct_;
     }
     catch(_cy_){
      var _cs_ = caml_wrap_exception(_cy_);
      if(_cs_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_cs_, 0);
      var service = caml_call1(Stdlib_Int[12], p);
     }
     return [0, hostname, service];
    }
   }
   function waitpid_non_intr(pid){
    for(;;)
     try{var _cp_ = runtime.unix_waitpid(0, pid); return _cp_;}
     catch(_cq_){
      var _cn_ = caml_wrap_exception(_cq_);
      if(_cn_[1] === Unix_error){
       var _co_ = _cn_[2];
       if(typeof _co_ === "number" && 11 === _co_) continue;
      }
      throw caml_maybe_attach_backtrace(_cn_, 0);
     }
   }
   function system(cmd){
    var
     pid =
       runtime.unix_spawn
        (cst_bin_sh, [0, shell, cst_c, cmd], 0, 0, [0, 0, 1, 2]);
    return waitpid_non_intr(pid)[2];
   }
   function create_process_gen
   (cmd, args, optenv, new_stdin, new_stdout, new_stderr){
    var toclose = [0, 0];
    function close_after(param){
     return caml_call2
             (Stdlib_List[17],
              function(fd){
               try{var _cl_ = runtime.unix_close(fd); return _cl_;}
               catch(_cm_){
                var _ck_ = caml_wrap_exception(_cm_);
                if(_ck_[1] === Unix_error) return 0;
                throw caml_maybe_attach_backtrace(_ck_, 0);
               }
              },
              toclose[1]);
    }
    function file_descr_not_standard(fd){
     var fd$0 = fd;
     for(;;){
      if(3 <= fd$0) return fd$0;
      var fd$1 = runtime.unix_dup(_d_, fd$0);
      toclose[1] = [0, fd$1, toclose[1]];
      fd$0 = fd$1;
     }
    }
    var
     _ch_ = 2 === new_stderr ? 2 : file_descr_not_standard(new_stderr),
     _ci_ = 1 === new_stdout ? 1 : file_descr_not_standard(new_stdout),
     _cj_ = 0 === new_stdin ? 0 : file_descr_not_standard(new_stdin),
     redirections = [0, _cj_, _ci_, _ch_];
    return caml_call2
            (Stdlib_Fun[4],
             close_after,
             function(param){
              return runtime.unix_spawn(cmd, args, optenv, 1, redirections);
             });
   }
   function create_process(cmd, args, new_stdin, new_stdout, new_stderr){
    return create_process_gen(cmd, args, 0, new_stdin, new_stdout, new_stderr);
   }
   function create_process_env
   (cmd, args, env, new_stdin, new_stdout, new_stderr){
    return create_process_gen
            (cmd, args, [0, env], new_stdin, new_stdout, new_stderr);
   }
   var
    popen_processes = caml_call2(Stdlib_Hashtbl[1], 0, 7),
    _e_ = [0, 1],
    _f_ = [0, 1],
    _g_ = [0, 1],
    _h_ = [0, 1],
    _i_ = [0, 1],
    _j_ = [0, 1],
    _k_ = [0, 1],
    cst_c$0 = cst_c$1,
    cst_process_in_pid = "process_in_pid",
    cst_process_out_pid = "process_out_pid",
    cst_process_pid = "process_pid",
    cst_process_full_pid = "process_full_pid",
    cst_close_process_in = "close_process_in",
    cst_close_process_out = "close_process_out",
    cst_close_process = "close_process",
    cst_close_process_full = "close_process_full",
    _l_ = [0, 1],
    _m_ = [0, 1],
    _n_ = [0, 1];
   function open_proc(prog, args, envopt, proc, input, output, error){
    var pid = create_process_gen(prog, args, envopt, input, output, error);
    return caml_call3(Stdlib_Hashtbl[5], popen_processes, proc, pid);
   }
   function open_process_args_in(prog, args){
    var
     match = runtime.unix_pipe(_e_, 0),
     in_write = match[2],
     in_read = match[1],
     inchan = runtime.unix_inchannel_of_filedescr(in_read);
    try{open_proc(prog, args, 0, [1, inchan], stdin, in_write, stderr);}
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     caml_call1(Stdlib[93], inchan);
     runtime.unix_close(in_write);
     throw caml_maybe_attach_backtrace(e, 0);
    }
    runtime.unix_close(in_write);
    return inchan;
   }
   function open_process_args_out(prog, args){
    var
     match = runtime.unix_pipe(_f_, 0),
     out_write = match[2],
     out_read = match[1],
     outchan = runtime.unix_outchannel_of_filedescr(out_write);
    try{open_proc(prog, args, 0, [2, outchan], out_read, stdout, stderr);}
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     caml_call1(Stdlib[76], outchan);
     runtime.unix_close(out_read);
     throw caml_maybe_attach_backtrace(e, 0);
    }
    runtime.unix_close(out_read);
    return outchan;
   }
   function open_process_args(prog, args){
    var
     match = runtime.unix_pipe(_g_, 0),
     in_write = match[2],
     in_read = match[1];
    try{var match$0 = runtime.unix_pipe(_h_, 0);}
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     runtime.unix_close(in_read);
     runtime.unix_close(in_write);
     throw caml_maybe_attach_backtrace(e, 0);
    }
    var
     out_write = match$0[2],
     out_read = match$0[1],
     inchan = runtime.unix_inchannel_of_filedescr(in_read),
     outchan = runtime.unix_outchannel_of_filedescr(out_write);
    try{
     open_proc
      (prog, args, 0, [0, inchan, outchan], out_read, in_write, stderr);
    }
    catch(e){
     var e$0 = caml_wrap_exception(e);
     runtime.unix_close(out_read);
     runtime.unix_close(out_write);
     runtime.unix_close(in_read);
     runtime.unix_close(in_write);
     throw caml_maybe_attach_backtrace(e$0, 0);
    }
    runtime.unix_close(out_read);
    runtime.unix_close(in_write);
    return [0, inchan, outchan];
   }
   function open_process_args_full(prog, args, env){
    var
     match = runtime.unix_pipe(_i_, 0),
     in_write = match[2],
     in_read = match[1];
    try{var match$0 = runtime.unix_pipe(_j_, 0);}
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     runtime.unix_close(in_read);
     runtime.unix_close(in_write);
     throw caml_maybe_attach_backtrace(e, 0);
    }
    var out_write = match$0[2], out_read = match$0[1];
    try{var match$1 = runtime.unix_pipe(_k_, 0);}
    catch(e){
     var e$0 = caml_wrap_exception(e);
     runtime.unix_close(in_read);
     runtime.unix_close(in_write);
     runtime.unix_close(out_read);
     runtime.unix_close(out_write);
     throw caml_maybe_attach_backtrace(e$0, 0);
    }
    var
     err_write = match$1[2],
     err_read = match$1[1],
     inchan = runtime.unix_inchannel_of_filedescr(in_read),
     outchan = runtime.unix_outchannel_of_filedescr(out_write),
     errchan = runtime.unix_inchannel_of_filedescr(err_read);
    try{
     open_proc
      (prog,
       args,
       [0, env],
       [3, inchan, outchan, errchan],
       out_read,
       in_write,
       err_write);
    }
    catch(e){
     var e$1 = caml_wrap_exception(e);
     runtime.unix_close(out_read);
     runtime.unix_close(out_write);
     runtime.unix_close(in_read);
     runtime.unix_close(in_write);
     runtime.unix_close(err_read);
     runtime.unix_close(err_write);
     throw caml_maybe_attach_backtrace(e$1, 0);
    }
    runtime.unix_close(out_read);
    runtime.unix_close(in_write);
    runtime.unix_close(err_write);
    return [0, inchan, outchan, errchan];
   }
   function open_process_shell(fn, cmd){
    return caml_call2(fn, shell, [0, shell, cst_c$0, cmd]);
   }
   function open_process_in(cmd){
    return open_process_shell(open_process_args_in, cmd);
   }
   function open_process_out(cmd){
    return open_process_shell(open_process_args_out, cmd);
   }
   function open_process(cmd){
    return open_process_shell(open_process_args, cmd);
   }
   function open_process_full(cmd){
    return open_process_shell(open_process_args_full, cmd);
   }
   function find_proc_id(fun_name, proc){
    try{
     var _cf_ = caml_call2(Stdlib_Hashtbl[6], popen_processes, proc);
     return _cf_;
    }
    catch(_cg_){
     var _ce_ = caml_wrap_exception(_cg_);
     if(_ce_ === Stdlib[8])
      throw caml_maybe_attach_backtrace
             ([0, Unix_error, 3, fun_name, cst$5], 1);
     throw caml_maybe_attach_backtrace(_ce_, 0);
    }
   }
   function remove_proc_id(proc){
    return caml_call2(Stdlib_Hashtbl[10], popen_processes, proc);
   }
   function process_in_pid(inchan){
    return find_proc_id(cst_process_in_pid, [1, inchan]);
   }
   function process_out_pid(outchan){
    return find_proc_id(cst_process_out_pid, [2, outchan]);
   }
   function process_pid(param){
    var outchan = param[2], inchan = param[1];
    return find_proc_id(cst_process_pid, [0, inchan, outchan]);
   }
   function process_full_pid(param){
    var errchan = param[3], outchan = param[2], inchan = param[1];
    return find_proc_id(cst_process_full_pid, [3, inchan, outchan, errchan]);
   }
   function close_process_in(inchan){
    var proc = [1, inchan], pid = find_proc_id(cst_close_process_in, proc);
    remove_proc_id(proc);
    caml_call1(Stdlib[93], inchan);
    return waitpid_non_intr(pid)[2];
   }
   function close_process_out(outchan){
    var proc = [2, outchan], pid = find_proc_id(cst_close_process_out, proc);
    remove_proc_id(proc);
    try{caml_call1(Stdlib[76], outchan);}
    catch(_cd_){
     var _cc_ = caml_wrap_exception(_cd_);
     if(_cc_[1] !== Stdlib[11]) throw caml_maybe_attach_backtrace(_cc_, 0);
    }
    return waitpid_non_intr(pid)[2];
   }
   function close_process(param){
    var
     outchan = param[2],
     inchan = param[1],
     proc = [0, inchan, outchan],
     pid = find_proc_id(cst_close_process, proc);
    remove_proc_id(proc);
    caml_call1(Stdlib[93], inchan);
    try{caml_call1(Stdlib[76], outchan);}
    catch(_cb_){
     var _ca_ = caml_wrap_exception(_cb_);
     if(_ca_[1] !== Stdlib[11]) throw caml_maybe_attach_backtrace(_ca_, 0);
    }
    return waitpid_non_intr(pid)[2];
   }
   function close_process_full(param){
    var
     errchan = param[3],
     outchan = param[2],
     inchan = param[1],
     proc = [3, inchan, outchan, errchan],
     pid = find_proc_id(cst_close_process_full, proc);
    remove_proc_id(proc);
    caml_call1(Stdlib[93], inchan);
    try{caml_call1(Stdlib[76], outchan);}
    catch(_b$_){
     var _b__ = caml_wrap_exception(_b$_);
     if(_b__[1] !== Stdlib[11]) throw caml_maybe_attach_backtrace(_b__, 0);
    }
    caml_call1(Stdlib[93], errchan);
    return waitpid_non_intr(pid)[2];
   }
   function open_connection(sockaddr){
    var sock = runtime.unix_socket(_l_, domain_of_sockaddr(sockaddr), 0, 0);
    try{
     runtime.unix_connect(sock, sockaddr);
     var
      _b8_ = runtime.unix_outchannel_of_filedescr(sock),
      _b9_ = [0, runtime.unix_inchannel_of_filedescr(sock), _b8_];
     return _b9_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     runtime.unix_close(sock);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function shutdown_connection(inchan){
    return runtime.unix_shutdown(caml_channel_descriptor(inchan), 1);
   }
   function establish_server(server_fun, sockaddr){
    var sock = runtime.unix_socket(_n_, domain_of_sockaddr(sockaddr), 0, 0);
    runtime.unix_setsockopt(0, sock, 2, 1);
    runtime.unix_bind(sock, sockaddr);
    runtime.unix_listen(sock, 5);
    for(;;){
     for(;;)
      try{var match = runtime.unix_accept(_m_, sock); break;}
      catch(_b7_){
       var _b5_ = caml_wrap_exception(_b7_);
       if(_b5_[1] === Unix_error){
        var _b6_ = _b5_[2];
        if(typeof _b6_ === "number" && 11 === _b6_) continue;
       }
       throw caml_maybe_attach_backtrace(_b5_, 0);
      }
     var s = match[1], id = runtime.unix_fork(0);
     if(0 === id){
      if(0 !== runtime.unix_fork(0)) runtime.unix_exit(0);
      runtime.unix_close(sock);
      var
       inchan = runtime.unix_inchannel_of_filedescr(s),
       outchan = runtime.unix_outchannel_of_filedescr(s);
      caml_call2(server_fun, inchan, outchan);
      caml_call1(Stdlib[99], 0);
     }
     else{runtime.unix_close(s); waitpid_non_intr(id);}
    }
   }
   var
    Unix =
      [0,
       Unix_error,
       function(_b4_){return runtime.unix_error_message(_b4_);},
       handle_unix_error,
       function(_b3_){return runtime.unix_environment(_b3_);},
       function(_b2_){return runtime.unix_environment_unsafe(_b2_);},
       runtime.caml_sys_getenv,
       runtime.caml_sys_unsafe_getenv,
       function(_b1_, _b0_){return runtime.unix_putenv(_b1_, _b0_);},
       function(_bZ_, _bY_){return runtime.unix_execv(_bZ_, _bY_);},
       function(_bX_, _bW_, _bV_){
        return runtime.unix_execve(_bX_, _bW_, _bV_);
       },
       function(_bU_, _bT_){return runtime.unix_execvp(_bU_, _bT_);},
       function(_bS_, _bR_, _bQ_){
        return runtime.unix_execvpe(_bS_, _bR_, _bQ_);
       },
       function(_bP_){return runtime.unix_fork(_bP_);},
       function(_bO_){return runtime.unix_wait(_bO_);},
       function(_bN_, _bM_){return runtime.unix_waitpid(_bN_, _bM_);},
       system,
       function(_bL_){return runtime.unix_exit(_bL_);},
       function(_bK_){return runtime.unix_getpid(_bK_);},
       function(_bJ_){return runtime.unix_getppid(_bJ_);},
       function(_bI_){return runtime.unix_nice(_bI_);},
       stdin,
       stdout,
       stderr,
       function(_bH_, _bG_, _bF_){return runtime.unix_open(_bH_, _bG_, _bF_);},
       function(_bE_){return runtime.unix_close(_bE_);},
       function(_bD_){return runtime.unix_fsync(_bD_);},
       read,
       write,
       single_write,
       write_substring,
       single_write_substring,
       function(_bC_){return runtime.unix_inchannel_of_filedescr(_bC_);},
       function(_bB_){return runtime.unix_outchannel_of_filedescr(_bB_);},
       caml_channel_descriptor,
       caml_channel_descriptor,
       function(_bA_, _bz_, _by_){
        return runtime.unix_lseek(_bA_, _bz_, _by_);
       },
       function(_bx_, _bw_){return runtime.unix_truncate(_bx_, _bw_);},
       function(_bv_, _bu_){return runtime.unix_ftruncate(_bv_, _bu_);},
       runtime.caml_unix_stat,
       runtime.caml_unix_lstat,
       function(_bt_){return runtime.unix_fstat(_bt_);},
       runtime.caml_unix_isatty,
       [0,
        function(_bs_, _br_, _bq_){
         return runtime.unix_lseek_64(_bs_, _br_, _bq_);
        },
        function(_bp_, _bo_){return runtime.unix_truncate_64(_bp_, _bo_);},
        function(_bn_, _bm_){return runtime.unix_ftruncate_64(_bn_, _bm_);},
        runtime.caml_unix_stat_64,
        runtime.caml_unix_lstat_64,
        function(_bl_){return runtime.unix_fstat_64(_bl_);}],
       map_file,
       runtime.caml_unix_unlink,
       function(_bk_, _bj_){return runtime.unix_rename(_bk_, _bj_);},
       function(_bi_, _bh_, _bg_){return runtime.unix_link(_bi_, _bh_, _bg_);},
       function(_bf_){return runtime.unix_realpath(_bf_);},
       function(_be_, _bd_){return runtime.unix_chmod(_be_, _bd_);},
       function(_bc_, _bb_){return runtime.unix_fchmod(_bc_, _bb_);},
       function(_ba_, _a$_, _a__){
        return runtime.unix_chown(_ba_, _a$_, _a__);
       },
       function(_a9_, _a8_, _a7_){
        return runtime.unix_fchown(_a9_, _a8_, _a7_);
       },
       function(_a6_){return runtime.unix_umask(_a6_);},
       function(_a5_, _a4_){return runtime.unix_access(_a5_, _a4_);},
       function(_a3_, _a2_){return runtime.unix_dup(_a3_, _a2_);},
       function(_a1_, _a0_, _aZ_){return runtime.unix_dup2(_a1_, _a0_, _aZ_);},
       function(_aY_){return runtime.unix_set_nonblock(_aY_);},
       function(_aX_){return runtime.unix_clear_nonblock(_aX_);},
       function(_aW_){return runtime.unix_set_close_on_exec(_aW_);},
       function(_aV_){return runtime.unix_clear_close_on_exec(_aV_);},
       runtime.caml_unix_mkdir,
       runtime.caml_unix_rmdir,
       function(_aU_){return runtime.unix_chdir(_aU_);},
       function(_aT_){return runtime.unix_getcwd(_aT_);},
       function(_aS_){return runtime.unix_chroot(_aS_);},
       runtime.caml_unix_opendir,
       runtime.caml_unix_readdir,
       runtime.caml_unix_rewinddir,
       runtime.caml_unix_closedir,
       function(_aR_, _aQ_){return runtime.unix_pipe(_aR_, _aQ_);},
       function(_aP_, _aO_){return runtime.unix_mkfifo(_aP_, _aO_);},
       create_process,
       create_process_env,
       open_process_in,
       open_process_out,
       open_process,
       open_process_full,
       open_process_args_in,
       open_process_args_out,
       open_process_args,
       open_process_args_full,
       process_in_pid,
       process_out_pid,
       process_pid,
       process_full_pid,
       close_process_in,
       close_process_out,
       close_process,
       close_process_full,
       runtime.caml_unix_symlink,
       runtime.caml_unix_has_symlink,
       runtime.caml_unix_readlink,
       function(_aN_, _aM_, _aL_, _aK_){
        return runtime.unix_select(_aN_, _aM_, _aL_, _aK_);
       },
       function(_aJ_, _aI_, _aH_){
        return runtime.unix_lockf(_aJ_, _aI_, _aH_);
       },
       function(_aG_, _aF_){return runtime.unix_kill(_aG_, _aF_);},
       function(_aE_, _aD_){return runtime.unix_sigprocmask(_aE_, _aD_);},
       function(_aC_){return runtime.unix_sigpending(_aC_);},
       function(_aB_){return runtime.unix_sigsuspend(_aB_);},
       pause,
       function(_aA_){return runtime.caml_unix_time(_aA_);},
       function(_az_){return runtime.caml_unix_gettimeofday(_az_);},
       runtime.caml_unix_gmtime,
       runtime.caml_unix_localtime,
       runtime.caml_unix_mktime,
       function(_ay_){return runtime.unix_alarm(_ay_);},
       sleep,
       function(_ax_){return runtime.unix_sleep(_ax_);},
       function(_aw_){return runtime.unix_times(_aw_);},
       function(_av_, _au_, _at_){
        return runtime.unix_utimes(_av_, _au_, _at_);
       },
       function(_as_){return runtime.unix_getitimer(_as_);},
       function(_ar_, _aq_){return runtime.unix_setitimer(_ar_, _aq_);},
       runtime.caml_unix_getuid,
       function(_ap_){return runtime.unix_geteuid(_ap_);},
       function(_ao_){return runtime.unix_setuid(_ao_);},
       function(_an_){return runtime.unix_getgid(_an_);},
       function(_am_){return runtime.unix_getegid(_am_);},
       function(_al_){return runtime.unix_setgid(_al_);},
       function(_ak_){return runtime.unix_getgroups(_ak_);},
       function(_aj_){return runtime.unix_setgroups(_aj_);},
       function(_ai_, _ah_){return runtime.unix_initgroups(_ai_, _ah_);},
       function(_ag_){return runtime.unix_getlogin(_ag_);},
       function(_af_){return runtime.unix_getpwnam(_af_);},
       function(_ae_){return runtime.unix_getgrnam(_ae_);},
       runtime.caml_unix_getpwuid,
       function(_ad_){return runtime.unix_getgrgid(_ad_);},
       function(_ac_){return caml_unix_inet_addr_of_string(_ac_);},
       function(_ab_){return runtime.unix_string_of_inet_addr(_ab_);},
       inet_addr_any,
       inet_addr_loopback,
       inet6_addr_any,
       inet6_addr_loopback,
       is_inet6_addr,
       function(_aa_, _$_, ___, _Z_){
        return runtime.unix_socket(_aa_, _$_, ___, _Z_);
       },
       domain_of_sockaddr,
       function(_Y_, _X_, _W_, _V_){
        return runtime.unix_socketpair(_Y_, _X_, _W_, _V_);
       },
       function(_U_, _T_){return runtime.unix_accept(_U_, _T_);},
       function(_S_, _R_){return runtime.unix_bind(_S_, _R_);},
       function(_Q_, _P_){return runtime.unix_connect(_Q_, _P_);},
       function(_O_, _N_){return runtime.unix_listen(_O_, _N_);},
       function(_M_, _L_){return runtime.unix_shutdown(_M_, _L_);},
       function(_K_){return runtime.unix_getsockname(_K_);},
       function(_J_){return runtime.unix_getpeername(_J_);},
       recv,
       recvfrom,
       send,
       send_substring,
       sendto,
       sendto_substring,
       getsockopt,
       setsockopt,
       getsockopt_int,
       setsockopt_int,
       getsockopt_optint,
       setsockopt_optint,
       getsockopt_float,
       setsockopt_float,
       getsockopt_error,
       open_connection,
       shutdown_connection,
       establish_server,
       function(_I_){return runtime.unix_gethostname(_I_);},
       function(_H_){return runtime.unix_gethostbyname(_H_);},
       function(_G_){return runtime.unix_gethostbyaddr(_G_);},
       function(_F_){return runtime.unix_getprotobyname(_F_);},
       function(_E_){return runtime.unix_getprotobynumber(_E_);},
       function(_D_, _C_){return runtime.unix_getservbyname(_D_, _C_);},
       function(_B_, _A_){return runtime.unix_getservbyport(_B_, _A_);},
       getaddrinfo,
       getnameinfo,
       function(_z_){return runtime.unix_tcgetattr(_z_);},
       function(_y_, _x_, _w_){return runtime.unix_tcsetattr(_y_, _x_, _w_);},
       function(_v_, _u_){return runtime.unix_tcsendbreak(_v_, _u_);},
       function(_t_){return runtime.unix_tcdrain(_t_);},
       function(_s_, _r_){return runtime.unix_tcflush(_s_, _r_);},
       function(_q_, _p_){return runtime.unix_tcflow(_q_, _p_);},
       function(_o_){return runtime.unix_setsid(_o_);}];
   runtime.caml_register_global(136, Unix, "Unix");
   return;
  }
  (globalThis));

//# 1127 "../.js/default/unix/unix.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Unix = global_data.Unix,
    Unix_error = Unix[1],
    error_message = Unix[2],
    handle_unix_error = Unix[3],
    environment = Unix[4],
    unsafe_environment = Unix[5],
    getenv = Unix[6],
    unsafe_getenv = Unix[7],
    putenv = Unix[8],
    execv = Unix[9],
    execve = Unix[10],
    execvp = Unix[11],
    execvpe = Unix[12],
    fork = Unix[13],
    wait = Unix[14],
    waitpid = Unix[15],
    system = Unix[16],
    exit = Unix[17],
    getpid = Unix[18],
    getppid = Unix[19],
    nice = Unix[20],
    stdin = Unix[21],
    stdout = Unix[22],
    stderr = Unix[23],
    openfile = Unix[24],
    close = Unix[25],
    fsync = Unix[26],
    read = Unix[27],
    write = Unix[28],
    single_write = Unix[29],
    write_substring = Unix[30],
    single_write_substring = Unix[31],
    in_channel_of_descr = Unix[32],
    out_channel_of_descr = Unix[33],
    descr_of_in_channel = Unix[34],
    descr_of_out_channel = Unix[35],
    lseek = Unix[36],
    truncate = Unix[37],
    ftruncate = Unix[38],
    stat = Unix[39],
    lstat = Unix[40],
    fstat = Unix[41],
    isatty = Unix[42],
    LargeFile = Unix[43],
    map_file = Unix[44],
    unlink = Unix[45],
    rename = Unix[46],
    link = Unix[47],
    realpath = Unix[48],
    chmod = Unix[49],
    fchmod = Unix[50],
    chown = Unix[51],
    fchown = Unix[52],
    umask = Unix[53],
    access = Unix[54],
    dup = Unix[55],
    dup2 = Unix[56],
    set_nonblock = Unix[57],
    clear_nonblock = Unix[58],
    set_close_on_exec = Unix[59],
    clear_close_on_exec = Unix[60],
    mkdir = Unix[61],
    rmdir = Unix[62],
    chdir = Unix[63],
    getcwd = Unix[64],
    chroot = Unix[65],
    opendir = Unix[66],
    readdir = Unix[67],
    rewinddir = Unix[68],
    closedir = Unix[69],
    pipe = Unix[70],
    mkfifo = Unix[71],
    create_process = Unix[72],
    create_process_env = Unix[73],
    open_process_in = Unix[74],
    open_process_out = Unix[75],
    open_process = Unix[76],
    open_process_full = Unix[77],
    open_process_args_in = Unix[78],
    open_process_args_out = Unix[79],
    open_process_args = Unix[80],
    open_process_args_full = Unix[81],
    process_in_pid = Unix[82],
    process_out_pid = Unix[83],
    process_pid = Unix[84],
    process_full_pid = Unix[85],
    close_process_in = Unix[86],
    close_process_out = Unix[87],
    close_process = Unix[88],
    close_process_full = Unix[89],
    symlink = Unix[90],
    has_symlink = Unix[91],
    readlink = Unix[92],
    select = Unix[93],
    lockf = Unix[94],
    kill = Unix[95],
    sigprocmask = Unix[96],
    sigpending = Unix[97],
    sigsuspend = Unix[98],
    pause = Unix[99],
    time = Unix[100],
    gettimeofday = Unix[101],
    gmtime = Unix[102],
    localtime = Unix[103],
    mktime = Unix[104],
    alarm = Unix[105],
    sleep = Unix[106],
    sleepf = Unix[107],
    times = Unix[108],
    utimes = Unix[109],
    getitimer = Unix[110],
    setitimer = Unix[111],
    getuid = Unix[112],
    geteuid = Unix[113],
    setuid = Unix[114],
    getgid = Unix[115],
    getegid = Unix[116],
    setgid = Unix[117],
    getgroups = Unix[118],
    setgroups = Unix[119],
    initgroups = Unix[120],
    getlogin = Unix[121],
    getpwnam = Unix[122],
    getgrnam = Unix[123],
    getpwuid = Unix[124],
    getgrgid = Unix[125],
    inet_addr_of_string = Unix[126],
    string_of_inet_addr = Unix[127],
    inet_addr_any = Unix[128],
    inet_addr_loopback = Unix[129],
    inet6_addr_any = Unix[130],
    inet6_addr_loopback = Unix[131],
    is_inet6_addr = Unix[132],
    socket = Unix[133],
    domain_of_sockaddr = Unix[134],
    socketpair = Unix[135],
    accept = Unix[136],
    bind = Unix[137],
    connect = Unix[138],
    listen = Unix[139],
    shutdown = Unix[140],
    getsockname = Unix[141],
    getpeername = Unix[142],
    recv = Unix[143],
    recvfrom = Unix[144],
    send = Unix[145],
    send_substring = Unix[146],
    sendto = Unix[147],
    sendto_substring = Unix[148],
    getsockopt = Unix[149],
    setsockopt = Unix[150],
    getsockopt_int = Unix[151],
    setsockopt_int = Unix[152],
    getsockopt_optint = Unix[153],
    setsockopt_optint = Unix[154],
    getsockopt_float = Unix[155],
    setsockopt_float = Unix[156],
    getsockopt_error = Unix[157],
    open_connection = Unix[158],
    shutdown_connection = Unix[159],
    establish_server = Unix[160],
    gethostname = Unix[161],
    gethostbyname = Unix[162],
    gethostbyaddr = Unix[163],
    getprotobyname = Unix[164],
    getprotobynumber = Unix[165],
    getservbyname = Unix[166],
    getservbyport = Unix[167],
    getaddrinfo = Unix[168],
    getnameinfo = Unix[169],
    tcgetattr = Unix[170],
    tcsetattr = Unix[171],
    tcsendbreak = Unix[172],
    tcdrain = Unix[173],
    tcflush = Unix[174],
    tcflow = Unix[175],
    setsid = Unix[176],
    UnixLabels =
      [0,
       Unix_error,
       error_message,
       handle_unix_error,
       environment,
       unsafe_environment,
       getenv,
       unsafe_getenv,
       putenv,
       execv,
       execve,
       execvp,
       execvpe,
       fork,
       wait,
       waitpid,
       system,
       exit,
       getpid,
       getppid,
       nice,
       stdin,
       stdout,
       stderr,
       openfile,
       close,
       fsync,
       read,
       write,
       single_write,
       write_substring,
       single_write_substring,
       in_channel_of_descr,
       out_channel_of_descr,
       descr_of_in_channel,
       descr_of_out_channel,
       lseek,
       truncate,
       ftruncate,
       stat,
       lstat,
       fstat,
       isatty,
       LargeFile,
       map_file,
       unlink,
       rename,
       link,
       realpath,
       chmod,
       fchmod,
       chown,
       fchown,
       umask,
       access,
       dup,
       dup2,
       set_nonblock,
       clear_nonblock,
       set_close_on_exec,
       clear_close_on_exec,
       mkdir,
       rmdir,
       chdir,
       getcwd,
       chroot,
       opendir,
       readdir,
       rewinddir,
       closedir,
       pipe,
       mkfifo,
       create_process,
       create_process_env,
       open_process_in,
       open_process_out,
       open_process,
       open_process_full,
       open_process_args_in,
       open_process_args_out,
       open_process_args,
       open_process_args_full,
       process_in_pid,
       process_out_pid,
       process_pid,
       process_full_pid,
       close_process_in,
       close_process_out,
       close_process,
       close_process_full,
       symlink,
       has_symlink,
       readlink,
       select,
       lockf,
       kill,
       sigprocmask,
       sigpending,
       sigsuspend,
       pause,
       time,
       gettimeofday,
       gmtime,
       localtime,
       mktime,
       alarm,
       sleep,
       sleepf,
       times,
       utimes,
       getitimer,
       setitimer,
       getuid,
       geteuid,
       setuid,
       getgid,
       getegid,
       setgid,
       getgroups,
       setgroups,
       initgroups,
       getlogin,
       getpwnam,
       getgrnam,
       getpwuid,
       getgrgid,
       inet_addr_of_string,
       string_of_inet_addr,
       inet_addr_any,
       inet_addr_loopback,
       inet6_addr_any,
       inet6_addr_loopback,
       is_inet6_addr,
       socket,
       domain_of_sockaddr,
       socketpair,
       accept,
       bind,
       connect,
       listen,
       shutdown,
       getsockname,
       getpeername,
       recv,
       recvfrom,
       send,
       send_substring,
       sendto,
       sendto_substring,
       getsockopt,
       setsockopt,
       getsockopt_int,
       setsockopt_int,
       getsockopt_optint,
       setsockopt_optint,
       getsockopt_float,
       setsockopt_float,
       getsockopt_error,
       open_connection,
       shutdown_connection,
       establish_server,
       gethostname,
       gethostbyname,
       gethostbyaddr,
       getprotobyname,
       getprotobynumber,
       getservbyname,
       getservbyport,
       getaddrinfo,
       getnameinfo,
       tcgetattr,
       tcsetattr,
       tcsendbreak,
       tcdrain,
       tcflush,
       tcflow,
       setsid];
   runtime.caml_register_global(1, UnixLabels, "UnixLabels");
   return;
  }
  (globalThis));


//# 1 "../.js/default/bigarray/bigarray.cma.js"
// Generated by js_of_ocaml
//# 3 "../.js/default/bigarray/bigarray.cma.js"

//# 7 "../.js/default/bigarray/bigarray.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Stdlib_Bigarray = global_data.Stdlib__Bigarray,
    float32 = Stdlib_Bigarray[1],
    float64 = Stdlib_Bigarray[2],
    complex32 = Stdlib_Bigarray[3],
    complex64 = Stdlib_Bigarray[4],
    int8_signed = Stdlib_Bigarray[5],
    int8_unsigned = Stdlib_Bigarray[6],
    int16_signed = Stdlib_Bigarray[7],
    int16_unsigned = Stdlib_Bigarray[8],
    int$0 = Stdlib_Bigarray[9],
    int32 = Stdlib_Bigarray[10],
    int64 = Stdlib_Bigarray[11],
    nativeint = Stdlib_Bigarray[12],
    char$0 = Stdlib_Bigarray[13],
    kind_size_in_bytes = Stdlib_Bigarray[14],
    c_layout = Stdlib_Bigarray[15],
    fortran_layout = Stdlib_Bigarray[16],
    array0_of_genarray = Stdlib_Bigarray[22],
    array1_of_genarray = Stdlib_Bigarray[23],
    array2_of_genarray = Stdlib_Bigarray[24],
    array3_of_genarray = Stdlib_Bigarray[25],
    reshape = Stdlib_Bigarray[26],
    reshape_0 = Stdlib_Bigarray[27],
    reshape_1 = Stdlib_Bigarray[28],
    reshape_2 = Stdlib_Bigarray[29],
    reshape_3 = Stdlib_Bigarray[30],
    Bigarray =
      [0,
       float32,
       float64,
       complex32,
       complex64,
       int8_signed,
       int8_unsigned,
       int16_signed,
       int16_unsigned,
       int$0,
       int32,
       int64,
       nativeint,
       char$0,
       kind_size_in_bytes,
       c_layout,
       fortran_layout,
       array0_of_genarray,
       array1_of_genarray,
       array2_of_genarray,
       array3_of_genarray,
       reshape,
       reshape_0,
       reshape_1,
       reshape_2,
       reshape_3];
   runtime.caml_register_global(1, Bigarray, "Bigarray");
   return;
  }
  (globalThis));


//# 1 "../.js/default/react/react.cma.js"
// Generated by js_of_ocaml
//# 3 "../.js/default/react/react.cma.js"

//# 6 "../.js/default/react/react.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_src_react_ml = "src/react.ml",
    caml_equal = runtime.caml_equal,
    caml_int_compare = runtime.caml_int_compare,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    err_max_rank = "maximal rank exceeded",
    err_sig_undef = "signal value undefined yet",
    err_fix = "trying to fix a delayed value",
    err_retain_never = "E.never cannot retain a closure",
    err_retain_cst_sig = "constant signals cannot retain a closure",
    err_step_executed = "step already executed",
    err_event_scheduled = "event already scheduled on a step",
    err_signal_scheduled = "signal already scheduled on a step",
    one = [0, 1],
    zero = [0, 0],
    zero$0 = [0, 0],
    one$0 = [0, 1],
    minus_one = [0, -1],
    zero$1 = [0, 0.],
    one$1 = [0, 1.],
    minus_one$0 = [0, -1.],
    none = [0, 0],
    Assert_failure = global_data.Assert_failure,
    Stdlib = global_data.Stdlib,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Weak = global_data.Stdlib__Weak;
   function create(size){return [0, caml_call1(Stdlib_Weak[1], size), 0];}
   function clear(a){
    a[1] = caml_call1(Stdlib_Weak[1], 0);
    a[2] = 0;
    return 0;
   }
   function get(a, i){return caml_call2(Stdlib_Weak[4], a[1], i);}
   function swap(a, i$0, i){
    var v = caml_call2(Stdlib_Weak[4], a[1], i);
    caml_call5(Stdlib_Weak[8], a[1], i$0, a[1], i, 1);
    return caml_call3(Stdlib_Weak[3], a[1], i$0, v);
   }
   function add(a, v){
    var _cy_ = caml_call1(Stdlib_Weak[2], a[1]);
    if(a[2] === _cy_){
     var arr = caml_call1(Stdlib_Weak[1], 2 * (a[2] + 1 | 0) | 0);
     caml_call5(Stdlib_Weak[8], a[1], 0, arr, 0, a[2]);
     a[1] = arr;
    }
    caml_call3(Stdlib_Weak[3], a[1], a[2], [0, v]);
    a[2] = a[2] + 1 | 0;
    return 0;
   }
   function rem_last(a){
    var l = a[2] - 1 | 0;
    a[2] = l;
    return caml_call3(Stdlib_Weak[3], a[1], l, 0);
   }
   function fold(f, acc, a){
    var acc$0 = [0, acc], _cw_ = a[2] - 1 | 0, _cv_ = 0;
    if(_cw_ >= 0){
     var i = _cv_;
     for(;;){
      var match = caml_call2(Stdlib_Weak[4], a[1], i);
      if(match){var v = match[1]; acc$0[1] = caml_call2(f, acc$0[1], v);}
      var _cx_ = i + 1 | 0;
      if(_cw_ === i) break;
      i = _cx_;
     }
    }
    return acc$0[1];
   }
   function compare_down(h, i$0, i){
    var match = get(h, i$0), match$0 = get(h, i);
    if(! match) return match$0 ? -1 : 0;
    var n = match[1];
    if(! match$0) return 1;
    var n$0 = match$0[1];
    return caml_int_compare(n[1], n$0[1]);
   }
   function down(h, i){
    var i$0 = i;
    for(;;){
     var
      last = h[2] - 1 | 0,
      start = 2 * i$0 | 0,
      l = start + 1 | 0,
      r = start + 2 | 0;
     if(last < l) return 0;
     var
      child = last < r ? l : 0 <= compare_down(h, l, r) ? r : l,
      _cu_ = 0 < compare_down(h, i$0, child) ? 1 : 0;
     if(! _cu_) return _cu_;
     swap(h, i$0, child);
     i$0 = child;
    }
   }
   var delayed_rank = Stdlib[19], nil = [0, 1, create(0), 0, 0];
   function create$0(param){var h = create(11); return [0, 0, h, 0, 0];}
   function add$0(c, n$1){
    if(n$1[2] === c) return 0;
    n$1[2] = c;
    var h = c[2];
    add(h, n$1);
    var i$0 = h[2] - 1 | 0, i = i$0, last_none = 0;
    for(;;){
     if(0 === i) return last_none ? down(h, 0) : last_none;
     var p = (i - 1 | 0) / 2 | 0, match = get(h, i), match$0 = get(h, p);
     if(! match) return 0;
     var n = match[1];
     if(match$0){
      var n$0 = match$0[1];
      if(0 <= caml_int_compare(n[1], n$0[1]))
       return last_none ? down(h, i) : last_none;
      swap(h, i, p);
      i = p;
      last_none = 0;
     }
     else{swap(h, i, p); i = p; last_none = 1;}
    }
   }
   function add_deps(c, n){
    var a = n[6], _cs_ = a[2] - 1 | 0, _cr_ = 0;
    if(_cs_ >= 0){
     var i = _cr_;
     for(;;){
      var match = caml_call2(Stdlib_Weak[4], a[1], i);
      if(match){var v = match[1]; add$0(c, v);}
      var _ct_ = i + 1 | 0;
      if(_cs_ === i) break;
      i = _ct_;
     }
    }
    return 0;
   }
   function add_eop(c, op){c[3] = [0, op, c[3]]; return 0;}
   function allow_reschedule(n){n[2] = nil; return;}
   function rebuild(c){
    var h = c[2], _cp_ = (h[2] - 2 | 0) / 2 | 0;
    if(_cp_ >= 0){
     var i = _cp_;
     for(;;){down(h, i); var _cq_ = i - 1 | 0; if(0 === i) break; i = _cq_;}
    }
    return 0;
   }
   function execute(c$1){
    if(c$1[1]) return caml_call1(Stdlib[1], err_step_executed);
    var c = c$1;
    for(;;){
     var
      eops =
        function(c){
         caml_call2
          (Stdlib_List[17], function(op){return caml_call1(op, 0);}, c[3]);
         c[3] = 0;
         return;
        },
      cops =
        function(c){
         caml_call2
          (Stdlib_List[17], function(op){return caml_call1(op, 0);}, c[4]);
         c[4] = 0;
         return;
        },
      finish = function(c){c[1] = 1; c[2] = create(0); return 0;};
     for(;;){
      var a = c[2];
      a:
      {
       b:
       {
        for(;;){
         var s = a[2];
         if(0 === s) break b;
         var v = get(a, 0);
         if(1 < s){
          var _cn_ = get(a, s - 1 | 0);
          caml_call1(caml_call2(Stdlib_Weak[3], a[1], 0), _cn_);
          rem_last(a);
          down(a, 0);
         }
         else
          rem_last(a);
         if(v) break;
        }
        var match = v;
        break a;
       }
       var match = 0;
      }
      if(! match){eops(c); cops(c); return finish(c);}
      var n = match[1];
      if(n[1] === delayed_rank) break;
      caml_call1(n[5], c);
     }
     var c$0 = create$0(0);
     eops(c);
     var h = c[2];
     let c$1 = c$0;
     var _co_ = [0, n, fold(function(acc, e){return [0, e, acc];}, 0, h)];
     caml_call2
      (Stdlib_List[17], function(n){return caml_call1(n[5], c$1);}, _co_);
     cops(c);
     finish(c);
     c = c$0;
    }
   }
   function find_unfinished(nl){
    var next = 0, param = [0, nl, 0];
    for(;;)
     if(param){
      var nl$0 = param[1];
      if(nl$0){
       var todo = param[2], next$0 = next, param$0 = nl$0;
       for(;;){
        if(! param$0) break;
        var nl$1 = param$0[2], n = param$0[1];
        if(! n[2][1]) return n[2];
        var next$1 = [0, caml_call1(n[4], 0), next$0];
        next$0 = next$1;
        param$0 = nl$1;
       }
       next = next$0;
       param = todo;
      }
      else{var todo$0 = param[2]; param = todo$0;}
     }
     else{if(0 === next) return nil; param = next; next = 0;}
   }
   var min_rank = Stdlib[20], max_rank = delayed_rank - 1 | 0;
   function nop(param){return 0;}
   function no_producers(param){return 0;}
   function create$1(r){
    return [0, r, nil, nop, no_producers, nop, create(0)];
   }
   function rem_dep(n$0, n){
    var a = n$0[6];
    try{
     var _ck_ = a[2] - 1 | 0, _cj_ = 0;
     if(_ck_ >= 0){
      var i = _cj_;
      for(;;){
       var match = caml_call2(Stdlib_Weak[4], a[1], i);
       if(match){
        var v = match[1];
        if(n === v){
         caml_call3(Stdlib_Weak[3], a[1], i, 0);
         throw caml_maybe_attach_backtrace(Stdlib[3], 1);
        }
       }
       var _cl_ = i + 1 | 0;
       if(_ck_ === i) break;
       i = _cl_;
      }
     }
     return;
    }
    catch(_cm_){
     var _ci_ = caml_wrap_exception(_cm_);
     if(_ci_ === Stdlib[3]) return;
     throw caml_maybe_attach_backtrace(_ci_, 0);
    }
   }
   function add_dep(n$0, n){
    var a = n$0[6];
    try{
     var _ce_ = a[2] - 1 | 0, _cd_ = 0;
     if(_ce_ >= 0){
      var i = _cd_;
      for(;;){
       if(! caml_call2(Stdlib_Weak[4], a[1], i)){
        caml_call3(Stdlib_Weak[3], a[1], i, [0, n]);
        throw caml_maybe_attach_backtrace(Stdlib[3], 1);
       }
       var _cg_ = i + 1 | 0;
       if(_ce_ === i) break;
       i = _cg_;
      }
     }
     var _cf_ = add(a, n);
     return _cf_;
    }
    catch(_ch_){
     var _cc_ = caml_wrap_exception(_ch_);
     if(_cc_ === Stdlib[3]) return 0;
     throw caml_maybe_attach_backtrace(_cc_, 0);
    }
   }
   function deps(n){
    return fold(function(acc, d){return [0, d, acc];}, 0, n[6]);
   }
   function bind(n, p, u){n[4] = p; n[5] = u; return 0;}
   function stop(opt, to_rem){
    if(opt) var sth = opt[1], strong = sth; else var strong = 0;
    if(! strong){
     to_rem[4] = no_producers;
     to_rem[5] = nop;
     return clear(to_rem[6]);
    }
    var producers = caml_call1(to_rem[4], 0);
    to_rem[4] = no_producers;
    to_rem[5] = nop;
    clear(to_rem[6]);
    var next = 0, to_rem$0 = to_rem, param = producers;
    for(;;)
     if(param){
      var todo = param[2], n = param[1];
      rem_dep(n, to_rem$0);
      if(n[1] !== min_rank){
       var a = n[6];
       try{
        var _b9_ = a[2] - 1 | 0, _b8_ = 0;
        if(_b9_ >= 0){
         var i = _b8_;
         for(;;){
          if(caml_call2(Stdlib_Weak[6], a[1], i))
           throw caml_maybe_attach_backtrace(Stdlib[3], 1);
          var _b$_ = i + 1 | 0;
          if(_b9_ === i) break;
          i = _b$_;
         }
        }
        var _b__ = 1, _ca_ = _b__;
       }
       catch(_cb_){
        var _b7_ = caml_wrap_exception(_cb_);
        if(_b7_ !== Stdlib[3]) throw caml_maybe_attach_backtrace(_b7_, 0);
        var _ca_ = 0;
       }
       if(! (1 - _ca_)){
        var prods = caml_call1(n[4], 0);
        n[4] = no_producers;
        n[5] = nop;
        clear(n[6]);
        var next$0 = [0, [0, n, prods], next];
        next = next$0;
        param = todo;
        continue;
       }
      }
      param = todo;
     }
     else{
      if(! next) return 0;
      var
       next$1 = next[2],
       match = next[1],
       prods$0 = match[2],
       to_rem$1 = match[1];
      next = next$1;
      to_rem$0 = to_rem$1;
      param = prods$0;
     }
   }
   var
    rmin = create$1(min_rank),
    _a_ = [0, cst_src_react_ml, 410, 54],
    _b_ = [0, cst_src_react_ml, 421, 51];
   function rmax(n$0, n){return n[1] < n$0[1] ? n$0 : n;}
   function rsucc(n){
    return n[1] === delayed_rank
            ? min_rank
            : n
               [1]
              < max_rank
              ? n[1] + 1 | 0
              : caml_call1(Stdlib[1], err_max_rank);
   }
   function rsucc2(n$0, n){
    var r = rsucc(n$0), r$0 = rsucc(n);
    return r$0 < r ? r : r$0;
   }
   function update_rank(n, r){
    if(n[1] >= r) return 0;
    n[1] = r;
    var param = [0, n, 0];
    for(;;){
     if(! param) return 1;
     var todo = param[2], n$0 = param[1];
     let n = n$0;
     var
      update =
        function(todo, d){
         if(n[1] >= d[1] && n[1] !== delayed_rank){d[1] = rsucc(n); return [0, d, todo];}
         return todo;
        };
     param = fold(update, todo, n$0[6]);
    }
   }
   function eval$0(m){
    var match = m[1][1];
    if(! match)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
    var v = match[1];
    return v;
   }
   function emut(rank){return [0, [0, 0], create$1(rank)];}
   function event(m, p, u){bind(m[2], p, u); return [0, m];}
   function eupdate(v, m, c){
    m[1][1] = [0, v];
    var v$0 = m[1];
    function op(_b6_){v$0[1] = 0; return 0;}
    c[4] = [0, op, c[4]];
    return add_deps(c, m[2]);
   }
   function sval(m){
    var match = m[1];
    if(! match)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
    var v = match[1];
    return v;
   }
   function smut(rank, eq){return [0, 0, eq, create$1(rank)];}
   function signal(i, m, p, u){
    bind(m[3], p, u);
    if(i) m[1] = i;
    var c = find_unfinished(caml_call1(m[3][4], 0));
    if(c === nil) caml_call1(m[3][5], nil); else add$0(c, m[3]);
    return [1, m];
   }
   function supdate(v, m, c){
    var match = m[1];
    if(! match){m[1] = [0, v]; return 0;}
    var v$0 = match[1];
    if(caml_call2(m[2], v, v$0)) return 0;
    m[1] = [0, v];
    var _b5_ = c !== nil ? 1 : 0;
    return _b5_ ? add_deps(c, m[3]) : _b5_;
   }
   function add_dep$0(m, n){
    add_dep(m[2], n);
    var _b4_ = 0 !== m[1][1] ? 1 : 0;
    return _b4_ ? add$0(m[2][2], n) : _b4_;
   }
   var
    _c_ = [0, 1],
    _d_ = [0, cst_src_react_ml, 701, 19],
    _e_ = [0, cst_src_react_ml, 731, 53],
    _f_ = [0, cst_src_react_ml, 760, 45];
   function create$2(param){
    var m = emut(min_rank);
    return [0,
            [0, m],
            function(step, v){
             if(! step){
              var c$0 = create$0(0);
              m[2][2] = c$0;
              eupdate(v, m, c$0);
              return execute(c$0);
             }
             var c = step[1];
             if(c[1])
              caml_call1(Stdlib[1], err_step_executed);
             else if(m[2][2][1])
              m[2][2] = c;
             else
              caml_call1(Stdlib[1], err_event_scheduled);
             return eupdate(v, m, c);
            }];
   }
   function retain(e, c){
    if(! e) return caml_call1(Stdlib[1], err_retain_never);
    var m = e[1], c$0 = m[2][3];
    m[2][3] = c;
    return [0, 82, c$0];
   }
   function stop$0(strong, param){
    if(! param) return 0;
    var m = param[1];
    return stop(strong, m[2]);
   }
   function equal(e$0, e){
    if(e$0){
     if(e){var m = e[1], m$0 = e$0[1]; return m$0 === m ? 1 : 0;}
    }
    else if(! e) return 1;
    return 0;
   }
   function trace(opt, t, e){
    if(opt) var sth = opt[1], iff = sth; else var iff = _c_;
    if(0 === iff[0]){
     if(! iff[1]) return e;
     if(! e) return e;
     var
      m = e[1],
      m$0 = emut(rsucc(m[2])),
      p = function(param){return [0, m[2], 0];},
      u =
        function(c){
         var v = eval$0(m);
         caml_call1(t, v);
         return eupdate(v, m$0, c);
        };
     add_dep$0(m, m$0[2]);
     return event(m$0, p, u);
    }
    var mc = iff[1];
    if(! e) return 0;
    var m$1 = e[1], m$2 = emut(rsucc2(mc[3], m$1[2]));
    function p$0(param){return [0, mc[3], [0, m$1[2], 0]];}
    function u$0(c){
     var match = m$1[1][1];
     if(! match) return 0;
     var v = match[1];
     if(sval(mc)) caml_call1(t, v);
     return eupdate(v, m$2, c);
    }
    add_dep(mc[3], m$2[2]);
    add_dep$0(m$1, m$2[2]);
    return event(m$2, p$0, u$0);
   }
   function once(param){
    if(! param) return 0;
    var m = param[1], m$0 = emut(rsucc(m[2]));
    function p(param){return [0, m[2], 0];}
    function u(c){
     rem_dep(m[2], m$0[2]);
     eupdate(eval$0(m), m$0, c);
     return stop(0, m$0[2]);
    }
    add_dep$0(m, m$0[2]);
    return event(m$0, p, u);
   }
   function drop_once(param){
    if(! param) return 0;
    var m = param[1], m$0 = emut(rsucc(m[2]));
    function p(param){return [0, m[2], 0];}
    function u(c){
     function u(c){return eupdate(eval$0(m), m$0, c);}
     return bind(m$0[2], p, u);
    }
    add_dep$0(m, m$0[2]);
    return event(m$0, p, u);
   }
   function app(ef, param){
    if(! param) return 0;
    var m = param[1];
    if(! ef) return 0;
    var mf = ef[1], m$0 = emut(rsucc2(m[2], mf[2]));
    function p(param){return [0, m[2], [0, mf[2], 0]];}
    function u(c){
     var _b3_ = mf[1][1], match = m[1][1];
     if(_b3_ && match){
      var v = match[1], f = _b3_[1];
      return eupdate(caml_call1(f, v), m$0, c);
     }
     return 0;
    }
    add_dep$0(m, m$0[2]);
    add_dep$0(mf, m$0[2]);
    return event(m$0, p, u);
   }
   function map(f, param){
    if(! param) return 0;
    var m = param[1], m$0 = emut(rsucc(m[2]));
    function p(param){return [0, m[2], 0];}
    function u(c){return eupdate(caml_call1(f, eval$0(m)), m$0, c);}
    add_dep$0(m, m$0[2]);
    return event(m$0, p, u);
   }
   function stamp(e, v){
    if(! e) return 0;
    var m = e[1], m$0 = emut(rsucc(m[2]));
    function p(param){return [0, m[2], 0];}
    function u(c){return eupdate(v, m$0, c);}
    add_dep$0(m, m$0[2]);
    return event(m$0, p, u);
   }
   function filter(pred, param){
    if(! param) return 0;
    var m = param[1], m$0 = emut(rsucc(m[2]));
    function p(param){return [0, m[2], 0];}
    function u(c){
     var v = eval$0(m);
     return caml_call1(pred, v) ? eupdate(v, m$0, c) : 0;
    }
    add_dep$0(m, m$0[2]);
    return event(m$0, p, u);
   }
   function fmap(fm, param){
    if(! param) return 0;
    var m = param[1], m$0 = emut(rsucc(m[2]));
    function p(param){return [0, m[2], 0];}
    function u(c){
     var match = caml_call1(fm, eval$0(m));
     if(! match) return 0;
     var v = match[1];
     return eupdate(v, m$0, c);
    }
    add_dep$0(m, m$0[2]);
    return event(m$0, p, u);
   }
   function diff(d, param){
    if(! param) return 0;
    var m = param[1], m$0 = emut(rsucc(m[2])), last = [0, 0];
    function p(param){return [0, m[2], 0];}
    function u(c){
     var v = eval$0(m), match = last[1];
     if(match){
      var v$0 = match[1];
      last[1] = [0, v];
      return eupdate(caml_call2(d, v, v$0), m$0, c);
     }
     last[1] = [0, v];
     return 0;
    }
    add_dep$0(m, m$0[2]);
    return event(m$0, p, u);
   }
   function changes(opt, param){
    if(opt) var sth = opt[1], eq = sth; else var eq = caml_equal;
    if(! param) return 0;
    var m = param[1], m$0 = emut(rsucc(m[2])), last = [0, 0];
    function p(param){return [0, m[2], 0];}
    function u(c){
     var v = eval$0(m), match = last[1];
     if(match){
      var v$0 = match[1];
      last[1] = [0, v];
      return caml_call2(eq, v, v$0) ? 0 : eupdate(v, m$0, c);
     }
     last[1] = [0, v];
     return eupdate(v, m$0, c);
    }
    add_dep$0(m, m$0[2]);
    return event(m$0, p, u);
   }
   function on(c, e){
    if(! e) return 0;
    var m = e[1];
    if(0 === c[0]) return c[1] ? e : 0;
    var mc = c[1], m$0 = emut(rsucc2(m[2], mc[3]));
    function p(param){return [0, m[2], [0, mc[3], 0]];}
    function u(c){
     return m[1][1] ? sval(mc) ? eupdate(eval$0(m), m$0, c) : 0 : 0;
    }
    add_dep$0(m, m$0[2]);
    add_dep(mc[3], m$0[2]);
    return event(m$0, p, u);
   }
   function dismiss(c, e){
    if(! e) return 0;
    var m = e[1];
    if(! c) return e;
    var mc = c[1], m$0 = emut(rsucc2(mc[2], m[2]));
    function p(param){return [0, mc[2], [0, m[2], 0]];}
    function u(c){return mc[1][1] ? 0 : eupdate(eval$0(m), m$0, c);}
    add_dep$0(mc, m$0[2]);
    add_dep$0(m, m$0[2]);
    return event(m$0, p, u);
   }
   function until(c, e){
    if(! e) return 0;
    var m = e[1];
    if(! c) return e;
    var mc = c[1], m$0 = emut(rsucc2(m[2], mc[2]));
    function p(param){return [0, m[2], [0, mc[2], 0]];}
    function u(c){
     return mc[1][1]
             ? (rem_dep
                (m[2], m$0[2]),
               rem_dep(mc[2], m$0[2]),
               stop(0, m$0[2]))
             : eupdate(eval$0(m), m$0, c);
    }
    add_dep$0(m, m$0[2]);
    add_dep$0(mc, m$0[2]);
    return event(m$0, p, u);
   }
   function accum(ef, i){
    if(! ef) return 0;
    var m = ef[1], m$0 = emut(rsucc(m[2])), acc = [0, i];
    function p(param){return [0, m[2], 0];}
    function u(c){
     var _b2_ = acc[1];
     acc[1] = caml_call1(eval$0(m), _b2_);
     return eupdate(acc[1], m$0, c);
    }
    add_dep$0(m, m$0[2]);
    return event(m$0, p, u);
   }
   function fold$0(f, i, param){
    if(! param) return 0;
    var m = param[1], m$0 = emut(rsucc(m[2])), acc = [0, i];
    function p(param){return [0, m[2], 0];}
    function u(c){
     var _b1_ = eval$0(m);
     acc[1] = caml_call2(f, acc[1], _b1_);
     return eupdate(acc[1], m$0, c);
    }
    add_dep$0(m, m$0[2]);
    return event(m$0, p, u);
   }
   function occurs(m){return 0 !== m[1][1] ? 1 : 0;}
   function find_muts_and_next_rank(el){
    var acc = 0, max = rmin, param = el;
    for(;;){
     if(! param){
      var _b0_ = rsucc(max);
      return [0, caml_call1(Stdlib_List[9], acc), _b0_];
     }
     var match = param[1];
     if(match){
      var
       l = param[2],
       m = match[1],
       max$0 = rmax(max, m[2]),
       acc$0 = [0, m, acc];
      acc = acc$0;
      max = max$0;
      param = l;
     }
     else{var l$0 = param[2]; param = l$0;}
    }
   }
   function select(el){
    var
     match = find_muts_and_next_rank(el),
     r = match[2],
     emuts = match[1],
     m = emut(r);
    function p(param){
     return caml_call2(Stdlib_List[21], function(m){return m[2];}, emuts);
    }
    function u(c){
     try{
      var
       _bY_ =
         eupdate(eval$0(caml_call2(Stdlib_List[38], occurs, emuts)), m, c);
      return _bY_;
     }
     catch(_bZ_){
      var _bX_ = caml_wrap_exception(_bZ_);
      if(_bX_ === Stdlib[8])
       throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
      throw caml_maybe_attach_backtrace(_bX_, 0);
     }
    }
    caml_call2
     (Stdlib_List[17], function(m$0){return add_dep$0(m$0, m[2]);}, emuts);
    return event(m, p, u);
   }
   function merge(f, acc, el){
    var
     match = find_muts_and_next_rank(el),
     r = match[2],
     emuts = match[1],
     m = emut(r);
    function p(param){
     return caml_call2(Stdlib_List[21], function(m){return m[2];}, emuts);
    }
    function u(c){
     var acc$0 = acc, param = emuts;
     for(;;){
      if(! param) return eupdate(acc$0, m, c);
      var m$0 = param[1], l = param[2];
      if(occurs(m$0)){
       var acc$1 = caml_call2(f, acc$0, eval$0(m$0));
       acc$0 = acc$1;
       param = l;
      }
      else{var l$0 = param[2]; param = l$0;}
     }
    }
    caml_call2
     (Stdlib_List[17], function(m$0){return add_dep$0(m$0, m[2]);}, emuts);
    return event(m, p, u);
   }
   function switch$0(e, param){
    if(! param) return e;
    var ms = param[1];
    if(e) var m = e[1], r = rsucc2(m[2], ms[2]); else var r = rsucc(ms[2]);
    var m$0 = emut(r), src = [0, e];
    function p(param){
     var match = src[1];
     if(! match) return [0, ms[2], 0];
     var m = match[1];
     return [0, m[2], [0, ms[2], 0]];
    }
    function u(c){
     var match = ms[1][1];
     if(! match){
      var match$2 = src[1];
      if(! match$2)
       throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
      var m$2 = match$2[1];
      return eupdate(eval$0(m$2), m$0, c);
     }
     var e = match[1], match$0 = src[1];
     if(match$0){var m = match$0[1]; rem_dep(m[2], m$0[2]);}
     src[1] = e;
     if(! e){var _bW_ = rsucc(ms[2]); update_rank(m$0[2], _bW_); return 0;}
     var m$1 = e[1];
     add_dep(m$1[2], m$0[2]);
     var _bV_ = rsucc2(m$1[2], ms[2]);
     if(update_rank(m$0[2], _bV_)){
      allow_reschedule(m$0[2]);
      return rebuild(c);
     }
     var match$1 = m$1[1][1];
     if(! match$1) return 0;
     var v = match$1[1];
     return eupdate(v, m$0, c);
    }
    if(e){var m$1 = e[1]; add_dep$0(m$1, m$0[2]);}
    add_dep$0(ms, m$0[2]);
    return event(m$0, p, u);
   }
   function fix(f){
    var
     m = emut(delayed_rank),
     e =
       event
        (m,
         function(param){return 0;},
         function(param){
          throw caml_maybe_attach_backtrace([0, Assert_failure, _f_], 1);
         }),
     _bS_ = caml_call1(f, e),
     match = _bS_[1];
    if(! match){var r$0 = _bS_[2]; return r$0;}
    var r = _bS_[2], m$0 = match[1];
    if(m$0[2][1] === delayed_rank) caml_call1(Stdlib[1], err_fix);
    function p(param){return 0;}
    function u(c){
     var _bT_ = [0, eval$0(m$0)];
     m[1][1] = _bT_;
     var v = m[1];
     add_eop(c, function(_bU_){v[1] = 0; return 0;});
     return add_deps(c, m[2]);
    }
    bind(m[2], p, u);
    add_dep$0(m$0, m[2]);
    return r;
   }
   function l2(f, e0, e1){
    if(! e0) return 0;
    if(! e1) return 0;
    var m1 = e1[1], m0 = e0[1], r = rsucc2(m0[2], m1[2]), m = emut(r);
    function p(param){return [0, m0[2], [0, m1[2], 0]];}
    function u(c){
     var _bR_ = m0[1][1], match = m1[1][1];
     if(_bR_ && match){
      var v1 = match[1], v0 = _bR_[1];
      return eupdate(caml_call2(f, v0, v1), m, c);
     }
     return 0;
    }
    add_dep$0(m0, m[2]);
    add_dep$0(m1, m[2]);
    return event(m, p, u);
   }
   function l3(f, e0, e1, e2){
    if(! e0) return 0;
    if(! e1) return 0;
    if(! e2) return 0;
    var
     m2 = e2[1],
     m1 = e1[1],
     m0 = e0[1],
     _bO_ = m2[2],
     r = rsucc(rmax(rmax(m0[2], m1[2]), _bO_)),
     m = emut(r);
    function p(param){return [0, m0[2], [0, m1[2], [0, m2[2], 0]]];}
    function u(c){
     var _bP_ = m0[1][1], _bQ_ = m1[1][1], match = m2[1][1];
     if(_bP_ && _bQ_ && match){
      var v2 = match[1], v1 = _bQ_[1], v0 = _bP_[1];
      return eupdate(caml_call3(f, v0, v1, v2), m, c);
     }
     return 0;
    }
    add_dep$0(m0, m[2]);
    add_dep$0(m1, m[2]);
    add_dep$0(m2, m[2]);
    return event(m, p, u);
   }
   function l4(f, e0, e1, e2, e3){
    if(! e0) return 0;
    if(! e1) return 0;
    if(! e2) return 0;
    if(! e3) return 0;
    var
     m3 = e3[1],
     m2 = e2[1],
     m1 = e1[1],
     m0 = e0[1],
     _bK_ = rmax(m2[2], m3[2]),
     r = rsucc(rmax(rmax(m0[2], m1[2]), _bK_)),
     m = emut(r);
    function p(param){
     return [0, m0[2], [0, m1[2], [0, m2[2], [0, m3[2], 0]]]];
    }
    function u(c){
     var _bL_ = m0[1][1], _bM_ = m1[1][1], _bN_ = m2[1][1], match = m3[1][1];
     if(_bL_ && _bM_ && _bN_ && match){
      var v3 = match[1], v2 = _bN_[1], v1 = _bM_[1], v0 = _bL_[1];
      return eupdate(caml_call4(f, v0, v1, v2, v3), m, c);
     }
     return 0;
    }
    add_dep$0(m0, m[2]);
    add_dep$0(m1, m[2]);
    add_dep$0(m2, m[2]);
    add_dep$0(m3, m[2]);
    return event(m, p, u);
   }
   function l5(f, e0, e1, e2, e3, e4){
    if(! e0) return 0;
    if(! e1) return 0;
    if(! e2) return 0;
    if(! e3) return 0;
    if(! e4) return 0;
    var
     m4 = e4[1],
     m3 = e3[1],
     m2 = e2[1],
     m1 = e1[1],
     m0 = e0[1],
     _bE_ = m4[2],
     _bF_ = rmax(m2[2], m3[2]),
     r = rsucc(rmax(rmax(rmax(m0[2], m1[2]), _bF_), _bE_)),
     m = emut(r);
    function p(param){
     return [0, m0[2], [0, m1[2], [0, m2[2], [0, m3[2], [0, m4[2], 0]]]]];
    }
    function u(c){
     var
      _bG_ = m0[1][1],
      _bH_ = m1[1][1],
      _bI_ = m2[1][1],
      _bJ_ = m3[1][1],
      match = m4[1][1];
     if(_bG_ && _bH_ && _bI_ && _bJ_ && match){
      var
       v4 = match[1],
       v3 = _bJ_[1],
       v2 = _bI_[1],
       v1 = _bH_[1],
       v0 = _bG_[1];
      return eupdate(caml_call5(f, v0, v1, v2, v3, v4), m, c);
     }
     return 0;
    }
    add_dep$0(m0, m[2]);
    add_dep$0(m1, m[2]);
    add_dep$0(m2, m[2]);
    add_dep$0(m3, m[2]);
    add_dep$0(m4, m[2]);
    return event(m, p, u);
   }
   function l6(f, e0, e1, e2, e3, e4, e5){
    if(! e0) return 0;
    if(! e1) return 0;
    if(! e2) return 0;
    if(! e3) return 0;
    if(! e4) return 0;
    if(! e5) return 0;
    var
     m5 = e5[1],
     m4 = e4[1],
     m3 = e3[1],
     m2 = e2[1],
     m1 = e1[1],
     m0 = e0[1],
     _bx_ = rmax(m4[2], m5[2]),
     _by_ = rmax(m2[2], m3[2]),
     r = rsucc(rmax(rmax(rmax(m0[2], m1[2]), _by_), _bx_)),
     m = emut(r);
    function p(param){
     return [0,
             m0[2],
             [0, m1[2], [0, m2[2], [0, m3[2], [0, m4[2], [0, m5[2], 0]]]]]];
    }
    function u(c){
     var
      _bz_ = m0[1][1],
      _bA_ = m1[1][1],
      _bB_ = m2[1][1],
      _bC_ = m3[1][1],
      _bD_ = m4[1][1],
      match = m5[1][1];
     if(_bz_ && _bA_ && _bB_ && _bC_ && _bD_ && match){
      var
       v5 = match[1],
       v4 = _bD_[1],
       v3 = _bC_[1],
       v2 = _bB_[1],
       v1 = _bA_[1],
       v0 = _bz_[1];
      return eupdate(caml_call6(f, v0, v1, v2, v3, v4, v5), m, c);
     }
     return 0;
    }
    add_dep$0(m0, m[2]);
    add_dep$0(m1, m[2]);
    add_dep$0(m2, m[2]);
    add_dep$0(m3, m[2]);
    add_dep$0(m4, m[2]);
    add_dep$0(m5, m[2]);
    return event(m, p, u);
   }
   function some(e){return map(function(v){return [0, v];}, e);}
   function value(default$0, e){
    if(! default$0) return fmap(function(v){return v;}, e);
    var match = default$0[1];
    if(0 === match[0]){
     var dv = match[1];
     return map
             (function(param){
               if(! param) return dv;
               var v = param[1];
               return v;
              },
              e);
    }
    var ms = match[1];
    if(! e) return 0;
    var m = e[1], m$0 = emut(rsucc2(m[2], ms[3]));
    function p(param){return [0, m[2], [0, ms[3], 0]];}
    function u(c){
     var _bw_ = m[1][1];
     if(! _bw_) return 0;
     var match = _bw_[1];
     if(! match) return eupdate(sval(ms), m$0, c);
     var v = match[1];
     return eupdate(v, m$0, c);
    }
    add_dep$0(m, m$0[2]);
    add_dep(ms[3], m$0[2]);
    return event(m$0, p, u);
   }
   var
    Option = [0, some, value],
    _g_ = [0, cst_src_react_ml, 994, 36],
    _h_ = [0, cst_src_react_ml, 1112, 18];
   function end_of_step_add_dep(opt, stop_if_stopped, m$0, m){
    if(opt)
     var sth = opt[1], post_add_op = sth;
    else
     var post_add_op = function(param){return 0;};
    var c = find_unfinished(caml_call1(m$0[3][4], 0));
    if(c === nil){add_dep(m$0[3], m[2]); return caml_call1(post_add_op, 0);}
    function add_dep$0(param){
     if(m$0[3][5] === nop)
      return stop_if_stopped ? stop(0, m[2]) : stop_if_stopped;
     var _bv_ = rsucc(m$0[3]);
     update_rank(m[2], _bv_);
     add_dep(m$0[3], m[2]);
     return caml_call1(post_add_op, 0);
    }
    return add_eop(c, add_dep$0);
   }
   function const$0(v){return [0, v];}
   function create$3(opt, v){
    if(opt) var sth = opt[1], eq = sth; else var eq = caml_equal;
    var m = smut(min_rank, eq);
    m[1] = [0, v];
    return [0,
            [1, m],
            function(step, v){
             var _bu_ = sval(m);
             if(caml_call2(m[2], _bu_, v)) return 0;
             if(! step){
              var c$0 = create$0(0);
              m[3][2] = c$0;
              m[1] = [0, v];
              add_deps(c$0, m[3]);
              return execute(c$0);
             }
             var c = step[1];
             if(c[1])
              caml_call1(Stdlib[1], err_step_executed);
             else if(m[3][2][1])
              m[3][2] = c;
             else
              caml_call1(Stdlib[1], err_signal_scheduled);
             m[1] = [0, v];
             return add_deps(c, m[3]);
            }];
   }
   function retain$0(s, c){
    if(0 === s[0]) return caml_call1(Stdlib[1], err_retain_cst_sig);
    var m = s[1], c$0 = m[3][3];
    m[3][3] = c;
    return [0, 82, c$0];
   }
   function eq_fun(param){
    if(0 === param[0]) return 0;
    var m = param[1];
    return [0, m[2]];
   }
   function value$0(param){
    if(0 === param[0])
     var v = param[1];
    else{
     var _bt_ = param[1][1];
     if(! _bt_) return caml_call1(Stdlib[2], err_sig_undef);
     var v = _bt_[1];
    }
    return v;
   }
   function stop$1(strong, param){
    if(0 === param[0]) return 0;
    var m = param[1];
    if(m[1]) return stop(strong, m[3]);
    var c = find_unfinished(caml_call1(m[3][4], 0));
    if(c === nil)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _g_], 1);
    function stop$0(param){return stop(strong, m[3]);}
    return add_eop(c, stop$0);
   }
   function equal$0(opt, s$0, s){
    if(opt) var sth = opt[1], eq = sth; else var eq = caml_equal;
    if(0 === s$0[0]){
     var v = s$0[1];
     if(0 === s[0]){var v$0 = s[1]; return caml_call2(eq, v, v$0);}
    }
    else{
     var m = s$0[1];
     if(0 !== s[0]){var m$0 = s[1]; return m === m$0 ? 1 : 0;}
    }
    return 0;
   }
   function trace$0(opt, t, s){
    if(opt) var sth = opt[1], iff = sth; else var iff = [0, 1];
    if(0 === iff[0]){
     if(! iff[1]) return s;
     if(0 === s[0]){var v = s[1]; caml_call1(t, v); return s;}
     var
      m = s[1],
      _br_ = m[2],
      m$0 = smut(rsucc(m[3]), _br_),
      p = function(param){return [0, m[3], 0];},
      u =
        function(c){
         var v = sval(m);
         caml_call1(t, v);
         return supdate(v, m$0, c);
        };
     add_dep(m[3], m$0[3]);
     return signal(0, m$0, p, u);
    }
    var mc = iff[1];
    if(0 === s[0]){
     var
      v$0 = s[1],
      m$1 = smut(rsucc(mc[3]), caml_equal),
      p$0 = function(param){return [0, mc[3], 0];},
      u$0 =
        function(c){
         if(sval(mc)) caml_call1(t, v$0);
         rem_dep(mc[3], m$1[3]);
         return stop(0, m$1[3]);
        };
     add_dep(mc[3], m$1[3]);
     return signal([0, v$0], m$1, p$0, u$0);
    }
    var m$2 = s[1], _bs_ = m$2[2], m$3 = smut(rsucc2(mc[3], m$2[3]), _bs_);
    function p$1(param){return [0, mc[3], [0, m$2[3], 0]];}
    function u$1(c){
     var v = sval(m$2), match = m$3[1];
     if(match){var v$0 = match[1]; if(caml_call2(m$3[2], v, v$0)) return 0;}
     if(sval(mc)) caml_call1(t, v);
     return supdate(v, m$3, c);
    }
    add_dep(mc[3], m$3[3]);
    add_dep(m$2[3], m$3[3]);
    return signal(0, m$3, p$1, u$1);
   }
   function hold(opt, i, param){
    if(opt) var sth = opt[1], eq = sth; else var eq = caml_equal;
    if(! param) return [0, i];
    var m = param[1], m$0 = smut(rsucc(m[2]), eq);
    function p(param){return [0, m[2], 0];}
    function u(c){
     var match = m[1][1];
     if(! match) return 0;
     var v = match[1];
     return supdate(v, m$0, c);
    }
    add_dep$0(m, m$0[3]);
    return signal([0, i], m$0, p, u);
   }
   function map$0(opt, f, param){
    if(opt) var sth = opt[1], eq = sth; else var eq = caml_equal;
    if(0 === param[0]){var v = param[1]; return [0, caml_call1(f, v)];}
    var m = param[1], m$0 = smut(rsucc(m[3]), eq);
    function p(param){return [0, m[3], 0];}
    function u(c){return supdate(caml_call1(f, sval(m)), m$0, c);}
    add_dep(m[3], m$0[3]);
    return signal(0, m$0, p, u);
   }
   function app$0(opt, sf, sv){
    if(opt) var sth = opt[1], eq = sth; else var eq = caml_equal;
    if(0 === sf[0]){
     var f = sf[1];
     if(0 !== sv[0]) return map$0([0, eq], f, sv);
     var v = sv[1];
     return [0, caml_call1(f, v)];
    }
    var mf = sf[1];
    if(0 === sv[0]){
     var
      v$0 = sv[1],
      m = smut(rsucc(mf[3]), eq),
      p = function(param){return [0, mf[3], 0];},
      u = function(c){return supdate(caml_call1(sval(mf), v$0), m, c);};
     add_dep(mf[3], m[3]);
     return signal(0, m, p, u);
    }
    var mv = sv[1], m$0 = smut(rsucc2(mf[3], mv[3]), eq);
    function p$0(param){return [0, mf[3], [0, mv[3], 0]];}
    function u$0(c){
     var _bq_ = sval(mv);
     return supdate(caml_call1(sval(mf), _bq_), m$0, c);
    }
    add_dep(mf[3], m$0[3]);
    add_dep(mv[3], m$0[3]);
    return signal(0, m$0, p$0, u$0);
   }
   function filter$0(opt, pred, i, s){
    if(opt) var sth = opt[1], eq = sth; else var eq = caml_equal;
    if(0 === s[0]){var v = s[1]; return caml_call1(pred, v) ? s : [0, i];}
    var m = s[1], m$0 = smut(rsucc(m[3]), eq);
    function p(param){return [0, m[3], 0];}
    function u(c){
     var v = sval(m);
     return caml_call1(pred, v) ? supdate(v, m$0, c) : 0;
    }
    add_dep(m[3], m$0[3]);
    return signal([0, i], m$0, p, u);
   }
   function fmap$0(opt, fm, i, param){
    if(opt) var sth = opt[1], eq = sth; else var eq = caml_equal;
    if(0 !== param[0]){
     var
      m = param[1],
      m$0 = smut(rsucc(m[3]), eq),
      p = function(param){return [0, m[3], 0];},
      u =
        function(c){
         var match = caml_call1(fm, sval(m));
         if(! match) return 0;
         var v = match[1];
         return supdate(v, m$0, c);
        };
     add_dep(m[3], m$0[3]);
     return signal([0, i], m$0, p, u);
    }
    var v = param[1], match = caml_call1(fm, v);
    if(! match) return [0, i];
    var v$0 = match[1];
    return [0, v$0];
   }
   function diff$0(d, param){
    if(0 === param[0]) return 0;
    var m = param[1], m$0 = emut(rsucc(m[3])), last = [0, 0];
    function p(param){return [0, m[3], 0];}
    function u(c){
     var v = sval(m), match = last[1];
     if(! match)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _h_], 1);
     var v$0 = match[1];
     last[1] = [0, v];
     return eupdate(caml_call2(d, v, v$0), m$0, c);
    }
    function post_add_op(param){last[1] = [0, sval(m)]; return 0;}
    end_of_step_add_dep([0, post_add_op], 1, m, m$0);
    return event(m$0, p, u);
   }
   function changes$0(param){
    if(0 === param[0]) return 0;
    var m = param[1], m$0 = emut(rsucc(m[3]));
    function p(param){return [0, m[3], 0];}
    function u(c){return eupdate(sval(m), m$0, c);}
    end_of_step_add_dep(0, 1, m, m$0);
    return event(m$0, p, u);
   }
   function sample(f, e, param){
    if(0 === param[0]){
     var v = param[1];
     return map(function(ev){return caml_call2(f, ev, v);}, e);
    }
    var ms = param[1];
    if(! e) return 0;
    var me = e[1], m = emut(rsucc2(me[2], ms[3]));
    function p(param){return [0, me[2], [0, ms[3], 0]];}
    function u(c){
     var match = me[1][1];
     if(! match) return 0;
     var v = match[1];
     return eupdate(caml_call2(f, v, sval(ms)), m, c);
    }
    add_dep$0(me, m[2]);
    add_dep(ms[3], m[2]);
    return event(m, p, u);
   }
   function on$0(opt, c, i, s){
    if(opt) var sth = opt[1], eq = sth; else var eq = caml_equal;
    if(0 === c[0]) return c[1] ? s : [0, i];
    var mc = c[1];
    if(0 === s[0]){
     var
      v = s[1],
      m = smut(rsucc(mc[3]), eq),
      p = function(param){return [0, mc[3], 0];},
      u = function(c){return sval(mc) ? supdate(v, m, c) : 0;};
     add_dep(mc[3], m[3]);
     return signal([0, i], m, p, u);
    }
    var ms = s[1], m$0 = smut(rsucc2(mc[3], ms[3]), eq);
    function p$0(param){return [0, mc[3], [0, ms[3], 0]];}
    function u$0(c){return sval(mc) ? supdate(sval(ms), m$0, c) : 0;}
    add_dep(mc[3], m$0[3]);
    add_dep(ms[3], m$0[3]);
    return signal([0, i], m$0, p$0, u$0);
   }
   function dismiss$0(opt, c, i, s){
    if(opt) var sth = opt[1], eq = sth; else var eq = caml_equal;
    if(! c) return s;
    var mc = c[1];
    if(0 === s[0]){
     var
      v = s[1],
      m = smut(rsucc(mc[2]), eq),
      p = function(param){return [0, mc[2], 0];},
      u = function(c){return mc[1][1] ? 0 : supdate(v, m, c);};
     add_dep(mc[2], m[3]);
     return signal([0, i], m, p, u);
    }
    var ms = s[1], m$0 = smut(rsucc2(mc[2], ms[3]), eq);
    function p$0(param){return [0, mc[2], [0, ms[3], 0]];}
    function u$0(c){return mc[1][1] ? 0 : supdate(sval(ms), m$0, c);}
    add_dep(mc[2], m$0[3]);
    add_dep(ms[3], m$0[3]);
    return signal([0, i], m$0, p$0, u$0);
   }
   function accum$0(opt, ef, i){
    if(opt) var sth = opt[1], eq = sth; else var eq = caml_equal;
    if(! ef) return [0, i];
    var m = ef[1], m$0 = smut(rsucc(m[2]), eq);
    function p(param){return [0, m[2], 0];}
    function u(c){
     var match = m[1][1];
     if(! match) return 0;
     var v = match[1];
     return supdate(caml_call1(v, sval(m$0)), m$0, c);
    }
    add_dep$0(m, m$0[3]);
    return signal([0, i], m$0, p, u);
   }
   function fold$1(opt, f, i, param){
    if(opt) var sth = opt[1], eq = sth; else var eq = caml_equal;
    if(! param) return [0, i];
    var m = param[1], m$0 = smut(rsucc(m[2]), eq);
    function p(param){return [0, m[2], 0];}
    function u(c){
     var match = m[1][1];
     if(! match) return 0;
     var v = match[1];
     return supdate(caml_call2(f, sval(m$0), v), m$0, c);
    }
    add_dep$0(m, m$0[3]);
    return signal([0, i], m$0, p, u);
   }
   function merge$0(opt, f, a, sl){
    if(opt) var sth = opt[1], eq = sth; else var eq = caml_equal;
    function rmax$0(acc, param){
     if(0 === param[0]) return acc;
     var m = param[1];
     return rmax(acc, m[3]);
    }
    function nodes(acc, param){
     if(0 === param[0]) return acc;
     var m = param[1];
     return [0, m[3], acc];
    }
    var m = smut(rsucc(caml_call3(Stdlib_List[25], rmax$0, rmin, sl)), eq);
    function p(param){return caml_call3(Stdlib_List[25], nodes, 0, sl);}
    function u(c){
     return supdate
             (caml_call3
               (Stdlib_List[25],
                function(a, param){
                 if(0 === param[0]){
                  var v = param[1];
                  return caml_call2(f, a, v);
                 }
                 var m = param[1];
                 return caml_call2(f, a, sval(m));
                },
                a,
                sl),
              m,
              c);
    }
    function dep(param){
     if(0 === param[0]) return 0;
     var m$0 = param[1];
     return add_dep(m$0[3], m[3]);
    }
    caml_call2(Stdlib_List[17], dep, sl);
    return signal(0, m, p, u);
   }
   function switch$1(opt, param){
    if(opt) var sth = opt[1], eq = sth; else var eq = caml_equal;
    if(0 === param[0]){var s = param[1]; return s;}
    var
     mss = param[1],
     dummy = smut(min_rank, eq),
     src = [0, [1, dummy]],
     m = smut(rsucc(mss[3]), eq);
    function p(param){
     var match = src[1];
     if(0 === match[0]) return [0, mss[3], 0];
     var m = match[1];
     return [0, mss[3], [0, m[3], 0]];
    }
    function u(c){
     var _bm_ = src[1];
     if(sval(mss) === _bm_){
      var match = src[1];
      if(0 === match[0]) return 0;
      var m$0 = match[1];
      return supdate(sval(m$0), m, c);
     }
     var match$0 = src[1];
     if(0 !== match$0[0]){var m$2 = match$0[1]; rem_dep(m$2[3], m[3]);}
     var new_src = sval(mss);
     src[1] = new_src;
     if(0 === new_src[0]){
      var v = new_src[1], _bn_ = rsucc(mss[3]);
      update_rank(m[3], _bn_);
      return supdate(v, m, c);
     }
     var m$1 = new_src[1];
     add_dep(m$1[3], m[3]);
     if(c === nil){
      var _bo_ = rsucc2(m$1[3], mss[3]);
      update_rank(m[3], _bo_);
      var c$0 = find_unfinished([0, m$1[3], 0]);
      return c$0 === nil ? supdate(sval(m$1), m, c$0) : add$0(c$0, m[3]);
     }
     var _bp_ = rsucc2(m$1[3], mss[3]);
     return update_rank(m[3], _bp_)
             ? (allow_reschedule(m[3]), rebuild(c), add$0(c, m[3]))
             : supdate(sval(m$1), m, c);
    }
    add_dep(mss[3], m[3]);
    add_dep(dummy[3], m[3]);
    return signal(0, m, p, u);
   }
   function bind$0(eq, s, sf){
    return switch$1
            (eq,
             map$0
              ([0, function(_bl_, _bk_){return _bl_ === _bk_ ? 1 : 0;}],
               sf,
               s));
   }
   function fix$0(opt, i, f){
    if(opt) var sth = opt[1], eq = sth; else var eq = caml_equal;
    function update_delayed(n, p, u, nl){
     bind(n, p, u);
     var c = find_unfinished(nl);
     if(c !== nil) return add$0(c, n);
     var c$0 = create$0(0);
     caml_call1(n[5], c$0);
     return execute(c$0);
    }
    var
     m = smut(delayed_rank, eq),
     s =
       signal
        ([0, i], m, function(param){return 0;}, function(param){return 0;}),
     _bh_ = caml_call1(f, s),
     match = _bh_[1];
    if(0 === match[0]){
     var
      r = _bh_[2],
      v = match[1],
      p = function(param){return 0;},
      u = function(c){return supdate(v, m, c);},
      _bi_ = deps(m[3]);
     update_delayed(m[3], p, u, _bi_);
     return r;
    }
    var r$0 = _bh_[2], m$0 = match[1];
    if(m$0[3][1] === delayed_rank) caml_call1(Stdlib[1], err_fix);
    function p$0(param){return 0;}
    function u$0(c){return supdate(sval(m$0), m, c);}
    add_dep(m$0[3], m[3]);
    var _bj_ = deps(m[3]);
    update_delayed(m[3], p$0, u$0, [0, m$0[3], _bj_]);
    return r$0;
   }
   function l2$0(opt, f, s$0, s){
    if(opt) var sth = opt[1], eq = sth; else var eq = caml_equal;
    if(0 === s$0[0]){
     var v = s$0[1];
     if(0 === s[0]){var v$0 = s[1]; return [0, caml_call2(f, v, v$0)];}
     var
      m = s[1],
      m$0 = smut(rsucc(m[3]), eq),
      p = function(param){return [0, m[3], 0];},
      u = function(c){return supdate(caml_call2(f, v, sval(m)), m$0, c);};
     add_dep(m[3], m$0[3]);
     return signal(0, m$0, p, u);
    }
    var m0 = s$0[1];
    if(0 === s[0]){
     var
      v$1 = s[1],
      m$1 = smut(rsucc(m0[3]), eq),
      p$0 = function(param){return [0, m0[3], 0];},
      u$0 = function(c){return supdate(caml_call2(f, sval(m0), v$1), m$1, c);};
     add_dep(m0[3], m$1[3]);
     return signal(0, m$1, p$0, u$0);
    }
    var m1 = s[1], m$2 = smut(rsucc2(m0[3], m1[3]), eq);
    function p$1(param){return [0, m0[3], [0, m1[3], 0]];}
    function u$1(c){
     var _bg_ = sval(m1);
     return supdate(caml_call2(f, sval(m0), _bg_), m$2, c);
    }
    add_dep(m0[3], m$2[3]);
    add_dep(m1[3], m$2[3]);
    return signal(0, m$2, p$1, u$1);
   }
   function l3$0(opt, f, s0, s1, s2){
    if(opt) var sth = opt[1], eq = sth; else var eq = caml_equal;
    if(0 === s0[0]){
     var v0 = s0[1];
     if(0 === s1[0]){
      var v1 = s1[1];
      if(0 === s2[0]){var v2 = s2[1]; return [0, caml_call3(f, v0, v1, v2)];}
     }
    }
    else{
     var m0 = s0[1];
     if(0 !== s1[0]){
      var m1 = s1[1];
      if(0 !== s2[0]){
       var
        m2 = s2[1],
        _bb_ = m2[3],
        r = rsucc(rmax(rmax(m0[3], m1[3]), _bb_)),
        m = smut(r, eq),
        p = function(param){return [0, m0[3], [0, m1[3], [0, m2[3], 0]]];},
        u =
          function(c){
           var _be_ = sval(m2), _bf_ = sval(m1);
           return supdate(caml_call3(f, sval(m0), _bf_, _be_), m, c);
          };
       add_dep(m0[3], m[3]);
       add_dep(m1[3], m[3]);
       add_dep(m2[3], m[3]);
       return signal(0, m, p, u);
      }
     }
    }
    return app$0
            ([0, eq],
             l2$0
              ([0, function(_bd_, _bc_){return _bd_ === _bc_ ? 1 : 0;}],
               f,
               s0,
               s1),
             s2);
   }
   function l4$0(opt, f, s0, s1, s2, s3){
    if(opt) var sth = opt[1], eq = sth; else var eq = caml_equal;
    if(0 === s0[0]){
     var v0 = s0[1];
     if(0 === s1[0]){
      var v1 = s1[1];
      if(0 === s2[0]){
       var v2 = s2[1];
       if(0 === s3[0]){
        var v3 = s3[1];
        return [0, caml_call4(f, v0, v1, v2, v3)];
       }
      }
     }
    }
    else{
     var m0 = s0[1];
     if(0 !== s1[0]){
      var m1 = s1[1];
      if(0 !== s2[0]){
       var m2 = s2[1];
       if(0 !== s3[0]){
        var
         m3 = s3[1],
         _a7_ = rmax(m2[3], m3[3]),
         r = rsucc(rmax(rmax(m0[3], m1[3]), _a7_)),
         m = smut(r, eq),
         p =
           function(param){
            return [0, m0[3], [0, m1[3], [0, m2[3], [0, m3[3], 0]]]];
           },
         u =
           function(c){
            var _a__ = sval(m3), _a$_ = sval(m2), _ba_ = sval(m1);
            return supdate(caml_call4(f, sval(m0), _ba_, _a$_, _a__), m, c);
           };
        add_dep(m0[3], m[3]);
        add_dep(m1[3], m[3]);
        add_dep(m2[3], m[3]);
        add_dep(m3[3], m[3]);
        return signal(0, m, p, u);
       }
      }
     }
    }
    return app$0
            ([0, eq],
             l3$0
              ([0, function(_a9_, _a8_){return _a9_ === _a8_ ? 1 : 0;}],
               f,
               s0,
               s1,
               s2),
             s3);
   }
   function l5$0(opt, f, s0, s1, s2, s3, s4){
    if(opt) var sth = opt[1], eq = sth; else var eq = caml_equal;
    if(0 === s0[0]){
     var v0 = s0[1];
     if(0 === s1[0]){
      var v1 = s1[1];
      if(0 === s2[0]){
       var v2 = s2[1];
       if(0 === s3[0]){
        var v3 = s3[1];
        if(0 === s4[0]){
         var v4 = s4[1];
         return [0, caml_call5(f, v0, v1, v2, v3, v4)];
        }
       }
      }
     }
    }
    else{
     var m0 = s0[1];
     if(0 !== s1[0]){
      var m1 = s1[1];
      if(0 !== s2[0]){
       var m2 = s2[1];
       if(0 !== s3[0]){
        var m3 = s3[1];
        if(0 !== s4[0]){
         var
          m4 = s4[1],
          _aZ_ = rmax(m3[3], m4[3]),
          _a0_ = rmax(m2[3], _aZ_),
          r = rsucc(rmax(rmax(m0[3], m1[3]), _a0_)),
          m = smut(r, eq),
          p =
            function(param){
             return [0,
                     m0[3],
                     [0, m1[3], [0, m2[3], [0, m3[3], [0, m4[3], 0]]]]];
            },
          u =
            function(c){
             var
              _a3_ = sval(m4),
              _a4_ = sval(m3),
              _a5_ = sval(m2),
              _a6_ = sval(m1),
              v = caml_call5(f, sval(m0), _a6_, _a5_, _a4_, _a3_);
             return supdate(v, m, c);
            };
         add_dep(m0[3], m[3]);
         add_dep(m1[3], m[3]);
         add_dep(m2[3], m[3]);
         add_dep(m3[3], m[3]);
         add_dep(m4[3], m[3]);
         return signal(0, m, p, u);
        }
       }
      }
     }
    }
    return app$0
            ([0, eq],
             l4$0
              ([0, function(_a2_, _a1_){return _a2_ === _a1_ ? 1 : 0;}],
               f,
               s0,
               s1,
               s2,
               s3),
             s4);
   }
   function l6$0(opt, f, s0, s1, s2, s3, s4, s5){
    if(opt) var sth = opt[1], eq = sth; else var eq = caml_equal;
    if(0 === s0[0]){
     var v0 = s0[1];
     if(0 === s1[0]){
      var v1 = s1[1];
      if(0 === s2[0]){
       var v2 = s2[1];
       if(0 === s3[0]){
        var v3 = s3[1];
        if(0 === s4[0]){
         var v4 = s4[1];
         if(0 === s5[0]){
          var v5 = s5[1];
          return [0, caml_call6(f, v0, v1, v2, v3, v4, v5)];
         }
        }
       }
      }
     }
    }
    else{
     var m0 = s0[1];
     if(0 !== s1[0]){
      var m1 = s1[1];
      if(0 !== s2[0]){
       var m2 = s2[1];
       if(0 !== s3[0]){
        var m3 = s3[1];
        if(0 !== s4[0]){
         var m4 = s4[1];
         if(0 !== s5[0]){
          var
           m5 = s5[1],
           _aP_ = rmax(m4[3], m5[3]),
           _aQ_ = rmax(m3[3], _aP_),
           _aR_ = rmax(m1[3], m2[3]),
           m = rmax(rmax(m0[3], _aR_), _aQ_),
           m$0 = smut(rsucc(m), eq),
           p =
             function(param){
              return [0,
                      m0[3],
                      [0,
                       m1[3],
                       [0, m2[3], [0, m3[3], [0, m4[3], [0, m5[3], 0]]]]]];
             },
           u =
             function(c){
              var
               _aU_ = sval(m5),
               _aV_ = sval(m4),
               _aW_ = sval(m3),
               _aX_ = sval(m2),
               _aY_ = sval(m1),
               v = caml_call6(f, sval(m0), _aY_, _aX_, _aW_, _aV_, _aU_);
              return supdate(v, m$0, c);
             };
          add_dep(m0[3], m$0[3]);
          add_dep(m1[3], m$0[3]);
          add_dep(m2[3], m$0[3]);
          add_dep(m3[3], m$0[3]);
          add_dep(m4[3], m$0[3]);
          add_dep(m5[3], m$0[3]);
          return signal(0, m$0, p, u);
         }
        }
       }
      }
     }
    }
    return app$0
            ([0, eq],
             l5$0
              ([0, function(_aT_, _aS_){return _aT_ === _aS_ ? 1 : 0;}],
               f,
               s0,
               s1,
               s2,
               s3,
               s4),
             s5);
   }
   function stdlib_not(_aO_){return 1 - _aO_;}
   function equal$1(_aN_, _aM_){return _aN_ === _aM_ ? 1 : 0;}
   function not(s){return map$0([0, equal$1], stdlib_not, s);}
   function symbol(s$0, s){
    return l2$0
            ([0, equal$1],
             function(_aK_, _aJ_){var _aL_ = _aK_ ? _aJ_ : _aK_; return _aL_;},
             s$0,
             s);
   }
   function symbol$0(s$0, s){
    return l2$0
            ([0, equal$1],
             function(_aH_, _aG_){var _aI_ = _aH_ || _aG_; return _aI_;},
             s$0,
             s);
   }
   function edge(s){return changes$0(s);}
   function edge_detect(edge, param){
    if(0 === param[0]) return 0;
    var m = param[1], m$0 = emut(rsucc(m[3]));
    function p(param){return [0, m[3], 0];}
    function u(c){
     var _aF_ = caml_equal(sval(m), edge);
     return _aF_ ? eupdate(0, m$0, c) : _aF_;
    }
    end_of_step_add_dep(0, 1, m, m$0);
    return event(m$0, p, u);
   }
   function rise(s){return edge_detect(1, s);}
   function fall(s){return edge_detect(0, s);}
   function flip(b, param){
    if(! param) return [0, b];
    var
     m = param[1],
     m$0 =
       smut(rsucc(m[2]), function(_aE_, _aD_){return _aE_ === _aD_ ? 1 : 0;});
    function p(param){return [0, m[2], 0];}
    function u(c){return m[1][1] ? supdate(1 - sval(m$0), m$0, c) : 0;}
    add_dep$0(m, m$0[3]);
    return signal([0, b], m$0, p, u);
   }
   function equal$2(_aC_, _aB_){return _aC_ === _aB_ ? 1 : 0;}
   function symbol$1(s){
    return map$0([0, equal$2], function(_aA_){return - _aA_ | 0;}, s);
   }
   function succ(s){
    return map$0([0, equal$2], function(_az_){return _az_ + 1 | 0;}, s);
   }
   function pred(s){
    return map$0([0, equal$2], function(_ay_){return _ay_ - 1 | 0;}, s);
   }
   function symbol$2(s$0, s){
    return l2$0
            ([0, equal$2],
             function(_ax_, _aw_){return _ax_ + _aw_ | 0;},
             s$0,
             s);
   }
   function symbol$3(s$0, s){
    return l2$0
            ([0, equal$2],
             function(_av_, _au_){return _av_ - _au_ | 0;},
             s$0,
             s);
   }
   function symbol$4(s$0, s){
    return l2$0([0, equal$2], runtime.caml_mul, s$0, s);
   }
   function mod(s$0, s){return l2$0([0, equal$2], runtime.caml_mod, s$0, s);}
   function abs(s){return map$0([0, equal$2], Stdlib[18], s);}
   var v = Stdlib[19], max_int = [0, v], v$0 = Stdlib[20], min_int = [0, v$0];
   function land(s$0, s){
    return l2$0
            ([0, equal$2], function(_at_, _as_){return _at_ & _as_;}, s$0, s);
   }
   function lor(s$0, s){
    return l2$0
            ([0, equal$2], function(_ar_, _aq_){return _ar_ | _aq_;}, s$0, s);
   }
   function lxor(s$0, s){
    return l2$0
            ([0, equal$2], function(_ap_, _ao_){return _ap_ ^ _ao_;}, s$0, s);
   }
   function lnot(s){return map$0([0, equal$2], Stdlib[21], s);}
   function lsl(s$0, s){
    return l2$0
            ([0, equal$2], function(_an_, _am_){return _an_ << _am_;}, s$0, s);
   }
   function lsr(s$0, s){
    return l2$0
            ([0, equal$2],
             function(_al_, _ak_){return _al_ >>> _ak_ | 0;},
             s$0,
             s);
   }
   function asr(s$0, s){
    return l2$0
            ([0, equal$2], function(_aj_, _ai_){return _aj_ >> _ai_;}, s$0, s);
   }
   function equal$3(_ah_, _ag_){return _ah_ == _ag_ ? 1 : 0;}
   function symbol$5(s){
    return map$0([0, equal$3], function(_af_){return - _af_;}, s);
   }
   function symbol$6(s$0, s){
    return l2$0
            ([0, equal$3], function(_ae_, _ad_){return _ae_ + _ad_;}, s$0, s);
   }
   function symbol$7(s$0, s){
    return l2$0
            ([0, equal$3], function(_ac_, _ab_){return _ac_ - _ab_;}, s$0, s);
   }
   function symbol$8(s$0, s){
    return l2$0([0, equal$3], function(_aa_, _$_){return _aa_ * _$_;}, s$0, s);
   }
   function symbol$9(s$0, s){
    return l2$0([0, equal$3], function(___, _Z_){return ___ / _Z_;}, s$0, s);
   }
   function symbol$10(s$0, s){
    return l2$0
            ([0, equal$3],
             function(_Y_, _X_){return Math.pow(_Y_, _X_);},
             s$0,
             s);
   }
   function sqrt(s){
    return map$0([0, equal$3], function(_W_){return Math.sqrt(_W_);}, s);
   }
   function exp(s){
    return map$0([0, equal$3], function(_V_){return Math.exp(_V_);}, s);
   }
   function log(s){
    return map$0([0, equal$3], function(_U_){return Math.log(_U_);}, s);
   }
   function log10(s){return map$0([0, equal$3], runtime.caml_log10_float, s);}
   function cos(s){
    return map$0([0, equal$3], function(_T_){return Math.cos(_T_);}, s);
   }
   function sin(s){
    return map$0([0, equal$3], function(_S_){return Math.sin(_S_);}, s);
   }
   function tan(s){
    return map$0([0, equal$3], function(_R_){return Math.tan(_R_);}, s);
   }
   function acos(s){
    return map$0([0, equal$3], function(_Q_){return Math.acos(_Q_);}, s);
   }
   function asin(s){
    return map$0([0, equal$3], function(_P_){return Math.asin(_P_);}, s);
   }
   function atan(s){
    return map$0([0, equal$3], function(_O_){return Math.atan(_O_);}, s);
   }
   function atan2(s$0, s){
    return l2$0
            ([0, equal$3],
             function(_N_, _M_){return Math.atan2(_N_, _M_);},
             s$0,
             s);
   }
   function cosh(s){return map$0([0, equal$3], runtime.caml_cosh_float, s);}
   function sinh(s){return map$0([0, equal$3], runtime.caml_sinh_float, s);}
   function tanh(s){return map$0([0, equal$3], runtime.caml_tanh_float, s);}
   function ceil(s){
    return map$0([0, equal$3], function(_L_){return Math.ceil(_L_);}, s);
   }
   function floor(s){
    return map$0([0, equal$3], function(_K_){return Math.floor(_K_);}, s);
   }
   function abs_float(s){
    return map$0([0, equal$3], function(_J_){return Math.abs(_J_);}, s);
   }
   function mod_float(s$0, s){
    return l2$0([0, equal$3], function(_I_, _H_){return _I_ % _H_;}, s$0, s);
   }
   function frexp(s){
    return map$0([0, caml_equal], runtime.caml_frexp_float, s);
   }
   function ldexp(s$0, s){
    return l2$0([0, equal$3], runtime.caml_ldexp_float, s$0, s);
   }
   function modf(s){
    return map$0([0, caml_equal], runtime.caml_modf_float, s);
   }
   function float$0(s){
    return map$0([0, equal$3], function(_G_){return _G_;}, s);
   }
   function float_of_int(s){
    return map$0([0, equal$3], function(_F_){return _F_;}, s);
   }
   function truncate(s){
    return map$0([0, equal$2], function(_E_){return _E_ | 0;}, s);
   }
   function int_of_float(s){
    return map$0([0, equal$2], function(_D_){return _D_ | 0;}, s);
   }
   var
    v$1 = Stdlib[22],
    infinity = [0, v$1],
    v$2 = Stdlib[23],
    neg_infinity = [0, v$2],
    v$3 = Stdlib[24],
    nan = [0, v$3],
    v$4 = Stdlib[25],
    max_float = [0, v$4],
    v$5 = Stdlib[26],
    min_float = [0, v$5],
    v$6 = Stdlib[27],
    epsilon_float = [0, v$6];
   function classify_float(s){
    return map$0
            ([0, function(_C_, _B_){return _C_ === _B_ ? 1 : 0;}],
             runtime.caml_classify_float,
             s);
   }
   function pair(eq, s$0, s){
    return l2$0(eq, function(x, y){return [0, x, y];}, s$0, s);
   }
   function fst(eq, s){return map$0(eq, function(_A_){return _A_[1];}, s);}
   function snd(eq, s){return map$0(eq, function(_z_){return _z_[2];}, s);}
   var Pair = [0, pair, fst, snd], _i_ = [0, cst_src_react_ml, 1526, 17];
   function some$0(s){
    var match = eq_fun(s);
    if(match)
     var
      eq = match[1],
      eq$0 =
        function(v$0, v){
         if(v$0 && v){
          var v$1 = v[1], v$2 = v$0[1];
          return caml_call2(eq, v$2, v$1);
         }
         throw caml_maybe_attach_backtrace([0, Assert_failure, _i_], 1);
        },
      eq$1 = [0, eq$0];
    else
     var eq$1 = 0;
    return map$0(eq$1, function(v){return [0, v];}, s);
   }
   function value$1(opt, default$0, s){
    if(opt) var sth = opt[1], eq = sth; else var eq = caml_equal;
    if(0 === s[0]){
     var match = s[1];
     if(match){var v = match[1]; return [0, v];}
     if(815032112 > default$0[1]){var d$1 = default$0[2]; return d$1;}
     var d = default$0[2];
     if(0 === d[0]){var d$0 = d[1]; return [0, d$0];}
     var md = d[1], c = find_unfinished([0, md[3], 0]);
     if(c === nil) return [0, sval(md)];
     var
      m = smut(rsucc(md[3]), eq),
      p = function(param){return [0, md[3], 0];},
      u =
        function(c){
         rem_dep(md[3], m[3]);
         supdate(sval(md), m, c);
         return stop(0, m[3]);
        };
     add_dep(md[3], m[3]);
     return signal(0, m, p, u);
    }
    var m$0 = s[1];
    if(815032112 <= default$0[1]){
     var match$0 = default$0[2];
     if(0 === match$0[0]){
      var d$2 = match$0[1];
      return fmap$0([0, eq], function(v){return v;}, d$2, s);
     }
     var md$0 = match$0[1], c$0 = find_unfinished([0, md$0[3], 0]);
     if(c$0 === nil){
      var
       m$1 = smut(rsucc(m$0[3]), eq),
       p$0 = function(param){return [0, m$0[3], 0];},
       u$0 =
         function(c){
          var match = sval(m$0);
          if(! match) return 0;
          var v = match[1];
          return supdate(v, m$1, c);
         };
      add_dep(m$0[3], m$1[3]);
      return signal([0, sval(md$0)], m$1, p$0, u$0);
     }
     var
      m$2 = smut(rsucc2(m$0[3], md$0[3]), eq),
      p$1 = function(param){return [0, m$0[3], 0];},
      u$1 =
        function(c){
         var match = sval(m$0);
         if(! match) return 0;
         var v = match[1];
         return supdate(v, m$2, c);
        },
      p_first = function(param){return [0, m$0[3], [0, md$0[3], 0]];},
      u_first =
        function(c){
         rem_dep(md$0[3], m$2[3]);
         var match = sval(m$0);
         if(match){
          var v = match[1];
          supdate(v, m$2, c);
         }
         else
          supdate(sval(md$0), m$2, c);
         return bind(m$2[3], p$1, u$1);
        };
     add_dep(m$0[3], m$2[3]);
     add_dep(md$0[3], m$2[3]);
     return signal(0, m$2, p_first, u_first);
    }
    var match$1 = default$0[2];
    if(0 === match$1[0]){
     var d$3 = match$1[1];
     return map$0
             ([0, eq],
              function(param){
               if(! param) return d$3;
               var v = param[1];
               return v;
              },
              s);
    }
    var md$1 = match$1[1], m$3 = smut(rsucc2(m$0[3], md$1[3]), eq);
    function p$2(param){return [0, m$0[3], [0, md$1[3], 0]];}
    function u$2(c){
     var match = sval(m$0);
     if(! match) return supdate(sval(md$1), m$3, c);
     var v = match[1];
     return supdate(v, m$3, c);
    }
    add_dep(m$0[3], m$3[3]);
    add_dep(md$1[3], m$3[3]);
    return signal(0, m$3, p$2, u$2);
   }
   var Option$0 = [0, none, some$0, value$1];
   function symbol$11(s$0, s){return l2$0([0, equal$1], caml_equal, s$0, s);}
   function symbol$12(s$0, s){
    return l2$0([0, equal$1], runtime.caml_notequal, s$0, s);
   }
   function symbol$13(s$0, s){
    return l2$0([0, equal$1], runtime.caml_lessthan, s$0, s);
   }
   function symbol$14(s$0, s){
    return l2$0([0, equal$1], runtime.caml_greaterthan, s$0, s);
   }
   function symbol$15(s$0, s){
    return l2$0([0, equal$1], runtime.caml_lessequal, s$0, s);
   }
   function symbol$16(s$0, s){
    return l2$0([0, equal$1], runtime.caml_greaterequal, s$0, s);
   }
   function compare(s$0, s){
    return l2$0([0, equal$2], runtime.caml_compare, s$0, s);
   }
   function symbol$17(s$0, s){
    return l2$0
            ([0, equal$1],
             function(_y_, _x_){return _y_ === _x_ ? 1 : 0;},
             s$0,
             s);
   }
   function symbol$18(s$0, s){
    return l2$0
            ([0, equal$1],
             function(_w_, _v_){return _w_ !== _v_ ? 1 : 0;},
             s$0,
             s);
   }
   function Make(Eq){
    var eq = Eq[1];
    function create(v){return create$3([0, eq], v);}
    function equal(s$0, s){return equal$0([0, eq], s$0, s);}
    function hold$0(v, e){return hold([0, eq], v, e);}
    function app(sf, sv){return app$0([0, eq], sf, sv);}
    function map(f, s){return map$0([0, eq], f, s);}
    function filter(pred, i){
     var _t_ = [0, eq];
     return function(_u_){return filter$0(_t_, pred, i, _u_);};
    }
    function fmap(fm, i){
     var _r_ = [0, eq];
     return function(_s_){return fmap$0(_r_, fm, i, _s_);};
    }
    function when(c, i, s){return on$0([0, eq], c, i, s);}
    function dismiss(c, s){
     var _p_ = [0, eq];
     return function(_q_){return dismiss$0(_p_, c, s, _q_);};
    }
    function accum(ef, i){return accum$0([0, eq], ef, i);}
    function fold(f, i){
     var _n_ = [0, eq];
     return function(_o_){return fold$1(_n_, f, i, _o_);};
    }
    function merge(f, a, sl){return merge$0([0, eq], f, a, sl);}
    function switch$0(s){return switch$1([0, eq], s);}
    function bind(s, sf){return bind$0([0, eq], s, sf);}
    function fix(f){
     var _l_ = [0, eq];
     return function(_m_){return fix$0(_l_, f, _m_);};
    }
    function l2(f, s$0, s){return l2$0([0, eq], f, s$0, s);}
    function l3(f, s0, s1, s2){return l3$0([0, eq], f, s0, s1, s2);}
    function l4(f, s0, s1, s2, s3){return l4$0([0, eq], f, s0, s1, s2, s3);}
    function l5(f, s0, s1, s2, s3, s4){
     return l5$0([0, eq], f, s0, s1, s2, s3, s4);
    }
    function l6(f, s0, s1, s2, s3, s4, s5){
     return l6$0([0, eq], f, s0, s1, s2, s3, s4, s5);
    }
    return [0,
            ,
            create,
            equal,
            hold$0,
            app,
            map,
            filter,
            fmap,
            when,
            dismiss,
            accum,
            fold,
            merge,
            switch$0,
            bind,
            fix,
            map,
            l2,
            l3,
            l4,
            l5,
            l6];
   }
   var
    Sb = Make([0, equal$1]),
    Si = Make([0, equal$2]),
    Sf = Make([0, equal$3]),
    React =
      [0,
       [0,
        0,
        create$2,
        retain,
        stop$0,
        equal,
        trace,
        once,
        drop_once,
        app,
        map,
        stamp,
        filter,
        fmap,
        diff,
        changes,
        on,
        on,
        dismiss,
        until,
        accum,
        fold$0,
        select,
        merge,
        switch$0,
        fix,
        map,
        l2,
        l3,
        l4,
        l5,
        l6,
        Option],
       [0,
        const$0,
        create$3,
        value$0,
        retain$0,
        eq_fun,
        stop$1,
        equal$0,
        trace$0,
        hold,
        app$0,
        map$0,
        filter$0,
        fmap$0,
        diff$0,
        changes$0,
        sample,
        on$0,
        on$0,
        dismiss$0,
        accum$0,
        fold$1,
        merge$0,
        switch$1,
        bind$0,
        fix$0,
        map$0,
        l2$0,
        l3$0,
        l4$0,
        l5$0,
        l6$0,
        [0, zero, one, not, symbol, symbol$0, edge, rise, fall, flip],
        [0,
         zero$0,
         one$0,
         minus_one,
         symbol$1,
         succ,
         pred,
         symbol$2,
         symbol$3,
         symbol$4,
         mod,
         abs,
         max_int,
         min_int,
         land,
         lor,
         lxor,
         lnot,
         lsl,
         lsr,
         asr],
        [0,
         zero$1,
         one$1,
         minus_one$0,
         symbol$5,
         symbol$6,
         symbol$7,
         symbol$8,
         symbol$9,
         symbol$10,
         sqrt,
         exp,
         log,
         log10,
         cos,
         sin,
         tan,
         acos,
         asin,
         atan,
         atan2,
         cosh,
         sinh,
         tanh,
         ceil,
         floor,
         abs_float,
         mod_float,
         frexp,
         ldexp,
         modf,
         float$0,
         float_of_int,
         truncate,
         int_of_float,
         infinity,
         neg_infinity,
         nan,
         max_float,
         min_float,
         epsilon_float,
         classify_float],
        Pair,
        Option$0,
        [0,
         symbol$11,
         symbol$12,
         symbol$13,
         symbol$14,
         symbol$15,
         symbol$16,
         compare,
         symbol$17,
         symbol$18],
        function(_j_){
         var _k_ = Make(_j_);
         return [0,
                 _k_[2],
                 _k_[3],
                 _k_[4],
                 _k_[5],
                 _k_[6],
                 _k_[7],
                 _k_[8],
                 _k_[9],
                 _k_[10],
                 _k_[11],
                 _k_[12],
                 _k_[13],
                 _k_[14],
                 _k_[15],
                 _k_[16],
                 _k_[17],
                 _k_[18],
                 _k_[19],
                 _k_[20],
                 _k_[21],
                 _k_[22]];
        },
        [0,
         [0,
          Sb[2],
          Sb[3],
          Sb[4],
          Sb[5],
          Sb[6],
          Sb[7],
          Sb[8],
          Sb[9],
          Sb[10],
          Sb[11],
          Sb[12],
          Sb[13],
          Sb[14],
          Sb[15],
          Sb[16],
          Sb[17],
          Sb[18],
          Sb[19],
          Sb[20],
          Sb[21],
          Sb[22]],
         [0,
          Si[2],
          Si[3],
          Si[4],
          Si[5],
          Si[6],
          Si[7],
          Si[8],
          Si[9],
          Si[10],
          Si[11],
          Si[12],
          Si[13],
          Si[14],
          Si[15],
          Si[16],
          Si[17],
          Si[18],
          Si[19],
          Si[20],
          Si[21],
          Si[22]],
         [0,
          Sf[2],
          Sf[3],
          Sf[4],
          Sf[5],
          Sf[6],
          Sf[7],
          Sf[8],
          Sf[9],
          Sf[10],
          Sf[11],
          Sf[12],
          Sf[13],
          Sf[14],
          Sf[15],
          Sf[16],
          Sf[17],
          Sf[18],
          Sf[19],
          Sf[20],
          Sf[21],
          Sf[22]]]],
       [0, create$0, execute]];
   runtime.caml_register_global(30, React, "React");
   return;
  }
  (globalThis));


//# 1 "../src/.ocaml_canvas.objs/jsoo/default/ocaml_canvas.cma.js"
// Generated by js_of_ocaml
//# 3 "../src/.ocaml_canvas.objs/jsoo/default/ocaml_canvas.cma.js"

//# 6 "../src/.ocaml_canvas.objs/jsoo/default/ocaml_canvas.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$2 = "",
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$2,
    cst$0 = cst$2,
    cst$1 = cst$2,
    zero = [0, 0., 0.],
    unit = [0, 1., 1.],
    id = [254, 1., 0., 0., 1., 0., 0.],
    React = global_data.React,
    Stdlib = global_data.Stdlib,
    Stdlib_Bigarray = global_data.Stdlib__Bigarray,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Callback = global_data.Stdlib__Callback,
    Stdlib_Map = global_data.Stdlib__Map,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl;
   function valid_canvas_size(param){
    var height = param[2], width = param[1], _dI_ = 0 < width ? 1 : 0;
    if(_dI_){
     var _dJ_ = width <= 32767 ? 1 : 0;
     if(_dJ_)
      var
       _dK_ = 0 < height ? 1 : 0,
       _dL_ = _dK_ ? height <= 32767 ? 1 : 0 : _dK_;
     else
      var _dL_ = _dJ_;
    }
    else
     var _dL_ = _dI_;
    return _dL_;
   }
   var
    Not_initialized =
      [248, "OcamlCanvas.V1.Exception.Not_initialized", caml_fresh_oo_id(0)],
    File_not_found =
      [248, "OcamlCanvas.V1.Exception.File_not_found", caml_fresh_oo_id(0)],
    Read_png_failed =
      [248, "OcamlCanvas.V1.Exception.Read_png_failed", caml_fresh_oo_id(0)],
    Write_png_failed =
      [248, "OcamlCanvas.V1.Exception.Write_png_failed", caml_fresh_oo_id(0)];
   caml_call2(Stdlib_Callback[2], "Not_initialized", Not_initialized);
   caml_call2(Stdlib_Callback[2], "File_not_found", [0, File_not_found, cst]);
   caml_call2
    (Stdlib_Callback[2], "Read_png_failed", [0, Read_png_failed, cst$0]);
   caml_call2
    (Stdlib_Callback[2], "Write_png_failed", [0, Write_png_failed, cst$1]);
   var
    Exception =
      [0, Not_initialized, File_not_found, Read_png_failed, Write_png_failed],
    Const =
      [0,
       3.141592653589793,
       1.5707963267948966,
       0.7853981633974483,
       0.39269908169872414,
       0.3183098861837907,
       0.6366197723675814,
       1.2732395447351628,
       2.5464790894703255,
       2.718281828459045,
       0.36787944117144233,
       1.4426950408889634,
       0.4342944819032518,
       0.6931471805599453,
       2.302585092994046];
   function add(param, _dH_){
    var y2 = _dH_[2], x2 = _dH_[1], y1 = param[2], x1 = param[1];
    return [0, x1 + x2, y1 + y2];
   }
   function sub(param, _dG_){
    var y2 = _dG_[2], x2 = _dG_[1], y1 = param[2], x1 = param[1];
    return [0, x1 - x2, y1 - y2];
   }
   function mul(param, k){
    var y = param[2], x = param[1];
    return [0, x * k, y * k];
   }
   function dot(param, _dF_){
    var y2 = _dF_[2], x2 = _dF_[1], y1 = param[2], x1 = param[1];
    return x1 * x2 + y1 * y2;
   }
   function norm(param){
    var y = param[2], x = param[1];
    return Math.sqrt(x * x + y * y);
   }
   var
    Vector = [0, zero, unit, add, sub, mul, dot, norm],
    cst_Transform_inverse_the_matr =
      "Transform.inverse: the matrix is not inversible";
   function create(param){
    var
     f = param[6],
     e = param[5],
     d = param[4],
     c = param[3],
     b = param[2],
     a = param[1];
    return [254, a, b, c, d, e, f];
   }
   function mul$0(t1, t2){
    return [254,
            t1[1] * t2[1] + t1[3] * t2[2],
            t1[2] * t2[1] + t1[4] * t2[2],
            t1[1] * t2[3] + t1[3] * t2[4],
            t1[2] * t2[3] + t1[4] * t2[4],
            t1[5] + t1[1] * t2[5] + t1[3] * t2[6],
            t1[6] + t1[2] * t2[5] + t1[4] * t2[6]];
   }
   function translate(t, param){
    var y = param[2], x = param[1];
    return [254,
            t[1],
            t[2],
            t[3],
            t[4],
            x * t[1] + y * t[3],
            x * t[2] + y * t[4]];
   }
   function scale(t, param){
    var y = param[2], x = param[1];
    return [254, t[1] * x, t[2] * x, t[3] * y, t[4] * y, t[5], t[6]];
   }
   function shear(t, param){
    var y = param[2], x = param[1];
    return [254,
            t[1] + t[3] * y,
            t[2] + t[4] * y,
            t[3] + t[1] * x,
            t[4] + t[2] * x,
            t[5],
            t[6]];
   }
   function rotate(t, a){
    var cos_a = Math.cos(- a), sin_a = Math.sin(- a);
    return [254,
            t[1] * cos_a - t[3] * sin_a,
            t[2] * cos_a - t[4] * sin_a,
            t[3] * cos_a + t[1] * sin_a,
            t[4] * cos_a + t[2] * sin_a,
            t[5],
            t[6]];
   }
   function inverse(t){
    var det = t[1] * t[4] - t[2] * t[3];
    if(det == 0.) caml_call1(Stdlib[1], cst_Transform_inverse_the_matr);
    var invdet = 1. / det;
    return [254,
            t[4] * invdet,
            - t[2] * invdet,
            - t[3] * invdet,
            t[1] * invdet,
            (t[3] * t[6] - t[4] * t[5]) * invdet,
            (t[2] * t[5] - t[1] * t[6]) * invdet];
   }
   var
    Transform =
      [0, id, create, mul$0, translate, scale, shear, rotate, inverse],
    cst_Point_barycenter_a_b_must_ = "Point.barycenter: a + b must be non-nul";
   function of_ints(param){var y = param[2], x = param[1]; return [0, x, y];}
   function sub$0(param, _dE_){
    var y2 = _dE_[2], x2 = _dE_[1], y1 = param[2], x1 = param[1];
    return [0, x1 - x2, y1 - y2];
   }
   function translate$0(param, _dD_){
    var b = _dD_[2], a = _dD_[1], y = param[2], x = param[1];
    return [0, x + a, y + b];
   }
   function rotate$0(param, _dC_, theta){
    var cy = _dC_[2], cx = _dC_[1], y = param[2], x = param[1];
    return [0,
            (x - cx) * Math.cos(- theta) + (y - cy) * Math.sin(- theta) + cx,
            (y - cy) * Math.cos(- theta) - (x - cx) * Math.sin(- theta) + cy];
   }
   function transform(param, t){
    var y = param[2], x = param[1];
    return [0, x * t[1] + y * t[3] + t[5], x * t[2] + y * t[4] + t[6]];
   }
   function barycenter(a, param, b, _dB_){
    var
     y2 = _dB_[2],
     x2 = _dB_[1],
     y1 = param[2],
     x1 = param[1],
     sum_ab = a + b;
    if(sum_ab == 0.) caml_call1(Stdlib[1], cst_Point_barycenter_a_b_must_);
    return [0, (a * x1 + b * x2) / sum_ab, (a * y1 + b * y2) / sum_ab];
   }
   function distance(param, _dA_){
    var y2 = _dA_[2], x2 = _dA_[1], y1 = param[2], x1 = param[1];
    return Math.sqrt(Math.pow(x2 - x1, 2.) + Math.pow(y2 - y1, 2.));
   }
   var
    Point =
      [0,
       of_ints,
       sub$0,
       translate$0,
       rotate$0,
       transform,
       barycenter,
       distance];
   function clip_8(i){return 0 <= i ? 255 < i ? 255 : i : 0;}
   function of_rgb(r, g, b){
    var _dy_ = clip_8(b), _dz_ = clip_8(g) << 8;
    return (((clip_8(r) << 16) + _dz_ | 0) + _dy_ | 0) - 16777216 | 0;
   }
   function to_rgb(c){
    return [0, (c >>> 16 | 0) & 255, (c >>> 8 | 0) & 255, c & 255];
   }
   function of_argb(a, r, g, b){
    var
     _dv_ = clip_8(b),
     _dw_ = clip_8(g) << 8,
     _dx_ = ((clip_8(r) << 16) + _dw_ | 0) + _dv_ | 0;
    return (clip_8(a) << 24) + _dx_ | 0;
   }
   function to_argb(c){
    return [0,
            c >>> 24 | 0,
            (c >>> 16 | 0) & 255,
            (c >>> 8 | 0) & 255,
            c & 255];
   }
   function of_int(i){
    return 0 <= i ? 16777215 < i ? -1 : i - 16777216 | 0 : 0;
   }
   function to_int(c){return c & 16777215;}
   function of_int32(i){return i;}
   function to_int32(c){return c;}
   var
    StringMap = caml_call1(Stdlib_Map[1], [0, Stdlib_String[9]]),
    colors = [0, StringMap[1]];
   function define_color(name, c){
    var _dt_ = colors[1], _du_ = caml_call1(Stdlib_String[26], name);
    colors[1] = caml_call3(StringMap[4], _du_, c, _dt_);
    return c;
   }
   var
    transpBlack = define_color("transparent_black", 0),
    transpWhite = define_color("transparent_white", 16777215),
    black = define_color("black", -16777216),
    white = define_color("white", -1),
    blue = define_color("blue", -16776961),
    cyan = define_color("cyan", -16711681),
    green = define_color("green", -16744448),
    lime = define_color("lime", -16711936),
    orange = define_color("orange", -23296),
    pink = define_color("pink", -16181),
    red = define_color("red", -65536),
    cst_0x = "0x";
   function of_string(s){
    if(1 > caml_ml_string_length(s)) return black;
    if(35 === runtime.caml_string_get(s, 0)){
     var
      _dn_ =
        caml_call3(Stdlib_String[15], s, 1, caml_ml_string_length(s) - 1 | 0),
      s$0 = caml_call2(Stdlib[28], cst_0x, _dn_);
     return of_int(runtime.caml_int_of_string(s$0));
    }
    try{
     var
      _dp_ = colors[1],
      _dq_ = caml_call1(Stdlib_String[26], s),
      _dr_ = caml_call2(StringMap[28], _dq_, _dp_);
     return _dr_;
    }
    catch(_ds_){
     var _do_ = caml_wrap_exception(_ds_);
     if(_do_ === Stdlib[8]) return black;
     throw caml_maybe_attach_backtrace(_do_, 0);
    }
   }
   var
    Font = [0, 100, 200, 300, 400, 500, 600, 700, 800, 900],
    list = [0, 0],
    cst_ImageData_create_invalid_i =
      "ImageData.create: invalid image dimensions",
    cst_ImageData_of_bigarray_inva =
      "ImageData.of_bigarray: invalid image dimensions",
    cst_ImageData_of_bigarray_thir =
      "ImageData.of_bigarray: third dimension must be 4";
   function add_image_data(event, send_event, c){
    list[1] = [0, [0, event, send_event, c], list[1]];
    return 0;
   }
   function add_canvas(event, send_event, c){
    list[1] = [0, [1, event, send_event, c], list[1]];
    return 0;
   }
   function create$0(param){
    var height = param[2], width = param[1];
    if(1 - valid_canvas_size([0, width, height]))
     caml_call1(Stdlib[1], cst_ImageData_create_invalid_i);
    var
     a =
       caml_call5
        (Stdlib_Bigarray[21][1],
         Stdlib_Bigarray[6],
         Stdlib_Bigarray[15],
         height,
         width,
         4);
    runtime.caml_ba_fill(a, 0);
    return a;
   }
   function createFromPNG(filename){
    var
     match = caml_call1(React[1][2], 0),
     send_event = match[2],
     event = match[1];
    runtime.ml_canvas_image_data_create_from_png
     (filename, function(id){return add_image_data(event, send_event, id);});
    return event;
   }
   function importPNG(id, pos, filename){
    var
     match = caml_call1(React[1][2], 0),
     send_event = match[2],
     event = match[1];
    runtime.ml_canvas_image_data_import_png
     (id,
      pos,
      filename,
      function(id){return add_image_data(event, send_event, id);});
    return event;
   }
   function of_bigarray(ba){
    var _dm_ = runtime.caml_ba_dim_1(ba);
    if(1 - valid_canvas_size([0, runtime.caml_ba_dim_2(ba), _dm_]))
     caml_call1(Stdlib[1], cst_ImageData_of_bigarray_inva);
    if(4 !== runtime.caml_ba_dim_3(ba))
     caml_call1(Stdlib[1], cst_ImageData_of_bigarray_thir);
    return ba;
   }
   var Join = [0], Cap = [0], Style = [0], CompositeOp = [0];
   caml_call2(Stdlib_Callback[1], "Hashtbl.hash", Stdlib_Hashtbl[28]);
   function createOffscreenFromPNG(filename){
    var
     match = caml_call1(React[1][2], 0),
     send_event = match[2],
     event = match[1];
    runtime.ml_canvas_create_offscreen_from_png
     (filename, function(c){return add_canvas(event, send_event, c);});
    return event;
   }
   function importPNG$0(c, pos, filename){
    var
     match = caml_call1(React[1][2], 0),
     send_event = match[2],
     event = match[1];
    runtime.ml_canvas_import_png
     (c, pos, filename, function(c){return add_canvas(event, send_event, c);});
    return event;
   }
   var
    match = caml_call1(React[1][2], 0),
    send_frame = match[2],
    frame = match[1],
    match$0 = caml_call1(React[1][2], 0),
    send_focus_in = match$0[2],
    focus_in = match$0[1],
    match$1 = caml_call1(React[1][2], 0),
    send_focus_out = match$1[2],
    focus_out = match$1[1],
    match$2 = caml_call1(React[1][2], 0),
    send_resize = match$2[2],
    resize = match$2[1],
    match$3 = caml_call1(React[1][2], 0),
    send_move = match$3[2],
    move = match$3[1],
    match$4 = caml_call1(React[1][2], 0),
    send_close = match$4[2],
    close = match$4[1],
    match$5 = caml_call1(React[1][2], 0),
    send_key_down = match$5[2],
    key_down = match$5[1],
    match$6 = caml_call1(React[1][2], 0),
    send_key_up = match$6[2],
    key_up = match$6[1],
    match$7 = caml_call1(React[1][2], 0),
    send_button_down = match$7[2],
    button_down = match$7[1],
    match$8 = caml_call1(React[1][2], 0),
    send_button_up = match$8[2],
    button_up = match$8[1],
    match$9 = caml_call1(React[1][2], 0),
    send_mouse_move = match$9[2],
    mouse_move = match$9[1],
    match$10 =
      caml_call2(React[2][2], 0, runtime.caml_int64_create_lo_mi_hi(0, 0, 0)),
    set_event_timestamp = match$10[2],
    event_timestamp = match$10[1];
   function run(k){
    function h(e){
     switch(e[0]){
       case 0: break;
       case 1:
        var
         match = e[1],
         timestamp = match[2],
         canvas = match[1],
         e$0 = [0, canvas, timestamp, 0];
        caml_call2(set_event_timestamp, 0, e$0[2]);
        caml_call2(send_frame, 0, e$0);
        break;
       case 2:
        var _dj_ = e[1], timestamp$0 = _dj_[2], canvas$0 = _dj_[1];
        if(_dj_[3]){
         var e$1 = [0, canvas$0, timestamp$0, 0];
         caml_call2(set_event_timestamp, 0, e$1[2]);
         caml_call2(send_focus_in, 0, e$1);
        }
        else{
         var e$2 = [0, canvas$0, timestamp$0, 0];
         caml_call2(set_event_timestamp, 0, e$2[2]);
         caml_call2(send_focus_out, 0, e$2);
        }
        break;
       case 3:
        var
         match$0 = e[1],
         size = match$0[3],
         timestamp$1 = match$0[2],
         canvas$1 = match$0[1],
         e$3 = [0, canvas$1, timestamp$1, size];
        caml_call2(set_event_timestamp, 0, e$3[2]);
        caml_call2(send_resize, 0, e$3);
        break;
       case 4:
        var
         match$1 = e[1],
         position = match$1[3],
         timestamp$2 = match$1[2],
         canvas$2 = match$1[1],
         e$4 = [0, canvas$2, timestamp$2, position];
        caml_call2(set_event_timestamp, 0, e$4[2]);
        caml_call2(send_move, 0, e$4);
        break;
       case 5:
        var
         match$2 = e[1],
         timestamp$3 = match$2[2],
         canvas$3 = match$2[1],
         e$5 = [0, canvas$3, timestamp$3, 0];
        caml_call2(set_event_timestamp, 0, e$5[2]);
        caml_call2(send_close, 0, e$5);
        break;
       case 6:
        var
         _dk_ = e[1],
         flags = _dk_[5],
         char$0 = _dk_[4],
         key = _dk_[3],
         timestamp$4 = _dk_[2],
         canvas$4 = _dk_[1];
        if(_dk_[6]){
         var e$6 = [0, canvas$4, timestamp$4, [0, key, char$0, flags]];
         caml_call2(set_event_timestamp, 0, e$6[2]);
         caml_call2(send_key_down, 0, e$6);
        }
        else{
         var e$7 = [0, canvas$4, timestamp$4, [0, key, char$0, flags]];
         caml_call2(set_event_timestamp, 0, e$7[2]);
         caml_call2(send_key_up, 0, e$7);
        }
        break;
       case 7:
        var
         _dl_ = e[1],
         button = _dl_[4],
         position$0 = _dl_[3],
         timestamp$5 = _dl_[2],
         canvas$5 = _dl_[1];
        if(_dl_[5]){
         var e$8 = [0, canvas$5, timestamp$5, [0, position$0, button]];
         caml_call2(set_event_timestamp, 0, e$8[2]);
         caml_call2(send_button_down, 0, e$8);
        }
        else{
         var e$9 = [0, canvas$5, timestamp$5, [0, position$0, button]];
         caml_call2(set_event_timestamp, 0, e$9[2]);
         caml_call2(send_button_up, 0, e$9);
        }
        break;
       default:
        var
         match$3 = e[1],
         position$1 = match$3[3],
         timestamp$6 = match$3[2],
         canvas$6 = match$3[1],
         e$10 = [0, canvas$6, timestamp$6, position$1];
        caml_call2(set_event_timestamp, 0, e$10[2]);
        caml_call2(send_mouse_move, 0, e$10);
     }
     var l = list[1];
     if(! l) return 0;
     list[1] = 0;
     var _di_ = caml_call1(Stdlib_List[9], l);
     return caml_call2
             (Stdlib_List[17],
              function(param){
               if(0 === param[0]){
                var id = param[3], send_event = param[2], event = param[1];
                caml_call2(send_event, 0, id);
                return caml_call2(React[1][4], 0, event);
               }
               var c = param[3], send_event$0 = param[2], event$0 = param[1];
               caml_call2(send_event$0, 0, c);
               return caml_call2(React[1][4], 0, event$0);
              },
              _di_);
    }
    return runtime.ml_canvas_run(h, k);
   }
   var
    OcamlCanvas =
      [0,
       [0,
        Exception,
        Const,
        Vector,
        Transform,
        Point,
        [0,
         of_rgb,
         to_rgb,
         of_argb,
         to_argb,
         of_int,
         to_int,
         of_int32,
         to_int32,
         transpBlack,
         transpWhite,
         black,
         white,
         blue,
         cyan,
         green,
         lime,
         orange,
         pink,
         red,
         of_string,
         define_color],
        Font,
        [0,
         create$0,
         createFromPNG,
         function(_dh_){return runtime.ml_canvas_image_data_get_size(_dh_);},
         function(_dg_, _df_){
          return runtime.ml_canvas_image_data_fill(_dg_, _df_);
         },
         function(_de_, _dd_, _dc_){
          return runtime.ml_canvas_image_data_sub(_de_, _dd_, _dc_);
         },
         function(_db_, _da_, _c$_, _c__, _c9_){
          return runtime.ml_canvas_image_data_blit
                  (_db_, _da_, _c$_, _c__, _c9_);
         },
         function(_c8_, _c7_){
          return runtime.ml_canvas_image_data_get_pixel(_c8_, _c7_);
         },
         function(_c6_, _c5_, _c4_){
          return runtime.ml_canvas_image_data_put_pixel(_c6_, _c5_, _c4_);
         },
         importPNG,
         function(_c3_, _c2_){
          return runtime.ml_canvas_image_data_export_png(_c3_, _c2_);
         },
         of_bigarray,
         function(_c1_){return _c1_;}],
        [0,
         function(_c0_, _cZ_){
          return runtime.ml_canvas_gradient_create_linear(_c0_, _cZ_);
         },
         function(_cY_, _cX_, _cW_, _cV_){
          return runtime.ml_canvas_gradient_create_radial
                  (_cY_, _cX_, _cW_, _cV_);
         },
         function(_cU_, _cT_){
          return runtime.ml_canvas_gradient_create_conic(_cU_, _cT_);
         },
         function(_cS_, _cR_, _cQ_){
          return runtime.ml_canvas_gradient_add_color_stop(_cS_, _cR_, _cQ_);
         }],
        [0,
         function(_cP_, _cO_){
          return runtime.ml_canvas_pattern_create(_cP_, _cO_);
         }],
        [0,
         function(_cN_){return runtime.ml_canvas_path_create(_cN_);},
         function(_cM_, _cL_){
          return runtime.ml_canvas_path_move_to(_cM_, _cL_);
         },
         function(_cK_){return runtime.ml_canvas_path_close(_cK_);},
         function(_cJ_, _cI_){
          return runtime.ml_canvas_path_line_to(_cJ_, _cI_);
         },
         function(_cH_, _cG_, _cF_, _cE_, _cD_, _cC_){
          return runtime.ml_canvas_path_arc
                  (_cH_, _cG_, _cF_, _cE_, _cD_, _cC_);
         },
         function(_cB_, _cA_, _cz_, _cy_){
          return runtime.ml_canvas_path_arc_to(_cB_, _cA_, _cz_, _cy_);
         },
         function(_cx_, _cw_, _cv_){
          return runtime.ml_canvas_path_quadratic_curve_to(_cx_, _cw_, _cv_);
         },
         function(_cu_, _ct_, _cs_, _cr_){
          return runtime.ml_canvas_path_bezier_curve_to
                  (_cu_, _ct_, _cs_, _cr_);
         },
         function(_cq_, _cp_, _co_){
          return runtime.ml_canvas_path_rect(_cq_, _cp_, _co_);
         },
         function(_cn_, _cm_, _cl_, _ck_, _cj_, _ci_, _ch_){
          return runtime.ml_canvas_path_ellipse
                  (_cn_, _cm_, _cl_, _ck_, _cj_, _ci_, _ch_);
         },
         function(_cg_, _cf_){return runtime.ml_canvas_path_add(_cg_, _cf_);},
         function(_ce_, _cd_, _cc_){
          return runtime.ml_canvas_path_add_transformed(_ce_, _cd_, _cc_);
         }],
        Join,
        Cap,
        Style,
        CompositeOp,
        [0,
         function(_cb_, _ca_){return runtime.ml_canvas_compare(_cb_, _ca_);},
         function(_b$_){return runtime.ml_canvas_hash(_b$_);},
         function
         (_b__, _b9_, _b8_, _b7_, _b6_, _b5_, _b4_, _b3_, _b2_, _b1_, _b0_){
          return runtime.ml_canvas_create_onscreen
                  (_b__,
                   _b9_,
                   _b8_,
                   _b7_,
                   _b6_,
                   _b5_,
                   _b4_,
                   _b3_,
                   _b2_,
                   _b1_,
                   _b0_);
         },
         function(_bZ_, _bY_){
          return runtime.ml_canvas_create_offscreen(_bZ_, _bY_);
         },
         function(_bX_){
          return runtime.ml_canvas_create_offscreen_from_image_data(_bX_);
         },
         createOffscreenFromPNG,
         function(_bW_){return runtime.ml_canvas_show(_bW_);},
         function(_bV_){return runtime.ml_canvas_hide(_bV_);},
         function(_bU_){return runtime.ml_canvas_close(_bU_);},
         function(_bT_){return runtime.ml_canvas_commit(_bT_);},
         function(_bS_){return runtime.ml_canvas_get_id(_bS_);},
         function(_bR_){return runtime.ml_canvas_get_size(_bR_);},
         function(_bQ_, _bP_){return runtime.ml_canvas_set_size(_bQ_, _bP_);},
         function(_bO_){return runtime.ml_canvas_get_position(_bO_);},
         function(_bN_, _bM_){
          return runtime.ml_canvas_set_position(_bN_, _bM_);
         },
         function(_bL_){return runtime.ml_canvas_save(_bL_);},
         function(_bK_){return runtime.ml_canvas_restore(_bK_);},
         function(_bJ_, _bI_){
          return runtime.ml_canvas_set_transform(_bJ_, _bI_);
         },
         function(_bH_, _bG_){return runtime.ml_canvas_transform(_bH_, _bG_);},
         function(_bF_, _bE_){return runtime.ml_canvas_translate(_bF_, _bE_);},
         function(_bD_, _bC_){return runtime.ml_canvas_scale(_bD_, _bC_);},
         function(_bB_, _bA_){return runtime.ml_canvas_shear(_bB_, _bA_);},
         function(_bz_, _by_){return runtime.ml_canvas_rotate(_bz_, _by_);},
         function(_bx_){return runtime.ml_canvas_get_line_width(_bx_);},
         function(_bw_, _bv_){
          return runtime.ml_canvas_set_line_width(_bw_, _bv_);
         },
         function(_bu_){return runtime.ml_canvas_get_line_join(_bu_);},
         function(_bt_, _bs_){
          return runtime.ml_canvas_set_line_join(_bt_, _bs_);
         },
         function(_br_){return runtime.ml_canvas_get_line_cap(_br_);},
         function(_bq_, _bp_){
          return runtime.ml_canvas_set_line_cap(_bq_, _bp_);
         },
         function(_bo_){return runtime.ml_canvas_get_miter_limit(_bo_);},
         function(_bn_, _bm_){
          return runtime.ml_canvas_set_miter_limit(_bn_, _bm_);
         },
         function(_bl_){return runtime.ml_canvas_get_line_dash_offset(_bl_);},
         function(_bk_, _bj_){
          return runtime.ml_canvas_set_line_dash_offset(_bk_, _bj_);
         },
         function(_bi_){return runtime.ml_canvas_get_line_dash(_bi_);},
         function(_bh_, _bg_){
          return runtime.ml_canvas_set_line_dash(_bh_, _bg_);
         },
         function(_bf_){return runtime.ml_canvas_get_stroke_color(_bf_);},
         function(_be_, _bd_){
          return runtime.ml_canvas_set_stroke_color(_be_, _bd_);
         },
         function(_bc_, _bb_){
          return runtime.ml_canvas_set_stroke_gradient(_bc_, _bb_);
         },
         function(_ba_, _a$_){
          return runtime.ml_canvas_set_stroke_pattern(_ba_, _a$_);
         },
         function(_a__){return runtime.ml_canvas_get_stroke_style(_a__);},
         function(_a9_, _a8_){
          return runtime.ml_canvas_set_stroke_style(_a9_, _a8_);
         },
         function(_a7_){return runtime.ml_canvas_get_fill_color(_a7_);},
         function(_a6_, _a5_){
          return runtime.ml_canvas_set_fill_color(_a6_, _a5_);
         },
         function(_a4_, _a3_){
          return runtime.ml_canvas_set_fill_gradient(_a4_, _a3_);
         },
         function(_a2_, _a1_){
          return runtime.ml_canvas_set_fill_pattern(_a2_, _a1_);
         },
         function(_a0_){return runtime.ml_canvas_get_fill_style(_a0_);},
         function(_aZ_, _aY_){
          return runtime.ml_canvas_set_fill_style(_aZ_, _aY_);
         },
         function(_aX_){return runtime.ml_canvas_get_global_alpha(_aX_);},
         function(_aW_, _aV_){
          return runtime.ml_canvas_set_global_alpha(_aW_, _aV_);
         },
         function(_aU_){
          return runtime.ml_canvas_get_global_composite_operation(_aU_);
         },
         function(_aT_, _aS_){
          return runtime.ml_canvas_set_global_composite_operation(_aT_, _aS_);
         },
         function(_aR_){return runtime.ml_canvas_get_shadow_color(_aR_);},
         function(_aQ_, _aP_){
          return runtime.ml_canvas_set_shadow_color(_aQ_, _aP_);
         },
         function(_aO_){return runtime.ml_canvas_get_shadow_blur(_aO_);},
         function(_aN_, _aM_){
          return runtime.ml_canvas_set_shadow_blur(_aN_, _aM_);
         },
         function(_aL_){return runtime.ml_canvas_get_shadow_offset(_aL_);},
         function(_aK_, _aJ_){
          return runtime.ml_canvas_set_shadow_offset(_aK_, _aJ_);
         },
         function(_aI_, _aH_, _aG_, _aF_, _aE_){
          return runtime.ml_canvas_set_font(_aI_, _aH_, _aG_, _aF_, _aE_);
         },
         function(_aD_){return runtime.ml_canvas_clear_path(_aD_);},
         function(_aC_){return runtime.ml_canvas_close_path(_aC_);},
         function(_aB_, _aA_){return runtime.ml_canvas_move_to(_aB_, _aA_);},
         function(_az_, _ay_){return runtime.ml_canvas_line_to(_az_, _ay_);},
         function(_ax_, _aw_, _av_, _au_, _at_, _as_){
          return runtime.ml_canvas_arc(_ax_, _aw_, _av_, _au_, _at_, _as_);
         },
         function(_ar_, _aq_, _ap_, _ao_){
          return runtime.ml_canvas_arc_to(_ar_, _aq_, _ap_, _ao_);
         },
         function(_an_, _am_, _al_){
          return runtime.ml_canvas_quadratic_curve_to(_an_, _am_, _al_);
         },
         function(_ak_, _aj_, _ai_, _ah_){
          return runtime.ml_canvas_bezier_curve_to(_ak_, _aj_, _ai_, _ah_);
         },
         function(_ag_, _af_, _ae_){
          return runtime.ml_canvas_rect(_ag_, _af_, _ae_);
         },
         function(_ad_, _ac_, _ab_, _aa_, _$_, ___, _Z_){
          return runtime.ml_canvas_ellipse
                  (_ad_, _ac_, _ab_, _aa_, _$_, ___, _Z_);
         },
         function(_Y_, _X_){return runtime.ml_canvas_fill(_Y_, _X_);},
         function(_W_, _V_, _U_){
          return runtime.ml_canvas_fill_path(_W_, _V_, _U_);
         },
         function(_T_){return runtime.ml_canvas_stroke(_T_);},
         function(_S_, _R_){return runtime.ml_canvas_stroke_path(_S_, _R_);},
         function(_Q_, _P_){return runtime.ml_canvas_clip(_Q_, _P_);},
         function(_O_, _N_, _M_){
          return runtime.ml_canvas_clip_path(_O_, _N_, _M_);
         },
         function(_L_, _K_, _J_){
          return runtime.ml_canvas_fill_rect(_L_, _K_, _J_);
         },
         function(_I_, _H_, _G_){
          return runtime.ml_canvas_stroke_rect(_I_, _H_, _G_);
         },
         function(_F_, _E_, _D_){
          return runtime.ml_canvas_fill_text(_F_, _E_, _D_);
         },
         function(_C_, _B_, _A_){
          return runtime.ml_canvas_stroke_text(_C_, _B_, _A_);
         },
         function(_z_, _y_, _x_, _w_, _v_){
          return runtime.ml_canvas_blit(_z_, _y_, _x_, _w_, _v_);
         },
         function(_u_, _t_){return runtime.ml_canvas_get_pixel(_u_, _t_);},
         function(_s_, _r_, _q_){
          return runtime.ml_canvas_put_pixel(_s_, _r_, _q_);
         },
         function(_p_, _o_, _n_){
          return runtime.ml_canvas_get_image_data(_p_, _o_, _n_);
         },
         function(_m_, _l_, _k_, _j_, _i_){
          return runtime.ml_canvas_put_image_data(_m_, _l_, _k_, _j_, _i_);
         },
         importPNG$0,
         function(_h_, _g_){return runtime.ml_canvas_export_png(_h_, _g_);}],
        [0,
         frame,
         focus_in,
         focus_out,
         resize,
         move,
         close,
         key_down,
         key_up,
         button_down,
         button_up,
         mouse_move,
         event_timestamp,
         function(_f_){return runtime.ml_canvas_int_of_key(_f_);},
         function(_e_){return runtime.ml_canvas_key_of_int(_e_);}],
        [0,
         function(_d_){return runtime.ml_canvas_init(_d_);},
         run,
         function(_c_){return runtime.ml_canvas_stop(_c_);},
         function(_b_){return runtime.ml_canvas_get_canvas(_b_);},
         function(_a_){return runtime.ml_canvas_get_current_timestamp(_a_);}]]];
   runtime.caml_register_global(82, OcamlCanvas, "OcamlCanvas");
   return;
  }
  (globalThis));


//# 1 ".hello.eobjs/jsoo/dune__exe__Hello.cmo.js"
// Generated by js_of_ocaml
//# 3 ".hello.eobjs/jsoo/dune__exe__Hello.cmo.js"

//# 6 ".hello.eobjs/jsoo/dune__exe__Hello.cmo.js"
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call11(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10){
    return (f.l >= 0 ? f.l : f.l = f.length) == 11
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Int64 = global_data.Stdlib__Int64,
    OcamlCanvas = global_data.OcamlCanvas,
    React = global_data.React,
    events = [0, 0];
   function retain_event(e){events[1] = [0, e, events[1]]; return 0;}
   function clear_events(param){events[1] = 0; return 0;}
   var state = [0, 0, runtime.caml_int64_create_lo_mi_hi(0, 0, 0)];
   caml_call1(OcamlCanvas[1][18][1], 0);
   var
    c =
      caml_call11
       (OcamlCanvas[1][16][3],
        0,
        0,
        0,
        0,
        0,
        0,
        [0, "Hello world"],
        0,
        [0, [0, 300, 200]],
        [0, 300, 200],
        0);
   caml_call2(OcamlCanvas[1][16][43], c, OcamlCanvas[1][6][17]);
   caml_call3(OcamlCanvas[1][16][75], c, [0, 0., 0.], [0, 300., 200.]);
   caml_call2(OcamlCanvas[1][16][37], c, OcamlCanvas[1][6][14]);
   caml_call2(OcamlCanvas[1][16][25], c, 10.);
   caml_call1(OcamlCanvas[1][16][59], c);
   caml_call2(OcamlCanvas[1][16][61], c, [0, 5., 5.]);
   caml_call2(OcamlCanvas[1][16][62], c, [0, 295., 5.]);
   caml_call2(OcamlCanvas[1][16][62], c, [0, 295., 195.]);
   caml_call2(OcamlCanvas[1][16][62], c, [0, 5., 195.]);
   caml_call1(OcamlCanvas[1][16][60], c);
   caml_call1(OcamlCanvas[1][16][71], c);
   caml_call5
    (OcamlCanvas[1][16][58],
     c,
     "Liberation Sans",
     36.,
     0,
     OcamlCanvas[1][7][7]);
   var _a_ = caml_call3(OcamlCanvas[1][6][1], 0, 64, 255);
   caml_call2(OcamlCanvas[1][16][43], c, _a_);
   caml_call2(OcamlCanvas[1][16][25], c, 1.);
   caml_call1(OcamlCanvas[1][16][16], c);
   caml_call2(OcamlCanvas[1][16][20], c, [0, 150., 100.]);
   caml_call2(OcamlCanvas[1][16][23], c, - OcamlCanvas[1][2][4]);
   caml_call3(OcamlCanvas[1][16][77], c, "Hello world !", [0, -130., 20.]);
   caml_call1(OcamlCanvas[1][16][17], c);
   caml_call1(OcamlCanvas[1][16][7], c);
   var c2 = caml_call2(OcamlCanvas[1][16][4], [0, 20, 20], 0);
   caml_call2(OcamlCanvas[1][16][43], c2, OcamlCanvas[1][6][13]);
   caml_call3(OcamlCanvas[1][16][75], c2, [0, 0., 0.], [0, 20., 20.]);
   caml_call1(OcamlCanvas[1][16][16], c);
   caml_call2(OcamlCanvas[1][16][23], c, 0.3);
   caml_call2(OcamlCanvas[1][16][21], c, [0, 5., 5.]);
   caml_call5
    (OcamlCanvas[1][16][79], c, [0, 10, 0], c2, [0, 0, 0], [0, 15, 15]);
   caml_call1(OcamlCanvas[1][16][17], c);
   var
    event_frog = caml_call1(OcamlCanvas[1][16][6], "assets/frog.png"),
    _b_ = [0, 0.25, 0.25],
    _c_ = [0, 0, 0],
    _d_ = [0, 750, 400];
   retain_event
    (caml_call2
      (React[1][10],
       function(frog){
        state[1] = [0, frog];
        var size = caml_call1(OcamlCanvas[1][16][12], frog);
        caml_call1(OcamlCanvas[1][16][16], c);
        caml_call2(OcamlCanvas[1][16][18], c, OcamlCanvas[1][4][1]);
        caml_call2(OcamlCanvas[1][16][21], c, _b_);
        caml_call5(OcamlCanvas[1][16][79], c, _d_, frog, _c_, size);
        return caml_call1(OcamlCanvas[1][16][17], c);
       },
       event_frog));
   retain_event
    (caml_call2
      (React[1][10],
       function(param){return caml_call1(OcamlCanvas[1][18][3], 0);},
       OcamlCanvas[1][17][6]));
   retain_event
    (caml_call2
      (React[1][10],
       function(param){
        var key = param[3][1], _j_ = 0 === key ? 1 : 0;
        return _j_ ? caml_call1(OcamlCanvas[1][18][3], 0) : _j_;
       },
       OcamlCanvas[1][17][7]));
   var _e_ = [0, 0.25, 0.25], _f_ = [0, 0, 0], _g_ = [0, 0, 0];
   retain_event
    (caml_call2
      (React[1][10],
       function(param){
        var
         _i_ = param[3],
         button = _i_[2],
         match = _i_[1],
         y = match[2],
         x = match[1],
         c = param[1],
         match$0 = state[1],
         switcher = button - 1 | 0;
        if(2 >= switcher >>> 0)
         switch(switcher){
           case 0:
            caml_call2(OcamlCanvas[1][16][43], c, OcamlCanvas[1][6][19]);
            caml_call1(OcamlCanvas[1][16][59], c);
            caml_call6
             (OcamlCanvas[1][16][63],
              c,
              [0, x, y],
              5.,
              0.,
              2. * OcamlCanvas[1][2][1],
              0);
            return caml_call2(OcamlCanvas[1][16][69], c, 0);
           case 1: break;
           default:
            if(match$0){
             var
              frog = match$0[1],
              size = caml_call1(OcamlCanvas[1][16][12], frog),
              h = size[2],
              w = size[1];
             caml_call1(OcamlCanvas[1][16][16], c);
             caml_call2(OcamlCanvas[1][16][18], c, OcamlCanvas[1][4][1]);
             caml_call2(OcamlCanvas[1][16][20], c, [0, x, y]);
             caml_call2(OcamlCanvas[1][16][21], c, _e_);
             caml_call2(OcamlCanvas[1][16][20], c, [0, -0.5 * w, -0.5 * h]);
             caml_call5(OcamlCanvas[1][16][79], c, _g_, frog, _f_, size);
             return caml_call1(OcamlCanvas[1][16][17], c);
            }
         }
        return 0;
       },
       OcamlCanvas[1][17][9]));
   retain_event
    (caml_call2
      (React[1][10],
       function(param){
        state[2] = runtime.caml_int64_add(state[2], Stdlib_Int64[2]);
        return 0;
       },
       OcamlCanvas[1][17][1]));
   var
    _h_ =
      [0,
       [11, "Displayed ", [7, 0, 0, 0, [11, " frames. Goodbye !\n", 0]]],
       "Displayed %Ld frames. Goodbye !\n"];
   caml_call1
    (OcamlCanvas[1][18][2],
     function(param){
      clear_events(0);
      return caml_call2(Stdlib_Printf[2], _h_, state[2]);
     });
   var Dune_exe_Hello = [0, events, retain_event, clear_events, state];
   runtime.caml_register_global(42, Dune_exe_Hello, "Dune__exe__Hello");
   return;
  }
  (globalThis));


//# 1 "../.js/default/stdlib/std_exit.cmo.js"
// Generated by js_of_ocaml
//# 3 "../.js/default/stdlib/std_exit.cmo.js"

//# 6 "../.js/default/stdlib/std_exit.cmo.js"
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib;
   caml_call1(Stdlib[103], 0);
   var Std_exit = [0];
   runtime.caml_register_global(1, Std_exit, "Std_exit");
   return;
  }
  (globalThis));


//# sourceMappingURL=data:application/json;base64,
