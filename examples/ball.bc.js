//# 1 ".ball.eobjs/jsoo/ball.bc.runtime.js"
// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=unknown, use-js-string=true, version=5.8.2+5.8.2
//# 3 ".ball.eobjs/jsoo/ball.bc.runtime.js"

//# 7 ".ball.eobjs/jsoo/ball.bc.runtime.js"
(function
  (Object){
   typeof globalThis !== "object"
   &&
    (this
      ? get()
      : (Object.defineProperty
         (Object.prototype, "_T_", {configurable: true, get: get}),
        _T_));
   function get(){
    var global = this || self;
    global.globalThis = global;
    delete Object.prototype._T_;
   }
  }
  (Object));
(function(globalThis){
   (function(a){
      typeof globalThis !== "object"
      &&
       (this
         ? b()
         : (a.defineProperty
            (a.prototype, "_T_", {configurable: true, get: b}),
           _T_));
      function b(){
       var b = this || self;
       b.globalThis = b;
       delete a.prototype._T_;
      }
     }
     (Object));
   (function(c){
      "use strict";
      function a(a, b){
       if(c.jsoo_create_file)
        c.jsoo_create_file(a, b);
       else{
        if(! c.caml_fs_tmp) c.caml_fs_tmp = [];
        c.caml_fs_tmp.push({name: a, content: b});
       }
       return 0;
      }
      a
       ("/static/assets/dragon.png",
        '\x89PNG\r\n\x1a\n\0\0\0\rIHDR\0\0\x01\x90\0\0\x01\x0b\b\x06\0\0\0\xf7\x1e\xd0L\0\0(\x06zTXtRaw profile type exif\0\0x\xda\xb5\x9ck\x92\x1c\xb7\xb1\x85\xffc\x15^\x02\xde@.\x07\xcf\b\xef\xe0.\xdf\xdfA\x0fG\x12%\x87E;.)qF\xcd\xe9\xea*d\xe6y$\x12r\xe7\xff\xfey\xdd?\xf8e)F\x97K\xeb\xd5j\xf5\xfc\xca\x96-\x0e\xbe\xe9\xfe\xf3k\xbc?\x83\xcf\xef\xcf\xf7\xcb~|\x17\xfe\xf8\xba\xf3\xf3\xeb\xdb\xc8\xd7\xc4\xd7\xf4\xf9\x8b^?_\xc3\x8f\xd7\xbf\xde\xf0\xe3k\x18|W~w\xa1\xbe\xbe\xfeb\xfe\xf1/,\x7f\xbe\xc6\xfe\xd3\x85\xbe>(\xe9\x8e"\xdf\xec\xaf\x0b\xd9\xd7\x85R\xfc\xfcE\xf8\xba\xc0\xf8<\x96\xaf\xd6\xdb\xef\x1fa\x9e\xcf\xd7\xaf\xf7\x7f\x96\xa1\xeb\xd1\xf8#\xb5w\xed\xef\x8b\xfc\xfc\xdf\xb9\xb1z\xbb\xf0"\xabzRH\x9e?S\xfa\xba\x81\xa4\x7f\xa3K\x83o\x1a\x7f\xc6\xc4r\xf0C\x85\xef\x0b_\xf5g\xfd\xba\x13\x16\xe4\xaf\xd6\xe9\xfb\x17\x11pW\xb7\x9a\xff\xf2\x87\xfe\x10\x15\xffo\xa2\xf5c\t\xdc\xcf\xd1\xca\xf1\xebG\xd2O\x8b\\\xbf\xbf\xfe\xe5\xeb.\x94\xbf\x8e\xca[\xfa\xdf}r\xee\xdfi\xf2\x87\xd7\xc3\x8c\xe9sG?\xad\xbe\xfe\xbdw\xf7\xfb\x9e\x99\xa7\x18\xb9\xb2\xd4\xf5\xeb\xa1~<\xe2\xfb\x8e\x9f\x9b|\x84.\xd4\x1d\xb7V}\xe3\xdf\xc2%\xda\xfbm\xfc\xeed\xf5"j\xdb/Rv\xf2\xbd\x85H\xb8n\xc8a\x87\x11n8\xef\xeb\n\x8b[\xcc\xf1\xb8\xd8\xf8&\xc6E\xd0\xf4bO-Z\\I\xf1\xcb\xfa\x1dnl\xc9\xd2N\x9d\xb8\xae\x17\xf6\x9c\xe2\xf7\xbd\x84\xf7\xb1\xe6\x97{\x9f\xd6\xf9\xe4\x1d\xf8\xd1\x18\xb8XP^\xfc\xeao\xf7\xabo\xb8W\xa5\x10\x82\xd6r\x8c\xb7V\xdc\x17\xd5\xaf8\x04-c\xd2\x9f\xfc\x18\x11\t\xf7kQ\xcb[\xe0\x1f\xbf\x7f\xfe\xa5\xb8&"X\xb4\xca*\x11ca\xe7\xe7\x12\xb3\x84\xdf\x90 \xbd@\'~\xb0\xf0\xf5S.\xa1\xed\xaf\x0b\xb0D|t\xe1fB"\x02D\x8d\xaa\b5\xf8\x16c\x0b\x81\x85\xec\x04hp\xeb1\xe58\x89@(%nn2\xe6\x94*\xb1\xe9Q\x1f\xcd[Zx?\x1aK\xe4e\xc7\xeb\x80\x19\x91\xa0\xb2\xa8\xb9N\x84\x06\xc1\xca\xb9\x90?-wrh\x94Tr)\xa5\x96Vz\xb12j\xaa\xb9\x96Zk\xab\x02\xc5\xd1R\xcb\xae\x95V[k\xbdY\x1b=\xf5\xdcK\xaf\xbd\xf5\xde\xad\x0f\x8b\x96\0\xcdb\xd5\x9au3\x1b\x83\xcf\x1c\\y\xf0\xee\xc1\x0f\x8c1\xe3L3\xcf\xe2f\x9dm\xf6is,\xd2g\xe5UV]m\xf5ek\xec\xb8\xd3\x06?v\xddm\xf7m{\x9cpH\xa5\x93O9\xf5\xb4\xd3\x8f\x9dqI\xb5\x9b\xdc\xcd\xb7\xdcz\xdb\xed\xd7\xee\xf8\x8e\xdaWX\xff\xf4\xfb\x17\xa2\x16\xbe\xa2\x16_\xa4\xf4\x83\xed;j\xbc\xda\xda\x8fK\x04\xc1IQ\xcc\b\x18,\x12\x88xS\bH\xe8\xa8\x98\xf9\x1er\x8e\x8a\x9cb\xe6-R\x15%r\x93E1\xdbA\x11#\x82\xf9\x84Xn\xf8\x11;\x17?\x11U\xe4\xfe\xa7\xb8\xb9\x96\xff\x10\xb7\xf8\xdfF\xce)t\xbf\x18\xb9?\xc7\xed\xaf\xa2\xb6\x85\xc1\xebE\xecS\x85ZT\x9f\xa8>~f\xc4\xce?Tk\x9c\xc6\xa5\xdb\x89\xe1\xf6vs\xb1\xed\xc6>y\x1a7d\xdb\x9f0\xd2le\xef\x99\x0fk\x18\x1b\xcbx\xeb\xda@\x90\xdd\xde/X\xb6\xcb`\xd9|Ys\x8f\xb5\xee\x8ac\xafQw0\xeeh\xef\xd5\xef\xae3\xde\xba\xf3\xb9k6\xbe\xac\xcb?\xab\xb4\x99n\xb5\xb3\xb86\x9f3k\x1f\\\xa1U\xc0N\xf9\xdc\xcb\xf1F\x84R^\x80?/\x84\xb8\xf9\x10\x8aq]8\x8e\xbcK\x006\xeb\xe4\x8f\xef3U\x1bVf93\x94\xde\xd7\x18\'\xc5V\xf3\xf6\x93\xc5\xcc~Un\xf0\xf8\xe0b\xb2\xc0\x1d\x95\xc1m\xa4\xb8w\xc8E\x04[~\xf5\xab\xfb\xd57\xb40o\x88\xb3\\k9_\xbfI\x9a:S\xe8n\xbc\xaa[\x90NI7\xc5q\xc9\xdfts\xb0\xb3\xe7\x98\x93\x17\xd2\xb9}6\xe5\xe4&Dc_\nf\xb14d\xfbZi*Q\xa8\x1cw\x13uF\x9a-\xd6\xe6\xe4A\xee\xad\xd6\x12,\xc4Z\x90,,J\x0b\xc3\xb8\x03\x12\xe0\xe8n\xd2*UI0\xae\'F\x10T#\x05jsc\xe59\xf8\xccZ\x0b\xb9I\xe5\x9e]-\xf23(\x90\x9b\xea\xcd\x89\xc4<\x8d\xcb\x1ao\xf0c\xdb$\x1f\x06\x19KI\xed\xb4\xf6 Y\xd0U\xb0\x88\xaf{\x86q\x90-\xe0\xec\x90Rk\xfapn\xa9\r\xdbpn\x1e\xa7\xce\xc3\r\x9b\xc5M\nP+\xed\x02\xd5%\xb4\x12)\xa7\x9b\xf8|\x07\xa5\xf0\r?B\xf2\x8e\xb3fQQ\x80&=P\xfe|\x04\xa8@e\xde\xc5wP\xe7a\xd9\xba\x8f\xa5\x01=\xcb\xf7\xc3G\xf3"\xc9\x9b\xdc95\xd8ly\xa4\xb5\xda\xa9f3WX\x92\xdc,\xf9V\xc1\x14I\x15\xeb(\xa1,\xd6v\xcc3ve-\xfd>e\x98\x91\xfe\xdcH\x1e\xdd\xed0\xc9\xf0]\xa8t\xd2\x9f\\\x0b\xeb\x16\xf8\x9d\xf2\xe0\xe1[^7\xf8\xdd\xeb\xe8\xd3_+\xd1\x17\xb4\xa0\xb0,.\x92\x1c\xf4"\xcf\x13\x101\xdcV\xecX\x93\f\xf4\xc5\xd9\xd2:\xe9+*\x12\xa2\x7f\xff\xab\xfb\xa57\xd8\x8c\x99\x98\xf2\xe0TC\x1f\x07I,0\xf2\xab\xc3\xfd\xdb\xf7\xd1\x94\xb5\xe1p\x93\xa7\xad\b`6\xa1 \xb2\xe5\xfa2YE\x0f8\xd9\n Hm\x86T!\x9e\xb5\x01\xa5\x17`#\xaa`\x10x\x14VK\xc1R\xe9,l\x02M3\x0f_\xea6\x1f6K\xb4\xd7\x02p+0\x13\0\xb8F\xe9g\x1b\xbdP\x0fm\b\\\xaa c\xae\x85\xd0Z\xe4]\xb2x\xe6)|\x9c\xc0hd\xb2\x03n!sB\x06\xc6\xf9\xf0\x05\xaf\xb7\x02\xae$J\x8b\x07%%[\xb1\x9e\x01\x1f\x92\xa0R\\\x0e\xad@\xe6\xc2\x0b7\x91\xb9\xcb<\xa9\r4 \xd2\xb9u\x9e\xf4\x0e\x12\x0bT\xad3\x9c1\xd6\xe1\t\x86\xdd\x07SD\xf1\x9e\xcb\x07\xa1\x13"L\x8bZ\0\x8a\xfa\xae\xa9\xc3$~\0\xfaIZ\xfd\bS\x8d\xa5$A\x17|\x97\xca\x8a9\x90\x8a\xfc\xb3\x9a\x0f,\x16\x19\x12\x8c\xf7\x15\x7f\x1c)D.\xb4VIWJ>Q?i\xde\xb2\xf9\xf1\xba\xa9\xf4\x9ab\xe16KH\xe9\x9cL\xc2\xaf\xd0\xea\x02\x02\xeb2P\x9fj\x0ey\x1eX\x84\xb7B!\xdc\xd3\xa64\xca\x10\x97\xd9\xce\0D\r\x13\x98f\xd5x\xca@i.\xaeA\xe5\xf2\xc8\xcb\xc8\xf2F}\xad\rr\x8e\xd9\xc8\xd9\xea\x86H-\x8c\x9eI\x11\x1f\xab8\x98;\xb8\x90\x1eD\x97\x81\xafQy]\x9c\xc02\x99]?!\xbc\x03\xc4,r\xda\x8b\x8fC\xa2\x8c\xaf{\x8a\x98\xc5\x87U\x8c\x8b\xd9\xb19Y\xf0\x04\xec\x88\xb8w\xa5\x12x\xf1tS\xf4\x0f\xc8V\xd0e\x9e\x04\xf3-\xab|\0,\x16\xb79\x94\xfb\x0e0\xdb\xae\x82\xae\xd1H\x90M\x8dpM(v\x03\xec\xd5v\xe1)\xd2\x89s>,"\x82\xf9\x82H\x07\xf6\x1ch\x04\x9e\xb7\xde\xe2\xfa\x8cm\x0bw;\xb4\xb1-(m-\xf5\n1,~\x86\f\x1a\xf0\x19\xcbP\xab\xc1(\x03Q>\xed\x06\xa8\xa7\t\x8a6!\x01\nkr\x9e\x04E?\xcdzM\xa4\x8f\xaf\x05\xb3\x0f\xb7\xaf\xd5\x9e\xc0T\x18\xc5\xec\x90\xa8\x81\x18\x06n\xb1\xab\xaaR\x86\xd6\xeac\x84"c\xf7X\xe4}\xf3\xbf~\xfd\\(B\x8a]\xba)\xb2\x8a9\xa03\xf8\x89\xd5lS\xe2,\xf5\x04\xec\xa0SQ\xbfO\x89\xda\xc0P\x14TB\xa8\x9d\xf5\xa5\xeeb\xa9.\x81\xa4\xd0+\xe9}*\x19\xc2\n.$\xd2\xed\x14\x04 \x16\xb5\xc8\\m\xb5\f\xff\x98\xae\xdfH\xfe\x1a\xf7=\x1b\n\xe9\x9dz\xf2m\xef\xea\x94\xa6!\xf2\xb7P\x1b\x99Kr\xf7\x06\x83\xa1\xa2(R\x82\x8e,:k\x89\xe4"\xc4}\xee\\M\xba\x05$"\xf0\x82\xa3*\x03d\xde\x01\xdc\'\xcd\x8d6\xa4\xea\xc0\xd8Q"\x17\x04\xb3\xae\xca\x8f\x94\xe3\x9dv(7\xc3>\xf9\x89\xa2\xd0;\x1b\x8a"v\x9c\x17J\x0e\xd9r\xcauC\xaf\x8f~\xfc\xad\x0753\xa1\xe1\x06\xef\fp\xa5.\x81\xcb\x12\xab$\xfc\f\x98A\xf9\xaf]\x0f\xd8w\xb2\xc8\x19^[\x83U\x8a\xb5\xb8\x92\xfa\t\x17\x9b\f\x14L\xb2\xb2\xa0\xdf6d\x1c\xe7\xe0\xbbA\x86!a\xbalC(sY.\x1d3\x82\x18\x85\xfd\xea\x10\r\xa2U\x8dDq\\gP\x8ad\xd9@KY\xdbh\xf2\x890\x84\x85\xb8\x95z\x06\xac\xc3\x9bw\x91\x03\x914G\x1f\xf60\xe1\xb5\x86\xb0\xbb\x11J\x93\xb4i.c\x1f;\xe5^%t\xa96\n\xe4.\fm\0\x8bYD\x16\x1f\xd7\xd3\xf3\xe9\\6\xb0\x18e7\x9e\0\xfc\x80\x17\x81\x10-\x12\xdcY\xcdA\xb4T\xcc\x85\x95\xc1@d8 }[,\x1d*DK\x86TY\xbe\xa3v\xc36\xb4)\xae\xf4\xccB\x9c\xaf\xecr\xbf(\x8c\xb2K\xebg:\x1e\xa1A\x8c\x15N\xd17\xa6rb\ry\xe0\x9df\x8f\x01\x16\x04{\x0f\x02\xa5\xf5Z\x10\xf0\xd0\xfe\xaaH\xc7\n\x14\xf9\xa2\x05Ai\xcc\xeb\xc0\xa4\x1e\xa8xX\x1f,\xb7\x0b\x8c\xa4\xbd\xf3\0\x1c\xe29\x9eZ\xdf\xeb\x02+\x13\x0eM\xd2\x94h\x1d\xdf\x89\x9b\x89\f\xd6\x95\xcc\x06u\x87kq\xa2\x90\xb9\x83\x89\xe0X\xe8\xf4\xb4\x0f\xe2}\xb7Br\x81\xb4\x13x\x9a\xab\x83\x9b\x12\x89\xc0{j\x82\xc6\x1e$\'\xa9\xe2\xae\xa8\x91\xdbnRd\x85\xdb\xa8<\xb0!KQ\xb2\xed\xc0_,\xe7\\dS\xc9\xfc\x04`h1\xf3D\xdc\x13x\ro\xce-\xba\xe3\xea\x19\x9c\x82\x12\xbd\xb3r\x8e%\xa0s\xf2\xc0\xa4 \xca\x9e\x12\x9d<i\xf3\x04\x1fZ$\xdb:\xc4\xc3z\x07\xb0\x13\xe46\xd8\xc2\x83\x8e]\xaakl\x7fY\xed\xe92\xaa:"l\xcaD2\x1eU\x12\xceu\x85\x9ax\xcb\x0e\x1d9\x02\x83\xae\x9c\xe0h\xd8\x8d\xbf\x06\xba\x91i\\$\x81\xba\xac\xc8\xc0\xf4\xc4P\x11\x11\x13\x8f\x82\xd7\xc0\t\bl\x13\x1e\x02\x1b \xbd\x85\xdc\x94\x9a\xc3*\x11\x91\xb4D\x88\x06\x1f\xb7#!\x0e\x10w\x14#a\x02tP\xb7\xeed\xd2\x1a\xb6\x8f\xf004\xbfI~J\x1cL@~\xa0\xc8\xa8\xda\xb3\xb2\xba\x1dhN\xc2\x86\xe6\x9a\'\xdd\x1b\xf03\xb9\x1c\x84d\xe0\x8e\x80d\x07V\xa0\xb5\x8a0\b\xf4\xa2\x16$q\xaf\xba+\xb7,C\x13\xcf\x9dt\xa7H\xa7<\xb5t\x84\xf1\xe0Q\xc09r\xb5J\xe4N\xcf\xc3\xb95A\x94\x12f\xc2\xf1T\t\x18\x80s\x914d\x1f\xb9}@pB\x05AB\x1fH\xbc\x06\xd7\t]#@\xf2\x9bU\xd2W\xe7\x7fz\xe1\xbf\xf9\x8a\xa4(\xae\xee\x82{\x8aR\'\x84\x1f\x9a\xb6\x86*E|Q3 \x1a(\n\xcc\x94\xdc\xe6\f\xe1t4f\x1f#\xc0\x94\x11\xb1>3\x8f\x8aL\'\xee8H\x84\xe9V\xd7\xaat84\xc3k@\0X\xe8\x89\x0fI\xb0\x1bz\xcb\x834\xc1\xd0~\x94\x1c\x86\x01\x07\xd7J\x06X\x01\x8d\x02\xd75\xdcGq\x04\x9f\xb5&\xb0\x18\xd0\xc4\n\xe0\x1a.@\x03\xd3\xc5\xd5!8\xfe\xbb\xe6\xd7\xe7\x8b\xe0Z\x03_\x80\x1d\xde\x01\xffm\xa4\xb3\xfa\x8ed@\xcc\x0e\b$g\xb86I\xd5r\\rn\xfc\x94\xa7j\xb7\x94\x1c\xf7\x84O \xf7\x90k\x9d\xfc\x84\x17\x04\x9f\x15\xf9H|q\x1f\x95\xb4\xe3\x83\x90~\xf8\x06P\xfd\x04\xc3\x96\x03d@\xe0\xe4\x0b\xb5a\xe7\x16\x95\xfd\xca\b\x9e\xd0\xd6$\xaf\x006\xcap\x19f\\\x1dg\xb5\x84\x91M\xf5\x14G\xdd\xef)\xf7\x04"\xf5"\xa5\x8d\t\xc0l\x18(\x86\x92]\xacq\xa7\x86A\x9aXQ\x15e\x1b\xe6\x95\xbc\xab\xb2WA\xc2`\x048!;\xfc\x81\x10cfd\x06\xf2\xc8\x1a\xe2\x0eW`7\xa2\xe3\xea\xe6CQ\xc1\x87\xa8\xb6!kt\xe1+\x12\xf2\xb2\x1e\x82X,\xc1\xd6r,\xc2?\xe5y\xce\xadI\xf2\x18\r\xa1\x07\xc0\xbe\n\xd220\x87\x06\xc4\xcb\xca!\x83\xb6\xd8\xdb\x85Tf\r)]\xb8\x11\x8dX1\x86\x01\xa5\xe4\x92\xda\x86\x11SMi\xf1M\x06\xf3!n\xa2\xd8\xa4\xcb\xd0\x8d\x88]\xb4\xedRqS\xca\xf8\xef}:HG\xc1\x01\x03\xc7\x16i\xb9I\b\'}=\x90\x94Ml2<4\x82H\xa0\xea\xd1\xd6\xc0\xbe\xe5Fe4\x014t\x0f\xe8\x8d}\xd4\n\xe0\xaaH2$C\x056\xe5\xf4P#\xab\x13z\xea\x97\xfc;\xf02\xdc\f\x84r\xe3\x8dE\0\xc4\xa0Y2\f\x12\x0b\0\xcf\0\xebPZTc\xc2\n=\xa1\x14\xd3P3\x03y<\xb5\xa2\x18z\x9c\xec\xa8PS;\xe86\x9e\x0e\xfb\xd1\x11\xe9\xaa|,\x95!M\n<\x04\x10\xe1\xf3\f> j\xa4B\x97Z\xacx3\x17\x1f\xa2\xa49\xf7\xb8\xf8\x979D\r\xb9^\x8f\xb4\xe3\xa5V\xd4\x9eH\x1b\xb9\xaeh\x19p\x97I\xc7}\xb0\xc0\xeaPu\x8fR\xc12Qk\xdc#\xa9\xc1\xe5\x89\x074\xc4U^\xfbfT\x11\xb7\xb4%k\x82x\xef\x05M%\x9d\xbb\xb8\xb3O\xb7ZHi\x11M\xabjf\x8d*iA\xd5\xf6\xf2\xe4\rVX\xa2w\xa0dg%\xd5\n\xd6\x7f`\xf3Q\xc8\x90Q\xe4\xbf:\x9ci<(H\x9c\xb4\xb8\xa4\x0b\xd9\xed<u\x04\xf7\x1a\x92\x9fJ\x16G\xc8qAn(q\xc3\xde\x92\xce\x13\x9d\x8a%/)\xa3\x0b\xf2f\xfd\xbbZ4O\xf9UDB4\xae\xeb\xb8\xee\xf0\xdc/\x01G\x0bC:\xb8$\xaeD\xcdv\xf4\x15we\xdc\x94R\xbf"cuq\xdc\n\x8a\xa2\xc7\x8c\x92\x93(,\xcf\xbeF\x876h5\xa8w\x85\0 n\xe0]W\xa4.Y\xc1OFH\x0e\xfc\xed\xb0\xef\xf6\x94!\xe1\xefY\xcd@\x16\xd6<\x92d\xbd\xbf\xf3\xcd\xed\xc8\xb2&,\x0eX\xbc\x0f\t\x89S\xa9\xba\xe3\xc0Z\xc6\xcaG\xfb\n>\xb1\xa8z\x9f\xb2J\xd6\x927\x8b\xc1\x11g\xb6\r\xa9\x7f\x86\x83\xeaHt\xe4\xa7\x8a\x16b\x04B\xc0\\\x10P\xbe\x14\x82o@\xe8\xf1\xb8|(\xee\f\xc0\x12\x11\x02y\xfe\xc98\xbb\xef\x17F\x12^\x1f\x8c\x98\xea\x99Jy1\xbf$\x9f\xf4s*hi\xc4\xdeA\x9dan\x07z\0\xa0`\x19:\xfc\x89\xf6\xcan\xddu<`\xbeA\xb8\xdd\x05\xcc\\\x96H\xf2T\0\xde8\xf2\xd8\x8f\x14&\xd6Rn\x98%\xc0\xd5\0\x96\x81\x92\x94Y\xf1\x89\fJ\x8el\xa2\xc8\x11\xf3\xdc\xd1\xba\x9f`\x01\xa7\xa15\xd6\xc3Ot\r\xcaB5\x8fx\xa3\xc4"X\x80_\x04_\x0f\x0eP\xab\xb3\xbdVa9\xfcM\xbe\xa0\xd9\x1d\x90"\x02\xa0\x95\x86}A\xe6!\xa0\xa8<\xa2\x04qL\x16\x12\xa2L\xb3xR\x1b.\xab9\x81V\x90k\x07y\x1a\xbct\xdc|^\x89%\xe8\xfb\x1c\xca|]d0\x91\xcah\x9f*}M\x8a\x0f\x809\xccF\x1e5\xa4\xf9\xdc\x98(y\x16\x02w\xb8!\x0f\xc2&\xee\xc8\x13Q|<X"\xa7\x11Av\xfe\x16\xf3\x02\xa8b\xb1M\xeaVy\xe5\x0f\xc5\bu\xe1S\x1bK\xb1\xd0Ghi,\x06\xa6<\xc7\xbe\x1c\x8e\x96\x8a\xa9\xa0A%-2\xda\xbd\xfb\x83\n\xc3\xf3\xfc\xae)\x02\xac\xc2\xaf@\xc0\xc0\xfe\xb5\xd4B\xbd\xa0u+H\b\xec7\xcc\x1c\x9d\xad`\x80\x01\xb8\x0b\xa6\x01V\xe4\xa3=;\xb5*\xc6\x88L\xc3\xc9\xa2\xb1\xd0\xf6y~p\xda\x9e \x11\xec\x02\xdd\x05\x99\xd4\xd5\xe1D\xb0\x8fA\xc8d\xc7\xb9\xab\b\x82\xb0T\xb6d\xa9\x13\xec^\x8e$i\xb9\xca\x89\x83\xd9f}\xa1\xb6D\xa6\xa5\x83\x07\ryd\xf8\xb8\xfa\xee\x14(\xf5\xf5\x0eq\xa9U|\xae\xbe\xb3\xa8\x114\xa7\xdeI\xa6[p\xe9$\xa3,\xd7\xd8\x92\\\xb8\xe0\rxH\x10wx5\xd4\xd2\x1c\x10\xae\x9a>\xe8)\\\r\xa6\x07\xf8\'^-\x1cjS\x9cjZ"0\x06\xf8\xce\x12\xc5\x1f\xf3\x8c\xe0\x87V;(\x874\x86\x17\x06k\x84\xae%\xf8R\x18\xf3\xca\xd7\x83\x1cSO\x01\xc0Q*\xe0\x87\xf1W\x03)\\\xf9\xad\xae\xe66\xbf\xef\x13[F\x96\xe3$\xb9\xeb\xead%q\t!\xe3{\x12\xb7\xc6\x0f\xda\xe8\ri\x82(A\xce\x06\x16g\\.\x17\xa8\x11\b\x1aO\xbf\xf2\xab\xc6\xac\x96\xcf\xf6\x11\x9d\xd7PlY\x9d\xaa\xb7E\x8a\xec$!\x88e\x84/{m\xebI\xa8\xd9\xaeW\xf3[Z\x12\x01\x83\t\x11\xd0Q8\xa0\xc5\xe6\xbe\xc1\xaa\xa2=\x1f\x073\xdf\xf5\xb6Z\x83\xc7\x1ff\xb50\x81\x8b\xab\xb0ca\xbc:B\b\xa5\xc2\x92\xe3QL\x1dm86!{\xc6ES\x1cu<\x01\x8d\xed.\x15\x1d z8\xb3\xcc\x87\xd0\xfb\xab\x1b\x87\x86\x18\x84\x177\x88\x97\xef]9\x1b\xbd\xb6\xb6\xf0\xbc\x9ed\xe1Y\x8e\xfadha\xde\xeb\xd2h\x13\xe2\xa0\bHv\x1e\x17\xb7\x81\x91\xe2S*o\xb8M\xb0#/\n\x9b\xb5/b\xa5\xaa\xa9\x12\xec\x8bz\xc0\xf0\x06\xaa\xa7\x14s8\x90\xa5&z\xd3\xbeB\x01\x0e\r\xbe\x02!x\x91\b`\x1eA\tm\xd7\x83\xec\x12\x7f\x11O\xc1\xea@\xa8\b\x12S/\xec\x82?\xea\xb1M!\xd5Bk\xbeM\xb5\xa3h`x\x9b\xd2\x1c\xc6\x80Vp\xb9\x93\xfa\x911&\x03\xf7\xa3p\xdca0\n\xe7\xc8\x8e\x9a\xf6\x0f\xa6k\xea\xb7\x91+W\xae\xee\n=P\xe9\xf2WG&j-\xf1\xbb\xec\x04.\x94W\xa8 m\xfc \xf6"\xd9\x84\x82\r\xc8\x1e\x11C"\x8f\x8aJ$l>R\xaeW{YDXM=\xe4\xb2\xb6Z\f\xf8F\xb7\x8c\xb6\x90\xfed\x1aV\t\xc1\x0b\xfd"\xa8/\t~\xa9\x88\0\xd4\xb2\0I\x96\x15\xad\x82`\x9c\xb2q\xc8\x89\n\xa7\x82b\x80\xf8\x86\x9c\xa8\xf7\xcc\xa3\xa3P\x8e\x1a\xe1AM~\xaf+t\xe8T\xbb\x94\x11\x9d-\xef\xc1\xe2\xa1\xaf\xce\xdb\x9d\x02\xbd\xaa\xb4\xa9q\x83\xac\xf3"\xff>1\xcd\xf8}r\xd6\xc0\x19\xb5\xe0\xfbk`\xa6\tt`\\\x83\x93}"\xbd\xd0d\xd8%\x84v\x13\xc7"\xdd\xc9<\xc4+\xb6\x18\x8f\x0f\x01\xcf61\xdf\r\x1a\xc5\x1d\xbe\xdc9\xbbD<~\x02\xe6\xa0\x89\xee:tE\x9e!\f\x12n\xb5C\xb7\tLiCZ\x02\x04\x8ap0kJ\xb6\xe1@\xb3Z$\b7\xdf!=\x10\xbb\x92mY;\xd9\0\x83C\x8e\x15m\xc6\xa1*A\x18p\xd1\xa3\xbb\xb6\xfa\x83\xda\xf4N\x1dr@i5\x8a\xa1\xb1\xd6E\x05k\xdc\x10\xaerD\xe4\x8f\x9a\0\x1d\xaa\xa8\xae`\x18\xc0^\xab Roj\x17\x82\xe9Q(e\xf8y|\x057\x89\x86\xf3\xaa\xe7<\n\xf9QP3\xd8\x80(=\xd0\xc1\xc0,\xe1l\x8eeS?\x14\xcf\xbf\xd6\x8e\r\x7f\xce\xf5X\xf0\xa3\xe6\r\x04\x8c\x18\x81\xbdd\x97AE\xfeE;\xc2\x9b\x14\xa0\x81\xba\xc8\xb6\xd13\xe2\xf7I?0Z\xbb\x97\xf1Y\x8d\x9aG|\xcf/\xa8O \t\xa5<M\xd2\b\x1a8\xda\xa5\x04\xe7,\xf3Y@\'p\xb9\xb4\xaf\x8c\xd7\xd3.\x04xL\r\x9f#\xe6)=@8\xa5\xfa\x14\xe2\x80-7\x02uz\xf9w\x98\x020\x9cd\xf7ye\x0f\x1ema\xcf*\x88\x7f\xb2\x0b\xbf\xc6\x13\x90`|\xd0\x90\xa3\x93YE(\xf2LY\xbbw\x89\x07\xab\xd8{T\x16\x0eX\xed?\x8f1\xd2\xe6W%\xf1)\xf5\xc2\xd7\x1a^\'\x02\x8e\xa6\x06\nv\x1d\x84\x86jQa\xe0\xc0\xdd\xacg\\\xd8\x94\x12ASS\xdf\xc6\x0b\xd2\xa8)\xbc\0@\x074qc\xaf\xa7\xbdWt0\xf1"\xcb\0\x8e\x1aqO\x81L\x1ey\xf6\x02\x9f\xde\xf8zk\\%-4*\x8a\r\xdc\xc6\xeaO\xed\x99\xf8v\xb5m\xa2\xc6e\xbc\x88R\x071\x91)hsj\x10w\x80\x02(\x86|\xee\x84\x07\x1c\x03J\xb4\xa5\x06\xff\xc46\x8e\xbf%\xbcd\x99\x81Z\x02\xd1(\x1a\x99\x13\x0ft8`\t\x96\x89\xb5\xb3\x8e\xf0/\x15H\x16@u,\x84\x91\xc3\xd4\n"6q\x91]\xc5\0\x1dQH\x16u\xb4\xf9\xe16Y;[T\xcd2\x8c\x1f8\x84\x8f\xf8t\xba\xd5\x96@\xd7\x82m\x90\xd8Qc\x18\xd5\x89\xe9F\x17=\xad\x80+\xd2\xfcF#n8\x16m\\\x9e\xa6\xaeC;\x0e\xa1K\x8e@x\xfb\n\x111\xcc\xb1`8\x162\x81\xcb\xf7E\x05\xa2R\xf6B\n\xc5\x90\xb9\x94\x1fA-OYo\x80A\x14\xe2\xd5%r\xa4@\xe5~\x0b\x0eD\xbdZ\xca\x8cg\x85\xb5\x16i\x0b\xc0\xa2\xd0,\x80\x88\xa4\x9c\'\xba\xa0\x10j\xe3\x001fX\x15\xff\xf6\x9b\x81x\xf2\x887\x92|\x80\x89\xfa;\xd8\xa5I=b\xec2k5U\x8c\x9e \xc8X"<\xe5\xeb\xbc\x18h\x0b\xc1\xf0\xdd)Sg\x86\xd4\xe6Y\x80\x11r\xaa\xf6\xdb\x88\x1b*\f\xe7\x88\xb8\x02\xcfZo\xd4|\x0e+\xf2\xbc\x16\x04\xc5j\xad\xdd\x84|D\xcd\xbc}J\xb5\x90\x16\x128"\x94\\jb\xdf\x94q\x955\xcf\xd34=C\xb5\xe0=5\xb6QB\xa08@\xd2B\xac\xb5\xdd-M\xa6mJ\xf9}\xaa\x13\xa1A\x16- \xc6\x05\xb5\\\xc1?E\x06~\xef\xa4B[\xb2\xb3\xb8or\xc1b\xd1<\0%\x0b\x9f>\x03\xa1M\xfa(\xe6\x81\xf6ar\x9c!\x987\x9a+\xdaJE\xb4b\xe7\xf6U\xdbi\x7f0\xda"\x850e\xe9F\xba\x1d\xe9V\xf1\xc0[\xbbX\'rG\xe3\x0el\r\xa9\x0f\0\xc3qy9\x1crF<\x9d\xc2\xe5P\x92\x1d\x9cE\xb6%\xdc\x8dg\t\xb7\x1a\x8e\xda\xb7\xbf\x81Kp\x03SN(#\xa9I\x17\x1e2\xa8O\xfa\xf6p\x1d\xa2\x14\x03\x8a1\xeb\xa8\x07\x90\x13Z\xf4\x86L\x02\xf4\x84\x15\x1ezl,\xb9\xf6\xd5\xd0\xf2\x94((\xb1\xb0!T%bxj\xbda\x91\xde\x1c(\xbf5\xb7\xd3\x87f\xa4\x86@\xd2&\xd2-L\x8d\xca`\x11\0k\x98N;=\x14\x01TC9a\x8d\t\x1e\xf26\x05\x9e\xd2\xabI\xcf\x1d\xc1\xbd\xe0\x06y\xda\xd4\xdc)\xea\xe8\x90y\xc8N\xf5\xd3o\x03\xece(X\xfb\x840\xa4\xe2\x91\xb1\x80@cI\xe2\x81\xa7`\x81\x8a?\xf40m\xe2\x0e\x80\x0b\x98\xaeS\xe8\x10\x1c\n\x800\xaeyy\xdc\x88\xae/\xf5\xf5\x94\xd5\x90\xea\x12\xd2R\x1cZ`I\xe0Y\xd1q\x93\x8fF\x8d\x80\xcc\xa2W\x045\x89IB\xfa\x8c\xd3:\tI\x17w\x04\xf6\x0f\x8e\x107\xa1t\xe5\x1a\x9b\xc8L\xd3\xa7\xe34%hQ7\xc4\xdf\xbb\x151 \x8d\x82Z\x99\x0f\x9ck\x18\x82\x89\xecCe\xc8\xfa\xb0\\\xeaM\x93\x7f\x12A\xd1\xf0\x90\xf0\xed\xeejs\xa0\x98\xe1\\S\x93\xe1B\xd9`\xf1T\xa3\xce\xc0K\x95\xb2\xbf\xea<\xb3\x88\x84:j;\0\x8d\r\x17\xe3\xa5\x17\\\r\x89hG\x062\xaf\x13\x8bG\f\xa5\xa8\x9a63\xc9@\x80\x1e\x86\b0/&\x88J!A\xc9\x85\x1e\x88g$fC2\xf0\xaa\xbb\ts\xa3\xaa\x97\xf4\x98z.\t\xf5z\x8e\xb8z.w^\xdfJ\xcd\xa7\xb3\x93<!\xaa\x1e&#\xb5\xd7\xb9\xe2Tu\xd5\x11\xa6\xc1\x97\xcb\x15\xc0\x81\xb2\xfc\xeb\x12\xc2\x96E.R\xb4\xe6)\xda\x81~\x1d\xda\xcb_\xbe^)\xaa\x0e\xc6\xb3\xac\xd5\x03\x14A\xad\x88:\x83\xb8\x14\x94\x04M\xa8\xdf\xbdlg=-\x8a\xe1\xc0\\Ec\x94\xae`\x8fT\x04\xaa\x04\xea\x17\n\xf9m\xb3\xabh\x8ba\xcb\xb3\xd4\x19\xdf\x12\f\xa3\x92X\x03\xec\n\x0e\x14\xa9\x8ez\xc9j\x9c\x14\x17w&\xf3\x95\x84\x9b\xdc\x17\xa4\f\xaf\xfd\x06D\x03\xb9?\xc7\xeb\x12\xc8\xbeI\x0e<\xb9\x9ca\xeb\xfa\xa6ZB\xaddhV\x8f\xbf\xba\x19Q\xd9\x15\x92\x07\xc3y\x19A_ \x9e\xa7\xd1\x10\x9d\xf0\xe0\xd3a#\x01;\xb0S\x87\xca<u\x02\xf9"\xd4Xc\xbc(f\xab\xef\xedf\xc27\xb2\x1e\x12\xf3\xa0\xfb\x93\xc8\xa8\x0f\xf4\x82vn@}\xf4\xe6\xb8\r\x12\xd0\x1e\x0e\\\x04\xdc\xf5s\x9fp`1M\x930\x03\xf9\xe0\x8eL,\x80\xbc\xd4\xfe"\xebdD\x04\xd5o_\xf6\x99\xcf\xd2\xb5\x85^%Oz\xc7\xac\xf0\x89\xd8\xc8g\xf2/>rB\xca8%\x87\xef\xea\x17m4A2*\x1f|\x01\xa3\xb19\rR0\xf5\x99;\xb8|\xa9e~\x1c\x83D\x1ek;=z\x89p=\xbb\xef\x86\xcb^\xe4\xd1T\xf7\x07=i\xeaOQd\xf35y\xe01P\xa8\xac\x8d\x82\x89\x9a\xe1\xba5\x80\x88\xc3_\xc4\xed\x06\x85\xf3\xe5\xae\x81\xa01\xbb`\xbe:\xb5\xf7R\xc3\xd0\x16\x12\x1e\xc4Bh\xcfJ\xaa\x9a\xbcF\xa1\xf6_\xd3\xf1y3\x1cCI\xda\xae\x87\xa1\b?\xc0\x8c(\xbdM\x1b\x94\xc7\x9c:E\x04\xd2\x94\xe9x\x7f\x1cb\xbbp\xde\x05\xe6\b\xf1\x12\xbe\x80\xbd\xd2\xe5x\x80<\x802\xd1\x0b\x89\x83\r\t\xda[\xc0~`W\xb2KGI\x04eihH\xbb\x04\x9b\xbc\x06\xe0 \xd2*f\xe4!2\xc1\x91V\x830\x11\xbd\x94\xa90\\|\xc4\xca\x0fm\xe1dx\xd9\x15eT\xad\x8bB\xc5bJ\xc7M@\x0f\x8e\xd6\xa6\xf1]\xea\xac`\x98Q\x1fP/\bZ\xb5\x8b$7\x93\xb5\xcd\xd5\xb3:\xcd\xfcw\xeen\xc2\xa3HGM\x9b\xc2lB\x88\'yQw\xdaOI\x04G\xcd\x88\f\xd7)\xfc\xe4\r\xa0?\xc6\xe9\x9b\xfb\xd0\xad_\xd2\xbd"\xc9\xdd\xdb\x91\x0f\x9f)\xd8\x84aE(I,\xab\xdd9n4u6\x9f\x89\xbfr\xb6\xb8\xa1v\xc6\x94\x01\xd5x\xc5\xc0\x1b\x11\x1c\xf5\xa2\x97\xe3[h]}e\xf4!\xa0\x19\xa7,\x97\xb6\x1dP\x01\x80-\xe8\xa2\xadp\xcd\tah\x95!\xa4.7\xbfQ\x8f\xba6\x8bM\x19\xe0\xfb\xd5-\x92\x14\xd5v\x9c\xf6\xa5\x05\0\xdag<\xf1\xb5\xcevT3ejxI\xa2\x915b\xed\xabzpZF* P\x92pMw\x9e\x07\xc8\xe4&\xa8`C\x03s\x17\x83\x81,&\xae\x90\xb7a\x07\xfdB\xbc\x1d\xf2\x01Tc\xc5\xd0\xb5\x98\xdc\x0b\xba6i\xc8\x1e\xb4]R\xaf[<\x99\n\xde#\x89\x17k8(l\x14\0\xb1\xc7\xbcCN\t\x19\b\xdb\xc7\x88\xb6\f\xb0~\x8e\x854\xc3n\x8f\x8d@U;\x92\xd5\xc3u9=\xf4\x01\'\xc8\x1c\0\tP\xc9\x9a0d\xad\xe0\\\x12\x96\x1a\x1c\xac\x14\xe9\x85|U\x83_\0\x03\\IFt{p\x93\x05\x16\xdbU\xedy\x06\x01\x9b\xb1PX\x10\x99\x92O\x9a`_\xe1\x8dmd\x13\xb0\xd7y\x8c\'\xdb\x8a\xfc\x81\x9a\xf0j\b\xca\xc75\xad\x1d\x8a\r\x80\x1d]x\x8f\x85\xca\x07\xb9?\x9b&\xbc\x10\xf5\x9b\xcf\x9c\n\r.\xcd\x9b\xd6g/\xc4\x1a\x17Dh/.\xd5Xt2\x04\'\xdb\x1d\xc5\x85XD\xc9\xc3\xa3\x04\xe1\x16\xcdPN\xd8\xa7\x02\xf0<\xfc\0R\x06\xd6\xa0h\x0e\x10\xd2\x17\x0bqQP\xcc\0\xecP\t\x12\x9f\xb7\xae\xcb\xa8\xe7\xac\xadBb&\x14\x03\xf1y\x9az7\x1c\xb3"\xd8\x01OT\xf1\x06\xbaN\xf5\x13\xafv%4/\x86\x14$n\xe4[\xa1\\Y\xa3\x02\x9e\xca\x90\x97M:w\x9d=\xd0\x10\x8c\xc2\xb3\xde^\xf2\xee\xb3\x86\xce\xfd\x86\xac=\x85\x050\xe0\xc4\x90\xf5\xc7P;\x1b\x9d\xa2M\x9e\xed4\xed\x02\xa4Gu\xee\x96p\xd9:\xdf\xb4-]\x88\n\x91\x97\xaa\xb8\x7fm\x1d\xe0 \x0b%/O\x83\x92\x04\xe1&\xda\'\xdc7\xb2`Nh\x960]\xd8\xf3\xa4\x01\x01\xd2F;Va!\x07\x82\x80\xd9\xcb\xa2\rM^\xa8\x19\xa1I\x9e\xa9]\xe8J\xe6S\x04\x10p\xc5\x18\x98\x9au\x88\x06\xdd\bW=/K`u\x16\x0eR\xadj\xdc\xab/=\xafv\xb9\xb4\xc5\xa1\xe1\xb5\xe8GJ\x92\bA3\x94\xa0\xe7k\x11\xb9#\xc5Ha\x82\xffMCuC\x83\xba\xbb\xcd\xe2C\x93\xf5\xae\xc8W\xf2\xf2FHlro\xa8\x82IEUD$i\xc7\x13\xc6\xb2 =\xcd\xb0\xab#H\xc2_\xb5\xe2\xc2\xeb\x9c\x92\x93\x98H\xbfg\x92`LrI\xf3\x8dAAn\xe1\xcd\xdf\xd5\xcd*\xa3<\xbcf\x8d\xc6\b]\xc6/j`\x05\n\xb8\x95\x825\xf5i\xc8\x84\xc5\x03\x82\x01\xf5\xdc\xf1\xa6O\xb98\xa5\xb0\xc9"D\xc2\n\xe2t\x95\x96v\xd8\xfd\xc0X\x17\xa7\xc9_\xb0h\xa8\x1d\x8eV\x13r\x83\xb5\xc8\xe2$\x83\n\x9act\xd5\n\xc7>z\xed\xf3\x84\x8fo\xb1\xfeF\xc6\x14\x8b\xa8\x93"G]\xbf\xac}I\xac\x97<}\x94\xc59]\x1b\xef\xc8?\x96\x18\x94`\xe9\xb5B\xa6^\xa4\xd7@\x9dv\xd7*\xc2\n\x8b\x1c$\xea\xd0U<\x9a\x97\x90\x050\x8b\x06\xaeH*\xaa\xaa\x91"\x12\x9a\x07\xb0\xc6\xba \x80\x9e\xa8x\r\xf0\f>R\xdf<\b\xc9\xc5\x9a\x9e\xba\xf8#n\xb7\xe0\x1arF}\x99\xb84\x87DHY\xdd-\xcf-\x9d\xce-\xf4\xa8A\xb8\nO\x93\xac\xb5kzY;\x16\xd4\xd2\xad\xda\xfb\x02hCt*$\xbc\xe0\xe6^\xae6\xfd5\x7fV\xf8(\xa2\x06\xb3E,\x88\x18P#\xb9\x1b\xe8-\x07\x85\xad!\x80I\r\xef\xad\x9e\x0eb*\x90\xec\x8e\xbc;E\x13yU\xae\n\xbe\xd5\xac\xe7+\xee7\xdf\xa8\t/\x98i \xc1\xf7\xd1&.\xce-a\x19\xc9\xf4\x03\x9e"r\x90\x94\xac_po\x1ci\x81%\xfc"\x12\x13[\xa8\x9b\x04\xa81j\r\x9e\x1b\xd8\xf3\xd0@\x12\x183\x17m&l\x1e\x1a\x05|\xac\xb2"h|\xc4\x7f\x8fN\xf4\xee\xabO\x1d\xe9H\xd8Xk\x88\xae\xc3-8-t\x02P\xa9I[\n\x11\xcd@*\x01\x7f\x9e\xab\xe0}\xb5\xaf\xaa\xb1\xe2P\xd1\xdbQ\xa6FC\tG-;\rL\x05<\xae\xac\x8b\xac\xe8\xdd\x807f\0\x1e\x1f8%XS\xdb%R\x7f0\x18\x92\xf2\\\x14\xf4\x94\xbf\xc3\xb9\x92G@\xe5\xado\x9a6\x02Q<\xb2|TT\x1b0V\xedC\xed%\x01\xbb\xdf\x0ew\xda\x1a\x8c\xcc:YBH4\xad\x1b\xdaFBK\xd6HUSH\xea\x11\x80\xf8T\x97N/\xa0\x02\xb4\xb5N6\xf4\xfa\x0e\xd9h\xb8\x12F\xa7\f\b\xea\x02\x94wy\x02\xdb*\xe6\x9a\xdaJxZ\xd2O\xb3\x95\xeaO\xa9\xa1\xc3j\xb55\xb45@\xaan\xe33\x91r\x11\x10F\xbc\xca3\xef\x89\x95\xc4YT\x8a\x83\x98\xf0`\x98\xcb\x19\x1c\x1a\xa8E\0T\x07&RG\x9e\xa2WQ\xb4`\x87&\xbc\f\t\xb8\xe1"Jd\xbe\xf3\x12\b\x01{\x882\xb0>\x04tix@\x19\xa3#U\x86\x17M\xbd\xbd\xd1\xf1\x83\xde\xc7\x18zUo\xa4r\x05G\x1b\xdf\xef\xf5\xd7a"JM\x83\x11\xc8A\xdd\xde\xca\xc8\x1a\xfc\x06\x14\x89_\xc3\xe9a\x1c\xd1\xe3\xbe\x13\xd5\0\x03\xb5\xa3\xf9U\x1e\x13c\\r\xd6\xe8\x03\x88\x86\xc6\xf5\x13\xfa\x06x5\xac\x16u\x06B-k$s\x8f]\x9d\b\x8d9\x01\xe8\xdc%\xa2\x06\xac\x94W\x0eEG\x16t\\\x01\xf4\x84.\0\xb1\xbb\xb5\x1d\xa0\xed_\x92\x140\x95\xf1e\xcd.\0\x83\xd8s(>@]\xdb\x91BAD\xcc\x1eG\x1b2{\xde\xd7\x99\f\xa0.\x0e\x84\x0f[A\xdd\x07\x8c\x12e\x83"T\x9b\b6Bk\x81{+\xb9\xa6\xb1d\xc2LIi\x15=\xf5\xa3\x8eF\xc7\xe1^A\xa7*2\x91\x0f\x9a\x03$\x10\x04\xa9\x8b\xc0\xd4\x05oT\f$P\x11Q\xf3\xb8\xae\xa6:k\x02\xfapoT&+7\xa5b!\x10#\x94^\xa6@\xdb\x85\x1d\xda_\x98\xc4\xa9\x85C\xe6k\xa0\x9f4\xcf%\xab\x1c\x8a\x03\x82\xa3v;\xec?\xce\xbe\xa4\xf5\xc6\xcf#e\x83\xbbQ\xb7g\x1d\xd5\b\xc1\xa8v\xc8l\x92ah>\xef6\x93\xc6\xc6K_\f\xbd\x82\xa7\xb9\xa7\x81\xb0\xb0^q\xc5\x9dz\xeb\x9aD\xf0y\bN\xcf\xa8\xe8\xa9\x82K \xea\xd3A\xa6Izf\xe9\xdc@\f:\xfc\xa1m\x1b*2\xea$U\xd4H\xc68\xac\xf8\xba\x9e\x92\xdaR\x99\xe88I)\xfcn-\x12Pdgt\x14\x0eP\x1b\xd4\x18 \x90\xaf;1L}A\xed)\x91\xb4\xb1\xaa\xbb\x8d\xa8\xf5PD\x94\x9a\xeb\xac6\xact\x04 xf$\xa2|\x82;U\x13\tQ\xe7)\xb4\x93!\xcb\x896\x04\x0f\'\xc8z\xa9\xd5\xa3\xc4\xd5TL\xc6\x96\\\r3V\x8d\x7f\x11ixC\xa3\xd8\x87\xaa\x19\xdb\x99\x91"\xb9\x07\x9d\x95YCU\xb25aI\xfee ui\x90\xf0\xea\x84\x07\x04\xb2\x17\xd2\x1b\xc7\x01\xac\xc0X\xea[BJ\x03\xf8\x82\x18\xd5\xaa\xbf\x04.\x91\xc5\x91\xbb>I[\xa3\xb2\xefuP\x84\x882jB\x1c\xbc2\xeb\xe0)f$H\xd0n\xf7\xc5\x03N\xddv\x90\x83\x85E\xd4\xc3 \x92a\xf6\xa2]IB\x88d\x85\xfc\xdb\bG\x8eH\x83\xd8#p\x81,\xb9\x04\x9bj\x8b\x84\xb4O\xb0\xa8\xb6H\xb5\xba\xea\b\xbaV\xcb\xd1~\'\xcf\xd1yJ8\xa5Y\x91\xc5&-/n\x02\x18\x80\x825p\xa4\xcei\x1f\xea\x11\xa3\x89\xc2\xd4\x8c\xffXP\xdb\xd1\xb8Qt\x84\x04\xb8\xbe\x12\x0bQg"=\xc0s\xb4\x93\xd0Pl\xf8\x16R\x18\x17\xa6q\x1a\xb4\x11\xb6\x07srE\x05\xf0\x12\xf5\xca\x12\xfa\xa0i\x8b\xe0\xb4\xe36\xb4\xdb\xae\x1eu\x85\x05\xc0S\x9d+Qs(c>w\xd5F*\x86Z\xce2\xea\xec\x11\xa6LS\x1f\xf1\x8a\xbe`a\x16\xa7a\xfc@tM\xb5`D\xd4\xacj|:\x02,\xb1\x9e\xf7J\x11S\xd7\xe0t(Q\x8d*\xee\xabh\xa2C\xbb7\x82\xcc\x9a\x17\xcaD;\xa8\xb78\xcd~q\x9f:\x7f\x93\xc0\x8d\x82w\x95{\f\b\x0f(\xca:k\xa8\xee\r7\x8c\xaf%\xb3A\xac\r\x8e\xcf\x13\x80\x01Yj\x8c*\xe2\t\xa8\xd5\x8cA\xc2\0C\xeeS\xc5\xaf\t\x88\xabI\x8b\xde\xb4\x0b\xbd6\x04\xa7\x89\x9cv5\xc0\x07\xd9j\xb3\x14TG<F\x99\xf95\x81\xa6\xec\x1d\xf2\x997\xb3\xd0^\x83\xbb\x1a`\np\x03\xebO\xb5\xe3}\xd4\xfc\xd3\xf1\x13V\x8fj\xe3-X\xcfL\xa5iL\xbc\x13OT_\x93&\x9e\x8e2@\xd6\xbe\r\xc1\xd3?\r\x1f<\x1e\nuI\xc6j\x9fY\x0f\x8b\xe0\xd3v~\xf2\x1a\xdc\x98\x1a\xa9a=Ll*\x9b\xb1\xa5\xd8&\xd5\x87p6\x9d\xc0\x8c\xb8\'V\x81\x8c&i4!\xc8R\xc3r\x9bt\xe7\x961\xa5\x9a\xa8\xf4\x98;\xcd.\xed\x9cr\xe3\xb1\xd0\x1a\b\x9f\xea\x8e\xe6\x95a\xed\xaa\x03e\xc5l\x17\xdc\xba\xb4\x1e2\x9a\xfb\xd2T\x94\xd7\xbc\twb\xb8\xa8e<\xe5x{\xea\xa4V"lI\x1b\xac{8\x1eD\x07Kt\x1e\xc9\xf4\x99\0\x91\x8c\xc8\xcdW\x8fwb0\xf5i\xa8\x8f\xa5s\x93@\xbaf\x96I\x1fJ\x1d\xc0\xb5\x83\xd7YJ\0\xf7\xf6\xfa"Y\xc4UZ\xe0\x91 Q88<\xf3\xbd\xb4{\x10T\xf0@\xa76\n\xa9\xb5V\xb0\x1f\xe4\xcf\xb8\x90\xd2R?\'\xaa\xcb\'\xe9\x87\xdc\'\xf5\x95\x04\xc8L\xc0\x04\xef\xfemn\x84\xa7\xdb\xbe\xb7\xb4\xd1\xc5\xba\x0b\x84\x99\x86NuNgn5\xfa\xa9~\x19\x99&}\xa2m7\xfcC4\xac:L\x83l\xf1[\xda\x97(C;\xac\x9f\x8e\xb8\x80\xdc\xedP\x8b\xd4E\x13q\xd9\xeb9h\xaa\xc8\xe90d\x91\xa8\x05\x0f\xc8M\\\x064\xa8\xb3\x05\x9a(F\x85\xc8\xbf,\xe3\xb1\x8e\x92\xab\xaa\xb7\x04\xa2 \x99\x17\xc4\xab\xb9\xef!\xcb\xbe\xaf\x8b\x01\xc0\x0bp\xdb4\xac\x0bL\x8aY\x05\xd7\x0ef\x1b;\xd1\xa5\xac\x9b\xa6\xbeE\xbe\xea\n^\xaf?4\x1fQ\x9a\xa684\x14\xe8\x11\xc1d6y\xad\x89\x0f\xcd\xfe\x06\xaa\x8fB*p\0\xd0\x0f7\xd6\x82\xcaEnH\xc2R@D>\xe8\xfd\x98^\x92g\xa9\xd13\x01$T{\xe3\x8e\x14\xbc\x04\xe2\xc8\x17\x80.E\'\x95\x1az\xc24Z\xa0\x8d\x11\xdcU\xd0\xd0\xbd\x06\'\x16\x16\x92\fOH\xf2\xd6\xbd\xba\x91\xd8\x1fM\x91\xb8 \xf4\xba\xd8c\xfe\x12\x0f)\x876Q\xae\xa0m<\xd2\xdb\x9a!\x01\x84\x95\x90\x15=x\xe7\xd2<\xe9>\xa8\x94\x18\xa8\xae\x85d\xd2\xbc1:{n\x02\f\xd1axS\xd5M\xe4\xb3PuY\x9bn:K\xc0+$#\x8f\xaaS\'\xdeom\x85\x7f\x8e\xdb\xca\xf1\x02\x94I\xad\x06\x07\xde\xe2p\x1a>\x16\xdd\x8eA\x1b\x14+Y\xc5\xbbP\xb9\\\xbc\b94\x011\xbe\xcf\xc7\xdc\xfc\xce\x17QD\xf3\xd7N\xd4iJ/bCX\\\x1d\x8eCtEyL\x9d\x93\xee:S\x83y\xd0q!\xc8\x11v\xd6|^\xd5FB\xd3tFQ\xe7\x88\x14A|\xce7qr\b=\xd8N\x95\x1a$v\xdakGi\x92\xf2\xbcc\x0e>\x82\xd9\xe4h\xd4a.DOh:\x1a\x96\xb4\xc1\xb65\xcb}[\x7f\xf3d\xf2\x1c7\xc8\x9e"p\xaa\x0et\xc6]u\xfa\xab\xe2\x96\xdf\xd4\x1b\x17B\x89B\xc5\x11\0$c\xeb;\xe3\x9a\xb5\xb5\xc3;\xdfP\x1c\x06\xa25\x8dnU\x8d\xc0\xa8C\x87\xd0\xe2>e\xf8\xd4\xca\xc5FI\xb6]G\x185=\xa9\xfd\x1d\xaf\x8d\xb8\xb4\xb5\x11\bQ_\x8dC\xf0\x0biF\xec\xb9\r\x1c\r\x98\xf7\xf6V\xa7\x1c\x11\xd7\xd1>iA\xc7\0]N\x90\x15\xb4\x11x\xb0\x98D\x02#\x03\xefO|2\xb9\x06k\xa6\xa5\xc1\xa3n,\x1c\xc4t\xc1E5\xd5\xb9\x82\xfaT\x81\xac\xd5$2\xdc\xec\xe0\xa0\xbe\xb4\xfb\xc0\x05xT\xbf\xa5\xbe\t\x97\x0eZ,n\xce\x06\x0e@\xa0\xfd\xa6}\x904\xbc\xb0\xdf1Z\x0f\x01\xc1$\xa3\f\b>;T7\x05\xea\xb5E\fh\x81E@4\xe0\x80\xf7\x1a\xd2\x04\x05\x93^L\xdb\x1fE\xe7jt\x14\x16\xb0\x1f\xda\x9b\x9e\xe9\x9d\x15A\xdd\x93\xf4\xc3i0\xe7\xbe\xd9\x04\x8f\0\x87\x89Z\xd6\xd9\x96\0\x83\xe8PD\xb5\xf0&\x90H\x95\x03\xd9D\xec.$\xac\x19\xd3\x84\xbe\x03\n\x96&\x9c\x11\x12\xae\xe2\x89t\x04\x97h\x9d\x8e\xbd\xd1V\xec\xd4\xd8(\x88O\xbd\x17\x8c\x9f\x04 \xaaZ\xf3\xdc\xb1T\xa4CB\x1c\xd6*\x19iH\xbf\xbcP\xd6\xdd\x15M\xfa5\xf5\xcac\r\x1d\x0fz/H\x0f\x96ax\xa9\xaf\xd6\xf1\xa0\xbc3h A\xa3\xce\xed\xaas\x88\xe4\xd7\xc0\xb0!\x14\xb4\x87\x8eks\x92,]\x90\xa4\xe7\x8dx\'\x90-kG6\xe8\x1c[z\xa3\xb9\xe1\xf6b\xb5h,\x19\x18\xd5\xfecG\x1f\xaf)\xd5\xb5\x914\xda3u\xb1\xe9\0\xb46\xbfe/\xb4\xceT\xc7\x1b\x82\t\x01c\xa2\xe6*\\\x1cp\xd9R\x17:\f\x81\xfa\xe1\xad\xd9\xeb\x9c?\xf6\xcf\x174\xce5\xa7S=^\xe7\xff.a\xa0\x98\xae\x85\xf8*Vd\xd9\xff\xdd\x89%\xd9\x1c\xca\xadI\xdc"2\xce\xde\xc8\x9a\xe8%\x84\xb4\xf3}\xden\x91\xb6\xd1\xaa\x12\x18\xf8\xd5\f\xad\xe1\x87)\xe9\xaey\x8c\x1d%\xbeL\xb2\xac\xa0\xfd\x06\x1c\xa9}\x07\xc2L\xd1\xce\x90!(\xafCAo\xef\xc7\xd4\xb1\xd0\xe8\x93\xe6\x84oSi\xc3y\x04Y\xfe\xca\xbe\xc6\xd03\xf9\x81\xb1 \x93P\xe3\xe8\xcd\xee\xb0\xbc\x86\x04\xcb\x9a\x9a\x97kj\xa6\xba\xaaE\xed%\x96\xd1K\x1e\x034\xbd\xbfC\x05\xb2K\xfa?5x\t\xb9\xe7>\xb00\x01\xab\xa9S\xd0\xe73)\xca\x92\xc3\x82XL\xcb62\xc4\xa2\xe3Zgh\x92R\xea{\xa9\x15\xd7\xb3\x8e\0\x958t^\x06WW4\xf4>M\xc6\xdd}\xe6\xde`0\xf1\xa9N\xe8\xb5Db\xe4\x8d\xd00\r\x8b\xc1o\xd8\xb1kh\x14\xea\x1d\x1f\xc9\x15\x96\xbam\x1a\xedJ\xafa\x8a\xf2\\\xc1\x05M\x80h\xca\xbe#\xd2u\x16Z[\x8cE\xe7y#\xd4_u\nA\xb3\xed~\xbcUzSs\x1a\xc5\xd1\xf8uO\x94Rx\xffw\x8f\\\x1c\xa1\x144\x93\xfa~zM\xbaFLW\x03\x82"u\x02(i\x1fi\xc2\xd3(\x05\xd2\x87\xc0aa**\x91:\xeb\xaf\xf5\x8e1\x16p:\xe1\xe6\xfa\xdb\xc7W\x072J\x836\x9a\xf9{\x84\xed?\xc7\x1c\x11ZQ\xc7\xa9\xc2\x1b\rx\'\xc3U\xb5\xef\xb4\xfd\xd1;/\xf2 \xbc\x1e17\xbc\xd5\xd1\x0e\x13D\xd3\xa9t\xdc\r`\xa3\xfe, \xda\xb3\xd3\xffP\x80\x02@\xfeVu\x19\xd1Hj\x8e\x99<H\x02\xfc\x0bzC\x87x2r\x92\xbaC\xbd\xdd\xfd\xba\xa1p\xcb\xd6\xa9m\x88\xbdj\0\xc6a\xf1\x96:&E\xa7]\xd2+X\x12\xb8\x9c\xfev\x85\xb1\xf1Cgj\xa4M<~&F\x93\x8eB5\x80\x8c\xe5\xfd\x7f<\x90\x98\x81gp\xfd\xea\xc0,\xd2\xd6\x86\xa2\x16A\x99\x02[\xc9\xf7\xa1\x9cH\x97\xfb\x06&\xf8\xc7\xae\x8e,\xa8\xabb[\xd3,r\xf9\x01\xe6\xea\x9f\x9e\xff\x93_R\xfc^\x15\xab\r\b\x1d\xd5=\xe8\x1e\xfc \x8b\xb5\x97&i\xe4[2\xc4\x801\x93\x8f\xd5\xff\xb6\0\x0fv5E\xc0#\xa9o\xe54\x8b\x8b\xbe\x80\xaf\xb0\xd1\xa8\t\x8dc\x0f\t4\xb0\xed\xcanrS[;S\xd8>\xaf\x8d\xae\xb1uJ\\Y\x80o\xec\xfa?7\xc0\x15\xa79j\f\x1eH\xc7\xd4\xe0\xd1\xf6\x0f\xb9J\xf5\xb0p\xe8\x97\xad\xf3\xc7c\xeaP\x0fz\t\xe8\xd2\x04*\xb5\x9e\xf5\x19b\x1eR\xf3Ad9\x8e\xe7\x1c\xea`\x11e\x9c\x9e\x8ej+e\x96\x86A\xffCRu\xc0\xf5m\x95\x1a\x1c\x05\xf8\x83<|\x02\xfa\x82\x95\x96\x9aE\xdd\xc9\xfa\xc7\x91\xb5o\x19\xd5[\x92\xba\xd1h-)"\x1a\xc2\xb3\x81\x9a\xd4\xbc\xe7\xfe\xb4\x9d\xf5`\x84G\xf1\xa9B\x11\x1a\xa9\xef:B\xa6\x91g\rL\xe8\x7f\\2\x11`\x7f\xef\xe0\xb6\xfb\xe5#\xe1\xff/\x17\xbaW\xd3\xba\xde\xfd\x0b\x84\x1fwU\b\xaf\xccG\0\0\x01\x84iCCPICC profile\0\0x\x9c}\x91=H\xc3@\x1c\xc5_S\xa5"-\x0eV\x90\xe2\x90\xa1:Y\x10+\xe2\xa8U(B\x85P+\xb4\xea`r\xe9\x174iHR\\\x1c\x05\xd7\x82\x83\x1f\x8bU\x07\x17g]\x1d\\\x05A\xf0\x03\xc4\xd1\xc9I\xd1EJ\xfc_Zh\x11\xe3\xc1q?\xde\xdd{\xdc\xbd\x03\x84F\x85iV\xcf\x04\xa0\xe9\xb6\x99N&\xc4lnU\f\xbc"\x80!\x84\x10GDf\x961\'I)x\x8e\xaf{\xf8\xf8z\x17\xe3Y\xde\xe7\xfe\x1c!5o1\xc0\'\x12\xcf2\xc3\xb4\x897\x88\xa77m\x83\xf3>q\x98\x95d\x95\xf8\x9cx\xdc\xa4\x0b\x12?r]i\xf1\x1b\xe7\xa2\xcb\x02\xcf\f\x9b\x99\xf4<q\x98X,v\xb1\xd2\xc5\xacdj\xc4S\xc4QU\xd3)_\xc8\xb6X\xe5\xbc\xc5Y\xab\xd4X\xfb\x9e\xfc\x85\xc1\xbc\xbe\xb2\xccu\x9a#Hb\x11K\x90 BA\reT`#F\xabN\x8a\x854\xed\'<\xfc\x11\xd7/\x91K!W\x19\x8c\x1c\x0b\xa8B\x83\xec\xfa\xc1\xff\xe0w\xb7V!>\xd9J\n&\x80\xde\x17\xc7\xf9\x18\x05\x02\xbb@\xb3\xee8\xdf\xc7\x8e\xd3<\x01\xfc\xcf\xc0\x95\xde\xf1W\x1b\xc0\xcc\'\xe9\xf5\x8e\x16=\x02\x06\xb6\x81\x8b\xeb\x8e\xa6\xec\x01\x97;\xc0\xf0\x93!\x9b\xb2+\xf9i\n\x85\x02\xf0~F\xdf\x94\x03\x06o\x81\xfe\xb5Vo\xed}\x9c>\0\x19\xea*u\x03\x1c\x1c\x02cE\xca^\xf7xw_wo\xff\x9ei\xf7\xf7\x03\x96\x1br\xb5n\xdb\xd6\x84\0\0\r\x1aiTXtXML:com.adobe.xmp\0\0\0\0\0<?xpacket begin="\xef\xbb\xbf" id="W5M0MpCehiHzreSzNTczkc9d"?>\n<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="XMP Core 4.4.0-Exiv2">\n <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">\n  <rdf:Description rdf:about=""\n    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"\n    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"\n    xmlns:GIMP="http://www.gimp.org/xmp/"\n    xmlns:dc="http://purl.org/dc/elements/1.1/"\n    xmlns:tiff="http://ns.adobe.com/tiff/1.0/"\n    xmlns:xmp="http://ns.adobe.com/xap/1.0/"\n   xmpMM:DocumentID="gimp:docid:gimp:81f36bf4-fa35-4be1-99bc-7336b0af599a"\n   xmpMM:InstanceID="xmp.iid:0071fd64-0636-45ea-94a7-4501ed7e84ce"\n   xmpMM:OriginalDocumentID="xmp.did:0c81f2fe-93a2-4786-98e9-bb51fb6b5b89"\n   GIMP:API="2.0"\n   GIMP:Platform="Linux"\n   GIMP:TimeStamp="1658411516345975"\n   GIMP:Version="2.10.30"\n   dc:Format="image/png"\n   tiff:Orientation="1"\n   xmp:CreatorTool="GIMP 2.10">\n   <xmpMM:History>\n    <rdf:Seq>\n     <rdf:li\n      stEvt:action="saved"\n      stEvt:changed="/"\n      stEvt:instanceID="xmp.iid:65f9e130-f2d3-49f9-9ebf-e62b173e1386"\n      stEvt:softwareAgent="Gimp 2.10 (Linux)"\n      stEvt:when="2022-07-21T15:51:56+02:00"/>\n    <\/rdf:Seq>\n   <\/xmpMM:History>\n  <\/rdf:Description>\n <\/rdf:RDF>\n<\/x:xmpmeta>\n                                                                                                    \n                                                                                                    \n                                                                                                    \n                                                                                                    \n                                                                                                    \n                                                                                                    \n                                                                                                    \n                                                                                                    \n                                                                                                    \n                                                                                                    \n                                                                                                    \n                                                                                                    \n                                                                                                    \n                                                                                                    \n                                                                                                    \n                                                                                                    \n                                                                                                    \n                                                                                                    \n                                                                                                    \n                                                                                                    \n                           \n<?xpacket end="w"?>\xb0\x89\xdaJ\0\0\0\x06bKGD\0\0\0\0\0\0\xf9C\xbb\x7f\0\0\0\tpHYs\0\0\x0b\x13\0\0\x0b\x13\x01\0\x9a\x9c\x18\0\0\0\x07tIME\x07\xe6\x07\x15\r38\r\x9fg\x7f\0\0 \0IDATx\xda\xec\x9dwx\x14U\x17\xc6\xdf;\xb3\xbdd7\xbd\'@B\x12J\xe8\t-\x14\x11\x10\x10\x04\xa5\b"\xa2bA\x14\xc1\n|\x16\x10\xb1K\x13\x15\x15)\xd2\x04iA\x05A\xa5#H\xaf!\x01BM\xb2\xa9\x9bd\x93\xed\xb33\xf7\xfbcB\xa4*"R\xe4\xfe\x9e\x87\x07\x98\x9d\xb9;s\xe7\xcc\xbes\xce\xbd\xe7\\\x80\xc1`0\x18\f\x06\x83\xc1`0\x18\f\x06\x83\xc1`0\x18\f\x06\x83\xc1`0\x18\f\x06\x83\xc1`0\x18\f\x06\x83\xc1`0\x18\f\x06\x83\xc1`0\x18\f\x06\x83\xc1`0\x18\f\x06\x83\xc1`0\x18\f\x06\x83\xc1`0\x18\f\x06\x83\xc1`0\x18\f\x06\x83\xc1`0\x18\f\x06\x83\xc1`0\x18\f\x06\x83\xc1\xb8\x11\x10B4/\xbf\xfc\xf2\x8a\x0f?\xfcp\x1f\x80p\xd6#\f\x06\x83\xc1\xb8*\xfc\xfc\xfc\xfa\x9d9s\x86\x16\x16\x16R??\xbfGY\x8f0\x18\f\xc6?\x83\xbbS.4""\xa2VPP\x10DQ\x84\xc3\xe1\xa8d\xb7\x9e\xc1`0\xfe\x19\x8a[\xe9dl\xc3j\x11on%\xc7\x17\xfb\xe0\xe3TR\xc8o\x85\xf4z\xb5\xed\xf1x<\x82 \x80\xe38\xa8\xd5j\x95\xd3\xe9dw\x9f\xc1`0\xfe\x01\xe4f~yE\xc70\xe28\xe5\n\xa6n\xb4\x04Ek\x104\x07E\b$H\0\xec\xa0\xa8\0A>8\x9c\x82\x92\xec\xe1\xb5dkhVY\xe9\xb5|\x17\xcf\xf3]\x8e\x1e=\xfaS\x8d\x1a5\xf0\xfc\xf3\xcf/_\xbcxq\x1f\xab\xd5J\x99\t0\x18\f\xc6m$ \x85\r\x03\x14\xa2Ul\x0b\x11\xcf@Bg\0~Wq\x18\x05P\n\x0e\xe9\x84\'\xd3im\xcd\xde\x88\r\x05W-\0\x84\x10\xed\xbcy\xf3N\f\x1c80<;;\x9b>\xf7\xdcs\x93\xd6\xae];\x83\x10b\x05\xe0\xe58\xce)\x8a\xa2\x8f\x99\x04\x83\xc1`\xdc\xa2\x02\x92\x1fmjJ\x05\xbc\x07\x8a\x0e\0\xf8kl\xc6\x0b\x0eK\x89\x1ao\x84\x9f\xb6\x9d\xbc\xda\x83j\xd7\xae=8==}v\xdd\xbauIyy9\x8e\x1d;F].\x97\xe8\xf1x\xa8\xc3\xe1\x10\xadV\xeb\x89\xa5K\x97\xae\\\xbbv\xed\'\0\n\x99y0\x18\f\xc6-  \x96:\xfe*\xd8\xa4\x97 \xe2u\0\xba\xeb\xd4\xac\x15\x1c^V\x98\x95sC2K\xa4\xbf\xda\xd9\xdf\xdf\x9f\xd4\xaf_\xff\x95\t\x13&Lh\xde\xbc\xb9R\xadV_\xb2\x8f\xc3\xe1@zzz\xd1\x90!C\xfaz<\x9e\xcd\xccD\x18\f\x06\xe3&\n\x88\xa5\x86\xd9\x0fn\xfa\x15(\xfa\xfd\x0b\xdf)\x82\xc3\'0\x91\xd1\x11Y\xe5\xde\xab<&\xb9m\xdb\xb6\x8ft\xed\xda\xb5\xbe\xbf\xbf\xbf\x11\0\xafP(\xfc\xe2\xe2\xe2j\xb7h\xd1B\xa9V\xab\xb1|\xf9\xf2\xf2>}\xfa\xa4\x028\xce\xcc\x84\xc1`0n\x82\x80\x14\xc4\x9a\x8c\x92\x07\x8b@\xd1\xed_\xfc\x1a\n\x82\x99\xf0\xe7\x9e\x8d\xc8,\xf3^K\x03\x81\x81\x81\xc4j\xb5F\xbf\xfa\xea\xabs^\x7f\xfd\xf5\xbb4\x1a\r^y\xe5\x95\xe5S\xa7N\xed\xcd\xcc\x84\xc1`0.\xe5_\xcd\x03)J2+%\x0f\xa6\xff\xcb\xe2!\x0b!\xc5\x10\x94I\xe3\x8b\x1b\x07^\xd35U\xcd\xc8:\xfb\xd1G\x1f\xf5\xfa\xfe\xfb\xefs\x95J%\xbaw\xef~/!$\x90\x99\t\x83\xc1`\xdc`\x01\xf1\xd9\xe8pP<t\xc3\xbc)\x8a\x97|\x85\xbe\x7f\xe41PJ+\xbe\xff\xfe\xfb\x9f(\xa5\x88\x88\x88PSJ\x93\x98\x990\x18\f\xc6\r\x14\x10K\xa4)\x19\x12\xc6\xe1\xc6\xce\xf4RP\x11\x93-5\xcd\xff\xa8\xd6\xd5\xc9\x93\'\xad\x94R\xe8\xf5z\xe0\xea\xa6\x183\x18\f\x06\x13\x90\xebA^\xfd\0\x1e"\xde\x01`\xbc\t\xd7\x14\t\x17\xfd\x9f\xfd\x91\xf8k\x16.\xa3\xd1\xa8\x05\0\xaf\xd7\x0b\0nf&\f\x06\x83q\x83\x04\x84+\x97Z\x82\xa2\xebM\xbb*\x8a\xc1\x15\x1b\x8ak\\\xeb\xe1\xb5k\xd7\x0e$\x84\xc0\xe1p\0@)3\x13\x06\x83\xc1\xb8\x01\x02R\xd4.\x92P\x91\x0e\xc3\xcd\xad\xb3e\x84\x88\xc7\xaf\xf5\xe0\xb8\xb883!\x04\x82 H\0\xca\x98\x990\x18\f\xc6\r\x10\x101\xcf\x11\f\xe9&z\x1f\xe7\x90\xd0\xaf\xa8\xb1\xbf\xfaZ\x0eUWe\x18:\x9dN\n\xc0\xc5\xcc\x84\xc1`0n\x80\x80P\x0fm\x03\xc0|\xd3\xaf\x8c"N,\xa7u\xaf\xe5P\xb7\xdb\xed\x06\0\x85BAp\x8bU,f0\x18\x8c\xff\xac\x80\x10\t-n\x91k\xe3\xa9@\x9b^\xcb\x81{\xf6\xec)\xa0\x94\xc2`0\x10\0\xa1\xccL\x18\f\x06\xe3Fx \x12j\xdd2W\'"\xe1\x1a\x05$\xb3\xb2\xb2\x12\x91\x91\x91$,,\xac\x193\x13\x06\x83\xc1\xf8\x97\x05$\'%\x88@B\xf0-su\x14\xd7\x94E~\xf2\xe4\xc9M\'O\x9e\xa4\x81\x81\x81x\xfc\xf1\xc7Y)\x13\x06\x83\xc1\xf8\xb7\x05D+\b\x04\x80\xfa\x16\xba>\xd3\xb5\x1c\xa4T*\xf7\xef\xda\xb5\xeb8!\x04\xf7\xde{oG\0\xc9\xccT\x18\f\x06\xe3_\x14\x10\xd1Go\xf2\x1a\x87\x17A\xaem\0\\\x10\x04i\xea\xd4\xa9_\x14\x17\x17#%%E\xf1\xf2\xcb/\x7f\xa8\xd1h8f.\f\x06\x83\xf1/\t\x88\xda\xa4\xa0\0\x84[H@\xaey\xe1\xf3#G\x8e|\xf5\xc3\x0f?\x9cU*\x95\x18:th\x97\x9a5k>\xc9\xcc\x85\xc1`0\xfe%\x011\xffVJ\xc1\xddR\x99\xdb\x05\xd7z \xa5\xd4\xf1\xdak\xaf\xbd\x90\x91\x91A\xe3\xe2\xe20m\xda\xb4\xc9j\xb5\xba-3\x19\x06\x83\xc1\xf8\x17\x04Dn\x91\x1c\xbb\x85\xae\xee\xd0?9\xdc\xe3\xf1\xacx\xff\xfd\xf7g\x96\x96\x96\xa2C\x87\x0e\xda\xe5\xcb\x97\xff\x18\x18\x188\xc0l6\x13f:\f\x06\xe3N\x87\xbf\xde\r\xbe\xe4\xafQ\xc3\x87\xfe\xb8\xf9\xa3!\x024\xe4\xf5\x89\xe5\xee\x92km\xc0\xedv\xe3\xd0\xa1C\xbfr\x1c\xd72%%\xa5frr\xb2\xbag\xcf\x9e\x0f\xa8T\xaa\xb6[\xb6l)\xe28\xee,\xa5Tdf\xc4`0\xeeD\xae\xfb\x8f|~\x1d\xff\0Z&e\x81\xde\xe4\xe9\xbc\x04\x87\xb9\b4\t\xdbk\xfb\xc7c2\x84\x10\xfd\xd3O?\xfd\xcd\xcb/\xbf\xdc;..\x0e\x92$!;;\x1b\xfb\xf7\xef/\xd9\xbe}\xfb\xfa)S\xa6l\x01\xb0\x9b\x10r\x94R\xcajg1\x18\f& \xd7,"\x11\xa6\x19T\xc4\x137\xf5\xca\x14x="\xcf\xf6\xce\xf5jN\xa5Rq\xb1\xb1\xb1\x83\xc6\x8c\x19\xf3v\xa7N\x9d\xa2###A\b\x81$I\xb0\xdb\xed\xc8\xcd\xcdEnn\xae\'777/33s\xcf\xcc\x993w\x96\x95\x95\xed \x84\xec\xa1\x94:\x99\xa91\x18\f& W# 1\xa6&\xd4\x83m\xb8y9!\xe5D\x87\xe4\xf0S\xb6\xdc\xeb\xdea\x84h\x03\x03\x03{\x0f\x1d:\xf4\xe1\x96-[\xa6\xc5\xc7\xc7\xeb\xc3\xc3\xc3a4\xfe\xb1\xf4\t\xa5\x14\x0e\x87\x039998v\xecX\xc5\xe6\xcd\x9b\x7f\x9d4i\xd2\x02\x8e\xe3VK\x92\xc4\xd6\x17a0\x18L@\xaeDa\xddPN,u\xcf\x05\xc5\xc0\x9brU<\xde\x8f\xb0\xd8\xc6\xfc\xeb\x9dG\x88\x91R\xda$))\xa9E\xbbv\xed\x1a5k\xd6,9**\xaaVdd\xa4622\x12\xfe\xfe\xfe\xd5^JNN\x0e6n\xdc\x98;i\xd2\xa4\x8f\x0f\x1d:\xf4\x15\xa5\x94U\xf9e0\x18L@.G^\x94\xa9\x16\x11\xb0\x03@\xd0\r\xbe\xa2\x13\x9c\x9eK\r;QvS\xa6\x13\x13B\xf4\x94\xd2D\x93\xc9\xd4|\xc0\x80\x01m\xef\xba\xeb\xaev\r\x1a4\b\x8f\x8f\x8f\x87B\xa1@aa!\x96,Yrt\xf8\xf0\xe1O\x01\xd8\xccL\x90\xc1`0\x01\xb9\f\x96p\xd3`H\x98\x89\x7fa\xb6\xd7\x15pCA\xee\x8b\xc8+\xff\xe5V\xe9`\x8e\xe3\x94\x92$\xb5}\xfe\xf9\xe7\x87?\xfc\xf0\xc3\xdd\x9b4i\xc2s\x1c\x87\xed\xdb\xb7\x0b\xa3G\x8f\x1e\xb3o\xdf\xbeIv\xbb\x9d2Sd0\x18\xb7\x1b\xff\xea\x0f\xfb\xcb!\xbaC\x10\xa9\t\x14-\xf0\xefO\xeb\x15\xc1a\xb46Y\xbf\xf0\x83\x13\x95\xb7L\x07SJ%\0\xa7v\xec\xd8\xb1h\xc6\x8c\x19k\r\x06CJ\xbdz\xf5\xc2j\xd7\xae\xcd\xa7\xa5\xa5u:r\xe4\x88\xba\xa4\xa4d}\xd5\x12$\f\x06\x83\xc1\x04\x04\0&\x96\xb9\xe9\xcb\x91\xfa\x8d\xf0\xd0H\0\x8d\xfeE\x11\x11\xc1a\x82\xca\xc0\x7f\x18\xb8\xb3\xe8V~\x9b\xcf\xfb\xf5\xd7_\xe7\x96\x94\x94\xd4n\xde\xbcy\xbd\x98\x98\x18\x92\x92\x92\x92\xb6u\xeb\xd6\xd2\xdc\xdc\xdc\x9d\xcc\x1c\x19\f\x06\x13\x90\xf3E\xc4\xea\x12_\t5\xac\xa1>I\x0b\x8aT\\\xff\xecw\'\b^Q\x99\x14\x1f\x07\x1d+\x95n\x83>\x17\x0e\x1c8\x90^^^^\xa7m\xdb\xb6\xf5"##I|||\x87o\xbf\xfd\xf6gQ\x14\xf3\x98I2\x18\f& \xe7\xf1q\x99K|1\xc6\xb4\x8e\x13\xc4lHH\x03`\xb8NMg\x11\x1e\x03"\xf2m\xdf}hu\xdd6\xe3\b\x94Ri\xdf\xbe}?\x05\x05\x05\xf5h\xde\xbcyh\x8d\x1a5\x14\x1a\x8d\xa6\xd9\xfa\xf5\xebgU\x85\xbc\x18\f\x06\xe3\x96\xe7\x86\x97\x1b\xc9\x8f6EQ\x1f\xc6B\xc2@\0\xdakl\xa6\x04\x04\x9f\x11%\x99\x1c\x9eSn\xbb\x9d:\xbc &\x84\x84\x9d\x95\xc3lJ\xa52u\xe3\xc6\x8d\xbf\xb5j\xd5J\x91\x93\x93\x83V\xadZ=\x96\x9b\x9b;\x87\x99%\x83\xc1\xb8\x1d\xb8\xe1k\\\x84\xe7\xd8r\xc5x\xddSDM\x1a\x83\xc3d\x10\x9c\x05p5o\xdd"\b2\xc0a4\xa7"\xc9\x11\x05\xb6q\xb7\x9bx\0\x80\xe4\xf5\xe8,\xa1\xa6\x17-\x11A\x9c \b;g\xcc\x981\xdf\xe3\xf1 ::\x1a\xaf\xbe\xfa\xeaH\xb6\xee\b\x83\xc1`\x1e\xc8UR\xd4 @\'\xda\xa5\xc6\x10h+*"\x01\x12\x8c8\x17Z#\x90\xc0\xa3\x92\xf0\xc8\0!\x1b93\x7f8t\xbfU\xb8]:7?*\x80\xa3>I\x1bQP\xee8\x7f\xbb%\xd4\xb4\x1c\xc0\xd1\x88B\xdb\x18\0\rw\xee\xdc\xb9/%%\x85\xec\xd9\xb3\x876k\xd6\xac\x11\x80\x83\xcc4\x19\f\x06\xe3\x0e\xa6\xa8f$\xb1\x84\x9a>\xb3\x84\x9a\x9e\xb6\x84\x07\xf2\xe7\t\xc8HK\xa8I\xb4\x84\x9azi\xb5Z2s\xe6\xccLJ)-//\xa7\xb5j\xd5\x1a\xc9z\x8e\xc1`\xdc\x0e\xb0p\xc9\xbfH\xc8\xa9<\n\xe0K\0\x9fA\xf2\xad\xb6\x84\x9a\x02\xab>\xca\xa8\xea\xfbI\'Mj\xd5o\xbf\xfd\xb6\x83R\n???\xa4\xa5\xa55`=\xc7`0\x98\x800\x10Qh;\b\xe0\x17\0\x9d\x01\xfcl\t5\xfb\x01\xb0V}\\\x93Rz\xff\xbe}\xfb\xce\x8a\xa2\bB\b\x1a6l\x18\xc1z\x8d\xc1`0\x01a\x9ccn\xd5\xdfM\0\xfa\x11\0\xd5y\x9f\xf5\x15\x04\xc1+\x8a\xf2\xbaT\x1c\xc7\xa9Xw1\x18\x8c\xdb\x01\x05\xeb\x82\x1b\x01\xd9\fP\xa9J\xb0\x1f\x03\x90\x7f\xde\x87i\xb1!!\x16\xa5R\t\0p8\x1c\x95\xac\xbf\x18\f\x06\x13\x90;\x14K\x98\xd9\0J{\x01H\x02P\fP\x1b\xfe\x98\xf1\xa6\x040\xea\xbc\xdd\x83\xba\xb5l\xd9\x9e\xe38H\x92\x84\xad[\xb7\x9ea=\xc8`0\x98\x80\xdc\x89\xe2\x11j\n\x05\xa5\x9b\x01$\xfc\xc9n\x9as\xff\x10(\xb8\x88\x06\r\xea\x01@qq1v\xed\xda\xb5\x9b\xf5"\x83\xc1`\x02\xf2\'\x10B\f\0\b\xa5\xf4\xb6\r\xd9\xe4\x87\xfb+\xa8$\xf5\0\xd0\x0e\x80\x17\xc0j\0-\xffB<.\xe0\xb4$\xa1~\x93&\x04\0\x8e\x1f?.Z\xadV\xb6F\b\x83\xc1`\x02r\x19\xc2\xbbt\xe9\xf2\xfc\xfd\xf7\xdf\xff@\xcd\x9a5\xa3\xaa~4O\xcf\x9b7o\xd6\x8e\x1d;>\xbf\x9dV\xe9\xb3\x84\x9a\x8dT\x92\x96\x03\xe8x\xde\xe6\x97\x01T\x9c\xfb\x8f\x04@\xa4\x80\x82\\9c\xf3X\xaf~H\xabU\x0b\0\xb0c\xc7\x8e\xdd&\x93\xe9\x8c\xcdfc\x96\xc9`0nynd&z\xad\xb9s\xe7\xee\xbc\xff\xfe\xfb\x03\r\x86\x0bk)\x16\x15\x15\xe1\x8b/\xbe\xd81n\xdc\xb8\xae\x94\xd2\xb2\xdbC@L\x9f\x02x\xf6\xe2\xed\x12\x80\f\xaf\x0f\xbf\xa8kb\xaf6\b\xa5\x9c\x12\x11\xa2\x07\xc9.+\x92<\x16\x14)\xcc\x90\b\x87\b\xa1\fA\xc4\x83\xa05\xeb\x91\x9a\x9a\n\x8b\xc5\x82\x16-Z<\x91\x93\x933\xf3j\xcfA\xa3\xd1pn\xb7\xbb\x1b\x80\xd3\0\x0e\x03\b\x01\xd0\xbd\x7f\xff\xfe\x8d\xecv\xbb\xee\xc7\x1f\x7f<J\b\xf9\x8aR\xca\x14\x89\xc1`\xdc\xbe\x1e\x88V\xabm\xd9\xbe}\xfb@J)~\xfd\xf5WwVV\xd6!\x8e\xe3T\xcd\x9a5\xab\xdf\xacY3\xfe\xa5\x97^j\x9e\x9b\x9b;u\xc6\x8c\x19\x8f\xdc\xfa\xe2\xe1\xaf\x05\xa4G.\'\x1e\x0b|f\x8c\x8aI\x03\xb4\xa6\xea\xed\xfb!\xc7\xb6 \x89\0W\x95\x90.\xf9\0{\x11\xbe9z\fM\x9a4\xc1\xcf?\xff\x9c\x93\x9b\x9b\xbb\xf0j\xcf\x81\xe38\xd5\xa0A\x83f%&&\xf6\x7f\xf9\xe5\x97\xa3\xef\xbe\xfb\xee\xff\x8d\x1c9rLJJ\x8a!33\xd3;c\xc6\x8c\xd9\0\x963\xf1`0\x18\xb7\xbd\x07B\b1\xdcs\xcf=\xa3KKK];w\xee\x9c\x03\xe0\xdc\xda\x17\xadV\xadZ\xf5S\xb7n\xdd\xfc\xb6n\xdd\xeak\xd3\xa6M=\0\xc7ni\x01\t3\xc5\x80\xe2\x14.\xca\xa3\xd9\xe5\x95\xd0\xabF/P\xb5\xf1\xea\x1b\x13\\\x18w_-|3g\xd6\x90S\xa7N\xcd\xba\xda\xc3\xda\xb7o\xff\xda\xa2E\x8b&deeI_|\xf1\xc5\xf2\x8f?\xfe\xb8Odd$\x96/_^\xda\xa7O\x9f\x9e\x94\xd2\xad\xcc\xbc\x19\f\xc6\x7fB@\xfe\x8c\x0e\x1d:LX\xb9r\xe5k\x84\x10t\xeb\xd6\xed\x9d\xcd\x9b7\xbf\xfe7\xde\xc4\xd5\x94Rm\xd5\xb5\xb8(\xa5\xff\xfa\xda\xb0\x960\x93\x16\x14\x85\0\xaa\x95\x82\x02xS\x91\x80\x99\xd1)\x7f\xbf\xc1\xca"\x8a\x8cei\0\xddV\xb5\xa5~\xabV\xad\x865n\xdc8\xd9n\xb7\xdb\x17,X\xb0\xda\xe7\xf3\x1d\x84<8\xbf[\xa9T\x1e\xfc\xf2\xcb/\x0f?\xf6\xd8cIg\xcf\x9e\x85\xcdfCrr2\x8e\x1e=J[\xb5j\xd5\xb7\xb4\xb4t\x193m\x06\x83\xf1osKL\xe3]\xbf~\xfd\xcc\xbd{\xf7\x8ej\xdb\xb6\xad\xe2\x89\'\x9exd\xeb\xd6\xad\x13$I\xba\xac\x10\xf0<\xaf\x14E1\xadW\xaf^\xbd:v\xec\xd86::\xba\x86\xd1h\xd4\x01 N\xa7\xd3\x99\x9f\x9f\x9f\xbfs\xe7\xce\xdd3f\xcc\xf8\x99\x10\xb2\x9aRj\xbd\xde\xe7\x1bQ`sYBM\xdf\x02x\xea|\x01\xd9\xac\xf1\xbf\xb6\x06\r\x81\x04j\xff\xa1\xc4[v\xd0`0\xdc?k\xd6\xac\x19]\xbatQ\x1b\f\x06PJ1n\xdc\xb8.\x1f\x7f\xfcqqjjjPrr2\x96,Y\xb2I\xa7\xd3E\x01@tt4bbb\0\0[\xb6l9ZYY\xb9\x82\x995\x83\xc1\xb8c<\x10\0x\xf5\xd5W\x7fx\xf7\xddw\xbb\x17\x17\x17\xa3o\xdf\xbe\xe3\xb6n\xdd\xfa\xd6\x05\'J\x88\xb9q\xe3\xc6C\x9ey\xe6\x99g\xd2\xd2\xd2\xe2\xe2\xe2\xe2p.{\xfbb$IBQQ\x11\xf6\xed\xdb\xe7\xfc\xf6\xdbo\x17\xcd\x9b7\xef-\0g\xaf\xab\x17\x12j\x0e\xac\xf2\x18\x12\0y\xfc\xa3\xbb>\x05\xfbC\x12\xae\xadA\xaf\x13(\xc9\xb6.\xfa\xf09C\xd7\xae]\xd5\xabW\xaf\x06\xa5\x14]\xbbv\x85\xd9l\x86\xcdf\xc3\x981c0m\xda4H\x92\x84={\xf6\xa0E\x8b\x16\x17\\s\xaf^\xbd>\xfb\xe1\x87\x1f\x9ecf\xcd`0\xee(\x01Q\xa9T-6n\xdc\xb8\xa5e\xcb\x96\x8a\xa3G\x8f\xd2\xa9S\xa7.\x9b>}\xfa|\0\xfc\x83\x0f>\xd8\xa5\x7f\xff\xfe}\xdb\xb4ic\x0e\f\f\x04\xa5\x14\x16\x8b\x05\x87\x0f\x1fv\x9f={\xf6Dnn\xae\x85\x10B\xa2\xa2\xa2""""j\xc4\xc7\xc7\xebj\xd6\xac\t\xa5R\t\xb7\xdb\x8d\xb5k\xd7\xda\xc6\x8c\x193<33s\xde\xf5\x15\x11Sk\0\x9bQ5\x162\x95D\xe3\x83\x1am\xaf\xb9\xbdH\xe7\x19\x1c\xd9\xb2\x10\x93\'O\xc6\xb8q\xe3\0\0\xa3F\x8d\xc2{\xef\xbd\x07B\bV\xadZ\x85\xd4\xd4T\x04\x07\x07W\x1fC)\x85 \bp\xb9\\h\xd4\xa8\xd1\x0b\xa7O\x9f\x9e\xc2\xcc\x9a\xc1`\xdc\bn\x99Lt\xaf\xd7\xfb\xfb\xd8\xb1c\xdf\x9a6m\xda\xf8\xc4\xc4D\xf2\xc9\'\x9f\xf4\x19=zt\x1f\x8e\xe3\x10\x1a\x1a\n\xa5R\tA\x10\xb0k\xd7.i\xd5\xaaU\x9b\xdfz\xeb\xad/\t!?SJK/\xf2T\x8c\x94\xd2\xd4~\xfd\xfa\xf5\x198p\xe0C\x1d;v\xf4\xeb\xd9\xb3\xa7)..n\xce\xf0\xe1\xc3c222\xde-..\xfe\xc7\xeb\xa7[\xc2\xccZP:\x1d\xe7\r\xa4\xb7\xf3\x9c\xc6\x07\x9e\xc6\xc0\xdf\x19D?\x8f\xe6I\xc1\xd0\xeb\xf5\xd8\xb4iS\xf5\xb6u\xeb\xd6A\x14E\x9c8q\x02yyy\xa0T>\xf5\xca\xcaJ\xac\xfc\xfe{\xa4\xff\xb8\x01\xa7s\xad\x88\x8b\tDN\x81\xad9\x80pT\xd5\xda\xd2j\xb5\x84RJ\xdcn7[g\x9d\xc1`\xfcw=\x10\x000\x1a\x8d$..\xee\x89Q\xa3F\xbd\x9b\x96\x96\x16\x14\x14\x14\x04\0(--\xc5\x81\x03\x07\x9c\xcb\x97/_\xfe\xf5\xd7_O\x02\xb0\xef*\x9b\f}\xf2\xc9\'\xa7\x8c\x193\xa6\x7f\xcd\x9a5\x91\x99\x99I\x07\r\x1a\xf4\xdc\x9e={>\xbf\x0e\xde\xc7\xe3\0.\xc8\xd9\x10\x01\xbc\xcd\xd5\xc4W\xb1-\xaf\xa9k[\xe9\n\xb1\xf9\xe7\xc5X\xbbv-z\xf6\xec\tI\x92\xf0\xe9\xa7\x9f\xa2\xb4\xb4\x14\xf7\xde{/\x12\x12\x12\xa0\xd5ja\xb5Z\xf1\xcc\xf0QXz\x82\x03\xf8\xf3\x8a\xf7\x8a^\xa0<\xb7\x12\xa7\x7f\x9f\x06st}\x18\x82\x9b\x01\0\x9c\xa5\x07Pt\xe0S?\xa3\xf1\xa7\x8a\x8a\n\xca\xcc\x9e\xc1`\xfc\xe7\x04\xe4"/\xa2Sbbb2\xc7q$33\xf3\b!d\xdd\xb5\f\x88\xab\xd5j\xaem\xdb\xb6oM\x9f>\xfd\xb5\xb8\xb88\xb2i\xd3&O\x97.]\xeer\xbb\xdd\xdb\xff\xa1\x80L\x02\xf0\xc2\xc5\xdb\xf7{}\xe8V\xb3/\xa0\xd2\xfd\xed6y{!\x0e.\x1e\x8f:u\xea ??\x1f\x94R\x84\x87\x87\xc3b\xb1\xe0\xf7\xdf\x7fGLL\f\x9a6m\x8a\xd1\xff{\x13\x1fo\xb4\xfe\x91Sr1>\x8f,,\xe4\xdc\xed\xa5\x80\xa3\x94\xe2\xcc\xceO4\xde\xfc\x17\xcfy$U3\xd8\x14\x84\x10\xaf$I\x02{\x1c\x18\f\xc6\xdf\xfa\xcd\xbaE\xcf\xcb\x0b \xd3j\xb5n*))\xd9\by\x05\xbfk*s"\x8a"-((\xd8h\xb1X"\xee\xba\xeb\xae\xa6\x89\x89\x89\n\x7f\x7f\xff6k\xd6\xac\x99\r\xe0\x9a\x7f4_2h\xea\x01\xb8\xe7\xe2\xed\x15\x92\x849~\x89\x80B}\xdeI\b\x80\xab\xfc/E\x85*\xf5\xb0f\xfc\x86\xbb\xda\xb5Bhh(\xfc\xfc\xfc@\b\x81\xd1hDAA\x01\xba\x0fy\x0bz\xd80v\xc9!@\xa5\xbfrC\x9c\xe2<\xf1\xa8zOP\xe9\b\f\xc1-|\x85\x19\x01\\\xe3\xda\x83\xb8\xe6\xf5\xde\xe1\x9a\xd5\x1d\xcb7\xad3\x9a$\xc6\x8e Q!\xbd\xe1\xf1F\xa3\xc2q\x16@\x19{4\x18\f\xc6\xed* \xd7\x15A\x10\x90\x91\x91\xb1.00\xb0{\xcb\x96-\xc3\x12\x12\x12\x02\x0f\x1e<\xc8egg\xaf\xfb\x07\x02R\x04`\x18\xce\x1b\x03\xb1I\x14{D-~\fi\0\x10\xeeB\x01\xf1:\x01\xb5\xe1\xf2\x8dI>y\x1f\x8eC\x86\x15\xd8\xfa\xfdR\xf8\xe9\b\xdcn7N\x9e<\x89o\xe6\xce\xc7\xe3\x13W\xc1c\x8e\xc1\x9a\x9f7\x02\xfe\xb1\x17\t\xc4U\xa2\xd4\x80\xab\xa1k\xae\xee\x9e\x9a\xcc\x85\x06\x06q\x1a\xb5\x96\xe84*>4P\xa7\xa8\x15\x15\xc57LlG\xe2\xa2\x9e\xa1\x82\x10K\x8a\xca\xb6\x03p\xb2G\x84\xc1`\\1ZtG\xa9%\xcf7\xdd\xb0a\xc3\xf66m\xda(\xd7\xaf_\xef\xe9\xd8\xb1ccJi\xe6\xb5\xb6g\t5\xad\x04p\xdf\xb9\xff\x7f"\xf8\xe3\xfd\xe8V\x80\xd6|\xe1\x8e\xae2\xb9\xab/\xde\xeeu\xa0_\x92\x12\xfd\x1e\xe8\x02\x93\x9f\x1f\x8eg\x9f\xc0\xd49kp\x14a\0\x15\x81\xca"L\x1f\xd1\x15^A\xc2\xe7\x0b7\xe2\xa8\x14\0XO\x01\xc1\xf1\xd7\xde\t\xe5\xc7\xa0l\xa2\0\x17\x1e\x04b\xa8\xf2\x88\x04\x1f\xa8\xcb\x03\xf8D\x10\xa3\x0eP)\xe1;x\xdc\xe2[\xb9q0D\xe9\xd7\xf3\x0f\x0f\b\b QQQ\x8f=\xfe\xf8\xe3C\xbd^\xaf\xe7\xf3\xcf?\xff\xe4\xf4\xe9\xd3K\xd8\xa3\xc4`0\x0f\xe4?\r\xa54\xbf\xb4\xb4\xd4\xdc\xb5k\xd7\x96\xf1\xf1\xf1\n\x8f\xc7\x13\xbfw\xef\xde\x05>\x9f\xefZ\xbd\x10\x11@\xdfs\xff/\x11)~\xb8\xd8\xfb\0\x80\xd23\x80)\xe2B\xaf\xc1c\xc7\xf4\xa7[c\xfc\xd8\xff!!!\x01\xb5k\xd7FJJ\nzwo\x873;\x7f\xc1\x11\x9b\nP\x1b\xf0D\xd7F\x18<x\x10\xfa\xf7\xba\x0b\x8a\xe2Ll\xcd\xc8\x05t\x01\xd7\xde\t\x9c\x06R\xbe\x02\xd2\xe9\x12\x80\xab\0!\x1c\xe0\xf3\x01J\x05\xb8 3 \xf8 \x95UBQ;\xc6H\xe2\xa2\x06\xd0\xbcB\x9b\x89W\xed\xf4x<\0\0\xa3\xd1\xd8k\xc5\x8a\x15\x0bz\xf6\xec\x19\xd9\xbau\xeb\x98\xb4\xb4\xb4\xde\xe9\xe9\xe9\xfb\x9dN\xe7Q\xf681\x18w\x16w\xdc\x9a\xe8\xdf\x7f\xff\xfd\xdb+W\xae\xccS*\x95x\xec\xb1\xc7:\xeb\xf5\xfa\x07\xfeAs\x17\x8c\xa1\xb4S\xb8\xf1\x80e\xbf<\x88\r\0\x92\x88D\xc9\x82\xaf\xc6\f@\xa8p\xc1lc<\xda\xc4\x80G\x06=\x8c\xaf\xbe\xfa\n\xf5\xeb\xd7\xc7\xbb\xef\xbe\x0b\x97\xcb\x05\xa3\xd1\x88\x16\xcd\xeaaL\xc70\xc4HVTV\xda\xcf\xbd\xf9\xe3\x95\x97\x9eG\x8c\x8e@\xce{\xafVE\xc0]\x01T\x14\0\x0e\xab\x1c\n\xfb3Tz@\x1f\b\xaa\xa9\r\xdf!\x03D\xbb\x13\x8d\xdd\xc0\x03n\r\xea\xec>\x01p\x04|X \xc4\xb3\x05\xe0\x03\xfc\x94\xca\xbe\x9d\xa7T\x04\x19&h4\x1a\x0e\0j\xd4\xa8\xd1\xb2n\xdd\xba\xd5J\xd8\xb4iSn\xe4\xc8\x91/\xb0G\x89\xc1\xb8\xf3 w\xe2EGDD<\xbcy\xf3\xe6yqqq\x985k\xd6\xd9\'\x9ex\xa2\xc1\x95\xaa\xd6\xe6\x86\x07s\x9c\xe4\x1d\0`KD\xa1\xad:\x9b\xdd\x12j\xaa\x01\xe0\x17\0\x17\xc4\x93\x9c\x94b\x8f\x97 [\x19\x82\x9c\x9e\xed1\xfe\xddw\x10\x14\x14\x84\xf7\xdf\x7f\x1f3W\xee\xc7\t\x12\x04\xf8<X\xf5\xd6\x03\x88\x8a\x8aB\xc3\x86\r\xab\x8f\xdd\xb0a\x03\xda\xb6m\x8b\x85\x0b\x17b\xe0\xc0\x81(**\x82$I8v\xec\x18\xbe\x9e\xb3\x18\xf37\x9d\x02\x94\xfc\x1f"\xa1\xd6\x03n\x1b\xa0\x0f\x96\x07\xe8E\x1f\xe0,\x95\x97_\x0f\xa8qU\xe3$5\xdd\xa7\xb0{\xdd|\x04\x04\x04\xc0\xe5ra\xf1\xd2%xg\xddrL\xec=\x041QQ\xd8\xb5o/F\xae[\x06\xf7\xf6\xfds\xfb5o\'\xacY\xb3\xa6x\xe5\xca\x95/\xb6m\xdb\xb6z\xfepzzzy\xdf\xbe}\x83|>\x9f\xc8\x1e)\x06\xe3\xce\xe1\x8e\\\xd2\xb6\xa4\xa4d\xe1\xd7_\x7f=x\xfc\xf8\xf1\x1d{\xf7\xee\x1d\xb3n\xdd\xba\x0f\x16.\\8\xf4r\xfbF\xe5\x17K\x96P\x93\x04\xe0\xb8%\xd4t\x10\xc0\x01\0z\0]\x01\x98.\xde_G\b\xda\xa8\x81\x10\xa9\b\xc1#G 88\x18G\x8e\x1cA\xeb\xd6\xad\xd1\xa9Sg\xdc\xf5\xe4G\xb0s\x1a\x04\x07\x07\x83\xe7y\x10B\xaa\x93\x03\x95J%8\x8eC\x83\x06\rp\xe6\xcc\x19\xc4\xc6\xc6b\xee\xdcyxt\xd2\x1a@\xe7\x0f\x84\xd6:\xcf\xf3\x90\0\x8f\x1d\xf0\x0b\xffc\x9b\x12\x80\xc6(\x0f\xd8[O\x02Aq\x7f\xd9\x17\xa7\x14\x11\xd8\xbd{7:w\xee\f\xadV\x8b\x87\x07<\x84\0\x93\x19\xf7\xf5\xe8\x01\0h\xd4\xb81\xd4*5\x14=\x06=\xd2\xbf\xdf\x838x\xf0\xa0t\xe8\xd0\xa1J\0\xaa\xf3\xfa\xb3\x88=J\f\xc6\x9d\x07\x7f\'^\xb4(\x8at\xeb\xd6\xad;Z\xb4h\xf1Xrr\xb2*>>\xbe\xc9\x8a\x15+\x0e9\x1c\x8e\xac\xcb\xed?\xd1\xe19\xfc\x92Ac\x050\b@*\x80\xfa8o]\xf3\x8bqQ\x8a\xc3\xaf\xbf\x8d\xbb\xbbw\x87(\x8a\x986m\xda\x86_\x7f\xfdu\xfd\xa0A\x0f7\x89\x0f\x04\xd2\x7f?\x89\x8e\xf5\x82\xd1\xb6m[$%%\xc1\xe3\xf1\xe0\xa5\x97^B\xb7n\xdd\xe0t:\xe1\xf1xp\xec\xd81x\xbd^t{\xf1+H\xfa\xa0\xcb\xf8\x8e\xe4\xc2\xa9\xc2\x17\xdcU% x\xe4<\x11^\xf9\xe7\x9d\xc1)\xa0\xab8\x8b\xee\xdd:\x81\x10\x02\x8e\xe3\x10\x17\x17\x07\x8e\xfb#\xbai6\x99\x90\x98\x90\0\x83\xc1\x80\xb0\xb00\xd2\xb0a\xc3\xeak\xcf\xcf\xcfGvv\xb6\xa9O\x9f>\x8fEFF\xb6>u\xea\x94\xbf\xd3\xe9,\0p\xcdK\x15\xf3<\xaf\xa0\x94\xde\xdb\xaaU\xabG$IJ\xb2\xdb\xed\xc7\0x\xd8\xe3\xca`\xb0\x10\xd6-Crr\xf2\xd3\xcb\x97/\x9f\x1e\x1f\x1fOV\xae\\i\xeb\xdd\xbbw{Q\x14\xf7_i\x7fK\xa8)\x01\xc0\xe3\0\x1a\x9f\x8bX\x01\xe8y~?R\0?\xb6\xed\x84\x87f\xcd\x86\xc1`@\xd5l\xaf\x14\0g\xe6\xcf\x9f\x9f\xd5\xbd{\xf7\xf0\xd4{\x86 *@\x81\xe5\xdf~\t???\0\xc0\x91#G\xb0u\xebV$%%\xc1\xdf\xdf\x1fZ\xad\x16\x8b\xbf[\x86\xd7\xbf?smSv}n \xff0\xa01\xcb\xde\x8a!X\xf6b.\x83\x9f\xdd\x82%\x13\x9f\x81^\xaf\x87R\xa9\x84\xd9l\x86\xbf\xbf?\xfc\xfd\xfd\xa1P(@)\x05\xb9\xe8\x1c(\xa58y\xf2$v\xee\xdc\x89~\xfd\xfa\x81\xe7yPJQ\\\\\x8c\xcc\xccL\xdf\xd6\xad[\xb7\xcf\x9c9s\xd1\xa9S\xa7\x96\x02\xb8j\x0f\x85\x10\xa2\x195j\xd4\x0fO<\xf1D\xc7\x88\x88\b8\x1c\x0e,X\xb0\xe0\xd8\xc8\x91#\xdb\xfc\x9dv\x18\f\x06\x13\x90\x7f\x15\x9dNG\xfa\xf5\xeb7\xf3\xe3\x8f?~\xcc\xdf\xdf\x1f\x0b\x16,(\x18<xp7J\xe9_\x96J\xb1\x84\x9a\x9a\x02X\f \xee|\xf1\xd8P#\x01m\xbe[\x8a\x98\x98\x18X,\x16\f\x1a4\xe8\x8d\xf5\xeb\xd7O\0\x80\xd4\xd4\xd47~\xf9\xe5\x97\xf1s\xbe\x99\x8f\x11s\xf7ad\x9b\0\x8c\x1e\xf5"BCC!\b\x02\x96-[\x86\xb6m\xdb"""\x02^\xaf\x17\xf5Z\xf5F\xb62\xe6\x1f\\!\xad\xba\xc5\x14\xb0\x17\xcb^\x89\x7f\xf4\xa5\xbb9K\xb1\xe5\xb3g\x91\x9c\x9c\f\xaf\xd7\x8b\x8a\x8a\n\x94\x96\x96"//\x0fg\xce\x9c\x81\xc9dBXX\x18t:\x1d\xbc^/l6\x1b\x04A@\x9d:u\x90\x9c\x9c|\x81\xb7r>\xc5\xc5\xc5\xd8\xbf\x7f\xbf{\xed\xda\xb5?O\x9e<\xf9\x1bJ\xe9O\x7f\xb5\xee}DD\xc4\xe3\xbbw\xef\x9e\x19\x1e\xfeGh\xce\xe1p`\xc0\x80\x01\x13\x7f\xf8\xe1\x87\x97\xd9#\xcb`0\x01\xb9u:\x80\x10\xcd\x0b/\xbc\x90\xfe\xe6\x9bo\xdec4\x1a\xb1z\xf5\xea\x8a\x91#G>\x97\x97\x97\xb7\xe0\xa4Y\xa3\x07\xa5w\x03\xc8\'\x80\x83\xca\x0bH\xd5\x01\xd0\x03\xc0\xbd\x90G\x1d\0\xc8\xe5\xdc\xd7\xc7\xd5E\x8b9\xdf\xa0v\xed\xdap8\x1cx\xf3\xcd7\xd7L\x9d:\xb5\x87(\x8a\xe7\xe6\t\xd7\xda\xb2e\xcb1\x9dN\xc77}b*\xa0\xd4 \xcc\x9d\x8fG\xba6@XX\bv\xef\xcd\0\xcfs\x98\xf1\xc5\x14\xd8l6D\xdc\xf54D\xbf\x88\xebw\xb1\xf6"9K\xfd\xe2i\xc0^\'v\x7f\xf5\x1c\x9a6mz\xa9#\xe3\xf3\xe1\xd0\xa1C\xd8\xb6m\x1b\xd2\xd2\xd2\x10\x1f\x1f\x0f\xadV{Y\xd18{\xf6,\xb6m\xdb\x86v\xed\xda\xe1|\x01\x90$\t999\xd8\xb5kW\xc9\xd2\xa5KW,^\xbcx\x01\xcf\xf3\xbf\x9d\xd7/\xd54h\xd0\xe0\xcd]\xbbv\xbd\xa5R\xa9.\xd8\xfe\xe9\xa7\x9f\xee\x1a>|x*{d\x19\x8c[\x07\xeeN\xef\0J\xa9{\xf2\xe4\xc9\xbd\xc7\x8e\x1d\xbb\xba\xa4\xa4\x04\xdd\xbbw\xf7\xfb\xe9\xa7\x9f\xe6\x8e\x181bMDAy\xb2(\xc7\xde\x97P\xe0\x10\x80m\x90\x0b(\xf6:_<JD\t?\xf6\xea\x8f\xbb\x97,E\xed\xda\xb5\xe1r\xb90u\xea\xd4=\x93\'O\x1ep\xfe\x8f\xa4\xc9d:\xb5g\xcf\x9e=IIIhlt\x03\x9c\x02\x05\xbah|\xb8\xa9\f/.>\x8a\x85\xc7\x15\xf8\xedP>\xce\x9c9\x03J)\xe8\xf5\xbe=\x86\x10\xd9\x13\xb9|?\\v\xbbB\xa1@\xe3\xc6\x8d1t\xe8P\x88\xa2\x88\xf4\xf4t\x1c;v\f\xa2(^"\x1e\x07\x0e\x1c@\x9f>}\xb0u\xeb\x85\xab\xe9r\x1c\x87\xd8\xd8X\xf4\xe9\xd3\'h\xde\xbcyO\x1e9rd\xe3\x9c9s\xb2{\xf6\xec\xf9\x19\x80\xfb\x01Dr\x1c\xa7V\xa9T\xdc\xd1\xa3G\xf7\x9e>}\xfarBO\xd8\xe3\xca`0\x0f\xe4\xd6TR\x8eS\xdd\x7f\xff\xfd\x1f\xbc\xf6\xdak\xcf7j\xd4\x88\x93$\t\x19\x19\x19\xd8\xbcy\xf3\xc1\x9d\xf3\xe7\xaf\x7f$\xeb@lM\xb5\xaa\xa1\n$\x86\x02\xbc\x9bR\x92\'\b8\xd9\xe9^\xd4zz(Z\xb7i\x03\x95J\x05\xab\xd5\x8a)S\xa6l\x9d0aB/\0\x97\x14\x7f\xacS\xa7\xce\xcb\xdb\xb6m\xfb\xe8\x87\x1fV\xe1\x91O7\xcb\x1eA\x15i\xa6\n\xcc\x9d>\x1e5k\xd6\x84\xcb\xe5Bb\xcb~\xc8\xd1\xc6\\\xdf\x0b\xad(\x004~\x17\xd6\xe5rW`\xdd\xc4\xc7\x90\x90\x90P-\f:\x9d\x0ef\xb3\xf9\x92E\xbb$IBvv6\x8e\x1c9\x02\x8f\xc7\x03\xa5R\tI\x92\xa0\xd7\xebq\xcf=\xf7\xa0\xa8\xa8\bYYYh\xdf\xbe\xfd_\x9e\x8a \b(((\xc0\xd9\xb3gQ.cW\xab\xd5\xeaz\xf5\xea\x05\xd7\xa9S\xa7z?\x8f\xc7\x83\xc1\x83\x07\x7f\xb6x\xf1b\xb6X\x16\x83\xc1\x04\xe4\x96\xa6\xcbg\x9f}6\xb5W\xaf^\t\x11\x11r\xf8\xc8\xe9t"//\x0f\x16\x8b\x85z<\x1e\x0f$I\xa5\xd1\xeb\xb9\xd8\x98\x18DFFB\xa1P@\x92$\xec\xde\xbd[\xfc\xf8\xe3\x8f?_\xbat\xe9\xa8?\x89\xf5\x87\xfe\xf8\xe3\x8f\xd9iii\x86\x87\x1e\x1b\x89\xd5\xf9U?\xe4\x1e;\xb6}6\x14\x89\x89\x89\xd8\xb2e\x0bv\xee>\x88\xcf\x17\xacFyh\xe3\xcb\xdf&\xc9\x07\x10\xfe\xef\x0f\xb0\x0bN\fki\x96\x12\x12\x128ki9\xb6\xef=\x86\x8d\x87O\xc3\x97\xaa\x02\xef\xef\x07Xm\x80(B\xf4\xf7C#\xa2B\xaf\x84\xc6h\xd1\xa01\x1a$7@hh\xe8%\xa1\xabs\x9e\x0b!\x04\xe5\xe5\xe5\x18\xfd\xfex\x9cr\x94\xa1k\x9d\xa6h\xd9,\x15u\xeb\xd4\x81\xd1h\xbc\xe6\x9bA)\xc5\x8a\x15+l\xbd{\xf7n\x02\xe0$3O\x06\x83\t\xc8\xad\xee\x8dhBBB\x06\x8e\x1e=zDZZZ\xfd\xc4\xc4Db0\\\xbe\x10\xa2\xd3\xe9DFF\x86\xb4j\xd5\xaa-o\xbd\xf5\xd6\xeb\0\xb6\xfeU\xfb\xdd\xbau{{\xce\x9c9\xaf\xdb\xedv\fx\xe2\x7f\xd8\xe1\xf4\x87\xd9n\xc1gc\x1e\xc4\xbb\x9f\xad@\x86\xcf_\xf6L\xdc\x15\xf2\f\xaa\x8bkh\x01\x80\xcd"\xe7{(5\x809\xf2\xd2[\xe9u\\\xbeb\xaf\xe4C\xfa\xff\xba\xa1g\xcf\x9e\xd5\x1eEQQ\x11\xf6\xec\xdd\x8bi\xab\xbf\xc3\xa6`\r\b\xcfC*\xb3\x81\n"8\xb3\x11\xe0\b<\xc5e\xe8\xaf\x0bA\xf7\xa6\xadQ\xafN]DGGW\x0b\x83\xd3\xe9\xc4\xfe\x03\x07\xf0\xfe\xe2YXO\\ \nyF\x16\xb5\xd9\x11\xe5\x11\xf1T\xf3\xbb\xd1\xa1U\x1b\xd4\xabW\x0fz\xbd\xfe\xaa\xef\x83\xcb\xe5\xc2\xca\x95+K\x1e\x7f\xfc\xf1\xbe.\x97k#\xb3L\x06\x83\t\xc8m\x83N\xa7#N\xa7\xb3Attt\x97\xc1\x83\x07\xb7\xae]\xbbv]\xb5Z\x1dL\b\xe1|>_\xc5\x993g\xb2V\xacX\xb1e\xd7\xae]+ \'\x18^\xb5@\xbd\xfa\xea\xab\xabF\x8d\x1a\xd5\xc1n\xb7\xe3\xb5\xb1\x1f`\xee\xd6\x93\x80>\xe8\xca\x15{\xaf\x84\xbbB.\x15\xef\x1f\x03\x80\x02\xae\n\fi\x11\x84\xe4:\xb50r\xc1\xa1\x0b\x17\x9c\x02\0\xd1\x8b\xb5\x13\xfa\xa2s\xe7\xce\x974\xe5p80}\xc6\x97\xf8\xdf\xa1M\xe0\x82\x03\xc0\xf9\xe9A+\x1dr\xa1E\0\x90((\x01hY%\x84\x9c|\xc4\xba$\x18\xd4\x1a\x84*t\xe8\xd1\xf3>\xe4\x94\x97\xe0\x8b\xe3{!\x06\x9a\0B\xe4b\x8d\xa2\b\xeatC\xb2\xda\x10\x03\x1e\x8f6NCjr#\xc4\xd5\x8aCHH\b4\x1aM\xf5\x14aI\x92`\xb3\xd9\x90\x9f\x9f\x8fc\xc7\x8eY\x97-[\xb6x\xd1\xa2E\xef\x02\xc8c\xd6\xc8`0\x01\xb9\xed\xd1j\xb5D\x10\x04\xee\x9f\x96\xed \x84\xe8\x9f|\xf2\xc9\xaf^x\xe1\x85\x01\xb1\xb1\xb1d\xcd\xda\xb5\x187q!\x0ez\xcc\x7f\x9d\xfcw1%\xd9\xe8\xd10\x12\xdd:\xb5DZ\xeb\x96\xa8S\xa7\x0e\x0e\x1e<\x88&}G\xc9\x85\x1d\xa9$\xdfj^\tH>l\xfcz\f\xda\xb4is\xd9\x99T^\xaf\xaa\xf3\xdf\xf4\0\0 \0IDAT\x17O\xbd\xf1\n\x16\tV\xf4\xb0+pw\xf3\xd6\xc8+)\xc4\xb4\xfcLx\x83\xcc\xa0\x92\x04\xb8\xbd\xa0\xa2\bx\x05t\xf1\xa80\xf7\xfd\xa9\xd5\xf9,+\xd2\xd3\xf1\xd0\x9eU Z5\xa4J\'\xe0r\xcb\xa2\x19h\x86Ta\x07\xbc\x02\x88\xc9\b\xc9\xee\x84\xf7\xe8)\xc4\x86\x85"B\xa9\x81t<\xefl\xf6\x81\x8c\xaf\xadV\xebY\0\x878\x8e\xcb\x90$\x89%\x0f2\x18L@\x18\x97\xc3d2\x11\xaf\xd7\xdb{\xea\xd4\xa9\x1fv\xef\xde\xbd\xa6^\xaf\xc7\xc6\x8d\x9b\xf0\xc9WK\xb0.\x9f\xbf\xfaU\r+\x8bp\xf6\xa7I\x88\x8e\xfe#\xc7c\xd7\xae]H}\xea\x13y}\xf6s\xe3$\x92\x0f\xf0y\x01\x97\r\x03S\xc30dp_\xb4n\xdd\x1a\x17O\x99]\xb6|9\xec\x0e;\x06<\xd8\xbf\xfa\xb3\r\x1b6\xa0\xcb\xec\x8f\xa1uy\xd1#\xa8\x06\x04\x8eb\x95\xd2\x8915\x9a\xe0\x7f#\xffH\xcf\xb0\xd9lHx\xa2\x0fl\x91\xc1r\xa1G\x9d\x16\x9c^\x0b\xa9\xd4\x06H\x12\xb8 3\xc4\xa22pF=\xa0R@*\xb5\x81\x0f\x0b\x82/;\xc7-\xccZ\xd9\x14\xc0\x11f\x19\f\xc6\xed\x01\xcf\xba\xe0\xe6\xe1\xf1x\xe0\xf3\xf9\x8eXV\xad\xfa\xaa|\xc1|U\x81F\xdb2\xa5M\x1b\xf2\xf4\x90\x87pO\x83P\xb8N\x1f\xc2\xe1B\xd7_z$\xbc\xa7\x02\xaf<v\x1f\xce\x1f\xa7\xd9\xb2\xf57,\xdbe\xb9\xb0\xb4<\xe1\xe4\xb64F\x1c\xb2\x12|\xf3\xd3.\x14\x1e\xda\x82\x94f\x8d.8V\xab\xd1\xa0MZ\x9b\x0bf`EGGc\xef\xa2\x15X\xf2\xced<9\xf81\xf4\xee\xd6\x03]\xc3\xe2\xf0\xfe\'\x93\xd1\xb9\xdd]\xf0\xf7\xff#\xcb\xfd\x8b\xe5\x8b\xe0\xf07\x82\x0b\xf6\x07@A\xcb+\x01I\x02\xf13@*)\x07g6\x82\xfaD\xc0\xe1\x02g6B*\xb4\x82\x8f\bV \xc8\xdc\x8b\x96\xda\xfc\x89^\xd3\x8eD\x06\xf7\x81$\xd6"\x1e\xdf!\0>f-\f\x06\xf3@\xfe\xf3X\xa3\xc3\x88\xc7\xebz\x14@FD\xa1m\xe7_\xedo\t5\xc5\0\x98\n\xa0\xc7o\n-\x1f4\xff[dgg#55\x15\x89\x89\x89X\xbf~\x03\x86\x8d\x9d\x85\xd3|\xf0\x15\xdbPV\xe6c\xda\xf3]\xf1\xd0\x80\xfe0\x1a\x8d\xf0x<\xe8?x8\xd2\xcf\\E(\x8cJ\xe8\x18T\x89\x05\xb3&!$$\xe4\x8a\xbb\t\x82\x80\xe3\xc7\x8f\xa3n\xdd\xba\x17l\xdf\xb4y3\f\x06\x03\x9a6i\x02\0\xd8\xb9s\'\xda|\xfd>\xf8\xa8PH\xa56P\x9f\b\xced\0\xd1i!\x95W\x02^/\xa0R\xca\x8bW\x99\x8d\x90\x8a\xcb\xc0\x85\x04\x80\xda*\x01A\x04\xf5\xca\x95\x86\x89F\x05*\xf8\xe0;\x9c\xbd\x89n\xd9\xdf\xf5\xaf2\xd8\x19\f\x06\x13\x90\xff\x04\x96PS$\x80\xfd\x04\xa8\x15^h\xab\xfc\x93\xfdZ\0X\t \x04\0~S\xe9qOF\x16\xf4z=\xf6\xef\xdf\x8f\x15\x8b\x17\xe3\xb9\x17_Dyy9z<\xfa&\x8e#\xe8\xca_*z\xf1P\x1d\x0eS\'\xbe\x83\xf4\xf4t<\xf9\xf9\x96K\x07\xe4EA^\xabD\xad\xbf\xf0\xd6S\t\xc3[\x1a\xd1\xa5S{8\x9dN\xf8|\xbe\xea\xdaV\x94R(\x14\n\x04\x06\x06"..\x0e\x91\x91\x91W,]\x92\x93\x93\x83\xc1/\x0f\xc7\xf6Z\x01\x90*\x1d\xb20\xd8\x9d\xf0|\xf3\xfd\x1e.:\xec\b\x97\x18\xdb\x83\x8f\x0e7S\xbb\x13\x9c\x9f\x1e\x92\xcd\x0e.\xd8\x1f\xd4f\x97\xab\xaeh\x94\x80\xd7\x07eY%:\xf9\x85@\xe3\x91\xb0\xc6U\x84\xf2\xdd\x87g+\x8e\xe7=!\b\x82\xc4\xac\x8b\xc1`\x02\xf2_\x17\x90!\0f\0h\x1aQh\xdbw\x85}\x9a\0\xf8\x15@u\xec\xe7\xb0OB\xbd\x83Y\x88\x88\x88\xc0\xd9\xb3gq\xb4q=\x9ci\x9c\x8a\x07\xbe[\x82\xb5?\xff\x82\x87\xa6l\x90s?\xae\x84\xe4\xc3;\xbd\xe20\xf8\x91\x81\xd8\xb7o\x1f6n\xd9\x89\xf5\xbfg\xe1x\xa9\x0f\x0eA\0\xf5:\x01}\xa0<k+\xb8\xf6\x85\xc7\xba\xca\xb1n\xd2\x10t\xe8\xd0\xe1\xb2M\xdbl6\x9c>}\x1a\x99\x99\x99\x88\x8e\x8eFjjju\x88\xcb\xe9tb\xdb\xb6m\0\x80\xfa\xf5\xeb\xe3\xd0\xe1\xc3X\xb9\xf9\x17\xcc\xdd\xff;\x84\xa6u \xe6\x97\xf8\x84\x19+\xee&\x94\xee\xa3F\xed\xa3\x8a{Z\xbd\xce\x05\xfb\x87p&#\xa8\xd7\x0bx}\xf2R\xba\x12E\xebr\x01\x9f\xbf\xf0\x06j\xd7\xae\rB\b\xb2\xb2\xb2\xd0\xef\x85g\x90QQ\xbaN:p\xf4\'xE\x15\x04\xdf~\0?1Kc0\x98\x80\xfc\xb7\xc4#<\x80\x83$f\x03\xa8\t`PD\xa1m\xfee\xc4\xa3>\xe4\xc5\xa8\xc2\xce\xdf^.I(Y\xb6\nm\xda\xb4\xc1\xbe}\xfb\xc0un\x07\x0e\x80w\xcd\x06\xf8|>\xb4x\xf6+9\xef\xe3O\xd0WZ\x90\xfd\xebt\x84\x85\x85U\x87\x9e\x9cN\'V\xae\\\x89\xc1\x9fn\x91\xa7\xf5\xda\xf2\xe4)\xc3\x17\x95\x83\xef\x19\xe5\xc4\xe2\xf9_@\xadV\xff\xe9w\xe4\xe7\xe7c\xd3\xa6M\xd5Y\xeb\x01\x01\x01HIIAP\xd0\x1f\x1eRee%f\xce\x9c\t\xc2s\x98\xb9\xed\x17\x1c\xde\xbd?\x0b\'\xf2\x9aQJ\x1d\0B\xb8\xd6\r\x16*\x9a\xd4\xbd\x1b\x80\x9ck"\x8a\x90lv\xfc\xd8\xf3\tt\xea\xd4\xe9\x82\xef[\xbal\x19\x06n\xf8\x0e\xd4\xe1\x82o\xcb^\x0b=\x91\x97\x02\xc0\xc2\xac\x8d\xc1\xb8\xb9p\xac\x0b\xae3T\xf4\x07p\xae\xfe\xc8\xfbUb!\xff\xf0F\x04r\x96PS\x1f\0\x1b.\x16\x0f\x000s\x1c\xb2V\xa6W\x87\x8e2<^li}\x17j\xd5\xaa\x85}\xfb\x0f^y\xfd\x8f\xf3p\xa8M\xc8\xcd\xcd\xad\xfe\xbfR\xa9\x84\xc7\xe3\xc1\xa7s\xd6\xfc\x91\x13\xa2\x0f\xbct\xddv\0+ORl\xde\xbc\xf9/\xbf#<<\x1c\xfd\xfb\xf7G\xfb\xf6\xed\xabgi\xb9\\.\b\x82\0Q\x14QQQ\x81\xe5\xcb\x97\xe3\xe9\xa7\x9fF\xf7n\xf7b\xe1k\xef!k\xd5\xba\xa4\xf9\xf3\xe7\x1f\xed\xda\xb5\xeb\x14\0\xb1t\xdb\xa1^\xbem\xfb\xbf\x05\xa5\x94\xba\xdc\x90J\xca!f\x9cp\xeb\xf5\xfaK\x8ar\xc5\xc7\xc5A\xcc-\xb4\x8bY\xa7\x96\xd1\x13ym\x98x0\x18\xcc\x03\xf9\x8f\x86\xaf\xcc:\x80Z%@S\xf5\x13\xed\x04\xb0\x1a@\x19\x80\x96\x90\x17\xa3\xba\x04/\xa5\xd8\xd8\xb8%\x94\x0f?\x8c\x84\xa4$\xe8\xf5z\xd8\xedv4h\xd0\0\x87\x0e\x1dB\xc7\'?\x82M\x13\xf4\xd7\'\xe0ub\xdb\xa7O\xa1e\xcb\x96\xf2\xf9X,xe\xd4kX\x98!]U\x92b;S)&\xbc\xfe,\xcam6TTV@\x14E\xa8\x94*\x04\x07\x07#2"\x02\xb1\xb1\xb1\xd0h.\xf4\x82\x1c\x0e\x07\xb2\xb3\xb3\x91\x9f\x9f\x0f\x8f\xc7\x03\xadV\x8b\xb4\xb44\xa8\xd5j,\\\xb8\x10\xfd\xfb\xf7\xaf\x0ewy<\x1edeea\xff\xfe\xfd\xd9+V\xac\xf8u\xd5\xaaU\xbc\xcf\xe73\x02\xc8\x04\x90>y\xf2\xe4\xefG\x8c\x18\x11{~\xed\xc4\xdd\xbbw\xd3\x94\x94\x94zU\xfb0\x18\f& \xffe\x111\xfd\xb2\xde\xe5\xe9\xd8P\xa5D \xff\xd7N\x9e\x87R\xac\xed?\x18\x0f\xbe5\x1e^\xaf\x17o\x8e\x1d\x87\x81\x0f\r\xc0\x96-[\xa1Ti\xf1\xfa\xbc\xed\xf0\xea\x82\xae\xee\xcb\x9de\xc8\xf8\xf6uDGGc\xed\xda\x9f\xf1\xc6\xa4\xef\x90\xe5\xd1\xca\x19\xeb\xe7/\x7f{%|^\xf0\xe6L(\xeaD\x83\x0b\x0f\x82\x98_\x02>,\x10b^\x11\xa0V\xa2f~9\x1eIi\x8fVMR\x90\x9c\x9c\x8c\x80\x80\0\\\xaeP\xae\xcb\xe5\xc2\x8a\x15+\xd0\xa1C\x87\xeap\xda%_\xe5\xf3\xa1\xa4\xa4\x04%%%(--\x85$I\b\n\nB\xdd\xbau/\x18\xa8\xff\xfa\xeb\xafO\r\x1d:4\xe1r\xe5\xdf\x19\x8c;>\x8c\xc4q*J\xa9\x96Rjc\x02r\x9b\x11\x14\x14D\xacV\xab\x91RZq\x9e\x80t\xfc)\xb2\xd6Z\xdf}=\xb9\x8e\x9fO\x82\xf6O\n\x1e:(\xc5\xba\x01\x8fa\xe0\x84\t8u\xea\x14\x1eyn\x02\xf6\xbb\xfda\xb0\xe7\xc1\xc1\xe9@\rA\x7f\xeb|\xee\t\xa9\xc0\xd2\x05\xd31z\xcck\xf8\xecw;\xa0\xa8\xf2\x16\n\xb3\x80\x90\xda\x17\x0e\xc2\xbb+@\xf8|pa\nHg(\xa8&Z\x0e\x939\xad\xe0CNC\xd5\xae)\xa4\xf2\n\x10\xad\x06D\xa5\x80Tn\x97\xf36Jm \x06\x1d\x84\x8c\x13\x18\x9c\xd0\x10m\xeb5F\xad\x1a5\xa1\xd7\xeb!\x8a"\xce\xe6\xe4`\xee\xe2\x85\x186\xe4)\xb4IK\x83N\xa7\xbb\xe6\xfe\xdd\xb3g\x8f\xd4\xa3G\x8f\x07\xf3\xf3\xf3\x972kc0.\xf3#N\x88\t\xc0<\x95J\xd5\xcb\xe3\xf1\xdc\xd0\x99\x8a,\x91\xf0\x1f\xe2t:\xa34\x1a\xcdG>\x9f/\xbd\xfa\x8d\xd9\xe1\t\x8b\xd0j\xe9\xe3\x9f}\xdetu\xa1\x15\xb52\x0f\x83\'\xf2LU\'\xa5(\x16%\xe4\xfaDd\x04\x84\xa1\xe0\xcd\xf1\xe8;r$rrr\xd0\xfb\xc9\xf1\xc8\x10\x83\0\xc2\xc1\xab6]}&z\x15*{!\xbe\xf9p$j\xd5\xaa\x85\xe6\xcdS\xe1>\xb3\x1f;N\x94\x02\n\x15\xa01\x02%\xd9\xf2T^\xb7\r(>\nek%\xf88\x13\x94\xf5\xa2A\x02D\x10u\t\xa4\\\'\xa0\x0f\x06\xb5\xe9 \x1e?\x02\xa8\xe5!\t\xcel\x04\xb5;A4jP\x02@\xf0AQ3\x12\x07\xac\x05X\xe5.\xc6\xbc\x13\x070c\xdd*\xcc\xce\xda\x8d\x15\x95y8N<X\x94w\x14Kg\xcd\x82PR\x06\x15\xaf\x84\xc9d\xba\xa4<\xfc\x95p\xb9\\\xf8\xf9\xe7\x9f\x1d\xc3\x86\r\x1bz\xea\xd4\xa9\x85\xcc\xd2\x18\x8c+b\x9e0a\xc2\x17\xbf\xfd\xf6\xdb\x0eA\x10\xb2\x99\x07r{\xb9\x8f\xf7}\xf5\xd5W\xcb\x9ez\xea\xa9\x14I\x92\xb4\x84\x90\xe3\xf7\xddw\xdf\x9a\xac\xac\xac\x83\xdf~\xfb\xed\xa35k\xd6$\x8b\xc7\xbe\x89\xa8E\x0bP4\xe4i\xc4v\xec\x88\xb0\xb00\x18\x8dF\x04\x04\x04@\xa7\xd3a\xdf\xbe}x|\xe4G8 \x04\\\xc3\x19P@\xf0 \x89/\xc1\x17\x1f\xbe\x84v\xed\xdaV\x7f"\b\x02\xf6\xed\xdb\x87m\xdbwb\xe7\xde#X\xf5\xdbaTh\x82A\xc4"(Z\x07\x81\x0b4\x81h\xd5\xa0v\x178\x93A.7\xa2V\xc1\xb7\xe7\x18\xa8\xa0\0\x17m\0\x1f\x19"\'\xf5U8\xc0\x05\xf9C\xb4\x14\xc9\x19\xe6\x82\x0f\x92\xcd\x0e>$\0R\x85\x03\xd4\xe3\x05\x17d\x06u\xb8\0Q\x04Q\xcb\x83\xeb\xd4\xe1\x02\xf1\xd3C*\xb1!\xb6\xa4\x12\x83R\xdb\xa3i\xddd122\x92\x0f\f\f\x84R\xa9\x04\xc7q\x10\x04\x01\x0e\x87\x03\xf9\xf9\xf9\xe2\xc9\x93\'s~\xfc\xf1\xc7\x15\xcb\x96-\x9b\x06\xe0\x14\xb32\x06\xe3Oi\xbaw\xef\xde\xdd\xd3\xa6M\x9b5{\xf6\xec!7\xf2\x8b\x15\xac\xef\xff\xb1\xfb\xa8\xe9\xdc\xb9\xb3\xe2\xd5W_\xfdp\xf6\xec\xd9\xbf\xf4\xeb\xd7o\x9a\xd1h\xc4\xbb\xef\xbe\xfb\xe8\x8a\x15+0r\xe4H\xe8SRQ\xfb\xd9\xe7pwL\f\x0e\x1d:\x84C\x87\x0e\xc3+\b\x90D\t{\x0fd\xe2\x93u\xa7.]f\xf6\xafn\\\x85\x05\xff\xeb\xd7\ff\x93\x11\r\x1b\xd4G\x93&M`6_X\xf6]\xa9T"55\x15\x8d\x1a5Bx\xfa\n,\xcf\xd9\x0bEP%\xb8\x80P\xf0\xb1\xe1\x10\x0bJ\xc0\x19\xf5\xa0\x1c\x91+\xee*\x15 J\x05\x14uc@\xaa<\x0ex\xbc\x80F\x05\xa2QA*\xb3\x81\x8f\f\x81T\\\x06\x10\x02><\bRI9\xa8\xdb\x0b.,\x10\xb4\xc2\x0e\xf8$\x10\xa3\x0e\xd4\xe1\x02\xf5\x89 <\x07\xa2Q\x83hT8\x1b\xe1\x8fw\xcb\x8e\xc1}\xdf\xffF@\x94~\x07\x10\r\xc0\\\xe5\t;\0\xe4\x03\xc8\x06\xab\xbe\xcb`\\5M\x9a4\xe9\x1a\x17\x17\x87\x06\r\x1a\xd4\xb8\xd1\xdf\xcd\x04\xe4\x1f"\x8a\xe2\x19\x9b\xcd\x86\'\x9f|\xb2\xd3\xa2E\x8bt/\xbe\xf8b\xd3\xf4\xf4tj6\x9b\xc9\xc0\x81\x03\xf1\xf6\xdboc\xf4\xe8\xd1\xc8\xcb\xcbC\xdf\x87\x87\xe1\xc7SRUh\xea<\xe7O\xf7\xf7=\x8f(\xb5\x0f\xaf\x8dy\xa5z\x1a-\xa5\x14\x92$U\x0f>SJQYY\x89\x03\x07\x0e\xe0\xeb\xef\x97\xe0[[.\x14\x1d\x9b\x81\xe6\x97\x80\xf3\xf7\x83d-\x07\x1f\x1a\b1\xb7\b|D0$[%\xc0\xf3\xa0\x15v\x10\x93Q\xae_\xa5Q\xcbk{\x94W\x82\x18t \x1a5DK\xb1\xec\x81P\n1\xbf\x18\\\x80\tP\xf0\xf0,\\]\xa8h\xdb4\x80\x8f\fQJ%e Z\r\xe0\xf2\x80R^.\xaaH)\xc0qraG\x9e\x13 J{\0\xeca\x16\xc4`\\;J\xa5\xb2\xd9;\xef\xbc3\xcah4"//\xaf\x84\t\xc8\xed\x17\xc2\xda\x9f\x91\x91Q\xf4\xe0\x83\x0f\x86\xcc\x9c9\xb3uvv6\x9e}\xf6Y2w\xee\\(\x14\n\xbc\xf1\xc6\x1b\xc8\xcc\xcc\xc4\xbdO}\x80"u\b\xa0\xba>\xdf\xdb\xa5U\xc2\x05\xe3\t\x0e\x87\x03\x03\x9fz\x1c\xf1\xf1\xf1\xe0\xd4*\xe4\xe5[\xb0\xc2S\fI\xad\x02g6\x82\x8f\x0e\x85X`\x05\xe7\xef\x07\xea\xf6\x80\xa8U\xb2\x88D\x85\xc8\xa2\x10h\x06\xbc\x02\xa8RQ5H\xae\x05(@=^\x10\x9d\x06\xd4\'\xaf\xeb\xc1\x87\x06@*\xab\0(\xc0\x87\x87@\xb2\x96\x83h\xd5\xe0\x1b&r\xc2\x8c\x15]\xa5\xce-&)\x9a$5\x80O\x028\x02P*\xd7\xc0\xa2T\x16\x0f\x8e\x03\xd4J#\xbclB\x15\xe3\xceF\xa1P\xf0\xa2(\xaa\xae\xb5\xce\x9b^\xaf\xef8{\xf6\xeco;w\xeel\xc8\xc9\xc9\xc1\x82\x05\x0b~\xb8\xd1\xd7\xc0\x06\xd1\xff!\x94R\xd1n\xb7\x87&%%\xb5\xaa]\xbb6N\x9c8\x81}\xfb\xf6\xc1\xcf\xcf\x0f\xbd{\xf7FNN\x0e\xee\x7f\xf2m\xe4*B\xae\xdf\x97z\x1dxoxo\xc4\xc5\xc5UoR\xa9T\xe0)\xf0\xbf\xd3\xbb\xb1\xd3iE\x96\x91\x07\xe58\xf0aA\xa0\x95\x0e\x10@\x16\x02\x87l\xabD\xa5\x04Q)!\x15\x97\x83\x8f\b\x96\x8b\x19r\x04D\xa9\x048N\x1e\xbbP\xf0\x80R\tB\0\xeap\x83\x0f2C,\xb1\x81(\x14 &\x03\xa4\xfcb\xf0\xc1\xferI\xf6\xa8P\xbdx*\xf74\xdd\x7f\xecij\xd2\xf7\xe4L\x86`\xc2\xf3  \xa0\xa2\x04\xc2q F=\xa8\xdb\x03*\x88\x92\xa9\xc2\xbd\xd0\xedv3\x03b\xdc\xb1\x10BxI\x92\xc6C.i\xf4w\b\xea\xdd\xbb\xf7\x07_~\xf9\xe5\x94N\x9d:\x19\xdcn7\xa6N\x9d\xbae\xcd\x9a5\xafRJ\xd9,\xac\xdb\x8d\xec\xec\xec3\xad[\xb7~V\xa9T\x12\xa5R\x89&M\x9a\xa0y\xf3\xe68{\xf6,\x06\x0f\x1b\x8b\x83\xde\xc0+\x1f,\x89\x80\xcb&\xd7\xa7\x12\x05y)[\xeeOn\x8b\xe0\xc2Kw\x87\xa3\xf7\x03\xbd.Y\x1e6>.\x1e\xb6\xdf\xf7a\xb7h\x07\x04\x1f\x88^\'{\x19!\x01\xb2\x88p\x9c\xfc\x87\xe7@\xdd^\x10\x9e\x03g6B\xcc+\x06\x17h\x02$\t\x10|\x80(\x81\xf37\x82V:A\x94r\b\x8b\x0b\t\0-\xab\0Q+\xe5\xc5\xa2\xac6\xf0\xe1\xc1\xf28J\x80Y\xae\xa2\xab\xd3\xc4q\xc7\xce~(\x9e\xcd\xf7\xf0\xf5\xe3{\x10\xb5\x12T\x92\xaaE\tN7\xa8\xe0\x03\x17\x1e\x14\xe7\xd8\x9bq\x14^\xdfaf=\x8c;8\xfc\x04\x93\xc94\xdd\xe5r\xa5\x03\xb8\x9a\x1c\x8e\xd0\xf6\xed\xdb\xbf6e\xca\x94o^x\xe1\x85v\xb5j\xd5\xe2\x8a\x8b\x8b1q\xe2\xc4-\xef\xbc\xf3\xce\xfd\x94R\xfb\r\x8f\xc0\xb0\xdbx=,\xc1\xaf\xfb\x0f?m\xe4\xc2\xc2\xc2\xaa3\xc0W\xacHG\x8fAc\xb0\xad\xd2t%\xdf\x05\xa8\xcc\x03o>\x02e\xc3\nD4pa\xcf\xecW\xb0\xf2\xf5\xee\x18\xd1\xca\x0fQ\xee\x1c\xa0\xa2@\x16\x16G\t\x94\xb6\\\xdc\x17\xe9\xc4\xf2\xd7\xef\xc3\xf8q\xafc\xc8\xf0g\xb0}\xfbvP\xfaG\xe5\x0f\xb5Z\x8d\xf1/\x8f\xc1\xb3\xba(y\xf9Y\xbb\x13|\xa0\x19b^QU\xe8\xca\x0b\xf0\x1c\xa8\xd7\x0bb\xd0\x81\xfaDHe\x95r\xe9u\xab\rD\xa9\0Q\xf0 \x1a5\xa4\xd2\ny|\xc3\'\x01\x84\xc0\xb3\xf4\x97<\nP\xa2V\x81VU\xd1\x95\x8aK\xc1\x05\x98@=^\xc0\xed\x05\x17\xe4\x1f\xe9\xf3\xf9j\xc0\xe5\xfd\x99\x8a\xa2\x04\x9f\xbc\x12"\xf5\n\xa0\x82\x0fP+\xe5\xd9Y\xa2D\x14]\xd3\xbe\0A"3\x1e\xc6\x1d\xec\x81`\xf8\xf0\xe1|LLL\xf7\xbf\xd8\xb5F\xef\xde\xbd?]\xb5jU\xf6\xca\x95+\xc7\xf4\xec\xd9\xd3_\xa5Ra\xed\xda\xb5\xae\x81\x03\x07\x8e{\xf7\xddw;QJ\xad7\xe5\x1a\xd8m\xbc\x0e\x844X\x8a\x9a\xadz\xc3^\x02x\x9c\x80Z\x07\xe8\xfc\xaf\xbc\x10\x14\x95@\\\xc7\xa0hj\0\xd1ke/ \xeb\x14\x8e~8\x035k\xd6\x04\0TTT\xa0\xac\xac\f\x15\x15\x15P(\x14\b\x0e\x0eF`` \b!\x90$\tIO\xf4\xc1)\xb7\x13#\x92R\xd0\xafK\x0f$%%\xc1`0\x80\xe38\xb8\xddn,\\\xbc\b\xcf\xac]\f\x04\x99\xe4\xc1rK\xb1<X^\\\x06\xe2\xef\x071\xa7\0\\\xb0\xbf<\x16RR.\xcf\xa8**\x05\t4\xcb\xfb\xe8\xb5 J\x05\xa8\xd3\rb\xd4A\xd8\x9byB\xfc\xe5\xf7\x8f\x94\xfd\xef\x99\xc8\xc7F\xe8i\xa5S~\x031\x1b Ym\xb2)\x11\xc03ea[\xa3\xd1\xb8\xd5\xd9\xa2\xce6E\xfd\xda-\0\0\xa2\x04\x10\xc8\xa1,\x9e\x07\xf5\xf9\0\x8f\x17\xbeC\xc7WJ;2z1\x03b\xdc\x89(\x14\n~\xf1\xe2\xc5E+V\xacH\x9f?\x7f\xfe\x90\xcb\b\x8c\xb9g\xcf\x9e\xe3\x9e}\xf6\xd9\xa7[\xb7n\xad\xd1j\xb5\x10\x04\x01;v\xec\xf0\xcd\x993g\xe1\xcc\x993\xdf\x02p\xf2:\x9fV\x18\x80\x82\xab\xbe\x06v\x1b\xaf\x03\x9e\xcar\x10\x02\x18C\0\xe3U\xeco\xcd\x82\xb2s\xb0\x9c\xd5m\xb3C\xb2U\x82\x84\x04`\xf7\xee\xdd\xd5\x02\xb2i\xd3&\xc4\xc5\xc5!99\xf9\xb2o.\t\x9c\x0e9\xb5\x02\xf0\xa9#\x07\xd3f~\0\x94W\xa2ch4\x12\x8cA(\x13=\xd8\x92y\b\x88\f\0g\xd0\xc9\x02\x11\x11\x021_\x16\x111\xaf\x18|d\b<\xdfl\x02\xdf:\x1e\xca\xc4\x18Y`\xc2\x83!\x16Z\xe5|\x0e\xbb\x13\x92\xd3%o\xb3\x14C\xd9()N\xca:\x15\'\xcc[}\x1f\x06\xf7\xf8\x91\xf3\xd3k9\x7f?He\x95\x7fxT\x1a\r@HHee%\xc5\xaf\xbb\x9e\x85^\xf7\x03Q\xf0\x11\xc4 \'D\x12\x9d\x06P)AT\x1a\xd9k\xf1\x89-\x95J%/\b\x82\xc8\x8c\x88q\xa7\xe1\xf3\xf9\x82\x02\x03\x03M\x8d\x1b7\x8e\x98?\xff\xc2\xa2\xddj\xb5\xba\xe5\xb4i\xd3\xbe}\xf0\xc1\x07c\xfd\xfc\xfc@)\xc5\xc1\x83\x07\xe9\xec\xd9\xb3\xbf\x9f2e\xca\x1b\0\x0e\xfd\x0b!\xb5V:\x9dn\x84\xcdf{\x90\t\xc8\x8d\xa42w\x1b\xbc\xae!W\x959^\x99\x03e;\xb3<\x80]\xe1\0g\xd4\xcb\x7f\x9b\x8c\x982o&:u\xea\x04\xb3\xd9\x8c\xbd\xc7\x8e`\xfc\xa2\xaf\xb1`\xecGHHH\xb8D@:5L\xc5\xafgv\xcb\x03\xdf\xfeF\xc0\xa0\xc3:\xce\x87\xf5\\)\xa4\x8aJ\xf0)\x89@Q)\xa0\xe0A\xf4ZH\x15Ua\'\xab\r\\\xb0Y\x1e\x14o\x1d\x0f\xdf\x91\0HyG\xa1j\x13\'\x8fg\xf8\xe9\x01\xc1\x07\xea\x11\xc0\x19\xf4\xa0\x0e9\xc9\x10>\x11\x8a6M\x9e\x17\x8e\xe7\xce\x14Vn\x18\xad~\xf4\xbe\xa9\x92\xcd./U\xab\xd5\xc8\xed\x1b8\xc0O[\x0b6\'@\xe9^i\xe5\xa6\x04Ji*\x80P\0\xfe$1\xa6\x83\xa2m\xd3\xde\x9cQG\xb8 \x7f@\x94L\xa2(r\0\x98\x800\xee84\x1aM\x8b\xd8\xd8X~\xf7\xee\xdd\x17l\xd7\xe9tm\x97,Y\xb2\xaak\xd7\xae\x06B\b\\.\x17\x16.\\xv\xe8\xd0\xa1C}>\xdf%\xeb\xe0\x04\x05\x05\x91\x92\x92\x92 \0)111\x89\xe1\xe1\xe1\xa1j\xb5Z+I\x92XYYY\x99\x9b\x9b[h\xb5Zs\0\xe4\x10B\xcep\x1cW\xc9q\x9cD\b\x81(\x8a\x9c(\x8a\xd1\x89\x89\x89\x0fL\x9c8q\xdc\x9c9s\xbe]\xba\xf4\xea\xab\x061\x01\xb9\x1eq@*.\xa7\xe5\xb9\x1f $\xe1\xcf\x0bW9J\xa0\xa8\xe7\x06\xd1\xcb\x83\xea\x9c\xbf\x1f\xa8\xc3\t\xc2s\x90\xecN\xec\x8e2\xe2\xe3\xcf?\xc1k/\xbc\x82\0\xa3\t\x87\x82\xf4\xe89\xf1u|5\xe8y\xa4\xb5n}A\xd1\xc2\x96\xcd[@\xda\xfb+\xf8\x98p@\x10@\xa9\0p\x1c\xc8\xcf\xdb\xa0L\xa9\x0f\xa1\xc0\n.\xd0,\xb7\xafR\x02n/\x88\x9f\x1eT\x14A\x94JPo\x05\x14q\x91\xf0\x1d\xc8\x87\xe4J\x80w\xfd1([G\xcb\xbeD\x85C\xf6\x16\x14<\xa4\xf2\n\xd9\x0b\xc9/\x81\xa2f\xa4ZlV\xe7-\xec=:\xc8w\xec\xcc3\x8a\x9a\x91I \x04\xc4\xa0\x03*\x1d\xa0N7\xb8&u\xba\x98\x0f\x9c\xfa\xb8\xb4\xb4\x94V\xad\xfd\xb1\xa1:rw\xf4\xect\x1f\xa5S\xd4\xfd\xee\x19A+\xec\xe0\x1b\'\xa9\x84\xfd\xc7\x92\x01\xeceV\xc4\xb8\xd3\x184h\xd0\x03\x91\x91\x918x\xf0`\xfey\x9bC\xa6O\x9f\xbe\xe8|\xf1\xf8\xe8\xa3\x8fv\x8c\x1d;\xf6>\0E\x17\xbdH\x9aj\xd4\xa81\xe8\xd9g\x9f}\xa8i\xd3\xa6)\xb1\xb1\xb1\n\x7f\x7f\x7f\x18\x8dF\xf0\xbc<\x11\xc7\xedv\xc3\xe9t\xa2\xb2\xb2\x126\x9b\r%%%p\xbb\xdd\x95n\xb7\xbbB\x92$\xaa\xd3\xe9L\xfe\xfe\xfe\xc6\xda\xb5k\xa3\xa0\xa0\x80\xae^\xbd\xfao\xd5\x9ccc \xd7\x0b^\xfb\b\xea\xf6\x98\x03}\xd0\xe5\xfb\xd4i\x05\x1f\x99\x07ER\xac<\x98\\5U\xf6\\\xf4\x07\x8a\xaa\x84;\xa5\x02\x03\xdc:$E\xc4bl\xfe\x01\x10\x9d\x16\xe2\xc9\\\xbc\xd5\xbc\x13\x1e\xe97\0\x91\x91\x91\xd5\x86q\xff+\xcf`\x03\xe7\x061\x1b\x01\x10H\xa56\xe8\x04\x01\xa3\x17\xae\xc6\x9c\x07:\xe2T\x80I\x9e\xba\xebt\x83\x18\xb4\xa0\x15Np\x81&9iP\xa1\0\xd1\xa8 \xec;\x05\xb1(\x1e\x10\x05(\xe2,\xe0C\xfc\0\x9e\x07\x17\xe0\'\x8f\x85T\x85\x9f\xc0q\x80(B,)\xf7\t3V\xd4\x83Y\x7f\xafj@\xd7I\xc4\xcf \xe7w8]\xa0\x14\x80 H\xde\xaf\xd3\xbb\xc1\'\xae\xbd\xac\xc1\x11\xe2\xc7\xf5lwX\x11\x1f\x13\r\x9e\x83\xb0}\xffV\xba\xe5@\xf7\x9bQI\x94\xc1\xb8\x89\x84\xacZ\xb5\xeaDZZ\x9a\xa1i\xd3\xa6/gggO\x04\x80\x81\x03\x07~\xf1\xe5\x97_>}n\x86\xe5\xbcy\xf3\xf2\x06\x0f\x1e\xdc\x98RZ|\xde3\xa4OMM}\xe1\xd5W_\x1d\xd9\xa6M\x9b\xc0\xe0\xe0\xe0\x7f|2\xa7O\x9f\xc6\xf8\xf1\xe3g.[\xb6\xec\xc9\x8a\x8a\n\xca\x04\xe4f\xa0\nx\x0e5ZN\x849R\x05\xae\xca\xb9\x13\x05\xc0\x95\x0bE\xa2\x17|\x8d\b9\xb7B\xc1\x83V:\xe5\xf0\x93\xd9\b\xa9\xa4\\\x9e\x9d$\xf8\xfe\xb8+<\x0f\xear\xcbS`y\x0e\xc4\xa0\x05\xd9\x9d\x89W\xdbuC\xbb\xe6-Q#\xb6\x06\xb6o\xdf\x8e\xc7\x0f\xfc\f\xf8| \x1a5\xa0R\x82\x96U\xa0\xdb\xf13\xb8\xff\xb7}\x18\xd2\xf7\x1ep\x06\xdd\x1f\xdf\xc1q\xe0B\x03 \x15\x96\x82\x0b\t\x80d-\x87\xe4pA\xd8k\x06\x14\x1a\x10\xd7\t(\xdb\x98\xe5\xdc\x0e[% Qp\x81f\x88\x85Vy\0\xbe\xa0\x04$\xc0\x04\xcf\x17K\xc6\xd3\x82\xd2/\x94\x83\xbb\x9f\xe2\xccF5\x15%\xf0!\x01\x10\x8bJ\xe5\fuKQ\xae\x94\xbe\xa9\xc9\xf9F\x7f\x01\x1ci\xc9\xdf\xd7\xee;>\xc8\x1c\x05\n\b\x9bv\x9f\xa6\xd9\xb9\xb3\x01,\x02p\x8c\x19\x12\xe3\xbf\xce]w\xdd\xf5vzz\xfa\xeb\x16\x8b\x05u\xea\xd4i\x0b`\x0b\x80\x9a\xeb\xd6\xad\xcb\xec\xd0\xa1\x83\x1a\0\n\x0b\x0b\xd1\xa2E\x8ba\xa7O\x9f\x9e~\xee8??\xbfN\x1f|\xf0\xc1\xf4>}\xfa\xc4\x9d\xbf\x02h\xb5\x97O)JKKa\xb5ZQQQ\x01I\x92\xa8\xfc\xfe\xc7\x11\xa5RY\x9d|\xec\xf3\xf9\xe0v\xbbiaa\xa1\'++k\xd7\x07\x1f|0\xab\xa2\xa2b\xae \b\x7f+\x8f\x84\x85\xb0\xae\'\xde\xd2OQ\xb0\xbe._\xab\xe93\xd4\xa1\0\xd1\xabAt\x02\xb8\x90\0\x10cp\xf5\x9b<u\xca\tt\\\x80I.\x97\xceq\x80\xcfW-\xe7r\x1d*\x97\x1cz\x92\xa8\xec\r\x14\x95\x01\x8d\x12\xf1~\xfea\xbc\xf7\xed\x1e@\xad\x92\x93\xf2\xecN(\xeb\xc5C*\xb3\x81\xf0<\xa0Vau\xdd8D\xef\xcb\xc2\x87\xe9\xeb1\xe6\xd1\x9e\xa0%\xe5 :\x8d\x1c*+\xab\x903\xc4\x89\xec\xfa\x10\x8dJ\x169\x85\x06\x14A\x80\xe0\x86\xe4t\x81\n\xa2\\(\xb1\xa4L\xce\t\xa9\xb0\xcb!2\x05\x0f\x92T#\x99\x16\x94\xe6\x8b\x99\'\xd3I\xf3\x06\x0frf#\xc4\xa2Rp~\x06H\xb6J(b#\xa2\x84&\x89S\xe8\x9e\xac\x81\x97\xed\'\x89n\x97Vn\xaa#R\xda\x03*e"|\xa2\x13\xc06\xbd^\x7f\xdc\xe1p\xdc\x12\xb7R\xadVs\0p=\xcacs\x1c\xa7\xa6\x94\xaat:\x9d\xdd\xe1pP\xf6\xa0\xdc\xd9\x10B\xfc\x9f{\xee\xb9a~~~\xd8\xb2e\x8b\x83\x10\xb2\x97R\x8an\xdd\xba=\xdb\xa2E\x8b\xeaeG\xf7\xee\xdd\xeb<s\xe6\xcc\xb7U6\xa4\xec\xde\xbd\xfb;o\xbc\xf1\xc6\x8b\xcd\x9a5\xbb$Q\xac\xbc\xbc\x1c[\xb7n\xb5\xafY\xb3\xe6\x87\xcf?\xff|#\xa5\xf4\x18\x80\x12\0BU\x8cC]\xf5\xe7\xdcjp\x02\x80RBH\x0e\xa5\xf4\x9a3z\x99\x80\\o\xec\xee\r\\\xb0\xe9\x19.\xc9\x04.\xc8\f\xa9\xa4\\6\x1a\x8d\x1a\xd4\xeb\x95\xff\x88\xa2\\\x8f\xaa\xd2!\xe7Y\xf0\x1c\xa8\xe0\x03\xd1\xaa\xe5\xea\xb86;\xe4\xb7z\x7f\x88E\xa5\x10\x8b\xca\xe4i\xb6\xc5e\xa0\x92\x04.4\0\xb4\xc2)O\x01\x8e\t\x83h)\xaa\x9eAun:\xeeo\xedS0|\xddvX6\xed\xc6\'m\x9a\xca\xdfo\xab\x04\x95(8?\xbd,bU\xd3jG\xdcS\x1fKwXP\xce\x99\xa0(-\x85K\xad\xac\xda\xc7\x05\xa8\x94rx\xcc\xe1\x06g2\x80:\xdc\x80R\xa1\0\0i\xe7\x91\xf14\xa9f\x0fI\x14u\x9c\xbf\x9f\x1c*\xe39\xf9\xdc\x9b\xd4yP\xda\x935\x0e\xc0\xf1\xcbuSU\xd2\xd3\xb7\xf0\n\xd5\xdbn\x05\xf1 \x84\x98\x1fx\xe0\x81q}\xfb\xf6\xbd\xdf\xe5rIC\x87\x0e\x9d\'I\xd2\xb8\xbf\xfbf\xa6\xd1h8\xb5Z\xdd\xe3\xf9\xe7\x9f\x1f\x96\x9a\x9a\xdaV\xa5R\xa9\x0f\x1e<\xb8{\xcc\x981O\xf9|\xbe\xfd\xecA\xb9s\xa9W\xaf\xde\x90\xf6\xed\xdb\x07\0\xc0\x91#G\xf6PJ\x1d\x84\x10\xcd#\x8f<2\xe8\xdc\xda9\x94R\xec\xdc\xb9s\x0b\xa5\xb4\x9c\x10\xe2\xff\xd2K/-~\xe9\xa5\x97:\x85\x86\x86^\xd0\x96 \bX\xbf~\xbd\xf3\xfd\xf7\xdf\x9f\xb8i\xd3\xa6)\x94\xd2\xd2\xbfs.\xe7\xe7\x911\x01\xb9\x15\xa0\xd4\x0b\xbe\xaah \x85\xfc7 \x17%\xf4\0\x10Dpz-\xe0\x13\xe5\x9aTZ\x8d<\xf6\xe1\xf6\xc8\xc7\xfbDY`LFHe\x95 J\x85\\\x93\xca\xe1\x82Xh\x05\xd1i(U*\t@A\x02L\xf2\x8a\x81\xe1\xc1rR_\xb0\xbf\xeca\x008\x1c\x13\x8e\x93>\x11\x03N\xe5bf\xe3:p\x88b\xf5y\x10\xb5J.\xdd\xceq\0G\x10\x11\x1a\x80\x85\xefuEtD0\xa6M\xff\x12\x9f;\x8e\x02<\'\x97k\x0f\x0b\x82\x98_\f\xa2\xd7\xca\x97\xe7t\x81p\xe7\xe2s8",\xfbu\x88\xea\x91\x1e\xf3\xa4\xf2J\x05\b\x01\xd1\xa8@\x04\x1f\x88\xbf\x1f\x0f\x9ek\x0eQ:~\x1b\xbd\x19\xc6L\x9a4i\xcd\x90!C\xea\x18\x8dF|\xf7\xddw\x05\x1e\x8fg>\x80\xbf\xeb\x85\xc4<\xfd\xf4\xd3\x9f=\xf3\xcc3\xdd\x13\x12\x12\xaasw<\x1eO\xa2\xc1`x\xd4n\xb7\xbf\xe4\xf3\xf9\xd8\xcc\xb3;\x10\x83\xc1@\x86\r\x1b\xf6p@@\0\\.\x17\x96,Y\xb2\t\0t:]\xe7\x94\x94\x94\xeazGN\xa7\x13\xdf}\xf7\xddfBH\xf8{\xef\xbd\xf7\xd3s\xcf=\xd7\xf0\xe2\xca\x13V\xab\x15\x9f}\xf6\xd9\xefc\xc7\x8e}\x14\xc0\xd1\x9bq=,\x13\xfd\xba[\x88&\x8e\xe84\x17\xfd2U\t\t\xa5\xa0\xa2(\xbf\xd1W\xd8\xc1\xf9\xfb\xc9\xe2\xe1\xf5\xc9\x9f\x0b>H\x0e\x17\xa4\xa2R\xb9\0a\x95\xa7B}"$\x9b\x9c1.\xcc\xf9\xe1+\xf1dn.1\x19!\x15\x95\xca\x1e\x87\xb5\x1c\xe0y\x10\x8e\0^y6\x16\xa7\xd7"W\xadF\x18\xcf\xe1\x91\xcc\x93\xb2\x98q\x9c\\\xc3\xcaV\xf9G\x85\\\x9e\xc7\xa8Y\xbfb\xff\xc1\xa3\xd0jT\xf8ag\t|g\x8a\xe5\x1aY\xa1\x01r\xeeHh \xe0\x11 \xd9\xec\0\xa5 ~\x86\x86\x1c\xc7\xc9\xae\xb6\xc3\xb3H\xf8a\xd3\xb8\xea:[\x12\x95\xcb\xb8+\x15\x80I_\xe36\x12\x0f\xcd\x07\x1f|\xf0\xe3\xb0a\xc3\xea\x18\x8dFPJ\xb1i\xd3\xa6\r\xb8\xca1\x19B\x88\x86\x10r\xd7\x80\x01\x03\xbeZ\xb3fM\xe6\xfb\xef\xbf\xdf=11\xb1z\xe6\xdc\xfe\xfd\xfbi\xcf\x9e=\xbb\x94\x97\x97\x8fd\xe2q\x07\x07(\xec\xf6\xe0:u\xea\xd4\x07\0\x8b\xc5\x82={\xf6l\x03\x80\x87\x1f~\xb8Olll\xf5~\x05\x05\x05\xc8\xcc\xcc\xcc\x998q\xe2/#G\x8e\xbcD<N\x9f>\x8d\x11#F\xcc\x1c7n\xdc]7K<\xeeH\x0f\xc4d2\x11\x9b\xcdV766\xb6K\x8b\x16-\xea%$$\x04\x14\x16\x16:\xb6n\xddz<33s\x1d\xcf\xf3\xdb\xfe\xc9\x03N"Bj\x13\xa5\xe2\xbcq\x86s\n"#\xe5\x17\x9f\xf1e\x9e,R\xa6\xd4K\x81Dq.\x84#{\x1a\x14\xd2\x99|\x88;\x0f\xad\xe7\x1f\xec\xd2\x01*%\xa4\x12\x9b<\xc0\xae\xe0\xe4\x1aUi\rk\xf9\xd27\xa6QQZ\xafl\x94XK\xaat\x02\x94\xca!\xb1\xf2\xaaq\n\xad\x1a\xd4\xe3EnT(p\xd6\x82\xa6GO\x816J\x04\xa7\x97CW\xd4\xeb\x03\xe1\xe4\xe9\xb7R\x85\x1d\xf75\bG\xab\xd4\xfa\x98\xb5\xf0\'L|\xe5A\xdc\xff\xda\xd7\xf0\x15\x9d\0\x15\x04\xb9\xccIy%\0\n\xa2R\x80\xba<\xe0kEE\x885\xc3\xdf\n,w\x8f\xb1Z\xad\x14y%\x93\xc53\xf9\xc3\xb9\x90\x80P\x88\xa2,\x94\x1e/\xb8\xfa\xf1mL\x87N\x93\xb2\xb2\xb2[>\xee\x9f\x9c\x9c<l\xd0\xa0A\xc9\xe7\xca\xe3\x13B\xd0\xa1C\x87\xbb\xa7O\x9f\xde\x92Rz\x1cr\x86n(!\xc4_\xaf\xd7\xfb\x07\x05\x05\xf9\x87\x84\x84\x844n\xdc8\xa2Q\xa3FqQQQ\xf5\xe2\xe3\xe3\xf5\xb5j\xd5\xaa.\xb1\x7f>eee\x12\xa5\xf4\x04\xfb\t\xbd\xe3\x89\x0f\x0e\x0e\xe6\x01 ??_\x92$\xe9\0\xc7q\xaa\xbb\xef\xbe\xbb\xcb\xb9\xa9\xb7\0PTTD\xdfx\xe3\x8dw\x9fy\xe6\x99(\xb5Z\x8d\xdc\xdc\\h\xb5Z\x04\x06\x06\xe2\xf8\xf1\xe3t\xc4\x88\x11\xefn\xda\xb4\xe9\r\xfaOcPL@\xae\x8e\xc0\xc0@\xe2r\xb9:\x8f\x1a5\xea\x8d\xbb\xef\xbe\xbbURR\x12\xf1\xf3\xf3\xab\xfe\xdc\xe5r\xe1\xe4\xc9\x93c\xb7l\xd9r\xf4\xed\xb7\xdf~\xcfb\xb1\xfc\xa4P(\xacj\xb5Z\xfa;\x03\x9f\\l\xb8\x9cJN8@\xa2\x7f\xbc\xe9\x13\xc8\xd3`3N\xfcH\x8f\x9d\x9d)\xc5G\xef\xe4\xb4\x9aK\xfb_\xa7\x11\xa8\xc5:L*\xb5\xed%~z\x1d\xe1x\xb9\\HQ\x19@\0\xbeVt;i\xe3^\xaf\xb8j\xcb\xe3|l\xd8\x06\xc2q\x84\x98\x8d\x90\\\x1ey6\x96\x9f\x01T\x10\0\x8f\x80\xd3\x01f\xe0\xac\x05A\x82\0\x80\x80\xba=r\x91E\xb5R\x9e\t\xe6\x13\x01QB\x83\x84`\x8c\x9f\xf2\x1d~\xcc*\xc4\x9c\x91\x01\xd8\xf0\xe9\x0b\xf8}\xf7a\b\xceR\xcc>\xb3\r\xb9\n\x02\xe8\xd4 \n\x85\\\xd7\xca\xe1\x82\xb2G\xbbWK\xff\xcf\xdeYGYu%o\xfb9\xe7\\\xe9\xdb\xee\x02t7\x8d\xbb4\xee\x16\x82\xbb;\x04\x8d\x11\xdc\x122@p\x97\xe0!A\x82;!\x10\xdc\x12,\xb8;\rM\xbb\xeb\xf5\xb3\xbf?nw#!3\x99\xf9M\xf2\xcdLRk\xb1\x16}\xcf\xbd\xfb\xc8>{W\xd5[Uo\xed9\x9e\xe5nu\x9f\x9a\x9e\x9e\x9em\xbf|g\xad\xdc\xb8\xc6Xa\xcbQ \xd9&4e\x8b6N\xb9~\xbf?\xf0\xd5\x7f\xf2\xbb\xe1\xe4\xe4T\x7f\xde\xbcyS\x02\x03\x03_\xfb\xbcm\xdb\xb6\xfeW\xaf^=\x9b\x9a\x9a\x8a\x87\x87\x07\x06\x83\x017774\x1a\rz\xbd\x1e\x17\x17\x17,\x16\x0b\xf6\x1cxP\xab\xd5\xa2\xd1h\xf2p\xe5W\xebv\xaaV\xad\xaaL\x980a\xc7\xacY\xb3\x16\xd9\xed\xf6K\x06\x83\xe1\xb9\xd1h\xfc+\xa0\xfe\'\x13EQ\xf2\xf9\xf8\xf8\xe4BPY\x8a\xa2$\xa8\xaaZ\xadt\xe9\xd2\xaf\xe5\xe2Z,\x16i\xd4\xa8Q\x05bcc\xd9\xf0\xed&<\xa0\xcd\x18\xfb\0\0 \0IDAT\xdc]\xf9\xe8\xa3\x8fr=\x8f\x19\x17/^\x9c\x98\x9d\x9d-r\xde37\xa0f\xa1B\x85*\x15(P \x9f\xd1h4?x\xf0\xe0Vjj\xeaA\xfe\tZ\x92\xbf\x14\xc8\xaf\x88\xa7\xa7\xa7\x94\x94\x94\xf4^\x83\x06\r>(Z\xb4h\x98\xcdf\xc3h4\xe2\xe6\xe6\x96\xb7\xc8\r\x06\x03\xa5K\x97\xa6t\xe9\xd2\xc5\x9b7o\xbe6""B,^\xb2\xd4\xbc\xf3|\xe4\x03\xb2\xce\x0f\x001\xb0^\xbdz\xfa[\xb7n\x9dJNN\xde\xfb\xab\xe4e:\x9d\xe3E\xd0*\x0e\x02AU\xe4x#\x12jj&\xe2q\xd4E\x04W\xedW\xef\xef\x96k\x94\xeb\x84$\xe3\xc0\x97r\xc4f\x8f\xd3\xe9t\x0f\xad\xd7\xefo\xd55\xae\xd1\x0fYvx\x1690\x98\xec\xef\xa5C\xa3\xd4w38o\xc9~\x12uES,\xb4\x92\xa4s\x10\x1c\x02y\xedgAp\xca\xdb\x9d\x1fM\x16\xacB\xe0\x9e\x99M\x86\xe4\x02\x12\xc8\x9e\xee\xd8\xe3\x92@\b\x94|~\xcc8\x7f\x04{L!\xd0:\xd1g\xe1~Z\x16\xf7\xa7E\xfdr4i\xdd\x902\xd7\xc3\xe8rt\x93\x83\xc3\xcahr\xb0\xf9\xba\xbb\xa2&\xa7I\xdaV\xf5\xa7d|\x7fZ&=}2O\xa2g\xdb\x9f\xbeh%\xfbz\x95B\xa7u\xc0i:\x9d\xa4mU\x7f\x85\xed\xd8\x05O\x0f\xa3}^jj\xea\x7f\xcc\x86)\xcb\xb2^U\xd5\xf06m\xdat\x1f9r\xe4\xc0\xda\xb5k\xe7e\xbf\xa8\xaa\x9a\x97\n\x99\x9d\x9dMJJ\n\t\t\t\xc4\xc6\'\xf3\xe0Q\x04\x0f\x9eD\xf3(*\x95\x98L+\x85\x02<\x197\xa4\x1dV\x9b\x8d\x11\xb37\xa3\xdam\x84\xf98\x13^*\x98\x1aU\xcb\xa1\xd5h\b\f\xf0#\x7f\xfe\xfc\f\x1d:\xb4\xce\xa0A\x83\xeaDEE\xf1\xe8\xd1\xa3\xc7[\xb7n\xfd\xfe\xe0\xc1\x83[\xb5Z\xedy\x8b\xc5\xa2\xbeq}N\x1a\x8d\xe6\xdd\xfa\xf5\xeb\xbf\xd3\xa4I\x93\xa2\t\t\tYk\xd6\xac\xd9n2\x99\xb6edd\xfc\xa5x\xfeK\xc5\xdd\xdd\xdd3\xd7\xd3\x10Bd(\x8a\xa2\x96+W\xee\x9d\x82\x05_G{+U\xaa\xc4\xce\x9d\xbb\xf9`\xde^:V\td\xf9\x92\xd9$&&2a\xc2\x84U\'N\x9c\x98h6\x9b\xdd}}}\xdb\x0f\x1c8\xb0}\xed\xda\xb5\x1b\x15+V\xcc\x10\x14\x14\x84\x8b\x8b\x0b\xaa\xaa\x12\x1f\x1f\xcf\x9d;w\xac\x87\x0e\x1d:\xb4d\xc9\x92\xaf\xccf\xf3AUU-o:\xde@\x17\x8dF\xf3\xb7\x7f\x15u\xf9S(\x90\x9c\x8dk\xcd\x89\x13\'\xd6\\\xbcxQ\xca\xca\xca*\xe8\xe4\xe4T\x7f\xcc\x981\xdd\xdb\xb4i\xd3\xa8b\xc5\x8a\xd2\xab\xd6b\xbe|\xf9\b\x0e\x0e\x96bbb\x9dvF\x1e/\x87)c$\x89\xb7\x86\xb6n\xdd\xfa\xc4\x86\r\x1bz\xdf\xbcys\xf1\xd7_\x7f\xfd\xd5\xae]\xbb\xa6\xbc\x9a\xf5\xe0\xee\xee.ek\x14\x038\xfaj\b\xb3\xc5\x11\xdb\xc8\x81\x94\x1c-_\xed\xcf\0\xd4+\xf7\xf6\xa8%\x0bu\x92\xbd^zA\x92\xab3\xea\xfd\x88D\x9b\xc5\xa2r\xed\xe1\nQ\xbbb_IV\xa4\xbc\x18\n \x1b\x9c\x90\xbc\\Kd$\xa4\t\xe9\xda\xfdCR\xb9\xa2\x95DvNA\xa2^\x87\xb0\xd8\xf2<\x9e$7gJ\xeb\xb4x\xc9\x12\xed\x9fE\xb3\xae|q$7gG\xc3(\'\x1d\x92\xa2`\x8fKBW\xad$\xe6\xe3\xf7P\xb3\x8a\x82\xaca\xff\xfdx\x8a\x84\xc6P\xf8\xe9\x0bt\x06w\xa4\x9cfR\xc2f\xcb#f\x94\xfd\xbd\x11\xc9\xe9hjU\xf8\xdc\xfa,\xf6\xa4\xb0\xab\xa7\xd4\xc3\x17j\xd8%\xa9\xa7T\xb4@u\xc9\xcd\xa50\xae\xce\xa5\x94B\x05<5\xf5*\xcfN;u\xc9J*\x8b~\x8f\xf9\x95$\xa9b\x91"E\xda=z\xf4(\xce\xd7\xd7wYBB\x82x\xcbw\xdc4\x1aM\xa3:u\xea\xd4o\xdb\xb6m\x95\x82\x05\x0b\x96\x0b\x0b\x0bs-\\\xb80\x99\x99\x99\\\xbe|\x99\xa7O#\xb8~\xf3>\x07N^\xe3F\x92\x1d\xbb\xd6\0\x1a\'\xf6|\xd1\x9b\x88\x98X*\x95\xaf\x8c\xabw\x01\xbe<\xf7=B\xe3\x02\x9e0iT\'n\xdf\x8f\xc0\xc3\xcd\x85us\xc7\xd0\xfao\x9b\xb8f\x85\xc7\xb7\xad|\xfcqm\xacV\x1bg\xce]\xa5\xe9\xb8oQ,Y4+\xe9E\x93\x06U(W\xb6T\xe1\x95+W\x0eMJJ\x1az\xfd\xfa\xf5\';v\xec8|\xf9\xf2\xe5\x87z\xbd^\xd7\xb4i\xd3r\r\x1b6l\\\xb1bE\xdf\x82\x05\x0b\xe6U\x15w\xee\xdc\xb9C\x8b\x16-\ngddL\xffk+\xfe\xef\x14\xbd^\xaf\xcb\xed\x1a*\xcb\xb2$\x84\x90:w\xee\\/7\xfb*\x07\xdab\xe2\xe4\xd9\\\x8eQ\xf0\xd6\xc9L\x9e8\n\x80\xb9s\xe7\x1e\xdb\xbau\xeb\xd6~\xfd\xfa}\xd3\xb6m\xdb\xf6\xe1\xe1\xe1\xae\xf9\xf2\xe5{\x9bqD`` \x81\x81\x81\xda\x06\r\x1a\xb4\x1c4hP\xcbK\x97.\xc5\x1d=z\xf4\xc8\xb1c\xc7\xee\xca\xb2\xac\xf4\xee\xdd\xbb\xbeN\xa7\xab7a\xc2\x84\xce\xff\x17\xc8\xfeO\x17\x03\xc9\x81\xa3\x9e\x9aL\xa6\xa7S\xa6L\xf9f\xda\xb4i\r\x96.]\xba\xa6o\xdf\xbea\x8a\xa2\xb0t\xd9J&\xaf:H\xf5\xa2~\x9c~\x92\x05\xce~\xa0sv\x07\xe2G\x8d\x1a\xd5&44\xf4B\x87\x0e\x1d\xbc\xeb\xd4\xa9\xf3\xc9\xbb\xef\xbe\xdb\xf6\xc3\x0f?lo\xb3\xd9\xae\0\xa4\xa7\xa7\x0b\xc5j\xcd@\xafux\x1d&3 !;;9H\x07_\xdd\xd6\xec\xeac\x91\x91\x05\xbe9}\xcc\x15\xd9\x11\xa0\xf6\xf3\xb2\xe7\xbch\x97lQ\xf1\x0f5!A\xc5\x90$p\xd2\x81\xc5\x86\xb0X\x91|<\x83DB\x1a"&\xe9\xbc\xb0\xd9\xc1\xe6PT\xb2\xbb\x8b#mX\xa3 \xe9\xb5dgf\x93h\xb7\xe3%khz\xe3>\xeb\xab\x96\xcd\xc9\xecR\x90\x9c\x9d\x1c\xbcX\x1e\xae\xd8\xe3\x92\xd1\xd5-\x8a\xe5\xf8CZ\x16\xadO\xe7f\xd5\b\t\x0e\xe2\xfd\xc9\xeb\xa9R\xcc\x1f\xefL\x13\x89\xb2\x84\xec\xe5\xee\xe8j\xe8\xef\x8d\x9a\x98\xea`\xf3\xb5\xdbe\xb9L\xe1\xde\xea\xf5\x87\xa7\x84\x10\xe9\b\xb1L\xdc\x7f\xbe\xcc\x11\xb3\x97u\xd6K\xb7\xfbk\x1aU[$W*\xf5\x85\xfa\xfd\x8f\x1b\xfe\xd94\xc3\x7f$\xc5\x8a\x15\xeb\xbdz\xf5\xea\xaf\xfc\xfc\xfc\xb4\xd5\xaaU\xeb\xf8\xaa\xf2pww\x97\xb2\xb2\xb2\xea\f\x1a4hH\xf3\xe6\xcd[\x95.]\xda588\x18\xb3\xd9\xcc\xc3\x87\x0f\xb9p\xf1g\xa6\xcc\\\xca\xd3d\x1b_\x8c\xec\x83\xb3g\x10MZ\x14\xa3@\xe1\xd2|\xb8\xf2\b\bh\x14\xe6M@\x80\x1f=\xa6m\'{\xfdi\xf6N\xea\xcegm+\xb1\xf7\xcc]\xbe\xf8\xa8\r&\x8b\x95I;~F\0\x87g\xf6\xa5[x0\'\xef\xc4\xb0jB\x17\x8e\x9d\xbe\xc4\xa4\x8d?\xb1mr\x0ff\xbe\xd7\x94q\x9b\xce\xb2?\n\xf6\x7f{\x13O\xe9\nk\xc6\xb6!9)\x81\xa0\0\xbfB\xcb\x97/\x1f\xe2\xe2\xe2\x82V\xab\xfdE\x9f\x17\x80\xc7\x8f\x1f\x8b\xc9\x93\'\xaf\x8a\x89\x89y\xa8\xd7\xeb\xe5\x7fG}\xca_\xf2\xbbIEI\x92\x1e\t!2\xde<\xa0\xaaj\xde\xbc\t!\\m6\x9bs\xe9\xd2\xa5\xab\xe4~\x16\x11\x11\xc1\x91\xe3\xa7\x184x\x10\xe9\xa9)XMi\x84\x86\x86\xb2t\xe9R\xbc\xbd\xbd\x8b^\xbdz\xf5X\xa9R\xa5\xd0h^\xdf\xba\xd3\xd3\xd3\x89\x8a\x8a"99Y5\x99L\xb8\xb9\xb9I\xee\xee\xee\x92\xb7\xb77\x05\x0b\x16\xa4P\xa1B\x01]\xbat\xe9\x99\x9b*\x1f\x11\x11!&N\x9c8\xc7\xd7\xd7wwBB\xc2_\x10\xd6o\x90\xa2\xf8\x95\x9d\x89\xce\xd9\x9b\x98\xab\x8bP-{\0\xecv\xfb\x89!C\x864OLL\xbc\xadwr\x91Go\xbe\x01n\xa1\x1c\x8c\x05\x9c\x9d\xc1n\x81\xc4G\xe7s&\xfc\xd1\xf0\xe1\xc3\x87U\xa8Pa}\xe1\xc2\x85\x190`@\xa8\xa7\xa7\xe7\xe1n\xdd\xba\xd5SU\xf56\x80\x88I\xbc+U)S5\xaf\xf3\x9f\x9b\xb3\xa3\xe6\xc2fC\xf6\xf7\x02\x89"\bN\x01q\x18\xf4*\xb2$\xa3\n\xb09\b\f%O7/\'\'\'\xd9d2\xa9\xf2\xc3\xe7g\b\t*\x86]u\xc4\x1fl\xaa\xa3qS>\xbf\0\xee=\x03!\xae\xaai\x99\xaa\xec\xec$K\xee\xae\x88,\xa3\xa3\x06\xc3\xc7\xd3\xd1jV\xab\xe5\xbe\xa2P\x14\b\x97%\x9a]\xbe\xc3\xc1\xca\xa5\x10&\x0b"%\xdd\x11xOIG\xf6pEMLE\xd7\xa0\b\xe5\xf5Z\x1e>\x8d\xa6\xdf\xfc\xef\xb0\n\xc1\xed\x0b\xcf\x90\x8c*\xda:\xa0&\xa79\x8a\x1a\x93\xd2\x90\xfd\xbc\x10\xc9i\xb9\f\xbb\xf9\xde\xf6\xc0UU\xb5\x90iZn?{\xcdU.]x\xb6\x10\xa22p\xf8\xdf8\xa7!\xf3\xe6\xcd[Z\xb7n]\xed\xdd\xbbw\xc9\xca\xcaJy\x89$\xea\xea\x8f\x1a5jJ\x9b6m\xea\x94.]\x1a\x8b\xc5\xc2\xcd\x9b79t\xf48\xb3V\x1d \xc2\xee\x02zW@fD\x93p\x92R\xb3\xe99w/\x1aI\xe2\xeb\xe1-\xf9\xfa\x93\x96\xdc\xba\xff\x8c.m\xea3o\xe5n\xb2\xec\x0e\xbd4\xf1\xcb\xbd\xec_=\x86\xa1\x83:\xb2j\xfd>>\xddr.\xefb.^\xbd\xc7\xa4\x11=HJM\xe7\xc8\xc9K\xfcm\xc7E\0\xfa|\xb1\x89\xbd\xf3\x06\xe3\xb9\xfd<i6\x95jA\xeeL\x1b\xde\x91+7\x1eP\xa5By\xb6\xed;I\xdbq\xdf0\xa2e\x19\xda\xb6nBxx8z\xbd\xfe\xb5\x1b=|\xf8\xf0\xd5\xe3\xc7\x8f\xbf\x0f\b\xb3\xd9\xfc_\xbf\x18s\x92Y\xfeW\xa18\xab\xbf\xbf\xff\x99\xf8\xf8\xf8w\x84\x10\xaf\xf5)7\x1a\x8d\xa6\xdc\x98\x99\xa7\xa7\xa7\xb3\x10\xa2^XX\x98k\xae\xe7\xd1{\xc8g\x84W\xa9\x81\xa7o4\xa7\x8e\x1db\xc1\xdci\xa4\xa4\xa4\xd0\xbaukBBBB^\x1d+11\x91\xabW\xafZ\xce\x9d;wr\xe9\xd2\xa5\x87\xe3\xe3\xe3/\x02\x8f%I2\t!<\x81\x02:\x9d\xaeH\xa1B\x85\x8a4k\xd6,4$$\xc4G\b!_\xbbv\xed\xf9\xe6\xcd\x9b\xf7X\xad\xd6\xfd\x7f\xc5@\xfe\xb1\xcb(\x9b\xcd\xe6\x02\x15\xc3\xc3\x0fV\xad\xde\xa0\xf0\xaa\xf3\x89\b\x83ge\xe9\xf1\xe1\xd0<kXR*\x7f\xb6\xf5\xa6\x8c\xc1\x13\xb4\x86\xd7\x07Hz\x1a/YS\x96\xe5\xbe\xe9qqq\x1bw\xee\xdc\xf9\xf1\xe8\xd1\xa3\xab\xc8\xb2L\x87\x0e\x1d|f\xcf\x9e\xbde\xf4\xe8\xd1U\x84\x10&\xf5\xe6\xa3\xfd\xa2a\xb5>X,Hn.\xa0\xaa\xa8\x19YH\xae.HB U(\xd6M\x7f\xf7\xf97f\xb39\x16I2\t\x8b\xcd\x19\xa1:b1\x92\x8cd\xd0\x87\x9aL\xa6\xfc@\xa4\x1a\x1d\xffT\xa8\xaa#-W\xafs\x14\xf6\xd9U$\x17C\x88\xaf\xaf\xaf\x94\x91\x91\x11mON{\x86\xb3S\x98\xe4\xa4G\x8d\xcdpl\xf0)\xe9\xa0\xd5 ;;\xb1\xafT\x11\x9a\xdc}\x8cN\x92\b\xbf\x9a\xc0>\x97\x17hK\x05\xa3\xa6e:\x94\x88\xabs\x1e\xe3\xaeH\xcbd\x96\xf9\n\x96\x8b.\xa0{i\x05\x0bC\b\xc3\xbc\xc3\xb8\x1dy\x8d#I\xcf\x91\x8b\x85"r\xeaMdWg\xd4\x07\x11\x7f\x97\xc7JN\xce\\`?\x7f\xb3\xe3\xeb\xc1\x9e\xff\xbb4k\xd6\xec\xa3\x86\r\x1b\xba\xe6x",[\xb6l\xe5\xd4\xa9S\xbf\xea\xd4\xa9S\xad\x9e={\xb6\xacP\xa1\x82\x14\x19\x19\xc9\xfa\r\x1bY\xbb\xe3\x04#>\xe8\x85_`!\xb6\xae\x9a\xca\xce\xfd\xa7\x99}\xe0\x06\xae\x8aL\xfb\x16\xb5\x99\xb1t\x97#\x04%\x04\xef-\xd8\xcf\x8du\xa3i\xd5\xa46_,\xf8\x96-W_\xbc\xf4\x04R\x8c\xdc\x7f\xf2\x82\x93g\xae\xd0\xa6i-\x12\x93\xd3Yp\xf86\0\xbe\xde\xeeD\xc5$\xe0\xe2b\xe0\xf2\xedgy\xbfI0\xdbqv\xd2sy\xe3\xa7\xc4\xc4\xc4c\xb6\xda\xd8\x7f\xf8<\x0b\x0e\xdf\xa6\xfe\xe9\xdbL\xfc\xa8=\xcbN=b\xf6\xc9\x04f\x1f^I\x8f\n\x9etk\xdf\x98:u\xea\x90\x9b\xe8\xe1\xe2\xe2\xe2\x9d\x99\x99\xe9\x06\xa4\xff\xb7\xadAWWW)33\xb3\\~\x89&\xad\xb5\x9a\xca\x054r\xd8\xf1\xcc\f\xf7c\xf0\b\x98\x04\xfc\xfc?\xb6\xe7\xdc\x191b\x84\xdb\xe3\xc7\x8f\x17\xacZ\xb5\xaa\xd7\xab\xc7233\xd3s\x15H``\xa0\xe2\xef\xef\xdf\xbb@\x81\x02\x18\x8dFV\xad\xd9\xc0\xedl/F\xd4,\xcb\xcf\x97.3\xe2\x93!h\xb5Z\xbc\xbd\xbd\xf1\xf6\xf6\xce\xf5Zx\xf0\xe0\x01\xc7\x8e\x1d\xbb=u\xea\xd4\x95111[\x80\xd7\\\x88\x9c$\x8ed\xe0\x89\xc5b9}\xef\xde=\xee\xdd\xbb\xf7\xfb\xc4\x12\xff\x17\x95\x86\xc1`\x90t:]\x93\x0f?\xfcp\xd3\xbau\xeb\xa2N\x9f>\x1dq\xfc\xd8\xb1\xc2K\x17\xcf\xa2C\t=\xb8\xfa\xba\xe6X\xc39\0\xb9\xd6\x1f\xbd\xdb/[\xc9\x1aS!\xe2\xcc\x88W\xad\b\x8b\xc5\xa2.^\xbc\xf8\xab\xc4D\xc7G\x8a\xa2\xd0\xb3g\xcf2\xa5J\x95\x1a\x02 \xdb\xc5>\xdb\xad\x87\xb7\xc8)\x10T3\xb2\x90\xbd=\xc1h\x02\x93\x19m\xad\x8a\x8d\xcc\xf9\xbc\xbf\xd0\xeb\xf5\x16\xf5\xd1\xf3\xef\xb1\xdb\x91]]@\xa3q4Z\x92eE\xf2u\xef\xe7\xc0\xdb\xccI\b\xc0lu\x04\xd1U\x01\x02do\x8f\xe2III\x1ef\xb3Y\xb5\xdf\x8f\xf8ArvBdd\x81\xb3\x13X\xed\x0e\n\x14!\x10Y&\x8e\x84\x97\xe4\xb0\x93\x1e\x01<s\x0b\xc6\xfe"\x04\xf3\x91\xe7`\xb7;\x02\xfb\x19Y\xa0\xd3\xa2\xe6R\x95\xb8\xbb\xd0\xb5b\0\xca+,i\xbd\xaa\x84\xd2\xa9}K\xea\x94\xaa\xcc\xd1\x0f>C\x17\x11\x93\x1bX\0E\x01\x9d.\xf2\xef\xcd\x87\xddn\xb7a\xb2~"I\xd2\xf9\x7f\xd7\x1ck4\x1a\xa5k\xd7\xae\x9ds\xb1cEQ\x18<xp\x91\xbbw\xef\xce\x9c3gN+\xadV+}>i:EZ\x8e\xe2\xbd\x15\xe7\xa8Z\xb5:\xd9&;\x1d\xa7\xef\xa0\xdb\xd8\xd5\xb4mV\x8b\x0f\x1a\x94\xe0\xbb\xd9\xefq\xee\xe7[|\x7f\xff%\xd1\xa9M\b\xd2R\xd3\x19?\xe3k\x9a\xd6\x0fg\xdf\xe4\xee\xb8\xe4<\x90NU\x0bb\xca\xcab\xea\x9e\xcb\xf4\x1a\xbb\x8a\xee\xed\x1bR3\xbf;E\xdc\xf4T*_\x9c\x81S\xbee\xea\x92\xed|:\xb43~z\x87}V=\xc8\r\x8b\xd5\xca\x83G\xcfx\x16\x19K\xa3Qk\xf2\x94\xce\xc9g)\xb8\x1a^\xa6\xfd\xd6/Z\x80O>\x1e\x82_P(#&\xcc`\xfb\xf6\x1dddd\xd0\xae]\xbb\x82+W\xae\xbc\x14\x16\x166,\'\xeb\xe6?^dY\xd6\xf9I\f\x18k7_=\xe8\xe9|\xed\x88\xaf\xfb\xac\x96\xce\xba\x8e\tv5\xed\x94]\x1d\'\xcbr\xbb\xff5\xe5\x01\x0e\xfa\x9b\x17/^\x9c\xef\xd2\xa5K\x17 \xe4\x8d\xcd=9#\xc3\x81l\xe5\xcf\x9f\x9f\xea\xd5\xab\xb7\xf5\xf0\xf0`\xdfw\xfb\xa9S\xb7\x1e\xc7\x96\x7f\x82\x9f\xb7;EC|(T\xa8\xd0\x9b0&\xb3g\xcf\xfe\xb9\\\xb9rm\x86\r\x1bV.&&f\xc9\x9b\xca\xe3\x0f\x9f\xe3\xff\xb5\xc9\x93$\xa9\xe8\xe8\xd1\xa3O\\\xbdz\xf5\x87\xc5\x8b\x17w\xeb\xd2\xa5K`\x9d:u$Y\x96\xd9\xbcy\x0b\xfb\xeed\x81\xa2\x07Y\x1b\xf6\x12k1m%#\xee\x97|0IO\xaf\xe94l~\xf3\xe3\xa8\xa8\xa83\x91\x91\x91y\xd6t@@\0#F\x8c\xf8XQ\x14\x8d\xaa\xaa\x16\xfb\xa1\xf3\xbd\xec\xcfcRE\xb6\xc9\xc1\x0f\x95\x94\xea\xa8\xe4\xce\xa9P\xd76\xab=\xc1\\\xac\xc0\x1a\xf5\xc2\xed\xa9jjF\xa6\x9a\x96\xe9 Vt\xd2#\xb9\xbb"W(\xf1\x89$I\xbeXl)\0\x92^\x8b0\x9a\x1d\n\xc4I\x87\xec\xedn\xc0\xc7}\0\x80\xb8\xf5d\x99=!\xc5\xaaff#\xbb\x18\x1c\xa9\xba\x92c,\x84\x8a\xb0\xda\x18\xd6\xa2.\xbb\x84\x84W\x8f\x96\x04\xbb\xbb\xd2\xa4d-67\x1fD\xb9H\x1b"!\x05\xecv\xc7\xf5\t\x81\x9a\x94J\x9d\xaa\xa5\xf9q\xc9\x07\xec\x9d\xd4\x8d\xe3s\xfb\xd3\xbf\xdb\xbb\x8c\x99\xf1-^\x1en\xd4\xa9S\x87\x8f\x8aWq\\\x0b8 5\xb39\xee7L\xcd\xf9\xb7a\xc2\xff\xaa\xd8\xed\xf6\xca\x15*Txsq\xf2\xfc\xf9sF\x8f\xfb\x1b\xe5{\xcd`\xda\x91\x18l\xae\xfe\x94\xf6v\xa1S\xab\xba\xac\xd9~\x1a\x80\'\x19f\xe6\xaf\xde\xc7\xdc\xcf\x07\x93?\xc8\x9f\x82\xc1\x014-\xf2\x92\x98\xce[\xab\xa0J2k\x7f|H\xd3\t\xeb\x89\x8c\x8ag\xf9\xd0\x96\x94\xf0t\xe2\xfd\xde\xcdY\xf6\xed\x11\0\xee\xa5\x998t\xfc"\xa3\xdek\xc6\xc6Y\x03\xd9\xb6\xf7$\x8f3\xcc|w7\x8ek7\xee3\xa2}U\xde\xafW\x8c\xc5\x9f\xf7e\xd5\xb7\x07i>a=\xee\xee\xae\x8ci^.\xef\\\xa1.:\x82\x83\xf3q\xee\xcb\xf79\xbdh0S\x86ub\xd9\xda\xfdL\xfbr7=\xbau\xa2\xf3\x9c\xc34i?\x84\x1f\x7f\xfc\x89\xde\xbd{\x17\xbdx\xf1\xe2\x82u\xeb\xd6\xdd\x0b\f\f\xec\xee\xe9\xe9\xf9\x1fK\x86j\x80\xe6S\xf5\xca\xcdC>n\xab\xfb\xb8;\x97\xb7"\xec\xb3R\xb3\xb6\xb6L\xcd\xae\xb2\xd0l{\xc7\x06\xbb\xdf\x92\x15\xf4?#\'O\x9e\xbcW\xb8pa\xad\x9f\x9f\xdf;o\x1cJ\xc8-\x0bpuue\xf0\xe0\xc1\xda\x94\x94\x14\xce\x9c\xbf\x81\x8b\xab\x1b\xc3\xa6|\xc3\x07\xa3f\xd0\xa6u\xab\xbc\x1fddd\xb0~\xfd\xfa\xa8j\xd5\xaa\xf5\x9c8qbu\x8b\xc5\xb2\xef\x9f\xa5\xd6\xf9K\x81\xfc6\xd7\xb1\xd6\xd6\xad[\xcfO\x9c8\xb1^\xa9R\xa5\xc8\xcdv\x10B0c\xd6\x02z->\x85\xc5\xc9\x034:\xd0z\xe4\xa9www\xf7hLi\xaf\xb7\x86\xb4Y \xe6\xfa\xc67\xd3+s\xc47%%E\b!\xb0X\x1ck\xa0q\xe3\xc6\x85\x9a7o>!\xe7\x84\xd7l[\x0e7\xb2\xdd}r\xdd\xf6\xe0\x99ccN\xcd\0\xad\x83\xc6]\xd2h\xd0\xbdS\xbd\xaf\\\xbd\xcc4\xdb\xee\xe3\x1f\x88\xcc,+\x16\xab#@\xae\xd3\xa2)W\xd4\x9b\xb0\xa0\x11\b\x11\x97cn#2\xb3\x91\\\x9c\x1cmf\xcdV4\xcdjOB\x96j\x03\xb7l\x07\x7f\x1c)Lf\x9b\x9a\x98\x82\xb0\xd9\x1d\xb5\x1a\xd9F$o\x0f\x90%\xac\xb2\xcc\xf8\xd6\r\xa8W\xa7\n\x87V\fcD\xbf\xe6\x1c;{\x8fK\xb1\xfe\xbc\x17T\x05,V\x87\x82\x12\x02\x91\x98\xca\x87\xcb\x8fp\xea\xecu\xaaW.\xcb\xc8\xb9\xdb\xa9?b5\'"\x92\xf1\xf5q\xb8\xd1\xe1%\xca8\xd0(%\x87\x82^\xa3q\xfa\xa3\xe7\xbaO\x9f>\x83K\x94(\x91\xb7\x81\xc6\xc6\xc6\xb2q\xe3F\x9eE\xc5\xd3\xa6}G\x8e.\x1d\xc5\xa7m\xc2\x99\xd5\xa3\x16\xdfL\x1f\xc0\xb7;\x8er,\xe2e\xfc\xfe\xd4\xbdX\xce^\xbeM\xd5>39s\xf1.\x93\x86wab\xdbJH\xc0\xf2\x91m9\x7f\xe9\x16\x96\x1c%9\xe2\xabc\x94.Y\x88og\rb\xcb\x9e\x93\x1cx\xf0\xd2\xe8\xbb\xf1(\x86\x96\xef\xd6\xe2\xcc\x85\x9b\xcc9\xf8\xb2I\xdc\x9d\x87\x91|<\xa0\x03\x1d[\xd6a\xc2\x9cM|\xf5\xd3c\x040o\xcd\x01\x9a4p8\xbfZIb\xf1\xe8\x0e<~\xfa\x82\xd8\x84\x14Z\x8cXE\xdd\xe1\xabX{\xe1)\xfb\xee\xc6"\xc9\n\xae:=\xe72=i>q\x1b\xfd\x07\x8f ::\x9a\x9e={\xe6;y\xf2\xe4\xc6\xee\xdd\xbbo\x03\xfc\xff\xd3\xbc\x8e\xb6\x1ay\xf9w^.\xfb\xfb\xb8;\x17KSU1-%s\x7f\x9bTc\xa5uV{W\x01\x97\xff\f\x01\xd7\xf8\xf8\xf8\x04\x83\xc1@\xe5\xca\x95+\xbey(===oOi\xd4\xa8\x11\xe7\xce\x9d\xa3J\x95\xaa89\xe9\xf9\xe9Y"\x9f\x0e\xed\x84\x97\x97W\x9e\xd71l\xd8\xb0\x8d}\xfb\xf6-\x97\x94\x94\xb4\xf1?Eq\xfc\xcf)\x10I\x92\x8ao\xd8\xb0a_\xc7\x8e\x1d\xbd\xdf\xccP\x10Bp\xf0\xf4\xad\x97=\xca%\x19\xfc\x8a\xd4\xf5\xf6\xf6\x96\xc0\x91=\x85\xdd\xfazv\x901E`\xcf>\xf8\x96\x13\xd5\xa2h\xb3#=G,\x96\xc3\xebv&\x7f\xa5\x0e\xec\xda\xb5\x9b\xe0\xe0`z\xf6\xec\xf9\x19\xb2\xae{\xceI\xaf\xc8\xc7/W\xb2m?Z\xd7\xb2b\xe7$\xdb\xb5\xfb\x07\xac\xa7.%\xa9\xe9\x99\x88\xacl\x84\xd5\x86\xb6z\xb9\x96\x92\xab\xc1\xdf\xba\xf9P{\xdb\x83g\xa9\x92^\xeb [\xb4\xdaP*\x95\xea\x07<\x17f\x8b\x8a\xcdA\xf3.\xb9\x18r 1\x0f$OW\x17\xb9F\xd9\xfdHRS\x11\x95\xb8\xc4\xfa\xd5\x9e\xea\xd6\x1f\xaf\xaeW\x13S2\xd4\xd8\x04$g\x03"9\xdd\xe1\xd5\xe8u\xd8|=\xd9\xb0c\x17\xcf"cyw\xfc:\x96\x9dt\xb0\x1fdX\xdd\xa8\x96\xae!\'W\x18\x9c\xf4L\xeeQ\x9f:5\xcaq\xf7\xc1S\xf4\xb9o\x88\xcdLP\x90\xa3\xd0.$8\x18a\xcf!\x81\xcc6\xa1T*\xd5J\xa3\xd1(\x7f\xd4\\k4\x9a*\xfd\xfb\xf7\xef\xa9\xd3\xe9\xb0Z\xad\xec\xfb\xee;\xea\xb6\x1dJX\xf1\xf2t\x9c\xbc\x93\x06#V3t\xfaf\xeaU/\xcb\xc7\x03:\xa2\xaa*\x9d[\xd7c\xff\x94\xee\xd4\x0fq,\xcc\xba\xc5\x03\xb0\x99\xcd\xa4ZU\x16\x1f\xbdC\xdb\x91+i\xd5\xb4&\xfb\xbf\xe8\x89\x10\x82Q\xebN\xbf\x84$T\x81\xc5jC\b(U\xb4\0\x9aWR\xbe\x1bU+\xc1\x9a\x8d\xfb)S<\x94M\xa3\xdb\xe6q\x0e\x94,\x12\xccw\x87\x7f\xc2\xcd\xd5\x992\x85_\x16(>M\xc8\xc4\xd7\xd7\x8b\xb5\x9f\xb4\xe0\xf4\x92\x0f\x88\x8eI\xa4\xee\xb0\x95\xa8v;#\xdaTz\xcb\xeb\x96\xf3\x1f\xad\x81\xd0\xe2\x15\x89OJc\xd1\xe2\xa5\x04\x04\x040g\xce\x9c\x8e\x1b7n\xbc\x91/_\xbe\x81y\xd42\xff\x7f\x95\x87\xb6\xaf"m\xfd\xc2\xd3eHA\xad"m\xcd4F\xb6H\xcej\xb7\xcb\xc3\xbb\xb5\x80\xeb\xfc\x89D\x92$IQ\x14\xea\xd4\xa9\x13\xf6\xea\xe7\x8a\xa2\xa4\xa4\xa5\xa5\xe5eA\xe8t:\xbe?t\x9a\xbe\x8b\x7f 3#\x93\x92NY4j\xd8\xc0a\x84\xdc\xb9#z\xf7\xee=v\xfb\xf6\xed\xbd\xde\x96\xbd\xe8\xe3\xe3\xf3\xff\xdd\x03\xfd\x9f\b\xa2k4\x1a\xe5\xf3\xcf?\xff\xa6]\xbbv\xde\xaa\xaa\x12\x11\x11Add\xa4HKK\xb3h\xb5Z\x9d\x93\x93\x93t?]\x86W;\xce\xba\xfaWN~q\xbe\0\x90\x8b\xdf\xbf\x9e\xdabLKP\x14\xe5~n\xc0+\xf7<6\xbf\n\xf3\xf0)\xa8\x8fE"\xd6\x06\xb8B\xb7/v\xb00>\x9e\x1f\xcf\xdf\xd4R\xb0\xeer\xe9\xe9\xb1\xddB\bcN\xaf\xef3\xa8\xea\x19\xf5\xec\r\x14E\xd1X\xcf\xdf\xaa\x80\x93\xae\xb9\\\xa3lW\xd9\xcf\xab\xa4\\\xad\xdcp\xf1\xfd\x8fa\xf6\xc3\xe7[c\xb6\x1e\xd3T,\xaeut\xf93\x04\0\x065:\xfe\x96\\4\xb4\x9c\xe4\xe9\xe6\xe8[\x1e\xe8\x8b\x9a\x9e\xe5\x80\xc2jV\xf0P\x8b\x86\xee\xb5\xee9>\x84\xd4\xaco\xd4+\xf7\xfb\x88\xab\x0f>\x16\x8a\xfc\x9e\xe8\xd0p\xb2\xa6h\xa8\xbb\xb0X\xc1nG\x98TvDF\xd3O\x92\xf8\xbc]e\xa6\xecv\xb4\xd1\xdct%\x12%#\x1d\xa5\x96\x16\xc9\xe0\x84\xaf\x93\x13\x85B\xf3\xd1e\xecW|\xd0\xba2\xefw\xa9\xcb\xf9\x05\xfb\x91-Y\xe4\xe6\x9c\x97*U\x8aF\xaa\x81c\xe9Y\xa0\xd5\xa0)W\xb4\xaa\xe5\xe1\xb3\x89D\xc4N\xfa\x03\x16f\x91\xe5\xcb\x97\xef\xa8Y\xb3\xa66::\x9aYs\x17\xb3\xf8t<h\xfd0Y\xec\b\x04\x02\xb8\x9d\x9cM\xebO\xd7sb\x89+-\x86\xad \xd5fg`\xed\xa2\xcc\xfd\xb4\x17\x9f\xce\xd9\xc4\xe0\x9e\xef\xb2i\xf7\xa9\xbcqcM6\xae\xdf|H\xedj\xe5HN\xcb\xe4\xab\x8f\x9b\xf1\xe1\xd2\x1f0\xa9\x82\x82.:T\xbbJ\xad\x8f\x97\xb1\xf2\xe3\xe6l\x18\xd3\x8en\xb3v\xd1\xb9|~*\x94-F\xf3a\xcbI\xb6\xd8\xd93\xa9\x1b\x9f\xb5\xad\xc4\x85\x9b\xcf\xa8T\xa18\xad\x87-\xc7C\xafa\xc3\xac\x81\x1c\xfa\xf9\twS\x8d\fnS\x85\x90|\xfe\xdc}\xf0\x8c\x1e\xe3\xbf\xe2I\x86\xe3\xb5\xfbb\xe5\x01\xe6\x8d\xed\n\xbb\x1c\xf3\xd2\xadb0\x15\xcb\x14\xe1\x87\x05\x831\x19M\xe8\x9d\xf4\xa4\xa6f\x90mQI1\x1bh\xdb\xfdcfO\xfa\x98n\xdd\xba\x05\xd4\xad[w\xd5\xf9\xf3\xe7\xa7?}\xfa\xf4g\xab\xd5j\xf3\xf0\xf0\xf0\x97$I\x8e\x8f\x8f\x8f^\xb9r\xe5\xc1\xf8\xf8\xf8o\xfe\b\xb8\xa8\x85\xc4\x9cO<\x9c\xdb\n`fJ\xd6\x8156\xb5\xb7\x80\xa4\xec\x84\x04\xfel\x12\x14\x14\x14\xe4\xee\xee\x8e\xbb\xbb{\xe0\x1b{\x95j4\x1a\x13\x80P\x80\xcc\xccLj\xd5\xacB\xf3V\xf9pqu\xe1\xe3\x9e\r\xf1\xf1\xf1A\b\xc1\xcc\x993o\x9c={\xf6\x9e\xa2(]\xfd\xfc\xfc\x02\xf3\xe7\xcf\x9f\xaf^\xbdz\xf9\x0b\x17.\x1c\xa0\xd7\xeb}\x9c\x9c\x9c\x9c,\x16\x8b5..\xee\xf9\xfa\xf5\xeb\xcf?x\xf0`\x9f\x8f\x8f\xcf\x8d\xa4\xa4$\xf1\x97\x02\xf9\'\xc4\xcf\xcf\xafk\xbbv\xedj\x1c?~\xdc\xb4m\xdb\xb6\xedk\xd7\xae\xddf\xb7\xdb/\xe8t\xba$\x8b_\xc5K\xf8\x15\xab\x88\xc1\xfb\xf5\x1f\xb9\xfai\xd0\xb8t\xc6\x965\xef\xad\xde\x981\xf5\x9a\xddn\xb7\xbd\x86j\xe1\xf4>\x81%\xab\xbd\xd9\x87\xcb\xe2\xe4\xc9\x07\xebn\xe4\x80\xf3\x96TI\x92lo\xa3\xa8\xc9\x19\xef\x12&\xcb%\xf9\xcc\xf5i6\x85\x8f\xa4\x82\xf9\xe7\nU-\x0e\x9cQ/\xdc\\G\xd9"\x03\x84*\xc0\xaeJ\x80\xde~\xfc\xe7\xc9Jh\xbe\xed")M\x96\fz\x07\x8b\xaep\xd0d\x88,#\x92\xab\xb3N\xdb\xb6\xe1j\xeb\xb6\xc3\x99d\x9b\xb7\x0b!\xd2\xb1\xd9\x17\xca\xdb\x8f\xea\xd5\x0f:\xcf\x94^\xe1\xd7\x91\xdc%\xfaL\xde\xc4\xea\xf1\x9d8S\xbf2\t\x89\xc9\xb88\x1b0\x99\x8ctX9\t98\x80$E\xa2\xd7\xf4\xcd\xe0\xe4\xc6\xf4\xed\x178\xba\xf8}\xda\x95\t\xe2\xf9\xc3D\x82\x82\x82\0pqqat\xa7>\xe2\x87\xc1\xbd\x7f\x90K\x16\xaa)i4\x1e\xda\xe6u>\xb7l>\xf8\x82\x94\xcc\xdf\x8d\xb6D\xab\xd5\xd6\\\xb3f\xcd\x8e\xae]\xbb\x06]\xbcx\x91\xf7\xc7.\xe4\x9a\xd9\xdba\x9d\xbb\xe8p\xd2)\x18\xed/\x9f\xbbI\x15\xa4\xa7g\x12\xea\xebJrL\x1a+\xcf<\xc4d\xb1\xb1l\xda\x10\xce\xfd|\x93\xf5\x17\x9e\xbe6~\xb6\xd1\xcc\xce\xefO\xf3\xc5\xf6\x0b,\x1a\xdc\x98\x1d\x93{\xd0\xf6\xf3\x8d,\x1e\xd3\x91\xc3\'\x7f\xc6\xa2\n\xde[\xf4=\'\xe6\x0fd\xed\xb0\x96\x94(V\x90\x89\xf3\xb6\x90dq\x18\x19\x93\x97}\xc7\xb7s?\xa0M3\x13s\x96\xef$\xc6d#\xc6d\xe3\xdc\xcf\xb7\x18\xd8\xa6\nQq\xc94\xaa\x13N\xa3\xde_\xf0\xe5\xc4\xde\xd4-\x9d\x8f\'\xe7\x1d\xd7\xf0,\xd5\x88@\xc6O\xaf\xf0Q\xabJ4\x7f\xa7:GO_"=#\x8bY\xdf\x9e"6-\x9b4\x9bJ\xe5\0Wf\x8f\xee\xca\x94\xddW\xa81h\x11\x8b\x06\xd6\xa6_\xdf\xdet\xec\xd8\xd1\x17h\xf6\xe63\x1b<xp\x9b\xf9\xf3\xe7\xb7Y\xb8pa\xab\xdf\x93\xc4\xd1\x03\x9a}\xec\xee\xf4\xb1^\x92\xf8"%k\xdbfU\xf4\x14BX\xf9\x93Jxxx\xa8F\xa3\xc1\xcf\xcf\xcf_\xa7\xd3\xc9\xb9P\xb8\xd9lV\x13\x1d\x198\xa1\xe0 T\x8c\x8cM# (\x84\xf0\xbe399\xafO\xae\xa1\xc4\x92%K\xcaO\x9f>}\xafF\xa3\xc9\xa3\xd1\xc9\x85\xe5\xdf\x902\xc3\x87\x0fo~\xfb\xf6\xed\xc9\x87\x0f\x1f\xfei\xf2\xe4\xc9\x9f[\xad\xd6\x13\x7fAX\xbfA\\\\\\$\x7f\x7f\xff\x8f\xa7M\x9b\xb6\xbaI\x93&E\xd7\xacY\xd3\xdbn\xb7\xef\x07\x12,\x16\x8b\x8a\xcd\x12\x8d\x93\x9b\x03\xb6zMu\xea!\xa8B\xdf\xdc\xc6A\xbcl\xb4\x02B\x85\xe4\x887{6\x94$\xac\xee\f\xf4\xbf\x92\0c3C\xc2\xa3t\x9e\xff\xd4_U\xd5\x7f\xb8pl6\x9b\x1d\xb3m\x91\xb8\xffl\x03`\x02\x10\xd9\xe6\x95jz\x96\x10\x16+(\x8a\n$`\xb4\xec\xb2\xac\xdd\xd7\xcb\x1e\x19\xf3HM\xc9@df;\xe2\x0f\xc2Q\xb9\x8e\x10H\xceN\x8a\xa6E\xed\xa5\x92$y\xe6\x8e_]\x92\xf25z\xf2\x82\x1cm\x03\xaa\n\x8aD\x9c\xd9J\xbf\xe9\xdb\x90e\x89R%\n\xb1p\xdd!:L\xd9\x86=Z\x81l\x13\x92V\x83\xec\xf6\x02\x84J\xa6]e\xea\xe2\xed\x8c\xfd\xa0\x03\xfd\xbb\xbeCvv6\xd7\xae]\xc3j\xb5\xa2\xd1hT\xf1\xf0E_\xb1\xffG?\xdb\xae\xe3\xef\xd8\x1f>\xbf\xa1iPu\x9e$I\x86\xdfc\x9e\xf3\xe5\xcb\xd7i\xff\xfe\xfdG\xbau\xeb\x16\xb4k\xd7n\xea\x0eY\xcc5\x8bO\x1e\xc63\x7fx[\x8e\x9f\xb9\xfa\x8b\xdf99\xe9IL\xcb\xce\xfb{\xc3\xc5\xa7\bU% \xd0\x8f\xe3\xf3\x07\xf1\xc3\x8c>4+\xea\b\xa0\x97)\x19\xc6\xc9\x9f\x1fbV\x05C\x96\x1f\x06\x04g\x96|@Bb\n\x93s<\x03\x01<x\xf4\x9cf\xef\xd4\xe4\xda\xcd\x07\x9cz\xfa\x92\xd1\xe6Qr6\x9e\x1e\xee\x1c8z\x81\xad\xd7\xa2^FM\x13Si\xdf\xb2>\rkU`\xd0\xc4\xaf\xb9\x12\x97\xc9\xe4\x85\xdb\xe8\xd5\xb1a\xdew\xfa7*MXp\0;g\xf5\',8\x80\xbe\xe3W\xd3c\xfavJ\x15+HZ\x96\x894\x9b\x03\xfa\xbe\x91\x90\x85\xc8\xb9g\xd5\xe0\xc9\xc7\xeb\xae2\xfe\xf3iDDD\xbc\xf5\xb9\xa5\xa7\xa7\x13\x1c\x1c\xdc\xc4f\xb35\xfd\x1d\xbdB\xc38g\xdd\xe2\xd2:\xad\xbc=\xd3xo\x93]}\xef\xb7\xac\x81\xffe)S\xa6L\xa8$I\x18\f\x06?\x9b\xcd\xf6\x9a\xa1n2\x99\xf2\\\xb2\x88\x88\b\x1a7\xa8\x89\x8f\xb7\'u\xf3i(Z\xb4\xc8K\xa5\xec\xe1A\x81\x02\x05\b\f\f\xc4\xc3\xc3\xe3\x17\xcaC\b\x91\xc7\xbb\xe6\xec\xecL\x95*U\xa4\t\x13&\xd4>w\xee\xdc\xd1n\xdd\xba-\x93$\xe9w\x8fM\xfe\xd7{ \xd9\xd9\xd9\x9e\xd7\xaf_\x1fq\xfd\xfa\xf5\xb3o\xfdB\xc2\xed\xcd\x04\x95n\x81\x93\xfb/\x8fy\xe6/m\x8e<[\xd3\xcb\xcb\xeb\xa7\x14E\xeb\xfe\x9a2\xb0\xa4\xdc{e\x81\xb8\x8a\xa0*[\xf0\x0eq\xfd\xc5\x18YI\x82\xa4\'g\x88\xbd\xbe\x07\xd5\xb2\x15(\xf6O\xde\xc2,\x1c\xf9\xf0H\x92tK$\xa5Z%o\x0f\x9d\xb0\xdaL\xb2,\xc7\xa9\xaa\n\xd9\xe6M\x9a\x83\xe7\xb7\x98\xcd\xe6\xb2h\x95\xdarx\x89\xbar\x91\x90\xa6\xb2\x9b\xb3\xbb\xe4\xe1\x86H\xcbD\xf6t\xf7\xb3)r3l\xf6\xcd\0u\xb4J\xa1\xa7\xe9\x999d\x8e\x80,\xa3\xd3(|\xda\xae\x12\xcd\xde\xa9\xc1\x91\x93?S\xacp\x01\x8a\x16\xf0\xe6\xe0\xbdX\x10\x85\xb0\xfe|\x0f9D {\xca\x88{7\x11\xdee9\xfb4\x89\'O\x9eQ\xaad1\xe6\xce\x9d{f\xda\xb4i#\xd7\xaf_\xbf\xd3l6\xdb\xb4ZmbNP\xef\x98\xfd\xc8\x85.R\xc9\xd0+\x80\x160\xfe\x9b\x17\xe3\x90\xaf\xbf\xfe\xfa\xcb\xf2\xe5\xcb+[\xb6l%(\xa4\b\xc7W\x8es\xd0\xb5\xe4xd\xfe\x01\xbe\xa8\xaa\x9d\x1d\x9f\x86p\xe5\xe6#f\x7fw\x8df%\xfcQU\x95\xc8\xec\x97{\x99\x82DlB2\x8dG}\x85\x04\xf4\xa8\x1c\xca\x17\xa3\xbaS\xff\xccU\xcc\x16+G\x9f\xbcT\b\x17/\xdf\xa5o\xb7f\b\xc2\x18\xd1\xa4\f\xf3\x0f\xdd\x02\xc0\xdb\xd3\x8dIs\xd7\x11^:\x8c\xeff\xf4\xa1\xd5\xf8u\x98UA\xb7\x9a\x85\xb9z\xe3\x1e\xb5\xaa\x94f\n\x82\xcf\xb7;\n\t\xc3\xcb\x17#.!\x99\x91swp/\xcd\x91\xecw\xe8Q"\x9f\xeb\xb4\xc8\x92\xc4\xa0:E\xe9\xda\xae\x01\xa9\xa9\xe9\xcc\\\xb6\xfb\xb5 }tl\x02\r\xcb\xe4g\xd3%G]I\x83B>\x88W\x1c\xe3>5\x8b2\xec\x93\x1e4\xeb6\x82\xe5\xd3\x86P\xaf^\xbd<~\xb7\xabW\xaf\xaa\x8d\x1a5\xea\x91\x9a\x9az\xc8\x01\xb6\xfe>R\b\x066w\xd6\x17yj\xb51\xdbh\x1d\' \xeb\xcf\xac<\x9c\x9c\x9cd\x7f\x7f\xff`\0\x7f\x7f\x7f\x9d\xaa\xaa\xf9\x81<w7222U\b\x81$I\xa4\xa6\xa6\xb1\xe7\xc4\x11B\x02\xbd\xe8\xd3\xbe6\xfe\xfe\xbf\x9e\x13a4\x1a\xb9}\xfb\xb6\xb8w\xef\xde\xf3\x87\x0f\x1f^=}\xfat\x94\xd1h\xb4\x87\x87\x87\xfb\x94-[\xb6hHHH\x99\xc2\x85\x0b;\x97.]Z^\xb2d\xc9\xfb\xc1\xc1\xc1\xc5\xe6\xcc\x99\xd36\xa7y\xdb_\n\xe4m"\x84H\x01\xce\xfe\xea\r\xca\xea\x16[\xe4\xe5v\x14\xac\xde\xe1\x17E\x82\xce\xde\x12\xde\xc5?\xca\xccx|\x16o\xbdW\xde\xe7V#\b\xfb\x83\x9c\x97A29\x15XF\xbe\xb2\xe5^\xf3b\x84\x80\xa4\'\xa9<>6\xd0\xd7\xc7sg\xa2j\x11\xde\xde\xde\x92\xab\xab\xeb\xee\xa8\xa8\xa8\xf7\xedv\xfb\x95\xdfx\x0b\xf7_\t\xb0Y\x91\xe5l\xec\xaa\x0eD\xa6\xa2(\xf6\\\xe6\x83\x1c\xea\x8a\xebX\xed\xd7\xd5\x0b\xb7\x97\x8a\x8bw\xfc\xd4j\xa57h\xca\x15k"\x19\xf4\b\xa3\n\xce\xba\xfc\xa4\x1bQ\x14ES^\xa7\xa9\xe2\x9b\x98\xc2NI\x05t\x06\xbd\0\0 \0IDAT\xca\xf3@\xf4\xcez\xf2\x05x2q\xde\x16\x8e<I\xa2i\xd1\'L\x1c\xda\x89\x8d\xa7\xef\x93d\x01\xe1\\\x16\xbfT\x1b\xab\xc6\xb7G\xb5\x9a\xb1\xda\x04\xf9\x0b\x16\xe5\xc4\x89\x13\x94(T\x93U\xabV\xad\x06~\x1e3f\xcc\x06\x93\xc9t\xe9\x8d\x8c\x90\xfb\xe2\xee\xb39\x9e\x9e\x9e\x19\xa9\xa9\xa9\xff\xf4<*\x8a\xa2\xb1\xdb\xed\xd5qt0\xccK\x0b.^\xbc\xf8\x80\xf5\xeb\xd7/-Q\xa2\x84<c\xe6\\\x9a\xb5l\xcd\x825\xdf\xb3\xf5\xcasd\t\x867-\xc7\xa7\x9f\xf4\xe0\xf8\x8f\x979\xf6\xd3M\xb2LVZ\xd4\xaf\xc0\xb1\x06U\xf0\xf6t#5=\x8bs\x8b\x07\x13\x15\x9b\xc4\xc6}?\xe1b\xd0\x91\x9e\x9e\x95\xe7M|{\xe9\x19\xaa\xd8\xc3\xfc\xbf\r\xa2\xdf\xe8%\xaf\xc32\xee.\xec?t\x96\xaf\xf6^\xe0\xcb\x89=\xd1k5\x1c\xfd\xf9\x11\x05\n\x04\xb2\xf1\xc7],?y\x9f\xb5\x9f\xb4`Z\xcf\xda\xec;q\x93\x01\xdd\x9b1n\xd6\xb7\xdc\x8cNg\xdf\x82!,\xd8s\x89!M\xcb\xe1\xe1\xe1\xc6\xce\xfd\xa7\x99?\xba\x13\xcd?\xdb\xe0\b\x80\xea\x14B\xf2\x07pr\xe1`222\x19:e-a\x81\x9e\f\xed\xdb\x8c\x03\x13\xd6\xbf\xdc\x8c\xf4:\xd2\xb2\x1cq\x92\xa2\xeez\xa6\x8e\xea\x86\x8f\xb7\'\xe7\x96\f\xc1j\x17X,V\xae\xdfzH\xcf\x8e\xcdi4\xfc+V|\xf8\x84>\xbd{\xa2\xd3\xe9HHH0\xa7\xa4\xa4\x9c\x01Rr\xfe\xfd.\xde\xc7Pg\xed(?E\xe6H\xb6\xf9\xa1Q\xa3\xd9\x9f\x9b\xf4\xf1g\x15\x9b\xcd&\xb9\xb8\xb8\xf8\x01\x04\x06\x06\xcaZ\xad\xb6\xac\xd5j\xcdS qqq\xd9\0\x16\x8b\x85\x83\xc7/\xf2\xf1\x87\x03\xb1\xd9U"\x1f\xdf\xe6UJ\xf7W<\x16\x8e\x1f?\x9e\xb9z\xf5\xea5{\xf6\xec\xf9\xc6\xc5\xc5\xe5\xc6\xab\f\xe1\x17.\\\xc8\x9b\x0b\xa0z\xf5\xea\xd5\x9b\xf4\xef\xdf\xbfM\xa3F\x8d\x1a\xdd\xbau\xeb\x9bc\xc7\x8eu\xf9\xbd\xa8o4\x7f\x82\xc9\xb4\xcb)\xf7\xbb\xab6\xcbj\n\xd7\xee\xfdj\x855\x92\f\xfe\xc5\xdaY\x93\xef\x15GV^\x06I\xac&\x15x\x06`\x12nc)X\xbd\x17\x9aW\x92\\T;\xc4\xde\x89\xe0\xf9\x8f\xad@\xdc\xca-*\x04\x185j\x94sff\xe6\x8a\xcf?\xff\xbc\xc6?\x8b9\xbb\xbb\xbb\xabi\xd9\xa6\xbb\xb2\x8fg\r5:\xc5\xcbf\xb5\xfa\xf1+t\xccB\x88\x04q\xfeV?\xbbN\xfbX)_\xdc ,V0ZS\x014v{\xb9`\xad\xe2\xef\x94\x90\x8c0\x9a\x91<\\\xc1b%\xd3b\xe5\xa7\x9for$\xc7\xca\xfe\xe1a"U\x8f_\xe4\xc0\xc2\xf7y\xfc4\x12I\x92(\x18\x9a\x9f\xc7O\xa3\b\t.\xc8\xc89\xdb\xb8\x19}\x84\x81U\xddHII\xb1&$$\x1c\x06\x88\x8f\x8f\x9f\xa2\xaa\xaa\xf9-J`\xea\xbf\xc2\xb8+IR\xe8\x8c\x193\xf6\xa9\xaaZh\xfc\xf8\xf1A\xb9n\xb9\xbf\xbf\x7f\xabo\xbe\xf9fY\x89\x12%\xe4i3\xe60\xed\x87H\x14\xd7+4\xaeY\x9a-W\x9ec\x170\xf7\xe0\r\n\x87\xf8c\xb6\xd8Xq\xca\xd1\xfbi\xc3\x85\xa7|\xd1\xa9\x1a\x1dZ\xd5c\xe9\xba\x03\xfct?\x96\x16\x95\xc3\x18=\xb8-\x9e\x1enLY\xb8\x05\x8d\x04\xb6\x9c+\xddr\xe59\x13S\xd3\x18=\xa0%#\x85`\xe2\x82\x1d\\\x89\xcb\xa0F\xd5\xb2\x8c\x9a\xf1-7\x92\xb2yo\xe2:6\xcf\x1dL\xdb\x16\xb5Y\xb7\xe50\xe99\x90\xd2\x8cu\xc7\xd8\xbfl\x04ukT\xe0\xcb\xaf\xf7q\xec\xa9#Y&66\x91\xdd\xb3\xfac\xb3\xd9\x184i\x03\x8f2\xcc\xb4h\\\x8d\xd2\xde\xce\xdcI\xcef\xd1\xd0\x96df\x9b\x18\xf0\xf9Z\x1e\xe4x%\xe7\xa2\xd2\x19\xdc\xcb\x80"I\xd8\x85\xa0~\xa8\x17\x15\xca\x16gho\x85\x91\x1a\x05\xbd\x93\x13;\xbe;M\x87\x96u\xe97q-\xb1\x99\x16Rm*5\xf2{0uX\x07\xd4m\x17\x18\xb4\xf2,\x8f\x9f<c\xfc\xd8\x11\xd4\xabW\xcf\xb0h\xd1\xa2\xa3\xc3\x86\rk\x93\xd3#\xfb\xdf.\x81\x88\xeeu\f\xfa`\xa3\x10l2Y\xb7\xd8T\xf1\xa7o\x96%\x84\x90s\xe1\xa3\xa0\xa0 \x1a7n\xdc\xe0\xc0\x81\x03\xfb\xf2\xb6\x17\xabU\x15B\x10\x15\x15\xc5\xc6\x0b\xd1\x8c\x1fc`\xd0\xf8\x95\xbc\xdf\xa1\xfc/\xc6z\xfe\xfc9\xf3\xe7\xcf\xffn\xd1\xa2E\x1f\x92\x93\xf0\xf3k\xad\x9f\x85\x10F\xe0\xc4\xb9s\xe7N\xdc\xb8qc|vvveY\x96\xfb\xd9\xed\xf6\x16\xc0w\x7f\xc5@\xfeEQU\xd5\xa2dF\xf4\xe7\xd9\xc5=\xd8\xdf\x80f\xdd\x03u\xb8\x85\xceC\xe3\xa4{E\x81\x98dY\x8eC\xd6w\xa3H\xbd\xa9\xaf\xc1_\xaa\r\xa2\xae\xdf\xe6\xf9\x99: n\xbd:Tff\xa6\x14\x10\x10\xe0\xd1\xa9S\xa7*\xae\xae\xae\xad\xfe\xd9\xebLNN\x16\xf6\x93\x97\'\xab\t\xc96\xc9\xd9\xa0\x95\xfc=\xe7\xfd\x83\xf4\xd8\x18\x91\x94v\x04\xab\xcd\xd1\x9e6G_u\xd0*]\xf3k\x14\xa9\xbc\xa2\xd0\xff\xd6CDr\xba#\x14b\xd0S\xa9t>\x06\xd7)\x8a\x84\xa3\x0eA\b\xf0\xf4p#\x7f\x90\x1fWo>\xa6\xf3\x98\xd5\xf4\x99\xb7\x07\xadF\x831\xdb\x8c\xc9j\xa6E\xd3\x06\xdc\xbau\xeb\xaa\xa7\xa7g|\xce\xf3|+\x19\xd3\x9bI\x07\xbfE<==\xa5q\xe3\xc6\xad\xfa\xe4\x93O\xca\x95+W\x8e\x1c\b\fI\x92\xca\xacZ\xb5jCxx\xb8v\xe6\xec\xf9L\xfb\xe1\x05(:\xce\xdc\x88\xc0\xd7\xd7\xf3\xb51\xd6\x1f\xb8L\x99\x12\x05_\xfbl\xf2\x8e\x8b$\xa6\xa4\xb3\xf3Z$\x91Y\x16V\x9c\xbaO\xab\x91\xab\xd0i5\f{\xaf\x05\xc7\x16\ff\xdb\xf8\x0e\x04\xe85\x18d\x89\xc4\x94\f\x1a\x8e^\xc3\xd6\xbd\xa7\x99\xffiO6M\xe8\xc4\x8d\xdb\x8f8\x1b\xe5`\x0ey\x94aF\xb5Zy\x1c\x11\xcd\xf2S/\xf7b\xa3\xc5\x8e\xab\x9b3O"\xa2\xd8r\xe9%}\x89V\xab\xe0\xe1\xee\xca\xfbS7\xf1(\'\xd3*..\x89\x91=\x1bpb\xde\0\x14Ea\xeb\x9e\xe3L\xfb\xb0\xe5+\x9a\xd4QQ\xdf\xb4d \x8b\xfb7`\xce\x84^\xc4\xc6\'\xb1\xe7\xe8%>\x9a\xb9\x95\xbaC\x971\xeb\xfb\xeb\xdc\x7f\x18A\xab\x9a\xc5H\xcdQb/\x92\xb3\xd0\xe4Z\xae\x1a=F\xd9\x87\xcd\xdbv\x90\x94\x94\xc4\x07\x1f|Pb\xf3\xe6\xcd?\xe9\xf5\xfa\xba\xffv\xebS\xa3Q>r\xd2\x8e\bTd"\xacvqE\x15\xfb\xdfb\x1c\xb8\x01U\x80|\x7f\x16\x05"I\x92j\xb7\xdb3\xc0\x91\xa6\xdb\xa3G\x8fN\xaf\xc6\x06\xbd\xbd\xbd\x9d$I\xe2\xfe\xfd\x07\x1c[>\x1aU@\x961\x9b|A\xaf\xf7\xa3\xb9{\xf7\xae\x180`\xc0\x94\xe5\xcb\x97\xb7\xe5e\xb6\xe8o\x92\xac\xac,!\x84\xf8\xd9n\xb7\x7f\xa0\xd5j\xbf\xff\xbd\xee\xf5O\xd3\xd2\xd6n\xb7\xdb\xa4\xe4{\x03I|\xf2\xbaE/k \xa4J3\xf4\xae/\x9f\x85\xdd\x1a\xa7\n\xb99\xc5\x9a|\x8d\x9b\xbf\xf2\x9a\xf2xq\xed:\xd1\x17\x1a\x01/\xde<\x87\xd5ju\xf3\xf2\xf2\n\xcc!Z\xec\xfd/]\xa8\xd5v\xc8\xf6\xc3\xd9\xb6\xf6;\x8fo\xe1\xed\xd1\xcdf\xb3\xad\xfd{9\xfe\xea\xbd\x88%j|\x92*9\xe9\x90+\x16k%\xcb\xb2\xbe\xb1\x93\xb6\x9b\x06\xd0J0\xfa\xd13>\xff\xe1G\xd4\x84d$\xad\x86\rg\x8f\xd1\xbaI5\xee\xac\x1f\xc3\xc9EC(W\xaa C\'\x7f\x8d]\x85\xd9\x07o\x12\x99e\xc1.`\xcf\x81\x1f\x99?\xa63\xfe\xb6T\x8a\x15+\xca\xbau\xeb\xbe\xff=\xfay\xa4\xa6\xa6\x067k\xd6\xac\x91N\xa7\xa3v\xed\xda\xae3f\xcc8Z\xb9r\xe5\xf9\xdb\xb6m;\xde\xb4iS\x8f\x85\x8b\x972e\x7fD^\rO\x95\x12\xf9IM\xcd\xc8\xddos\x1e\x99\x8a\xf2F\x80\xd1&\x04V\x9b\x1do\xed\xcb\xcf\x93,v\xce\x9c\xbf\xce\xdeC\xe7h0|%\x0f\x9fD\xb1qjo>hR\x96\xd88\x87\x17\xb9\xfa\xa7G\xdc\x7f\xf8\x8c\xd2\xc5\xc3\xd8\xb4\xff\xe2\xebc\xaa\xa0H\x12;&v\xc9\xab\xcf\xf8\xa4S\r\xf6\x1d<CRJ:\x9b&tr\\c\x80+^^\x1e\xec\xd8w\x8a\xaf\xa7\xf4\xc5Eq\\\x83\x9b\xab3u\xaa\x97g\xfeW\xdf\xd1m\xd6.\xa6\xef\xbeD`\x80/r\xce`\x1f5,I\xe9\xe2a\xbc\xdf\xb5!\x92$\xd1y\xe4\n>\x9f\xb7\x89\x8eM\xabs\')\x8b\xdc\x04\xb3\x94\xf4,\xdc]_\xe6\xa4\xf7mZ\x9e\xf4L#\xd5\x82\xbdY\xd0\xb7\x1e=;\xbe\x8b\xb3G>V}\xb3\x89\'O\x9e\xd0\xb9sg\xdf\xbd{\xf7\x1e\xf4\xf3\xf3k\xfd\xef\x9c;\x17\x9b\xadM}g})\x80\xfbV[\x9c\xa2(W^\xd9Xj\xf6\xd5*\xbb\xcbHD\0\xb5\x15E\x89\xff\x13AX\xf6\xcb\x97/_\xcc\xf5\xa4\x1b6l\x98?<<\xfc\xa3\xdc\xe3E\x8b:\xb26RRS\xb8\xf7\xf09\'\x7f\xbc\xc2\xe0\x8e\xb5\xf0\xf3\xf3{\xcd\xf3\x18:t\xe8\x94#G\x8e\xfc\xedW\x8a\x99\x7f\xfb\x96\xf2;\x16\x1f\xfe\xa9z\xa2\x0b!\x12y~n\n\x967\\@7\x7f^\xf32,Y\xbe\x14o\xb1\x15\xcf\x02N\xaf\xc1VQ\xd7o\x11\xfds\x93\xbc\n\xf1_Zd5\xc2\xc2\xc2\xb4\x92$Q\xb5j\xd5\xda\xffrq\x9d\xd5\xfe\xbdkTr9\xee?wW\x14\xa5\xdf\xafY\xfc\x0ee\xa7\x1e\xb5\x1d9?T\x8d\x8a7\xcb!A\xad\x85\xb7\xdb\x89P\xadR \x0fC\x97$z[\xad\fv\rAMI\xe7\x9a\x9aA\x9bO\xd7\x92\x98\x92N\xad\xa1\xcb\xe94}\'\x87\x1f\xc4\xa1Qd\xda\x97\t\xca\x1bv\xd6\xf7\xd7INMg\xe6\xd0\x96\xc4\xc5\xc5\xa9W\xae\\\xd9\xf1\xbb`\xa8\x1aM\xa5\xb0\xb00\x05\xc0\xcd\xcd\x8d\xb1c\xc7\x86_\xbcxqx\x87\x0e\x1d\xfc6o\xd9\x86w@AN.\xfa\x80\x93\xf3\x07\xb2\xe6\xe3f4kX\x85\xfc\xf9\xfc9\xb3h\b\xc7\xe7\x0f\xe4\xcc\xc2\xc1\x8c\xee\xf3\x0e>>\x9e\x9cY4\x983\x0b\x07\xf3\xe3\xa2!|9\xb0\x11Z\x8d\x92\x075\xe5JF\x96\x11\x83A\x8f*\xe0\xd3\xad\xe7\xc9\xca\xcc\xe6\xbd\xee\xcd\x99\xf7\xcd\xa1\xbc\xef\xdc\xb9\xff\x8c\xe4\x944f\x8d\xed\xce\x8cn5\x01\x18P\xab0\xd9F\x13]f\xeeD\xd8\xedLl[\x99\xa1\x8dJR\xa3r\x19&\xae9\xc6\x87\xab\x8e\xe2\xe1\xee\xca\xe8\xe6\xe5Y:\xa9/k\xb7\x1cf\xda\xbe+<z\xfa\x82\x89]\xaaS\xc1\xd7\x19\x0fOw\x9e<\x8b"\xc0\xc7\x91\xc9gQ\x05f\xab\x9d0w=\x8b\xdek@\xcf\x0e\x8d8v\xfag\xce_\xb9\xc7\xc7_\x1d\xe7i\xa6\x85\xfd\xf7\xe2\x91\x15\x05\x9d\xfc2u\xbc\\\xc9B\\\xb8\xf1\x14W\x8d\xcc\xdf\xdaW\xa1o\x97\xa6\x98\xcd&&\x0ej\x8e^\xa7\xa5\xfd\xc8\x15\xc4%\xa6a\xf0\xccO\xf3^\x9fq\xe5\xca\x15\x9a4i\xe2\xbc{\xf7\xee\xedaaa\xfd\xfe\x1d\xf3\xa6(\x8a\xe6\x13\'\xed\xc4\x82\x1a\x05\x158o\xb6\x1d\xcb\xf5@KK\xd2\xc0\xed\x1e\x86\xd3\xa5\xb5J\x95;\xaah\x02,\xf8W\xbc\xd3\xfffY\xbcx\xf1\xbck\xd7\xae\xa99q\x10\xe6\xcc\x993\xd9`0\xd47\x18\fR@@@\xe1\xf4\xf4t\xb6\xec;K\xf1\xa2\xa1\x94)Y\x88\x94\xe4D|}}\xf3b\x1es\xe7\xce\xddw\xfa\xf4\xe9)\xff\xe9\xf7\xf9\xa7R \0\x92j\\KJd\xd4\xdf\xfdR\x81\x8anx\xe6\x7fi\xf5\x0b\x15bn=&\xeaB3\x10\xbf\xca\xfb4x\xf0\xe0\x01\xb9\x9d\xc5\xbc\xbc\xbc\xbc\xedv\xfb\xbfLz\x97\x91\x91!\x84\x10\x99\xbfi\xe1e\x18\x97\xda\xf6\x9e\xaah?}yN\xf7\xcc\xec\n\xc7\x8d\x16L\xaf\xd4\xa1\xdc\xb5A\x9b\x9e\xfd\xf1\x88\xb6 \t\x15[V2\x16\x8b\x95Fa9\f\x9f\xc0\xec\x15{\x18\xf7QG\xbe\xe8\\\x8dZ\x05}X\xf4^\x03\xf2\xf9{P\xbaTIN\x9e<y\xd6\xc3\xc3\xe3\xee\xbf\xb8\xd1h\x01\x7fI\x92\\\xdev\xdc\xc7\xc7\'\xd0`0\xbc\t\x01p\xe0\xc0A\x8a\x14+\x8e\xa4\xe8\xe87i\x03=?]K|R\x1a\xc5\x8b\x84r\xf6\xd2\x1d\x1a\x0f_I\x83\x11\xab\x192e=\x05\x83\x03x\x1e\x15O\xa7\xb1k\xa83l%-G\xad\xc6\xcd\xd5\x99\xb0\x90 \x0e\xcd\x19\xc0\xe9\x05\x03Y7\xac%\x15}](\x1a\x96\x9f\x1b\xf7^:\x8fWn>B\xa8v\x16|\xd6\x879\xbdj\x03\x10\x12\x1c\xc0\x8f\x17o\xd1d\xd8\njV-\xcd\xd4\xae5\x18\xd2\xab9S\xbf\xdc\x05\b\xa6|\xb9\x8d\x10\x7f=\xe1E=\x196b2\xc9q\x11`\xce\xe0\xf4\xf9\xebtl^\x8d\xa9s\xd7\xb0\xea\xc8%\xb0\x99Y\xb5\xf3\'\xea\xd7\xaa\xc8\x8a)\xfd\xd8\xb4\xeb8kw\x9c\xa0u\xe3\xaa\0T\rt\xa3R\xd9\xa2|;\xed=t:\r\xad\x86\xaf`\xe5\xd6\x13\xd4\xaeR*\xef\xfat\xb2\x84F\x91\xb1\x0bp\xd7\xc8\xac\x1f\xd1\x9a\xd0\x90|\x8c}\xbf\x1d\xdf\xcf\x1dH\xb1B\xf9\x88\x8c\x8eg\xde\xda#\xb4\x9c\xf8-\x1f\xac:\xca\x8bl+\xc5\x0b\xe5\xe7\xfe\xe3h\x1e\xcb~4\x1e0\x8bS\xa7NQ\xabV-\xdd\xbe}\xfb\xd6t\xe8\xd0a\x89$I>\xff\x97u\x14\xa2\xaa\x03Z\xb9\xe8+H@\xac\xcd\xcen\xab=\x17c\x0f\x19\xe7\xa6_`\x12\xc286\xdb\xd2\xc4\x0e\x97\xfe\x8cq\x90\x8c\x8c\x8c\xa3\xd3\xa7O_\x1c\x17\xe7\xd8.\xea\xd7\xafo\xd8\xbd{\xf7~OO\xcfa\xc1\xc1\xc1a7n\xdc\xa0N\xcd*\x04\x06\xf8\xa0Qd\xd6l9\x8c\xa7\xa7\x03\x9a=|\xf80\x1b6l\x88\xf1\xf3\xf3\x9b\xe2\xef\xef\xff7\x83\xc1\xf0!\xd0\xf8\xd54\xfd\xff\x14\xf9\xd35\x94\x12B\x18\x89\xbe\xf15\xbe\x85\'\xe6Q\x9b\xfc\x12\xc4|\xf5\x17\x10w/\x9a\xc8\x9f\x9a\xbd\x05\xb6\xf2\xc3\xb3\xc8t\xbcB\x1a\xeaS\x1e\x9d\xef\xd7\xaf_\xbb7hT\xfeH\xaa\x81\xbb!)\x99G\x86y\xbb\x8c\xf2UdN\x99,T\xd7\xeb\xb0"\x98\xed[\x9b\x01I\x19\xf4\xad\xd9\x8c\x85\x97w#kc\xd9\xb0e\x0fS\x86w\x86\x05\xdb8\xfe4\x99\xd4,3\xe9\xe9Y\f\xe9\xd3\x86\nen\xf3\xf4Y4\xd3\xe7,g\xdd\x8a\x19\xacY\xb3f\xcf?\xd9\xbb\xa1BEY\xea\xd8A\xafy\'Z\x15e\xd7\xda\x89\xcb\x16b\xad$I_\xbeI\xc9`\xb7\xdb\xedo\x16]^\xbdz\x95\xee\x9f\xad\xa3m\xdd\xcatkS\x87\xa791\x84\xf1\x9b\xce\x12\x97\x90J\xc3Z\xe51\xa9\x0eb\xdf\xdb\xc9F\xfa|\xfa\r_M\xe9C\xac\xc9\xa1kS\xadv\xfa.\xf8\x8e\xd3\x05\xf31m\xc5^\xeeE\xa5\xd0\xb7I\x05VO\xeb\x8f\xa7\x87;\xcd\xeb\x95\xa3B\x89`6\x1e\xb9\x8e\x9f\x8f\x07{\x0e\xfe\xc8\x9c\x1d\x17Y\xfbi\x17\xbe\x1c\xf8\x0eU+\x95\xa4\xdb\xc8e\x18\x93^\xb0c\xfc\xdf(/epk\xf6hze\x19)\xae\x1a\xe8\xac\xc9 \xf8\xea&\\e\x89\xc6@\xa6*xj\xb3\xb3\xff\x8b\xfd\xa4\xcf\xb42Q\x82\xd1B\x10o\x87\x1f3\xcb\x92\x91\xd6\x8c5\xdbN\xb1\xe5j\x14\xc5<\r|\xec\xe9F\xfdP/\xa6\x8d\xea\xca\x8e\xfd\'\xc9\x1f\xe0\xc3\xfb+\x1c\x04\x8d\xf1iF\x9c\xf4/\xc3q\x8b\x075\xa6x\xe1`\x8e\xcd\x1f\x88V\xa3p\xf9\xfa}\xa2c\x13\xe96~\r/r\xd2\x93\xb7\x8dkOx\xb1@\xceE9X\xf5\xdf\t\xf3\xc6\xd7\xd7\x8bM9\x85\x92\xa9N~\x9c\xb9x\x07\x93\xc9D\x93&M\xa4\xaf\xbf\xfe\xfa\xa3~\xfd\xfa\xf5\xbdx\xf1\xe2\x89m\xdb\xb6\xdd\x89\x8c\x8c\x8c\xcd\xce\xce~\x04\x9c\xfd-\r\xbf$(5\xc9U?+\x7f\x8e\x83}\xd3bK\xcf\x94\xa4\x1f\x10\x82&\x8a<,\\\xafu\xf9$9k\x81\n\xb7\xff\x03\xe3\x13n\x1a\x8d\xa6\xad^\xaf\x0f\xc8\xca\xca\xfaI\bq\xee\xf7:\xd7\xae]\xbb\xc6\x84\x86\x86\x96\x982eJSggg\x9a4i\xe2r\xfa\xf4\xe9\xf9\x9e\x9e\x9e\xac\xfbv\x0b\xed\xdbw\xa0\xfb\'\x8b\x987\xa1\x07\x8dk\x14\xcbk\x12U\xaf^=\xe2\xe2\xe2\x06k4\x1a\x84\x10\xa4\xa7\xa7\x93\x98\x98\xc8\xe3\xc7\x8fMG\x8e\x1c9\xb8p\xe1\xc2\xb9\xaa\xaa\x9e\xfd\x8fx\x9e\xfc9\xa5\b%\xdb\xde\xc3#\xdf?\x86\x98R\xa3\xe0\xde\xde\xd9\xc0M\x90\xdc\x91do\x9c\x03\x02\xf1\f.\x85\x8bO\r<\xf2;\x01,\xeb\x17\xce\x90!\x83\xf3r\xf0w\xee\xdc\x99\xd4\xb5k\xd7\x80\xdf\xb3\xfa\xf7\x8d\x85\xe1\xb4\xd8Y{\xa5\x83\xab\xa1$\x80\x1d\xb8j\xb62\xc9\xab:W\x02JP\xc9\xdf\x95e\x93\xfb\xb1t\xf5f\xbe\xfd\xe9$\x1e\x16=_\xcd\x19G\x9d\x1a\x95\xb8~\xf7\t\x1a\t\xbe?r\x81\xd6Mk\xd2l\xe4*\xb2,\x16v\x8cmJxxE\n\x15*\xd4\x148\xf4\x1b\xdc\xd9:#\xf4\x9a)\r\r\xbaz>\x8a,\x9d0Z\x1e\xce5Z\xa6&K\xf2\x96_\xa3\xd2(P\xa0\xc0G7n\xdcX\x92K\x1e\x17\x15\x15E\xdb^\xa3\xb8d\xf4F\x91$\xce,\x1eB\xcd\x8f\x97\xbf<\x87\x04\'\x17\f\xa1\xd1\x88\x95X\xd5\x97\x8a\xe7\xe8\xdc\x81t\x18\xb7&\xaf\xe0\x0e`\xd5\x07M\x88\x8aM\xca+\x02lS*\x90Y\x13\xfa\xb2}\xdf\t\xfc}=)W\xaa0^\x9e\xeet\x1d\xbe\x84k\tY\xb8\xa9&v\xcd\xec\xc3\x99\xd3\xe7\t\\\xb4\x80\xdaJ\x16\xbe\xca\xebN\xfa\x81l3\xcd\x9d\x7f\x19\x92\x12\xc0\xf7\xd9fZ\xbeqL\0+3,\x84i4\xd8%\x99\xb8\x02\xc5\xf1\x1c\xd4\x87b\xe5*\xb2\xe5\xbbs\xac9\xfb\x98\xd3\x0b\x07\xf1\xfe\x94o\xb9\x9d\x9c\xcd\xb2A\xefP5\xbc\x04\x8f\x9e\xbc\xa0@\x81@bb\x13\t\n\xf2\xa7\xe9\xf0\x15d\xe6\xdc\xdb\xb6q\xed9}\xe16_\x9epd\x80\x1f\x9b\xd3\x9f\t\x0bwp1*\x8d\xf7\xeb\x17gp\xef\x96\xf8y{\xf0\xe0\xe9\x0b\x9c4\x12\x16U\xe2yd\f\x92\xb0`Pl\xb4m\xdb&\xef=UU\x95\xcc\xccL\x92\x92\x92\xb8w\xef\x9eq\xed\xda\xb5+v\xec\xd81\xee\xefP\x9f\x14\x9f\xe9\xac;\xd8\xc3\xcd\x10\xa6\0&!\x18\x99\x9c\xb9b\xb7M}_\x92$\xa7\xe5.\xbag%t\x1a\xff\xfa\xc9Y\xb5\x81\x9f\xfe\xc3\x94G\xc9e\xcb\x96\x1dh\xdd\xbauAwww\xae]\xbb&:u\xea\xb40++k\xe4\xef\xd5g^\x92$\xff\xad[\xb7\xde\xec\xd4\xa9S^\x81GLL\f{\xbf?\x8aMv\xa1|\xe9"\xf8z{p\xfa\xc4Q\x06\x0f\xea\xff\x0f\xc7SU\x95K\x97.\xa9\x0b\x16,X\xb6m\xdb\xb6Q\x7f\x17\xde\xfe\xcb\x03\xf9}\xc4\xd3\xd3\xf3qjF\xdce<\xf2U\xfd\x87_v\x0f\x84\xf0>c\x1c\xbb\x97\x02\x8a.\xc7Cy]\xf7\xee>x\x9e\x06\r\xeaS\xa2D\t\x84\x10\\\xbbv\xed\xc2\x1f\xa5<\0Z\xc8\xd2\xa8w\x9c\x9dJ\xe6AG@Q\xad\x86\xa7\xae\x0e\\\xf5J|&7\xef<f\xde\x17#\xe8{\xaf\x1d\x1aE\xe1\xee\x83\xa7\xdc\xb8\xfb\x94\xc6\xa3^\xb2\x8f\xd4\xaeZ\x8a\xfe\xf5K\xb0\xe7\x87\x13\xd4\xaf_\x8f\xd8\xd8X\x80\x8c\x7f\x10\xc7P\x1a\x0bu\xc6\xc7nN#\xcb\xe8\xb5\xf2Y\xa39{\\\xbaq\xdaM\xc1|!0!~=\x86\x17\x16\x16\x16\xea\xe6\xe6@\xfa\xb2\xb2\xb2\xf8\xf4o\xb3\xb8j\xf4B+\x81U\br\xcbXr\x9d\x14U\x80\xd5n\xc7S#\x93`y\xf9x\x15Y\xc2.\xfe\x8e#\t\xec\xbd\x13\xcb\xb0\xf8d\x16\xee\xfe\x99$\xab\x8a\x8b"\xb1wF?J\xf8+4\xbax\x8a\xfa\xe6\b<;m#\x9f\xd9Jk\x17\xa7_ \xbc\x02r\x98\xb6x\xab\x02y\xdbb\xb2\bAaE\xd0\xd8\x903V\xe2}\xcc\xd3\xc6s\xc6\xa2\xb0)\xf8]p\xf1!66\x91\x06\xe5C\xe8\x11\xe8E\xb92E\xd0\xeb\xf5DD%0q\xe5\x0f<L3qj\xde\0\n\xb8\xe9\xb9\x97b\xcc\x83\xf8T!\x90\x80\x19\xddkQ\xa6d!\xe6\x8e\xe9\x86\x9a\xd3\xc7d\xe8\xa45L\x1f\xdd\x9d\xcec\xd7\xe0\xaaU\x887\xd9\xc8\xb4\xab\x9c[2\x84\x1e\xc3\x17b\xb6X\xe8\xdc\xa9#\xb2,#\xcb29\x9cM\x84\x85\x85\x19*U\xaa4\\UU\xfb\x8e\x1d;F\xbfy/^\xd0i\x8e\x9b~\xe5\xbb\xceN^\xb9\x96\xd7\x19\xa3%c\xb7M\x9d\t\xe0$D\x93\xf2z\xad\xff#\xab\xcd(I\xd2\xb5\xb7\xd1\xf9\xfc\x7f\xc3\xeae\xb9\xee\x9a5k6\xf5\xea\xd5+\xbf\xa2(\xd8l6\x0e\x1c8\xf0Sll\xec\x16\x8dF#\xe7\xd8\\\xbf\x07\xe2\x11?o\xde\xbc\x15\xcd\x9b7\xff<\xb7U\xf1\x89\x93\xa7qv\xf7a\xe2\xaa#\x9c\xfc\xba&;\xbf;J\x857\xb2\bs%\xb7U\xad\xc5b\xc1\xdd\xdd\x9d\xa0\xa0 \xaaV\xad*/^\xbc\xf8#__\xdf\xc0\x15+Vt\xfd#\xf7\x99\xbf\x14\b\x90\x9a\x9a*0=:M\xfe\xf2U\x7fAq\xf2\x8b7Oy\xad;\xdf\xaf\xc9\x91\x04\x17\xde\xe96\x96\x9b\xc7\xd7\x92\x9d\x9d\xcd\x9a5k\xb6\xfeQ\xf7\xa3\x85\xe2\r\x9c4\xe3=\xe4\xd7w\xcc\x04\x8d\x8e\xc3\xeb\'\x92\x96eC\xa7U\x88\x89\x89\xe7\xc9\xd3H\x1a\x8e\\\x9d\xb7\xc1\x9e^8\x04\'Y\xc2\x94c\xcd\xcf\xfb\xfa\x07\xe6\x8c\xefA\xd90\x17|||\xc8)\nt\xfe{\xe7\xaf\'\xd4)_x9\x8f\xf6\x93\x156e\x18\x9fL\xc8\xb6tP\xe1\xda?\xban///\xa9}\xfb\xf6\xb55\x1a\r\xaa\xaa\xb2c\xe7.\xfa\xf4\xedM\x7f\x9d\x1eE\x02\x81\x84\xc1``\xe7\xa7\x9d\xf0\xf1\xf1B\xa3\xc8\xa4gd\xe1\xe1\xe6\xc2\xa7=\xeaP\xbeT!dY\xe2\xc6\xdd\xa7x\xb8\xbb\xb0rx+\xf2\x05\xf9\x81\x80k\xb7\x1eR04\x1f[\x0f^z\x9bU\xe8PX6;\xb3\x07\x8eaB\xf2e\x8a\xc9@N\x03\xa8\xeb\x96\xb7\x87\x9d\xd2T\x15\x9f\x9cl/\x15HW\x05f\xa1\x92\xae\nRTA\xaa\xaar\xdfj\xc3M\x92p\x96e<d\x89\xcbf+\x15\xf5\xafC\xa5zI\xa2\x91^e\xf0\xe3\x83\xe4w\xf6\xe1\xe9A\x99\xfaM\x9b`\xb4\xcat\x1a\xf3\x15\x9d\xeb\x14\xa7J\xf9"<\xcc\xa9\x0fQ4\x1a\xb2\xcc\x8ek\ns\xd5Q\xbel1<\xbd\xbd\xe8\xd2\xa6\x01\xf1\tI<\x8e\x88\xa2\xd3\x98\xaf\x885\xbf\xbcn\x93\xd9\x8a*\xe0I\xd6KG\xc2j\x17\x985\xaet\x9f\xb5\x1f\xab\xc5B\x8f\x1e\xdd_\xa3\xc7x\xf1\xe2\x05\xd7\xaf_\xcf\xf4\xf7\xf7\xef\xad\xd1h\xc6\xe5nL\x92$\x19Z\xc8\xd2\xec\xe1\xee\x86\x0fK\xea4y/\xd9S\xabML\xcd4\x8f&\xa7f\xaa\x8bV\xe9\x1a\xacQ\xf8\xd1hy\xe2\xe6\xe6\x96\x9d\x9e\xfe\xff\xafy\xa2F\xa3Ql6[\xa5\x82\x05\x0b6\xfe\xf0\xc3\x0f\x9b\xd6\xaf_\xbff\xa5J\x95\xe4\xdc\xb9OIIa\xd9\xb2ek\x81\x8b\xb6\xdf\xb9\xf0\xf1\xc2\x85\x0b?\xc5\xc7\xc7\x13\x16\x16Frr2kv\x9c`\xcd\xc2Il-R\x10\xa3\xc9\xc4\xa9s\xd7h\xd7\xb4\xc6k\xbf\x89\x8d\x8de\xf7\xee\xdd\xf7\xe6\xce\x9d\xfb\xf5\x93\'O.\0\x99\x92$\x05U\xa9R\xa5\xd6\x90!C\xba4l\xd8\xb0\xd0\xd8\xb1c;^\xbati\xf8\xf9\xf3\xe7\xe7\xfe\xa5@\xfeh\xb1\xa4Gb\xb7\xf2Z\x81\xe0\xffQ\xa2mz\xccf3qqq"&&\xe6\x0f\xe9{ \xcb\xb2\xee\x0b\'\xcd7\x85\xb5\x8as\x96\x10\xb8\xbcbv_\xa9\xdd\x94\xe0\xa8D\xfa\xcd\xdcI\x96]\xe0\xa6H\xec\x9d;\xf0\x15\xeb\b\xa2c\xe2\x99\xd8\xb9z^o\xef\x92\x05\xfd\x88z\xfe\x94\x96-\x1c\xbc|nnn8;;\x07fgg\xbf\xf5\xfc.\xf0\xceH7\xa7qA\x8a\xc2\xa6\f\xe3\xb3\xf1\xd9\x96\xfa\xe27\xe6\xac\xa7\xa4\xa4\x94\xaa^\xbdz\x15\x87Uv\x12\xff\xa0\x10\xee<\x8c\xe4\xa3UG\x1d8\xa3\x9b\x9e\x8d3\x07\x90\x9aa\xa4\xd7\x8c\x9d\x98TA\xc7\n\x05\x986\xa6\'!\x05\x02\x183\x7f\x07V\xbb\xca\x90\xf65\t\xc9\xe7\xcf\xde\x83?1v\xe9\x01\\\xf4\n\xa3{6 \xbclq>\xfd\xa8\x03\x9f\x01\x0f\x1e=c\xf1\xd6\x1f\xd1i\x15\x12\xb3\xb3)\x98\x16M\xf1\x94\b\xe6J/\xf2\x94B\x1eL\xf0\xc6u\x9a\x85 \xda\xae\xf2\x93\xd1\xa2\xa6\xa9\xe2\xf1I\x93\xf5\xf6\x19\xab\xfd\xf13U\xbcH\x81T\x01Q@&`%\xcb\xe2\x04\xe4\xf3\x86\xe0\x92\x8a\\\xc2K\xa2t\'\x83([X\xab\xb8\x06k4hs\xa6\'\xd1\xae\xd2Hg\xa7\x92\x92\f{6\x90\xb2k\x1d\'ln\xa4\xe5\xaf\xc9\x95\x87\x1e\xbcS\xa7\x02\0\x13\xdbV\xc2\xc3\xc3\x95\xaeu\x8a\xe1\xef\xe7E\xdd\x9a\x15HI\xcd\xa0\xdb\xa7\xdf\x90fS\xb1\xaa\x82\x03\xd3z\x11\xe2\xe7F\xec\x8b\x94<\x98O\xabU\xc8\xb4\xbf\xbc\x93Bnz\x14E&\xdadC\xe8\xdd\x18\xbc\xf8(\x1a\xad\x96.\x9d;!\xcb2\xa9\xa9\xa9\f\x1a4h\xd1\xa1C\x87F\xab\xaaZXvh\x16;Pt\xac^\xd9\xdc\xcb\xcdP\xc9\xeb\x95\xe7\x14kW\x99\x99f\\\x1a\xeb\xea\xba\x8a\x8c\f$I\xf2id\xd0\xb6\x92\x80\'6\xf5Nzv\xfa\xef\xe6~H\x92d\x90$\xa9\xbb\xaa\xaa\xd9\xf0z\xc37I\x92<\xca\x96-;d\xd8\xb0a\x83\xc3\xc3\xc3\x0b\x16)RD\xca\xb5\xfc_\x15\x1f\x1f\x1f\xa6O\x9f>v\xe8\xd0\xa1f\xbb\xdd~&W\t\xbeE\x02<==\xbb\x85\x86\x86\xe6\xbfy\xf3\xe6IUU\xff\x95\x9a\x8a\xb4\xccL\x07\x9b\xc8\xe1\xc3\x87\xf9b\xdc\x07\x80\xe0\xb3\xb9\x9b\xa9Y\xae ]\x9aW\xa6@\x81\xbc\xc4In\xdc\xb8\xa1\x0e\x1f>|\xea\xc9\x93\'\xa7\xbd\n%\n!\xb8x\xf1\xe2\xf7\x97/_\xfe[@@@\xf7\x193fL\xeb\xd7\xaf\xdf\xa7\x17.\\\xf8\xfa\xb7\xc4\xae\xfeR \xff^\xe7\xf2\xb7\xe5F[\xb3\xc1\x9c\xe5h0%\xd4\x1c\x18K\xebP<z\xd7\xd7H\x1a\x85\xce\x85\xa3G\x8f\xf1\xf4\xe9\x93dI\x92\x1e\xff\x11.|OE\xfa\xa2\x9d\x8bS\r\'I\xe2\x94\xc9L#\x83\x1e\t8gsb\xbb\xcd\x8fIn.y\xa9\xac\xa96Ajj:\xe3[V`\xc6~\x87\x830|\xd1w\xec[\xf8>\rk\x95\xc7jS\xb1\xd9l<{|\x87\xc0\xc0\xc0<\x05R\xb0`\xc1\x90;w\xee\xbcMy\xe9\xc7\xe9\x95%\xe5\xf5Z\xf9\x96\xc5\xaa~\x96m\xe9\xf7[\x95\x87\x8f\x8f\x8f\xd4\xb5k\xd7\xc9\xe1\xe1\xe1\xca\xf3\xe7\xcf\x198n9\x99\x86 \xf6/|\x9fz!\x978\xf5<\x95G\x19f\xfa~\xf65_M\xe9\x8bQUQ\x05l\xbd\x1aI\xc2\xf8\x95L\x1a\xd6\x89\x9fc\x1c\x16\xee\x90\x15\x87\x89\x8cI$\xbcla^\xec\xbc\bF+\x03\xbe<\x88\xd5jC\x15\x82\x19\x1bN1\xbcS\r\xf6|\xf9\t{v\xefe\xdd\xa3\xdd\xd4\xd6\xd9\x88R\xed\xa4\xc0/\x14\x88\f\xa4\xa9\x82{\x16\xabz\xdbb\xbb\xba\xcdl;zS\x15\x17\x05\x9cuqq\x89{\x95F\xe2\xd7$\x19\xf8)g\x03\xff>\xd3l@\x88\xda\xef*r\xc76\x06m\xa7Jz\xad\xd7\r\x8b\x95F\x86\x97\xc6\x8b\x97,\xd3^\x97\x85O\xe4!"\x076\xa3t\xb1PN-p\xd0\x9c8\xe9u\xd4\xacR\x8a\x98\xf8\x14\xde\x9f\xb4\x96Y\xa3\xbbbSE^\f\xc8\xc3\xcd\x85\xe8\xe4\x97tG\x9f\xb7\xaf\x82\xcdj#\xd7\xae\xae\x1c\xe0\xca\x92\xcfz\x91m\xb20\xb6Ey\\\\\x9chP\xbb"\x92\xb0\xb2n\xdd\x06z\xf7\xeeItt4\x07\x0f\x1e\xdc\x01X\x81{\xaa\xaa\xe2\x01\xed\xe6\xb9\xe9\xd7\xbc\xeb\xec\xe4\xf5\xeaF\xf1\xccfgzj\xf6\xb2\x83\x92<\xcc\x96\x13;(\x0e\xfd\xc2\xf5Z\x17\xa3\x10\x1c\xb1\xfef\x1a\x9f\x7fEy\xb8L\x9a4\xe9X\xcb\x96-\xab\xd5\xacY\xb3\x87\xd9\xec\b\x01\x18\f\x06\xc9\xdd\xdd\xbd\xd7\xbcy\xf3f6k\xd6,\xc8\xcd\xcd\x8d\x88\x88\b\x8e\x1f?\xc1\xfd\x87Ox\x12\x11E\xa1\xb0`\x9e>\x8b\xa6R\x85\x12\xd8\xacV\x8a\x15+V\xf4\xc8\x91#\x1b\x84\x10jtt\xf4\x8b\x0b\x17.\x9cY\xbe|\xf9!UU\xbf\x13B\xa4\xfa\xf8\xf84Y\xb6l\xd9\xa6w\xdf}\xd7[\xab\xd5\xf2\xd9g\x9f\xf5\\\xb8pa\x07~\x85:I\x92\xa4*\x95*U\xeaz\xf5\xea\xd5\xc7v\xbb}\xd9+\x87\x9cu:\x1d\xd7\xaf_G\xe7\xecI\x9bQ_1\xa6KMZ6(\x0fB\xa0\xd3\b\xf4z\xc7\xbb\x90\x9c\x9c\xcc\xa9S\xa7,\xed\xda\xb5kV\xb5j\xd5\x12\xabV\xad:\x9b\x9c\x9c\xbc\x1d\x88\xce\x1d\xccn\xb7[\xa3\xa3\xa3\xd7\xf5\xed\xdb\xf7\xbb\xd0\xd0\xd0\x15B\x88\x8e\xc0\xaa\xbf\x14\xc8\x1fz\xe7\xae\xf9\x7f5\x0b+W\x8c\xa9ps\xc7DT\xcbn ^\x92$\xab\x10\xc2\t\xf0\x06\x8a\xe0Q\xa8\x15\x01%\xba\xe1\x91\xdf\x05E\x0b:gz->\t\x11\xe7.#\x84\xe9\xf7\xbe\x85\xb2\xb2\xd4~\xb0\xbba\x94[\x0et\x15\xae\xd7r\xd4h&\xc9P\x90\xf1!U\xb0\xc5\x9aq6\x18\xe8R!\x7f\x1e;\xec\xb0\xb9;\xd96w0-\xdf\xadN\\B\n~>\x9ex{\xb9\xb3q\xc7Q\xd6\x1e\xbc\x8a=\xe59\x17\xbe\x7f\xf9\xee\xeb\xf5zBCC\xf3\xbfM\x81\x14\x10\xa2oK\x17\xa7\x12v`G\x96y\xbf\x9b\xaf\xefI\xf3+\xb4.\xff\xc0sj3d\xc8\x90\xf6\xaa\xaa2e\xfa\x02\x9e*~`\xb1s\xe0\xe8y\xfa\xb5\xaf\xcd\xa9\x85\x8e\xa2\xe6\xbb)F\xecv;a\xaez\x1e\xe7dc\x1d\x8fHf\xb2\x04\xc1\x06-\x91FG&\xd2\xec}W9\xde\xb0j\x1e\r\b\xc0\xf4\r\'\xf9v\xda{\xbc0\x1ee\xe4\xfa\xd3\x9c\xdd\xb7\x8f\xd1\x97\xbe#D/\x03\x12\x05\xb5\x1a\x8ef\x9b)\xa2u,\x03;p\xcfbcG\xb6\xe5\xf6\xd4L\xf3\xda\b!vxyy=K1\xa6\xe4)\x8c_\xa3\x91\xf8\x078\xb8\x118r\xc8\xae\x1e9\x9ce\x19\xe1\x9ci\xee\xd2I\xab\f*\xac\xd1T+\xae\xd3\xbc\x16M\x93\xb1\xf1\xff\xd8;\xeb\xc0\xa8\xce\xad\xeb\xff\xce\x19\x8f\xbb\'\x04\x12$\xc158\xc1\xdd\x8bCq\x87\x14\xa7\xd0\xa2\xa5\x14\xf7R\xac\xb8S\\\x83\xbb\xbb[ n\xc4e2~\xbe?&X{{\xe5\xfd\xda{\xbf\xef\xbe\xdd\x7f&#\xcf\xcc9\xf3\xecg\xaf\xbd\xd6\xda\xfes&\xb1t\xe3\x16\xb6\xca|I\x97;rdf\x0fV\xed\xb9H\xe4\x8b\x14\x04@.\x13\xd1\x17~\xc6\xc5}\xc3\x91\xc9d\xd4\x0e\xf1&\xd0\xcb\x99Z\xd5J\xe3\xee\xee\x82\x8f\xa7+g\x17\x0f\xc6d\xb2 \n\x12\xcf^\xc7R*8\x80\xb2!E\xc8\xcb\xd71\xe7\xc7}|=\xbc\x03\x03\x7f<\x87\xc5b\xa1k\xd7\xce\f\x192d\xcc\xda\xb5ko\b\x82`\xa9m\xb1L\x9f\xe4\xa8\x9e\\V\xf9Q\x89)\x017t\x06\xc3\xf4\\\xdd\xa4\xd7j\xcdb\x93V\xfb\xfe{\xf1\x1ce\xab\x1c\xef,\x8a<1\x18\xa5\xd7\x92t\xe6\xcf\xba\xe7+V\xac8b\xf8\xf0\xe1a*\x95\x8a\xda\xb5kW9s\xe6\xccvA\x10<\x06\f\x18\xb0:""\xa2\x9d\xb7\xb77\x17.\\\xe4\xce\xfd\xc7$\xa4\xe9\xe9\xd4\xbe)\x0fc\x9e\xf1E\xcb\xd6df\xe52c\xef\x0b\xfa\xf7\xab\x8e^\xafC\x94\x89L\x9d\xb3\x96\x82\xecwb\x9f\xaeM\x03\x86\x0e\x1d\xdac\xdc\xb8q=\xee\xdd\xbb\x97\xb3f\xcd\x9a\x9d#F\x8c\xe8\xd6\xa2E\x0b{\x803g\xce\x98\x96,YR\x95\xbf! \x06\xa8\\\xb9\xf2\xe0\xc5\x8b\x17\xaf\xf0\xf2\xf2\x92\x87\x84\x84\xb4\xfb\xd0\x9b\x93\xc9\x14\xc3\x86\r\x1b\xadP(\xd8\xb6\xfb\x10\x9d;udFo-\xa1\xa5\x8a\x12\xe0\xe7\xc5\xcd[w)^\xec\xa3H\xdf\xc5\xc5\x85\x91#G\xaa\x81\xaa\x92$U\x9d8qb\xe7\xabW\xaf\xce\x9e;w\xee\xf4[\xb7n-(((\x90>\xb9\xaf2\x12\x13\x13\xbb\x02a\x7fAX\xff\xeep\x0b\n\xfb\x87\xfd\x0f\x85\x1a\x94NJt\xa9O\xde\x97\x90\xef+x\xe0)\xd9o\x0e\x91\xfdf*j\x8f\x91x\x97\xe9\x8a\\\xe5KA\xe6c\xd2\x9eN\xfc\xb3\x97\xaf\x81J3\xec\xd5\x9b\x8a\xca?\xd2\x84\\D\x11/\x99\x82\xde\xfe5A\xae\x06\t\x9e\xbf\x8e\xe5\xa79\x11|y\xf3!YY\xd9xx\xb8\x11\xe0\xe7\xc5\xc8ik\xd1\x1bM<\x89Nch\xfbj\xd8\xd9\xaa\x89\xca\xcac\xfb\xd8N\x9f9\x82\n\x82\x80\x9b\x9b\x9b\xcd\xdfH\0\x8a\x91j\xf9xO\x99\xc8c\x83Q\xfa\xd9`\x9ecIK\xfbgK.\x9f\xc5\x8b\x17\xaf*]\xba\xb4\xb0i\xd3\x16|\x8a\x86\xb0\xa7E0\b\x02O^\xc6\x11\x1c\xe8C\xdd\0\'\xeaW-n5\x13\x96\xc0\xd9A\x03\xb9\x9f\x10N,\x16\xec4\n(L F\xc9*\xcas\x90\x0bd\x1a\xad\xcbH,0!\x93\t\x80\x84:3\x8eQ/\xcf\x13\xa0\x90}v\xf3\x9b\x01\xa3\x04\xf7\xf4\x06i\x9f\xd6p|\x8b\xd1\xbcX\xa1T\x9e5\x98\xad\xea\xdf\xcc\xcc?\xd6\x83P\b\xccq<\0\0 \0IDAT\x92\xa4\xfc|X\xbf[\xa1\xda\xb0=3\xbf\xf1\x18\xb5|~[[u\xb9"r\x19z\xc9\xdaGim\xd1S7\xf1\x1e\xad\r\xb7\x99\xe5T\x05\x8b\xc5\x82Rn\xbd\xcc\xe3\x9a\x97\xa3Tp\0\'\xe6\x0f\0Q$##\x0bwW\'\xba\xb5\xaeE~\x9e\x96\x83\'o\xb2\xf3\xfa\x1bN,\x1eD\xdd\xafV}x\xdfV\xa5}\xe8\xefhO\x8f\x05\x1f,\x99\xf8\x1a@i\xc7\x80\x95\x17\xb0X,|\xfb\xed\xb7\xed\r\x06\xc3F\xcb\x96M\x9a\b\x17\xdb\xf6^\x9f0\xd0\xd2-\x16\xf6\xe5\xe9\x9e\xcd*0\xf67\xc25\n!MA\x10\xdcG*d{\x9a\xd8\xa8<$\xe0B\x81\xf1\x9eR\xa9\xbc\xf3~\xd4\xf3\x1f\x19...B\xdf\xbe};\xba\xbaZ%,\xabV\xad\x1au\xea\xd4\xa9\x06\xde\xde\xdeE\x9a4i\xe2\xf4\xf8\xf1\x13F\x8c\x9dE\xb9JU\xa9S\xbd\x06S\xa7\xef\xa0Y\xc3|\x16O\x1bDzV.{\x0e\x9d\xc3^)\xc3l1\xb3d\xc3q\x86\xf5jJx\xad\xaaL\xddu\x9d\x19%\xca\x121\xe3g:5*\x8d\xbb\x9b\x8b\xc3\xda\xb5k\x07\xf9\xfa\xfa~\xda\xaf\x13mmmk\x98L\xa6\xbd\xbf6&T(\x14a\x8b\x17/^^\xa7N\x1dynn.\x9d:u\xea\xb2s\xe7\xceT\xc0\x7f\xf2\xe4\xc9#\x9a5kV\xe7\xe7M;\xf1\xf2/\x81\0\xb8\xba8\x12\x1b\x9fLtl\x12\xbf\xec\xd9\xcb\xbe\x1d\xab~\xaf\xda\xc2\xc9\xc9\x89\x16-Z\xd8\x94*Uj\xde\xe0\xc1\x83\xe5\xa7O\x9f\xfe\xe13$\xde\xaaR\xbf\xf6W\x02\xf9\xf7\x86\x0f\xf6^5\xff\xde\x03\x06\xd6.N\xf9\x90\0\xae\xdf\xf4\x9a\xbc\xf5\xe7e\xf1\x98\xf2~\xafDLB\x97:Y\x95x\xe5[\x93\xc9$\xd3h4\xa6\xbc?\x19\xbb\x12\x04\xc1\xbd\x95L\xdc\x19\xaaT\xfc\xc6\xa2;\xa3u{\xce\x0f\x1e\xce\xbb\xf4l|\xbd=HJI\xe3\xd1\xf3\xb7l;x\x89\x90\xa2\x9e\xec8~\x9b\xd1}\x05^\'dp7\xd9\n\x01\x1d8\xfb\x90\xb9\x13\xbbS\xff\xe0aZ\xb5l\xc1\xe5\xcb\x97\x0b\xb6l\xd9rj\xf4\xe8\xd1\xad\x8b\x16-*\xbc|\xf92\xf1\xd7\xefcg\xb1\xb4\xae\xadQ\x06I\xc0\xb9\x02\xc3U\x1b;\xbb\xeb\xefq\xde\xbf\x9b\x93\x15\nYDD\xc4\xcf\x1d;v\xf4|\xf0\xe0\x01\x0e.\xee\xb4\xa9X\x8c\x15\x9b\x8e"\0M\xeb\x94\xa3h\xa0\x1f\xf3&\xf6\xe0\xc1\xe3\xd7\b\x02\xd8\xdbiX0\xf6\x0b\x04Q\x86\xc9lA!\x97\x11\xe8\xef\xc5\x92\xf1\x9d\xb0\xb3\xd5`\xb6H$%\xbd\xc3\xd9\xd1\x96\xa5#[\xe2\xeb\xe3\x89\x04\xe4f\xe7\xa2+\xd024\xe6*\x8d\xb4\xafHA"\xe8\x93\x04"\x01\xf1&\xb3453\xef\xc0f\xa3y\xb6T(z\xfb36\xbf_\x87\xd6zz?9\xdf(\x9d]\x9f\x917\xe0\x1b\x1b\xe5wrApkP\bk\t@\xa8R\xc6\xb2\xdc;\xdc\x8d{M\x83j%\x19\xdc\xa5\x01\xb6\xb6\x1a\xe2\x13S\x19\xfe\xddV\xde\xe4\xe8\xd0\x9a%\x8e\xcd\xea\xc5\xdc\r\x91\\\x8d\xf9\b\x83\xcb\x04\xe13\xf6ZH\x80\x1b\xf9\xf9\x1f\xfbXa^\xf6\x98\xcd\x16k\xb5\xa6\xb4e\xe8\xea\xcb\xac\x12\x05*\xdb\xdbwo\xe4d\xcb\xfb\xaaV+I\x9c\xd2\xeaY\x98ox\xfeZ\x92\xe6\0^@7\xc0\xa3\xbbBV\xb1\xa1Z\xde&\\\xa3rV\x0b\x02\xd7u\x06\xc3<\x9d1\xc2\xf0\xdb6\xd2\x1f\x12YYY\xf2\x80\x80\x80\x0f*\xcb\xe0\xe0`!88\xb8\xbc\xc1``\xe3\xa6-8\xbb\xfb0~\xecp\xdc=\xdc\x180\xd9\xfasutr\xa0\xeb\xc8\x85<L\xc8f\xf7\x0f}\x199\xa0#\xaf\xde\xc4\x91\xf4.\x9bN_\xaf\xe7\xcc\xeaQ\xd4\xadQ\x9e;\x0f_p&VG\x1f\'_\xee>\x8f\xe5\xee\xa3\x9d\x84\x04yS\xacXQ\xca\x97/O\xa5J\x95\xc4\xdb\xb7o\xef\xba{\xf7n\xe2\x9b7o\xee\x9e<y2\xea\xf2\xe5\xcb\xa9\x92$\xe9\'N\x9c\xd8\xb3V\xadZ\x8a\xf7\x90\xef\x9a5k\xbaM\x9e<\xb9\x9bF\xa3\xe1\xd5\xeb\xd7\x9c8\x7f\x93\n\x95\xc2\xe8<g\x1f;\\\x9d\xb8\xfd\xf05\xb9\xf9zF\xf4i\x86\xafk7\x94J\xe5g\x9f3%%\x85\xbbw\xefjccc_\x88\xa2(\x96*U*4,,L1n\xdc\xb8)\xa7O\x9f\xde\xf2{U\xd0_\t\xe4\xdf\x15J\x97~\xd8{\xfcn\xf7|\xdb\xf8v89\xd8\xf1\xe0\xc9k\xc6E\xf4\x95U\xabP\xe2\xa7\x88Q\xe3\x1c\\\xed\xa4\x85\xbf7.\xb2\xf0Tb\xf9g6\xd1\xff\xcb\xe4\xa1\x9e\xa1\x96\xefnc\xab.\x1eo2\x13\xaa\xfcx\ts-\x12\xb1\xa1\x95\xd1\xc7\xbf\xe3\xec\xb5\'\\z\x1cO\xbe\xc1\xc4\x8e\x1f\xfa\xb1\xfdN,\xdc\x89\x05\xa0]l\x12\x9d\x1b\x94\xe1\xeev+\x94{).\x8b\xe3\x91\x17\x986\xa1?\xe9\xe9\xe9\f\x1a4hLZZ\xda\xea\x80\x80\x80\xd3\x15*T\xa8q\xf3\xe6\xcd\xed\x9f\x15onnB\xaf\xdc\xaca\x01r\x19\xc9f3ku\xa6Uy\xe4\xfd\xad\xef\xa5\x14P\x1a\xd8\xfb\xfe\x0f\x15*T\x88\x88\x88\x88h\xa6\xd7\xeb\xf9z\xda\x12ne\xda\xb3\x7f\xde\0T2\x815\x97_\xb3\xf1Z\x14}\xc2\xee\xd1\xbf{SF\xac:\x89Q\x92\x90\t\x91\xfc2\xa5\x0bO_\xc6\xf2\xcd\xcek\xa8E\x81\xf9\xfd\x1a\x10Z*\x90z\xa3V\xa3\x12\x04F\xb7\xaa@\x83\xbaU8q\xe6&\x13~<N\x81\xd9B\xcf\x9a\xfeT\xbd~\x84\xc9\x96hdj\x05\'\xb4z\xf4\x92\x84J\x10xg\xb6\xf0K\x9e\xee\xe5\x1c\x9dq\xb4\xa3\x9b\xdbq\xe9\x9f\xaf\x9e~7T*\x95\xa8\xd7\xeb\xebV\xabV\xadi\x9b6mJ\xc8\xe5r\xf1\xf2\xe5\xcbqG\x8e\x1c\xb9\n\xbc\x01\x94\x85\xcd\xf6\xfb\x9f\xe0\xd9\xa6TX\xf5\x95\xd6\xb8\xaf\xb5(\xfcP\\!\xeb\xe3\xf8\tl\xe4*\x13\x89\xd9\xb2\x01\xfb6_\xb0}\xff\x0bv\xdeOb\xf7\xa4\x8e\xd4-\xef\xcf\xe3\xf3/\x0b\xf1\x7f\x15\xe99\x1fG\xb0\x84:k0\x9a-|z\x8ciZ\xbf2\xebwY\x91\xa5j^\xf6\xac\x98\xd6\x9b\x97o\xe2iR\xc2\x13_W;\x1a\xd4(E\xce\x89\xbd\xb48\xf2\x0b\xaaO\xd8|\x1aA\xa0\x85\x8d\x9a\xda\x1ae)\xa3\xc4&\t\t\x11\x01[Q\xc0V\x10\x10\n+\xb8\x0b\x05\xfa\x82\xc9\xb9\xfaA\x86?Q\xfb!I\x92\x83\xbd\xbd\xfdgC\x92\xf2\xf3\xf3\xd9\xb8y+\x136\xdd\xa6M\xa5 \x16L\x1b\xc8\x9d{O\xf9qZo\x92S\xd2\t\xf4\xf7\xa6q\xf5\x92\\\xd9u\x9dC\'\xae\xf2\xee]\x067\xee\xbfb\xf1\x94>L\x98\xb3\x05Q\x10P\xa9\x94dg[\xa1\xc9\xd8\x84T\xfa\xf5h\xc5\x93\xe7oP\xab\x14\xac\xd8|\x9c;\xf7\x160\xbcWc\xaaW\xab,\xb4h\xd1\xc2\xd7\xc9\xc9\xc9w\xf2\xe4\xc9\x98L&\x8cF#\x1a\x8d\xe636\x9bV\xab%..\x8eu[\x0e2a\xec0\xda\xb6\fD&WprN\x1fBK\x16\xc5\xd3\xc3\x15oO\x17N\x9d<\xc1\xa0\xfe}><O\xa7\xd3q\xe8\xd0\xa1w\xdf|\xf3\xcdwQQQ\x1b%IzO\x9f/1a\xc2\x84\x15=z\xf4h\x1c\x10\x10\xd0&66v\xe5_\t\xe4?\x14\x82 \xd8K~\x15\x87\xff\x86}e1\x83\xc5L\x8d"\xee\xf8z\xbbS\x7f\xccZ$ \xbcVE\xe6\xec\xba+R\xaa\xf1\xbc\xf4\xa8K\xbe2\x99l\xfc\x7f\xca\xd7G\xa5R\x89\x83$\xf3\xean\xf6\x9ap[A\xe0\x81\xc1Hh\xe1%4\x01[\xe5E\xc8\xcc\x96(\xaa\x92\xb3\xf9z\x94\x15j\x12@\xa3R\xe0\xa9\x96\x93R\xa8\xd4^\xb0\xf5<[\xe7\f\xe2\x9b|\x1d\xfb\xae\xbe\xa2}\x8d`t\xb9\xf1T\xa9\xd2\x9b\x193fDFEE\xad1\x18\f\xd2\x0f?\xfcp\xd9l6\xcf\x90$\xe93EqZZZ\xc9\xfaN\x9ap\x01\xb8\xad3\xa6\xa5\x0b\xc2>~Ut\xf9\xfb\xfb\x7f\xb1v\xed\xda\xad\xe3\xc7\x8f_\xfe\xe8\xd1\xa3\xf7\t$\xe4\xbb\xef\xbe\x9b\xe5\xef\xef\xcf\xc2\xc5K\x89LV\x81ha\xf6\x8f\xfb\x187\xa85k.\xbf\x06`\xe3\x8dh\xda5\xcd\xa2w\xcd \xd6]y\x8dY\x82\xd1\x8b\xf6\xb3\xf5\xfb~\xb0\xf3\x1a:\x8b\xc4\xc8ug81\xfbK\xbaV\x0e`\xeb\xad\x18f\x1d\xbc\x8b\\!\xa7x\xa0\xb7\x95\xcej\xd2St\xddr\x1a+r?\xf4\x18J+\xe5D\x19\xcdd[,\xa6y\xb9\xba\xc57%\xa6K\xa0M\xfb\'\xfb6\xff \xaaM\x9f>}E\xabV\xad\xaa\x94(QBx\x7f\xaa\x1c?~<\t\t\t#3339x\xf0\x10S\xb7\xdd\xb0\xf0\xf2X\x0b$K\xe4\xafv\xc7\xd4\xc3f\xa9\xff\xc5L\xed\xe1\x19\xb6\xcauml\xd5\xaejA\xe0\x9e\xdeH\xa3\'w\xf1z~\x1f\x1b\xa3\x86\xfd\xbeuA\xe2\x83\x01c\x9f\xb0\xa2\0\xbc,\xd4\x88\xf8\xdb(X=\xad\x17\x05:=\xa3\x1b\x87\xa0T(h\x1c^\x99\0?/\x06\xf5lN\xbfnfd\x0288\xd8a\xb1H\x8c\xe8\xd1\x10\xa3AG\xfc\xceM\xb4;u\b\xc5\xaf\xc43V\xd7fp\x12D2\xcd\x16\xb2,\x12\x06\xc9B\x8cQ"O\x92\x8c\x19fK\xf4I\x9d\xe9\xccQ\xb3e\xa9\x04\xcf\xff\xcc\xfb_\x92$g{{{\xf1\xd3\xe41u\xc6\x0f\xb4\xed\xf8\x05\xe6\xad\x8f\xd8u/\x8e\xd1\xf1I\xb4\x9d\xb1\x93\xa2vJ\x8e\xfd4\x9a\x9f6\x1e"\xb4\x84\x1f\x07g\xf7\xe6\xd1\x93\xd7\xa4\xa6e\xb1\xe0\xf8C<\\\xed\xd90\x7f$k\xb7\x1cf\xcd\x89\x87\x1cZ<\x98\xd7\xf1i4\xaaW\x85\xac\xec\\\xd6\xed<C\xcb\xf0\xf2\f\xed\xd3\x9e\x8c\xb6\r\xf0pw!>)\x89)\xf3&\xd3\xa6Q%d\x82\x80\x8f\xb7\x07\n\x85\x02Q\x14\xd1\xeb\r$%\xa7b\xb2X\xc8\xce3\xe2\xe6\xe1\xcd\xb0!\x038s\xf9!\xbf\x9c}\xc4\xd2\xc9=X\xb5\xed$\xd3\xc6tg\xec\xdc\x1dT\x0f\xb6e\xd4\x90n\x1f\x9a\xe7\xf1\xf1\xf1,[\xb6\xec\xe4\xfc\xf9\xf3\xfb~\xda0/\x8c\x97\x8b\x16-j\xfe\xf8\xf1\xe3\xb9\x05\x05\x05\xa1\xffO\xb5\x92\xff\xb7%\x10I\xe56\x1a\xe7"\x9f\xfb&\x1b\xf2\xe1\xcd\xd5=\xe8\xb23\xca\xd5\x1b;\xf8\xdd\xbb\f$\xde\x0b\xd8$\xea\x97\xf1\xa5x`%\xe1\xfa]\xffQ\x8f\xef]\nNx~\xbd\xf7\x7f\x826\xd7\xc6l\xfcn\xa0\x93\xed\x97\xef\xa9\xba\xa5\x14r\x1e\x1a\x8cx\xcadlU\x15g\xa1O%\x9c/\xbf\xa6g\xa7&\xd4\xf0q\xe0Zb\x0e\x16\t\xce]\xba\xcb\xb6\x99_2n\xfe.\xee\xbf\xcb\xc7\xc9FIzf6\xfd\xba5\'\xbcfy\xde\xbeyI\xfdN=9}\xfat\xf6\x82\x05\x0b\x06K\x92\x95\xa1\x96\x9f\x9f?\xedo\xad\xa3\x85L\x1cZF\xa9\x90\xe9%\x89\xfd\x05\xc6\xed\x92$i\x7f\x95\xa45s\xe6\xccY\xd1\xa4I\x13\xd5\xdd\xbbw\xc3\x1f?~\xec\x04\xc8\xa6O\x9f\xbe\xb1a\xc3\x866\xd7\xae]c\xe2\x96\xdb\xa0v\x04\xe0TT:\xd34\x9fO\xdf\xbc\xff8\x8a\xaa\xe5\x8a\xb1\xee\x8a5\xa9D\xe7\x190\x9a-(D\xe1\x03\xfb\xe8\xda\xed\xa74\xacQ\x9a\xad\xb7\xac\f\xcc\xa5\x07os`\xfe@\x90,\xb4J}NGy\x0e\xc2\'-j{Qd\\f\xee\x9b\xab\x16\xa9\xbb\x19n\xfc\x81\x87\x92~\xb3f\xcdZ\xd9\xbauk\x95\xbd\xbd=F\xa3\xf1\x03,\xf1\xfed\x9a\x9a\x9aJf\x8e\x16\x9c\xfcD\xd4\xeem(H\xc9.D\xd1\x12>\x85$\xb2\xe1\xc0\xa8|\xc3\xbd\xe7F\xf3\xb6F\x1ae-\x80\xa2\x85\x96!m\x94:\x02\x12N`\x14\xfaR\xb3rI\x9a7\xa8B\xa5\xf2\xa5HN\xcd r^\x7f\x04\x01l5*\xd4J\x05\xf1Ii\xd4\xa9V\x1a\x83\xd1\xc4\xc1S7\xe9\xd8\xac:\xe1c\x7f\xfe\xb0\xe6}S:s\xec\xc2}v\xdc\x8c""\xe6\nc\xa4\xb8\xdf$\x0f\x13\x10e0q\xa3@o:f\xb4l\xb9e\xb6\\,\x80h\xac$39\x10\xab\xd1h\xd2\x0b\xcc\x86\x7f\x8bbP\xadV\x97\xf3\xf0\xf0\x10\xde\xc3\x8c\x8b\x96\xac\xa0[\xf7\xeeh4\x1a\xd6\x8fi\xc3\xa5[\xcf\xd1\x1aLT\xf0v\xe4ar\x0e\x89\xa9\x19l>\xfb\x84\x94\xe3\x0f\x89\xfc\xa17-\x9b\xd4$3+\x97Q\x8d\x93puv &>\x99*\x15J\xf2\xfd\xc1\xbbDE\xc52mT7&\xcf\xd9\x84\x8d\x8d\x8a\xe1\xbd\x9b\xe3\xea\xec\x80L&r\xe9\xd6Sz\xcd\xda\xcd\xd2\x11\xcdX\xbdd\x1a{\x0f\x9d\xe7\xea\x83(\xa6F\xd4#7O\xcb\xed{\xcf(Z\xc4\x87\xf0\x86\x15\xd8\xbc;\x92\xb9\x87\x9epoC34j\x157\xef\xbf`\xc9\xa4\xee\x9c\xbcp\x07/W{\xe42\x91P_\rm\x9a\x84Q\xa2D\tt:\x1d\x17/^,\x98:u\xea\x8c;w\xee,\xe0w\x04\x8d&\x93\xc9|\xf9\xf2\xe5\xf1999\x95\xfeJ \xff\xb9(N@\xd5\t(>\xd9\xac\xccF\x88\xbe\xbeW\x9e\xf7\xb6\x9b\xd9lV\x9c\xbbt\xa1\xde\xd8\xe1\xddK]\\2\bI\x02_\x1f\x0fzu\xa8\xc7\xcb7\xf1\xac\x9a;\x86\x9bw\x1a\xb5\xfar\xd4\xcc\x1b\xba\xe8\xcb\xdd\xf87\x1a\xc5\xd5\x14\x85\x11c\x1cm&}j\xad\xe1/\x97\xf1H\xb4C\xbfv\x13Ov]\x81\x97i\xd4(\xe6\x86R.c\xe7\xb2Q\xdc\xba\xfb\x84\x94\xb4,\x02|<(\x13\x12\xc4\xaa\x19}\xc9+\xd0\xa3\x10\xac\x96\xe0\'\xcf\xddd\xe8\xcac\xac\x1bR\x03\x1b\x1b\x1b\xa6L\x992M\x92\xa4\x98\x7f\xb0Y:u\xb4Q|Yx:\xb6D\x9a-\xeb\xfe\xc6I\xb1b\x85\n\x15<\x05A`\xc4\x88\x11U\xca\x94)\x13#\x8a\xa2\x18\x1e\x1en\x97\x9d\x9d\xcd\x95\xebwY\x11\xd1\x91\x92\xc5\x8b`\x96 \';\x1bA&\xe3\x9b\xb6\x95(\xe2\xe3JTl*r\x85\x1c\x85R\xc9\xd7\xad*`2\x99\xd9s\xf9\x05J\xb9\xec3\xb5\xb9^o\xc0\xe6\x931.\xd9&\x0bI\xf1\xb1L\x8f:\x85\x9d6\x0e\x99\xfdG\x93\xc6d\xb3\x99\xa5\xd9\x05\xa7.K\xf4\x90\xe0\xdd\x1fxi\xbc%I\x12\xbe\xf9\xe6\x9b\xb6\xdf|\xf3\x8d\x0ep\f\r\r-7`\xc0\x80\xf6\xad[\xb7\xae\xe4\xe6\xe6F\xd7~\x13\xb8\x9a\xe3`\xa5\x80\x9bM`\xcc\x8b\x06\xbc\xfb\xf6\xed\xbb\xaeg\xcf\x9eNo\xdf\xbe}\xb3z\xf5\xea\xf5\xb7o\xdf^^8~4f\x8dIjp+W7{\x8e\xa3\xcdh>\x91\xc4WP\x8a\x9c\x1f\xf7\x15\xaf\xfa\x8d\xe1\xe1\x9b\f\x1e={\x8b\xb3\xa3\x1d\xd3\xd6\x9fE\x02R\xf5&\xd6\foJ|\xd2G\x0b\x17\x0f\xa5\x8c\xf6\xcdj\xfe\xea\x1aY\xd5\xfb\xed\x92\x1f3\xc2\x12\xf7\x99\xdb\xafN\x92\xb8a\x10\xd8\xe3]\x94\xe9\xbb6\xd3\xdb\xdd]^\xfc\xea\xd5v\xcf\x9f?w3\x1a\x8d\xfa\xa0\xa0\xa0\x9aE\x8b\x16\xf5\xcc\xcb\xcb3GFF\x1e]\xbcxq\xc4\xbf\x03\x97\xef\xd1\xa3G[\x1f\x1f\x1f,\x16\x0b\xabV\xafc\xea\x81W\x8472r\xed\xces^\xbcIdp\xcff8;92\'\xa2\x1d.N\x0e\xb8\xb98\xb2lt;\xde\xc6&\x91\x9f_\xc0\xac\xa5\xbb\xb8\xfb:\x85M?\f\xc4h2\xd1|\xd4*\xf6~\xdf\x9b>5\x8aQ\xa2x q\x89\xa9\x84\x04y\xf3<:\x85\ne\x8a3n\xc6\x1a\x9e\xc7f0g|gj\xdf~A\xd9\xd0`b\xe3\x93IJ\xcd\xa4b)\x7f\xe4r9\x82(\xb2\xee\xe0-\xba6.O\x89\xa0\0j\x87\x95\xe1uL*Y\xd9y\xb4\x1c\xbe\x8c=\xf3\x07"\x97\xcbh\xd7\xac&\x1a\xb5\x8a\x8b\x17\xafH\xf9\xc9\x8f^\x14\x14Tp\xda\xb0aC\xe6\xfe\xfd\xfbO\x1d>|x\x19\x10\xf5\x8f>\x7fNN\x8e\x04\xdc\xf9+\x81\xfc\x07B\xa1P\x88F\xa7\x90\x1fq\x0e\xf8\\U\xf4\xeeU\x82\x90\xf9r\x90I\x92\xcc\x809\xf1\xd9\xa51\x1b6\xef9\xba\xe2\xf4\x1b\xe1\xcb:%h\xd9\xb0\n-\xbe\xddJ\xa8\x8b\reC\x8a\xd1y\xce\x01\xaaU\xae\x13\xdc\xef\xdbA\x97\x87\f\x1f;M4\xa6/\xb2X,\xc6?s\xedv\xd0\xb8\x89J\xbe\xb0\x88\\\xf6\x1b\xef\xb2\xacb\xe5\xa9\\\xa4(\x13\x07\xbb1I\xae@2\x9bx\x1e\x15O\xc6\xed\'\xbc\x8cJ\xc0\xd7\xcb\x85\xbd\xc7\xafcgg\xc3\x88\x1fv\xf2$\xdd\x8a\xf5\xfe<\xb29I\xef2i\xec\xa5\xa7\xd3\x17\x1d\xd9\xb0a\xc3\x93\'O\x9e\xfc\xf4\x8f\xd6\x12\x02\x83\xaa\xab\x95N\x12pQg\xb8\xe2\xe0\xe8\xf88;;\xfb\xb3\xc7\x88\xa2\xe8\xe3\xe2bu\xfa\xb5\xb7\xb7\xa7u\xeb\xd6\x0e\x85x?\xf3\x17.\xa5@p\xa1U\x9b\xcat\x8cXFV\x81\x91N\xb5K\x101\xa0\x04\rjW\xe0\xe6\x9d\xa7\x94-U\x84\x9aa\xe51\x18\fVQ\x9c\\\xc6\x17\xad\xeb\x12\xe0\xe7\xc5\xf9\xc5\x83\xd1\x9bL\xa8\x15rD\x01TJ%\x97\x97\x0eA\x10\x04\xce\x9f\xbf\x80\xcd\xe0^\f\x92K\xa4\xd8\xa8\xb8\xa33\x10\xa6V\xf2\xd2hbz\x96v\xe5%A\x1c%I\xd2\x1fx\xad\x84\x86\x04\xd4\xda\x85 \xd3\x13{\xa9\x07\x92\xe5\x02\xc0\xd3\xa7O\x0fM\x9a4i\xf6\xc2\x85\x0b\xa7W\xa9\xd1p\xca\xd5\x1cGk\xf2\0\xc8K5b\xca\xdf\x05\xc4n\xda\xb4\xe9E\xed\xda\xb5O\xf4\xe9\xd3\'\xb8}\xfb\xf6\xb3\xb7m\xdb\xd67""\xa2=\xf0\xc4b\xb1\x18\xee\xc0\xb8~Y\xda;s\xedU\xeb\xeaiT6\xef/~XV\n\xa3\x7f\xdcJ\x8aW(\xb9z\x13\xc3\xba6\xf8L\x85\xee\xe4`\xc7\xa3\xe7\xb1\x1f3\x9c\x83\x9aO\xef\x1c\x01\xf0\xf2t\xe5\xde\xcd;\xac\xcf\x7f\x88\xdd\'S\x07\x1e\x19\xcc\xccw\xac\xc4\xe9\x80`\x10DB\xf6\xecg\xf2\xd7\xe3\xe8\xd0\xa1\x833\xf0\xeb!i\xb2\xf0\xf0\xf0\xf6\xfe\xfe\xfe%\xc7\x8e\x1d[M\x92\xa4?s\x16\xba\xdf\x17_|\xf1\x85\\.g\xdf\xfe\xfdl\x8a|N\x9b\xf2\x81\xe8t\x06\xb6\x1e\xbf\xcd\xcd\x84ln?K\xe0\x87\xb1\x9dh6i\x13a^\xf6l\x98?\x8c\xc3\xe7\xee\xd1\xb8f(ujT$:!\x95\x02\x9d\x81;\xf7\x9f\x13^\xa72_\xb5\xaaHlB2\xb3&\xf6a\xce\xb2\x1d\x1c\xbc\xfe\x9a\x83\xcbF\xd0\xc2h\xe2\xe9\x8b\xb7\x04\xfa\xb9\x11\x9f\x9aC\xb9\xd0\xe2,\x9b>\x80\xe9\x0b\xb7\xf2<.\x83\xdd\xcbG\x91\x98\x94F\xb3\xa1K\xe8\xd9\xb0\f;\x16\r#;WK\xa7Q\xcb\x992\xa8\x05?\xcd\x19\xc9\xece\xdbQ\b \x88"]\xc6\xad\xa1|QW\xea\x95s\xcf\x8f\x88\x185\xccN#n9r\xe4\xb0\xa8V\xab-yyy\xd2\xff\xcf\xfb\xea\xff\x9a\x04b\x94\xd4C\xf0-\xd7\xf83\xeanA\x16\xc4\\\x19\xf3)\x1c%\x13\xc5\x13?,_w\x90\xe0:\xed\xc2*\x04q\xff\xc9\x1b\xe6\xf6\xac\x8d\xc1d\xf9\xe0\xad\x94\x9cU@\xe9\xb2\xe5U!u\xbe\x98S\'X\xd6~\xcd\xaa\x15#\xfe\xc4j\xa4\xd4";\xd5N\x07\x99\xa8\xb4\xf0\xb9;S\x9eE\xe2\x9cG1BR\xd2h\xf9\xed\xd6\x0f\x7f\x9f\xdd\xad&\xb66*\x96\x9d\xf9\xe8\xc0\xde\xb5\xad\x01_\x17\xdb\x0f\t\xe4Ut\x12!E\xddi>y(\xc9\xc9\xc9\xcc\x981\xe3\xdb\xbfc\xa0\xf7\xbe\xfap\x1ei\xab\x1c\xeb,\x8a\xc4\x98\xcc\xac\xd2\x99\x96f\xeb~\xeb\xd2+I\x92\xe9\xfd,\xf7O\xe3\xc2\xc5\x8b\xcc<\xf0\x02IeG\xa5\xb2\xc5iV-\x88\xc5\x91\x8fYv\xfa)\x17\xeeE\xb3vV?\x16\xee\xbbE\x9a\xc1Le\x8f3\xac\x9a\xd9\x8f\xf5{/s1.\x0b;\x99\xc8\xfe\xd9\xbd\x89<\x7f\x9b\x05\xc7\x1f\xe1\xae\x94\xb18\xa2\x15\x01~\x9e\xb4\x1e\xb7\x8e\x9c\xbclv\xc5\x1e\xa1\x8a\xc2\xba\x1cO\x99\xc8u\x9d\x85\xfbz\xa3iTv\xc1\x98$;\xbb\x15\xe6?\xd00O\xa1P4]\xb7n\xdd\xae\xb4\xf4L\xc7\xb1;\x9f\x80(\xdb-D\x9f+)IR\xa6\xb5:\xd2[\x12\x12\x93\x1e%DI\xa0\xfa\xc4\xb3S\x97\xf3\xd6\xd6\xd66.??\x1f\x8b\xc5\xf2t\xd0\xa0A\xad}}}\xaf4m\xda\xd4v\xd8\xb0a\xc5\xed\xed\xedO\xf6\xed\xdb\xb7\x06\x10\x0b\x10\'I;z\xe7\xe8\x12\xe6\x9b-\xfb:\xd8i\\e\xc0U\x9d\x81\x1d\xa6\xfb<\x8c\x8a&\xb1\xf9h\xd23>\xce\xa0\xf7\xd1(\b,\xe2\xc3\xc8\xc5\x07?\xfcmT\xf7z\xdc}\xf4\xca\xda\x14\x97\x89\xac\x1c\xd1\x1c]A>c_\x9c\xc5_i]\x9b\x198\x19R\x11]\xf7\xfe\xdc\xd8|\xc3:=\x0b\xf8!2\x01\x8d\xcdJF\f\x1d\x88\xa3\xa3\xe3o\xbe\x87\xd4\xd4T|}}C\x05A\xe8*I\xd2\xcf\x7f\xd6\xef\xb7o\xdf\xbe\xb3\xeb\xd5\xabgs\xed\xdau\ff9\xab\xbf\x1fN\xea\xbbt\x8a\x07\x05\xe0b\xa3\xa4\x9c\xa7\x03q\xd9:\xa4\xc2\xdf\xf7\x8d\xe4\\\x12S\xd29q/\x86\xad7\xdep#\xb8\b\x02\x02#\xfb\xb6\xc4\xd5\xc5\x91u[\x8f\xd2\xb1em\x14\n\x05\xaf\xde\xc4\xa1Q+H\xd7\x9b\xf0tsf\xd6\x92\xed\xdc}\x95\xc4\xc6\xb9Ch\xddD\xcb\xd8\xe9\xab\xe8\xd9!\x1c_Og\xbc=\x9cHI\xcd@\xa9T\xe0\xe7\xa8\xc6h2aogCL|\n\xef\xb4&\xbc<\\X\xbb\xf50m\x9bVgd\xbf\xb6\xc4\xc4%\xe3$7p\xe4\xd8\xc1\x07\x876<\xe8\x8dY\xff\xa0\x90gc\xfe\xb3\t7\xff\x8e\x90\xfd/\xc9\x1f\xc5\tj\xb8\x07\x07\xafO:\xe7\x12$<\xb8\xa42\xa6M0\x9b?\x02#z\xbd\x1e\n\xde\xdd\xc1\xcek`Xh\xb0\xa2s\xbb\xfa\xbc\x8dN\xc4\xd5\xc9\x8e\neK\xd0\xa9Ni\xda\x84\x97\'\xb8\xa8\x1f\x8dj\x96E\xa6v\xf6\x0b\x0f\xaf\xdf\xf7\xfa\x8d[I\xfa\x82\xbc?T\x81+\b\x82\xc34\xb5"\xb2\xb3\xbd\xa6\x88\x88\x95e\xe5X\x88\xa9K\xc0n\xc1\x9b}6A\xf4mW\x87\x8d\xc7o}\xb0\xf9S\x1atth^\x83\xcd\'?.\xa7\x98\x83\x82V\r*\xb3\xeb\xa2\xb5\x1f\x1eV\xcc\r\x07\x95\x816\xad[\xb1q\xe3\xc6\xdb\xc7\x8f\x1f\x1fo\xb1X\xfe\xee\x06\xdbR&.\x18\xe2`S_%\b\x1c\xcc\xd7\xbd8a\x11F\xbd\xef\x97\xfc*,]\xbat\x19\xe1\xeb\xeb\xfb\xe1\xdc\x9b\x9c\x9cL\xf7\xa1\xb3H\x15\x9d\n\xd7#\xa7r\x99b\xec\xbdju\x94M)0R\xbb\x84\x07\xfe\xce\x1a\xae\xbcL&)\xdf\x88\x83\xa9\x80v\x8d+\xf3\xcb\x95\xe7\x18$\x89\x97O\xa2\x18\xda\xa3)\x9bN\xdeEk\x96\xd8\x7f\xf5\x05\xbd\x1bW$\xfaU4-\x1e\x9d\xa7\x9b\x98\xf5\x99(\xef\x95\xd1d\xfa*W\xd7/Vb\xed\x1fH\xcd-?}\xfa\xf4\xdd\x0b\x16,\x98\xdc\xa8Q#\xf5\xc3G\x8f9z?\tTv\xb6\xa4<\x8dB\xfa\xa8\xc2\x16\x04\xe2\xb0\xf1\x1c\x8c\xad\xcbG,-\'9\xd1I\xc8^\xf5\xde\x1aF\x92\xa4\x94\xa8\xa8(y\xc7\x8e\x1d\xeb\xdb\xd8\xd8\x10\x1a\x1aj\xaf\xd3\xe9J>y\xf2d\xc7{\x95\xb5\x05b"\x8d\xe6#\x0efK\xcbx\xb3\xd9\xa9\x8cRA\x90BNi\x99\x01\xd5\xc3\xdb\x1cU8\xd1\xben\x05:\xd6,\xc9\xb4\xe1\x1d\x10e"\xde\xf6rj\x97\xf0fl\x97z4\xa8[\x15\x8dFE\xb7\x06\x15\xf8\xb2YeRR3\xc8|\xf9\x80F\xd7\xcf \x17\x04,\xc0v\x93\x13\'\xab\xb6\xe0\xab\xc1\xddiW\xa74\x9d\xeb\x84\xd2\xb1V)\xbe\xea\\\x9f\x80\xc0b\x1c8p\x80bE\x8b\xf0\xde\xf8\x12\xe0\xe5\xcb\x97R\xb3f\xcd\xc6\xac^\xbdz\xa0$Ii\xfc\xb1\xd0\xe0\xc7\xd2\xc3\xcf\xaf\xfb\xca\x95+\xa7\xe7\xe5\xe5\t\x1d\x06}O\x8e^N\xa0\xaf+m\xa6\xed \xedm4Kf\f\xa2r\to\xbelU\x9d\0\x1fwZV+N\xafF\x15(V\xc4\x87\xc6\x95\x8bR\xa7\x84\x17\xb6\xb66\xcc\xd9x\x92\x95\x07o\xd2\xafM\r\xc6\xaf8\x8c\x87\x8d\x88Z)\xe7\xfbU\x87\x18\xf1esZU/\xc9\xe3\x17\xd1\xd4\xae\x16\x8a\xb1@K\x8d\xca\xa1\xc4%\xa6\xb2h\xf7\x15R\x92R\x99:\xaa;>\x9e\xae\xf4\x9f\xb2\x01I\xafe\xc6\x98\xee\xf8\xfb\xb8\xd3s\xfcOT,\xe1\xc3\xfc\t=9}\xe9.\xe36]\xe0\xe5\x93(*\x85\xf8r\xf4\xd8\xf1\xbc\xe7\xb7\x8e\x7f\x9f\x1c\xf5\xa0\x8f\xd9dL\xf8o\xdbX\xff\xeb\x13\x88B\xa1\x90Y\xdc\xcb\xed\xc1\xbbL\xc9\xcf\xecY\xf3\xd2%\xde\x9e\xe9c6\x99\xde\xfe\x8d\xa7eP\x90g\xd7\xef\xcbn\xb5\x0f\x9d\xba\xc9\xd4=7\xb8\xfd(\x86\xb6\xf5\xca1d\xda\x06\x16\x1e\xb8A\xfbZ!\xf4\x9a\xb4\x8e\xbd\xd7^1\xbe_[\xd9\xea3\xaf\x9b\x93\xf6\xf2*Ho\xff\x10\xd8\xca\xceN\xe8,\x997\x8et\xb4i\xa0\x16\x04\x1cE\x91\xeb:#\xc5\x14r\x8c\x92\xc4~\xc9\x9dq\xfe\xb5\xc9CNx)o:\xd4*\xc5\xe1\xeb/\xb1H\xf0:]K\xff\xe6Uh\x13\x16L\xd4\x8bX\x12s\r\xb8)E\xfawkJ\xf7\x06\xe5\xe9\xd5\xa8"v\n=\x8d\x1a\xd4#77\x97\xde\xbd{O\xc8\xcd\xcd}\xf8\xf7\xd6\xe3$\xd0v\x81\xa3f\x81\xbf\\&\xc4\x98\xcc\x8c\xca\xd5\x8d\x92,R\xd1\x196\xca#\r\x14\xb2o\xaf\x1a\xcd\xfe&+>\x9b/\x8abN\xabV\xad\xc6\x96,YRY\xd8\0d\xe6\xacy\x84U\xaf\xc9\xa4^\x8d\xe9\xd3\xb42~>nd\xe7\xe4\x93\x1a\x97J\x97\x9a\xc5)\xe2\xa0B.\x8a\xf8y\xbbp\xf4\xf6\x1b\0\xe2\x132\xe8\xdd\xb66\x1b#\xad\xb0ob\x9e\x81\xa1m\xc2Xw\xecc\xb1\xe7\xa50\xe0\x91\x1fG\x85{\xa7\tR|,\xa8o\xe9\r\xe6\x89\xb9\xba\xc1I\x12\x9b\xfe\xa8{\xc9\xcb\xcb\xab\xe3/\xbf\xfcr\xa4O\x9f>\xc1>>>\xc2\xb9s\xe7\xe92\xf7\x88U\xb4)S\x80\xc9\xe4\xe8 \xe6mz\xbf\xf1\x03\x06$\xb1\x14\xae\xc5*~\xb8\xf7\xf23r\xa5\xcc7\xcb?5\xf0\x8b\x8f\x8f\x0fj\xde\xbcy\xdb"E\x8a I\x12%K\x96\f\x8e\x8d\x8d\xb5\x7f\xfc\xf8\xf1\xc9O\xc1\xd6\x0b&\xcb\x9e\x12\x82P\xa7\xaeZ\xe9\xab,|=o\x8b\x11MR\f\xa6\xfa\x8d\xd1\x19\xcc\x1c9{\x87\xb2\xa5\x8a\x10\x9f\x98\x8a\xad\x8d\x9asW\x1f\xa1R\x88l\xdb\x7f\x81\xb1\x1b\xce\xb01\xf2\x0eG\xae>b\xc0\x91\xd5\x14)\xc4\xb5.\x19d\f-\xd2\x98\x98<hS3\x84\x86\xa3V\x11\xf5*\x96go\x92X\xb1\xfb\x12\x0e23\x01\xfe\x01|3s\x11\xd5+\x87|\x18\xbdz\xf1\xe2\xc5\xb4\xb5k\xd7v\xb6X,\xd9\xff\xd3\xe4!\b\x82F\xa9TZ>=\xc4}\x1a\x1a\x8d\xa6\xfe\xce\x9d;w\x06\x04\x04(\x8f\x1e?Ex\xed\x1ad\xe5\xe9(\x1e\xe8\xcd\xce\xf3\x8fy\x9b\x9aK\xa3\xcaA4\x99\xb8\x9e\xcd\'n\xd3\xa1N(\xd3\x97\xfe\xc2\xe9\xabOhT\xab\f\xcb7\x1e\xc7\xc9^C\xb3\x86\xd5)\xe1\xeb\x8c\xb7F\xc0l\xd2\xb17\xf2\x02E\x84l\xb2/]\xc0\xf0\xe0\x01n.2\x12\xef\xdcf\xf6O\xfb\xf1\xf5\xb6\xa3T\x90/\x83\xa6m\xc2\xc3IC\xb7\xa6\x95\xa9T:\x90\xa8\xe8\x04<\xdc\x9dIIL\xc6\xdd\xc5\x01W\x17\x07l4*~9y\x87\xba\x95\x83\xc8\xc9\xcd\'8\xd0\x17_E\x01Y\xc9os\xaf\x9d?\xbaf\xc3\xba\x9f\xba\xa7\xa6\xa4\x1c\x96\xac\x10\xf9\x7f]\xfc\xd7CXF\x8b\xecK\xbc\xcb\x84\x7f\xae:\x97 \xed\xf5E;[\xdb\x0b\xbfWF\n\x05\xc9?\xe4f$\xf4\xba\xfd<\xd1\x17\xa0Q9?b\xe2\x92x\x90\xa6\xc5_-\xc7l6\xf1*G\x8f\xbdL\xc4b\x91\b+QBQ\xa6\xdeW\xeb~^\xb5\xa4\xdc\'\xfc\xed\xffq8\xe5\xe7\x0f\x18\xe2l\xdb\xc5\xae\xb0\xb9)\0\xd5\xd5\n\xf6\xf8\x04\xf2<\xa8\n\xabcD\x90)\xf0R\xcbqr\xb2\xa7f\xd5\xb2\\,\xeaG\x81\xde\x88F\xa5@&\nx{\xb8\xb2hb7\xe4\n9\xda|-o\xa2\xe39q\xe6&\x8b\x8f\xddg\xe5\xa0\xea\xf8\xf9\xf9\x11\x19\x19\xa9{\xf7\xee\xdd\x91\xbf\xb7\x16%\xd4[n\xaf\xdeRV\xa9\x10M\x12\xec\xce\xd3],!\b\xc5\xc68\xaa\xa7\'\x99,\xa9\x1b\xb4\x86\x9fupL\x10\x84\x1cI\x92\x10E\xd1"I\x92\x1e\xb0\x058z\xf4\x18\x8d\x9a6\xc3\xd5\xd5\x95\xe136\xa13\x98\x18\xd4\xa1&M\xeaW%8\xc8\x9f\x98\xd8$\x1a:\xd9\x13\x1cT\x84G\xcf\xa2\xd81\xa1=\x16\x8b\x85\x1b\x0f^c\xa3V\xf1\xe3\xc0\x8689\xda\xf1\xecu<\x16\x04\xe6\xf6\xa8E\x95\xf2%x\x1b\x13\xc7\xbbQ\xa3\xe9*\xcb\xe4\x8e(\x90d6\xe3-\x93\xf1\xc8`4Gd\x17\f\x8b\x97X\xffG\xddGj\xb5\xba\xe6\xb6m\xdb\xb65h\xd0\xe0C\x15k4\x1a>7\xe3t\x0f\xae\x93\x93|\xbf=\xb0\xefcg?\xea \xfa\xb0\xbe\x1fF&\xcb\x95NF\xa3\xf1S\xfb\xf0\x1a\x84\xb4[\xbb\xfa\xe7\xedl\xd8\xba\x8f\x98\xf8T\x16\xcd\x9e \x84U\xaf1z\xe7\x9e\x03w1\xeb>\xd5\xe0$.1\x98\x1b\xeb\xb2\xf3\x0fF8\xda\x84\xbf\xafF\xc3r\xd2\xf8r\xf2\f\xce\xfbUFi\xebL\xbf\xce\x8d\x18\xb3\xf1\xc2\x87\'\xb5\xa8_\t\xe5\'}\x8e\x9aYq\x94\x97K\x80@\x9a\xd9\xc2d\xf7\xdaH*{L\x85\x8du\xbdE\xe2\xd2\'\xa2D[[59\xf9:.f9\xd2\xb0\xe746\xcf\x1bL\xc3\x06\r\b\x0e\x0ev\xb3\xb5\xb5m\x9b\x9d\x9d\xbd\xef\x7f\xf0\x95\x96\x9b9s\xe6\xf2\x8a\x15+V_\xbbvm\xec\xa1C\x87\x1a\xf0+\x1f5GG\xc7\xd6;v\xec\xd8^\xbe|y\x9b\x81#&\xf1\xf5\x84Q<x\xf2\x86\xe1_\xb6 =#\x9b]\x93:\x92\x92\x9a\x89d\xb2V\x97\x06\x8bDB|\x12a!>\xcc=\xfe\x98c\xa7\xaeQ\xa7Jq\x86\xad>M\xf1\xa2^l\xdcs\x8cz\xf2l\xbc\x17m\xe7\x8aL\xe4\xf9~#\xf54*\xae\xeb\f\x94^\xf8\x04\x1bQ\xc0V\xab\xa7\xd9\xdc[<\xd2\x1b\x19l\x02\xd9\xfd}\xa4\x8e\x19\x85\xcal\xe6\xf6\xea\x03\xdc\t\xf2\xa4X\xe9`\xec\xcd"c\xc7~O\xfd\xf0\xf2\fiS\x1a\x99\xa4\xa5\xe3\x90\x05ZCV\xd25{c\xd2\xbe\xec\xec\xac\x9d\xff)\x83\xc3\xbf\x12\xc8\x1f\x07\x01\xd9J\xfe5f~6\xef\x1c\xa0 \x1bR\xee/\xca\x93~\x1f\xb2\x91$)g\xd6w3\xbf\x9d5o\xf9\x86\xd9A\x81\xe4i\r\xd8\xdb\xaaY5\xa4\t\x8e\x8e\xb6x\xb8\xb9p~\xe1@$Q\xa0\x88\x9f\'+f\xf4e\xdf\xe1\xb3\x81e*\xd6\xd8\xf9\xe8\xee\xd5\xbd\xc0\xbdBC\xc5\xdf\xf5\xb4vtt\x14rrr\xec%Ir\x04\x1c\xad\xfdrke8\xd5V\xb9\xa0\x98\xe2\xf3\xa6\xb9\xa3(\xf2\xd6\xa38\x93\x97|O\xf7\xb8d\x04IB\xa9Vq\xf1\xea}\xec\xecl\xa9?f\r\x0e\n\x19y&\x0b\xb3\xbb\xd7B\x14\x05&l\xb9\xf4\xe1\xf9\xdb\xc7\xb5A&\x13\t$\x8dvm\xdb\0\xa0\xd5j3\x14\nE\xee\xdf\x82x\x94J\xa5\xe8o4\x0e\x9am\xaf^T[\xa3\xd4\0\x9c,\xd0e\x9d0\x98\xef/p\xd4\xcc8]`\xb8\xb6Xoj\x0f\xa4\x16~g\x14V\x1cn\x0e\x0e\x0e\x8e\0o\xde\xbca\xe8\xcc-\xe4j\xbc84\xaf\x1f!\x01\xael\xbe\x19\xcd\xc8ug\x98\x9c\x92A\xa5\xb2A\xf4\\h\xb5\xd7h\x1a\xe4\xc6O\xb3\x87\xb0h\xed~\x04I\xa2y\xfdJ\x14\r\xf4\xe1\xec\xe5\xbb<x\x11OxX\b\xa1%\x02y\x15\x15\xc7\x94%\xbbi|\xef8\x03\xe5Y\x88\b\x84\xa9\x95\x1c\xce\xd7QZ)Ic\xb3\x0b\xc6\xc4H\x7f\x9c\xb9\x9c(\x8a\x8a\xd9\xb3g\xaf\xae_\xbf\xbe\n\xa0\xa0\xa0\x80\xb8\xb88\xeb\xac\x94O\xf5/6.\x02E\xc3W\xf1\xe6\xf4=\xe0\xad5\xf1K\x17\xa5\x82,=j\x07k\xa6\x11eNf\xb3Y\x83UP\b\x82\xbc46\xce\xe2\x8eWr\xac\xc4Y\x17*\xf5]\0\xa2\\\xc4\xa3lo\x92nm\xff\xf5}\xb9\xcahi\xad\xcd\xd2\xee\x1d\xe7h\xd3\xc4U&\x12e41\xde\x12\xc7\xd8\xd8D&\xba\xd7\x05\xa4\xcf<\xc1<=\\\xb9\xf8\xb8\x90$%Y\xe8\x9c\xf5\x02U\xa1-\xf0q\xc9\x957\xceV\'\xd8\xeeU\x8a\x90\x9b\xfb\xdb>x\x95\n%Y\xb9\xf9\x04\0IJw\x9a\x8c\xdb\xc8\xd2\xfe/\xe8\xd7\xb7\xb7p\xfc\xf8\xf1]\xd3\xa6M\x9bu\xf6\xec\xd9\xd9f\xb3\xd9\xf8O~\x9f\xe5w\xed\xdau\xaeC\x87\x0e\xce)))\f\x1e<x\xce\xa7\xc9C\x14EExx\xf8\xa4\xd9\xb3gO)Z\xb4\xa8<b\xecT\x0e\xc5*\xa9y\xfd\x11r\xb9\x8c\x16\xc3\x97ql\xe5(\xd6\xec:C\xfb\x86\x95\xf0\xf1\xf2\xe0\xda\xf2!\x14\xe8\x8d8\xd8\xdbr\xfbI\f\x93\xdbV\xc2\xd9\xc9\x1e\x0fw\x17Bt\xc9\xa4\xf7\xea\xc2TQ\xc7+\x83\x89\xd2\x1a%\xf1&3/\x8df\xf2-\xba\xfc\xd3:S\xb4c\x8119\xc6bII\xb0H\xe6-Z\x83\x94+I\x82\xbb(H\xae\xfad\xdb\xa4o&j*\xcbE\xc1_\x10\x14\xc6T\xc8\xb9\x9aS\xd9T\0\0 \0IDAT&Y^Y$-f)k\xd1\xb5_\x92,V\x91\xe8cA\x10\x1eJ\x92\xa4\xcd\xe2\x7fO\xc8\xff\x0b\x92\x84\xf3\xfb\xc6\xe5o\x92\x80\xa0\xec\x8eK\x80\xdfo\xfe\x91\x93\x1c/\n\x1c\xb7\xfc\x83\x96jRR\xe2\x96qS\xe6\x0e\xcep\xafP}L\xf3\xf2\x8c\x1e\xdc\x913\x97\xeeq\xeb\xf1[\xaaT\ba\xf9\xc6\xa3\xec}\x94\xc8\xd9\x05\x03\x98\xb5b/g\xa33\xb9\xf8\xe3\x8f-\xea\x8d\\\xd6b\xf5\xf0&l\xdcu\xc2x\xf5eB\x86\x97\x8d\x904\xe8\x8b\xda\xd9?n?mI\xd7\x1aU}\x9aW\xb3Wk4\xce\xab\x8e\xdeu\x1e>\xa0\x86\xb2y\xc3Z2\xbd\xd1$\x0e\x9a\xb5\x9dt\x9d\tM\xdc\x1dj*~;z=\xdbbas\x9c\x89.\x89\xa9\f\x9e\xbe\t\xa5L\xe4i\xa6\x0e\'\xb9\xc8/\x95K[?\x9a\xd1z\xb0}\x97\x9eM\xa52\xc5>{\xfe\xfdg1T*]\x94`\xdf6\xbc\x9f\0\xe8\xe1\xe1\xe1i0\x18\x8a\x03/~\xf5vaC\x05\xcb\x9cn.\xb6\xe1\x01\x85\xa7\xd7\x9b:\x83al\xae~\xdd\x06GM\xc4#\x83\xe9\xed\x12\x83\xb9\r\x90\xfe\xebu\x06\x06\x06v\f\r\r\x95i\xb5Z\xa6\xcc\\H\x92\xd2\x03\xcc\x16Vo\x8d\xa4G\xdb\xdal\xbe\x19\r\xc0\xfc\xa3\xf79\xdb\xf0\xe3L\xaf\xc8\xa84\x8e\x9d\xbeJ\xa0\xb7\x0b\xe3\xb6\\b\xf9\x99\xa7\xac\xff\xaa%J\x85\x9c5\x17_\xb0\xe6\xe2\x0b\xe6%\xa5\xe1\xee\xea\x80\xe9\xc1}\xba\xe7\xc5"\x16Vh2\xc0^\x14\x98\x96\xa5]\x90\xe8\xe4\xbc\x9c\x8c?\xee\xf0gkk\xdb\xbcM\x9b6e\xf2\xf3\xf3\x89\x8c\x8cL_\xbat\xe9\xbaK\x97.\x9d\xc2\xa3\xdc\x8f\x14\xadU\xf2\xb3\x07\xbb\x07\xbbS\x90\xb5GH\xbe\xd3@\x92\xa4\x1cWW\xd7\xac4m\xe6C\x9c\x03\xaaZ1U\x1b\x99$I\xbe\xc0\x0b\'\'\'!K\x15\xd8\x05\x85\xe6W\xb8\x8d\x13\xe8\xf3 \xfdU\xe4\xef\x1cn\xf26\x9b,\xed\xf2\xb3\xf2\xb7\xb5\xb5Q\xb6\xb7\x15\x04\xaa\x17\xd2\x99\xd7\xa4_\xe0L\xe4\xc9\x0f\xc9cI\xbf\xfa\x04\x05\xfa\xf2m\xbfF\xe8t\x06\x8c\x06-\xa5\'n\x01\xe4\xe4Z$\xd6\x17\xadBe\x1f\x17\xbe\b/M\xb7\x0e\x8d\xd0\x1b\x8c\xac\x1a\xda\x84c\x17\x1e\x91\xa772\xe8\x8b:\x84\x96,J\xf1"\x1e\xa8\x9e%\xa37\x9a\xe9^\xbb,5j\x873d\xe4\xd7L\xf9z\xa4|\xd3\xa6M\xd3\xd7\xae]\xdbt\xda\xb4iC\x81\x07\xff\xe0\xf7j\xb3h\xd1\xa2\x1d\x1d:tp\x16E\x11\x83\xc1@V\xe1\xd0\x99\xc2\xa8:c\xc6\x8c\xe5\xfd\xfb\xf7\x0f\xd3\xeb\xf5\xac\\\xb3\x91I_\x8f\xa5W\xe2;\xf2\xb4:\x9e\xbe\x88!Nk$\xeam\x1cyZ=\x9d\x7f\xd8\xcb\x95\xe5C\xe98~\x1d\xa5\xbc\x1c\xd8\xbcp$5+\x97$5-\x8b\xb0\x8a%\xb8up\x1f\xfd_\x1f\xa5\x85\xad\x1a\xa3$\xb2Mo\xe4\x8e\xdexw\x87\xc1\xb4\'^\xe2\x84(\x8aO\x7fK\x1e\xf9dzYa\x9c7\xffcw\x96\xff\x97\x06h\xfd\x95@\xfe\xc9\x90$\xa9\x9e\\.oe2\x99\xa6\0I\x1f~\xc7\xee\xee\xc2;E\xd1^\xbf\x1d\x06%AF\xf4\x89\x7f\x86zk2\x99\xcc\xef^_\x1b\x89\xc2\xfdJ\x99\x12\xad\x94\xab6\x1eb\xe6\xfe\xdb\x84\xb8\xd8\x90\x90\x98\xca\xdeGV\xc1\xa8\xadF\xc9\xb9\xe8\xc2Y\f2\x19N\x1a;r\xf52\xd6/\x9f\xa9\xd8u\xf0\x9cg\x8bF\xd5=m\xd4J\x12r\xed\xf9\xf9\xcak\x1e\xa5\xaa\xd98w\b\x9d;\xa5\xa3\xb1Q3r\xe6f:5,\xcf/K\xc6\xf2\xd5\xf45t\x7f\x93@\xba(\xe2\xf2+\x9b\xf1\x07F\x91,\x1bW$ Ek"\xb30Y\xa4\x19\xcd\bH\xb4\t\xf1\xe4\xd03k\xe2\xd9r\xee\x19]\xdb\xd7\'\xbc\x883\xe7c\xack[~\xe2!\x8b|\xech\xd1\xa8\xde\xc7_k\xd5\xaa\xb2\xd1\xa3G\xcf\xdb\xb4iS\xbb\x9c\x9c\x1c\xd1d25\x19\xa9\x94G4\xb7Q6)\xabR\xbc\'\x9frSo0\x8e\xcc)\xf8z\xaa\xadr\xb4\x9d((fj\rC\xa4\xbf\x91<\0\x8fY\xb3f}\xeb\xe1\xe1\xc1\x8f+WQ sg~\xafR\xe4iu\x9c\xbc\xfe\x12W\xa7\x8fMX\xb3$}H\0\x1f\x1a\xb3o\x12\xa9U\xe5\xc3`Ef\xae;\xc5\x86\x99\xbd\x01+$3o\xd7U\xbe\xebY\x99\x06\xc97\xd0\xd8}|n\x8eE\xe2\xa8\xd6x\xe4\x92 N6gd\xfc\xa1\xbf\xe4\xae]\xbbv\x10E\x91Q\xa3F\xed\xfa\xf9\xe7\x9f\x87\x7fH\x9a\xa9\x8f: \x88\xf3p\xf4\xad\x87\x93\x9f\x1d\xa2\xccj\xef\xefW\xa1\xb2d(\xd8!f>\xeb\x90\x96\x96\xa6\xc7N}\x13\x9frU\x11\x04P\xa8\x05\xa0\x18\xf0"+;\xb7%eJ6\xfc\x9c~`\x86\xecD=\xf1w\x17\xcb-yKM\xbf\x7f\xdf\x17\xec5\xf3e\xaa\xadw\xf4"c\x9a\xeb\x07\xb2\x84\\\xc6\xab\xd5\xcb8\xbb}\x0fr\xa5\x9a\x98\xd8$\x92\xdfe\xf2*:\t\xb5B\xce\xc5\x8bWhRx xn\xb20}R\x7f\\\\\\\x88\x8dOa\xd6\xb2\x1dtlV\x9d\xf4\x8c\\\x06um\x80(\x8a\xbc\x8eI\xe2\xc5\xebX\xca\x85\x04r\xbaq\x18F\xb3\x84Q\xa7C\xa9Tq)Z\xa4z\x97),\x1a\xd5\x92\x88\x88\x88\x1a\xe1\xe1\xe1\xb7V\xae\\\xb9n\xd7\xae]s(d\x91\xfd:\x9a4i2\xa5G\x8f\x1e!\xef\x05\x96\x01\x01\x01\xacY\xb3f\xe9\xa8Q\xa3\xcav\xee\xdc\xb9t\xaf^\xbd\xdaW\xae\\Yv\xf5\xeaU\x06N\xfc\x91\x04\x99\x07\xcd[\x9a8p\xf2&3\xc6\xf5\xc4\xdf\xcf\x93\xd2%\x03pt\xb0#53\x1f\t\xb0X\xac\xd3\x19\xcfEgp\xfd\xf6#\xae\xdcz\xc6\x92\x93\x8f\x18\x15s\x99\b)\x9e\xc7r\x91[z#\'\xb4\xfa\xcb\xab\f\xe6\xa9*\xb5\xfa\x82N\xb2\xd2\xcc\xfe\x16[\xf0\xaf\xf8_\xd4D\x17E\xf1\xed\xf4\xe9\xd3\x17\x8e\x1e=\xfak\x93\xc9\xe4\xf7\xf4\xe9S\xad \b\xb9Z\xadV\x8dK\xd0Bl]\xe4\x9f\xf5?Lz\x88\xb9\xf43\x92\xe5\xd6?\xf9\x16\x89\xe4g\xcb\xfb\xf6\xee\x12\xbe\xff\xdcc\xea\x97\xf4\xc0\xd7\xcd\x9eJe\x82x\xf5\xe45\x9dj\x96\xa0l\xe9 \x8c\x19i|\xd5\xbe\x06\x01\xbe\x9e\f\xfe\xa2\x1e\x16\xb3\x89\xfb\x8f\xa3\xe8\xd2\xae>\x11\xd3\xd6q\xf7\xe1K\x86\xf5n\x89J\x97\xcb\xb7#\xbe >!\x19oO7v\x1f\xbc\xc0\x9e\xfbq\xe82sh^\xaf\x02A\x96TZ\xdf\xbd\xcam\xbd\x89\xe2\x9f4\x85\r\x92\xc4\\\xbb\xf2\xbct\xf4\xa1f\x90;\xe1\xe5\x8bp\xf4\xce\x9b\x8f\x1bhb\x12\xf3\xbf\xed\x87\xbf\xda\x82\xcc`\xa0f)\x1f\xca\x94,\xc2\x80nMhV\xbe\b]\xeb\x95fP\xbb\xda\xa4&\xc6\xd0\xa0~\xbd\x0fS\xf9d2\x19J\xa5\xb2\xc4\xd9\xd5\xab\xdd&\xa8\xe5K\xa6\xda\xabG\xb6\xb2U\x07{\xcbe\xc2{\xa0\xfe\xb4V\x9f32W\xd7\xb3\xa5\\\xd6\xa1\xaf\xbdM\xd559\x05gnZ\xa4\xfd\x82 \xe8\x01\xdd\xa7\xa7\xcb\x89\x13\'\xee\x1b:th\xd9k\xd7\xae!(\xed\xe9\xd2\xae\x11Qo\x13psq`@\xd7\xc6\xd8\xdaj\xe8R\xaf\f\x83[U\xa5KxY\xccf\t\'IO\xdb\xb0\xe2x\xaa\x04*\x97)FjF\x0ej\x93\x11\xb3\xc1LZ\x81\x91N\x8d*R\xccNd\xf2\x97\x8dQ=\xbbB\xab\x9f\x17QA\x01\xb7\xf5\x06\x02\x15r\f\x92\xc4\xca\x1c\xed\xc3u&K+\x8b\xc5R\xf0G\xde_\x0e\x0e\x0e\x82\xbf\xbf\xffw\xfb\xf6\xed[{\xe8\xd0\xa1\x11f\xb3\xf9S\xd5\xfd;\xf2\x93\xb7\x93\xfej;\x06Cil]\x83\x90+\xad\x9a\x0f\x07\xcf\xe2RA~q\xd1\x90yP2\xe4{\xe2Y\xba\r2\x85\xd5\xde \xf9\xe9\x1d\x01\xf3\x0b\x02\xea\x1c\xc2\xa5\x88\xd3\x87W\xcbM5\xf3\xf6\xca&\x12nt\xc5\x98\xbb\xe7\x1f\xb1\xe2P\xb9\x8f\xfba\xdd\x9aV{Lj\x82^\xde\xff\xc0\xd0{\x9b\x9f\xc3\xe5\xbd\xe7\x19t\xee\x15\xfb\xef\xc4Q\xb5\x883z\xbd\x81ov\xdf\xa0\xec\xab\'\xb43\xa7"\0\'\x05O\x86=3\xb3\xf5\xcc\x03\x0e\xdfz\xcd\xcb\x84,\xfa\xb6\xaeA\xaf\x05\x07\xd8~\xee\x11\xdb\xce>\xe4\xd5\xab\x04:5\xaeH\x8b)\xdb\xd8p\xe2\x0e\x9b"\xef\xb0\xf5\xcc\x03\xba\xd6/\xcb\xb6\xc8\xbbd\x88\x1a\x0e\xde\x88FH}A\x11\x7foY\xff\xfe\xfd\xab6n\xdcx\x98\x83\x83C\x99[\xb7nI@\xbe \bf \xb0U\xabV\xdf\xce\x9f?\x7fL``\xa0\xf0\xc9=C\xb9r\xe5\x1c\xc6\x8c\x19\x13\xde\xb2e\xcbPA\x10\xc4\xa5\xcb\x7f\xc2\xcd\xd3\x8f\xd0R\xc5\x89z\x93D\x95\x10\x7f\xae?|CTT,j\xa5\x9c\'/bi\xdf\xa2.\x15B\xfciT\xc6\x8f\xd0\x12\x81\xd4\xaf\x18H\xab*\xc5pvv\xe4\xd2\xcd\x87\x94\xbbv\x9c/\x8c\xd1x\xc9e\xdc\xd6\x1b\xb5_\xe6\xe8"\x1e\xc8\x14#\xcdf\xf3[\x93\xc9$\xfd\xb5\xf5\xffU\x81Px\x82\xd0\xaf^\xbdz\xd2\xa9S\xa7vl\xdd\xbau\xd8\xcc\x993\x87%&&\x1au:\x9d\xe4\xe8\xe8\xa8\x1c0n\t\xcf\xf9hO\x8e\xd9\x04\x16\xe3\xbf\xa4\x9a\x95\x1b\xd3\xbe\xdb\xb3m\xbd\xcf\xa8/\xfb\x0f4Kr\x14r9eB\x82\x983\xbe\x1b/\xdf\xc4\xa1\x90\xc9\x18;\xb0\x1d\xebw\x9dDo0\xe1\xeb\xedJ\xbb\x19;Q\x8a\x02eB\x8bq\xfam\x06Bt&M^\xc71ut/Z\x0f\x9c\xc3\xcd\xe4\\\x16\xf4\xaaCp\xa07\xbd\xaaf\x13\xd1\xbf-\xbb\xf6G\x12\xfe\xe3\x1cT2\x01\xa5\0\x9fN\x18<kTq\xc4?\x18\x801\xab"\xb9\xbdy"\xe7K\x14\xe1\xd9\x8bh\xec\xec4\x94(\x1eHt|\n\xb5\xab\x97\xa3tH1\fz=;\x0e\x9c\xa7[\xdbzL[q\0[\x8d\x92\xa7q\x19L\xe9V\x16A\x10\xd0j\xb5<z\xf4\x88\xa7\xc7\x8e\xe1\xb4i\xbdp\xc4\xcd~\x84\xdd\xaf\xaa\x81,\x8b\x85\x1d\xb9\xba\xc7\xb3t\xc6n\xd5D\xa1\xc5 \x07M\xabG\x88\x84\xaf\xdfX\xdf\xe9\xfe\xfd\x13\x8b\x16-\n\xf9\xb4\xdf\x14\x11\x11\xb1{\xe2\xc4\x89\xf5SRR\xe87~9\xb9\x1ao\xf6\xcf\xf7\xe1\xe4\x95\xa7DF\xa5\xe1\xa1<\xcd\xe1%CX\xb3-\x92m\xb7chY\xd2\x83\xef\xc7w\xa7K\x9b\xba\xdc\xb8\xfb\x8c\x1e\xed\xeaP\xadr\x19b\xe3S\b)\x1e\x80\x83\xbd-\x12P6\xa4\x189Y9,\x9b6\x9f9O#q-T\xe3\x9b\xb1R\x9bOhuI\x8b\xf4\xa6\xb6\xc0\x1f>CU\xab\xd5\x8a\xbbw\xef\xdeioo?[\xaf\xd7{\xe2Yq3\n\xb5#\x89\xb7\x96)\xe5\xe2\x8eB;\xed\x18y\xe6\xb3\xe6\xa6\xbc\xb4\xe9\x04\xd5\x99\x8c\x9d\x9b\x88B\x03Ekv\xb1\xbc\xc5B\xe6\xcb\xd5\x18\xb4\xa0\xd0X\xd9Zv\x9e!\x92L\xb9\x1c\x8f\x12E>~\xd9\xf1:^\x1e\xef\x8e\xc5\xb8\xff\x9f\\Z\x11\x02\xaaL\xf2\xf6\xf2\xe4R\x9a\x86;\x8ea,\xcb\xba\xce;\xb3\x05o\x99H#1\x89f\xf1\xf1Lr\xad\xc9\x83\xa7o\xa9\x1bf\x858\x8b\x1b\xad\xde`\x12p\xc7\xe6sG\x9f|\x8b\x05\xb5\xe2\xf33e\xbdr\xfe$\xa6|\x0e\x07\x96rR#\x97\x89\xa4\x15V\xc0\x81\x0e\xb6\xb4\xeb\xd0\x91FC\x17\x12\xe6\xb6\x99\xe1\xfd;\xa8&M\x9a\xd4e\xc2\x84\t]\xe2\xe2\xe2,999&\x17\x17\x17yhh\xa8\xf8)\r\xf8\x93J\x9f\xa8\xa8(N\x9e:\xcb\xcc\x9f\xcf\x92\xa6r\xe3b\x93\x16\xbcI\xc8`\xc3\x0f\x03\x91$\x88J\xcc\xe4y\\\x06-\x1aT\xa1\xfb\xbc\xfd\x84\x04\xfb\xf1\xe4e\x1c\x95\xca\x06\x91\x9c\x9a\xce\x8c\x1f\x0fP%\xc4\x8f\x01=\x9aQ\xf4\xf0.\x86\x90\xc0a\xa3\x99\xdb:c\xc2\xb7\x05\xc66\x12\xdc\xfdw\xb8,\xff\x95@\xfe?\x8c\xac\xac\xac\xdd\xb3f\xcd\xaa\xbf`\xc1\x82\xc1\xa5J\x95\xa2T\xa9R\x1f&E5\xa9y\x8c\xe7W\xb3>\x87\b\xe0_:\xa5\x9aL&\xf3\xbe}\xfb\x06o\xdd\xb6\xfb,Ej\xce/Y\xbc\x8c\xdf\x86\x1f\x86\xd0h\xf4jt\x16\x89s\x0b}\xf8z\xc1.n$\xe5\xd0\',\x97N>\xb5\xacU\x83\xc5:\xcc\xa2[\xa5\0\x86}\xd9\x9c\x84\xe4w<\x8f\x8a\xe3f\xb2\x95\xa4\xf5\xc3\xce\xab\x1c]:\x94\xda\xd5\xcb3b\xeaZ\xf47\xaf3\\\xb4\xb2c\xaa\xab\x94\\(0\xd0\xc2F\xc5\x13\x83\x99\xf1>ux\x8f\x95O\xefQ\x07\x07;[\x8e=\xbe\x86\xc1`$>%\x83\x99\xebN2\xa5_#^G\'3\xf3\x80\x95\xf6\xea\xa7\x96\xd3\xb9M]\xae\xc6g}h\xa0fef\xb0s\xcd\x1aL+\x7f\xa4l\xc2[\x9a\xcaD\xabv\xe2\x93\xe4a\x02n\xeb\f\x86\x15y\xfa\xa5\xe7,\xd2t[\xa8\xf3\x8d\x83z\x96\xa3(".]I\xcfn\xdddiii\xcf$I\xca*L\x1eN\x13&L\xd8\xf7\xf5\xd7_\xd7\x17\x04\x811_\x7fO\x94\xe8\x0ez3\xc7N\xdf\xa0K\x8b\xaaD.?N\xaa\xc1\xcc\x8f\x9b\x8e\xd1\xb1y\x18\xdbn\xc7p\xf4E*\xaf\xc6\xaeb\xe3\xf7\xfd\x98\xbc\xf9":\x8b\xc4\x88\xfa\xa5\xe8\xd0\xb2\x16m\xa6nC\x02\x86\xd6+\x81\x8b\x93=\xbd\xa6\xadg\xd7\x9bH\\\x95\x1f\xab\xc9\x8a*\x05\xcbs\xb4\x86uzS7\xac\x1eM\x7fx\x98L&\xb3F\xa3\x99\x9d\x9b\x9b+\xa1v\x1f\xe7\xe4\xee\xdfX/()p-\xb6\xd5\x90\xfcd\0)\xf7g*\x14\x8a\x8bF\xa3\xd1\x8c)i\n\xcf\x8e\xbe\xa2x\xa358\xf9\xaaP\xda@\xd1\x9a\xdd\x90,~\x98M\xd6\x0b\x8b\0.\x81=p\xf4\xd3|\x18h\x96\x9ff\xe1\xd5\xe9A\xffB\xf2\0\xa7\xe0\xa98\xfb\xdb%\xa7f\xd2\xa4J1\x96g\xe9h\'\xcaX\x98z\x89\xeaJ\xeb\xeb\x96V\xcaX\x99y\x95C\x96Zh\x0b\xac\x85\xa2\x9b!\x1bdV\x07\xdd\x9b\xca\xcf\xa7\x01\xd4\xf5w"\xbf\xe0\xe3\xcc\x15;\xb9H\x9fN\rY\xb6\xe1#IO\0\xe6\x8f\xee\xc0\xc9s\xb7A\x82\xa6\xc5\xdd\x98=\xbe;\x89)\xe9\xd4.\xe9OL\x86\x96\x1b\x8f\x93\xd0\x9bos\xfe\xfce\xea\xd7\xad*\x06\x15+\xa6tqq\xc1`0\x90\x91\x91\x81\xc9d"33\x93\xe4\xe4d\x9e\xbfx\xc5\x9eC\x17\xb9\x95l\xe1\xe6\xae\xd9\xb8x\x071|\xe9\x11$\t\x96\xee\xba\xc2\xb5;\xafX\xfe\xfd0\x16\x8c\xefLl|\n\x19\xd9\xf9h\xe4"\xcf_\xc5\x12\x12\xe4\xcb\xc0y{9\xb4`\x10\x97b\xb3\xb8\x18\x9d\xce\x953\'\xd8`\x88G\x12 \xc1d\x8e\xfeAgj\xc4?a\x13\xf2W\xfc/N yyy\xd2\xce\x9d;G\x18\x8dF\xfd\xd7_\x7f=\xa2|\xf9\xf2\xe2{\x8c\xb5c\xdbf\x9c\xbc\xb6\x9c\xe7\x167+|`\x1dU\xf0/\xdbY\x14\xceo\xd8)\xc4\\8j\xb1\xc9\x98\xb4q\xab\xc7\xd7:\x8b$\xbco\xb9=I\xb5\x92j\x92\xb3\xb4xy\xb9\xd3\xb5\xa2\x1f\n\xb9\f\xb9Ld\xcd\xfc\xaf\x98\xbb|;\xdf\x1f\xb8\xc3\xa5eC\xa8\xed\xe7\xc8\xed\xa4\x1c\xd6~\xdd\x11\xbd\xde@\x8e p\xf6m:K?a\xc7\xd8\x89\x02\xc1\n\x19\x9b\xf3%\x02\xd6md\x95\xc6\x99\xfc\xfc\x02\x82\x8a\xf9\x93\x96\x91M\xe4\xd9k\xd6\tk\xfb?Z\xe3d\xe6\xe4\xe3\xe4\xf8qSH\xd0\x99\x10\x04\x81\xba~\xf6<~\xfc\x8c\x91\xe9\xcf\xa81/\x91b\n\xb9\x15\xbb\x94\xfdv\x16\xf83\x83Q\xda\x9f\xaf\x8f\\i0O\0\x1e\xc9\xa1\xfe\x8f\xf6\xea\xdd\x15UJ\xc5\xbe\x1a\xe1\flg\x1d\xb6V\xb3f\xcd\xda\xce\xce\xce\x03333c\xbe\xfb\xee\xbb\xd9_}\xf5Ue\x85B\xc1\x9c\xf9Kh\xd1\xb2\x15\x11E}I~\x97\xc5\xa3\x17\xb1\xd8\xda|\xf4\x1e\xbb\xf1"\x99\xfe\x9d?\x11\xa3e\xeb\xc8\xcd\xcd\xa7\xb4\xa7=w\x92rXq\xee9m\x9b\xd5\xa0\x86\x9f\x13W\xe3\xb3\xf8\xe9\xc2KjW\x8bb|U\'*\xc4\x7f\xbe\xde<\x8b\xc4^\x83i\xba\xee}\x83\xe4O\x8a\x0fS\xe0\f\x99\xd2\xf9\xad3\x89\x89\x89\xa1\xed\xf7G!\xb0F8\x1e%\xeb\x19s\x92\xa3y\xf7\xf2\x17\xb4I\x87E\xa9`\x97\xe5\xe5\xb1\f\x82\x9b\xec\xc4\xa5\x88-J\x1b\b\xae[\xe73\xb6\x96W\xe9\x8f\x03\xba\x8c:x{m\tf\xed\x96\x7faI\xa5*V\xaa\xde\xe3\x9eV\xce\x86\xbd\x17\xf9nl7\x8e]\x7fM\x14\xc1L\x97)\xf1{w\x9e\xd0\xc2J\xc2O.\xa3\xec\xee\r\xacze\xf5nt\xb0\xe8@\x06y\x92\x85\xf6mk\x92\xa5W\xf14!\x9b:\xa5}\x19\xda\xbb\x15\xaf\xdf&0\xfd\x8bj\xf8z\xbaP\xa3ZY\x90`d\xdf\x96\xb4\x8bK\xc6b\xb1P&4\x18\x85R\x81\x8d\x9d\x1d\xa7kUD\xb0\x98\x90$\x89\xbc\xfc\x02"z7E.\x97\x93\x99\x99\x8d\xa7\xbb\x0b\xab\xefhY}\xfb<\xc16\xe7X:\xb1\x13_}\xb7\x9e\xd7\x99Z@dV\xbf&4\n\xafA\x01\x0e\\\xcer\xc4\xa0\xb4\x90\x99\x95Crj\x06\xc7\x16\x0eB\xa77\xf0&W\xcf\xdb{q\x8c|\x1d\xc3\xdcU\x87X>\xbd\x1fY9y\x9c[6\f\xc9bA\xa77\xb0`HSTj\x15?G\xb4\xe0\xca\xa6M|y\xeb\f7\x8cfR\xcc\x96\xf8\xbf\x92\xc7_=\x90\x7f\xa5\x99ny\xf2\xe4\xc9\x89\r\x1b6\\6\x99L\xbe\x92$\xf9\x9bL&Yhh\bm\x1a\x87\xb1f\xcb\x01LJ;\xd0\xe5J\xbc{\xba\x80\xff\xb9j\xd6\x80\xd9x\xf6\xca\x837\xa1k\xa7\f*=\xacC]B\x83\x03\xf0\xd0H\xcc\x1c\xd4\x8ar%|1\xe8\r\xb4iZ\x9d\xd2%\x02\x98\xbb\xea\0%\x8a\xb83\x7f\xf3\x19R\x0b\x8c\xc8r2\xf9f\xe4\x174\xab\\\x8c\x84\xa44\xba\xcc\xfe\x85\xbeM+s\xe1\xcce\x86\xbe\xbb\x8b\xcb\'\x9b\xba\xabL\xe4\x82\xba\b\xd5\x86\x0e\xe4\xf4\xe5\x07\xe8tzV\xec<\xcf\xa2\xa3w\xf0R\t\xd4\t+\xc3\xce\x0b\x8f?B\x10iY\xf4\xef\xd2\x88=\xa7\xee\xa2\xb7H`6b|u\x8fv\xd1\xd7\x98\x9ax\x8b\xda\xa2\x16W\x99\xc8\xaf\xe70\xea%\x89\x07\x06\x93eC\xae\xee\xc4W\xf9\xfa\x01\xcfm\xec~0\x1a\x8dya\xa20i\xa9\x83fu]\x8d\xca\xf6\xa4VW\xe0\xf2\xcdTy\x85\n\x15\x04\0___Y\xcf\x9e=[\x0f\x192\xa4W\xeb\xd6\xad}\xe4r9+~\\E\xf5\x9au0\x98$f\xfdt\x18,&\x06\xf4hN\x81\xde@\xaf\x06ei]5\x98\x92\x01n\x18\fF\xf6_\x7f\xf9\xe1\xfd\xfb4\xad\xcc\xf1\xcb\x8fI\xd1Z!\x86\xd6U\x8a\x91\x9d\x9d\xcb\xbd\xb8\f0\x1b\x91G\x1e\xc4\xff\xca\x11J\xc9\x85\x0f\x8e\xb1y\x16\x89\x1f\xb2\xb4G\xee\xc8\xe4#\xffa\xaf\xe0\x0f\x8a\x16\xcd\x9b5\x1b8p`\x8d\xe7\xcf_\xf0\xcb\x8d\x18\xeb\x81Di#`\xef\xe1\x8c{\x89Z\xb8\x04\xf7\x95\xec|F\xa0\xb0\xf3 \xfeZ26\xee\xc5\xd08\x82(\xe7w\xc7\'\xa7<{%\xa4=\xee\\X\xf8\xfd\xddP(\x14\xa2\xc5biX\xaev\xdb\xed\x07\xb6,u\xefR\xb74\xe1\xd5K\x13\x14\xe8K\xe3\x1a!\x94\xf3\xb2\xc37\xd0\x0fc\xab\x16\xe8.\x9c\xc1\xbb\x90M\xf46\'\x9b\x90\xb7\x0f1\x99\xa0TA\n%\xe5\x16\xf2,\x12\xcfj4\xa4E\xa3\x9a4\xaaQ\x1aO7\x07\x1c\x1c\xec\xb8z\xeb\t\x0e\xf6\xb6\xa4\xa6e\xf1\xece\f\xfa\x82\x02&.\xd9\x8fZ\x0e\x19Y\xb9D\xc7%S\xa0\xd5\xd2~\xc6\x0e6\x9f\xbc\xcb\xe6S\xf7\xa9S\xdc\x83\xe7\xaf\xe2\x18\xbc2\x92-\xa7\xefs\xe6\xc6\x0b:6\xa8\xc8\x96Sw\xa9\xe4a\xc7\xca\xe9\xfd\xc8\xcc)`@\xf7\x96\x14d\xe6\xf10\xddL\xc4\x17\xe1\x1c>u\x1b_/\x17\x86\xb6\xaf\x8dZ\x97GQ\x7fOz/>\xcc\x80\x16U\xd1\xa8UT/\xe6\xca\x83gqthX\x91);.\x11\xf7"\x8a\x8a\xa5\x03\xe96i=\x03\xda\xd7&\xf2\xc2]\xd2\xd2s\xa8_\xb3\x1c\xd7o\xde\xa5\xe5\xae\x95\x94\x90\xcb8\xa35\xe4N+06\xfc\xb3\xed\xe5\xff\x8a\xffB\x1d\x88\xc1`8\xfb\xddw\xdf\x9d\x9d5k\x96\x9b$IU;t\xec\xb8)(8\xd4]\xa7t\0\x83\x16\xd2\xdf\xdc\x90\xc9d/\xcc\xe6\xff\xb904##C\x82\x8c\x88\xbd\xfb\x0f\xd4z\x96\xe3\xe4[\xb3\xa4\x17\xf3\xbe\xedO\xff\xf1\xcb9\x19e%\xe8\x9c\x9e\xd7\x97\xf9k\x0e\x13\xf9:\x8d&\x0f_1\xb2K\x1d\x06\xaf\x8c\xc4F\xa3Bg0\x11V\xa94\xdd\xbf\xdb\x85\x04\x1c;}\x9dq]\xab\xe37c\xefo\xfb\xa4\x16\x13\xf1I\xef0\x9a\xccL\xdd\xfb\xb1\xef\xbf\xee\xe2+\xba\xb6\xad\xc7\xb7\xed*1\xeb\x80\xd5=\xe3R\\\x16\xe9\x19\xd9\x9c^>\x8ca#f\xd0\xf7\xc5y\x1aEk\xb1\x13\x05\xf8\x15\xa3\xcb\x04\xc4\x1aM<4\x98R\xf7\x14\x18\x7f9g\xb6\xac\0\x9e\x01\x9e^yy\xe3F\xda(\xbej`\xa3\xf2u\x14E\x8e\xe5\xeb2\x87\xe5\xe9\xa7\xde(^|\xd9\xa7\xaf\xf1~\xe4\xa7\xd9l\xe6\xe7\xf5\x1b\x19\xbb\xed>U.$0w|\x17n\xa6\xe4q3\xe5)w\x9f\'\xb0\xea\xfbA\x8c\x9a\xb9\x81\xa2>\xce\x8c\xe8\xd3\x8a\xdc\xfc\x02N\xcd\xef\x8f\xd9d\xe2\xc2\xd5\x87\xd8\xd8h\xa8T\xd4\x15\x7f\x17\x1b\x8e\xbeH\xc5\xd3\xd3\x95\xabO\x13\xc0bfh\xdcu\xc6Zb\x90\xd42Ni\xf5\xb4\xb1Uc\x06\xb6\xe5\x15D\xed2[\xfaH\x92\xf9\xdf\xa5\xf0\xf5\x186l\xd8`{{{\xca\x94)M1\xe9\x17\xde\bn\x1f\xff+\xca\xc0\xd6\x15l]\x9dp\x0fnE\x91j \xfd#\x86\x8f\x04\xd9\x89\xf1\x92$5\x01b\x80$A\x10\xf2\n\x8bAy\xa1>\xc8\x1f(\xdd\xb1S\x97\x1a\x19\xf9\xb2\xc6\xe7\xe2\xcc~\x95\xaaT\x15n\xdf\x7fN\xa7\xd9\xbf\0pn\xd1@\x86\xce\xdcB\x9f\x16\x95\t-\xe1O\x89b~\xec\xeb;\x86\xfcU\xf3Pc\xc4I&\x12\xae\x84\x86\x05\x0f9n\xd6\x03\xd6\x8ap\xfe\xbe\x9b\xcc;\xf5\x11\xf9\xdb;\xa53\xf7_\xc4\xb3\xf3\x8e\xd5\x90\xf9\xab\x86!\x84\x04\xfb\xf1,K\xc7\xb3SV\x0b\x9c\xf1\xcd\xca\xa0\f\xf4\xfe\xecS\xd8\xd9\xda\xf0.\xf3\xa3v\xb6\xb4\xa7=E\xfd=9\xbfp\0*\x95\x92]\x07\xcf\xb3\xe4\xd4S\xea\xfa;\xf1\xc3\x84n\xd4\xa9\x1a\x85\xc6F\xc3\x8fg\x9eb:\xfd\x84\xa3\xdf\xf5\xe0\xdb\xd1=\x182\xd9\xea\xe5\x99\x94\x92\xce\xbe\x93\xb7p\x1028\xb3n<\xf7\x1e\xbdD-\x139\xf7\xea\x1d#E9\x89:\x13\xfb\x8e^\xc2\xd7\xcb\x95\xfe+\x8e\x93\x96\xf6\x0ey\xe2c\xda\x0bpSg0/\xd4\x19{[\xe0\xd1_\xdb\xfb_\t\xe4\xff\xa6"I\x03\x8e\xef\xdb\xb7\xbf=>\xf1\x8b\x90)\xecH|\xb0V0\xe7\xad2K\xd2\x1f1\x10*\xe5\xc4\x81-])\xd1\xe2dB\x81I3\xf0m\xc2\x87\xe4\x01 \xc8\xe4\xdc\x89\xb5\xd2g\'o8\xcf\xde\xef\xbf\xe4\xd2\x92\xc1$\xbf\xcb`\xf8\x8cM\xfc8\xf5K\x94\xa2@\xbe\x19\xb4:\x03\x19\xb7.\xa2\x12\x84\xdf\xc2\'2\x15;\x8f\\c\xec\xa0\xb6\xfct\xe6\xa9\xb5\xaf\x02\x98$\x89\xfe\xd36sf\xfdD\xba\xb6k@\xd2\xbb,\xecm\xd5DG\xc7p\xe1\xeb\xafY\x1bs\x0f\x0f\xa5X\x88Z\x7f\x8ct\x8b\x85c\x8e\xee\xbck\xd4\x84\x05\xabV\x8d\x05\x0e\x01\xbe\xf6\x02-\x06+\xe5K*\xab\xe4\xf5*\xa8\x94*G\xd1\xaaR\xfe);\xff\xdel\x9d\xa9\x07\xe0acc#\xfc\xad\x06\xe8\xfa\x8d\x9bY{\xe4\t(4\xdcN\xc9C\xa3\xfcx\xda\xbe\x1c\x9fMzz\x16\xaf\x92\xb29\x1d\x95\xc6\xb1\xdb\xcb9\xb0d\x18]\'\xad\'\xd8\xdd\x8e)\xc3\xdb\x11\x14\xe8C\xa7V\xb5\x90\xcb\xe5Luv$//\x9fg\x99\x05\xd4I{\xc5W\xe6\x18l\n\xfb3E\xe42\x12Lf^\x18My\xdf\x15\x18;\xfc\x0e\x8d\xf8O\x89\x80\x80\x80\x8eaaa\xb6\0\xa1\xa1\xa1\xac\x98\xd6\x87\x16\xdf\xee\xe2\xb74\xf1O\x12\xca?,\xf0\x05\x96\xcc\xfb\xbe\xbe\xa3\x9d\xaa~Zz:G\xcf\xdc4=\x8dN6\x8d\xed\xd9\x90\x89kO\n\x1ev6\x8a\xc5\x13{\x88=\xe6\x1d\xc2\xb7dE\xe6\x0f\xea\xc8\xa2U\xbfp\xefu*\x8e\x0e\x9f\xf7/\x92\xf2\f|\xbd\xdd:\fp\xf3\xe8V(l\xdd\xe9\xe6\xdf\x8c\xe91g\xe8\xaf\xb1\xde\xee*\xe1c\x05\'\0"\xd2g\xc3\'l5j\xd2\xb2?\x92\xcc\xca\x86\x14\xe1\xc5\x9b\xcf\xed\x9b\xca\x94\n\xe4\xf1\xcb\x8f\x82\xf1P\'5\xbe~\x9e\xec\xbe\xf6~\x80\x99\xc0\xe4\xa1m\xb8q\xf7)\x1e.\x0e\xc8\xe4r^F[\x8b\xfd\x8bqY8;\xda\xd1\xaaim6\xee<\x8e\xa9\x10\xd6\xcb\xca\xce\xe5\xd1\x93\xd7L\x1f\xd5\x85\xc0\x9d\x91\xf8z\xbbs\xe9\xdesb\x1f\xee\xe7\x8b\x8e\x1d\xd0\xa8U\\X>\x8c}\xc7\xaf`\xa7QR\xc1\xdd\x16\xbd\xc1\x88\\.R\xcaI\x85\xf3\xe6\r\xf4\x17\x92\xd8\x9cW \x1d\xd0\x9b\xc6\xe4\xc1\xfe\xbf\xb6\xf6\xbf\x12\xc8\x1f\x94I,W\xdc\ro\xaa\xebt:rM\xb9\x7f\xac\xd4G\xb2\\\xe6\xd5\xa9\x9e&\xb1\xd9\x0e\xa5\\\xa6,\xe5\xa8\xc6\xc1FA\xb5R>Hf\x13\xdd\xeb\x96D\xb2X\xf8\xa2M=TJ%j\xa5\x9cz\xa3Wc\x91\xe0\xfe\xa3\x97,\x19\xd1\x82\xc7\xcf\xa3i\xd5\xa4:/~\x9e\xfd\xb7\xce\xa7\xc4\xc8m\xd9\xff8\x89\xbaw\x9fq~\xe9\x10N_\xbcCjZ6%\x83|\xa9V9\x94+\xb7\x9f`\xa3V0t\xde^\xcc\xa9q,N8O\x84\xca\x8c(\x13\xff\xe6\x92\x1dE\x91\n\x99\xef\xc8<z\x98\xed\x0e\xea\xb9\xb6\x820\xdfE&\x8a^r\x196\x85#Ju\x92\xc4\xd9\x02}\xfe\xd2<\xfd\xbc;\bs\x01\xbd\xab\xabk\xf5\xf7\xe2\xc3O\xfaBl\xda\xbc\x95\xb2\x15\xaa0+\xa84\x8e\x0ev\x9c8{\x13\x9d\xe1\xf3\xfc,\x88\x02\xfaB!VB\x81\x89\x98\x98D\x9a\x94\xf3g\xfd\xb5(.O\xd8\xc0\xd9\xc5\x83X\xbe\xe5$\'^\xa5\x11\xe6e\xcf\x8a\xe9}hT\xc4\x96\xa1\xcfo\xe3\xa0\xfa\x98\xb3J\xab\x14,\xcf\xd6J\xfb\xf4\xa6\b\x0b<\xfcw\xdeF-[\xb6\xac\xe9\xeaj\x95[\xa4\xa4\xa4\xb0|\xe5\xcf\x16\xe4n\xe2\xff\xcdk\xba(D\xc2\xaa\x94\xa5q\xc4O\x9c]>\x8cc\xd7c\xe5M\xea\x14\x93w\xec\xf4\x05\xdf\x1f|\xc5\xf8n\xb5\xa8Y3\x8cq\xad\x93\xf0\xf7q\xe3\xf8\x99\x1b4\xac]\x9e^\x1d\xdd\b\xf8?\xec\x9dwxT\xe5\xba\xf6\x7fkMK&\xbd\'\xf4\x16\b\xbd\xf7\xde\xbbt\x94&"E@\x04\x15PD\x8a]\x14TD\x10D\x11\xa5H/\xd2{\xef\x10j\b\x10 !\x8d\xf4\x9e\xe9\xb3\xd6\xfb\xfd1\x91\xa2\xfb\xec\xb3\xbf}\xf69{\xa3s_\xd7\xfc3\xb3\xda\xacw\xad\xf7~\x9fv?e\xc2y\xa9iE~:\x9f@JJ:\xd3\x074a\xd6\x86s\0\xec?q\x9d\x91\x83:\xf0\xd9\xeek\xcc\xad\xd4\x1d\xef\xa4c\f\xd2\x15=\xa23\x01x\xc8\x12~\x0e\x0b\xbf\xe5W\xf5\xa8\x1a\x82\x9f\xaf\x0f\'\xe2]\xdd\x19\xfb\xd6\b\xa7n\xadH\xde\x9d\xf2X\xe1\xbfg\xd5\x10jDU\xe2\xd5\xc5{@\x96y\xbdSu&\x8e\xec\x8d\xc3\xa9\xf0\xed\xd4\xbex\x18\xf4D\x84\x85\xe0tX\xe9\xf9\xc6\xd7\bc \x03\xeb\x94\xe2\xbd7_\xe0\xc2\x94oi[-\x8c\xb4\x8c\\\xfa\xbd\xf6\r\xf3\xa6\xf4\xe5\xdbW\xbcX\xbb\xfb"\x91U\xca3\xe0\xcde\xf8yh\xd9\xf9\xddtrs\xf3H\xd3\'\xa0i\x12IvV\x16\x97\xae\'\xf0 =\x9f\xaf?\x18\xcf\x99\xf3\xd7X<{\x04\xa5\xc3C(6[y\xa3w\nm\xa3W`Q\x05\xd1ve\xf5}\x0f\xcfo0\x9b\xdd3\xbb\x9b@\xfeu\xc8\xca\xca\xfa\xdf\xf3\x91\xab\xb6\xadR\xf1\xb9\xad\xfb\x0f\x1dxa\xdb7\x93\xc9\xca\xc9\'+;\x17\x8d,\xf1\xfa\xd8\xfe\xa4e\xe60v\xceO4\xa9\x16A\xaf\x0e\r\x1e\x15\xb7\xbe\xbe\xe2(k\xdf\xea\xc7+#\x9f\xa3\xe7\xe8\x8fy\xaf(\x17<\xf5O\x1d\xda$\x04G<]\x93\xf6;\xabNp\xaeM#\x06=\xd7\x8e\xd8\xdb\xf1$$g2f\xd6\x8fd\x9b\xecl\xfal\f\xa1)wX\x94s\x8a\xaa\x06\xcd\x1f\\U\x0e!\xd0K\x12\x9a\x92\x01\xaf\xad\x95\xc1^\f\x9e\x86\xa7\xc6?KQ\xb9fs\x14o4\xdbW\xefR\xd4O\x81\xe4\x92\xaa\xdc:\xf3\xe6\xcd\x9b\xf3\x9b\x88\x1e@jj*\xef\x7f\xf4\x051Yz\xe6T\xabK\xf7\x99\xab\xa8\xe8\xadg\xd7\x92)8\x9d\n\x07>{\x89\xc4\xa4t.\xdf|\x80\xc5b#\xdd\xf6x\xad\xab\xd7i)0Y\x1fYR\xa7\xce]\xa7W\xbb\xba\xec\xbb{\x98\xf3\xe9E\xac\xdcp\x90\xe7\xdbGR\xff\xe8\xd3\xb7\xda\xac\nn;\x94\xf5\x99\xde\xde?QT\xf4\x7f\xfa\fU\xadZ5\\\x92$\x9cN\'\x8b\x16-:\xb6w\xd7\xd6Y\x84\xd7\xff\b\x9f\xf0F\b\xc5\x8a\xcd\x94\x80\xd3\x92\x8b\xd6\xd3\x1f\xbd\xb12\x9e\xbe\xc1x\xfa\x83F\xff_\x13\x88\x87\x0e\xd5\xe9\xe4\xf3\xd1\x1dP\x81Q}\x9b\x13\x11\x16\xcc\x89\xb3\xd7\xf8\xf5\xb3\x97\xf1\xf4\xd03f\xc62\xde\x9d\xf0\x1c\xa5\xc2C\xd8w\xf8,\xfd>\xd8@\x98A\xc3\xeeo&1zh\x17\x9e\xefc!/\xbf\x88\xb1#z\xa3\xd5\xc8\xccXw\x96\xb5\x97\x92\x181P\xb0\xf1\x9d\x01\xbc\xf1\xf5\x0e\xde\xd4t&+\xe1$c\xb4\x99\xe8%P\x04xI\x12\xc3\xdbV\xa1i\xb7^\x04\xfa\xfb\xd0\xb8~\rb\xe3\x1e\xb0rj\x1fB\x83\xfd\xa9[3\x92\xc4\xd4\f\xe6O\xe8\x86\xc9l!""\x84\xa6\rj\x92\x98\x92\xc6\xde/_A+K\xa4<\xcc\xe4\xfe\x83T\x0e\x9d\xbaFZN\x11f\x8b\x9d\xb8\xe4\x1c\x96\xbd\xf7"\xc2Z\b:O6_\x7fH\x8f[\xf1\xac}\x7f8~\xbe\xde\xcc\xfdj\x03w\n\xac\f\xf9h\x03\x17VL\xa5Y\xa3Z,\xfaa;\xc9f\x07\xc9f\x07\x0f\x12S\xf8b\xd92\xe4Za\x90\x9dOxD({V\x1c\xe1f\xae\x99\x89\xf7\x93\x19\xbf`\x1by\x0e\x95]\x1f\r\xe7\xd0\xd6\xad\x18V.\x01/-K\x0b\xcd\x07\xf6\xaa\xe2\x15\xe1Jvq\xc3M \xcf\x0e\xe4\x1a\x15}\xe7\x17\xdc\xe0\xc2\xdc\x18\xf6\xdf\xd3=\n\x98\x1e\xfcl\x14K~\xdeKl\x9e\x05\xf5v\x1ac\x86\x04#KP7\xd8\x8b\xf7^}\x8e\xc0@\x7frr\x0b\xb8\x93k\xe2\x88\xd5A\x1d\x83\x96\x80\'b\x15w\x1d\nY^\xaeU\xef\x8a\xa9}\xb8t9\x96\xaaU\xca1\xe0\xe3\xcdO\x9d\x7f\xdb\xba\r|\x97{\x9a\xf2%\x9976!\xb8l\x17d\x8e\x9d\xc8\x03\xf4\xac\xddz\x91je|\x18\xd4\xa3)\x19[w\x13t\xf7.\xfeJ\x1e2\x02\x11\x14\x8a\xa3yK\xce$&*kO\x9d\xdac\x82\xf9\xb8\xda\xac\x86\0\xed\xa6L\x99\xd2\xb7\x7f\xff\xfe\xbd[\xb6l\xa9\x93$\t\xbb\xdd\xce\xd1c\xc7\x98\xf9\xf9\x1a.\x17{3\xbdg5rr]\r\xa5\x12\x8a\xed\xfc\xb2\xf50\xf5kU\xe2\xa3e{\x18\xd0\xb1\x0e\xb3^\x1f\xca\x81\xa3\x17X;\xbd/7o?\xe0\xe4\xd5\x07\x04\x05\x07\xb0+\xe6\xe1\x93\xee\xc6\xc7B\xc9N;yk\xd6\x90Zp\x13\xe1\xf1\x98\f\x15`U\x91%n\x97*&\x88\x7fa_\x8f\x7f\x14f\xb3\xd9\x02p\xf5\xeaUu\xde\xbcy\xd3@D\x93~\xb9\xbd\x9c){\0\xca\x93\xca\x06\xb2,\xebTU\xad\x8e\xce\xaf\x17a5\x06\x12P\xb6>^A\x7fp\'&\x9b\xec\xc8Z-\xf5\xeaF\xd1\xef\xcde\xac\x985\x84\xaaU\xca3t\xf6*\x066\xaf\xcc\x87o\x8f\xc2\xa8\xd7\xd0a\xda\n\xb6\xcc\x1aL\xebfu\xf1Xu\x820?#\xf9y\x05t~\xfb\':U\t\xa6b\xe9 t:-\xf5\xebT\xe5D\x93:8U\x15O\x83\x8ej\x95\xcb\xb1\xee\x93`4\xb2D^\xdeH>\x19\xd2/\xaf\r\x04d\xaa\n\xa54\x1a\x02/^\xe2\x90o\x05\xb2r\x8b\x99\xe1\xe3\xc5\xbce\xbf\x12\xe8o$!%\x97\xb7\xc6tg\xd3\xbe\x0b\x94\r\xf1!\xd0\xcf\x8b-{\xcf\xe1\xe7\xe3\xc5k\xf36\x10\x93\xfdX\x80t\xe3\x8c~\b\xa7\x93_.\xb8D\xa8[\x97\xf5\xc7\xe9p\x82\x7f\x19\xc8K\x82\xa0J$\xa5d\xd2\xb9]\x13\x92R3hR\xab<\xfb\xefe\xe3\x10\x02\x87\xc3\x89\xc5\xe2j=\xb0\xfd|\x1c\xf9\x85\xe9L\xf9\xf6\x13\xe2*\xf8#\n\x14<\xac6$\xa0O\xabj\xc4\xee\xb8\x82$\x81IQQ\x84`\xfe+\xef\xf2U\xfeE\x8a=e\xde\xcc-\xbe\xb2W\x15\xcf\x0b!\xac\xee\xd9\xc8M \xcf \x83\xc8\x1e\x92\xbf\x0f\xc7\x1cyh\n\x93Q\x92C\xc0\x18\x88\xa4\xd1r\xf0N&\0\xb7\xf3,\xdc\xb9\x97\xc4\xfaw\x06R\xb6T(\xeb\xb7\x1f\xe3\xa7c\xb7\xd91\x7f,\xa8v\x86z\x1b8b\xb1\xd3\xdaCO\xc9\xea`\xa6\0\0 \0IDAT\xa8Fv\x15zux\x8e\xf9\x1d\xba\xd1\xb4a\r\x92S\xd2ye\xc9>\x8e}5\x8enU\x82\xd9w\xcf\xe5j\b*L\xa7\xd7\xaaU\x8f\xc8\xe3\xb6\xc3\xc9\x97\xde\xf5H\xaa_\x9f\x15\xc3F\x11\x9e\x9aA\xbf\x17\x9e\xa7Tx\b)iYt\xdc\xf1\0Kd\x14\xe1\x06\x997\xfaT\xa3n\xadj\xb4n\xd5\x8a\xa1:\x9dfVzz\xef\x8c\x8c\x8c\xde\x0e\x87\x03\xa3\xd1HDD\x04\xc1\xc1\xc1\xc8\xb2Lqq1\xd1\xd1\xd1\x1c9v\x1a\xa3\x7f)\x16\x7f\xf66\xd1W\xef\xd0\xb4a\rf|\xf6\xb8\x99UrF\x1e\xf5j\xc2\xd5\x1c3W7\x9e\xa3\xd8d\xa1o\xf7\x96,Y\xbd\x8f\xee\xadk3y\xdc@\xb2r\n8\xba\xf0\x15\xf2\x0bM|\xf7\xcbAZ4\xa9\xc5\xaeC\x17\x98\xd9\xb3\x16b\xd1B\xc6I\xe98=4\x1c\xb6\xd8\xe8U\x92\x02|\xc4l+\xfc\xd4\xea\x18,\xa0\xe0\xdf1\xc4\xfb\xf7\xef\xbf5m\xda\xb4\xde\xe7\xce\x9d\xbb\xec\xed\xed}\xb9\xb0\xd0U\xb3\xa8\xaa\xea\x1f&\xad\x122\xb9\x8e\xa3\xe0\xbaG\xf6\x95y\xd6\x94sm)\xd3\xfc["jF=\x99\x8deS\x05\xab6\x1ed\xea\x84A\xa8\xc0\x95\x1bw\xa9\x11U\x91I\xcf5$=\xbb\x80\xbb\xf1)\xbc9\xba\'\x87\xde^\x89\xbf\xbf/\'\xce]\xe7\xd0W\xaf\xb0\xff\xe8E|}}\x90$8x/\x1b\xeee3\xb2_[^\x9a\xfd3w\x8b\\u\x1c\x07\xe6\xbd\xc4\xc2\x1f~e\xc3\x95\x14W\xaa\xf0\xfdS\x9b\xa4\x82\xfc1\xeb4\x9e\xd3VI\xca\xccR\x1a\x8d\xa6f\xc25\xde;\x16E\x9fz\x15).2\xb1\xe7v\xfa\xe3GZ\x92\xc8+4\xb3\xe6\xdc\xe3,\xd8qC\xb5\x14\x9amODp <<\x84\xbd\x97\xf6=\xfa\xee\x8d\x97\xbar\xf4\xcc5W\xe6\x99\xab\xe6\x8a&\r\xa2xw\xdeJN\xc5>d\xf9\x9ca\xd8\xecN\xca\x97\t\xe1\xce\xdd\x07\f\xfdl\x0b/\xd4\xd5a\xf7\xba\x81\xa1M\x14w\x1c\x0e(6#\xe9uXsL,\xfd\xe5\x10\x03\xbb5\xe3T\xe7f\x84\x05\xfb\xb3o\xfe\xcb|\xb2`)\xd3\xe3\xce\xe3\xaf\xd5\xb2\xb3\xc8\x9c\xb0GQ\xfb\x03\xf9\xee\x89\xc8M \xcfh\x9c\xa5D\xeb_#\xa3oV\r\xa5b\x0e\x8e\xfd1\xa0\xd8\xa9\x1f\xe1C\xb7\x16Q\xb4o\xdd\x10\x83V&<<\x84\xe3g\xae\xf0\xf5\xa1X\x97\x9b\xcalfB\xa7Zx\xfd\xb4\x93\xbe^\x1e\x9c\xb2\xd8\xb9*\x04FY&\xbcW\x1f\xca\x95\xaf\xc0{_o\xe2H\x82\xcb[\xbd\xf8\xa7\xdd|8m(M\x0f\x9ca\xcf\x89\xabL\xbas\x9cjz\r*\xb0\xd7n`J\xe9.x\x04\x86\xb3e\xf6Kl\xd9y\x9cy\xbb]\xdav\xc7\xbe\x1cKjZ6\x07\xbfz\x05\xbb\xcdF\xa9\x88\x10\xd6o;B\xb7w\xd6\xd1\xd0g\x05/\xf4nA\xcd\x1aU\t\n\nz\xd4y.))\x89\x8b\x17/r\xe9\xf2\r\xd6\xed\xbeD\xa9\xf2\x95\x985i0\x1d\xdfZ\x89\xf7\xa6h\x0e-\x1a\x8f\x9f\xbf/\xef\xbd\xf1<#\x1f\xa42q\xd1nz\xb6k@\xf4\xf5{\x8fn\xcd\xe2}7\xe8\xdc\xbe1k\xce\xc7\xb3\xe6|<\x9fg\xe4P&<\x98\xa1\x9fog@\x9dR|0u(\xe5\xcbF`\xb7;\xb8\xb4a\rC\xa5t\f\x92\x84\x01\b\x91er\x14\x95lU\x15s\x8am\x13\xc5\x7f#\xd4\xf7\xbf\x89\xd3\xa7O\xef\xbdy\xf3\xe6\xf4\x8d\x1b7\x1e)\xe9M\xfd\x0f\xc1j\xb5\xaa\xc0Q)\xf5ls\xe10\xef\xa4|\x93V\xc8\x8f_\xbb\xa5\xc7\xe3\x88\xacp\x8a\xef\xdf\x19\x8c\xaf\x8f\x17\x83&-\xe4\xab\x99\xc3\xd0i5\x9c<\x7f\x1d\x84\xe0\xd87\x13\xf1\xf3\xf3a\xf0\xcc\x954=\x1d\xcb\x0b=\x9bP\xa9Bi\xe6\xbf\xd8\x86\xa9?\x9f\0\xa0\xb0\xd8L\xad\nA\xdc\xbd\xf1\x10\x8d$\xe1\xe1ap\x91\x87P!\xf5\xday\xa9\xe0\xee\x8bB\b\xab\xc1\xc70\xf7\xba\xa5\xb8s\x0b\x0f}\xb3Zz\x99\xb0\xa2t^\x1e4\x8a\x03\'\xae<\xba&/\x8dLhH \xe7\xefe>\xfa\xae}\x85@\x04\x90d~\\B\xf5\xf5\x98\x0e\x84\x87\x04\xf2r\xcf\x86x{yP\xb7V$a\xa1\x81\xcc_\xb1\xd7\xa5R,kY\xf5FO\x84\x10\xac\xbe\xf0\0\x01\xcc\xf8b\x13\x07~\x9e\xcd\x85+\xb1\f\x98\xb5\n\xc9\xfe\x80\xad\xaa\x07R\x83j\b\xab\x1d\xc9h\0\x93\x05\xb5\xa0\b9?\x82u\x97\x92X\x7f)\x89\xd3K&\xd1m\xe4{\xbcz}/\x13\xc9G\x92%V\x17\x99\xef\xce\xb28:\xe3\xca`s\xe3\xdf\0\x8d\xfb\x16\xfc\xcf!\x85\x06\xf4\xd4V\xadPK\xd8\x1dHZ-\xb2\xb7\x11\xa9\x8c\x9e\xe8\xe8\xd3\xd4\xf2\xf5\xa3}\xeb\xa6\x8c\x9c\xbb\x9a/\xb6\x9f#Dc\xc7j\xb3\xb3\xff\xaa\xeb\x99\xbf\x1d\x13\xcf\x90\xdeM\xf1\xd9\xb9\x99@Y\xa6\x82NCi\xad\x86\x14Ee\xb5\x1aN\x87\xd6\r\x99\xbb\xe1\xf4\xa3s\xddL/\xe4\xda\xa5X>\x98:\f\x8f\xbb\x17\xe8\x11{\t\x19\xd8\xed\x15J\xd8\x0f+\x19\xda\xab\rc\xfa\xb5\xe6\xf4\xf9\x1b\xbc\xb7\xd5\xd5x\xa9o\xcdpZ6\xaeN\xef\xd9k\xd8q\xf8\nW\xaf\xc6\xd1\xa5u]r\xf3\n\xd9\x7f=\x85T\xa7\x91\x9eMk\x13\x10\x1c\x82\xc3\xa9\x92\x92\x96\x85]\x95\xb0\xda\x15\xf6\x1c\x8f\xe1\xf3\x03\xf1\xe4H\xde|3u0GN]\xe5\xf4\xdd\f\xecB\x10\x80\r\xe1t\xd0\xff\xbd_h_\xab\f\xb3\xc7\xf6" \xc0\x97\xfd\xc7.s\xa3\xa4\xda>\xd4CK\xbf\xf6uYu\xd05A]\x8cMat\xbfV\xfc|\xe02\xb72\x8b\xc8IL\xa2L\xb8?=&\xcdg\xce\xb9M\x84<\x11\xfc\x0f\xd4\xc8\xec1\xdbXg\xb2/\x89\x0f\f\xfa\xdc\xfco\f\x8ej4\x9a\xe4\xa2\xa2\xa2\xfeG\x8f\x1e\xdd\xeap8\xfe\x99\x14Q\xabdN\xdf\x89\xce{\b\xde\xa1O\xf5\x86=p-\x91R:\x0b\xd1\x17N\xe4\xec\xbf[d\xb4\xe5\xe4\xd0\xa1U=\xfc}\x8c\f\x9b\xbf\x9d\x9aaF*\x96\x8b\xa0J\xa8\x91\xaf\xf6_\'X\'\xf0\xd4i\b\n\xf4c\\\xaf\xa6\xb4\xad\x1aJP\x90?\x1d\x9a\xd7b\xe3\xc1hl\xaa`L\x8f&\xfc\xb2?\x1ag^\xb2\x83\xc4\xe3\xdd\x80\xf4\x12B#A\x11\x1e\xfd<t=\x0242\xbe\xe1~\xb4\x1a7\x9a\xcb7\xee\x11\xa0\x85N5K\xf3\xc5\x9b\x83\xb8x-\x8e-\x17\\\x0b\x81\xe1M*\xf0\xe5\xec\x97\x11B\xd0\xb1VYFt\xaa\xcb\xc4\xfe\xadi\xd6\xb0&\xcbW\xef\xc2\xd7\xc7\x88\xc9l\xe5\xd0\xb9[\xd4\xaaZ\x8evM\xa3\x18\xd1\xad1\x8d+\x07\x11\x16\x1aBDx(\x05))\xdcL/"*\xc4\x9b\xc6u*\x82\x80Z\xe1\x9e\x1c\xcc\x8bF.\x15\xe2"\x0f\x8d\f\xb2L3\x8b\xc4\xabu\xbbq\xf8\xb6\tE\x80\xe4\xb4Q=@\xa1\xf1\xe6\x1fy^_\x8cV\x92\x18\x9fk\xba\xbc\xce\xa1t\x01R\xdc3\x90\x9b@\x9em(jcm\xa3\x1a-\xf9M\xf2YQ\x90tZr\x02\xbc\xb8n\xcbd\xdd\x89\xfd\x14\xdc\xcb\x03\x9d\x17\xaa\xc9\xca\xf0~mY\xbd\xff23\xfb6\xe0\xb5\x91=\xb0Z\xcch\xb6mx4yj%\x89\xb2Z\r\x17SMT\xe8\xd2\x96\x96UB\xd9{\xe5\x01\0\x11\x1eZ>\x9b\xd2\x97\xd8\xd8Xj\x7f6\x87`\x8d\xcc5\xbb\xc2\xf0\x90v\xe4\xe6Z\x183\xa4+\xe9\x19\xd9\xfc\xb4\xed\x14\t\xb9fF\xb7\xaa\xc2\xd4q\xfd\x99\xbft+\xb72\x8b1+\x82\xd4b;C:\xd4!?\xbf\x90iC;\xf1r\x8f&DV*M\xff\xb7~\xe4\xfe\xbdd\xfa\xf7l\xcd\xa89\xab\xb8\x11\x9b\xc8\xa4\x91=\x89\n\xf6d\xce\xa8\xaed\xe7\x152\xf5\xa7c\x8f\xfev\xcf\x06\x15\xf10\xe8\xd8v\xfe\x1e{.\'0\xa4]-dI\xa2Z\xa5\b^\x1f\xdc\x0emQ\x1e\xa3\xfb\xb5\xe4v\\\x12\x87n\xb8R?=d\x89\xc1\x9d\xea?j\xb7{;\xb3\x88\xa1\xedk\xa1]\xbd\x8a\xfer\xc1SQ\x02\x01|[d\xbd\xb0G0\xc4d29\xff\x9dC\xac\xaa\xaa\xb8~\xfdz\x92\xc3\xe1\xc8\xe0\xbfP\x9a\xfdGB)\x14>L%\xb0\xf2 t\x1eO\xfdp\xf6\xc2\x85\xbc\xe8\xfdk\xeb+6{\xcdw&\r\xa9\xfc\xf9w\xbb(_:\x90\t}[P\xbdj\x05\xfa\xbf\xbe\x84A]\x1a\xf1r\xf7\x86T\x8f,\xc7\xa5kq\xbc\xf2\xed>\xe2o\'P6\xd4\x8f\x96M\xeap\xed\xe6=\xa6\f\xe9H\x97:\xe5(_6\x9c\n>\x12\x07cvI"=\xf3\'\x9eP\xaa.\x94\xa4\xbb\xf5e\xc6U\xd5k=Cs\xd3\xf9\xa6X\xa6E\xb3\x06\xb4n\\\x83r\xa5\x83\xd1h5\xd4\x8a\xaaH\xff\xd6\xb5x\xa9{#\xaaW.\x85SU\xf9x\xe96\xe2\x12\xd29\x7f\xfd>\xdfl:I\xb7&\x91|\xb4\xf2 \xeb\xce\xdf\xe7\xd0\x8ddZV\x0e\xc1\xcbSG\xaf\xd9k\xf9y_4\xe7\xce\\\xc2\xa0\xd5\xb1e\xff%\xde\x9a\xd0\x9f\x1b\x97o3\xef\xad!\xac\\\x7f\x807~8D%o3\x975EHZ-\x92^\x07\x1a\x19\xe7\x95;\xac\x9c\xfc\x1ee\xcb\x94cX\x97\x06\xdc\x8d\xbe\xc4\xcc\xab\xdbhyj\x0f\xc2iB\x02\x16\x16Z\xb6\x1cR\xc5@ \xdb=\xf9\xb8]X\xcf\xbe\x07++/F5Y\x90\xb4Z\x84\xd3\x89$\xbb\xea/\x84\xc5\x86\x1c\xe8\x87\xa4\xd3\xa1\x8b\xd4\xe3\xb8z\x87c\xb7\x93\xb8~\xa3\x16\'\x16\x8d\xc7fw0\xfc\x9d\x15<((\xe4\xd7\xdf9Ed\xa0\xaf\xe9\x16/\x7f\xb0\x9ae3\x86p\xfa\x9b\x89\x98\xad6|\xbc<9~\xfa\nI\x1f\x7fJw\x9d\x06\xab\x10,\xf0k\x88\xd3\x18\xc8\xf3\xdd\x1a\xb1~\xeb!\x12R\xb2\x983\xa9?\x1f\xe8tT*\x1f\xc1\xfamG\xd8\x1a\xf3h\xfe`V\xbf\x86\xe4\xe5\x152\xee[W\xbb\x89 \x9d\x86\r\x9f\xbeL\x8eC\xe1pB.6\x9b\x9d\x07\xc5.)\x89\xf1\xef\xafb\xf7\xf2\xe9D_\x89%<$\x80\xads\x9eg\xe8\xc7\x9b\xa8\x17\xe6M\xd7\x0eM\x98\xfc\xfeO\x8f\x8e{.\xfa\x16F\xa3\x81)+\x8e\xd20\xd4\x9b\x9f>\x1f\x8f\xd1\xd3\x13?\x9f\xfb|\xfb\x8a\x91%\x1bO1\xa6oS\xee\'<\xae#\b.H\'q\xecK\xd4/z\x80\xc9\xd3\xc0o\x82\x8e\x02\xd8n\xb2\xe6\xecR\xd4\xa1\x80\xed?a\x9c\xfd\xfd\xfd\xf7\x14\x16\x16j\xff\'\x12\xe0:\r[\x1c\xd9\xf7/S\xb6a\x83\xa7\xed\x93\xa2\x9b@\x92.\xffv\x8f\x17\x06\xf4\xeeMP\xd4\xd0}gN7\x1b\xda\xa1~\xa9~=\xdai\x122\xd2xn\xfab\xfa\xd6/\xc7\xc0\xee-\x90T\x0b8,\x9cLp0eDG\xbe_\xb3\x9bOw^\xa1\x9cQG\xfb\xba\xe5\xd8{\xec"\x9ed\xa3\xef\xdaX\xb6ed\f\x12)\x99\xd1\x8f=\xae"\xff;\xb3\xfd\xcb\xe6\x9e\xfa\x8f\xc242\x8d\xd6,g\xc8\xd94\xd0\xb9\x14V\xde\x1f\xd4\x94\xe0\0\x1f^]~\xe8\xd1\xe5\x9d\\\xf8\n\xd7\xe2\xb3H4\xb9\xd4\x02\xf4\xb2\x84\x82LZ\x89KK\x02\xfavk\xc6\xaa\xcd\xae\xd49\xa3V\xa6\x7f\x9bj\x1c\xbb\x9e\xc2\xad\xac\x02F&\xdc\xe7\xf3i\xfd\xd9\xb4\xe3\x18\xdf\x9d\xbc\x0b\xb6"\x96&\xc4\xa1)\x1d\fN\'8\x9d\b\x01!\xce \x84\xa4\xa3\xff\xe8\xf7\x98bH\xa7\xcd\xc3xz\x19\xec8\x85\xc4\x02\xb3\xbd\xf8\x86S}\'N\xa7\xfbV\b\xc5\xad\xc3\xee&\x90?\t\x1c\xcaI5;_\xd5V(%\x8b,\x13\xf8z!\x1cN\xb0\xd9\x91|\xbd\x10N\'x{\xa2\xad]\x19\xa7\xe3\xd6\x95W\xc7\x8d\\\xf6\xfe\xfbs&\xee=\x97\\\xf7A\xb1\x04\x1a\x03\xe9\x18\x81\xa7\xd5Bk\xe8d\xa4\xfc\f\x9e\x9f\xb7\x05\x8d,\x11l\xd0\x92aq\x80\xad\x88\xdd\xd6\x04$\x83\x96+vAZ\x83:,{\xa1#\x15\xcbE0i\xf1^L\x8a\xca\xb7\xc7\xee\xa0\x95\xe0\xe4\xe2W\xa9\x1eY\x8e\xc3\xf3G\x93\x9a\x96E\xc5\xb2\xe1\xa8B0b\xd6\xe3\x89\xbfe\x95\x10T\x87\xeb\xdc\x15\xbd\xf5\xe8\xb4\x1a\xd4\x92\x8a\x99[\xf9\x16R\x1ef0\xa0\xa4\xeay\xd1\xe8\xf6\x1c\xf9z<eK\x87\xb1}\xef)\xee\xe6<v+\x85\x06\xfb\x93\xfc\xd0\xb5(\x8c\xce,f\xf3\x8ec\xb4kY\x8fo\x7f9L\xab\xfa\x95X\xf3\xf9x\xca\x96\x0e\xe5\xe6\x9d\x04\x8e}9\x96\rk72h\xdd*\xa2t\x1a\xccF\x03\'-v\xba\x1a]\x8d\xfb\xceZ\xed\xb6\x19&\xfb@\xfe\x83\xb4\x8c\xf2\xf3\xf3\x05\xff\x84\x8e\xdaS\x8f\x8a\xc3\xa1\x90vy!\xa1\xd5Vax\xaa\x18\xd0\xfa\xe8w\xd8N\xce\xad\xed\xba\xc2{\x9au+\x8e\xf8\xfc\xf2\xc3\x82P\xc0\x17\xd0m\xbf\x8ef\xfb\xcf\x94\x92;4Z\xa1o\\\xc1[IJg\xc1\xf6\xef\x88\xbe\x9d\x81\xac\xd5\x93\\\xe8`M|,\x92VE[\xb5\x1cB\x15H\x15"*\x8b\x94\xcc\xa7\xae#Z\xb0p{\xb1u\xc4(_c\xb5.z\'\x13\x92/\xb2\xb4BK\x90\xb5\x94\x0e\x0b$%\xed\xf1\xe2\xbeG\xd5\x10T!\x1e\x91\x07\xc0\xe2\xf1]\xd0\xeb4\x8c\xefR\x9b\x88`_\xda\xb7\xac\x8f\x7f\x80\x1f\xfd\xbb5\xa5c\x8bZ4\xaa\x1f\xc5\xa6M\x9b\xb9u\xec\b\xba\xa6\x1e\x8c\xba\xb4\ra\xb5\xa1f\xe4\xa3\tp"\x87{!y\x07\xf2(3M\x96\xc0\xee\xa0U\xe2=b\xc7\fe\xe9\xc3DZx\xe8\xb9h\xb5sQ\x92\xd8k\xb6\xed_\xe7P\xa6\x027q\xab\xea\xba\t\xe4\xcf\x04__\xdfDSr\xfa%*\x96n\x82\x10H\x06=\xa2\xc8\xe4\x92\x0f\x11\x02d\x19a\xb3#\x01\xca\x99\xab\xabPm\xcb?\xfa\xe0\xbd\x1f\x1c\x0eG;Bj\xbdNp\x95\xeew\f!\xda\xde<]\xf5\xeb-Kt6\xe7\xb2\xc1\xbf,\x8a*\\\xe4\x01T2gSM\xef\xf2>\xde\xea\xd6\x97\x03_\xcd\xc1b\xb5\xf1\xdc\x84/1=\xb10\xfb\xec\xc56$&\xa5\xf1\xc2g[i^\xca\x97\x9a\x95\xc3\x89\b\x0b$,$\x90Po\x03If\x07\rC\xbd\x999i\0\xdf\xfc\xb8\x93j~\x1e,\x9e\xf9\x02\xb2,\xb1\xf9\xddA\f\xfdt3\xe3\xdbG\x91\x9d\xf38\xf1i\xfa\xcac\\m\xd7\x84\x9d\xfbO\x13\xe0kd\xef\xa2\x89,\xfc\xfeWL\x16;ujVa\xce\x0f\x07\x1fm{\xf8r\x02M\x1aD\xb1\xe7v\x06{ngp\xe9\xc6\x03\xe6\xbc\xfe\x02\xc3\xdf]\x89\xddR\xc8\xb2\x94\xfdD\x95d\x8f\xfdV\xc4h\x13\x82d\xa7"\xe6\x14Z\xa7X\xe1\xd8\x9f2f&\x9c\xdbDQF>\x06\xef\xc7\xbd@4\xfa\xd2\xde\xde\xdeRqq\xb1x\x8al\\\xd9E\x7f\xc80R/\xdf\xf2\x93\x1a\xd4X\xae\xab\x13\xc9U\x8d\x8c&\xc2\x07\x8d\xa2 \xec\x0ed\x7f_\xd4\xdc\x02$\x0f\x03\xa2\xb0\x18\x91\x94\x9e\xf0\x07\xabY\b\xd3\x07\x16\xc7\xa8(\xbd\xfdh\x0b\x0f\xbda\x8a\x9aLZ\xeaU\xc2\x86>O\xc3zQ\xcc\xfc\xe1\x1b\x97\x90b\xa7\xeaL\x1b?\x88k\xb1\xf7\xf8\xf2\xc5\xd6\xf8\xfa\x18\xa9Z\xa5<\xe5\xca\x84s\xe4T4\xd5+\x97\xa6\xd8d\xe1\xce\xfdd\xee\xc6\x9f\xe7V|\x1a\xa1A>\x94)\x13F\xe7.\xddX\xb4m\x1f\xa6\xc0Pp*HZ-\x9a2\xc1\xa0\xa8\bEA\xf2\xf2\x04\x87\x02v\x07\xe8\xf5`\xb11\xac\xe0!\xf5L2\'\x84 \xce\xe1\xe4\x88\xc5q\xe3k\xbb\xf3mOO\xcf}`q\xd7x\xb8\t\xe4\xcf\x87\xc2\xc2B\xc1\xc9\xcb\xdf\xa9u\xab5A\x92\\\xa4\xa1\n$?#j\x91\x19T\x15I\x96\x11V\x1b(\xae\xf6\x99\x0e\x87C\x05\x8e\x90\x15s\x84\xac\x98\xa8\xa3\xb2\xbcdJ\xb0O\x07\xdd\x13A\0\t\xa8\x17\x15\x88Z\xb14\x9b\xae\xa6\x10\xea\xa9\xe3\xa3\x97;b:\xb4\x1d\xe3~\t\x93\x10\xac\xbcSL\x87\xd4L~\xddw\x8aU\xf3\xc6r\xe0\xe8E\x92\xd3r\xe8\xd8\xaa.\x01\xfe\xbe\f\x9d\xf5\xb3kE\xff\xb0\x90\xb3\x0f\x0b\xe9\xd6\xba67\xef$\xb2`\xc6P<\xf5Z\xfc\x03\xfc\xb0\xd9l\x8c\x19\xd6\x8dO\xcaE\xb0r\xfd^\xde\xdb|\x81o\xc6t\xe0\xd8\xd7\xe3\t\b\xf0c\xd4\xdb\x8f\xab\x91m\xaa %=\x877\xbf?\x84EQiW>\x80\xa5\x1f\x8d#0\xc0\x97\xa3\'\xa3iS=\x82u\x97]!\x82~mk\x92\xf2\xf0\xb1f\xe5\xd6\x984&\x15\x14a\xb1\xdb\x19\x9c\x10Mc\xf1t\xff\xed\xaaz-\xe7\xac\x0eV\x9bl_?\xf4\xf3[N\xfe\x9f33S\bQL\xee\x83]\x04U\x1a\xfe\xa8\0\xc6\xd3/\xb2\xb8\xb88\x02x\xf8\x0f\xbd\xb8\xc5\xb6\x1f\x9dw\x12\xa6\xe8\x9b\xd7\xad\xa9f\xe4 \x87\x05\xa1f\xe4\x80\xd1\x13aw\x80\xaa"T\x15a\xb6"\x923\xcf\xfd\xadc\xd8\xe1\xec\xecB\xebkKdyY\x94^+\x7fl\xbf\xc5n\x91Ivv\x0e\xbf~1\x0e\x04\xa4eds\xe1\xea-\x9cN\x05I\x96IM\xcfe\xd9\xe6\xd3\xbc\xf5R\'\xee\xdeK\xe6\xd3\xdd.A\x80\xef&tA \xd8p\xc5\xe5\x9e\x1c\xd4\xab\x15\xa7/\xdcd\xf7w\x8b\xd8\xb6m\x0b_\x9b\xe3\x90C\x02\\\xef\x86$\x81\xaa\xa2\xa4e#\x19\xf4`\xd0\xb9\xde\x17\x0f=\x85\xaa\xcaY\xab\xd3\xf9y\x91m\xdfM!\xbe\xd6j\xb5G\x01\xc5b\xb1\xb8\'\x9a\xff@\xb8\x83\xe8\xff"\xc8\x8a\x88\x15~\xc6\x81\xda\xc8\xf2\xc1jN\x01h\xb5H\x1ezDA\x11\xb2\xaf7\xc2\xee@\xd8\x1c\bEq\x88\xd4\xac\r\xbf\xdb=;K\x88\x8c\xfe\x06\xed\xf0\x80\xdfI\x90\xdc1x\xf3\xe6\xb2\xf9\xf4n\x1e\xc5\xd0\xae\x8dx\x98\x9e\x89\xef\x92\x05T\x96\x05IN\x95\x0eK\x17r\xf1\xea]\xde\xdfr\x89+\x17ci\xd30\x92\xee\x1d\x1aS\xa7f$c\xdf]N\\\xc1\xe32\x05o\xad\xcc\xa4\xe7\xdb\xf3\xfa\x17\xdbX\xb4\xfb"?\xec\xba@\xb8A!95\x8b\xa1\x9fm!\xd2_\x8b\xa2\xa8\x1c\xbe\x91\xcc\x81+\tL\x1a\xd8\x96\x9b\xb1\xf7\x19\xd4\xa39U\x03\xf4\xae@ii?:\xb7\xac\xc5\x0f\xfb\\.\xf5\x07\x05VZT\x0e&7\xaf\x90;w\x13\xe9\xdd\xa5)]\xeb\x95\'2\xc0@\xe7v\x8dy}\xc1\x16\xf2K\x1a\x0f!T\xca)\xe9\xf4>\xb0\x9a2\x96\x14\xaa\xe9\x9e^\xbf\xd8\x04\f\xca3\xed\x8a\x95\xe5\xd1\x16\x8b\xe5\xcf\xed\xe3\xb6\xe6I\x04W{\x1e\xad\xa1\x84\x11\f2y\xe9v\x9c\xc5\x87\xff\x91\xddUU\x15\x98\xcce\xb5\r\xab\xb7\x12f\x1b\x92\xb7\'\xc2lE*\x99\x8cq:\x91\xbd<\x11&\x0b\xea\xc3\x8c\x04\x0f\x87z\xf4ou\xe2\xcb\x86\xcb1v\xa7\xb9\xbeN\xd3\xa9\xacV#U\xbcz\x91\xb5\x9b\x0e3\xf6x"+\xf6_c\xc3\x89\x9bD\x05\x1a\b\xf2\xf3f\xdc\xd2\x03\x1c\xbb\xf5\x90\x87&;/\xf7h\xcc\xcec\xd7\xb9\x9bmB\x96\xe0\xed\xe1\x9d\xf9n\xc3q\x92\x8bl\xbc\xd6\xa1:\x91\x15K1\xe2\x8b_\x89\x8f\xbd\xcf;S^\xe2\xcc\xca\xfd\xa4Y3@\x15\b\x93\x05a\xb6\xa1\t\x0bB-,v9\xb1\xb4\x1a$\x8d\xcc\xe6SWWo1\xdb\xfbg\xc1R \xfe\xffJi\xd9\x8d\x7fr\xdes\xdf\x82\x7f\rTU\xb5)\xfb\xceNTR3\x9dh\xb5H\x9e\x06\xd4\xac<4!\x81\xa8y\x85\b\xbb\x13\x14\x1594\xe89`\xf0\x1f\xf6\x97\xa4\xd3\x0b\x0b\xad9\xc7,62\x14\x15\xab\x10X\x85 +1\x87{\x0fR\x99\xf1\xf9/\xb4\x9a\xbc\x94\x0fW\xec\xa5\xb4\xea\x8a)gzxq\xf2\xe2\x1df\xfcr\x06\x80K\x19\xc5\x8c\xfbv?Wb\xee\xb1\xf3\xc0\x19\x16\xcd\x1e\xc9\xe8\x16\x95A\x15\xb4\xaf\x10\xc8\x8ey\xa38y\xf6\x1a)%\xae0d\x89\xfa5+=\x12\xc73\x99m\x18J\x84\x10\x15\xe1\x92\xef\x1e\xff\xc5v\xba\xbe\xfe\x1dM\x1b\xd6\xe0\xed^\xf5Y\xf2\xc1\xcb\xfc\xb2\xfd\xe9\xf6\x1b)\xe99\xc4\xdeM\xe2\x9d\xf5\xe7\xe88\xfdG\x02\xfc\xbcyo\xfaK\xa8H\xfc\xfc\xf1\xcb\xfc\xfcFo|d\x95\x97\x93\xce\xf3\xfc\xf2\xcf\xe9\'\x9b\xf1\x96$\n\x9f\x98\x1b\xacB\xf0s\x91\xe5J\x81$\rW\x14\xc5\xf9g\x7f^$\xc4!L9\x8fK\xba\xb5\x06\xa8\xd0t*\x92\xdc\xf6\x1f\xb6d\xd2sc\x84\xd9\xe62U\x85\xaby\x99\xe4i@X\xad \x04BQ\x91\x8c\x1eh\xbb\xb7z\xdb\xd1\xb1\xd1u)\xd4\x7f\x8a,\xcb\x7f\xd0\x95\x8fV\xc5\x82\x89\xf9\xe6\xd1\',v\x8b\x97,1UN\xe3\xc7\xf8\x1d\x94\xcaK\x02\xa1\x12\x12\x1c@Z\xd6ckph\xc3r\xf8\xfa\xf9\x10\x9d\x92\xcf\x88\xc6\x158\xfa\xc5\x18\x82\x83\xfd\x99\xf0B[\x8e\xcc\x1f\xcd{o\x8d$\'\xcfUh\x99\x98]La\xb1\x99\xab\xe6\x10\x9c1&\xa4@_\xe4\xb0 \xe4`?\xd4\xec<d\x1f/PU\x97\x1bK\xa7\x038\xc5\xffRs07\xdc\x16\xc8\x7f\xbao\xe2\x81\x9a\x96i\xd6\xd4\xa8\xd4\x19\xbbC\x92}\x8c\xa8\xb9\x05\xc8A~\xe0T\xc0bE\n\xf4\x95\xe4\xea\x15{\xabq\x89q8\x95\xd8\'=\n\xd5e\xa9\xf2\x10o\xcf\x86i\x8a\xc2]\x87\x93\x14\xa7B\x80b\xe1\x8cO0\xe3_\xea\xc7\x81\x137\xc8\xc8\xcdf\x8a\xf9>>\xb2L\x8cO -\xdf\x9e\xc6\x9931d\xdb\\sn\xf3R\xbe\xbc4\xb0\x03\xaf~\xb6\x91\xe8\xcbw\x18\xd1\xaf\x15S\x87t\xe0\xcd\xb1}\xd9\xb8\xe3\x18\xef\x94\x90\r\xc0\x87\x83\x9bQ\xbel8\xd3~:\x82,I\xcc~\xb9;?\xad\xdd\xc6\xbdBA\xcfj\xa1\xb4n\\\x8de{\xa3\xb1\x0b\x81\xce\\\xc8\xebc\xfa\x91\x94\xf4\x90\xc6\xf5\xa3\xe8\xd1\xa0";\xce\xdc\xc2)`\xc6\xf0\x8e\xec:\x14\xcd\xcdt\xd7\xa4\x91\x97\x9aA\xa9\x10o\xda\xbf\xf1=\xab\x0eD\xd36*\x9c\x96\x9e\xb9\x8c\xbbv\xf0Q\xdf\xee@\x8d\x86\x9bv\x07e\xb5\x1a\xecB\xb0\xb2\xd0\x12\xfb\x99\xcd\xd9\x85\xffC\x85\xdd\x7f3l\xc8\x86\x06\x04\x96\xaf\xf1(\x90\xec\xe1\xa3\xc1\xe0\xd7\x9b\xbc\xf8\x13\xfc#\xf5\rBx\xcb\r\xa3F\xcb^\x9e\xaeIX\x92\\\x1f\xab\x1d<\r\x88B\x13"\xb7\0\x14U\x92\xc3\x82B\xe5\n\xa5\xba\t\x89\n^E\xb6\xed\xbfo\xef\x9a\x03W7\xdb\x9c\xfb\xfdT\xb5u\x15\x9d&\xa4\xb6\x0ez\x9b\x120\xe6\xe7\xd2\xe8\xa5\xfe\x84\x86\x86\xd0\xbbI\x15&\xf4i\xce\xe0\xdem\xb1\xdb\x1d\xf4j^\x9d*\xe5CI\xcd\xc8!\xaf\xa0\x98\xc3gn\xb2y\xdfE\xeaW+Cfv>\xd3\x86vd\xcc\xa0v\xc4\'\xa4\xb0\xe1D,\xe0\x8b\xc8\xb9\xe9\x8a\x11\xda\x9d\xc8\x01\xbe\xae\xfa\x0f\x0f\x03\xd8\xec I(\xa7\xae~\x0f\xc4\xb9\'\x137\x81\xfc%\xe1\xaf1\x9c3\xdf{`\x91\xab\x94\xeb\x80F#KB\xb8\x96\xf3N\'rH\0\xa2\xd8\x8c$\xcbZ\xb9R\x99\xbej\\b4\x8az\xf7\xb7}o\xab"\xad\x97^3\xa6\x8eA\'U\xd0i\xa9\xa0\xd3RY+Q\xee\xd2).\x95*\xcb\xb4IC\xa9\x16\xaa\xa7\xfa\x89\x83xJ\x12\x17Mz\xce\xfb\x95\xe1\xddW\xfb3\xa0E5Fv\xaeO\x9f.MX\xb2r\'\'\x13syP`e\xc3\x89\x9b\xa4%$S>"\x80\x8a\xe5\xc2\x19\xd6\xa1\x0e\x83ZU\xe7\xcd!\x1d\xe8\xd2\xbe\t\'\xce^\xa5Ni\x7f>\x9b\xd4\x97\xf8\x07\x0f\x99\xbf\xfe\0\x03\x1aU\xe6\xdd\xc9/\xb0\xf0\x87\x1d\xc4f\xb8\n\x02\x8d\x92D\x8dJ\xa1t\x9f\xb5\x86\x1f\xf7^\xa2]\x8d\xd2\f\xebT\x8f\x17\xda\xd5\xc6b\xb11w\xd3c7\xbb\x87\x04\xbd\xda\xd4\xe6\xe7\x83W\x10\xaa\x93\x13GN2\xf7\xdc\xe6\xa7\x8a\x04\xf5\x92\xc45\xbb\x93JZ-k\x8b,\xf7\xe6X\x1d\x9dx\xa2V\xe1/\x01K\x8e\x85\xa0\xc8\xa1O\xd5\x84x\x05\x1a1\x86\r!?%\x11\xe1\xfc\xbb\x05\x8b\x92$\xe5K\x95KO\xd2\x94\x0e5\x88\x9cB\xe4`\x7fDN\x81+i\xa3\xd8\x82(*F\xf20 \x87\x04 \t\x90<\r\xa0\xd5\xd4\xb1^\x8f;\x81\xf8\x9b\xab\xfc\x87\xc7\x15\xb1\xf2\x9a\xc5.\x82e\x1aF\xea\xb4\xfa6r1E\x1b\xd7r&3\x973\x19El?t\x03\x14;\xb7\xee&1\xf2\xcb\x1d\xac?\x1eC\x9f\xa6\x91\xdc\xb9\x97\xc2\xc2\x031$\x17\xda\x18\xd9\xbd1#>\\\xcf\xf6#W\xe9\xdc\xb8\na\xa1A\x04\b+\xa7\xeff#\xe4\x02tQ\xe1\xe0TP\x0bM\xc8\x1ezW\xb2\x89F\x83\x9a\x99kS\xaf\xde\x99\x06\x98\xdc3\x89\x9b@\xfe\x92\xb0Z\xadPh>\xad\\\xbds\x89 \xff6rX\x90\x9f+\xedPB\x98,\xc8\xfe\xbe.\xd7\x82^\xa7\x11FC}\x8f\x8c\xfc\xa5N\xa7\xcbz\b\b\bH7\x9a--[x\xea+?YP\xe7#\xcb\x84\x9d9\xce\xd4_\xafr\xe0f"\xa3\x8a\x1f\xa0\x97$.\xe2\xc3\'y\xbe\xac\xdew\x89\xec\xe4t\xc6\x0e\xeb\xce\xbe#\xe7\xf9|\xf7\xd3\x8a\x1fs^\xec\xc8\x95\x98{\xbc\xf8\xe5\x0e\xee\xdd\x8c\xe7\xf6\xfdT23\xb3\xb1Y-\xa4\xa6\xe7\x10\x1a\xe4\xc7\xf5\xdb\x89T,\x1b\xc6\xba3\xf7\xf9dL;\xbc\xfd\x02IK\xcb\xe2\xcc\xbd\f\0\xde\x1d\xda\x9a\x94\x87Y\x1c\xbc\xee\n\x90\x1f\xba\x92\xc0\xbc\xc9\x03\t\xf0\xf3F\xab\xd52\xb8uM\xee\xc4\xdc\xe7\xa1\xc9\xce\xbbCZ\x91\x96\x91\xcb\x83#\xc7\xf9$\xf90\xc3\x8b\xe30H\x12AO\x10\x88\x04\xdc\xb2;\xb9h\xb5\xc7\xcft\xc9Q$\xfd\xe5^>\x8d\x1c/4\xc6~\xf8F\x84=\xe9\xdc\xc2\xd3_\x8fo\xe9>\xe4>\xb8\x87\xf8\xbbU\xefvQT\xac\x93#\xcb\xb7G\xa7E\x14\x14\x81A\xef\xb2F\x84p)"\xe8u\xae\xa2\x1a\x83\x0e\x1cN$O\x0fIM\xcf\x0e\xd5\x9al\xeb\xff\x8b\xf8\x82#Ipt\xab\xcd\xb96\xc9\xe6\xf0\xf6\x91\xa8\x11e\xd0i\x9b\xa6\xdc\xa7\xc6\x8d\xb3\x18\x13n\x93_\xb9,\tiy\\{XL\xe7*\xc1\f\xed\xdb\x8e\xe9\x8bwQ\xecTy\xb7O\x03B\x03}Yy\xf8:\x1e\xb2\xc4K\xbd[0\xfa\xdd\x1f\x18\xd5\xbf5\xaf\xf4k\x85\x94\x9dJ\x8c\xc6\x8a\xeceD\xf6\xf3FXl`w \x19\r8\x0e\x9f_Nf\xde&\xf7,\xe2&\x107Tq\x97;\x89\xdf;\xaf\xddN\x12\x1a\x8d\x07\xb2\x14\x81\xdd\xa9\x93t\x1aW\xfa\xa2SAM\xc9\xf0w>x\xf89.\xb1Y\xacV+\x97\x15\xf5~G\x9dfT\xb8V\xf3\x94t\xabQ\x96\xa8mNac\xbe\x99\xd1\x1a3:I\xe2\x96j\xe0@`\x15\x14\x01v\xab\x836\r*\x13\x16\x12@\xddR>\x1c\x8fI&@\xaf\xe1\x8b\xd1\x1d)W&\x8c\xf1\x8b\xf7\xa0\bH.\xb2q\'\xab\x98\xaeu\xcbc0\xe8\x98\xf2\xe3Q\xf6D\xc7s\xf1N\x1a\xa3z7\xe7\xe7\x83W\xd9\xb0u/7\xe3\xb2x\xb1\x7f\x1b\xdaV\x8f\xa0c\xad\xb2\xd4\xaa^\x89\xf1_\xedx\xd4\xd0J\x11\xd0\xabYU:LZ\xc2\xb2=\x17\xf1vX\x981\xb1\x1f\x06s!\xdd\xda7b\xdb\xf4\xb9|\x9d{\x81\xfa:\x952Z\r\xa7\xadv\xaa\xe9\x1f\x07\xcd\xadB\xb0\xb1\xd8v\x7f\xbe\xcd\xd9\xf1\xaf\xea\xf3\x16B\xa8\x14=\xbc\x8bo\xe9a8m2Z\x03H\xb2K\x84\xd0\xc3G\xc6i\xf7\xa0\xf8\xe1/\x7f\xef\x18\xdab\xebigN\xae\x9f\x1c\x1e\xd4D\x0e\xf4\x93$\tp*\b\xabM\xa8\xf9E\xb9"\xaf\xb0XM\xc9\xf0\x94\xbc=%\xd9\xc7\x88\xb0\xd9\xd1\xd6\x8f\x8aT4Rk\x91\x94\x0e\xe0\x0fX\xfe\xc6\xaa\xbf\xe0\xb6*vn\xb69W\xc7X\x1d\xc2C\x88\xa8\x8a:\xadgS\x9d\x93:W\xceQ\xee\xda)\xea\xe5<\xa0r\xd7\xc6\x04\x97-K\xaf6u\x19\xdb\xbb)\xbd\xbb\xb6\xc4l\xb12\xa8e5\xa6\x8e\xec\xc6\xa9\xf37\xf8\xe9t\x1c\xeb\x8e\xc5\xb0\xff\xd8U\f\x9a<\x12=U\x84\xd9\x82(4!y\x1b\x91<\r\xd8O^\x89\xe6B\xec\b~_\f\xe5\x86\x9b@\xfe\xc2\xb0cwF\x8b\x07i\xab\xc5\xcd\xf8eJrZ&\xde\xc6f\x92\x97\xd1\x80\xaa\x82A\x8f\x88\xb9\xff\x15%Ed\0*$K\x8a\x1a\xd5\xdaCW[\xfb\xbb\x0e\x85A\x1a\x19\xc9\x9cM\r\xbd\x0e\x83$\xf1\xc0\xa1\xb2+\xb8\x06 \xf1\xdd\x9b}\xb8y;\x81)_\xef\xa2[\xd3H\xa6\r\xeb\xc8\x84\x81m\xa9^\xad\x02]\'\x7fK\x91\xf3qRS\x19O\x1d3\xc7\xf7a\xe1O\xfbH\xc8w\xa5G\xead\x18\xda\xb9\x01?\x1f\xb8\fN+)\x16\xd8x\xe2\x16\xf3^\xebG\xa5r\x11\xa8B\xd0\xa2Z\x04{.\xdc\xc5)\x04\xcdJ\xf9\xd2\xb5Um\x96\xefu\xe9m]J\xcc\xa1]\xf5\b:\xb4\xac\xcb\x92\xa9\xb3\x99\x9d|\xfeQ\x7fw\t\x88w*T\xd6i\x91\x80"U\xb0\xb4\xd0|y\x89]\xe9\n$\xff\xb5\x1f\x11\x11\x1f*\xe5\x95?\xbcnQ\xfd\x9a\x01\x0e\x9a\x97\xf3`h\x9bHv\x9e\xbf\x0f\x0f\xaf\xed\xc3Q\xb4\xef\xef\xaeSTU\x90\x95\xbfO\xb9tk\xbb\xf3\xf4\xd5[\xce\xd3\xd7\xf6+g\xae}\xabF\xdf~\x8b\x9b\xf1\x1fr;\xf1\x0b\xe5n\xf2\xcfjzv\x91\x9a\x99WI\n\t\xf0U\xd3\xb2\xc0b\xabH^A\rl\x8e\xfb\x1a\x8d\xe6\xb4\x10\xffe\xff\xdd\x82\x04!\x0e\xecr\xa8\xcb\x0e[\xeci:U\x8d\x8a\xd0j\x02*\xea\xb4\xd4\xd280\x9c;E\x97s\x85D_O\xe4\xc7=\x97hS\xb7\x02\x93?\\\xcd\xdd\xf8T\x9a\xd4\xadL\xc5\xf2\xa5(mP\t\x90U>\x99\xd2\x9fkw\xa2\x89\x0f\xf1B\xf26\x82F\x83\x92\x91\xe3t\x1e\xbf\xb4^\x9c\xbd1D\bQ\xe0\x9e2\x9e-H\xee[\xf0\x7f}\xc7\xa5f\xba\x17{\x1e\x96tZ\xa3\x9aW(\x9c[\x8e\xd4\x02b\x7f\xb7U\xe9\xa5\xde\x86\x98>^\x1e\xfe\xbf\xdf\xfd\xb2\xcdNy\x9d\x96 Y\xe6\x84C"\xeb\xb3\xef\xa8S\xab\x1a)\xa9\x19\x8c\xf8\xe2W\x9etJ\xbc\xdb\xbb.\x83\xfbt \xbf\xc8\xc4\xd6\xdd\xa7\x88\x89\xcf\xa0y\xed\xf2\f|\xae-[v\x9d\xe0\xc3m\x8f\xd4-\xf8`PS"+\x96b\xc8\xe7\xdb\xc0V\xec\x92\0\xf7\x0e\xe6\xf0\xe7\xa3x}\xfe&nd\x15\xf3\xf5\xcb\xed\t\x0f\x0bd\xfd\xce3\xcc\x98\xd8\x9fe\xab\xf6\xb0\xf2\\\x02 \x90\x8b\xb3y]\xa4P\xdf\xfc\x10r2\xe8\xe8ix\xea\xba/X\xedT\xd3\xeb0\x0b\x95\x85\x05\x96\xcdk\x9c\xea(!D\xf1_\xfdq\x90e\xb9\xcd\xce\x9d;w\xf5\xe8\xd1\xc3\x07 77\x97\xd5\xab\xd7\xf0\xfa\x82\r\xc5\xa4\x9e\xed\x88\x10\x17\xfe\x85\xe7\xd2\xab\xaaZ\xad\xc4\xeaH\xd6\xe9t\xc9%\xc5\x8a\xff?\xc70T\x11b\xf4,o\xc3\xa7\x1d\x8d\x06\xdf[v\'\xe3\xea\f#\xde\xa6\xa5Ei_\xe6\xbf=\x8cV\x93\x97"\x80S_\x8f\xe7\x8dO\xd72qpk\xa2\xaa\x96\'==\x9b\x01\x9f\xbe)\xa4@\xef\x18\x91\x9c~Y\xbd\xf5\xe0"6\xc7^ \xde=1<\x9bp\x17\x12\xfe\xdf\xfb-\xce9\x0f\x9f\xfbT\xdb\xa5\xe5\x87\xb2\x9f\x8f$U+7Q\xdcI\x9a\xf4\xbb\xadR\xe7\x9alS\xc24\xf2O\r\f:I_b\x89\x14\xa9\x82X\xbbB\x98F\x032\x84\xe0\xa4\xc8\xa0!%5\x83a\x0b~\xfd\xc3\xa9\xea\xd6\xaa\xc2\xea-\x87\x89\xb9\x97\xc6\xc8\xbe-\xe9\xd2\xae\x01\xdeFO$I\xa6[\xfb&\x84\x06\xf9\x91\x93WD\x83\xdaU\b\b\xf0e\xf8;?\xbav\xd4y\x82)\x9b }\x18\x9eF#\t\xb9.\xef\xc6\xeb?\x1e%z\xf9\x14\xe6\xbe\xf1\x02\xc5\xc5fF\x0f\xed\nb\x0f\x05[\xb73\xd5\x14C\x05\x9d\x06\t\xd8\xf17\x1a\x07\xeb%8k\xb3;W\x14\xdb><\/k>\x16\xbfI\xe0\xffe\xd7\x11RP\xa7N\x9d\xa6\xce\x9a5\xeb\xcd\xd6\xad[\x1b\0\xe2\xe3\xe3\xf9\xe4\x93O\xd6\xaeX\xb1\xe2{\xe0\x0e%\n\xba\xff2\xaf\xaa\xaa\xda\x81G1\x15\x87\xc3\xf1\xcf\x1c\xc3\x16\x07\xdf\x8e.\xb2\xde\xdd\xa7\xd5\xec\x97@\xfav\xce\b4Z\x0f\xaaV.\xcb\x8f\xeb\xf7!\x90x\xa7w=\xac6\x1b\x17\xd3\x8b\x18\xb5h\x0f\xd3\xba\xd5\xa2Q\xed\n\xa8g\xae\xcd\t\f\xf0\xff877\xd7]\xdf\xe1&\x107\xfe)\xa4\xe6,TS3^\xd1\x94\x8d(\xa3\x89,7\xc1\x99\x99{\x93\xbc\xe2\xa5On\xa2\x04\x06\xad\xee\x9f\x93So\xae\xa7\xf3\x8dRZ\x97+\xc8_\x96i\xe2\xa1#GU)\x8d\x86P\x8dD\xff\xf9\xeb\xd8\xb1|\x16\xb3\xfb6tY\x14\x12 \xe0\xa3\x17\x9a\x11\x1a\x12\xc8\xa2\xfd7\xb0\xab\x82}\xf3\xb7\x03\xf0\xdd\x84\xae\xa4f\xe4\xb0\xff\xcc\x1d\xfaw\xacCh\xb0?\xdeF\x0f\x02\xfd}\xa9Q\xc6\x9f\xc4\xb8,\x905\x94\xf1\xd2\xb0\xe2\xfd\xe1\x9c<{\x8db\xc5\xf5\xae\x0b \xf9a&\x0bW\x1f\xe2\xe8\xfd,Z\x94\xf2f@\x98\x99\xe7l\xb1x\xe9\x1e{C=\x90P\x9e\xf0\x8fZ\x85\xe0\x92\xcd\x993\xc7\xe2\x18\x01\xecEu\xfee\x87^\x92$\xa3\x10b\xee\xa8Q\xa3&N\x9e<\xd9;((\x88\xeb\xd7\xafuo\x9a\x89\0\0 \0IDATs\xe9\xd2\xa5\xf8/\xbe\xf8\xe2\xe3\xfb\xf7\xef\xff\xe4\xf2d\xfegC\xd5h\x8e%:\x9d\x85\x91:\x9d_\xc7\xa9\xcbhS\xb5<\x0b\xe7\x8c\xa2I\xdd\xaa\\\xe8\xd0\x88\xf2\xe5Js\xf6\xe2\rdIB\x15\x82\xd6\xcdjs\xe4\xf8\x19\x10\xeaq7y\xb8]Xn\xfc\xcfg\x92FR\xa5R_\xc95*7Rc\xef{\x88\xfb\xa9k\x81\xe9<\x91\xca*\xcb\xb2\xeeE\x8d\xb4i\x86\xbfW\x1f\xdf\x12\x95Z\x9b\x10\x1c\xb7\xd8\xe9b4\xa0\x02#\x8c\xf5I\xa8T\x97\x05\xaf\xf7%44\b\xb3\xc5F\xd5\x8a\xa5\xb9\xff \x951\xef\xaf!\xf1\x89\x06@\x9e\x1a\x99C\x0b_\xe1\xa5wWr\xb7\xf0q\x85\xfa\xb6\xd9\x83\xb9|3\x81\x0e-\xeb\x81\xe4\xeaFw5\xfa\x1cm\xda\xb6\xa7\xa0\xc8\x8c\xc3\xe1\xe4\xc3\xc5\xdb8\x99\x9c\xcf\xae\x0f^`\xce\x8c/i\x97\x16Ovq\x163<L\xf8\xc9O?F\xc7,6\x9az\xe8\xf1\x94$\x12\x1c\n?\x14Y\xf6\xaft(c\xf9\xcb\xc7;\x1e\x8f\xab\xaa\xaaQ@\x95\x92w\xf0\xbeF\xa3\x89U\x14\xc5\xf1\xac\xfc\x07???i\x96\xc3\x12\xd3\xd9h\xa8Q?\xbc\x1b\x1f\x8f\xedC\xb9\xd2!\f/\xb1\x84\x8f~9\x8e\xb8{\x89\xd4\xaf]\x15\xbb\xc3AZz6\xcfO\xff\xd2.\xe2v\x87\xbac\x1dn\x0b\xc4\x8d\xff\xb9+\xeb\x92\xb8\x9f\xdaZ\x8d\x7f\xe8+\x84\xf0\x03\xac\xb2,\xe7?)\x15\xae\xaa\xaa\xe3g!\r\xf3(0m\x7f\xdd\xcf\xab\x93\xaf,a\x90$\x8aK\\D2\xd0\xa98\x85wM5\x18\xf8\xf1&$Y\xa2Sd\x18s_\xedK\x80\xbf\x0f/t\xa8\xc1g\xbb\xae\x81\x10\xb4*\x1b\xc0{\x93\xfbq\xfa\xfc\xf5\xa7\xc8#P\xa7!,,\x84\xc5\xf36\xf3\xe1\xd6\x8b\x04\x19\xb4\xac\x9a\xfd\x02{\x8e_a\xca\x1a\x97\xce\xd1\x88\xc6\xe5\xf9\xf4\xad!\xbc2\xea]\xf2\xc6\xbf\xc4\x86\xe2l\x8c\x92D\x8c\xd6\x81Eh\xf0\xfb\xdd:\xc4!\\\x9f\xfdfk\xd6\xe7&\xfb\xd4\x87:\xddZp\xcbo?9\xae%\xae\xa4G\xee$Ey\xb6<z\x05\x05\x05\xc2\xec\xa9\xcb\xf2\x96%\xe6\xbd\xd4\x86\x17\x06va\xde\xa2u\0t\x8f\fA\xa7\x91y\xe5\xdb\xfd\xbc?(\x8f\xb2\x11\xc1\xbc\xbch\x0f\x98\xf3c\x02\xfc\xfd\x0b\xf3\xf2\xf2\xdc\x0f\x81\x9b@\xdc\xf8\xd7\xf0\x88(\x04\nK&\x96\xbf\xf5\xbb\xe9;\x87\xda\xc7\x92o\xfa\xe5\r?c\x9fP\x8d\x8c\xb7$a\x15\x02\x0fI\xa2\x8e#\r\xecf\xd0\x1b\x11\xaa``\x87:\x9c\xbbx\x93\xd5{\xa2yw\\wNvi\x81\xd1\xd3\x83r\xa5B\xf8y\xe3~\xdeZ\xf3\xb8\xbba\x98A\xcb\xca\xd9C8~\xfa2y\x0e\xd7\xb9slN\xacV;\x9e\x06\r\x14\xa6\x81\xe2`\xf5\xc1\x14\xb4q\x17Y\x95~\x94p\x8d\xcco\x02\x80\xc1\x1a\x99\\Eu}W\x02\'p\xc7\xa18\xb7X\x8a\x7f\xdc\xa1\x88Y\b\x91\xe5\x96\xdf\xfes"O\x159\x9e\x92\xc4\xf9\xef\xb7\xb2\xedt*\x9fL\x1d\xc4\x84\x91=QU\xc1G\x8b6\x02P:,\x88jU\xca\xb9Z\xeb\xe6&\x9c\xcc3\xe5\xb9\xddWn\x02q\xe3\xff\x98d\xcckT\x06\xa5\xe5\x99>\x99\xee\xeb\xf9fU\xbdV\x8ew(\xd4\xd0k\xa9\xaa\xd3\x10j\xca&S_\x8e7\xbb\xd4\xa2v\x8d*\xf4|\xf3;\xf2\x1c\n\x83?\xdd\x02\x02V\xbf\xd9\x8b\x03G\xce\xd3\xa2I-\x0eDU 1%\x83\xa0\0_\x1a\xd4\x8db\xe3\xafGxg\xdd\xd9G\xe7\xd2H\x12\xa1!\x81h/]#6\xe7:\x1e\x92\x84S\xc0\xf1T;\xe1\xc6\xa73\xab\x9e\xb4;\x14 \xd6\xeeP7\x9blG\xbf\xb7+\xef\0\x17\xdd#\xf7\xe7\xc6u\xa7\x9a\x0e\xd0,\xe7\x01o\xa5Eq\xf8\xc4e\xda\xb6p\xa9@7\xaf_\x99Z\x91\xa5\xa9S\xb3\nY9y,\x1a\xd5\x92\xc9\x13\xbe;\xe6\xbekn\x02q\xe3\xdf\0EQ\x1c\x07`\xfa\xb9|\xd3\xc9\xb9F\xfdw\x0eAx\r\xbd\x16\x1fY\xe2\xd5R\n\xdd\xbe|\x8d\x9c\xdc|\xc6\xcd]I\xde\x93\x99\x99\x12\x94.\x1d\xc6\xa2\xf5\'xg\xdd\x19\xbaU\r\xa1f\xe5\b*\x97WIJ\xcd\xa0]\xcb\xfaL\xc9\xc8e\xc5\xf18j\x87x\xf1\xce\xb8\x9e\xdc\x88\xbdOX\x81\x19\xff\x12\xdd*!\xb9\x02\xe8\xbfG\xae"\xf0\x90%\xa2m\x0ee\x8f\xd9\xb6\x7f\xa9]\xf9\b8\xeb\x1e\xad\xbf\x06\x1e\xa8j\xa2Y\b\xaa+Yl\x9e\xd9\x8f\xd0\x90P\xc6\xce\xfd\x19I\x928\xf1\xcb\x1c\xceG\xdfd\xc2\xdc\x95\xdc\xca13\xb0\x96\xd1!\xc1)\xb7\xf9\xe1&\x107\xfe\x8d(\x14\xec\x98jv\x9c\xae\n\xcb\xfbyy\xf4\xf7\x91%\x1a\\;\xc5\x8d\x9b\xb7\xd1\xe9<\x88\xc9}\xbao\xc2\xec~\r1\x99\xad\\Ls\t\x1d\xee\x8b\xcbb_\\\x16\xeb\xde\xaa\xcc\xe6]\'\x89\xb9\x97\xce\x84\xa1\x1d\x18\xdc\xbb\r\r\xebF\xf1\xc3\x9a\x9dL\xfa\xfe0o*\xb6G&\x86\n\xe8\x9f\xb4\x88\x80,E\xe5\xb8\xc5^|\xc4\xa1\xac=\xa5\xa8\x8b\x81\x18\x0f\x0f\x0f\xd9j\xb5\xba\x07\xe9O\bI\x92|\x84\x10\x9e\xc0\xa3\xd6\x86\x0f\x0419\x8aJ\x05\xad\xc4-\x87\x85\xd8\xb8\x07xy\xea\x999\xa6\x1b\xfb\x8e\x9c\xa3zdy:5\xa9\xc2\x88\x10\x7fr\xd2\xe2b|}}s\n\n\xdc\xf1s7\x81\xb8\xf1\xef\x85\x109q05\xdaf\xef\xdd\xce\xd3\xa0\xab\xae\x95\x98\xfe\xc1w\xbc\xf3\xc1d\xce|3\x81[q\x0f\xb0\xdb\x1d\xd4\xaa^\tY\xd60d\xc6\x0fO\xed\xde\xb7f8\xe5\xca\x86\xf3\xf2\x17\xdb\xb1(\x82#\x9fl&D\xaf\xe1\xec\xea\x99\x84\x06\xfb\x83\x10T\xb2>\x04O\xd7\xf6Y\x8aJ\xa8F&SQ\xb9mw\xd8.\xda\x9c\'\x97\xd9\x9c\x1b\xcd\x92\xb4\xc5\xd3\xd33\x0f\xb3\xb9\x87\xdc\xae\xe1B\xbb\xd9ZG\xf6\xf6T$\xad\xe6\xae\x1as\xff\x80x\x98\xbd\x1e\xb8\xe7\x1e\xb0g\x0f:\x9dN\xe3p8"\x81:3g\xce\x1c\x1d}\xe5F\xf3\xfd\xf7\x15\x0f\x12\xcfO\xc1\x96\xb3\xb4da\x11\x9d\xe2T\x94f\x1ez\xcd\xb73\x161l\xee\xeb\xec]\xf1\x0ek6\xedc\xda\xcf\'h\x1a\xe1\xcb/_Oa\xf7\x81\xd3\xac\xf9e\xc3\x89\x82\x82\x02\xb7\x01\xe2&\x107\xfeS<\b\xdb\xcc\xf6\xad-<\f\xcf\x1b%\x89\x97r\xef0\xf2\xab\x9d\xd4\x0f\xf1\xa6G\x8b\xaa\xf8\xf9x\xe2\xe9\xe9\x81\xdd\xe1d\xfe\xe4\xde\x1c8y\x1dEQ\xe9\xd8\xa2\x16\x91\x95\xcb\xf2\xfe\xc2\rX\x94\xc7\xefs\xed\xd2~$&\xa5\x12\x16\x1a\xc4\xdb=j\x10p\xcbF\xba\xa2%\xd5\xe9\xe4\xac\xd5\x99\x19\xedP\x0e\xedW\xd4= \x1d\0\x91UBd\xf5,\xc1>\xeb\xf4\xdd\xbbuF\xa3\x91$\xad\xab\xf2C\xd8\x9d\xe1HRk%;\xff-\xec\xceo%IzO\b\xe16M\x9e\x11\xe2([\xb6\xec\x88\xa9S\xa7\xbe\xdd\xa4I\x93jaaaRHH\b\xdf.\xfd\x8e\xfd\xb9w@U>\x93\xee\x1fX+\x84(\xf4\xf2\xf2\xca|\xe0p\xdci\xe1A\x8d\x06\xa6<\xfc|\xbc\xc8\xc8\xca!\xaf\xc0\x84\0\xda7\xaa\x8c\x9f\xaf7K\xd7\x1f"\xe1n\xccI\xf7\xdd\xfd\x13Z\xa6\xee[\xf0L\xa3\xd1\x0e\x7f\xcf\xf3\x8d\fz9\xde\xa1\xd0\xa6L/Tc \0\x03\xea\x94f\xf4\xa0v\xf4\x99\xfb\x0bot\xabM\xe3zU\xa9Y\xad\x02\xfe\xfe~\xbc\xf1\xde\xf2G\xadG\xc1\x158\xdf\xfb\xe9\x8b\xec=\x12\xcd\xeesw\x19\xd1\xb1\xb2\xf8r\xc6k\x8b\xf2\x848\x05\\\x95e9QU\xd5:r\xa3\xea\xd3\xa5\xf0\xa0JH\x92@\x96\x03%\x8d\\Q\x8e\b\xd1<jS\xeap\xa2\xe6\xe4\xe7*\xe7o,\x11)Y\xbb$I\xba]\x92e\xe6\xc6\xb3\xe1\xa6\xf2\x9c0a\xc2\xeai\xd3\xa6\r\xa8X\xb1"\0v\xbb\x9d\x89\xafMgEtQ\x89BA\x0e\xdc\xd8\xd0\x128\x03\xd0G+\x7f\xb7$\xc8g\xdc\xaf\xfd\x86\x13\xd4\xb5\x1f\xb3\x97\xeef\xd9\xec\xe1\x04\xfa\xfb\x90WX\xcc\xf5\x9b\xf7\xf1\xd2\xd9\xd5\xb1\xa3\x86U\xc6\xdd(\xcam\x81\xb8\xf1\x9f\x83\xa0\xa0\xa0\xe8]E\xf9G\xeb\x1b\xf4\x1d+\xe84\xf4\xcdOb\xab1\x10Y\x82\xf1\xc3\xba\xb0q\xc7I\x1c\xaa\xe0\xf3=\xd7a\xcfu\xd6M\xefC\xd2\xc3l^{\xa9\'/\r4s?!\x19\x83^O\xdd\xda\x91\\\xbcr\x9b\xaf\x0e\xc4\x000{\xf9\x8e<Y\x92\xdeB\b;\x80\xaa\x95{\xe8\x86\xf4\xd8$\x07\xfa\x19Q\x94\xc7\x8d\x8b~\xeb\xf3\xae\nP\x15\xd4\x8c\x9c|\xe7\xaf\xc7[\x02\xb7]\x06\x8a\xdbc\xf1\xac\xc0\xcb\xcbK\x1a2d\xc8\xf2\x0f?\xfcp@`` \xbf\x8d_nn.?\x9dI\x03\xef\x90\x92\x19\xc3\0\x10\xf2\xdb~\'\x9c\xea\x85,E\x1dW\x10\x12\xc6\x82%\xbbH(\xb6s\xe8\xc4e\xde\x9c0\x98\xb7\xe7\xad\xe1p|\x0e=\xca)6Y\x96S\xffV\x9a\xba\x1bn\x02q\xe3\xdf\x84\x9c\x9c\x1c\xf1#|\xf1\x82\xdd\xd91J\xaf\xa5\x7fa,^\xcf\xf5d\xd4\x0b\xdd\xb9\x97\x90\xc2\xf7\xa7\x9f\x0e?\x84\x85\x05\xb3`\xd5\x11\xde^{\x9a\x01uJ\xd3\xb2^E\xda4\xaf\x87SQxu\xf9\xa1\xc7\x1b\x16g\x9d-\xd1M\x02(\xa3\x1d\xd0q\xad\xe4\xebe\x94\xbc\x8d\x88\xc2\x12\xfdC!\x10\x0e\x87\x8bHt2\xd8\x05\xce\x93\x97\x17\xfdF\x1en<[\xf0\xf4\xf4\xec3~\xfc\xf8aw\xee\xdcQ\xa2\xa3\xa3cbcc\xaf\x9a\xcd\xe6rNU\xd3^\xf1\xf0{\xbc\xa1F\x0b\xb2.\x02\xd5U4\x9f\x07\xb1\xbb\xcd6L:?~\x99\xd7\x9f\x07IiT(_\x8a\x0f\xbeX\xcd\xfbo\f\xa6\x7f\xcc]p\xe4I{6\x7f\xef^M\xb8\t\xc4\x8d\xff\xbc\x11\xd4\x1e8a\xb5\xdf\x8e\xd2k\xa3\xea\xeb\x14\xbc;\xd7!;7\x9fqK\x9eV\x01\x7f\xb7O\x03\xcc\x16+\xd1%\x1d\x06\xb7\\Oe\xcb\xf5T\x8e\xd6\xa9\x86\xb7\x8f7Az\r9v\x05\x14;d\xdf9\xf6\xc8\xadQ1\xe25M\xe9P\x7fd\xd9\xd5\x9e7\xd0\x17\x91_\f\xb2\x8c\xa4\xd5"\x9cN\xb0;Q\xee%\x9b\xc9-\xfa\xc1= \xcf$yH\x81\x81\x81o\x7f\xf1\xc5\x17+\xd7\xad[7\xff\x89E@Sj\xf4;\x83o\xf8\xe3JQ\xad\x01\x02\xaat \xe7\xd6\xb2\x92o\x1e\xce\xf1\x8eR\xf5\xfb\xe2\xe4\x1e]\xdbQ\xb1|)z\xbd\xb1\x8cl\xbbBD\xa8?C\xfau\xa4}\xff\tnW\xf9\x9f\x14\xb2\xfb\x16\xfc{\xa0\xd7\xebe \f\xa8\x05DJ\x92\xe4\xf3\xcf\x1c\xc7\xe9t*+\xac\xce\x9f\xf2T\x95\0Y\xe6\xd4ks\x90\x80\x13\x0b_a\xc9\xd8\x0e|=\xaa-G\x17\x8c\xa6u\xb3\xdaL\x9a\xb7\xf1\xa9}+x\xe9\xd1\xeau\x9c:{\x95\xef\xdf\x1e\x80^\x96\xc0Z(P\xcc\xc7\x7f\xbbF\xb9^\xb5\xbe\xd8\x1d\b\xb3\xd5\xd5A\xced\x05\xbd\x0e\x84\x8a\xb0XA\x15\x88"\x93S\x8d\xbd\xf7\x06n\xad\xabg\r\xa5\x81\x17-\x16K\x97\xb8\xb8\xb8\xc9\xeb\xd6\xad\x1b\xfd;\x0b\xf2<\xb1\xdb\xfa\xf20&\x81G\xe2\xc9\x12\x84Ty\x0e\xa8T\xf2\x85\xf9\xa7\xaff\x8aSK_#\xfa\xea\x1d,V\x1b#\xdaE\xd1\xb1R\x10]\xda5"\xaf\xa0\x18\xa3^\xce\xd2h4n\xff\x95\xdb\x02q\xe3\xff\x13\x91@W`\x17\x8f\x03\x88\x95{\xf5\xea5q\xc0\x80\x01\xfd*U\xaaT\xde\xdf\xdf_\xb6\xdb\xeddee\x99/]\xbat~\xc1\x82\x05\xcbM&\xd3fEQ\xfea\xc9\xdad!6\xde\xb2;?i\xe1\xa1\x97[\x17\xde\xa5\xcf\xfb\xabi[\xb9\x14=ZU\xa7E\xe3\x9a\xc8Z-9y\x85\x14;\x1e\xbf\xc3\x91>\x06\xbe\x9d=\x94\xbd\x07\xcf\xf3\xe9\xce+,\x1e\xd7\x89\x93\x8b_\xe5\xf0\xa1\x03E\xb3fl\xbe\xae\xaa*v\xc5\xd9K\x1f\x11\x12)l\x0e$_/\xd4"\x13\x92F\x83\xe4a@\xb5\xda\x90\x8c\x9e8\xef$\xdcQ\xf6\x9c\x99\x88\x10G\xdc\xc3\xfd\xec\xc0\xc3\xc3C\xb6\xfaU\xdbE\xe9z\xf5\xb0\x99\x04I\x97\xbe\xd1ZR.;\x9d\xce\xdf\x8br\xed$\xe9\xe4ud\xed\x19\xc2\xab\x97\x02\xc07\xc2\x80\x7f\x959\xe4\xdf{I\x92$\x9b\xaa\n~\xdd{\x9a\x0f\xb7G\xd3\xa7\xe6\x1dV,\x98Bbr:KV\xee $\xc0\x8b\xfa\x95\xbd\x0f\xc6\x9e\xb1\xbb\t\xe4O\b\xb7i\xf9\xbfa\xd6\xc9\xb2\xa1z\xf5\xea\xaf\x1a\x8c\x01\xef_V\xaax\x93\x97\x94M\xc2\x91\xb6@\xcf\xe7\x9e{n\xe6\xf4\xe9\xd3\xfdk\xd6\xacI@@\xc0S\xfb\t!HLLd\xf3\xe6\xcd\x97w\xef\xde\xbd\xeb\xd8\xb1c?\x02\x89\xff\xdd\xf9\xbc\xbc\xbc\xa4wT\xfb\xcd\x97}\x8d\xd5\x0bTA\xf3\xa0v\xe4\xfb\x97\x01\xe0\xc0\xbc\x97\xf8\xfc\xfb]tkY\x9dV\xcd\xeaRPX\x8c\xa7A\x8f\x8f\x8f\x17\x9b~=\xca\';\xaf>:\xce[=\xea\xe0\xa3\xc9.\x9c\xb3a\xe5/\x92\x9fO9m\x8d\xca\x9d%\x0f\xbdN8\x9cH\x06=\x92A\x8fp8\x116;\b\xa18v\x9f\xf8\x94\xc4\x8cO\x84\x10\x16\xf7\xa8?s\xcfh\xbd\x15+V\\\xbeu\'^\xfa\xfcX\x8e\xab\x89X\xe2\x85\xed\xe4\xde\x9e\r\xc4\xfcq\xa6\xd0t\xa1F\xbf=\xf8\x84\xbar\xb5\x8b\xd2\x15b\xb7w\x94\x10W\xfb\f}5g\xfa\x94q\x9aE?\xee\xe2\xcdq}9p<\x9a\x86\xb5+\xd3c\xd6\x1a\xc8\x89/\xe6\xee\xbe\x06\xc0]\xf7]\xff\xf3\xc1\xdd\xd2\xf6_u#5\x1a\xad\x10\xa2\xfb\xe8\xd1\xa3\xe7\xbc\xf6\xdak\x0b>\xf8\xe0\x83\xc1#\x86\xbd\xa0\xff\xf1\xe7\xcdX\xfc\xcb\x1b\xb1\x9a\xfc\xb1dO\x8b\x8b\x8b[\xfa\xe3\x8f?\xae\xff\xfe\xfb\xefc\x15E\xf1\xf3\xf1\xf1)\x13\x1a\x1a*I\x92\x84$I\xf8\xfb\xfb\xd3\xa2E\x8b\x88\x81\x03\x07\xb6MM\xcb|\xf5Z\xb2\xad\xaed\xcd\xde\x81K\xa7\xf0o\xc2\xe1p\xa0\x154|\xceh\xa8\xef!I<\x10^\xdc\xf0\x89`t\x8b\xca\xd4\xafU\x99\xf7\xd6\x9f\xe2\xc0\xb5$~\xd8u\x81\xdb7\xef\xd3\xbb}=\x9cN\x851_\xefz\xaa\xf1\xc4\xcc\x17;\xb1\xea\xec>Cf\xcbZ\x8d\xb4\x91\xe5#\x01\rB \xe9\xb4\xa0(\b\xbb\x13\x14\x05\xc9\xa0\xc7\xb1~\xdfT\x91\x9a\xfd\xe9\xdf\xbb.7\xfe3\xe1\xe3\xe3#\xf5\xed\xdb\xf7\xb3Y\xb3f\xd5\xbb}\xfb6\xfbof\x83V\x0f\x01\xe5\xa2\xf0+?\x1e\x9dOO\xccy\xbe\bG\xb6\xc1`\xc8W\x14E\x80\xb8\x8f\xcd\x1cA`\xf9F\xc8\x1a0x\xc9h\xbd:c*(w[\xae\xd8\xa4\x94\xa7\x96\xe7\xba4\xe6\xe7M\x87Yt\xe0\x06#\xbb5"L\xcd\x16gv\xfc8\x02\xa1\xfe#5 \x15\x81J\xde\xde\xde\xe9v\xb7\xf8\xa6\xdb\x02\xf9\x8b\xa1\xcd\x97_~\xb9\xb8w\xef\xde\xb5+V\xac\x88F\xa3\xc1l6\xb3n\xfd\x06\xc6,9\x01z#\xa4\xdf\xba\xef\x99q.\xd2b\xb1\xfc>\x1b\xa5\xdd\xe2\xc5\x8b\xbf\x7f\xf9\xe5\x97\xabxzzr\xf2\xd4)bbn\x11\x1c\x14\xc0\x17\xcb\x7f\xe5|\x8e\x04W\xd7\x0eF\xa8\x9b\xfe\xde\x05DHL?\x1a\xec\xfb\xb9\xaf,\xb1\xde\x10N\xc4\xc2o(_\xb6\x14\xd3>]\xc3\x99\x87\x8fK14\x12\x1c]8\x9e\xd8[\xf1T,\x1f\xc1\xa7\xcbv\x92\x9cgf\xda\xd0\xd6\x94\n\x0ff\xc073\xd1D\x96\x05!\\n\xab\xbc"$\xa3\x07H\x12\xc2dA\xf24\xe0\xbc|\xeb\xac|\xe2j+\x87\xc3\xe1vK<\x83\xa8X\xb1\xe2\xf0={\xf6\xac\xaaV\xad\x9a\xd4w\xf0\x18v\xa4x\xfcq#\xa7\r\xccy*\xa6\x9cx\xf2\x92\x8eR\x98p\x1c\xb8I\xc5\x0e\xfb\t\x8b\n-1\x99Au\x80F\xff\x87\xdd=52\xf5\x824\x9c=\xb9o\x8b\x94\x1f7V\b\xf1_i\xb8G\x11T\xfdcB\xab\xf5A\xa3\x95I\xbb\xb9M\xca\xbd=Z\b\x91\xef\x1e\xa9\xff|\xb8c \xffC4i\xd2d\xe2\x97_~\xb9\xb0E\x8b\x16:Iz\xcc\xc7_-\\\xcc\xac\xedw]\xe4\x01\xa07\x96\xb5Z\xad\xbe\xc0\xef\xc5\x80\x8eMzm\xf2\xf4\xac\xac\x9cm\xb5\xeb\xd4b\xc8\x07\x9bqx\x06\x80P@\xf2\x05\xd9\n\x92&\x10\xf1\xf7\xe7\xeaLA\x96M\b@"\xd8YHTdy\xbe\xf9q\xe7S\xe4\x01\xf0\xc9\xb0V$\xa7\xa43~\xd9\x01\xde\xe8R\x93\x99\x13\xfbP\xbdj\x05~\xdds\x82A\x1f\xac\x83\x8a>\xc8\xa1\x81\xe0TP\xb2r\x91\x03|Q\xf3\n\x9142RI\xfd\x87r\xf2\xca7\x8a\xc3\xe9&\x8fgq\xc5(I\x9es\xe7\xce\xfd4**J\x02\x989m\x1c\xbb\xc6\x7f\x83\xfad\xaa.\xb8\xb2\xad|\xc3e|\xc3\xab\x10^\xa3\n\x0e\xcbX\xac\x05\x02\x87Uy\xe2`\x7f\x93<\0,\x8a\xca\xd9L\x15\xaa\xb4\x19 r\xca\xb6&\xed\xc6J,\x19\xfbJ\\Y\x1e@S\x82k\x0e$\xb8JO\xfc"\xf4H28\xacP\xaaN\x7fa\xc9\x8f\xc7\x9c6\xdd=Zn\x02\xf9S\xa3R\xa5JC\x96-[\xb6\xa8~\xfd\xfaO\xb9\x02\x85\x10\x9c\xbb|\x074O\xac\xec\xbc\x83\xf5B6<\x8fb]\xfe\x87\x03\x85\xd4\x1e\xf9\xfe\xaeD\xd8\x9d\x04\x9e%q\x11\xa9\xe4\x90\x96<\x15\xd5q\xfa\xbf\xbb\x16\x05\xecJ\x89f\xae\xc1T\xc4\xe4\xf7~\xe0\xb3\x19#\xe9\xde.\x83\xc3go\xe2i\xd0\xd2\xa9U=\x90$\x86\xbf\xff\x8b\x8b\xe4\x0e\xdc$.1\x8b\xaf\xe6\x8ef\xd2\xf7\x87\x01\x81&\xa7\x105#\x07tZ4aA\xa8Yy\xc8\x01\xbe\x88\x82b\x90%\x94\x87Y\xc5\x92C\xd9\xedN\xea\x7f6\xe1\xed\xed\xdd\xa3]\xbbve~{Nu:\x9d\xeakJ%_\xe7)\x83\x04\x92\\\xf2\x91x\x8a(\xf4F\xd0\x1b\xa5\xff\xef9C\xa3\x83\xd0\xaa\xa1\x04Wz\x1b[\xf1\xdb\xd8\xcd\xae\xe3{\xf8\x80\xce\xf8\xd4yft-K\xa3\x06u\x188\xec\xb0\xd1=Rn\x02\xf9\xb3\xa3\xec\x82\x05\x0b\xbe\xfd\x8d<\xccf3\x99\x99\x99\xd8\xedv$I\xe2vr>\xc8\xe1\x8f\xb7\xd6{A\xd9\xe6s\xa4\xc4c\x1b\xff`\x9e\x9b\xf3\xe2\x915\xae\x97\xed)VpB\xda\xcdu\xfc\xad\xa0\xe6\xef\xe0\x0f\x81\xfa\x92\x97\xd1\x84\x96\x93)E\xb4\x9a\xbc\x947\xba\xd6\xa4W\xc7Ftl\xd3\x88\xcf\x16\xaf\xe3\xbdM\xe7\x1f\xed#K\xf0\xda\xc8n8\x15\x95\x06\xa1\xde\\\xce,B\xf2\xf1B\xf2\xf7E\x14\x9bP\xd2s\x90\x03}]n,\xad\x06\xc9\xcf\x1b\xf5\xe2\xcd\x83ny\x92g\x17\xcd\x9b7o]\xa6\x8c+\xc1b\xdf\xbe}E\x83\x06\r\x1an2\x99\xb2\xe0X\x1d@\x83\xd6\x18\x84w\xa9\xd2x\xfaU\xc1\xc3/\n\x83w\x18\x1e\xbeZ\xf4^ \xff\x0fB\xa6\xb2\x16<\xfd]\x9f\xbf\x05U\xa1B\xf92\xd4\xa8Q\x1d\xd9\x91{\xd0m\xde\xba\t\xe4O\x8d\xe1\xc3\x87\xcf\xee\xda\xb5\xab\x7f\\\\\x1c\x07\x0e\x1c\x88\xf9\xe1\x87\x1f6\\\xbbv\xed"\x90\x07\xd2X\x1a\xbc8\x86\xdf[\xf7!\x95K\x8b\xdc\x07\x9fR\x980\xe1\xa9\xef\x8b\x93~\xc0\x9c\xfb\x06>aO\xc7\xa4\xb2\xef\xa6\x91\x17\xf7\xc6?r=}t\x9a\x1e\xbf\xf5\xef\xb8\xebY\x1a$\x19U\b~8\x14K\xaf\xce\xcd\x98\xf3\xd9J\x06\xf6jMd\xf9pN\\\xbcMh\xa0\x0f\x9d\xda4\xe0\xf6\xddD\xf6\x1d\x8d\xe6\xabw\x862\xf1\x83U\xdc*\xb2 \xac6d?\x1f\xd0jPs\xf2\x91}\xbd\x10\x85&\x84\xc9\x82z\xf1\xe6/\xee\xd1\x7fv\xd1\xa0A\x83\xd2\xb2,s\xed\xda5u\xe8\xd0\xa1#L&\xd3\x8e\x92\x9f\\}\\\x9cf\xc8\xbf\x07\xf9\xae`{QQQ\x18P\x1fcDg\x82*O\xa0Tm\x8f\xa7\xac\x93\x7f\x05T\'3:E0x\xd0\0\xbc\xbc\xbc\xe8\xda\xb5k\xdb\xbd{\xf7nw\x8f\x96\x9b@\xfe\x94\x90$)\xa8E\x8b\x16CW\xacXq{\xf2\xe4\xc9o\xe9t\xba=\x0e\xc7\x93]\x9c\xc4\x03\xd2o5\xa6T\xed\xba%\xdaA%\xe6\xbc\x1e\xca6\x1cKl\xd2v\x84\xb2\xff\xd1\xe2L\x96\xe3U\xbb\xc9\t<6A\xac\x85\x90x\xea- \xeb\xef]\x8b\xd1h\x94\xc2,\x96I#\xbc=\xba\xc9@\x9e\xaa\x12>\xfb5\xbe1\x06\xe3a\xd0S\xabz%\x8e\x9d\xbe\xc2\xfc=\xd7X\xbc\xff\x06\xb3\x067c\xc1\x9cq\xac\xdfz\x90\xf9\xdf\xfd\xca\xae\xdb\x19\0\xe8t\x1a~]:\x95>\xefO!\xde\xc7\x88\xb0\xd8P3\x8b\x91\x03|\x10&+R\x90\x1f\x8e\xcb\xb7\xee\xc9\x8a\xd8\xe1^\x1d>\xbb(**\xb2\xdb\xedv\x96/_\xbe9??\xff\xd7\xfff[!I(B\xeb_\x8b\xe0\xc8\xe7\b,\xfb\x0f\x90\x87\0\xc5\xe1\x8ag(\x8e\x92X\x9e\xc6e\x81\xc8\x1aW\xb6\x97\xf4\x84%#\x14(\xce&"\xac\xa6\xc3\xdf\xdf_\'I\x12]\xbati\xb8w\xef^\xf7`\xb9\t\xe4\xcf\t!D\xd7W_}\xf5{\xe0]\xc0\xecp8~\xbfI\xa6\x94v\xb1\xa5\xb0\xe4\x7fO\x85fC0x?\xfe\xc5\'TC\xf9\xd6+xp\xac!\x90QBH\nB(O\x11HAZ\x9a\x8c\xb2\xe1\xbf\x99\xac\x1b\rp\xd8>\x18\x1d`\xec^U\xa7E\x056\x89P\xba\xb7jEP`\0\x1b~=\xca\xb89+\xb9Q\xd2d\xca\xa2\xa8DV\x88\xe0\xfe\x83T\xee%\xa6="\x0f\0\x93\xd9\xc6\xbd\xf8\xa4\xff\xd7\xde\x9d\x87UU\xed}\0\xff\xae\xbd\xf7\x198\x07\x90A\x11\x91APL\x94\x1c2\x15\xc9\ns@\r\xd3\xaeus\xcc\xb4\xf4\xf5f\xd7\x12\xf3\xde\xeb\xab\xd7\xd2\xb2\xdel0K_\xcd\xbaj\xde\xccR\x8c\xbaN\x98\x9a\xc2E\f\xbd\xa9\xa8\x80L"\x88\xccp\x80\xc3\x998{\xef\xf5\xfeq\x9cPsz\xcdG\xed\xf7y\x1e\xff\xd8\f\xae\xf3\xac\xc59\xbf5\xfe\x16N\x9aj \x99\xf4`z\x1d\xc4\x80VP\xeb\xcc\x80F\x84ZS\xaf*Ii\xb3q1G\x16\xb9\x07\xa5\xa5\xa5\xe5\x1d<x\x90\xafX\xb1\xe2\xfdkt\x90\xf4\x9c\xf3\xfe\xf0\xe94\x91\xb7\f\x8b\x83\xa7\xbf\x11\x92\xfe:\xa3\b\x05\xa8/u\xc0T\xf4#\xaa\x8e\xef\x06\xe7\xb9p]>\xe5\x80\xeb>2\x0f\xb8\x920\xb6\x82\xa8\xf1\x85\xe4a\x80*+p6T\x008:g\xce\x8f>\x03\x07\x0e\xfc\xa1s\xe7\xceL\x92$Z\x03\xa1\0r_K9w\xbf\xc5\x10\xc6X2\xe7\xbc\xe6*A\xc6"\x99OM\x90\xf3l\x15\xe8\xf0\xd8k\xb8t\x97\x8b_\xc7\xb6h\xac^#\xd5\x9d\x1c.\xcb\xb2\xa2\xaa\xaa\x0e\x82\xd8\xbc-\x1a\xca\x92UUu\xfeJ\xf9\x8fL\xd2\x88\x7f\x1fi\xd4\x0e\xea\xae\xd5\n\x1a\x0688\xc7F\xd9\x0b\x0b\xda\xf5C\xac\xca\xf1\xe1\x8aM\x98<f\bL&3\x1a\xf7\xe7\xc2\xdfC\x87\xe9c\xfb\xc3\xcdM\x8f\x89\x7fY\x89UoM\x86\xb7\xa7\x11I\xa9Y\xe8\xdf\xbb#\x86<\xd1\x1b\x7f\x9e\xf7)\xa4\x07\x02 \xf8z\x81\xdb\xecPJ\xab x\xba\x83;\x9dp&\xed\xff\0M2M+\xdc\xe3222\xf6-^\xbc\xf8\x19I\x92\x8e8\x9d\xcenpeK\xb0\0\x90!H\x1d\xe1\xdd1\x86{\xb5\xed\x0fw?_\xe8=\x9b/\xa6;\xed\x80*\xa3Y\x87\b\0\x1cf\xa0\xf8\x97-\xa8\xc9z\r\xc0\xa9\xeb\xbe\b\xc5\t(\xb5\xcd\xbe\xe4t:\x85\x83\x07\x0f\x16DDDt(///\xa1\x96\xa2\0r\xff\xf2\x8dX\x8c\xe0\x87\xc7\0\f\xbc\xa1\xbc\x1eE\x07fB6\xaf\xb9\xfc\xc7dYV\xdc\x94\xeax[^\xb2\x82\xf0\x98Y\xd0{\x9e\x9b\xb3\x92\x80\xa0\x87\x86\xca\x96\xea\xf9\x90\xcb\xdf\xe0\x9c{C\xd2]\xccK\xa64\x01u\xa7\x0e]\xa5\xe4\xe0?J\xc2\xc7\xcf\xbb\xebGv\xd5i\x98\x04\xd7)\xbe\f\x88\xf8\xc2\xb3\x0b6{=\0HZ\xd8\x1d2\x8e\x15T \xfe\xed/1}\xdc\x13\x18:0\n!\x81~\xf8z\xf3.\xcc\xdft\x10\0\xb0v\xe3.\xccxq\x04zv\xeb\x88\x92\xd2*\xbc0\xe7s\x9c\xac\xc8\x82&\xb45\xd4\x8a\x1a0\x83\x1eb\x9b\x96P\xceV*\xce\x9di\xefj\xceT\xbdAC\x8f{\x1fc,u\xeb\xd6\xad\x9f\xc17\xe2k\xf8wy\x16Z\x03\x03W]g:4z4\x9br\xbd4@\xd4\x16\x9fF\xc9\xc1lt\x1e>\xb4Y\0q4\x02y\xfb\x96j\x1c\xe5\xb3\x9c\x80r\xab\xaf\xcb\xe9t\xaa\x87\x0f\x1f>8l\xd8\xb0\x0e\xeb\xd7\xaf\xff\x91Z\x8a\x02\xc8\xfd\xfa\x06t\xeb\xdb\xb9\xed\xd3\x9d\xbb\xb4\xc4\x17\x87\xea\x81V\x1dZ\xc0\xe0\xfd\x0f\xe4\'\x87I\xce\xea7/\xcf%d\xb3\xd9\xb8V[\xf9\x97\xa6\x82\x7f\xbb!<\xe6eh\x8d\xaeo\xe8\xdc\x81\xb0~s\x91\xfd\xc3\x11\xa8\xce"\b\xd2\xc5\0\xe2\xb4\x01\x8a=\xf3\xfc\xa3\xb7\xb77\xd3\xd4\x99\xc6/0\xea\x96\xc5\x1at\x9eZ\xc6P!+8*\xeb\x90\xe0\xd5\x19\xdd&?\x83q\x0fw\xc3woo\x04\xe7@\xe2\xf6T,|u\x14F\xfcm-F\xbf\x97\b\xa3\xc8\xf0\xd3\xb2\xe9H\xdcw\xe1\xbf\xc4\xb3q\xfd0\xeb\xad\xb5\xd8\x9e[\t(N0G\x11\xb4\xb1!\x10\xbc=\x01\x95C\xad\xad\x83\xf3h\xce\teGZ<\x80]\x14<\xee\x0f\xe7r\xac\xed\x82o\xe8Rw8Y\xa3\xa4\xbbr\xf7\xdf\xa5\x81\xa3\xaa \x0bg\x7f~\x07\\\xdd\x8b\x90\xc7\x0e\xc0\xd8\x12\xcd::E\xe9\x9b${\xd9,\xe7\x959\xb4n\xda\xe1\xc3\x87+\x93\x92\x92*\x8a\x8a\x8a\xd6SK\xdd#\x9f\x87T\x057G\x10\x84\'\x8e\x1d;\xb6\'00\x10a\x8fMB\xad\xa1\xcd\xc5\x9eX\xe9\xf1TT\x1c\x99\xab\xd3\xe9R\x1d\x0eG\xb3\xe5\x0bQ\x14%\xa5E\x87\r\b\xeb\xf7L\xb3^^uA\x1d\xf2\x7f\xfc\b=&,\xbc\xd0\xb3k\xac\xe48\x91\xf0 \x80LQ\x14%?U]\xf2\xdfF\xed\xf4\xb6\xee\x1e\xac\xb4G\x1fl\xc9\xb5\xa2\xf3s\xb1\xf0\xf1m\x8d\xbfo:\x04\x06\xe0_\x0b\xc7\xc1\xaf\xa5\x17\xf6\xa7\x1f\x87F\x12\xf1t\\\f*\xaaj\x91\x96~\fN\xa7\x8c!\x03\xa3 \x89"\xfeg\xd9F\xac?T\x84\xe4\xa5\xd3\xf0\xc8\xcbK\xa1T\x17\xaaL\xceebt\'\xce\xb4\x1a\x87\xda\xd0X\xca\x0bKS\xd4\xa3\xb9\x1bEQ\xdc}3I\x1d\xc9=\xf37\xac\x8f\xe9\xdf?\xfb\x9b\r\x1b\xdaM\x9b1\x0f\xdf\x9d\x96\xae\x9cb\xaa.\xa8@\xd1\xfe\xb9\x02\x9c\xeb\x04AP\xe5\x16\xe1\x9b\x11\xd6o\xc4\x85`\xc39Pr$\x93\x95\xa6\xf7\xe5\x9c\x9boKoV\x92>\x94$\xe9\xa0\xddn\xff\x96Z\x89F \xf7\x1d\xadV+L\x9d:\xf5\xd5\xf6\xed\xdb\xa3\xb8\xb8\x18&\xe6v\xf1\x9b:w\xa0]T?\xf8\x85\';j\x8b\xfe\x83\xb2\xa3\xff\x80\xea\xd8\x8cs\xbb\xa8\x14E\x91\x99)w"/1\x06"\xb8W\xd4\x85=\xf5\xbea^`\xb1\x0b.\x9cXw\xbd99\0\x9bV\xab\x15:v\xed\xf5\xc5\x841c&\xfe\xf9\xcbTl\xfb\xe0ex5\xd8\xb10,\x10\x1c\x80O\x0bw|\xb3\xfb\x042M6dd\x16\xa0]\xb0?\x18\0\x87\xc3\x89\x8c\x13yHJ9\x82\xb6\xadZ@\xaf\xd5\xc0\xe6p\xe2\xbbm?a\xd4\xb0hL\x1a=\b\r\xf5\xb5\x9c\x15\xa6nBe\xd6\\\x0e8\xe4\xa2"\x951\xd6p\xe9\x87\x81\xa2(\xd4\xe8\xf7!UU\xedU\x95\x95+\xb4Z\xed{3\xa6\x8dE\xe6_?AN\x93\x11\xd0y\xb8F\xbf\x85i\xdf1S\xeeT\xcey\x8d\n@\xd5\xb6\x9c\x8f\xe0^#\x9a\x8dT\x1a\xca\x9c8\x9b>\x89\xe3\xf6\x04\x0f\0\x90e\xf9KY\x96\x8fQ\x0b\xd1\b\xe4\xbe\xd4\xbe}\xfbI\xbbv\xedZ\x1d\x1a\x1a\x8a\x8c\x8c\ft\x7f\xe1\x03\\X\xd7\xb8\x9c\xd3\n4V\xdbQW\x92\x8c\xaa\xac\xef\xa16m7\x1a\x8dg,\x16K\0B\xfb\xff\x07\xad#\xfc\x7f\xb5 [=pl\xc3"xw\xec\xf2\xed\x17KF\x86\x87\xb7G\xfe\xa93\b\ri\x8b?\xbe\xbe\x12\x85\x8dM\x989\xa4+F\f\xee\x03\x9dN\x0b\xae(h\xe3\xdf\x12\xb2\xa2b\xf6\xdbk\xf0}f\x19\xde\x19\xdd\x17\xfe~\xde\x98\xfc\xc9vD\xb5m\x81w\xe3\x9fE\xffY_\xb8z\x8e\xa6b+N\xa5\xcc4\xea\xd4\xcf-\x16\x0b\x1d*\xff}z\xb2\xb8\xb8xkPP\x10\xacV+\x12\x13\x131~\xc1W\x1c\xf5e{Y\xd5\xb1\'\xcfm\x12\x01D\xb71\x88x\xf2\x9fp\xf7\xbb\xb8\xf7\x96+@\xce\x9e/Q\x97\xff\x02U#\x8d@\xc8\x8dDZ\xc6\xf4\xf3\xe6\xcd[\x10\x1a\x1a\n\0\x88\x8c\x8c\xc4\xfb\xe3{b\xf6\xc6l\xd7\xa2\xf8\xe54\x06\xc0;X\x0f\xef\xe0X\x04\xf6\x88\x85\xd5\xa4Z,\xd5\xd9\xc0\xe9\xbd(\xdc\xb7\x05\xee~S`\xf4\xbdzan-\x80\x9e\x93\xe6z\xe8t\xf0\x0f\b\xc0\xc3S\x97\xe2oq\xdd\xd1\xb5K\x07\xbc9%\x16\x13\x97l\x81\xa7Q\x87\x13\xd9\xa7\xf0\xca\xaa=\x80FD\xeaGS\xf0\xf1\xe7\xff\xc2\xac\xa9#\xf0:\x03\x8cnz\x04\x06\xf8abz\x16d\x0e\x98\xea\xcc\x80l\x07\xca\xb22q\xf6\xe7\xb1\0\x8eYhr\xea\xf7\xac\xa2\xae\xae\x0eAAA0\x18\fp:\x9d\x85\xc8K\x1a\xa4\xd7\xeb\x0b\xed\xfc\\\xe25&\x0eC\xf8\xc0\xd5\xcd\x82\x07\0XM\x1cu\xf9+\xa9\n\t\xddHx\x83\x8cF\xe3\xd0\xc7\x1f\x7f<\xe8\xfc\xb3(\x8axj\xf80\x88\x96\xea\xeb\xff\xb2\xc6\rh\x11  \xa0k\x17D\xc6\xbd\x82\x1e\xe3\xa7@\xe3v\x9d\xd0\xae\x83N\x14\xc1U\x0e\x95s|\xb4\xed(*\xaa\xeb\xa0\xd1H\xf8\xf9\x7f\xa7\xe3\xa9\xc1}18\xa6\x17:y\xe9\x01Y\x018\xb0\xf7d\x05\x1e}u%6n\xf97\xcc\x8dV\xbc\x10\xbf\x14\x93\x9e\x1b\x84\t#\x1f\x85\xa9\xea\x8c\x1d\xd9;\xdfc\xa5\xe9}\0\xd04\x01u\x88\xb2\x8b\x8a\x8a\x1a\xcf?\xd7\xd6\xd6\xe6\0(\xb0\xdb\xed\xaa$I"\xb4\xbe\x7fE\xa7\xe1\x89\xf0\n\xba\xf2\0\x88\xb5\xaeN\x10\x84\xc3T\x8b\x84F 7h\xe8\xd0\xa1\x83\x83\x83\x83/<gff\xaa3g\xce\xfcN\xb18\x07@\xd2{\xc3V\xef\x80lw@\xd4j \xe9t\xd0\x1a\x05h\r\x80(\xa1\xd9L!\x13\\s\xcd7\xa0\xbaI\x81\xc3\xe1\xc0\x9c\xe1=\xf0YR\x06\x9cN\x05c\x17\'\x02\x8c\xe1\xfb\xf9\xa3Q^e\xc2\x9aw^\x04T\x15\x9e-<\xb0\xe2\xf5\x91\x18\xfb\xce\xb7\xe8\x16\xde\x1a\x0b?\xf8\x9c\xef\xce\xc8k\xdc\xb6gg.\xcaO\xef\x81\\\xba\n@\x01\xcdW\x11\xc0uNi\xfb\xf6\xed[bcc\xc7h4\x1a0\xc6$\xc0u?\xbaM\x17\xb8\x1a\xed\xfa<\x7f\xd5\xbfS\xae\x02\xf5g\x7fR\xe9@)\xa1\0r\xe3\xa2\xa3\xa3#D\xd15\x92\xcf\xcf\xcf\xe7S\xa6L\x99}\xe0\xc0\x81\x8f\x18c-8\xe7\xdd\x19c\x99\x9c\xf3j\xc6\x98\x81s\xde\n@8\x18{\x10\xbe\x9d{\xc1\xbdU4\xdc\xbc\x02\xe1\xe6%B\xe3\x86\x9b\xc9%4\xe3\xddo\xf0\xe1\xecg0bH4\x82\x03[c\xdac\xe1X\xb9\xef$\xe4&+\xde\xfc\xf4[\x94\xd778\x81\xa6:4\x98r\xc7\fx \xc7\x98\xb3\xe5\xe4\x8b\xcf\xaf\xca\x06\x90#\bB\x11\xbd\xd1\xc9\xafY\xb1b\xc5\xa2Q\xa3F==`\xc0\0\xbd\x9f\x9f_\xb8V\xab\x15l6[(B#\'\xfc\xa9\x9f?zt\x8b\xc0\x9ce\xdb\x10\xe8!"\xae\x7f$\xde\xf9!\x1b\xbc\xb1\xaa\x16\xd5\x99\xf3\xa8\xf6\b@\x8b\xe87l\xd9\xb2e\xbfL\x9f>\xfd!\xbb\xdd\x8e\x993gn\\\xbf~\xfdh\xb3\xd9|3\x1d\xfa\x87\xc0\xd8b\xb4\x1f4\0-;\xdc\xfc\x0b\xa8.\xb6\xf4l\x83\x8cn\x1d\xdb\xe4\xad^\xbb.\x1f\x8a\xa3\0@\x01c\xec\xb4\x87\x87GUCC\x03\r.\xc8M\xeb\xdd\xbb\xf7\xf45k\xd6|j6\x9b\x11\x15\x15\xd5\x851V\xc8\xdb\xf6\xcdZ\xf4\xf2S\xa1\xb3_\x8fGmm-\x8cF#t:\x1d\xc6\x8e\x1dw:!a\xd3\x10\x009Ts\x04\xa0+mo\xd8\xa0A\x83\xc6FEE\xb5KIIq\xcc\x981\xe3\xe9\xa6\xa6&\xd35#3c\xee\0\xfa@\xe35\x11\xad#\x17"\xa0\xc7|\x84\xf4\xed\b\x0f\xff[\x99p\0\n\xf7\xff\xb3,\xef\xd0\xc8#G\x0e\x7f\x0f\xae\xa4\xc0\x95\xe2\xfd,\0\x8b\xc3\xe1\xa0\x06"\xb7\xe4\xec\xd9\xb3\x87\x8e\x1e=j\xea\xde\xbd\xfb\xc0\x9c\x9c\x1cKYY\xd9N4\x9cI\xf8i\xcf\xee2\xcey\xab\xc1\x83\x07\xb71\x18\f\x10E\x11AA\x81\xc6\xaf\xbe\xfa*AQ\x94b\xaa9B#\x90\x9b0z\xf4\xe8U\xeb\xd6\xad\x9b\x12\x1f\x1f\xbfq\xd9\xb2e\xcf\x9d\xfbr\x14$\x8f\x01\x104:\xa8M\x0e0I\x03\xa3o\x18<\xdbDB\xef\xd9\tzO7\xe8<~\xfd\xa4\xef\xcd\xa8\xc8.a\xa7\xf7=HW}\x92\xdfH\x1f\xc6\xd8\\\0\xe3.9\x0b\x14\xb8|\xf9\xf2\xe4\x97^z)L\xab\xd5\x82s\x8e\r\x1b6TN\x980a\x88\xaa\xaaG\xa8\xca\b\x05\x90\x1b\xe4\xbb\x90\x07\xd0\0\0\x04\xecIDAT\xe3\xe33.!!\xe1\xab\xb8\xb8\xb8?X\xad\xd6D0!\x06\x0f\xc4\xed\x86\x87\x9f\b&\xb8\xceW0v\xf5-\xbd\xb7\x83\xe2\x04\n\xd3v\xb0\x9a\xacQ\x9cs\x1b\xb5\b\xb9\xdd4\x1a\x8d \xcb\xb2\xf6\xc2\x19\x10\x97\xa07\xdex\xe3\x9b\xc9\x93\'G\x07\x05\x05\x81s\x8e\xa4\xa4$s|||\xfc\xa9S\xa7\xd64\xbf\xc6\x80\xfc\xde\xd0\x14\xd6\r\xb2\xdb\xed%\xc5\xc5\xc5/\xe6\xe7\xe7\xc7\x03\xb0C\xeb5Ml\xd3\xe5\xd1%\x13{\x015%\xc8\xb7\xea\\;\xacn\bwe6\xb5\xd4p4\x945\xa0\xbe4\x17\r\xe5%\xb0\xd53(M\x06HZ\xe1\x8a@$\x88\x80g\x9bp(\xeac\xb0\x94\'\x01h\xa4V!\xb7\x93\xaa\xaa\x1c\xae\xfc\x9c\x97jHMM]\xb7r\xe5\xca|\x8dF\xe3g6\x9b\xfd|||\x8c\xa1\xa1\xa1O\xed\xdc\xb93FQ\x94\xa3\0\xca\xa9\xf6h\x04B\xae\xefE\x1f\x1f\x9f\xd5\xb5\xb5\xb5\x1cL\xfa\xc3C\xbd\xfb%\x1cJ\xdb\xc3\xd2\xd3\xd3\x11\xfd\xca*4KGr5\x8eF\xa0\xa1\xdc\x84\xba3;P\x93\xfd#\x80\x9fEQ,\xb8,\xdfT(D\xb7\x91\b\xec\xfd*Z\x86\x85\\q^DU\x80\xaa\xdc2\x9cNy\t\\\xd9NMB\xee\xe8\x07\x06c\x1e\x9c\xf3\xd6p\xed\xe04\xb9\xb9\xb9U\xdal6\xda\xc0A#\x10r=\xee\xee\xeeG\xeb\xeb\xeb9\0\x18\f\xfa\x93\xe6\xfaj\xafq\xe3\xc6E\x85\x85\x85\xa1>\xef 2rJ\xa0\x88\xba+\xef\x8e\x96\xed@yv>r\xb7\xc53S\xc1\x14X\xab\xbe\x01\x90\x01\xa0\x86\x9f?\xf5{Q\x1d\xb8\xfc3k(^\x85\xda\xb3\x0e\xe8\xdc\xfbB\xef)]\xd8\xfa\xcb\x04\xc0\xbd\x95\x07\xbcB\xc6\xc0a\x0faMu\xfb\x01\xd0\x94\x16\xb9S\x9a\0\xd4\x02\xa8\x06`\x91eJg@#\x10r\xab\xa2\x8e\x1f?~ 22\x12\xaa\xaa\xa2\xaa\xaa\nk\xd6\xae\xc3\x9c\xcdy\x17\x17\xcem&\x8e\xc2\x03\xab\x98\xb9h\x16\xe7\xdcr\x0betC\xdb\xa8\xaf\x11\x10\xd9\x19\xe2e\x97\xac\xbb\xb2\xa6\x96\xa3\xf8\xc0|\x81;\xd6\xa9\xaaJ\xdb\xb1\b!w\f\xa52\xf9\xffit:\x9d\x1c\0\x04A@\xeb\xd6\xad\xa1\xc8\xb2+\xa3\xa9\xd5\x04T\xe6\xd6"s\xeb\x7f\xf9j\xcc\x7f\xba\xc5\xe0\x01\0\x19\xac4=\x1a\xa7\xd2\xb6\xa2\xc9z\xd9\xf8Q\x03\xb4\xee\xe4\x8f\xae\xcf\xaeRC\x1e\xcf\x83\xa1\xcd\x12\0q\0\xda\n\x82\xa0\xa1\xe6!\x84\xd0\b\xe4n\xad<\xc6<v\xec\xd8Q\x15\x1b\x1b\xab\x03\\\xe9\xcfcbb\xd6\xa6\xa6\xa6&\0hd\x8c\xfd\xc29\xbf-\x8b\xdd\xa2(j\x14c\xd0\'\b\xeb7\xedW3\0s\x05pX\\\xff\x9c\xd6\x1a4\x94\x1d@\xe5\xf1y\0\xcf\xa0\xd6"\x84\xd0\b\xe4.\xe2\xeb\xeb\xdbx\xfc\xf8\xf1_\xce?[,\x16\x94\x96\x96\x9e\0\xb0\r@\xf2\xed\n\x1e\xe7\x82\x93S\xdfT>\x1d\xb9?-\x82\xb5\xf6\xea\x8b\x96Lt\xa5\x97o\xd1\x06h\xd9\xde\x17a\x8f\xc4!\xb0\xef\xd7Z\xad\x96\xda\x99\x10B\x01\xe4nR]]\xcd\x97/_\xbe\xae\xac\xac\f\0\xa0\xd1h\xa0\xd3\xe9\xb4\xbfUyv\xbb]\x85\xb5t\x1erv\xc5\xc3\\q\x9d\xfd\xf7\x1c\xe0\0\xbc\xdaF455\xf5\xa0\xd6"\x84P\0\xb9\xcb\x14\x15\x15\xadKLL\xcc\xe3\x9cC\xaf\xd7#***\xfc7/\xd4Q\xf31\xb2~x\x16\xd5\xa7\xcc\xb8b\x13\x17\0U\xc1k\xd1^xkx\b i\x19\x98\xd0\x89Z\x8a\x10B\xeeB\x06\x83\xe1\xd1\xbd{\xf7\xda9\xe7|\xf5\xea\xd5\'\xf5z\xfd\x9d\n\xcc\x11\xf0\xef\x99\x86\xee\xe39\xfaL\xe3!=\x9f\xe6\xd1\x03\x9f\xe3S\xa6\xbd\xcaM&\x13\xdf\xbbw/\x87\x7f\x8f\n\0\xfe\xd4J\x84\x10r\x97\n\x0e\x0e\x1e\x9d\x9c\x9c\xecHOOW\x01t\xbdS\xe5J\x92$\x82\tc\x11\xd0{\x7fB\xc2f\x95\x9fc\xb5ZyLL\xccN\0\x1d\xa8u\b!\xe4.\xa7\xd1h\x9ex\xff\xfd\xf7K\x02\x02\x02\x96\xdc\xe9\xb2\x19c\xc6\xed\xdb\xb77\x9d\x0f \x87\x0f\x1fV\x01\xf4\xa4V!\x84\x90{\x04c\xcc\x07\xc0\xdf\x19c\x86;\\\xee\xa3YYY\x9cs\xceeY\xe6\x0b\x16,H1\x1a\x8d\xb4M\x9b\x10B\xc8\xb5M\x9c8q\x8d\xc3\xe1\xe0\x9cs\xbek\xd7.\x9b \b\x0fQ\xad\x10B\b\xb9&Q\x14\xbb\xa5\xa4\xa48TU\xe5\xc9\xc9\xc9\x8e\x90\x90\x901T+\x84\x10B\xae\x891f\\\xb4h\xd1\x91\xc2\xc2B\xbe|\xf9\xf2\\A\x10b\xa8V\b!\x84\\\xd3\xb9\x13\xe6\x9f\x8d\x1c9r+cl\xbc \b:\xaa\x15B\b!\xd7%I\x92HI\x13\t!\x84\x10B\b!\x84\x10B\b!\x84\x10B\b!\x84\x10B\b!\x84\x10B\b!\x84\x10B\b!\x84\x10B\b!\x84\x10B\b!\x84\x10B\b!\x84\x10B\b!\x84\x10B\b!\x84\x10B\b!\x84\x10B\b!\x84\x10B\b!\x84\x10B\b!\x84\x10B\b!\x84\xdc7\xfe\x0f\xa3\xd2\'76:)\xad\0\0\0\0IEND\xaeB`\x82');
      return;
     }
     (globalThis));
  }
  (globalThis));
(function(globalThis){
   "use strict";
   var
    joo_global_object = globalThis,
    BUTTON =
      {NONE: 0, LEFT: 1, MIDDLE: 2, RIGHT: 3, WHEEL_UP: 4, WHEEL_DOWN: 5},
    BUTTON_STATE = {UP: 0, DOWN: 1},
    BUTTON_STATE_TAG = {UP: 0, DOWN: 1},
    BUTTON_TAG =
      {NONE: 0, LEFT: 1, MIDDLE: 2, RIGHT: 3, WHEEL_UP: 4, WHEEL_DOWN: 5};
   function caml_subarray_to_jsbytes(a, i, len){
    var f = String.fromCharCode;
    if(i == 0 && len <= 4096 && len == a.length) return f.apply(null, a);
    var s = "";
    for(; 0 < len; i += 1024, len -= 1024)
     s += f.apply(null, a.slice(i, i + Math.min(len, 1024)));
    return s;
   }
   function caml_string_of_jsbytes(x){return x;}
   function caml_string_of_array(a){
    return caml_string_of_jsbytes(caml_subarray_to_jsbytes(a, 0, a.length));
   }
   function caml_ba_get_1(ba, i0){return ba.get(ba.offset(i0));}
   function BigStringReader(bs, i){this.s = bs; this.i = i;}
   BigStringReader.prototype =
    {read8u: function(){return caml_ba_get_1(this.s, this.i++);},
     read8s: function(){return caml_ba_get_1(this.s, this.i++) << 24 >> 24;},
     read16u:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 2;
      return caml_ba_get_1(s, i) << 8 | caml_ba_get_1(s, i + 1);
     },
     read16s:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 2;
      return caml_ba_get_1(s, i) << 24 >> 16 | caml_ba_get_1(s, i + 1);
     },
     read32u:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 4;
      return (caml_ba_get_1(s, i) << 24 | caml_ba_get_1(s, i + 1) << 16
             | caml_ba_get_1(s, i + 2) << 8
             | caml_ba_get_1(s, i + 3))
             >>> 0;
     },
     read32s:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 4;
      return caml_ba_get_1(s, i) << 24 | caml_ba_get_1(s, i + 1) << 16
             | caml_ba_get_1(s, i + 2) << 8
             | caml_ba_get_1(s, i + 3);
     },
     readstr:
     function(len){
      var i = this.i, arr = new Array(len);
      for(var j = 0; j < len; j++) arr[j] = caml_ba_get_1(this.s, i + j);
      this.i = i + len;
      return caml_string_of_array(arr);
     },
     readuint8array:
     function(len){
      var i = this.i, offset = this.offset(i);
      this.i = i + len;
      return this.s.data.subarray(offset, offset + len);
     }};
   var
    CAP_TYPE_TAG = {BUTT: 0, SQUARE: 1, ROUND: 2},
    COMPOP_TAG =
      {SOURCE_OVER: 0,
       SOURCE_IN: 1,
       SOURCE_OUT: 2,
       SOURCE_ATOP: 3,
       DESTINATION_OVER: 4,
       DESTINATION_IN: 5,
       DESTINATION_OUT: 6,
       DESTINATION_ATOP: 7,
       LIGHTER: 8,
       COPY: 9,
       XOR: 10,
       MULTIPLY: 11,
       SCREEN: 12,
       OVERLAY: 13,
       DARKEN: 14,
       LIGHTEN: 15,
       COLOR_DODGE: 16,
       COLOR_BURN: 17,
       HARD_LIGHT: 18,
       SOFT_LIGHT: 19,
       DIFFERENCE: 20,
       EXCLUSION: 21,
       HUE: 22,
       SATURATION: 23,
       COLOR: 24,
       LUMINOSITY: 25},
    tag_to_cap_type =
      new
       joo_global_object.Map
       ([[CAP_TYPE_TAG.BUTT, "butt"],
         [CAP_TYPE_TAG.SQUARE, "square"],
         [CAP_TYPE_TAG.ROUND, "round"]]);
   function Cap_type_val(cap){return tag_to_cap_type.get(cap);}
   var
    tag_to_compop =
      new
       joo_global_object.Map
       ([[COMPOP_TAG.SOURCE_OVER, "source-over"],
         [COMPOP_TAG.SOURCE_IN, "source-in"],
         [COMPOP_TAG.SOURCE_OUT, "source-out"],
         [COMPOP_TAG.SOURCE_ATOP, "source-atop"],
         [COMPOP_TAG.DESTINATION_OVER, "destination-over"],
         [COMPOP_TAG.DESTINATION_IN, "destination-in"],
         [COMPOP_TAG.DESTINATION_OUT, "destination-out"],
         [COMPOP_TAG.DESTINATION_ATOP, "destination-atop"],
         [COMPOP_TAG.LIGHTER, "lighter"],
         [COMPOP_TAG.COPY, "copy"],
         [COMPOP_TAG.XOR, "xor"],
         [COMPOP_TAG.MULTIPLY, "multiply"],
         [COMPOP_TAG.SCREEN, "screen"],
         [COMPOP_TAG.OVERLAY, "overlay"],
         [COMPOP_TAG.DARKEN, "darken"],
         [COMPOP_TAG.LIGHTEN, "lighten"],
         [COMPOP_TAG.COLOR_DODGE, "color-dodge"],
         [COMPOP_TAG.COLOR_BURN, "color-burn"],
         [COMPOP_TAG.HARD_LIGHT, "hard-light"],
         [COMPOP_TAG.SOFT_LIGHT, "soft-light"],
         [COMPOP_TAG.DIFFERENCE, "difference"],
         [COMPOP_TAG.EXCLUSION, "exclusion"],
         [COMPOP_TAG.HUE, "hue"],
         [COMPOP_TAG.SATURATION, "saturation"],
         [COMPOP_TAG.COLOR, "color"],
         [COMPOP_TAG.LUMINOSITY, "luminosity"]]);
   function Compop_val(cap){return tag_to_compop.get(cap);}
   var STYLE_TAG = {COLOR: 0, GRADIENT: 1, PATTERN: 2};
   function Draw_style_val(style){
    var s = [];
    s[1] = style;
    switch(typeof style){
      case "string":
       s[0] = STYLE_TAG.COLOR; break;
      case "CanvasGradient":
       s[0] = STYLE_TAG.GRADIENT; break;
      case "CanvasPattern":
       s[0] = STYLE_TAG.PATTERN; break;
    }
    return s;
   }
   var
    EVENT_TAG =
      {FRAME_CYCLE: 0,
       FRAME: 1,
       CANVAS_FOCUSED: 2,
       CANVAS_RESIZED: 3,
       CANVAS_MOVED: 4,
       CANVAS_CLOSED: 5,
       KEY_ACTION: 6,
       BUTTON_ACTION: 7,
       MOUSE_MOVE: 8},
    FOCUS = {OUT: 0, IN: 1},
    FOCUS_TAG = {OUT: 0, IN: 1},
    JOIN_TYPE_TAG = {ROUND: 0, MITER: 1, BEVEL: 2},
    tag_to_join_type =
      new
       joo_global_object.Map
       ([[JOIN_TYPE_TAG.ROUND, "round"],
         [JOIN_TYPE_TAG.MITER, "miter"],
         [JOIN_TYPE_TAG.BEVEL, "bevel"]]);
   function Join_type_val(join){return tag_to_join_type.get(join);}
   var
    KEY =
      {UNDEFINED: 0x03,
       ESCAPE: 0x29,
       F1: 0x3A,
       F2: 0x3B,
       F3: 0x3C,
       F4: 0x3D,
       F5: 0x3E,
       F6: 0x3F,
       F7: 0x40,
       F8: 0x41,
       F9: 0x42,
       F10: 0x43,
       F11: 0x44,
       F12: 0x45,
       PRINTSCREEN: 0x46,
       SCROLLLOCK: 0x47,
       PAUSE: 0x48,
       GRAVE_TILDE: 0x35,
       _1_EXCLAMATION: 0x1E,
       _2_AT: 0x1F,
       _3_NUMBER: 0x20,
       _4_DOLLAR: 0x21,
       _5_PERCENT: 0x22,
       _6_CARET: 0x23,
       _7_AMPERSAND: 0x24,
       _8_ASTERISK: 0x25,
       _9_LPARENTHESIS: 0x26,
       _0_RPARENTHESIS: 0x27,
       MINUS_UNDERSCORE: 0x2D,
       EQUAL_PLUS: 0x2E,
       BACKSPACE: 0x2A,
       TAB: 0x2B,
       Q: 0x14,
       W: 0x1A,
       E: 0x08,
       R: 0x15,
       T: 0x17,
       Y: 0x1C,
       U: 0x18,
       I: 0x0C,
       O: 0x12,
       P: 0x13,
       LBRACKET_CURLY: 0x2F,
       RBRACKET_CURLY: 0x30,
       BACKSLASH_PIPE: 0x31,
       CAPSLOCK: 0x39,
       A: 0x04,
       S: 0x16,
       D: 0x07,
       F: 0x09,
       G: 0x0A,
       H: 0x0B,
       J: 0x0D,
       K: 0x0E,
       L: 0x0F,
       SEMICOLON_COLON: 0x33,
       QUOTE_DOUBLEQUOTE: 0x34,
       NONUS_NUMBER_TILDE: 0x32,
       RETURN: 0x28,
       LSHIFT: 0xE1,
       NONUS_BACKSLASH_PIPE: 0x64,
       Z: 0x1D,
       X: 0x1B,
       C: 0x06,
       V: 0x19,
       B: 0x05,
       N: 0x11,
       M: 0x10,
       COMMA_LESS: 0x36,
       PERIOD_GREATER: 0x37,
       SLASH_QUESTION: 0x38,
       RSHIFT: 0xE5,
       LCONTROL: 0xE0,
       LMETA: 0xE3,
       LALT: 0xE2,
       SPACEBAR: 0x2C,
       RALT: 0xE6,
       RMETA: 0xE7,
       MENU: 0x76,
       RCONTROL: 0xE4,
       INSERT: 0x49,
       HOME: 0x4A,
       PAGEUP: 0x4B,
       DELETEFORWARD: 0x4C,
       END: 0x4D,
       PAGEDOWN: 0x4E,
       UPARROW: 0x52,
       LEFTARROW: 0x50,
       DOWNARROW: 0x51,
       RIGHTARROW: 0x4F,
       PAD_NUMLOCK_CLEAR: 0x53,
       PAD_EQUALS: 0x67,
       PAD_DIVIDE: 0x54,
       PAD_MULTIPLY: 0x55,
       PAD_MINUS: 0x56,
       PAD_7_HOME: 0x5F,
       PAD_8_UPARROW: 0x60,
       PAD_9_PAGEUP: 0x61,
       PAD_PLUS: 0x57,
       PAD_4_LEFTARROW: 0x5C,
       PAD_5: 0x5D,
       PAD_6_RIGHTARROW: 0x5E,
       PAD_COMMA: 0x85,
       PAD_1_END: 0x59,
       PAD_2_DOWNARROW: 0x5A,
       PAD_3_PAGEDOWN: 0x5B,
       PAD_0_INSERT: 0x62,
       PAD_DECIMAL_DELETE: 0x63,
       PAD_ENTER: 0x58,
       F13: 0x68,
       F14: 0x69,
       F15: 0x6A,
       F16: 0x6B,
       F17: 0x6C,
       F18: 0x6D,
       F19: 0x6E,
       F20: 0x6F,
       F21: 0x70,
       F22: 0x71,
       F23: 0x72,
       F24: 0x73,
       INTERNATIONAL1: 0x87,
       INTERNATIONAL2: 0x88,
       INTERNATIONAL3: 0x89,
       INTERNATIONAL4: 0x8A,
       INTERNATIONAL5: 0x8B,
       INTERNATIONAL6: 0x8C,
       INTERNATIONAL7: 0x8D,
       INTERNATIONAL8: 0x8E,
       INTERNATIONAL9: 0x8F,
       LANG1: 0x90,
       LANG2: 0x91,
       LANG3: 0x92,
       LANG4: 0x93,
       LANG5: 0x94,
       HELP: 0x75,
       MUTE: 0x7F,
       VOLUMEUP: 0x80,
       VOLUMEDOWN: 0x81},
    KEY_STATE = {UP: 0, DOWN: 1},
    KEY_STATE_TAG = {UP: 0, DOWN: 1},
    KEY_TAG =
      {ESCAPE: 0,
       F1: 1,
       F2: 2,
       F3: 3,
       F4: 4,
       F5: 5,
       F6: 6,
       F7: 7,
       F8: 8,
       F9: 9,
       F10: 10,
       F11: 11,
       F12: 12,
       PRINTSCREEN: 13,
       SCROLLLOCK: 14,
       PAUSE: 15,
       GRAVE_TILDE: 16,
       _1_EXCLAMATION: 17,
       _2_AT: 18,
       _3_NUMBER: 19,
       _4_DOLLAR: 20,
       _5_PERCENT: 21,
       _6_CARET: 22,
       _7_AMPERSAND: 23,
       _8_ASTERISK: 24,
       _9_LPARENTHESIS: 25,
       _0_RPARENTHESIS: 26,
       MINUS_UNDERSCORE: 27,
       EQUAL_PLUS: 28,
       BACKSPACE: 29,
       TAB: 30,
       Q: 31,
       W: 32,
       E: 33,
       R: 34,
       T: 35,
       Y: 36,
       U: 37,
       I: 38,
       O: 39,
       P: 40,
       LBRACKET_CURLY: 41,
       RBRACKET_CURLY: 42,
       BACKSLASH_PIPE: 43,
       CAPSLOCK: 44,
       A: 45,
       S: 46,
       D: 47,
       F: 48,
       G: 49,
       H: 50,
       J: 51,
       K: 52,
       L: 53,
       SEMICOLON_COLON: 54,
       QUOTE_DOUBLEQUOTE: 55,
       NONUS_NUMBER_TILDE: 56,
       RETURN: 57,
       LSHIFT: 58,
       NONUS_BACKSLASH_PIPE: 59,
       Z: 60,
       X: 61,
       C: 62,
       V: 63,
       B: 64,
       N: 65,
       M: 66,
       COMMA_LESS: 67,
       PERIOD_GREATER: 68,
       SLASH_QUESTION: 69,
       RSHIFT: 70,
       LCONTROL: 71,
       LMETA: 72,
       LALT: 73,
       SPACEBAR: 74,
       RALT: 75,
       RMETA: 76,
       MENU: 77,
       RCONTROL: 78,
       INSERT: 79,
       HOME: 80,
       PAGEUP: 81,
       DELETEFORWARD: 82,
       END: 83,
       PAGEDOWN: 84,
       UPARROW: 85,
       LEFTARROW: 86,
       DOWNARROW: 87,
       RIGHTARROW: 88,
       PAD_NUMLOCK_CLEAR: 89,
       PAD_EQUALS: 90,
       PAD_DIVIDE: 91,
       PAD_MULTIPLY: 92,
       PAD_MINUS: 93,
       PAD_7_HOME: 94,
       PAD_8_UPARROW: 95,
       PAD_9_PAGEUP: 96,
       PAD_PLUS: 97,
       PAD_4_LEFTARROW: 98,
       PAD_5: 99,
       PAD_6_RIGHTARROW: 100,
       PAD_COMMA: 101,
       PAD_1_END: 102,
       PAD_2_DOWNARROW: 103,
       PAD_3_PAGEDOWN: 104,
       PAD_0_INSERT: 105,
       PAD_DECIMAL_DELETE: 106,
       PAD_ENTER: 107,
       F13: 108,
       F14: 109,
       F15: 110,
       F16: 111,
       F17: 112,
       F18: 113,
       F19: 114,
       F20: 115,
       F21: 116,
       F22: 117,
       F23: 118,
       F24: 119,
       INTERNATIONAL1: 120,
       INTERNATIONAL2: 121,
       INTERNATIONAL3: 122,
       INTERNATIONAL4: 123,
       INTERNATIONAL5: 124,
       INTERNATIONAL6: 125,
       INTERNATIONAL7: 126,
       INTERNATIONAL8: 127,
       INTERNATIONAL9: 128,
       LANG1: 129,
       LANG2: 130,
       LANG3: 131,
       LANG4: 132,
       LANG5: 133,
       HELP: 134,
       MUTE: 135,
       VOLUMEUP: 136,
       VOLUMEDOWN: 137},
    tag_to_kc =
      new
       joo_global_object.Map
       ([[KEY_TAG.ESCAPE, KEY.ESCAPE],
         [KEY_TAG.F1, KEY.F1],
         [KEY_TAG.F2, KEY.F2],
         [KEY_TAG.F3, KEY.F3],
         [KEY_TAG.F4, KEY.F4],
         [KEY_TAG.F5, KEY.F5],
         [KEY_TAG.F6, KEY.F6],
         [KEY_TAG.F7, KEY.F7],
         [KEY_TAG.F8, KEY.F8],
         [KEY_TAG.F9, KEY.F9],
         [KEY_TAG.F10, KEY.F10],
         [KEY_TAG.F11, KEY.F11],
         [KEY_TAG.F12, KEY.F12],
         [KEY_TAG.PRINTSCREEN, KEY.PRINTSCREEN],
         [KEY_TAG.SCROLLLOCK, KEY.SCROLLLOCK],
         [KEY_TAG.PAUSE, KEY.PAUSE],
         [KEY_TAG.GRAVE_TILDE, KEY.GRAVE_TILDE],
         [KEY_TAG._1_EXCLAMATION, KEY._1_EXCLAMATION],
         [KEY_TAG._2_AT, KEY._2_AT],
         [KEY_TAG._3_NUMBER, KEY._3_NUMBER],
         [KEY_TAG._4_DOLLAR, KEY._4_DOLLAR],
         [KEY_TAG._5_PERCENT, KEY._5_PERCENT],
         [KEY_TAG._6_CARET, KEY._6_CARET],
         [KEY_TAG._7_AMPERSAND, KEY._7_AMPERSAND],
         [KEY_TAG._8_ASTERISK, KEY._8_ASTERISK],
         [KEY_TAG._9_LPARENTHESIS, KEY._9_LPARENTHESIS],
         [KEY_TAG._0_RPARENTHESIS, KEY._0_RPARENTHESIS],
         [KEY_TAG.MINUS_UNDERSCORE, KEY.MINUS_UNDERSCORE],
         [KEY_TAG.EQUAL_PLUS, KEY.EQUAL_PLUS],
         [KEY_TAG.BACKSPACE, KEY.BACKSPACE],
         [KEY_TAG.TAB, KEY.TAB],
         [KEY_TAG.Q, KEY.Q],
         [KEY_TAG.W, KEY.W],
         [KEY_TAG.E, KEY.E],
         [KEY_TAG.R, KEY.R],
         [KEY_TAG.T, KEY.T],
         [KEY_TAG.Y, KEY.Y],
         [KEY_TAG.U, KEY.U],
         [KEY_TAG.I, KEY.I],
         [KEY_TAG.O, KEY.O],
         [KEY_TAG.P, KEY.P],
         [KEY_TAG.LBRACKET_CURLY, KEY.LBRACKET_CURLY],
         [KEY_TAG.RBRACKET_CURLY, KEY.RBRACKET_CURLY],
         [KEY_TAG.BACKSLASH_PIPE, KEY.BACKSLASH_PIPE],
         [KEY_TAG.CAPSLOCK, KEY.CAPSLOCK],
         [KEY_TAG.A, KEY.A],
         [KEY_TAG.S, KEY.S],
         [KEY_TAG.D, KEY.D],
         [KEY_TAG.F, KEY.F],
         [KEY_TAG.G, KEY.G],
         [KEY_TAG.H, KEY.H],
         [KEY_TAG.J, KEY.J],
         [KEY_TAG.K, KEY.K],
         [KEY_TAG.L, KEY.L],
         [KEY_TAG.SEMICOLON_COLON, KEY.SEMICOLON_COLON],
         [KEY_TAG.QUOTE_DOUBLEQUOTE, KEY.QUOTE_DOUBLEQUOTE],
         [KEY_TAG.NONUS_NUMBER_TILDE, KEY.NONUS_NUMBER_TILDE],
         [KEY_TAG.RETURN, KEY.RETURN],
         [KEY_TAG.LSHIFT, KEY.LSHIFT],
         [KEY_TAG.NONUS_BACKSLASH_PIPE, KEY.NONUS_BACKSLASH_PIPE],
         [KEY_TAG.Z, KEY.Z],
         [KEY_TAG.X, KEY.X],
         [KEY_TAG.C, KEY.C],
         [KEY_TAG.V, KEY.V],
         [KEY_TAG.B, KEY.B],
         [KEY_TAG.N, KEY.N],
         [KEY_TAG.M, KEY.M],
         [KEY_TAG.COMMA_LESS, KEY.COMMA_LESS],
         [KEY_TAG.PERIOD_GREATER, KEY.PERIOD_GREATER],
         [KEY_TAG.SLASH_QUESTION, KEY.SLASH_QUESTION],
         [KEY_TAG.RSHIFT, KEY.RSHIFT],
         [KEY_TAG.LCONTROL, KEY.LCONTROL],
         [KEY_TAG.LMETA, KEY.LMETA],
         [KEY_TAG.LALT, KEY.LALT],
         [KEY_TAG.SPACEBAR, KEY.SPACEBAR],
         [KEY_TAG.RALT, KEY.RALT],
         [KEY_TAG.RMETA, KEY.RMETA],
         [KEY_TAG.MENU, KEY.MENU],
         [KEY_TAG.RCONTROL, KEY.RCONTROL],
         [KEY_TAG.INSERT, KEY.INSERT],
         [KEY_TAG.HOME, KEY.HOME],
         [KEY_TAG.PAGEUP, KEY.PAGEUP],
         [KEY_TAG.DELETEFORWARD, KEY.DELETEFORWARD],
         [KEY_TAG.END, KEY.END],
         [KEY_TAG.PAGEDOWN, KEY.PAGEDOWN],
         [KEY_TAG.UPARROW, KEY.UPARROW],
         [KEY_TAG.LEFTARROW, KEY.LEFTARROW],
         [KEY_TAG.DOWNARROW, KEY.DOWNARROW],
         [KEY_TAG.RIGHTARROW, KEY.RIGHTARROW],
         [KEY_TAG.PAD_NUMLOCK_CLEAR, KEY.PAD_NUMLOCK_CLEAR],
         [KEY_TAG.PAD_EQUALS, KEY.PAD_EQUALS],
         [KEY_TAG.PAD_DIVIDE, KEY.PAD_DIVIDE],
         [KEY_TAG.PAD_MULTIPLY, KEY.PAD_MULTIPLY],
         [KEY_TAG.PAD_MINUS, KEY.PAD_MINUS],
         [KEY_TAG.PAD_7_HOME, KEY.PAD_7_HOME],
         [KEY_TAG.PAD_8_UPARROW, KEY.PAD_8_UPARROW],
         [KEY_TAG.PAD_9_PAGEUP, KEY.PAD_9_PAGEUP],
         [KEY_TAG.PAD_PLUS, KEY.PAD_PLUS],
         [KEY_TAG.PAD_4_LEFTARROW, KEY.PAD_4_LEFTARROW],
         [KEY_TAG.PAD_5, KEY.PAD_5],
         [KEY_TAG.PAD_6_RIGHTARROW, KEY.PAD_6_RIGHTARROW],
         [KEY_TAG.PAD_COMMA, KEY.PAD_COMMA],
         [KEY_TAG.PAD_1_END, KEY.PAD_1_END],
         [KEY_TAG.PAD_2_DOWNARROW, KEY.PAD_2_DOWNARROW],
         [KEY_TAG.PAD_3_PAGEDOWN, KEY.PAD_3_PAGEDOWN],
         [KEY_TAG.PAD_0_INSERT, KEY.PAD_0_INSERT],
         [KEY_TAG.PAD_DECIMAL_DELETE, KEY.PAD_DECIMAL_DELETE],
         [KEY_TAG.PAD_ENTER, KEY.PAD_ENTER],
         [KEY_TAG.F13, KEY.F13],
         [KEY_TAG.F14, KEY.F14],
         [KEY_TAG.F15, KEY.F15],
         [KEY_TAG.F16, KEY.F16],
         [KEY_TAG.F17, KEY.F17],
         [KEY_TAG.F18, KEY.F18],
         [KEY_TAG.F19, KEY.F19],
         [KEY_TAG.F20, KEY.F20],
         [KEY_TAG.F21, KEY.F21],
         [KEY_TAG.F22, KEY.F22],
         [KEY_TAG.F23, KEY.F23],
         [KEY_TAG.F24, KEY.F24],
         [KEY_TAG.INTERNATIONAL1, KEY.INTERNATIONAL1],
         [KEY_TAG.INTERNATIONAL2, KEY.INTERNATIONAL2],
         [KEY_TAG.INTERNATIONAL3, KEY.INTERNATIONAL3],
         [KEY_TAG.INTERNATIONAL4, KEY.INTERNATIONAL4],
         [KEY_TAG.INTERNATIONAL5, KEY.INTERNATIONAL5],
         [KEY_TAG.INTERNATIONAL6, KEY.INTERNATIONAL6],
         [KEY_TAG.INTERNATIONAL7, KEY.INTERNATIONAL7],
         [KEY_TAG.INTERNATIONAL8, KEY.INTERNATIONAL8],
         [KEY_TAG.INTERNATIONAL9, KEY.INTERNATIONAL9],
         [KEY_TAG.LANG1, KEY.LANG1],
         [KEY_TAG.LANG2, KEY.LANG2],
         [KEY_TAG.LANG3, KEY.LANG3],
         [KEY_TAG.LANG4, KEY.LANG4],
         [KEY_TAG.LANG5, KEY.LANG5],
         [KEY_TAG.HELP, KEY.HELP],
         [KEY_TAG.MUTE, KEY.MUTE],
         [KEY_TAG.VOLUMEUP, KEY.VOLUMEUP],
         [KEY_TAG.VOLUMEDOWN, KEY.VOLUMEDOWN]]);
   function Key_code_val(keycode){return tag_to_kc.get(keycode);}
   function caml_str_repeat(n, s){
    if(n == 0) return "";
    if(s.repeat) return s.repeat(n);
    var r = "", l = 0;
    for(;;){
     if(n & 1) r += s;
     n >>= 1;
     if(n == 0) return r;
     s += s;
     l++;
     if(l == 9) s.slice(0, 1);
    }
   }
   function caml_convert_string_to_bytes(s){
    if(s.t == 2)
     s.c += caml_str_repeat(s.l - s.c.length, "\0");
    else
     s.c = caml_subarray_to_jsbytes(s.c, 0, s.c.length);
    s.t = 0;
   }
   function jsoo_is_ascii(s){
    if(s.length < 24){
     for(var i = 0; i < s.length; i++) if(s.charCodeAt(i) > 127) return false;
     return true;
    }
    else
     return ! /[^\x00-\x7f]/.test(s);
   }
   function caml_utf16_of_utf8(s){
    for(var b = "", t = "", c, c1, c2, v, i = 0, l = s.length; i < l; i++){
     c1 = s.charCodeAt(i);
     if(c1 < 0x80){
      for(var j = i + 1; j < l && (c1 = s.charCodeAt(j)) < 0x80; j++) ;
      if(j - i > 512){
       t.substr(0, 1);
       b += t;
       t = "";
       b += s.slice(i, j);
      }
      else
       t += s.slice(i, j);
      if(j == l) break;
      i = j;
     }
     v = 1;
     if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128){
      c = c2 + (c1 << 6);
      if(c1 < 0xe0){
       v = c - 0x3080;
       if(v < 0x80) v = 1;
      }
      else{
       v = 2;
       if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128){
        c = c2 + (c << 6);
        if(c1 < 0xf0){
         v = c - 0xe2080;
         if(v < 0x800 || v >= 0xd7ff && v < 0xe000) v = 2;
        }
        else{
         v = 3;
         if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128 && c1 < 0xf5){
          v = c2 - 0x3c82080 + (c << 6);
          if(v < 0x10000 || v > 0x10ffff) v = 3;
         }
        }
       }
      }
     }
     if(v < 4){
      i -= v;
      t += "\ufffd";
     }
     else if(v > 0xffff)
      t += String.fromCharCode(0xd7c0 + (v >> 10), 0xdc00 + (v & 0x3FF));
     else
      t += String.fromCharCode(v);
     if(t.length > 1024){t.substr(0, 1); b += t; t = "";}
    }
    return b + t;
   }
   function MlBytes(tag, contents, length){
    this.t = tag;
    this.c = contents;
    this.l = length;
   }
   MlBytes.prototype.toString =
    function(){
     switch(this.t){
       case 9:
        return this.c;
       default: caml_convert_string_to_bytes(this);
       case 0:
        if(jsoo_is_ascii(this.c)){this.t = 9; return this.c;} this.t = 8;
       case 8:
        return this.c;
     }
    };
   MlBytes.prototype.toUtf16 =
    function(){
     var r = this.toString();
     if(this.t == 9) return r;
     return caml_utf16_of_utf8(r);
    };
   MlBytes.prototype.slice =
    function(){
     var content = this.t == 4 ? this.c.slice() : this.c;
     return new MlBytes(this.t, content, this.l);
    };
   function caml_utf8_of_utf16(s){
    for(var b = "", t = b, c, d, i = 0, l = s.length; i < l; i++){
     c = s.charCodeAt(i);
     if(c < 0x80){
      for(var j = i + 1; j < l && (c = s.charCodeAt(j)) < 0x80; j++) ;
      if(j - i > 512){
       t.substr(0, 1);
       b += t;
       t = "";
       b += s.slice(i, j);
      }
      else
       t += s.slice(i, j);
      if(j == l) break;
      i = j;
     }
     if(c < 0x800){
      t += String.fromCharCode(0xc0 | c >> 6);
      t += String.fromCharCode(0x80 | c & 0x3f);
     }
     else if(c < 0xd800 || c >= 0xdfff)
      t +=
       String.fromCharCode
        (0xe0 | c >> 12, 0x80 | c >> 6 & 0x3f, 0x80 | c & 0x3f);
     else if
      (c >= 0xdbff || i + 1 == l || (d = s.charCodeAt(i + 1)) < 0xdc00
       || d > 0xdfff)
      t += "\xef\xbf\xbd";
     else{
      i++;
      c = (c << 10) + d - 0x35fdc00;
      t +=
       String.fromCharCode
        (0xf0 | c >> 18,
         0x80 | c >> 12 & 0x3f,
         0x80 | c >> 6 & 0x3f,
         0x80 | c & 0x3f);
     }
     if(t.length > 1024){t.substr(0, 1); b += t; t = "";}
    }
    return b + t;
   }
   function caml_string_of_jsstring(s){
    return jsoo_is_ascii(s)
            ? caml_string_of_jsbytes(s)
            : caml_string_of_jsbytes(caml_utf8_of_utf16(s));
   }
   var
    unix_error =
      ["E2BIG",
       "EACCES",
       "EAGAIN",
       "EBADF",
       "EBUSY",
       "ECHILD",
       "EDEADLK",
       "EDOM",
       "EEXIST",
       "EFAULT",
       "EFBIG",
       "EINTR",
       "EINVAL",
       "EIO",
       "EISDIR",
       "EMFILE",
       "EMLINK",
       "ENAMETOOLONG",
       "ENFILE",
       "ENODEV",
       "ENOENT",
       "ENOEXEC",
       "ENOLCK",
       "ENOMEM",
       "ENOSPC",
       "ENOSYS",
       "ENOTDIR",
       "ENOTEMPTY",
       "ENOTTY",
       "ENXIO",
       "EPERM",
       "EPIPE",
       "ERANGE",
       "EROFS",
       "ESPIPE",
       "ESRCH",
       "EXDEV",
       "EWOULDBLOCK",
       "EINPROGRESS",
       "EALREADY",
       "ENOTSOCK",
       "EDESTADDRREQ",
       "EMSGSIZE",
       "EPROTOTYPE",
       "ENOPROTOOPT",
       "EPROTONOSUPPORT",
       "ESOCKTNOSUPPORT",
       "EOPNOTSUPP",
       "EPFNOSUPPORT",
       "EAFNOSUPPORT",
       "EADDRINUSE",
       "EADDRNOTAVAIL",
       "ENETDOWN",
       "ENETUNREACH",
       "ENETRESET",
       "ECONNABORTED",
       "ECONNRESET",
       "ENOBUFS",
       "EISCONN",
       "ENOTCONN",
       "ESHUTDOWN",
       "ETOOMANYREFS",
       "ETIMEDOUT",
       "ECONNREFUSED",
       "EHOSTDOWN",
       "EHOSTUNREACH",
       "ELOOP",
       "EOVERFLOW"];
   function make_unix_err_args(code, syscall, path, errno){
    var variant = unix_error.indexOf(code);
    if(variant < 0){if(errno == null) errno = - 9999; variant = [0, errno];}
    var
     args =
       [variant,
        caml_string_of_jsstring(syscall || ""),
        caml_string_of_jsstring(path || "")];
    return args;
   }
   var caml_named_values = {};
   function caml_named_value(nm){return caml_named_values[nm];}
   function jsoo_sys_getenv(n){
    var process = globalThis.process;
    if(process && process.env && process.env[n] != undefined)
     return process.env[n];
    if(globalThis.jsoo_static_env && globalThis.jsoo_static_env[n])
     return globalThis.jsoo_static_env[n];
   }
   var caml_record_backtrace_flag = 0;
   (function(){
      var r = jsoo_sys_getenv("OCAMLRUNPARAM");
      if(r !== undefined){
       var l = r.split(",");
       for(var i = 0; i < l.length; i++)
        if(l[i] == "b"){
         caml_record_backtrace_flag = 1;
         break;
        }
        else if(l[i].startsWith("b="))
         caml_record_backtrace_flag = + l[i].slice(2);
        else
         continue;
      }
     }
     ());
   var caml_global_data = [0];
   function caml_exn_with_js_backtrace(exn, force){
    if(! exn.js_error || force || exn[0] == 248)
     exn.js_error = new globalThis.Error("Js exception containing backtrace");
    return exn;
   }
   function caml_maybe_attach_backtrace(exn, force){
    return caml_record_backtrace_flag
            ? caml_exn_with_js_backtrace(exn, force)
            : exn;
   }
   function caml_raise_with_args(tag, args){
    throw caml_maybe_attach_backtrace([0, tag].concat(args));
   }
   function caml_is_ml_bytes(s){return s instanceof MlBytes;}
   function caml_is_ml_string(s){
    return typeof s === "string" && ! /[^\x00-\xff]/.test(s);
   }
   function caml_bytes_of_array(a){
    if(! (a instanceof Uint8Array)) a = new Uint8Array(a);
    return new MlBytes(4, a, a.length);
   }
   function caml_bytes_of_jsbytes(s){return new MlBytes(0, s, s.length);}
   function caml_jsbytes_of_string(x){return x;}
   function caml_bytes_of_string(s){
    return caml_bytes_of_jsbytes(caml_jsbytes_of_string(s));
   }
   function caml_raise_with_arg(tag, arg){
    throw caml_maybe_attach_backtrace([0, tag, arg]);
   }
   function caml_raise_with_string(tag, msg){
    caml_raise_with_arg(tag, caml_string_of_jsbytes(msg));
   }
   function caml_raise_sys_error(msg){
    caml_raise_with_string(caml_global_data.Sys_error, msg);
   }
   function caml_raise_no_such_file(name){
    caml_raise_sys_error(name + ": No such file or directory");
   }
   function caml_convert_bytes_to_array(s){
    var a = new Uint8Array(s.l), b = s.c, l = b.length, i = 0;
    for(; i < l; i++) a[i] = b.charCodeAt(i);
    for(l = s.l; i < l; i++) a[i] = 0;
    s.c = a;
    s.t = 4;
    return a;
   }
   function caml_uint8_array_of_bytes(s){
    if(s.t != 4) caml_convert_bytes_to_array(s);
    return s.c;
   }
   function caml_invalid_argument(msg){
    caml_raise_with_string(caml_global_data.Invalid_argument, msg);
   }
   function caml_create_bytes(len){
    if(len < 0) caml_invalid_argument("Bytes.create");
    return new MlBytes(len ? 2 : 9, "", len);
   }
   function caml_ml_bytes_length(s){return s.l;}
   function caml_blit_bytes(s1, i1, s2, i2, len){
    if(len == 0) return 0;
    if(i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length)){
     s2.c =
      s1.t == 4
       ? caml_subarray_to_jsbytes(s1.c, i1, len)
       : i1 == 0 && s1.c.length == len ? s1.c : s1.c.substr(i1, len);
     s2.t = s2.c.length == s2.l ? 0 : 2;
    }
    else if(s2.t == 2 && i2 == s2.c.length){
     s2.c +=
      s1.t == 4
       ? caml_subarray_to_jsbytes(s1.c, i1, len)
       : i1 == 0 && s1.c.length == len ? s1.c : s1.c.substr(i1, len);
     s2.t = s2.c.length == s2.l ? 0 : 2;
    }
    else{
     if(s2.t != 4) caml_convert_bytes_to_array(s2);
     var c1 = s1.c, c2 = s2.c;
     if(s1.t == 4)
      if(i2 <= i1)
       for(var i = 0; i < len; i++) c2[i2 + i] = c1[i1 + i];
      else
       for(var i = len - 1; i >= 0; i--) c2[i2 + i] = c1[i1 + i];
     else{
      var l = Math.min(len, c1.length - i1);
      for(var i = 0; i < l; i++) c2[i2 + i] = c1.charCodeAt(i1 + i);
      for(; i < len; i++) c2[i2 + i] = 0;
     }
    }
    return 0;
   }
   function MlFile(){}
   function MlFakeFile(content){this.data = content;}
   MlFakeFile.prototype = new MlFile();
   MlFakeFile.prototype.constructor = MlFakeFile;
   MlFakeFile.prototype.truncate =
    function(len){
     var old = this.data;
     this.data = caml_create_bytes(len | 0);
     caml_blit_bytes(old, 0, this.data, 0, len);
    };
   MlFakeFile.prototype.length =
    function(){return caml_ml_bytes_length(this.data);};
   MlFakeFile.prototype.write =
    function(offset, buf, pos, len){
     var clen = this.length();
     if(offset + len >= clen){
      var new_str = caml_create_bytes(offset + len), old_data = this.data;
      this.data = new_str;
      caml_blit_bytes(old_data, 0, this.data, 0, clen);
     }
     caml_blit_bytes(caml_bytes_of_array(buf), pos, this.data, offset, len);
     return 0;
    };
   MlFakeFile.prototype.read =
    function(offset, buf, pos, len){
     var clen = this.length();
     if(offset + len >= clen) len = clen - offset;
     if(len){
      var data = caml_create_bytes(len | 0);
      caml_blit_bytes(this.data, offset, data, 0, len);
      buf.set(caml_uint8_array_of_bytes(data), pos);
     }
     return len;
    };
   function MlFakeFd(name, file, flags){
    this.file = file;
    this.name = name;
    this.flags = flags;
   }
   MlFakeFd.prototype.err_closed =
    function(){
     caml_raise_sys_error(this.name + ": file descriptor already closed");
    };
   MlFakeFd.prototype.length =
    function(){if(this.file) return this.file.length(); this.err_closed();};
   MlFakeFd.prototype.write =
    function(offset, buf, pos, len){
     if(this.file) return this.file.write(offset, buf, pos, len);
     this.err_closed();
    };
   MlFakeFd.prototype.read =
    function(offset, buf, pos, len){
     if(this.file) return this.file.read(offset, buf, pos, len);
     this.err_closed();
    };
   MlFakeFd.prototype.close = function(){this.file = undefined;};
   function MlFakeDevice(root, f){
    this.content = {};
    this.root = root;
    this.lookupFun = f;
   }
   MlFakeDevice.prototype.nm = function(name){return this.root + name;};
   MlFakeDevice.prototype.create_dir_if_needed =
    function(name){
     var comp = name.split("/"), res = "";
     for(var i = 0; i < comp.length - 1; i++){
      res += comp[i] + "/";
      if(this.content[res]) continue;
      this.content[res] = Symbol("directory");
     }
    };
   MlFakeDevice.prototype.slash =
    function(name){return /\/$/.test(name) ? name : name + "/";};
   MlFakeDevice.prototype.lookup =
    function(name){
     if(! this.content[name] && this.lookupFun){
      var
       res =
         this.lookupFun
          (caml_string_of_jsbytes(this.root), caml_string_of_jsbytes(name));
      if(res !== 0){
       this.create_dir_if_needed(name);
       this.content[name] = new MlFakeFile(caml_bytes_of_string(res[1]));
      }
     }
    };
   MlFakeDevice.prototype.exists =
    function(name){
     if(name == "") return 1;
     var name_slash = this.slash(name);
     if(this.content[name_slash]) return 1;
     this.lookup(name);
     return this.content[name] ? 1 : 0;
    };
   MlFakeDevice.prototype.isFile =
    function(name){return this.exists(name) && ! this.is_dir(name) ? 1 : 0;};
   MlFakeDevice.prototype.mkdir =
    function(name, mode, raise_unix){
     var unix_error = raise_unix && caml_named_value("Unix.Unix_error");
     if(this.exists(name))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("EEXIST", "mkdir", this.nm(name)));
      else
       caml_raise_sys_error(name + ": File exists");
     var parent = /^(.*)\/[^/]+/.exec(name);
     parent = parent && parent[1] || "";
     if(! this.exists(parent))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("ENOENT", "mkdir", this.nm(parent)));
      else
       caml_raise_sys_error(parent + ": No such file or directory");
     if(! this.is_dir(parent))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("ENOTDIR", "mkdir", this.nm(parent)));
      else
       caml_raise_sys_error(parent + ": Not a directory");
     this.create_dir_if_needed(this.slash(name));
    };
   MlFakeDevice.prototype.rmdir =
    function(name, raise_unix){
     var
      unix_error = raise_unix && caml_named_value("Unix.Unix_error"),
      name_slash = name == "" ? "" : this.slash(name),
      r = new RegExp("^" + name_slash + "([^/]+)");
     if(! this.exists(name))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("ENOENT", "rmdir", this.nm(name)));
      else
       caml_raise_sys_error(name + ": No such file or directory");
     if(! this.is_dir(name))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("ENOTDIR", "rmdir", this.nm(name)));
      else
       caml_raise_sys_error(name + ": Not a directory");
     for(var n in this.content)
      if(n.match(r))
       if(unix_error)
        caml_raise_with_args
         (unix_error, make_unix_err_args("ENOTEMPTY", "rmdir", this.nm(name)));
       else
        caml_raise_sys_error(this.nm(name) + ": Directory not empty");
     delete this.content[name_slash];
    };
   MlFakeDevice.prototype.readdir =
    function(name){
     var name_slash = name == "" ? "" : this.slash(name);
     if(! this.exists(name))
      caml_raise_sys_error(name + ": No such file or directory");
     if(! this.is_dir(name)) caml_raise_sys_error(name + ": Not a directory");
     var r = new RegExp("^" + name_slash + "([^/]+)"), seen = {}, a = [];
     for(var n in this.content){
      var m = n.match(r);
      if(m && ! seen[m[1]]){seen[m[1]] = true; a.push(m[1]);}
     }
     return a;
    };
   MlFakeDevice.prototype.opendir =
    function(name, raise_unix){
     var
      unix_error = raise_unix && caml_named_value("Unix.Unix_error"),
      a = this.readdir(name),
      c = false,
      i = 0;
     return {readSync:
             function(){
              if(c)
               if(unix_error)
                caml_raise_with_args
                 (unix_error,
                  make_unix_err_args("EBADF", "closedir", this.nm(name)));
               else
                caml_raise_sys_error(name + ": closedir failed");
              if(i == a.length) return null;
              var entry = a[i];
              i++;
              return {name: entry};
             },
             closeSync:
             function(){
              if(c)
               if(unix_error)
                caml_raise_with_args
                 (unix_error,
                  make_unix_err_args("EBADF", "closedir", this.nm(name)));
               else
                caml_raise_sys_error(name + ": closedir failed");
              c = true;
              a = [];
             }};
    };
   MlFakeDevice.prototype.is_dir =
    function(name){
     if(name == "") return true;
     var name_slash = this.slash(name);
     return this.content[name_slash] ? 1 : 0;
    };
   MlFakeDevice.prototype.unlink =
    function(name){
     var ok = this.content[name] ? true : false;
     delete this.content[name];
     return ok;
    };
   MlFakeDevice.prototype.open =
    function(name, f){
     var file;
     if(f.rdonly && f.wronly)
      caml_raise_sys_error
       (this.nm(name)
        + " : flags Open_rdonly and Open_wronly are not compatible");
     if(f.text && f.binary)
      caml_raise_sys_error
       (this.nm(name)
        + " : flags Open_text and Open_binary are not compatible");
     this.lookup(name);
     if(this.content[name]){
      if(this.is_dir(name))
       caml_raise_sys_error(this.nm(name) + " : is a directory");
      if(f.create && f.excl)
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      file = this.content[name];
      if(f.truncate) file.truncate();
     }
     else if(f.create){
      this.create_dir_if_needed(name);
      this.content[name] = new MlFakeFile(caml_create_bytes(0));
      file = this.content[name];
     }
     else
      caml_raise_no_such_file(this.nm(name));
     return new MlFakeFd(this.nm(name), file, f);
    };
   MlFakeDevice.prototype.open =
    function(name, f){
     var file;
     if(f.rdonly && f.wronly)
      caml_raise_sys_error
       (this.nm(name)
        + " : flags Open_rdonly and Open_wronly are not compatible");
     if(f.text && f.binary)
      caml_raise_sys_error
       (this.nm(name)
        + " : flags Open_text and Open_binary are not compatible");
     this.lookup(name);
     if(this.content[name]){
      if(this.is_dir(name))
       caml_raise_sys_error(this.nm(name) + " : is a directory");
      if(f.create && f.excl)
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      file = this.content[name];
      if(f.truncate) file.truncate();
     }
     else if(f.create){
      this.create_dir_if_needed(name);
      this.content[name] = new MlFakeFile(caml_create_bytes(0));
      file = this.content[name];
     }
     else
      caml_raise_no_such_file(this.nm(name));
     return new MlFakeFd(this.nm(name), file, f);
    };
   MlFakeDevice.prototype.register =
    function(name, content){
     var file;
     if(this.content[name])
      caml_raise_sys_error(this.nm(name) + " : file already exists");
     if(caml_is_ml_bytes(content)) file = new MlFakeFile(content);
     if(caml_is_ml_string(content))
      file = new MlFakeFile(caml_bytes_of_string(content));
     else if(content instanceof Array)
      file = new MlFakeFile(caml_bytes_of_array(content));
     else if(typeof content === "string")
      file = new MlFakeFile(caml_bytes_of_jsbytes(content));
     else if(content.toString){
      var
       bytes =
         caml_bytes_of_string(caml_string_of_jsstring(content.toString()));
      file = new MlFakeFile(bytes);
     }
     if(file){
      this.create_dir_if_needed(name);
      this.content[name] = file;
     }
     else
      caml_raise_sys_error
       (this.nm(name) + " : registering file with invalid content type");
    };
   MlFakeDevice.prototype.constructor = MlFakeDevice;
   function MlFakeFd_out(fd, flags){
    MlFakeFile.call(this, caml_create_bytes(0));
    this.log = function(s){return 0;};
    if(fd == 1 && typeof console.log == "function")
     this.log = console.log;
    else if(fd == 2 && typeof console.error == "function")
     this.log = console.error;
    else if(typeof console.log == "function") this.log = console.log;
    this.flags = flags;
   }
   MlFakeFd_out.prototype.length = function(){return 0;};
   MlFakeFd_out.prototype.write =
    function(offset, buf, pos, len){
     if(this.log){
      if
       (len > 0 && pos >= 0 && pos + len <= buf.length
        && buf[pos + len - 1] == 10)
       len--;
      var src = caml_create_bytes(len);
      caml_blit_bytes(caml_bytes_of_array(buf), pos, src, 0, len);
      this.log(src.toUtf16());
      return 0;
     }
     caml_raise_sys_error(this.fd + ": file descriptor already closed");
    };
   MlFakeFd_out.prototype.read =
    function(offset, buf, pos, len){
     caml_raise_sys_error(this.fd + ": file descriptor is write only");
    };
   MlFakeFd_out.prototype.close = function(){this.log = undefined;};
   var caml_int64_offset = Math.pow(2, - 24);
   function caml_raise_constant(tag){throw tag;}
   function caml_raise_zero_divide(){
    caml_raise_constant(caml_global_data.Division_by_zero);
   }
   function MlInt64(lo, mi, hi){
    this.lo = lo & 0xffffff;
    this.mi = mi & 0xffffff;
    this.hi = hi & 0xffff;
   }
   MlInt64.prototype.caml_custom = "_j";
   MlInt64.prototype.copy =
    function(){return new MlInt64(this.lo, this.mi, this.hi);};
   MlInt64.prototype.ucompare =
    function(x){
     if(this.hi > x.hi) return 1;
     if(this.hi < x.hi) return - 1;
     if(this.mi > x.mi) return 1;
     if(this.mi < x.mi) return - 1;
     if(this.lo > x.lo) return 1;
     if(this.lo < x.lo) return - 1;
     return 0;
    };
   MlInt64.prototype.compare =
    function(x){
     var hi = this.hi << 16, xhi = x.hi << 16;
     if(hi > xhi) return 1;
     if(hi < xhi) return - 1;
     if(this.mi > x.mi) return 1;
     if(this.mi < x.mi) return - 1;
     if(this.lo > x.lo) return 1;
     if(this.lo < x.lo) return - 1;
     return 0;
    };
   MlInt64.prototype.neg =
    function(){
     var
      lo = - this.lo,
      mi = - this.mi + (lo >> 24),
      hi = - this.hi + (mi >> 24);
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.add =
    function(x){
     var
      lo = this.lo + x.lo,
      mi = this.mi + x.mi + (lo >> 24),
      hi = this.hi + x.hi + (mi >> 24);
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.sub =
    function(x){
     var
      lo = this.lo - x.lo,
      mi = this.mi - x.mi + (lo >> 24),
      hi = this.hi - x.hi + (mi >> 24);
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.mul =
    function(x){
     var
      lo = this.lo * x.lo,
      mi = (lo * caml_int64_offset | 0) + this.mi * x.lo + this.lo * x.mi,
      hi =
        (mi * caml_int64_offset | 0) + this.hi * x.lo + this.mi * x.mi
        + this.lo * x.hi;
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.isZero =
    function(){return (this.lo | this.mi | this.hi) == 0;};
   MlInt64.prototype.isNeg = function(){return this.hi << 16 < 0;};
   MlInt64.prototype.and =
    function(x){
     return new MlInt64(this.lo & x.lo, this.mi & x.mi, this.hi & x.hi);
    };
   MlInt64.prototype.or =
    function(x){
     return new MlInt64(this.lo | x.lo, this.mi | x.mi, this.hi | x.hi);
    };
   MlInt64.prototype.xor =
    function(x){
     return new MlInt64(this.lo ^ x.lo, this.mi ^ x.mi, this.hi ^ x.hi);
    };
   MlInt64.prototype.shift_left =
    function(s){
     s = s & 63;
     if(s == 0) return this;
     if(s < 24)
      return new
              MlInt64
              (this.lo << s,
               this.mi << s | this.lo >> 24 - s,
               this.hi << s | this.mi >> 24 - s);
     if(s < 48)
      return new
              MlInt64
              (0, this.lo << s - 24, this.mi << s - 24 | this.lo >> 48 - s);
     return new MlInt64(0, 0, this.lo << s - 48);
    };
   MlInt64.prototype.shift_right_unsigned =
    function(s){
     s = s & 63;
     if(s == 0) return this;
     if(s < 24)
      return new
              MlInt64
              (this.lo >> s | this.mi << 24 - s,
               this.mi >> s | this.hi << 24 - s,
               this.hi >> s);
     if(s < 48)
      return new
              MlInt64
              (this.mi >> s - 24 | this.hi << 48 - s, this.hi >> s - 24, 0);
     return new MlInt64(this.hi >> s - 48, 0, 0);
    };
   MlInt64.prototype.shift_right =
    function(s){
     s = s & 63;
     if(s == 0) return this;
     var h = this.hi << 16 >> 16;
     if(s < 24)
      return new
              MlInt64
              (this.lo >> s | this.mi << 24 - s,
               this.mi >> s | h << 24 - s,
               this.hi << 16 >> s >>> 16);
     var sign = this.hi << 16 >> 31;
     if(s < 48)
      return new
              MlInt64
              (this.mi >> s - 24 | this.hi << 48 - s,
               this.hi << 16 >> s - 24 >> 16,
               sign & 0xffff);
     return new MlInt64(this.hi << 16 >> s - 32, sign, sign);
    };
   MlInt64.prototype.lsl1 =
    function(){
     this.hi = this.hi << 1 | this.mi >> 23;
     this.mi = (this.mi << 1 | this.lo >> 23) & 0xffffff;
     this.lo = this.lo << 1 & 0xffffff;
    };
   MlInt64.prototype.lsr1 =
    function(){
     this.lo = (this.lo >>> 1 | this.mi << 23) & 0xffffff;
     this.mi = (this.mi >>> 1 | this.hi << 23) & 0xffffff;
     this.hi = this.hi >>> 1;
    };
   MlInt64.prototype.udivmod =
    function(x){
     var
      offset = 0,
      modulus = this.copy(),
      divisor = x.copy(),
      quotient = new MlInt64(0, 0, 0);
     while(modulus.ucompare(divisor) > 0){offset++; divisor.lsl1();}
     while(offset >= 0){
      offset--;
      quotient.lsl1();
      if(modulus.ucompare(divisor) >= 0){
       quotient.lo++;
       modulus = modulus.sub(divisor);
      }
      divisor.lsr1();
     }
     return {quotient: quotient, modulus: modulus};
    };
   MlInt64.prototype.div =
    function(y){
     var x = this;
     if(y.isZero()) caml_raise_zero_divide();
     var sign = x.hi ^ y.hi;
     if(x.hi & 0x8000) x = x.neg();
     if(y.hi & 0x8000) y = y.neg();
     var q = x.udivmod(y).quotient;
     if(sign & 0x8000) q = q.neg();
     return q;
    };
   MlInt64.prototype.mod =
    function(y){
     var x = this;
     if(y.isZero()) caml_raise_zero_divide();
     var sign = x.hi;
     if(x.hi & 0x8000) x = x.neg();
     if(y.hi & 0x8000) y = y.neg();
     var r = x.udivmod(y).modulus;
     if(sign & 0x8000) r = r.neg();
     return r;
    };
   MlInt64.prototype.toInt = function(){return this.lo | this.mi << 24;};
   MlInt64.prototype.toFloat =
    function(){
     return (this.hi << 16) * Math.pow(2, 32) + this.mi * Math.pow(2, 24)
            + this.lo;
    };
   MlInt64.prototype.toArray =
    function(){
     return [this.hi >> 8,
             this.hi & 0xff,
             this.mi >> 16,
             this.mi >> 8 & 0xff,
             this.mi & 0xff,
             this.lo >> 16,
             this.lo >> 8 & 0xff,
             this.lo & 0xff];
    };
   MlInt64.prototype.lo32 =
    function(){return this.lo | (this.mi & 0xff) << 24;};
   MlInt64.prototype.hi32 =
    function(){return this.mi >>> 8 & 0xffff | this.hi << 16;};
   function MlMutex(){this.locked = false;}
   function MlNat(x){
    this.data = new Int32Array(x);
    this.length = this.data.length + 2;
   }
   MlNat.prototype.caml_custom = "_nat";
   function caml_ml_string_length(s){return s.length;}
   function caml_string_unsafe_get(s, i){return s.charCodeAt(i);}
   function caml_uint8_array_of_string(s){
    var l = caml_ml_string_length(s), a = new Uint8Array(l), i = 0;
    for(; i < l; i++) a[i] = caml_string_unsafe_get(s, i);
    return a;
   }
   function caml_bytes_bound_error(){
    caml_invalid_argument("index out of bounds");
   }
   function caml_bytes_unsafe_set(s, i, c){
    c &= 0xff;
    if(s.t != 4){
     if(i == s.c.length){
      s.c += String.fromCharCode(c);
      if(i + 1 == s.l) s.t = 0;
      return 0;
     }
     caml_convert_bytes_to_array(s);
    }
    s.c[i] = c;
    return 0;
   }
   function caml_bytes_set(s, i, c){
    if(i >>> 0 >= s.l) caml_bytes_bound_error();
    return caml_bytes_unsafe_set(s, i, c);
   }
   function MlNodeFd(fd, flags){
    this.fs = require("fs");
    this.fd = fd;
    this.flags = flags;
   }
   MlNodeFd.prototype = new MlFile();
   MlNodeFd.prototype.constructor = MlNodeFd;
   MlNodeFd.prototype.truncate =
    function(len){
     try{this.fs.ftruncateSync(this.fd, len | 0);}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeFd.prototype.length =
    function(){
     try{return this.fs.fstatSync(this.fd).size;}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeFd.prototype.write =
    function(offset, buf, buf_offset, len){
     try{
      if(this.flags.isCharacterDevice)
       this.fs.writeSync(this.fd, buf, buf_offset, len);
      else
       this.fs.writeSync(this.fd, buf, buf_offset, len, offset);
     }
     catch(err){caml_raise_sys_error(err.toString());}
     return 0;
    };
   MlNodeFd.prototype.read =
    function(offset, a, buf_offset, len){
     try{
      if(this.flags.isCharacterDevice)
       var read = this.fs.readSync(this.fd, a, buf_offset, len);
      else
       var read = this.fs.readSync(this.fd, a, buf_offset, len, offset);
      return read;
     }
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeFd.prototype.close =
    function(){
     try{this.fs.closeSync(this.fd); return 0;}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   function MlNodeDevice(root){this.fs = require("fs"); this.root = root;}
   MlNodeDevice.prototype.nm = function(name){return this.root + name;};
   MlNodeDevice.prototype.exists =
    function(name){
     try{return this.fs.existsSync(this.nm(name)) ? 1 : 0;}
     catch(err){return 0;}
    };
   MlNodeDevice.prototype.isFile =
    function(name){
     try{return this.fs.statSync(this.nm(name)).isFile() ? 1 : 0;}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeDevice.prototype.mkdir =
    function(name, mode, raise_unix){
     try{this.fs.mkdirSync(this.nm(name), {mode: mode}); return 0;}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.rmdir =
    function(name, raise_unix){
     try{this.fs.rmdirSync(this.nm(name)); return 0;}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.readdir =
    function(name, raise_unix){
     try{return this.fs.readdirSync(this.nm(name));}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.is_dir =
    function(name){
     try{return this.fs.statSync(this.nm(name)).isDirectory() ? 1 : 0;}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeDevice.prototype.unlink =
    function(name, raise_unix){
     try{
      var b = this.fs.existsSync(this.nm(name)) ? 1 : 0;
      this.fs.unlinkSync(this.nm(name));
      return b;
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.open =
    function(name, f, raise_unix){
     var consts = require("constants"), res = 0;
     for(var key in f)
      switch(key){
        case "rdonly":
         res |= consts.O_RDONLY; break;
        case "wronly":
         res |= consts.O_WRONLY; break;
        case "append":
         res |= consts.O_WRONLY | consts.O_APPEND; break;
        case "create":
         res |= consts.O_CREAT; break;
        case "truncate":
         res |= consts.O_TRUNC; break;
        case "excl":
         res |= consts.O_EXCL; break;
        case "binary":
         res |= consts.O_BINARY; break;
        case "text":
         res |= consts.O_TEXT; break;
        case "nonblock":
         res |= consts.O_NONBLOCK; break;
      }
     try{
      var
       fd = this.fs.openSync(this.nm(name), res),
       isCharacterDevice =
         this.fs.lstatSync(this.nm(name)).isCharacterDevice();
      f.isCharacterDevice = isCharacterDevice;
      return new MlNodeFd(fd, f);
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.rename =
    function(o, n, raise_unix){
     try{this.fs.renameSync(this.nm(o), this.nm(n));}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.stat =
    function(name, raise_unix){
     try{
      var js_stats = this.fs.statSync(this.nm(name));
      return this.stats_from_js(js_stats);
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.lstat =
    function(name, raise_unix){
     try{
      var js_stats = this.fs.lstatSync(this.nm(name));
      return this.stats_from_js(js_stats);
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.symlink =
    function(to_dir, target, path, raise_unix){
     try{
      this.fs.symlinkSync
       (this.nm(target), this.nm(path), to_dir ? "dir" : "file");
      return 0;
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.readlink =
    function(name, raise_unix){
     try{
      var link = this.fs.readlinkSync(this.nm(name), "utf8");
      return caml_string_of_jsstring(link);
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.opendir =
    function(name, raise_unix){
     try{return this.fs.opendirSync(this.nm(name));}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.raise_nodejs_error =
    function(err, raise_unix){
     var unix_error = caml_named_value("Unix.Unix_error");
     if(raise_unix && unix_error){
      var
       args = make_unix_err_args(err.code, err.syscall, err.path, err.errno);
      caml_raise_with_args(unix_error, args);
     }
     else
      caml_raise_sys_error(err.toString());
    };
   MlNodeDevice.prototype.stats_from_js =
    function(js_stats){
     var file_kind;
     if(js_stats.isFile())
      file_kind = 0;
     else if(js_stats.isDirectory())
      file_kind = 1;
     else if(js_stats.isCharacterDevice())
      file_kind = 2;
     else if(js_stats.isBlockDevice())
      file_kind = 3;
     else if(js_stats.isSymbolicLink())
      file_kind = 4;
     else if(js_stats.isFIFO())
      file_kind = 5;
     else if(js_stats.isSocket()) file_kind = 6;
     return [0,
             js_stats.dev,
             js_stats.ino,
             file_kind,
             js_stats.mode,
             js_stats.nlink,
             js_stats.uid,
             js_stats.gid,
             js_stats.rdev,
             js_stats.size,
             js_stats.atimeMs,
             js_stats.mtimeMs,
             js_stats.ctimeMs];
    };
   MlNodeDevice.prototype.constructor = MlNodeDevice;
   var MlObjectTable;
   if(typeof globalThis.Map === "undefined")
    MlObjectTable =
     function(){
       function NaiveLookup(objs){this.objs = objs;}
       NaiveLookup.prototype.get =
        function(v){
         for(var i = 0; i < this.objs.length; i++)
          if(this.objs[i] === v) return i;
        };
       NaiveLookup.prototype.set = function(){};
       return function(){
        this.objs = [];
        this.lookup = new NaiveLookup(this.objs);};
      }
      ();
   else
    MlObjectTable =
     function(){this.objs = []; this.lookup = new globalThis.Map();};
   MlObjectTable.prototype.store =
    function(v){this.lookup.set(v, this.objs.length); this.objs.push(v);};
   MlObjectTable.prototype.recall =
    function(v){
     var i = this.lookup.get(v);
     return i === undefined ? undefined : this.objs.length - i;
    };
   function MlStringReader(s, i){
    this.s = caml_jsbytes_of_string(s);
    this.i = i;
   }
   MlStringReader.prototype =
    {read8u: function(){return this.s.charCodeAt(this.i++);},
     read8s: function(){return this.s.charCodeAt(this.i++) << 24 >> 24;},
     read16u:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 2;
      return s.charCodeAt(i) << 8 | s.charCodeAt(i + 1);
     },
     read16s:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 2;
      return s.charCodeAt(i) << 24 >> 16 | s.charCodeAt(i + 1);
     },
     read32u:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 4;
      return (s.charCodeAt(i) << 24 | s.charCodeAt(i + 1) << 16
             | s.charCodeAt(i + 2) << 8
             | s.charCodeAt(i + 3))
             >>> 0;
     },
     read32s:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 4;
      return s.charCodeAt(i) << 24 | s.charCodeAt(i + 1) << 16
             | s.charCodeAt(i + 2) << 8
             | s.charCodeAt(i + 3);
     },
     readstr:
     function(len){
      var i = this.i;
      this.i = i + len;
      return caml_string_of_jsbytes(this.s.substring(i, i + len));
     },
     readuint8array:
     function(len){
      var b = new Uint8Array(len), s = this.s, i = this.i;
      for(var j = 0; j < len; j++) b[j] = s.charCodeAt(i + j);
      this.i = i + len;
      return b;
     }};
   function caml_int64_create_lo_hi(lo, hi){
    return new
            MlInt64
            (lo & 0xffffff,
             lo >>> 24 & 0xff | (hi & 0xffff) << 8,
             hi >>> 16 & 0xffff);
   }
   function caml_int64_hi32(v){return v.hi32();}
   function caml_int64_lo32(v){return v.lo32();}
   function caml_array_bound_error(){
    caml_invalid_argument("index out of bounds");
   }
   var caml_ba_custom_name = "_bigarr02";
   function Ml_Bigarray(kind, layout, dims, buffer){
    this.kind = kind;
    this.layout = layout;
    this.dims = dims;
    this.data = buffer;
   }
   Ml_Bigarray.prototype.caml_custom = caml_ba_custom_name;
   Ml_Bigarray.prototype.offset =
    function(arg){
     var ofs = 0;
     if(typeof arg === "number") arg = [arg];
     if(! (arg instanceof Array))
      caml_invalid_argument("bigarray.js: invalid offset");
     if(this.dims.length != arg.length)
      caml_invalid_argument("Bigarray.get/set: bad number of dimensions");
     if(this.layout == 0)
      for(var i = 0; i < this.dims.length; i++){
       if(arg[i] < 0 || arg[i] >= this.dims[i]) caml_array_bound_error();
       ofs = ofs * this.dims[i] + arg[i];
      }
     else
      for(var i = this.dims.length - 1; i >= 0; i--){
       if(arg[i] < 1 || arg[i] > this.dims[i]) caml_array_bound_error();
       ofs = ofs * this.dims[i] + (arg[i] - 1);
      }
     return ofs;
    };
   Ml_Bigarray.prototype.get =
    function(ofs){
     switch(this.kind){
       case 7:
        var l = this.data[ofs * 2 + 0], h = this.data[ofs * 2 + 1];
        return caml_int64_create_lo_hi(l, h);
       case 10:
       case 11:
        var r = this.data[ofs * 2 + 0], i = this.data[ofs * 2 + 1];
        return [254, r, i];
       default: return this.data[ofs];
     }
    };
   Ml_Bigarray.prototype.set =
    function(ofs, v){
     switch(this.kind){
       case 7:
        this.data[ofs * 2 + 0] = caml_int64_lo32(v);
        this.data[ofs * 2 + 1] = caml_int64_hi32(v);
        break;
       case 10:
       case 11:
        this.data[ofs * 2 + 0] = v[1]; this.data[ofs * 2 + 1] = v[2]; break;
       default: this.data[ofs] = v; break;
     }
     return 0;
    };
   Ml_Bigarray.prototype.fill =
    function(v){
     switch(this.kind){
       case 7:
        var a = caml_int64_lo32(v), b = caml_int64_hi32(v);
        if(a == b)
         this.data.fill(a);
        else
         for(var i = 0; i < this.data.length; i++)
          this.data[i] = i % 2 == 0 ? a : b;
        break;
       case 10:
       case 11:
        var im = v[1], re = v[2];
        if(im == re)
         this.data.fill(im);
        else
         for(var i = 0; i < this.data.length; i++)
          this.data[i] = i % 2 == 0 ? im : re;
        break;
       default: this.data.fill(v); break;
     }
    };
   Ml_Bigarray.prototype.compare =
    function(b, total){
     if(this.layout != b.layout || this.kind != b.kind){
      var k1 = this.kind | this.layout << 8, k2 = b.kind | b.layout << 8;
      return k2 - k1;
     }
     if(this.dims.length != b.dims.length)
      return b.dims.length - this.dims.length;
     for(var i = 0; i < this.dims.length; i++)
      if(this.dims[i] != b.dims[i]) return this.dims[i] < b.dims[i] ? - 1 : 1;
     switch(this.kind){
       case 0:
       case 1:
       case 10:
       case 11:
        var x, y;
        for(var i = 0; i < this.data.length; i++){
         x = this.data[i];
         y = b.data[i];
         if(x < y) return - 1;
         if(x > y) return 1;
         if(x != y){
          if(! total) return NaN;
          if(x == x) return 1;
          if(y == y) return - 1;
         }
        }
        break;
       case 7:
        for(var i = 0; i < this.data.length; i += 2){
         if(this.data[i + 1] < b.data[i + 1]) return - 1;
         if(this.data[i + 1] > b.data[i + 1]) return 1;
         if(this.data[i] >>> 0 < b.data[i] >>> 0) return - 1;
         if(this.data[i] >>> 0 > b.data[i] >>> 0) return 1;
        }
        break;
       case 2:
       case 3:
       case 4:
       case 5:
       case 6:
       case 8:
       case 9:
       case 12:
        for(var i = 0; i < this.data.length; i++){
         if(this.data[i] < b.data[i]) return - 1;
         if(this.data[i] > b.data[i]) return 1;
        }
        break;
     }
     return 0;
    };
   function Ml_Bigarray_c_1_1(kind, layout, dims, buffer){
    this.kind = kind;
    this.layout = layout;
    this.dims = dims;
    this.data = buffer;
   }
   Ml_Bigarray_c_1_1.prototype = new Ml_Bigarray();
   Ml_Bigarray_c_1_1.prototype.offset =
    function(arg){
     if(typeof arg !== "number")
      if(arg instanceof Array && arg.length == 1)
       arg = arg[0];
      else
       caml_invalid_argument("Ml_Bigarray_c_1_1.offset");
     if(arg < 0 || arg >= this.dims[0]) caml_array_bound_error();
     return arg;
    };
   Ml_Bigarray_c_1_1.prototype.get = function(ofs){return this.data[ofs];};
   Ml_Bigarray_c_1_1.prototype.set =
    function(ofs, v){this.data[ofs] = v; return 0;};
   Ml_Bigarray_c_1_1.prototype.fill =
    function(v){this.data.fill(v); return 0;};
   function Optional_bool_val(mlOptBool, def){
    return typeof mlOptBool == "object" ? mlOptBool[1] !== 0 : def;
   }
   function Optional_val(mlOptVal, def){
    return typeof mlOptVal == "object" ? mlOptVal[1] : def;
   }
   var
    REPEAT_TAG = {NO_REPEAT: 0, REPEAT_X: 1, REPEAT_Y: 2, REPEAT_XY: 3},
    tag_to_repeat =
      new
       joo_global_object.Map
       ([[REPEAT_TAG.NO_REPEAT, "no-repeat"],
         [REPEAT_TAG.REPEAT_X, "repeat-x"],
         [REPEAT_TAG.REPEAT_Y, "repeat-y"],
         [REPEAT_TAG.REPEAT_XY, "repeat"]]);
   function Repeat_val(repeat){return tag_to_repeat.get(repeat);}
   var
    SLANT = {ROMAN: "normal", ITALIC: "italic", OBLIQUE: "oblique"},
    SLANT_TAG = {ROMAN: 0, ITALIC: 1, OBLIQUE: 2},
    tag_to_slant =
      new
       joo_global_object.Map
       ([[SLANT_TAG.ROMAN, SLANT.ROMAN],
         [SLANT_TAG.ITALIC, SLANT.ITALIC],
         [SLANT_TAG.OBLIQUE, SLANT.OBLIQUE]]);
   function Slant_val(slant){return tag_to_slant.get(slant);}
   function UInt8ArrayReader(s, i){this.s = s; this.i = i;}
   UInt8ArrayReader.prototype =
    {read8u: function(){return this.s[this.i++];},
     read8s: function(){return this.s[this.i++] << 24 >> 24;},
     read16u:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 2;
      return s[i] << 8 | s[i + 1];
     },
     read16s:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 2;
      return s[i] << 24 >> 16 | s[i + 1];
     },
     read32u:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 4;
      return (s[i] << 24 | s[i + 1] << 16 | s[i + 2] << 8 | s[i + 3]) >>> 0;
     },
     read32s:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 4;
      return s[i] << 24 | s[i + 1] << 16 | s[i + 2] << 8 | s[i + 3];
     },
     readstr:
     function(len){
      var i = this.i;
      this.i = i + len;
      return caml_string_of_array(this.s.subarray(i, i + len));
     },
     readuint8array:
     function(len){
      var i = this.i;
      this.i = i + len;
      return this.s.subarray(i, i + len);
     }};
   var
    button_to_tag =
      new
       joo_global_object.Map
       ([[BUTTON.NONE, BUTTON_TAG.NONE],
         [BUTTON.LEFT, BUTTON_TAG.LEFT],
         [BUTTON.MIDDLE, BUTTON_TAG.MIDDLE],
         [BUTTON.MIDDLE, BUTTON_TAG.RIGHT],
         [BUTTON.WHEEL_UP, BUTTON_TAG.WHEEL_UP],
         [BUTTON.WHEEL_DOWN, BUTTON_TAG.WHEEL_DOWN]]);
   function Val_button(button){return button_to_tag.get(button);}
   var
    button_state_to_tag =
      new
       joo_global_object.Map
       ([[BUTTON_STATE.UP, BUTTON_STATE_TAG.UP],
         [BUTTON_STATE.DOWN, BUTTON_STATE_TAG.DOWN]]);
   function Val_button_state(state){return button_state_to_tag.get(state);}
   var
    cap_type_to_tag =
      new
       joo_global_object.Map
       ([["butt", CAP_TYPE_TAG.BUTT],
         ["square", CAP_TYPE_TAG.SQUARE],
         ["round", CAP_TYPE_TAG.ROUND]]);
   function Val_cap_type(cap){return cap_type_to_tag.get(cap);}
   var
    compop_to_tag =
      new
       joo_global_object.Map
       ([["source-over", COMPOP_TAG.SOURCE_OVER],
         ["source-in", COMPOP_TAG.SOURCE_IN],
         ["source-out", COMPOP_TAG.SOURCE_OUT],
         ["source-atop", COMPOP_TAG.SOURCE_ATOP],
         ["destination-over", COMPOP_TAG.DESTINATION_OVER],
         ["destination-in", COMPOP_TAG.DESTINATION_IN],
         ["destination-out", COMPOP_TAG.DESTINATION_OUT],
         ["destination-atop", COMPOP_TAG.DESTINATION_ATOP],
         ["lighter", COMPOP_TAG.LIGHTER],
         ["copy", COMPOP_TAG.COPY],
         ["xor", COMPOP_TAG.XOR],
         ["multiply", COMPOP_TAG.MULTIPLY],
         ["screen", COMPOP_TAG.SCREEN],
         ["overlay", COMPOP_TAG.OVERLAY],
         ["darken", COMPOP_TAG.DARKEN],
         ["lighten", COMPOP_TAG.LIGHTEN],
         ["color-dodge", COMPOP_TAG.COLOR_DODGE],
         ["color-burn", COMPOP_TAG.COLOR_BURN],
         ["hard-light", COMPOP_TAG.HARD_LIGHT],
         ["soft-light", COMPOP_TAG.SOFT_LIGHT],
         ["difference", COMPOP_TAG.DIFFERENCE],
         ["exclusion", COMPOP_TAG.EXCLUSION],
         ["hue", COMPOP_TAG.HUE],
         ["saturation", COMPOP_TAG.SATURATION],
         ["color", COMPOP_TAG.COLOR],
         ["luminosity", COMPOP_TAG.LUMINOSITY]]);
   function Val_compop(compop){return compop_to_tag.get(compop);}
   function _color_of_int(i){
    var a = (i & 0xFF000000) >>> 24;
    if(a == 255) return "#" + (i & 0x00FFFFFF).toString(16).padStart(6, "0");
    var
     b = i & 0x000000FF,
     g = (i & 0x0000FF00) >>> 8,
     r = (i & 0x00FF0000) >>> 16;
    return "rgba(" + r + "," + g + "," + b + "," + a / 255.0 + ")";
   }
   function Val_draw_style(style){
    var s = 0;
    switch(style[0]){
      case STYLE_TAG.COLOR:
       s = _color_of_int(style[1]); break;
      case STYLE_TAG.GRADIENT:
      case STYLE_TAG.PATTERN: s = style[1]; break;
      default: break;
    }
    return s;
   }
   var
    focus_to_tag =
      new
       joo_global_object.Map
       ([[FOCUS.OUT, FOCUS_TAG.OUT], [FOCUS.IN, FOCUS_TAG.IN]]);
   function Val_focus_in_out(focus){return focus_to_tag.get(focus);}
   var
    join_type_to_tag =
      new
       joo_global_object.Map
       ([["round", JOIN_TYPE_TAG.ROUND],
         ["miter", JOIN_TYPE_TAG.MITER],
         ["bevel", JOIN_TYPE_TAG.BEVEL]]);
   function Val_join_type(join){return join_type_to_tag.get(join);}
   var
    kc_to_tag =
      new
       joo_global_object.Map
       ([[KEY.ESCAPE, KEY_TAG.ESCAPE],
         [KEY.F1, KEY_TAG.F1],
         [KEY.F2, KEY_TAG.F2],
         [KEY.F3, KEY_TAG.F3],
         [KEY.F4, KEY_TAG.F4],
         [KEY.F5, KEY_TAG.F5],
         [KEY.F6, KEY_TAG.F6],
         [KEY.F7, KEY_TAG.F7],
         [KEY.F8, KEY_TAG.F8],
         [KEY.F9, KEY_TAG.F9],
         [KEY.F10, KEY_TAG.F10],
         [KEY.F11, KEY_TAG.F11],
         [KEY.F12, KEY_TAG.F12],
         [KEY.PRINTSCREEN, KEY_TAG.PRINTSCREEN],
         [KEY.SCROLLLOCK, KEY_TAG.SCROLLLOCK],
         [KEY.PAUSE, KEY_TAG.PAUSE],
         [KEY.GRAVE_TILDE, KEY_TAG.GRAVE_TILDE],
         [KEY._1_EXCLAMATION, KEY_TAG._1_EXCLAMATION],
         [KEY._2_AT, KEY_TAG._2_AT],
         [KEY._3_NUMBER, KEY_TAG._3_NUMBER],
         [KEY._4_DOLLAR, KEY_TAG._4_DOLLAR],
         [KEY._5_PERCENT, KEY_TAG._5_PERCENT],
         [KEY._6_CARET, KEY_TAG._6_CARET],
         [KEY._7_AMPERSAND, KEY_TAG._7_AMPERSAND],
         [KEY._8_ASTERISK, KEY_TAG._8_ASTERISK],
         [KEY._9_LPARENTHESIS, KEY_TAG._9_LPARENTHESIS],
         [KEY._0_RPARENTHESIS, KEY_TAG._0_RPARENTHESIS],
         [KEY.MINUS_UNDERSCORE, KEY_TAG.MINUS_UNDERSCORE],
         [KEY.EQUAL_PLUS, KEY_TAG.EQUAL_PLUS],
         [KEY.BACKSPACE, KEY_TAG.BACKSPACE],
         [KEY.TAB, KEY_TAG.TAB],
         [KEY.Q, KEY_TAG.Q],
         [KEY.W, KEY_TAG.W],
         [KEY.E, KEY_TAG.E],
         [KEY.R, KEY_TAG.R],
         [KEY.T, KEY_TAG.T],
         [KEY.Y, KEY_TAG.Y],
         [KEY.U, KEY_TAG.U],
         [KEY.I, KEY_TAG.I],
         [KEY.O, KEY_TAG.O],
         [KEY.P, KEY_TAG.P],
         [KEY.LBRACKET_CURLY, KEY_TAG.LBRACKET_CURLY],
         [KEY.RBRACKET_CURLY, KEY_TAG.RBRACKET_CURLY],
         [KEY.BACKSLASH_PIPE, KEY_TAG.BACKSLASH_PIPE],
         [KEY.CAPSLOCK, KEY_TAG.CAPSLOCK],
         [KEY.A, KEY_TAG.A],
         [KEY.S, KEY_TAG.S],
         [KEY.D, KEY_TAG.D],
         [KEY.F, KEY_TAG.F],
         [KEY.G, KEY_TAG.G],
         [KEY.H, KEY_TAG.H],
         [KEY.J, KEY_TAG.J],
         [KEY.K, KEY_TAG.K],
         [KEY.L, KEY_TAG.L],
         [KEY.SEMICOLON_COLON, KEY_TAG.SEMICOLON_COLON],
         [KEY.QUOTE_DOUBLEQUOTE, KEY_TAG.QUOTE_DOUBLEQUOTE],
         [KEY.NONUS_NUMBER_TILDE, KEY_TAG.NONUS_NUMBER_TILDE],
         [KEY.RETURN, KEY_TAG.RETURN],
         [KEY.LSHIFT, KEY_TAG.LSHIFT],
         [KEY.NONUS_BACKSLASH_PIPE, KEY_TAG.NONUS_BACKSLASH_PIPE],
         [KEY.Z, KEY_TAG.Z],
         [KEY.X, KEY_TAG.X],
         [KEY.C, KEY_TAG.C],
         [KEY.V, KEY_TAG.V],
         [KEY.B, KEY_TAG.B],
         [KEY.N, KEY_TAG.N],
         [KEY.M, KEY_TAG.M],
         [KEY.COMMA_LESS, KEY_TAG.COMMA_LESS],
         [KEY.PERIOD_GREATER, KEY_TAG.PERIOD_GREATER],
         [KEY.SLASH_QUESTION, KEY_TAG.SLASH_QUESTION],
         [KEY.RSHIFT, KEY_TAG.RSHIFT],
         [KEY.LCONTROL, KEY_TAG.LCONTROL],
         [KEY.LMETA, KEY_TAG.LMETA],
         [KEY.LALT, KEY_TAG.LALT],
         [KEY.SPACEBAR, KEY_TAG.SPACEBAR],
         [KEY.RALT, KEY_TAG.RALT],
         [KEY.RMETA, KEY_TAG.RMETA],
         [KEY.MENU, KEY_TAG.MENU],
         [KEY.RCONTROL, KEY_TAG.RCONTROL],
         [KEY.INSERT, KEY_TAG.INSERT],
         [KEY.HOME, KEY_TAG.HOME],
         [KEY.PAGEUP, KEY_TAG.PAGEUP],
         [KEY.DELETEFORWARD, KEY_TAG.DELETEFORWARD],
         [KEY.END, KEY_TAG.END],
         [KEY.PAGEDOWN, KEY_TAG.PAGEDOWN],
         [KEY.UPARROW, KEY_TAG.UPARROW],
         [KEY.LEFTARROW, KEY_TAG.LEFTARROW],
         [KEY.DOWNARROW, KEY_TAG.DOWNARROW],
         [KEY.RIGHTARROW, KEY_TAG.RIGHTARROW],
         [KEY.PAD_NUMLOCK_CLEAR, KEY_TAG.PAD_NUMLOCK_CLEAR],
         [KEY.PAD_EQUALS, KEY_TAG.PAD_EQUALS],
         [KEY.PAD_DIVIDE, KEY_TAG.PAD_DIVIDE],
         [KEY.PAD_MULTIPLY, KEY_TAG.PAD_MULTIPLY],
         [KEY.PAD_MINUS, KEY_TAG.PAD_MINUS],
         [KEY.PAD_7_HOME, KEY_TAG.PAD_7_HOME],
         [KEY.PAD_8_UPARROW, KEY_TAG.PAD_8_UPARROW],
         [KEY.PAD_9_PAGEUP, KEY_TAG.PAD_9_PAGEUP],
         [KEY.PAD_PLUS, KEY_TAG.PAD_PLUS],
         [KEY.PAD_4_LEFTARROW, KEY_TAG.PAD_4_LEFTARROW],
         [KEY.PAD_5, KEY_TAG.PAD_5],
         [KEY.PAD_6_RIGHTARROW, KEY_TAG.PAD_6_RIGHTARROW],
         [KEY.PAD_COMMA, KEY_TAG.PAD_COMMA],
         [KEY.PAD_1_END, KEY_TAG.PAD_1_END],
         [KEY.PAD_2_DOWNARROW, KEY_TAG.PAD_2_DOWNARROW],
         [KEY.PAD_3_PAGEDOWN, KEY_TAG.PAD_3_PAGEDOWN],
         [KEY.PAD_0_INSERT, KEY_TAG.PAD_0_INSERT],
         [KEY.PAD_DECIMAL_DELETE, KEY_TAG.PAD_DECIMAL_DELETE],
         [KEY.PAD_ENTER, KEY_TAG.PAD_ENTER],
         [KEY.F13, KEY_TAG.F13],
         [KEY.F14, KEY_TAG.F14],
         [KEY.F15, KEY_TAG.F15],
         [KEY.F16, KEY_TAG.F16],
         [KEY.F17, KEY_TAG.F17],
         [KEY.F18, KEY_TAG.F18],
         [KEY.F19, KEY_TAG.F19],
         [KEY.F20, KEY_TAG.F20],
         [KEY.F21, KEY_TAG.F21],
         [KEY.F22, KEY_TAG.F22],
         [KEY.F23, KEY_TAG.F23],
         [KEY.F24, KEY_TAG.F24],
         [KEY.INTERNATIONAL1, KEY_TAG.INTERNATIONAL1],
         [KEY.INTERNATIONAL2, KEY_TAG.INTERNATIONAL2],
         [KEY.INTERNATIONAL3, KEY_TAG.INTERNATIONAL3],
         [KEY.INTERNATIONAL4, KEY_TAG.INTERNATIONAL4],
         [KEY.INTERNATIONAL5, KEY_TAG.INTERNATIONAL5],
         [KEY.INTERNATIONAL6, KEY_TAG.INTERNATIONAL6],
         [KEY.INTERNATIONAL7, KEY_TAG.INTERNATIONAL7],
         [KEY.INTERNATIONAL8, KEY_TAG.INTERNATIONAL8],
         [KEY.INTERNATIONAL9, KEY_TAG.INTERNATIONAL9],
         [KEY.LANG1, KEY_TAG.LANG1],
         [KEY.LANG2, KEY_TAG.LANG2],
         [KEY.LANG3, KEY_TAG.LANG3],
         [KEY.LANG4, KEY_TAG.LANG4],
         [KEY.LANG5, KEY_TAG.LANG5],
         [KEY.HELP, KEY_TAG.HELP],
         [KEY.MUTE, KEY_TAG.MUTE],
         [KEY.VOLUMEUP, KEY_TAG.VOLUMEUP],
         [KEY.VOLUMEDOWN, KEY_TAG.VOLUMEDOWN]]);
   function Val_key_code(keycode){return kc_to_tag.get(keycode);}
   var
    key_state_to_tag =
      new
       joo_global_object.Map
       ([[KEY_STATE.UP, KEY_STATE_TAG.UP],
         [KEY_STATE.DOWN, KEY_STATE_TAG.DOWN]]);
   function Val_key_state(state){return key_state_to_tag.get(state);}
   var
    repeat_to_tag =
      new
       joo_global_object.Map
       ([["no-repeat", REPEAT_TAG.NO_REPEAT],
         ["repeat-x", REPEAT_TAG.REPEAT_X],
         ["repeat-y", REPEAT_TAG.REPEAT_Y],
         ["repeat", REPEAT_TAG.REPEAT_XY]]);
   function Val_repeat(repeat){return repeat_to_tag.get(repeat);}
   function _event_canvas_scale(e){
    return {scaleX: e.target.canvas.width / e.target.clientWidth,
            scaleY: e.target.canvas.height / e.target.clientHeight};
   }
   var _focus = null;
   function caml_int64_of_float(x){
    if(x < 0) x = Math.ceil(x);
    return new
            MlInt64
            (x & 0xffffff,
             Math.floor(x * caml_int64_offset) & 0xffffff,
             Math.floor(x * caml_int64_offset * caml_int64_offset) & 0xffff);
   }
   var
    _ml_canvas_mlProcessEvent = null,
    _ml_canvas_mlException = null,
    _ml_canvas_initialized = false;
   function _ml_canvas_ensure_initialized(){
    if(_ml_canvas_initialized == false)
     caml_raise_constant(caml_named_value("Not_initialized"));
   }
   var _ml_canvas_mlContinuation = null;
   function ml_canvas_stop(){
    _ml_canvas_ensure_initialized();
    _ml_canvas_mlProcessEvent = null;
    if(_ml_canvas_mlException !== null){
     var exn = _ml_canvas_mlException;
     _ml_canvas_mlContinuation = null;
     _ml_canvas_mlException = null;
     throw exn;
    }
    else if(_ml_canvas_mlContinuation !== null)
     try{_ml_canvas_mlContinuation(); _ml_canvas_mlContinuation = null;}
     catch(exn){_ml_canvas_mlContinuation = null; throw exn;}
    return 0;
   }
   function _ml_canvas_process_event(mlEvent){
    if(_ml_canvas_mlProcessEvent === null) return false;
    try{_ml_canvas_mlProcessEvent(mlEvent); return true;}
    catch(exn){_ml_canvas_mlException = exn; ml_canvas_stop(); return false;}
   }
   function _frame_handler(timestamp){
    var surfaces = document.getElementsByTagName("canvas");
    for(var i = 0; i < surfaces.length; ++i){
     var
      evt =
        [EVENT_TAG.FRAME,
         [0, surfaces[i].canvas, caml_int64_of_float(timestamp * 1000.0)]];
     _ml_canvas_process_event(evt);
    }
    window.requestAnimationFrame(_frame_handler);
   }
   var _move = {moving: false, target: null, prev_x: 0, prev_y: 0};
   function ml_canvas_hide(canvas){
    if(canvas.frame !== null){
     if(_focus === canvas) _focus = null;
     canvas.frame.style.visibility = "hidden";
    }
    return 0;
   }
   function ml_canvas_close(canvas){
    if(canvas.frame !== null){
     ml_canvas_hide(canvas);
     canvas.name = null;
     if(canvas.surface != null){
      canvas.surface.canvas = null;
      if(canvas.surface.parentNode !== null)
       canvas.surface.parentNode.removeChild(canvas.surface);
     }
     if(canvas.header != null){
      canvas.header.canvas = null;
      if(canvas.header.parentNode !== null)
       canvas.header.parentNode.removeChild(canvas.header);
      canvas.header = null;
     }
     if(canvas.frame !== null){
      canvas.frame.canvas = null;
      if(canvas.frame.parentNode !== null)
       canvas.frame.parentNode.removeChild(canvas.frame);
      canvas.frame = null;
     }
    }
    return 0;
   }
   function _header_down_handler(e){
    if(e.target !== null){
     _focus = e.target.canvas;
     if
      (e.offsetX >= e.target.canvas.width - 20
       && e.offsetX <= e.target.canvas.width - 10
       && e.offsetY >= 10
       && e.offsetY <= 20){
      var
       evt =
         [EVENT_TAG.CANVAS_CLOSED,
          [0, e.target.canvas, caml_int64_of_float(e.timeStamp * 1000.0)]];
      _ml_canvas_process_event(evt);
      ml_canvas_close(e.target.canvas);
      _focus = null;
      return false;
     }
     _move.moving = true;
     _move.target = e.target.canvas.frame;
     _move.prev_x = e.pageX;
     _move.prev_y = e.pageY;
     e.target.canvas.target.insertBefore(_move.target, null);
    }
    return false;
   }
   function _int_of_color(c){
    if(c[0] == "#")
     return parseInt(c.substr(1, c.length - 1), 16);
    else{
     var
      rgba = c.replace(/^rgba?\(|\s+|\)$/g, "").split(","),
      r = parseInt(rgba[0]),
      g = parseInt(rgba[1]),
      b = parseInt(rgba[2]),
      a = parseFloat(rgba[3]) * 255;
     return b | g << 8 | r << 16 | a << 24;
    }
   }
   var
    _internal_canvas = document.createElement("canvas"),
    _internal_ctxt = _internal_canvas.getContext("2d"),
    kn_to_kc =
      new
       joo_global_object.Map
       ([["", KEY.UNDEFINED],
         ["Unidentified", KEY.UNDEFINED],
         ["Escape", KEY.ESCAPE],
         ["F1", KEY.F1],
         ["F2", KEY.F2],
         ["F3", KEY.F3],
         ["F4", KEY.F4],
         ["F5", KEY.F5],
         ["F6", KEY.F6],
         ["F7", KEY.F7],
         ["F8", KEY.F8],
         ["F9", KEY.F9],
         ["F10", KEY.F10],
         ["F11", KEY.F11],
         ["F12", KEY.F12],
         ["PrintScreen", KEY.PRINTSCREEN],
         ["ScrollLock", KEY.SCROLLLOCK],
         ["Pause", KEY.PAUSE],
         ["Backquote", KEY.GRAVE_TILDE],
         ["Digit1", KEY._1_EXCLAMATION],
         ["Digit2", KEY._2_AT],
         ["Digit3", KEY._3_NUMBER],
         ["Digit4", KEY._4_DOLLAR],
         ["Digit5", KEY._5_PERCENT],
         ["Digit6", KEY._6_CARET],
         ["Digit7", KEY._7_AMPERSAND],
         ["Digit8", KEY._8_ASTERISK],
         ["Digit9", KEY._9_LPARENTHESIS],
         ["Digit0", KEY._0_RPARENTHESIS],
         ["Minus", KEY.MINUS_UNDERSCORE],
         ["Equal", KEY.EQUAL_PLUS],
         ["IntlYen", KEY.INTERNATIONAL3],
         ["Backspace", KEY.BACKSPACE],
         ["Tab", KEY.TAB],
         ["KeyQ", KEY.Q],
         ["KeyW", KEY.W],
         ["KeyE", KEY.E],
         ["KeyR", KEY.R],
         ["KeyT", KEY.T],
         ["KeyY", KEY.Y],
         ["KeyU", KEY.U],
         ["KeyI", KEY.I],
         ["KeyO", KEY.O],
         ["KeyP", KEY.P],
         ["BracketLeft", KEY.LBRACKET_CURLY],
         ["BracketRight", KEY.RBRACKET_CURLY],
         ["Backslash", KEY.BACKSLASH_PIPE],
         ["CapsLock", KEY.CAPSLOCK],
         ["KeyA", KEY.A],
         ["KeyS", KEY.S],
         ["KeyD", KEY.D],
         ["KeyF", KEY.F],
         ["KeyG", KEY.G],
         ["KeyH", KEY.H],
         ["KeyJ", KEY.J],
         ["KeyK", KEY.K],
         ["KeyL", KEY.L],
         ["Semicolon", KEY.SEMICOLON_COLON],
         ["Quote", KEY.QUOTE_DOUBLEQUOTE],
         ["Enter", KEY.RETURN],
         ["ShiftLeft", KEY.LSHIFT],
         ["IntlBackslash", KEY.NONUS_BACKSLASH_PIPE],
         ["KeyZ", KEY.Z],
         ["KeyX", KEY.X],
         ["KeyC", KEY.C],
         ["KeyV", KEY.V],
         ["KeyB", KEY.B],
         ["KeyN", KEY.N],
         ["KeyM", KEY.M],
         ["Comma", KEY.COMMA_LESS],
         ["Period", KEY.PERIOD_GREATER],
         ["Slash", KEY.SLASH_QUESTION],
         ["IntlRo", KEY.INTERNATIONAL1],
         ["ShiftRight", KEY.RSHIFT],
         ["ControlLeft", KEY.LCONTROL],
         ["MetaLeft", KEY.LMETA],
         ["AltLeft", KEY.LALT],
         ["NonConvert", KEY.INTERNATIONAL5],
         ["Lang2", KEY.LANG2],
         ["Space", KEY.SPACEBAR],
         ["Lang1", KEY.LANG1],
         ["Convert", KEY.INTERNATIONAL4],
         ["KanaMode", KEY.INTERNATIONAL2],
         ["AltRight", KEY.RALT],
         ["MetaRight", KEY.RMETA],
         ["ContextMenu", KEY.MENU],
         ["ControlRight", KEY.RCONTROL],
         ["Help", KEY.HELP],
         ["Insert", KEY.INSERT],
         ["Home", KEY.HOME],
         ["PageUp", KEY.PAGEUP],
         ["Delete", KEY.DELETEFORWARD],
         ["End", KEY.END],
         ["PageDown", KEY.PAGEDOWN],
         ["ArrowUp", KEY.UPARROW],
         ["ArrowLeft", KEY.LEFTARROW],
         ["ArrowDown", KEY.DOWNARROW],
         ["ArrowRight", KEY.RIGHTARROW],
         ["NumpadLock", KEY.PAD_NUMLOCK_CLEAR],
         ["NumpadEqual", KEY.PAD_EQUALS],
         ["NumpadDivide", KEY.PAD_DIVIDE],
         ["NumpadMultiply", KEY.PAD_MULTIPLY],
         ["NumpadSubtract", KEY.PAD_MINUS],
         ["Numpad7", KEY.PAD_7_HOME],
         ["Numpad8", KEY.PAD_8_UPARROW],
         ["Numpad9", KEY.PAD_9_PAGEUP],
         ["NumpadAdd", KEY.PAD_PLUS],
         ["Numpad4", KEY.PAD_4_LEFTARROW],
         ["Numpad5", KEY.PAD_5],
         ["Numpad6", KEY.PAD_6_RIGHTARROW],
         ["NumpadComma", KEY.PAD_COMMA],
         ["Numpad1", KEY.PAD_1_END],
         ["Numpad2", KEY.PAD_2_DOWNARROW],
         ["Numpad3", KEY.PAD_3_PAGEDOWN],
         ["Numpad0", KEY.PAD_0_INSERT],
         ["NumpadDecimal", KEY.PAD_DECIMAL_DELETE],
         ["NumpadEnter", KEY.PAD_ENTER],
         ["F13", KEY.F13],
         ["F14", KEY.F14],
         ["F15", KEY.F15],
         ["F16", KEY.F16],
         ["F17", KEY.F17],
         ["F18", KEY.F18],
         ["F19", KEY.F19],
         ["F20", KEY.F20],
         ["F21", KEY.F21],
         ["F22", KEY.F22],
         ["F23", KEY.F23],
         ["F24", KEY.F24],
         ["Lang3", KEY.LANG3],
         ["Lang4", KEY.LANG4],
         ["Lang5", KEY.LANG5],
         ["Katakana", KEY.LANG3],
         ["Hiragana", KEY.LANG4],
         ["AudioVolumeDown", KEY.VOLUMEDOWN],
         ["AudioVolumeUp", KEY.VOLUMEUP],
         ["AudioVolumeMute", KEY.MUTE]]);
   function keyname_to_keycode(keyname){return kn_to_kc.get(keyname);}
   function _make_key_event(e, state){
    var
     char = e.key.length === 1 ? e.key.charCodeAt(0) : 0,
     flags =
       [0,
        e.shiftKey,
        e.altKey,
        e.ctrlKey,
        e.metaKey,
        e.getModifierState("CapsLock"),
        e.getModifierState("NumLock"),
        e.key === "Dead"],
     evt =
       [EVENT_TAG.KEY_ACTION,
        [0,
         _focus,
         caml_int64_of_float(e.timeStamp * 1000.0),
         Val_key_code(keyname_to_keycode(e.code)),
         char,
         flags,
         Val_key_state(state)]];
    return evt;
   }
   function _key_down_handler(e){
    if(_focus !== null){
     var evt = _make_key_event(e, KEY_STATE.DOWN);
     _ml_canvas_process_event(evt);
    }
    return false;
   }
   function _key_up_handler(e){
    if(_focus !== null){
     var evt = _make_key_event(e, KEY_STATE.UP);
     _ml_canvas_process_event(evt);
    }
    return false;
   }
   function _ml_canvas_adjust_blit_info
   (dwidth, dheight, dx, dy, swidth, sheight, sx, sy, width, height){
    if(dx < 0){sx -= dx; width += dx; dx = 0;}
    if(dy < 0){sy -= dy; height += dy; dy = 0;}
    if(sx < 0){dx -= sx; width += sx; sx = 0;}
    if(sy < 0){dy -= sy; height += sy; sy = 0;}
    if(dx + width > dwidth) width = dwidth - dx;
    if(dy + height > dheight) height = dheight - dy;
    if(sx + width > swidth) width = swidth - sx;
    if(sy + height > sheight) height = sheight - sy;
    return [dx, dy, sx, sy, width, height];
   }
   function caml_ba_get_size(dims){
    var n_dims = dims.length, size = 1;
    for(var i = 0; i < n_dims; i++){
     if(dims[i] < 0)
      caml_invalid_argument("Bigarray.create: negative dimension");
     size = size * dims[i];
    }
    return size;
   }
   function caml_ba_get_size_per_element(kind){
    switch(kind){case 7:case 10:case 11: return 2;default: return 1;
    }
   }
   function caml_ba_create_unsafe(kind, layout, dims, data){
    var size_per_element = caml_ba_get_size_per_element(kind);
    if(caml_ba_get_size(dims) * size_per_element != data.length)
     caml_invalid_argument("length doesn't match dims");
    if(layout == 0 && dims.length == 1 && size_per_element == 1)
     return new Ml_Bigarray_c_1_1(kind, layout, dims, data);
    return new Ml_Bigarray(kind, layout, dims, data);
   }
   function _ml_canvas_ba_of_img(img){
    var surface = document.createElement("canvas");
    surface.width = img.width;
    surface.height = img.height;
    var ctxt = surface.getContext("2d");
    ctxt.drawImage(img, 0, 0);
    var
     image = ctxt.getImageData(0, 0, img.width, img.height),
     sta = new window.Uint8Array(image.data.buffer),
     dta = new window.Uint8Array(sta.length);
    for(var i = 0; i < sta.length; i += 4){
     dta[i + 0] = sta[i + 2];
     dta[i + 1] = sta[i + 1];
     dta[i + 2] = sta[i + 0];
     dta[i + 3] = sta[i + 3];
    }
    return caml_ba_create_unsafe(3, 0, [img.height, img.width, 4], dta);
   }
   function caml_jsstring_of_string(s){
    if(jsoo_is_ascii(s)) return s;
    return caml_utf16_of_utf8(s);
   }
   function _ml_canvas_decorate(header, minimize, maximize, close, title){
    var width = header.width, ctxt = header.getContext("2d");
    ctxt.fillStyle = "#585858";
    ctxt.fillRect(0, 0, width, 30);
    if(title !== null){
     ctxt.fillStyle = "#F0F0F0F0";
     ctxt.font = "bold 16px Arial";
     ctxt.textAlign = "center";
     ctxt.fillText(caml_jsstring_of_string(title), width / 2, 21);
    }
    ctxt.strokeStyle = "#F0F0F0F0";
    ctxt.lineWidth = 2.0;
    if(close == true){
     ctxt.beginPath();
     ctxt.moveTo(width - 20, 10);
     ctxt.lineTo(width - 10, 20);
     ctxt.moveTo(width - 20, 20);
     ctxt.lineTo(width - 10, 10);
     ctxt.stroke();
    }
   }
   function fs_node_supported(){
    return typeof globalThis.process !== "undefined"
           && typeof globalThis.process.versions !== "undefined"
           && typeof globalThis.process.versions.node !== "undefined";
   }
   function make_path_is_absolute(){
    function posix(path){
     if(path.charAt(0) === "/") return ["", path.substring(1)];
     return;
    }
    function win32(path){
     var
      splitDeviceRe =
        /^([a-zA-Z]:|[\\/]{2}[^\\/]+[\\/]+[^\\/]+)?([\\/])?([\s\S]*?)$/,
      result = splitDeviceRe.exec(path),
      device = result[1] || "",
      isUnc = Boolean(device && device.charAt(1) !== ":");
     if(Boolean(result[2] || isUnc)){
      var root = result[1] || "", sep = result[2] || "";
      return [root, path.substring(root.length + sep.length)];
     }
     return;
    }
    return fs_node_supported() && globalThis.process
            && globalThis.process.platform
            ? globalThis.process.platform === "win32" ? win32 : posix
            : posix;
   }
   var path_is_absolute = make_path_is_absolute();
   function caml_trailing_slash(name){
    return name.slice(- 1) !== "/" ? name + "/" : name;
   }
   if(fs_node_supported() && globalThis.process && globalThis.process.cwd)
    var caml_current_dir = globalThis.process.cwd().replace(/\\/g, "/");
   else
    var caml_current_dir = "/static";
   caml_current_dir = caml_trailing_slash(caml_current_dir);
   function caml_make_path(name){
    name = caml_jsstring_of_string(name);
    if(! path_is_absolute(name)) name = caml_current_dir + name;
    var
     comp0 = path_is_absolute(name),
     comp = comp0[1].split("/"),
     ncomp = [];
    for(var i = 0; i < comp.length; i++)
     switch(comp[i]){
       case "..":
        if(ncomp.length > 1) ncomp.pop(); break;
       case ".": break;
       case "": break;
       default: ncomp.push(comp[i]); break;
     }
    ncomp.unshift(comp0[0]);
    ncomp.orig = name;
    return ncomp;
   }
   function caml_get_root(path){
    var x = path_is_absolute(path);
    if(! x) return;
    return x[0] + "/";
   }
   function caml_failwith(msg){
    if(! caml_global_data.Failure)
     caml_global_data.Failure = [248, caml_string_of_jsbytes("Failure"), - 3];
    caml_raise_with_string(caml_global_data.Failure, msg);
   }
   var
    caml_root =
      caml_get_root(caml_current_dir)
      || caml_failwith("unable to compute caml_root"),
    jsoo_mount_point = [];
   if(fs_node_supported())
    jsoo_mount_point.push
     ({path: caml_root, device: new MlNodeDevice(caml_root)});
   else
    jsoo_mount_point.push
     ({path: caml_root, device: new MlFakeDevice(caml_root)});
   jsoo_mount_point.push
    ({path: "/static/", device: new MlFakeDevice("/static/")});
   function resolve_fs_device(name){
    var
     path = caml_make_path(name),
     name = path.join("/"),
     name_slash = caml_trailing_slash(name),
     res;
    for(var i = 0; i < jsoo_mount_point.length; i++){
     var m = jsoo_mount_point[i];
     if
      (name_slash.search(m.path) == 0
       && (! res || res.path.length < m.path.length))
      res =
       {path: m.path,
        device: m.device,
        rest: name.substring(m.path.length, name.length)};
    }
    if(! res && fs_node_supported()){
     var root = caml_get_root(name);
     if(root && root.match(/^[a-zA-Z]:\/$/)){
      var m = {path: root, device: new MlNodeDevice(root)};
      jsoo_mount_point.push(m);
      res =
       {path: m.path,
        device: m.device,
        rest: name.substring(m.path.length, name.length)};
     }
    }
    if(res) return res;
    caml_raise_sys_error("no device found for " + name_slash);
   }
   function caml_read_file_content(name){
    var
     name = typeof name == "string" ? caml_string_of_jsbytes(name) : name,
     root = resolve_fs_device(name);
    if(root.device.exists(root.rest)){
     var
      file = root.device.open(root.rest, {rdonly: 1}),
      len = file.length(),
      buf = new Uint8Array(len);
     file.read(0, buf, 0, len);
     return caml_string_of_array(buf);
    }
    caml_raise_no_such_file(caml_jsbytes_of_string(name));
   }
   function _ml_canvas_image_of_png_file(filename){
    var file = caml_read_file_content(filename);
    if(file === null) return null;
    var
     fc = caml_read_file_content(filename),
     data = window.btoa(fc.c === undefined ? fc : fc.c),
     img = new window.Image();
    img.loading = "eager";
    img.decoding = "sync";
    img.src = "data:image/png;base64," + data;
    return [img.decode(), img];
   }
   function caml_ba_dim(ba, i){
    if(i < 0 || i >= ba.dims.length) caml_invalid_argument("Bigarray.dim");
    return ba.dims[i];
   }
   function caml_ba_to_typed_array(ba){return ba.data;}
   function _ml_canvas_surface_of_ba(data){
    var surface = document.createElement("canvas");
    surface.width = caml_ba_dim(data, 1);
    surface.height = caml_ba_dim(data, 0);
    var
     ctxt = surface.getContext("2d"),
     sta = new window.Uint8Array(caml_ba_to_typed_array(data).buffer),
     dta = new window.Uint8ClampedArray(sta.length);
    for(var i = 0; i < sta.length; i += 4){
     dta[i + 0] = sta[i + 2];
     dta[i + 1] = sta[i + 1];
     dta[i + 2] = sta[i + 0];
     dta[i + 3] = sta[i + 3];
    }
    if(window.ImageData === undefined){
     var image = ctxt.createImageData(surface.width, surface.height);
     image.data.set(dta);
    }
    else
     var image = new window.ImageData(dta, surface.width, surface.height);
    ctxt.putImageData(image, 0, 0);
    return surface;
   }
   function _ml_canvas_valid_canvas_size(width, height){
    return 0 < width && width <= 32767 && 0 < height && height <= 32767;
   }
   function _move_handler(e){
    if(_move.moving){
     var
      new_x = e.pageX,
      new_y = e.pageY,
      dx = new_x - _move.prev_x,
      dy = new_y - _move.prev_y;
     _move.prev_x = new_x;
     _move.prev_y = new_y;
     var canvas = _move.target.canvas;
     canvas.x += dx;
     canvas.y += dy;
     _move.target.style.left = canvas.x + "px";
     _move.target.style.top = canvas.y + "px";
    }
    else if(e.target.canvas !== undefined){
     var
      s = _event_canvas_scale(e),
      evt =
        [EVENT_TAG.MOUSE_MOVE,
         [0,
          e.target.canvas,
          caml_int64_of_float(e.timeStamp * 1000.0),
          [0, e.offsetX * s.scaleX, e.offsetY * s.scaleY]]];
     _ml_canvas_process_event(evt);
    }
    return false;
   }
   var _next_id = 0;
   function _resize_handler(entries){
    entries.forEach
     (function(e){
       var
        evt =
          [EVENT_TAG.CANVAS_RESIZED,
           [0,
            e.target.canvas,
            caml_int64_of_float(e.timeStamp * 1000.0),
            [0, e.target.clientWidth, e.target.clientHeight]]];
       _ml_canvas_process_event(evt);
      });
    return false;
   }
   var _resize = new window.ResizeObserver(_resize_handler);
   function _surface_down_handler(e){
    if(e.target !== null){
     _focus = e.target.canvas;
     e.target.canvas.target.insertBefore(e.target.canvas.frame, null);
     var
      s = _event_canvas_scale(e),
      evt =
        [EVENT_TAG.BUTTON_ACTION,
         [0,
          e.target.canvas,
          caml_int64_of_float(e.timeStamp * 1000.0),
          [0, e.offsetX * s.scaleX, e.offsetY * s.scaleY],
          e.button + 1,
          1]];
     _ml_canvas_process_event(evt);
    }
    return false;
   }
   function _up_handler(e){
    _move.moving = false;
    if(e.target.canvas !== undefined){
     var
      s = _event_canvas_scale(e),
      evt =
        [EVENT_TAG.BUTTON_ACTION,
         [0,
          e.target.canvas,
          caml_int64_of_float(e.timeStamp * 1000.0),
          [0, e.offsetX * s.scaleX, e.offsetY * s.scaleY],
          e.button + 1,
          0]];
     _ml_canvas_process_event(evt);
    }
    return false;
   }
   function incr_nat(nat, ofs, len, carry_in){
    var carry = carry_in;
    for(var i = 0; i < len; i++){
     var x = (nat.data[ofs + i] >>> 0) + carry;
     nat.data[ofs + i] = x | 0;
     if(x == x >>> 0){carry = 0; break;} else carry = 1;
    }
    return carry;
   }
   function add_nat(nat1, ofs1, len1, nat2, ofs2, len2, carry_in){
    var carry = carry_in;
    for(var i = 0; i < len2; i++){
     var
      x = (nat1.data[ofs1 + i] >>> 0) + (nat2.data[ofs2 + i] >>> 0) + carry;
     nat1.data[ofs1 + i] = x;
     if(x == x >>> 0) carry = 0; else carry = 1;
    }
    return incr_nat(nat1, ofs1 + len2, len1 - len2, carry);
   }
   function bigstring_of_array_buffer(ab){
    var ta = new Uint8Array(ab);
    return caml_ba_create_unsafe(12, 0, [ta.length], ta);
   }
   function bigstring_of_typed_array(ba){
    var
     ta =
       new
        Uint8Array
        (ba.buffer, ba.byteOffset, ba.length * ba.BYTES_PER_ELEMENT);
    return caml_ba_create_unsafe(12, 0, [ta.length], ta);
   }
   function bigstring_to_array_buffer(bs){return bs.data.buffer;}
   function bigstring_to_typed_array(bs){return bs.data;}
   function blit_nat(nat1, ofs1, nat2, ofs2, len){
    for(var i = 0; i < len; i++) nat1.data[ofs1 + i] = nat2.data[ofs2 + i];
    return 0;
   }
   var
    caml_MD5Transform =
      function(){
        function add(x, y){return x + y | 0;}
        function xx(q, a, b, x, s, t){
         a = add(add(a, q), add(x, t));
         return add(a << s | a >>> 32 - s, b);
        }
        function ff(a, b, c, d, x, s, t){
         return xx(b & c | ~ b & d, a, b, x, s, t);
        }
        function gg(a, b, c, d, x, s, t){
         return xx(b & d | c & ~ d, a, b, x, s, t);
        }
        function hh(a, b, c, d, x, s, t){return xx(b ^ c ^ d, a, b, x, s, t);}
        function ii(a, b, c, d, x, s, t){
         return xx(c ^ (b | ~ d), a, b, x, s, t);
        }
        return function(w, buffer){
         var a = w[0], b = w[1], c = w[2], d = w[3];
         a = ff(a, b, c, d, buffer[0], 7, 0xD76AA478);
         d = ff(d, a, b, c, buffer[1], 12, 0xE8C7B756);
         c = ff(c, d, a, b, buffer[2], 17, 0x242070DB);
         b = ff(b, c, d, a, buffer[3], 22, 0xC1BDCEEE);
         a = ff(a, b, c, d, buffer[4], 7, 0xF57C0FAF);
         d = ff(d, a, b, c, buffer[5], 12, 0x4787C62A);
         c = ff(c, d, a, b, buffer[6], 17, 0xA8304613);
         b = ff(b, c, d, a, buffer[7], 22, 0xFD469501);
         a = ff(a, b, c, d, buffer[8], 7, 0x698098D8);
         d = ff(d, a, b, c, buffer[9], 12, 0x8B44F7AF);
         c = ff(c, d, a, b, buffer[10], 17, 0xFFFF5BB1);
         b = ff(b, c, d, a, buffer[11], 22, 0x895CD7BE);
         a = ff(a, b, c, d, buffer[12], 7, 0x6B901122);
         d = ff(d, a, b, c, buffer[13], 12, 0xFD987193);
         c = ff(c, d, a, b, buffer[14], 17, 0xA679438E);
         b = ff(b, c, d, a, buffer[15], 22, 0x49B40821);
         a = gg(a, b, c, d, buffer[1], 5, 0xF61E2562);
         d = gg(d, a, b, c, buffer[6], 9, 0xC040B340);
         c = gg(c, d, a, b, buffer[11], 14, 0x265E5A51);
         b = gg(b, c, d, a, buffer[0], 20, 0xE9B6C7AA);
         a = gg(a, b, c, d, buffer[5], 5, 0xD62F105D);
         d = gg(d, a, b, c, buffer[10], 9, 0x02441453);
         c = gg(c, d, a, b, buffer[15], 14, 0xD8A1E681);
         b = gg(b, c, d, a, buffer[4], 20, 0xE7D3FBC8);
         a = gg(a, b, c, d, buffer[9], 5, 0x21E1CDE6);
         d = gg(d, a, b, c, buffer[14], 9, 0xC33707D6);
         c = gg(c, d, a, b, buffer[3], 14, 0xF4D50D87);
         b = gg(b, c, d, a, buffer[8], 20, 0x455A14ED);
         a = gg(a, b, c, d, buffer[13], 5, 0xA9E3E905);
         d = gg(d, a, b, c, buffer[2], 9, 0xFCEFA3F8);
         c = gg(c, d, a, b, buffer[7], 14, 0x676F02D9);
         b = gg(b, c, d, a, buffer[12], 20, 0x8D2A4C8A);
         a = hh(a, b, c, d, buffer[5], 4, 0xFFFA3942);
         d = hh(d, a, b, c, buffer[8], 11, 0x8771F681);
         c = hh(c, d, a, b, buffer[11], 16, 0x6D9D6122);
         b = hh(b, c, d, a, buffer[14], 23, 0xFDE5380C);
         a = hh(a, b, c, d, buffer[1], 4, 0xA4BEEA44);
         d = hh(d, a, b, c, buffer[4], 11, 0x4BDECFA9);
         c = hh(c, d, a, b, buffer[7], 16, 0xF6BB4B60);
         b = hh(b, c, d, a, buffer[10], 23, 0xBEBFBC70);
         a = hh(a, b, c, d, buffer[13], 4, 0x289B7EC6);
         d = hh(d, a, b, c, buffer[0], 11, 0xEAA127FA);
         c = hh(c, d, a, b, buffer[3], 16, 0xD4EF3085);
         b = hh(b, c, d, a, buffer[6], 23, 0x04881D05);
         a = hh(a, b, c, d, buffer[9], 4, 0xD9D4D039);
         d = hh(d, a, b, c, buffer[12], 11, 0xE6DB99E5);
         c = hh(c, d, a, b, buffer[15], 16, 0x1FA27CF8);
         b = hh(b, c, d, a, buffer[2], 23, 0xC4AC5665);
         a = ii(a, b, c, d, buffer[0], 6, 0xF4292244);
         d = ii(d, a, b, c, buffer[7], 10, 0x432AFF97);
         c = ii(c, d, a, b, buffer[14], 15, 0xAB9423A7);
         b = ii(b, c, d, a, buffer[5], 21, 0xFC93A039);
         a = ii(a, b, c, d, buffer[12], 6, 0x655B59C3);
         d = ii(d, a, b, c, buffer[3], 10, 0x8F0CCC92);
         c = ii(c, d, a, b, buffer[10], 15, 0xFFEFF47D);
         b = ii(b, c, d, a, buffer[1], 21, 0x85845DD1);
         a = ii(a, b, c, d, buffer[8], 6, 0x6FA87E4F);
         d = ii(d, a, b, c, buffer[15], 10, 0xFE2CE6E0);
         c = ii(c, d, a, b, buffer[6], 15, 0xA3014314);
         b = ii(b, c, d, a, buffer[13], 21, 0x4E0811A1);
         a = ii(a, b, c, d, buffer[4], 6, 0xF7537E82);
         d = ii(d, a, b, c, buffer[11], 10, 0xBD3AF235);
         c = ii(c, d, a, b, buffer[2], 15, 0x2AD7D2BB);
         b = ii(b, c, d, a, buffer[9], 21, 0xEB86D391);
         w[0] = add(a, w[0]);
         w[1] = add(b, w[1]);
         w[2] = add(c, w[2]);
         w[3] = add(d, w[3]);};
       }
       ();
   function caml_MD5Final(ctx){
    var in_buf = ctx.len & 0x3f;
    ctx.b8[in_buf] = 0x80;
    in_buf++;
    if(in_buf > 56){
     for(var j = in_buf; j < 64; j++) ctx.b8[j] = 0;
     caml_MD5Transform(ctx.w, ctx.b32);
     for(var j = 0; j < 56; j++) ctx.b8[j] = 0;
    }
    else
     for(var j = in_buf; j < 56; j++) ctx.b8[j] = 0;
    ctx.b32[14] = ctx.len << 3;
    ctx.b32[15] = ctx.len >> 29 & 0x1FFFFFFF;
    caml_MD5Transform(ctx.w, ctx.b32);
    var t = new Uint8Array(16);
    for(var i = 0; i < 4; i++)
     for(var j = 0; j < 4; j++) t[i * 4 + j] = ctx.w[i] >> 8 * j & 0xFF;
    return t;
   }
   function caml_MD5Init(){
    var
     buffer = new ArrayBuffer(64),
     b32 = new Uint32Array(buffer),
     b8 = new Uint8Array(buffer);
    return {len: 0,
            w:
            new Uint32Array([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476]),
            b32: b32,
            b8: b8};
   }
   function caml_MD5Update(ctx, input, input_len){
    var in_buf = ctx.len & 0x3f, input_pos = 0;
    ctx.len += input_len;
    if(in_buf){
     var missing = 64 - in_buf;
     if(input_len < missing){
      ctx.b8.set(input.subarray(0, input_len), in_buf);
      return;
     }
     ctx.b8.set(input.subarray(0, missing), in_buf);
     caml_MD5Transform(ctx.w, ctx.b32);
     input_len -= missing;
     input_pos += missing;
    }
    while(input_len >= 64){
     ctx.b8.set(input.subarray(input_pos, input_pos + 64), 0);
     caml_MD5Transform(ctx.w, ctx.b32);
     input_len -= 64;
     input_pos += 64;
    }
    if(input_len)
     ctx.b8.set(input.subarray(input_pos, input_pos + input_len), 0);
   }
   function caml_acosh_float(x){return Math.acosh(x);}
   function caml_call_gen(f, args){
    var
     n = f.l >= 0 ? f.l : f.l = f.length,
     argsLen = args.length,
     d = n - argsLen;
    if(d == 0)
     return f.apply(null, args);
    else if(d < 0){
     var g = f.apply(null, args.slice(0, n));
     if(typeof g !== "function") return g;
     return caml_call_gen(g, args.slice(n));
    }
    else{
     switch(d){
       case 1:
        {
         var
          g =
            function(x){
             var nargs = new Array(argsLen + 1);
             for(var i = 0; i < argsLen; i++) nargs[i] = args[i];
             nargs[argsLen] = x;
             return f.apply(null, nargs);
            };
         break;
        }
       case 2:
        {
         var
          g =
            function(x, y){
             var nargs = new Array(argsLen + 2);
             for(var i = 0; i < argsLen; i++) nargs[i] = args[i];
             nargs[argsLen] = x;
             nargs[argsLen + 1] = y;
             return f.apply(null, nargs);
            };
         break;
        }
       default:
        var
         g =
           function(){
            var
             extra_args = arguments.length == 0 ? 1 : arguments.length,
             nargs = new Array(args.length + extra_args);
            for(var i = 0; i < args.length; i++) nargs[i] = args[i];
            for(var i = 0; i < arguments.length; i++)
             nargs[args.length + i] = arguments[i];
            return caml_call_gen(f, nargs);
           };
     }
     g.l = d;
     return g;
    }
   }
   function caml_alloc_dummy_infix(){
    return function f(x){return caml_call_gen(f.fun, [x]);};
   }
   function caml_alloc_stack(hv, hx, hf){return 0;}
   var
    caml_argv =
      function(){
        var process = globalThis.process, main = "a.out", args = [];
        if(process && process.argv && process.argv.length > 1){
         var argv = process.argv;
         main = argv[1];
         args = argv.slice(2);
        }
        var p = caml_string_of_jsstring(main), args2 = [0, p];
        for(var i = 0; i < args.length; i++)
         args2.push(caml_string_of_jsstring(args[i]));
        return args2;
       }
       ();
   function caml_array_append(a1, a2){
    var l1 = a1.length, l2 = a2.length, l = l1 + l2 - 1, a = new Array(l);
    a[0] = 0;
    var i = 1, j = 1;
    for(; i < l1; i++) a[i] = a1[i];
    for(; i < l; i++, j++) a[i] = a2[j];
    return a;
   }
   function caml_array_blit(a1, i1, a2, i2, len){
    if(i2 <= i1)
     for(var j = 1; j <= len; j++) a2[i2 + j] = a1[i1 + j];
    else
     for(var j = len; j >= 1; j--) a2[i2 + j] = a1[i1 + j];
    return 0;
   }
   function caml_array_concat(l){
    var a = [0];
    while(l !== 0){
     var b = l[1];
     for(var i = 1; i < b.length; i++) a.push(b[i]);
     l = l[2];
    }
    return a;
   }
   function caml_array_fill(array, ofs, len, v){
    for(var i = 0; i < len; i++) array[ofs + i + 1] = v;
    return 0;
   }
   function caml_array_get(array, index){
    if(index < 0 || index >= array.length - 1) caml_array_bound_error();
    return array[index + 1];
   }
   function caml_array_of_bytes(x){return caml_uint8_array_of_bytes(x);}
   function caml_array_of_string(x){return caml_uint8_array_of_string(x);}
   function caml_array_set(array, index, newval){
    if(index < 0 || index >= array.length - 1) caml_array_bound_error();
    array[index + 1] = newval;
    return 0;
   }
   function caml_array_sub(a, i, len){
    var a2 = new Array(len + 1);
    a2[0] = 0;
    for(var i2 = 1, i1 = i + 1; i2 <= len; i2++, i1++) a2[i2] = a[i1];
    return a2;
   }
   function caml_asinh_float(x){return Math.asinh(x);}
   function caml_atanh_float(x){return Math.atanh(x);}
   function caml_atomic_cas(ref, o, n){
    if(ref[1] === o){ref[1] = n; return 1;}
    return 0;
   }
   function caml_atomic_exchange(ref, v){
    var r = ref[1];
    ref[1] = v;
    return r;
   }
   function caml_atomic_fetch_add(ref, i){
    var old = ref[1];
    ref[1] += i;
    return old;
   }
   function caml_atomic_load(ref){return ref[1];}
   function caml_atomic_make_contended(a){return [0, a];}
   function caml_ba_blit(src, dst){
    if(dst.dims.length != src.dims.length)
     caml_invalid_argument("Bigarray.blit: dimension mismatch");
    for(var i = 0; i < dst.dims.length; i++)
     if(dst.dims[i] != src.dims[i])
      caml_invalid_argument("Bigarray.blit: dimension mismatch");
    dst.data.set(src.data);
    return 0;
   }
   function caml_ba_change_layout(ba, layout){
    if(ba.layout == layout) return ba;
    var new_dims = [];
    for(var i = 0; i < ba.dims.length; i++)
     new_dims[i] = ba.dims[ba.dims.length - i - 1];
    return caml_ba_create_unsafe(ba.kind, layout, new_dims, ba.data);
   }
   function caml_ba_compare(a, b, total){return a.compare(b, total);}
   function caml_ba_create_buffer(kind, size){
    var view;
    switch(kind){
      case 0:
       view = Float32Array; break;
      case 1:
       view = Float64Array; break;
      case 2:
       view = Int8Array; break;
      case 3:
       view = Uint8Array; break;
      case 4:
       view = Int16Array; break;
      case 5:
       view = Uint16Array; break;
      case 6:
       view = Int32Array; break;
      case 7:
       view = Int32Array; break;
      case 8:
       view = Int32Array; break;
      case 9:
       view = Int32Array; break;
      case 10:
       view = Float32Array; break;
      case 11:
       view = Float64Array; break;
      case 12:
       view = Uint8Array; break;
    }
    if(! view) caml_invalid_argument("Bigarray.create: unsupported kind");
    var data = new view(size * caml_ba_get_size_per_element(kind));
    return data;
   }
   function caml_js_from_array(a){return a.slice(1);}
   function caml_ba_create(kind, layout, dims_ml){
    var
     dims = caml_js_from_array(dims_ml),
     data = caml_ba_create_buffer(kind, caml_ba_get_size(dims));
    return caml_ba_create_unsafe(kind, layout, dims, data);
   }
   function caml_ba_create_from(data1, data2, jstyp, kind, layout, dims){
    if(data2 || caml_ba_get_size_per_element(kind) == 2)
     caml_invalid_argument
      ("caml_ba_create_from: use return caml_ba_create_unsafe");
    return caml_ba_create_unsafe(kind, layout, dims, data1);
   }
   function caml_int32_float_of_bits(x){
    var int32a = new Int32Array(1);
    int32a[0] = x;
    var float32a = new Float32Array(int32a.buffer);
    return float32a[0];
   }
   function caml_int64_of_bytes(a){
    return new
            MlInt64
            (a[7] << 0 | a[6] << 8 | a[5] << 16,
             a[4] << 0 | a[3] << 8 | a[2] << 16,
             a[1] << 0 | a[0] << 8);
   }
   function caml_int64_float_of_bits(x){
    var lo = x.lo, mi = x.mi, hi = x.hi, exp = (hi & 0x7fff) >> 4;
    if(exp == 2047)
     return (lo | mi | hi & 0xf) == 0
             ? hi & 0x8000 ? - Infinity : Infinity
             : NaN;
    var k = Math.pow(2, - 24), res = (lo * k + mi) * k + (hi & 0xf);
    if(exp > 0){
     res += 16;
     res *= Math.pow(2, exp - 1027);
    }
    else
     res *= Math.pow(2, - 1026);
    if(hi & 0x8000) res = - res;
    return res;
   }
   function caml_ba_deserialize(reader, sz, name){
    var num_dims = reader.read32s();
    if(num_dims < 0 || num_dims > 16)
     caml_failwith("input_value: wrong number of bigarray dimensions");
    var
     tag = reader.read32s(),
     kind = tag & 0xff,
     layout = tag >> 8 & 1,
     dims = [];
    if(name == "_bigarr02")
     for(var i = 0; i < num_dims; i++){
      var size_dim = reader.read16u();
      if(size_dim == 0xffff){
       var size_dim_hi = reader.read32u(), size_dim_lo = reader.read32u();
       if(size_dim_hi != 0)
        caml_failwith("input_value: bigarray dimension overflow in 32bit");
       size_dim = size_dim_lo;
      }
      dims.push(size_dim);
     }
    else
     for(var i = 0; i < num_dims; i++) dims.push(reader.read32u());
    var
     size = caml_ba_get_size(dims),
     data = caml_ba_create_buffer(kind, size),
     ba = caml_ba_create_unsafe(kind, layout, dims, data);
    switch(kind){
      case 2:
       for(var i = 0; i < size; i++) data[i] = reader.read8s(); break;
      case 3:
      case 12:
       for(var i = 0; i < size; i++) data[i] = reader.read8u(); break;
      case 4:
       for(var i = 0; i < size; i++) data[i] = reader.read16s(); break;
      case 5:
       for(var i = 0; i < size; i++) data[i] = reader.read16u(); break;
      case 6:
       for(var i = 0; i < size; i++) data[i] = reader.read32s(); break;
      case 8:
      case 9:
       var sixty = reader.read8u();
       if(sixty)
        caml_failwith
         ("input_value: cannot read bigarray with 64-bit OCaml ints");
       for(var i = 0; i < size; i++) data[i] = reader.read32s();
       break;
      case 7:
       var t = new Array(8);
       for(var i = 0; i < size; i++){
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var int64 = caml_int64_of_bytes(t);
        ba.set(i, int64);
       }
       break;
      case 1:
       var t = new Array(8);
       for(var i = 0; i < size; i++){
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var f = caml_int64_float_of_bits(caml_int64_of_bytes(t));
        ba.set(i, f);
       }
       break;
      case 0:
       for(var i = 0; i < size; i++){
        var f = caml_int32_float_of_bits(reader.read32s());
        ba.set(i, f);
       }
       break;
      case 10:
       for(var i = 0; i < size; i++){
        var
         re = caml_int32_float_of_bits(reader.read32s()),
         im = caml_int32_float_of_bits(reader.read32s());
        ba.set(i, [254, re, im]);
       }
       break;
      case 11:
       var t = new Array(8);
       for(var i = 0; i < size; i++){
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var re = caml_int64_float_of_bits(caml_int64_of_bytes(t));
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var im = caml_int64_float_of_bits(caml_int64_of_bytes(t));
        ba.set(i, [254, re, im]);
       }
       break;
    }
    sz[0] = (4 + num_dims) * 4;
    return caml_ba_create_unsafe(kind, layout, dims, data);
   }
   function caml_ba_dim_1(ba){return caml_ba_dim(ba, 0);}
   function caml_ba_dim_2(ba){return caml_ba_dim(ba, 1);}
   function caml_ba_dim_3(ba){return caml_ba_dim(ba, 2);}
   function caml_ba_fill(ba, v){ba.fill(v); return 0;}
   function caml_ba_kind_of_typed_array(ta){
    var kind;
    if(ta instanceof Float32Array)
     kind = 0;
    else if(ta instanceof Float64Array)
     kind = 1;
    else if(ta instanceof Int8Array)
     kind = 2;
    else if(ta instanceof Uint8Array)
     kind = 3;
    else if(ta instanceof Uint8ClampedArray)
     kind = 3;
    else if(ta instanceof Int16Array)
     kind = 4;
    else if(ta instanceof Uint16Array)
     kind = 5;
    else if(ta instanceof Int32Array)
     kind = 6;
    else if(ta instanceof Uint32Array)
     kind = 6;
    else
     caml_invalid_argument("caml_ba_kind_of_typed_array: unsupported kind");
    return kind;
   }
   function caml_ba_from_typed_array(ta){
    var
     kind = caml_ba_kind_of_typed_array(ta),
     ta =
       ta instanceof Uint32Array
        ? new Int32Array(ta.buffer, ta.byteOffset, ta.length)
        : ta;
    return caml_ba_create_unsafe(kind, 0, [ta.length], ta);
   }
   function caml_ba_get_2(ba, i0, i1){return ba.get(ba.offset([i0, i1]));}
   function caml_ba_get_3(ba, i0, i1, i2){
    return ba.get(ba.offset([i0, i1, i2]));
   }
   function caml_ba_get_generic(ba, i){
    var ofs = ba.offset(caml_js_from_array(i));
    return ba.get(ofs);
   }
   function caml_mul(a, b){return Math.imul(a, b);}
   function caml_hash_mix_int(h, d){
    d = caml_mul(d, 0xcc9e2d51 | 0);
    d = d << 15 | d >>> 32 - 15;
    d = caml_mul(d, 0x1b873593);
    h ^= d;
    h = h << 13 | h >>> 32 - 13;
    return (h + (h << 2) | 0) + (0xe6546b64 | 0) | 0;
   }
   var log2_ok = Math.log2 && Math.log2(1.1235582092889474E+307) == 1020;
   function jsoo_floor_log2(x){
    if(log2_ok) return Math.floor(Math.log2(x));
    var i = 0;
    if(x == 0) return - Infinity;
    if(x >= 1) while(x >= 2){x /= 2; i++;} else while(x < 1){x *= 2; i--;}
    return i;
   }
   function caml_int64_create_lo_mi_hi(lo, mi, hi){return new MlInt64(lo, mi, hi);
   }
   function caml_int64_bits_of_float(x){
    if(! isFinite(x)){
     if(isNaN(x)) return caml_int64_create_lo_mi_hi(1, 0, 0x7ff0);
     return x > 0
             ? caml_int64_create_lo_mi_hi(0, 0, 0x7ff0)
             : caml_int64_create_lo_mi_hi(0, 0, 0xfff0);
    }
    var sign = x == 0 && 1 / x == - Infinity ? 0x8000 : x >= 0 ? 0 : 0x8000;
    if(sign) x = - x;
    var exp = jsoo_floor_log2(x) + 1023;
    if(exp <= 0){
     exp = 0;
     x /= Math.pow(2, - 1026);
    }
    else{
     x /= Math.pow(2, exp - 1027);
     if(x < 16){x *= 2; exp -= 1;}
     if(exp == 0) x /= 2;
    }
    var k = Math.pow(2, 24), r3 = x | 0;
    x = (x - r3) * k;
    var r2 = x | 0;
    x = (x - r2) * k;
    var r1 = x | 0;
    r3 = r3 & 0xf | sign | exp << 4;
    return caml_int64_create_lo_mi_hi(r1, r2, r3);
   }
   function caml_hash_mix_int64(h, v){
    h = caml_hash_mix_int(h, caml_int64_lo32(v));
    h = caml_hash_mix_int(h, caml_int64_hi32(v));
    return h;
   }
   function caml_hash_mix_float(h, v0){
    return caml_hash_mix_int64(h, caml_int64_bits_of_float(v0));
   }
   function caml_ba_hash(ba){
    var num_elts = caml_ba_get_size(ba.dims), h = 0;
    switch(ba.kind){
      case 2:
      case 3:
      case 12:
       if(num_elts > 256) num_elts = 256;
       var w = 0, i = 0;
       for(i = 0; i + 4 <= ba.data.length; i += 4){
        w =
         ba.data[i + 0] | ba.data[i + 1] << 8 | ba.data[i + 2] << 16
         | ba.data[i + 3] << 24;
        h = caml_hash_mix_int(h, w);
       }
       w = 0;
       switch(num_elts & 3){
         case 3:
          w = ba.data[i + 2] << 16;
         case 2:
          w |= ba.data[i + 1] << 8;
         case 1:
          w |= ba.data[i + 0]; h = caml_hash_mix_int(h, w);
       }
       break;
      case 4:
      case 5:
       if(num_elts > 128) num_elts = 128;
       var w = 0, i = 0;
       for(i = 0; i + 2 <= ba.data.length; i += 2){
        w = ba.data[i + 0] | ba.data[i + 1] << 16;
        h = caml_hash_mix_int(h, w);
       }
       if((num_elts & 1) != 0) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 6:
       if(num_elts > 64) num_elts = 64;
       for(var i = 0; i < num_elts; i++) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 8:
      case 9:
       if(num_elts > 64) num_elts = 64;
       for(var i = 0; i < num_elts; i++) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 7:
       if(num_elts > 32) num_elts = 32;
       num_elts *= 2;
       for(var i = 0; i < num_elts; i++) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 10:
       num_elts *= 2;
      case 0:
       if(num_elts > 64) num_elts = 64;
       for(var i = 0; i < num_elts; i++)
        h = caml_hash_mix_float(h, ba.data[i]);
       break;
      case 11:
       num_elts *= 2;
      case 1:
       if(num_elts > 32) num_elts = 32;
       for(var i = 0; i < num_elts; i++)
        h = caml_hash_mix_float(h, ba.data[i]);
       break;
    }
    return h;
   }
   function caml_ba_init(){return 0;}
   function caml_ba_kind(ba){return ba.kind;}
   function caml_ba_layout(ba){return ba.layout;}
   function caml_ba_map_file(vfd, kind, layout, shared, dims, pos){caml_failwith("caml_ba_map_file not implemented");
   }
   function caml_ba_map_file_bytecode(argv, argn){
    return caml_ba_map_file
            (argv[0], argv[1], argv[2], argv[3], argv[4], argv[5]);
   }
   function caml_ba_num_dims(ba){return ba.dims.length;}
   function caml_ba_reshape(ba, vind){
    vind = caml_js_from_array(vind);
    var new_dim = [], num_dims = vind.length;
    if(num_dims < 0 || num_dims > 16)
     caml_invalid_argument("Bigarray.reshape: bad number of dimensions");
    var num_elts = 1;
    for(var i = 0; i < num_dims; i++){
     new_dim[i] = vind[i];
     if(new_dim[i] < 0)
      caml_invalid_argument("Bigarray.reshape: negative dimension");
     num_elts = num_elts * new_dim[i];
    }
    var size = caml_ba_get_size(ba.dims);
    if(num_elts != size)
     caml_invalid_argument("Bigarray.reshape: size mismatch");
    return caml_ba_create_unsafe(ba.kind, ba.layout, new_dim, ba.data);
   }
   function caml_int32_bits_of_float(x){
    var float32a = new Float32Array(1);
    float32a[0] = x;
    var int32a = new Int32Array(float32a.buffer);
    return int32a[0] | 0;
   }
   function caml_int64_to_bytes(x){return x.toArray();}
   function caml_ba_serialize(writer, ba, sz){
    writer.write(32, ba.dims.length);
    writer.write(32, ba.kind | ba.layout << 8);
    if(ba.caml_custom == "_bigarr02")
     for(var i = 0; i < ba.dims.length; i++)
      if(ba.dims[i] < 0xffff)
       writer.write(16, ba.dims[i]);
      else{
       writer.write(16, 0xffff);
       writer.write(32, 0);
       writer.write(32, ba.dims[i]);
      }
    else
     for(var i = 0; i < ba.dims.length; i++) writer.write(32, ba.dims[i]);
    switch(ba.kind){
      case 2:
      case 3:
      case 12:
       for(var i = 0; i < ba.data.length; i++) writer.write(8, ba.data[i]);
       break;
      case 4:
      case 5:
       for(var i = 0; i < ba.data.length; i++) writer.write(16, ba.data[i]);
       break;
      case 6:
       for(var i = 0; i < ba.data.length; i++) writer.write(32, ba.data[i]);
       break;
      case 8:
      case 9:
       writer.write(8, 0);
       for(var i = 0; i < ba.data.length; i++) writer.write(32, ba.data[i]);
       break;
      case 7:
       for(var i = 0; i < ba.data.length / 2; i++){
        var b = caml_int64_to_bytes(ba.get(i));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
       }
       break;
      case 1:
       for(var i = 0; i < ba.data.length; i++){
        var b = caml_int64_to_bytes(caml_int64_bits_of_float(ba.get(i)));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
       }
       break;
      case 0:
       for(var i = 0; i < ba.data.length; i++){
        var b = caml_int32_bits_of_float(ba.get(i));
        writer.write(32, b);
       }
       break;
      case 10:
       for(var i = 0; i < ba.data.length / 2; i++){
        var j = ba.get(i);
        writer.write(32, caml_int32_bits_of_float(j[1]));
        writer.write(32, caml_int32_bits_of_float(j[2]));
       }
       break;
      case 11:
       for(var i = 0; i < ba.data.length / 2; i++){
        var
         complex = ba.get(i),
         b = caml_int64_to_bytes(caml_int64_bits_of_float(complex[1]));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
        var b = caml_int64_to_bytes(caml_int64_bits_of_float(complex[2]));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
       }
       break;
    }
    sz[0] = (4 + ba.dims.length) * 4;
    sz[1] = (4 + ba.dims.length) * 8;
   }
   function caml_ba_set_1(ba, i0, v){ba.set(ba.offset(i0), v); return 0;}
   function caml_ba_set_2(ba, i0, i1, v){
    ba.set(ba.offset([i0, i1]), v);
    return 0;
   }
   function caml_ba_set_3(ba, i0, i1, i2, v){
    ba.set(ba.offset([i0, i1, i2]), v);
    return 0;
   }
   function caml_ba_set_generic(ba, i, v){
    ba.set(ba.offset(caml_js_from_array(i)), v);
    return 0;
   }
   function caml_ba_slice(ba, vind){
    vind = caml_js_from_array(vind);
    var num_inds = vind.length, index = [], sub_dims = [], ofs;
    if(num_inds > ba.dims.length)
     caml_invalid_argument("Bigarray.slice: too many indices");
    if(ba.layout == 0){
     for(var i = 0; i < num_inds; i++) index[i] = vind[i];
     for(; i < ba.dims.length; i++) index[i] = 0;
     sub_dims = ba.dims.slice(num_inds);
    }
    else{
     for(var i = 0; i < num_inds; i++)
      index[ba.dims.length - num_inds + i] = vind[i];
     for(var i = 0; i < ba.dims.length - num_inds; i++) index[i] = 1;
     sub_dims = ba.dims.slice(0, ba.dims.length - num_inds);
    }
    ofs = ba.offset(index);
    var
     size = caml_ba_get_size(sub_dims),
     size_per_element = caml_ba_get_size_per_element(ba.kind),
     new_data =
       ba.data.subarray
        (ofs * size_per_element, (ofs + size) * size_per_element);
    return caml_ba_create_unsafe(ba.kind, ba.layout, sub_dims, new_data);
   }
   function caml_ba_sub(ba, ofs, len){
    var changed_dim, mul = 1;
    if(ba.layout == 0){
     for(var i = 1; i < ba.dims.length; i++) mul = mul * ba.dims[i];
     changed_dim = 0;
    }
    else{
     for(var i = 0; i < ba.dims.length - 1; i++) mul = mul * ba.dims[i];
     changed_dim = ba.dims.length - 1;
     ofs = ofs - 1;
    }
    if(ofs < 0 || len < 0 || ofs + len > ba.dims[changed_dim])
     caml_invalid_argument("Bigarray.sub: bad sub-array");
    var new_dims = [];
    for(var i = 0; i < ba.dims.length; i++) new_dims[i] = ba.dims[i];
    new_dims[changed_dim] = len;
    mul *= caml_ba_get_size_per_element(ba.kind);
    var new_data = ba.data.subarray(ofs * mul, (ofs + len) * mul);
    return caml_ba_create_unsafe(ba.kind, ba.layout, new_dims, new_data);
   }
   function caml_ba_uint8_get16(ba, i0){
    var ofs = ba.offset(i0);
    if(ofs + 1 >= ba.data.length) caml_array_bound_error();
    var b1 = ba.get(ofs), b2 = ba.get(ofs + 1);
    return b1 | b2 << 8;
   }
   function caml_ba_uint8_get32(ba, i0){
    var ofs = ba.offset(i0);
    if(ofs + 3 >= ba.data.length) caml_array_bound_error();
    var
     b1 = ba.get(ofs + 0),
     b2 = ba.get(ofs + 1),
     b3 = ba.get(ofs + 2),
     b4 = ba.get(ofs + 3);
    return b1 << 0 | b2 << 8 | b3 << 16 | b4 << 24;
   }
   function caml_ba_uint8_get64(ba, i0){
    var ofs = ba.offset(i0);
    if(ofs + 7 >= ba.data.length) caml_array_bound_error();
    var
     b1 = ba.get(ofs + 0),
     b2 = ba.get(ofs + 1),
     b3 = ba.get(ofs + 2),
     b4 = ba.get(ofs + 3),
     b5 = ba.get(ofs + 4),
     b6 = ba.get(ofs + 5),
     b7 = ba.get(ofs + 6),
     b8 = ba.get(ofs + 7);
    return caml_int64_of_bytes([b8, b7, b6, b5, b4, b3, b2, b1]);
   }
   function caml_ba_uint8_set16(ba, i0, v){
    var ofs = ba.offset(i0);
    if(ofs + 1 >= ba.data.length) caml_array_bound_error();
    ba.set(ofs + 0, v & 0xff);
    ba.set(ofs + 1, v >>> 8 & 0xff);
    return 0;
   }
   function caml_ba_uint8_set32(ba, i0, v){
    var ofs = ba.offset(i0);
    if(ofs + 3 >= ba.data.length) caml_array_bound_error();
    ba.set(ofs + 0, v & 0xff);
    ba.set(ofs + 1, v >>> 8 & 0xff);
    ba.set(ofs + 2, v >>> 16 & 0xff);
    ba.set(ofs + 3, v >>> 24 & 0xff);
    return 0;
   }
   function caml_ba_uint8_set64(ba, i0, v){
    var ofs = ba.offset(i0);
    if(ofs + 7 >= ba.data.length) caml_array_bound_error();
    var v = caml_int64_to_bytes(v);
    for(var i = 0; i < 8; i++) ba.set(ofs + i, v[7 - i]);
    return 0;
   }
   function caml_backtrace_status(_unit){
    return caml_record_backtrace_flag ? 1 : 0;
   }
   function caml_bigstring_blit_ba_to_ba(ba1, pos1, ba2, pos2, len){
    if(12 != ba1.kind)
     caml_invalid_argument("caml_bigstring_blit_ba_to_ba: kind mismatch");
    if(12 != ba2.kind)
     caml_invalid_argument("caml_bigstring_blit_ba_to_ba: kind mismatch");
    if(len == 0) return 0;
    var ofs1 = ba1.offset(pos1), ofs2 = ba2.offset(pos2);
    if(ofs1 + len > ba1.data.length) caml_array_bound_error();
    if(ofs2 + len > ba2.data.length) caml_array_bound_error();
    var slice = ba1.data.subarray(ofs1, ofs1 + len);
    ba2.data.set(slice, pos2);
    return 0;
   }
   function caml_bigstring_blit_ba_to_bytes(ba1, pos1, bytes2, pos2, len){
    if(12 != ba1.kind)
     caml_invalid_argument("caml_bigstring_blit_string_to_ba: kind mismatch");
    if(len == 0) return 0;
    var ofs1 = ba1.offset(pos1);
    if(ofs1 + len > ba1.data.length) caml_array_bound_error();
    if(pos2 + len > caml_ml_bytes_length(bytes2)) caml_array_bound_error();
    var slice = ba1.data.slice(ofs1, ofs1 + len);
    caml_blit_bytes(caml_bytes_of_array(slice), 0, bytes2, pos2, len);
    return 0;
   }
   function caml_bigstring_blit_bytes_to_ba(str1, pos1, ba2, pos2, len){
    if(12 != ba2.kind)
     caml_invalid_argument("caml_bigstring_blit_string_to_ba: kind mismatch");
    if(len == 0) return 0;
    var ofs2 = ba2.offset(pos2);
    if(pos1 + len > caml_ml_bytes_length(str1)) caml_array_bound_error();
    if(ofs2 + len > ba2.data.length) caml_array_bound_error();
    var slice = caml_uint8_array_of_bytes(str1).slice(pos1, pos1 + len);
    ba2.data.set(slice, ofs2);
    return 0;
   }
   function caml_bigstring_blit_string_to_ba(str1, pos1, ba2, pos2, len){
    if(12 != ba2.kind)
     caml_invalid_argument("caml_bigstring_blit_string_to_ba: kind mismatch");
    if(len == 0) return 0;
    var ofs2 = ba2.offset(pos2);
    if(pos1 + len > caml_ml_string_length(str1)) caml_array_bound_error();
    if(ofs2 + len > ba2.data.length) caml_array_bound_error();
    var slice = caml_uint8_array_of_string(str1).slice(pos1, pos1 + len);
    ba2.data.set(slice, ofs2);
    return 0;
   }
   function caml_bigstring_memcmp(s1, pos1, s2, pos2, len){
    for(var i = 0; i < len; i++){
     var a = caml_ba_get_1(s1, pos1 + i), b = caml_ba_get_1(s2, pos2 + i);
     if(a < b) return - 1;
     if(a > b) return 1;
    }
    return 0;
   }
   function caml_blit_string(a, b, c, d, e){
    caml_blit_bytes(caml_bytes_of_string(a), b, c, d, e);
    return 0;
   }
   function caml_bswap16(x){return (x & 0x00FF) << 8 | (x & 0xFF00) >> 8;}
   function caml_build_symbols(symb){
    var r = {};
    if(symb)
     for(var i = 1; i < symb.length; i++)
      r[caml_jsstring_of_string(symb[i][1])] = symb[i][2];
    return r;
   }
   function caml_bytes_compare(s1, s2){
    s1.t & 6 && caml_convert_string_to_bytes(s1);
    s2.t & 6 && caml_convert_string_to_bytes(s2);
    return s1.c < s2.c ? - 1 : s1.c > s2.c ? 1 : 0;
   }
   function caml_bytes_equal(s1, s2){
    if(s1 === s2) return 1;
    s1.t & 6 && caml_convert_string_to_bytes(s1);
    s2.t & 6 && caml_convert_string_to_bytes(s2);
    return s1.c == s2.c ? 1 : 0;
   }
   function caml_bytes_unsafe_get(s, i){
    switch(s.t & 6){
      default: if(i >= s.c.length) return 0;
      case 0:
       return s.c.charCodeAt(i);
      case 4:
       return s.c[i];
    }
   }
   function caml_bytes_get(s, i){
    if(i >>> 0 >= s.l) caml_bytes_bound_error();
    return caml_bytes_unsafe_get(s, i);
   }
   function caml_bytes_get16(s, i){
    if(i >>> 0 >= s.l - 1) caml_bytes_bound_error();
    var
     b1 = caml_bytes_unsafe_get(s, i),
     b2 = caml_bytes_unsafe_get(s, i + 1);
    return b2 << 8 | b1;
   }
   function caml_bytes_get32(s, i){
    if(i >>> 0 >= s.l - 3) caml_bytes_bound_error();
    var
     b1 = caml_bytes_unsafe_get(s, i),
     b2 = caml_bytes_unsafe_get(s, i + 1),
     b3 = caml_bytes_unsafe_get(s, i + 2),
     b4 = caml_bytes_unsafe_get(s, i + 3);
    return b4 << 24 | b3 << 16 | b2 << 8 | b1;
   }
   function caml_bytes_get64(s, i){
    if(i >>> 0 >= s.l - 7) caml_bytes_bound_error();
    var a = new Array(8);
    for(var j = 0; j < 8; j++) a[7 - j] = caml_bytes_unsafe_get(s, i + j);
    return caml_int64_of_bytes(a);
   }
   function caml_bytes_lessequal(s1, s2){
    s1.t & 6 && caml_convert_string_to_bytes(s1);
    s2.t & 6 && caml_convert_string_to_bytes(s2);
    return s1.c <= s2.c ? 1 : 0;
   }
   function caml_bytes_greaterequal(s1, s2){return caml_bytes_lessequal(s2, s1);
   }
   function caml_bytes_lessthan(s1, s2){
    s1.t & 6 && caml_convert_string_to_bytes(s1);
    s2.t & 6 && caml_convert_string_to_bytes(s2);
    return s1.c < s2.c ? 1 : 0;
   }
   function caml_bytes_greaterthan(s1, s2){return caml_bytes_lessthan(s2, s1);
   }
   function caml_bytes_notequal(s1, s2){return 1 - caml_bytes_equal(s1, s2);}
   function caml_bytes_of_utf16_jsstring(s){
    var tag = 9;
    if(! jsoo_is_ascii(s)) tag = 8, s = caml_utf8_of_utf16(s);
    return new MlBytes(tag, s, s.length);
   }
   function caml_bytes_set16(s, i, i16){
    if(i >>> 0 >= s.l - 1) caml_bytes_bound_error();
    var b2 = 0xFF & i16 >> 8, b1 = 0xFF & i16;
    caml_bytes_unsafe_set(s, i + 0, b1);
    caml_bytes_unsafe_set(s, i + 1, b2);
    return 0;
   }
   function caml_bytes_set32(s, i, i32){
    if(i >>> 0 >= s.l - 3) caml_bytes_bound_error();
    var
     b4 = 0xFF & i32 >> 24,
     b3 = 0xFF & i32 >> 16,
     b2 = 0xFF & i32 >> 8,
     b1 = 0xFF & i32;
    caml_bytes_unsafe_set(s, i + 0, b1);
    caml_bytes_unsafe_set(s, i + 1, b2);
    caml_bytes_unsafe_set(s, i + 2, b3);
    caml_bytes_unsafe_set(s, i + 3, b4);
    return 0;
   }
   function caml_bytes_set64(s, i, i64){
    if(i >>> 0 >= s.l - 7) caml_bytes_bound_error();
    var a = caml_int64_to_bytes(i64);
    for(var j = 0; j < 8; j++) caml_bytes_unsafe_set(s, i + 7 - j, a[j]);
    return 0;
   }
   var caml_callback = caml_call_gen;
   function caml_cbrt_float(x){return Math.cbrt(x);}
   var caml_ml_channels = new Array();
   function caml_ml_channel_get(id){return caml_ml_channels[id];}
   function caml_channel_descriptor(chanid){
    var chan = caml_ml_channel_get(chanid);
    return chan.fd;
   }
   function caml_check_bound(array, index){
    if(index >>> 0 >= array.length - 1) caml_array_bound_error();
    return array;
   }
   function caml_classify_float(x){
    if(isFinite(x)){
     if(Math.abs(x) >= 2.2250738585072014e-308) return 0;
     if(x != 0) return 1;
     return 2;
    }
    return isNaN(x) ? 4 : 3;
   }
   function caml_is_continuation_tag(t){return 0;}
   function caml_int32_unmarshal(reader, size){size[0] = 4; return reader.read32s();
   }
   function caml_nativeint_unmarshal(reader, size){
    switch(reader.read8u()){
      case 1:
       size[0] = 4; return reader.read32s();
      case 2:
       caml_failwith("input_value: native integer value too large");
      default: caml_failwith("input_value: ill-formed native integer");
    }
   }
   function caml_int64_unmarshal(reader, size){
    var t = new Array(8);
    for(var j = 0; j < 8; j++) t[j] = reader.read8u();
    size[0] = 8;
    return caml_int64_of_bytes(t);
   }
   function caml_int64_marshal(writer, v, sizes){
    var b = caml_int64_to_bytes(v);
    for(var i = 0; i < 8; i++) writer.write(8, b[i]);
    sizes[0] = 8;
    sizes[1] = 8;
   }
   function caml_int64_compare(x, y, total){return x.compare(y);}
   function caml_int64_hash(v){return v.lo32() ^ v.hi32();}
   var
    caml_custom_ops =
      {"_j":
       {deserialize: caml_int64_unmarshal,
        serialize: caml_int64_marshal,
        fixed_length: 8,
        compare: caml_int64_compare,
        hash: caml_int64_hash},
       "_i": {deserialize: caml_int32_unmarshal, fixed_length: 4},
       "_n": {deserialize: caml_nativeint_unmarshal, fixed_length: 4},
       "_bigarray":
       {deserialize:
        function(reader, sz){
         return caml_ba_deserialize(reader, sz, "_bigarray");
        },
        serialize: caml_ba_serialize,
        compare: caml_ba_compare,
        hash: caml_ba_hash},
       "_bigarr02":
       {deserialize:
        function(reader, sz){
         return caml_ba_deserialize(reader, sz, "_bigarr02");
        },
        serialize: caml_ba_serialize,
        compare: caml_ba_compare,
        hash: caml_ba_hash}};
   function caml_compare_val_get_custom(a){
    return caml_custom_ops[a.caml_custom]
           && caml_custom_ops[a.caml_custom].compare;
   }
   function caml_compare_val_number_custom(num, custom, swap, total){
    var comp = caml_compare_val_get_custom(custom);
    if(comp){
     var x = swap > 0 ? comp(custom, num, total) : comp(num, custom, total);
     if(total && x != x) return swap;
     if(+ x != + x) return + x;
     if((x | 0) != 0) return x | 0;
    }
    return swap;
   }
   function caml_compare_val_tag(a){
    if(typeof a === "number")
     return 1000;
    else if(caml_is_ml_bytes(a))
     return 252;
    else if(caml_is_ml_string(a))
     return 1252;
    else if(a instanceof Array && a[0] === a[0] >>> 0 && a[0] <= 255){var tag = a[0] | 0; return tag == 254 ? 0 : tag;}
    else if(a instanceof String)
     return 12520;
    else if(typeof a == "string")
     return 12520;
    else if(a instanceof Number)
     return 1000;
    else if(a && a.caml_custom)
     return 1255;
    else if(a && a.compare)
     return 1256;
    else if(typeof a == "function")
     return 1247;
    else if(typeof a == "symbol") return 1251;
    return 1001;
   }
   function caml_int_compare(a, b){
    if(a < b) return - 1;
    if(a == b) return 0;
    return 1;
   }
   function caml_string_compare(s1, s2){
    return s1 < s2 ? - 1 : s1 > s2 ? 1 : 0;
   }
   function caml_compare_val(a, b, total){
    var stack = [];
    for(;;){
     if(! (total && a === b)){
      var tag_a = caml_compare_val_tag(a);
      if(tag_a == 250){a = a[1]; continue;}
      var tag_b = caml_compare_val_tag(b);
      if(tag_b == 250){b = b[1]; continue;}
      if(tag_a !== tag_b){
       if(tag_a == 1000){
        if(tag_b == 1255)
         return caml_compare_val_number_custom(a, b, - 1, total);
        return - 1;
       }
       if(tag_b == 1000){
        if(tag_a == 1255)
         return caml_compare_val_number_custom(b, a, 1, total);
        return 1;
       }
       return tag_a < tag_b ? - 1 : 1;
      }
      switch(tag_a){
        case 247:
         caml_invalid_argument("compare: functional value"); break;
        case 248:
         var x = caml_int_compare(a[2], b[2]); if(x != 0) return x | 0; break;
        case 249:
         caml_invalid_argument("compare: functional value"); break;
        case 250:
         caml_invalid_argument("equal: got Forward_tag, should not happen");
         break;
        case 251:
         caml_invalid_argument("equal: abstract value"); break;
        case 252:
         if(a !== b){
          var x = caml_bytes_compare(a, b);
          if(x != 0) return x | 0;
         }
         break;
        case 253:
         caml_invalid_argument("equal: got Double_tag, should not happen");
         break;
        case 254:
         caml_invalid_argument
          ("equal: got Double_array_tag, should not happen");
         break;
        case 255:
         caml_invalid_argument("equal: got Custom_tag, should not happen");
         break;
        case 1247:
         caml_invalid_argument("compare: functional value"); break;
        case 1255:
         var comp = caml_compare_val_get_custom(a);
         if(comp != caml_compare_val_get_custom(b))
          return a.caml_custom < b.caml_custom ? - 1 : 1;
         if(! comp) caml_invalid_argument("compare: abstract value");
         var x = comp(a, b, total);
         if(x != x) return total ? - 1 : x;
         if(x !== (x | 0)) return - 1;
         if(x != 0) return x | 0;
         break;
        case 1256:
         var x = a.compare(b, total);
         if(x != x) return total ? - 1 : x;
         if(x !== (x | 0)) return - 1;
         if(x != 0) return x | 0;
         break;
        case 1000:
         a = + a;
         b = + b;
         if(a < b) return - 1;
         if(a > b) return 1;
         if(a != b){
          if(! total) return NaN;
          if(a == a) return 1;
          if(b == b) return - 1;
         }
         break;
        case 1001:
         if(a < b) return - 1;
         if(a > b) return 1;
         if(a != b){
          if(! total) return NaN;
          if(a == a) return 1;
          if(b == b) return - 1;
         }
         break;
        case 1251:
         if(a !== b){if(! total) return NaN; return 1;} break;
        case 1252:
         var a = caml_jsbytes_of_string(a), b = caml_jsbytes_of_string(b);
         if(a !== b){if(a < b) return - 1; if(a > b) return 1;}
         break;
        case 12520:
         var a = a.toString(), b = b.toString();
         if(a !== b){if(a < b) return - 1; if(a > b) return 1;}
         break;
        case 246:
        case 254:
        default:
         if(caml_is_continuation_tag(tag_a)){
          caml_invalid_argument("compare: continuation value");
          break;
         }
         if(a.length != b.length) return a.length < b.length ? - 1 : 1;
         if(a.length > 1) stack.push(a, b, 1);
         break;
      }
     }
     if(stack.length == 0) return 0;
     var i = stack.pop();
     b = stack.pop();
     a = stack.pop();
     if(i + 1 < a.length) stack.push(a, b, i + 1);
     a = a[i];
     b = b[i];
    }
   }
   function caml_compare(a, b){return caml_compare_val(a, b, true);}
   function caml_continuation_use_noexc(cont){
    var stack = cont[1];
    cont[1] = 0;
    return stack;
   }
   function caml_continuation_use_and_update_handler_noexc
   (cont, hval, hexn, heff){
    var stack = caml_continuation_use_noexc(cont);
    stack[3] = [0, hval, hexn, heff];
    return stack;
   }
   function caml_convert_raw_backtrace(){return [0];}
   function caml_convert_raw_backtrace_slot(){
    caml_failwith("caml_convert_raw_backtrace_slot");
   }
   function caml_copysign_float(x, y){
    if(y == 0) y = 1 / y;
    x = Math.abs(x);
    return y < 0 ? - x : x;
   }
   function caml_cosh_float(x){return Math.cosh(x);}
   function caml_create_file(name, content){
    var root = resolve_fs_device(name);
    if(! root.device.register) caml_failwith("cannot register file");
    root.device.register(root.rest, content);
    return 0;
   }
   function caml_create_string(len){caml_invalid_argument("String.create");}
   var caml_custom_event_index = 0, caml_decompress_input = null;
   function caml_div(x, y){
    if(y == 0) caml_raise_zero_divide();
    return x / y | 0;
   }
   var caml_domain_dls = [0];
   function caml_domain_dls_get(unit){return caml_domain_dls;}
   function caml_domain_dls_set(a){caml_domain_dls = a;}
   var caml_domain_id = 0;
   function caml_ml_mutex_unlock(t){t.locked = false; return 0;}
   var caml_domain_latest_idx = 1;
   function caml_domain_spawn(f, mutex){
    var id = caml_domain_latest_idx++, old = caml_domain_id;
    caml_domain_id = id;
    var res = caml_callback(f, [0]);
    caml_domain_id = old;
    caml_ml_mutex_unlock(mutex);
    return id;
   }
   var caml_ephe_data_offset = 2, caml_ephe_key_offset = 3;
   function caml_ephe_unset_data(x){
    if(globalThis.FinalizationRegistry && globalThis.WeakRef)
     if(x[1] instanceof globalThis.FinalizationRegistry)
      for(var j = caml_ephe_key_offset; j < x.length; j++){
       var key = x[j];
       if(key instanceof globalThis.WeakRef){
        key = key.deref();
        if(key) x[1].unregister(key);
       }
      }
    x[caml_ephe_data_offset] = undefined;
    return 0;
   }
   function caml_ephe_set_data(x, data){
    if(globalThis.FinalizationRegistry && globalThis.WeakRef)
     if(! (x[1] instanceof globalThis.FinalizationRegistry)){
      x[1] =
       new
        globalThis.FinalizationRegistry
        (function(){caml_ephe_unset_data(x);});
      for(var j = caml_ephe_key_offset; j < x.length; j++){
       var key = x[j];
       if(key instanceof globalThis.WeakRef){
        key = key.deref();
        if(key) x[1].register(key, undefined, key);
       }
      }
     }
    x[caml_ephe_data_offset] = data;
    return 0;
   }
   function caml_ephe_blit_data(src, dst){
    var n = src[caml_ephe_data_offset];
    if(n === undefined)
     caml_ephe_unset_data(dst);
    else
     caml_ephe_set_data(dst, n);
    return 0;
   }
   function caml_ephe_blit_key(a1, i1, a2, i2, len){
    caml_array_blit
     (a1,
      caml_ephe_key_offset + i1 - 1,
      a2,
      caml_ephe_key_offset + i2 - 1,
      len);
    return 0;
   }
   function caml_ephe_check_data(x){
    return x[caml_ephe_data_offset] === undefined ? 0 : 1;
   }
   function caml_ephe_check_key(x, i){
    var weak = x[caml_ephe_key_offset + i];
    if(globalThis.WeakRef && weak instanceof globalThis.WeakRef)
     weak = weak.deref();
    return weak === undefined ? 0 : 1;
   }
   function caml_weak_create(n){
    if(n < 0) caml_invalid_argument("Weak.create");
    var x = [251, "caml_ephe_list_head"];
    x.length = caml_ephe_key_offset + n;
    return x;
   }
   function caml_ephe_create(n){var x = caml_weak_create(n); return x;}
   function caml_ephe_get_data(x){
    return x[caml_ephe_data_offset] === undefined
            ? 0
            : [0, x[caml_ephe_data_offset]];
   }
   function caml_obj_dup(x){
    var l = x.length, a = new Array(l);
    for(var i = 0; i < l; i++) a[i] = x[i];
    return a;
   }
   function caml_ephe_get_data_copy(x){
    return x[caml_ephe_data_offset] === undefined
            ? 0
            : [0, caml_obj_dup(x[caml_ephe_data_offset])];
   }
   function caml_ephe_get_key(x, i){
    if(i < 0 || caml_ephe_key_offset + i >= x.length)
     caml_invalid_argument("Weak.get_key");
    var weak = x[caml_ephe_key_offset + i];
    if(globalThis.WeakRef && weak instanceof globalThis.WeakRef)
     weak = weak.deref();
    return weak === undefined ? 0 : [0, weak];
   }
   function caml_ephe_get_key_copy(x, i){
    if(i < 0 || caml_ephe_key_offset + i >= x.length)
     caml_invalid_argument("Weak.get_copy");
    var y = caml_ephe_get_key(x, i);
    if(y === 0) return y;
    var z = y[1];
    if(z instanceof Array) return [0, caml_obj_dup(z)];
    return y;
   }
   function caml_ephe_set_key(x, i, v){
    if(i < 0 || caml_ephe_key_offset + i >= x.length)
     caml_invalid_argument("Weak.set");
    if(v instanceof Object && globalThis.WeakRef){
     if(x[1].register) x[1].register(v, undefined, v);
     x[caml_ephe_key_offset + i] = new globalThis.WeakRef(v);
    }
    else
     x[caml_ephe_key_offset + i] = v;
    return 0;
   }
   function caml_ephe_unset_key(x, i){
    if(i < 0 || caml_ephe_key_offset + i >= x.length)
     caml_invalid_argument("Weak.set");
    if
     (globalThis.WeakRef
      && x[caml_ephe_key_offset + i] instanceof globalThis.WeakRef
      && x[1].unregister){
     var old = x[caml_ephe_key_offset + i].deref();
     if(old !== undefined){
      var count = 0;
      for(var j = caml_ephe_key_offset; j < x.length; j++){
       var key = x[j];
       if(key instanceof globalThis.WeakRef){
        key = key.deref();
        if(key === old) count++;
       }
      }
      if(count == 1) x[1].unregister(old);
     }
    }
    x[caml_ephe_key_offset + i] = undefined;
    return 0;
   }
   function caml_equal(x, y){return + (caml_compare_val(x, y, false) == 0);}
   function caml_erf_float(x){
    var
     a1 = 0.254829592,
     a2 = - 0.284496736,
     a3 = 1.421413741,
     a4 = - 1.453152027,
     a5 = 1.061405429,
     p = 0.3275911,
     sign = 1;
    if(x < 0) sign = - 1;
    x = Math.abs(x);
    var
     t = 1.0 / (1.0 + p * x),
     y =
       1.0
       -
        ((((a5 * t + a4) * t + a3) * t + a2) * t + a1) * t
        * Math.exp(- (x * x));
    return sign * y;
   }
   function caml_erfc_float(x){return 1 - caml_erf_float(x);}
   function caml_eventlog_pause(unit){return 0;}
   function caml_eventlog_resume(unit){return 0;}
   var caml_executable_name = caml_argv[1];
   function caml_exp2_float(x){return Math.pow(2, x);}
   function caml_expm1_float(x){return Math.expm1(x);}
   function caml_is_special_exception(exn){
    switch(exn[2]){case - 8:case - 11:case - 12: return 1;default: return 0;
    }
   }
   function caml_format_exception(exn){
    var r = "";
    if(exn[0] == 0){
     r += exn[1][1];
     if
      (exn.length == 3 && exn[2][0] == 0 && caml_is_special_exception(exn[1]))
      var bucket = exn[2], start = 1;
     else
      var start = 2, bucket = exn;
     r += "(";
     for(var i = start; i < bucket.length; i++){
      if(i > start) r += ", ";
      var v = bucket[i];
      if(typeof v == "number")
       r += v.toString();
      else if(v instanceof MlBytes)
       r += '"' + v.toString() + '"';
      else if(typeof v == "string")
       r += '"' + v.toString() + '"';
      else
       r += "_";
     }
     r += ")";
    }
    else if(exn[0] == 248) r += exn[1];
    return r;
   }
   function caml_fatal_uncaught_exception(err){
    if(err instanceof Array && (err[0] == 0 || err[0] == 248)){
     var handler = caml_named_value("Printexc.handle_uncaught_exception");
     if(handler)
      caml_callback(handler, [err, false]);
     else{
      var
       msg = caml_format_exception(err),
       at_exit = caml_named_value("Pervasives.do_at_exit");
      if(at_exit) caml_callback(at_exit, [0]);
      console.error("Fatal error: exception " + msg);
      if(err.js_error) throw err.js_error;
     }
    }
    else
     throw err;
   }
   function caml_fill_bytes(s, i, l, c){
    if(l > 0)
     if(i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
      if(c == 0){
       s.c = "";
       s.t = 2;
      }
      else{
       s.c = caml_str_repeat(l, String.fromCharCode(c));
       s.t = l == s.l ? 0 : 2;
      }
     else{
      if(s.t != 4) caml_convert_bytes_to_array(s);
      for(l += i; i < l; i++) s.c[i] = c;
     }
    return 0;
   }
   function caml_final_register(){return 0;}
   var all_finalizers = new globalThis.Set();
   function caml_final_register_called_without_value(cb, a){
    if(globalThis.FinalizationRegistry && a instanceof Object){
     var
      x =
        new
         globalThis.FinalizationRegistry
         (function(x){all_finalizers.delete(x); cb(0); return;});
     x.register(a, x);
     all_finalizers.add(x);
    }
    return 0;
   }
   function caml_final_release(){return 0;}
   function caml_finish_formatting(f, rawbuffer){
    if(f.uppercase) rawbuffer = rawbuffer.toUpperCase();
    var len = rawbuffer.length;
    if(f.signedconv && (f.sign < 0 || f.signstyle != "-")) len++;
    if(f.alternate){if(f.base == 8) len += 1; if(f.base == 16) len += 2;}
    var buffer = "";
    if(f.justify == "+" && f.filler == " ")
     for(var i = len; i < f.width; i++) buffer += " ";
    if(f.signedconv)
     if(f.sign < 0)
      buffer += "-";
     else if(f.signstyle != "-") buffer += f.signstyle;
    if(f.alternate && f.base == 8) buffer += "0";
    if(f.alternate && f.base == 16) buffer += f.uppercase ? "0X" : "0x";
    if(f.justify == "+" && f.filler == "0")
     for(var i = len; i < f.width; i++) buffer += "0";
    buffer += rawbuffer;
    if(f.justify == "-") for(var i = len; i < f.width; i++) buffer += " ";
    return caml_string_of_jsbytes(buffer);
   }
   function caml_float_compare(x, y){
    if(x === y) return 0;
    if(x < y) return - 1;
    if(x > y) return 1;
    if(x === x) return 1;
    if(y === y) return - 1;
    return 0;
   }
   function caml_float_of_bytes(a){
    return caml_int64_float_of_bits(caml_int64_of_bytes(a));
   }
   function caml_float_of_string(s){
    var res;
    s = caml_jsbytes_of_string(s);
    res = + s;
    if(s.length > 0 && res === res) return res;
    s = s.replace(/_/g, "");
    res = + s;
    if(s.length > 0 && res === res || /^[+-]?nan$/i.test(s)) return res;
    var m = /^ *([+-]?)0x([0-9a-f]+)\.?([0-9a-f]*)(p([+-]?[0-9]+))?/i.exec(s);
    if(m){
     var
      m3 = m[3].replace(/0+$/, ""),
      mantissa = parseInt(m[1] + m[2] + m3, 16),
      exponent = (m[5] | 0) - 4 * m3.length;
     res = mantissa * Math.pow(2, exponent);
     return res;
    }
    if(/^\+?inf(inity)?$/i.test(s)) return Infinity;
    if(/^-inf(inity)?$/i.test(s)) return - Infinity;
    caml_failwith("float_of_string");
   }
   function caml_floatarray_blit(a1, i1, a2, i2, len){
    if(i2 <= i1)
     for(var j = 1; j <= len; j++) a2[i2 + j] = a1[i1 + j];
    else
     for(var j = len; j >= 1; j--) a2[i2 + j] = a1[i1 + j];
    return 0;
   }
   function caml_floatarray_create(len){
    if(len < 0) caml_array_bound_error();
    var len = len + 1 | 0, b = new Array(len);
    b[0] = 254;
    for(var i = 1; i < len; i++) b[i] = 0;
    return b;
   }
   function caml_fma_float(x, y, z){
    var
     SPLIT = Math.pow(2, 27) + 1,
     MIN_VALUE = Math.pow(2, - 1022),
     EPSILON = Math.pow(2, - 52),
     C = 416,
     A = Math.pow(2, + C),
     B = Math.pow(2, - C);
    function multiply(a, b){
     var
      at = SPLIT * a,
      ahi = at - (at - a),
      alo = a - ahi,
      bt = SPLIT * b,
      bhi = bt - (bt - b),
      blo = b - bhi,
      p = a * b,
      e = ahi * bhi - p + ahi * blo + alo * bhi + alo * blo;
     return {p: p, e: e};
    }
    function add(a, b){
     var s = a + b, v = s - a, e = a - (s - v) + (b - v);
     return {s: s, e: e};
    }
    function adjust(x, y){
     return x !== 0 && y !== 0 && SPLIT * x - (SPLIT * x - x) === x
             ? x * (1 + (x < 0 ? - 1 : + 1) * (y < 0 ? - 1 : + 1) * EPSILON)
             : x;
    }
    if
     (x === 0 || x !== x || x === + (1 / 0) || x === - (1 / 0) || y === 0
      || y !== y
      || y === + (1 / 0)
      || y === - (1 / 0))
     return x * y + z;
    if(z === 0) return x * y;
    if(z !== z || z === + (1 / 0) || z === - (1 / 0)) return z;
    var scale = 1;
    while(Math.abs(x) > A){scale *= A; x *= B;}
    while(Math.abs(y) > A){scale *= A; y *= B;}
    if(scale === 1 / 0) return x * y * scale;
    while(Math.abs(x) < B){scale *= B; x *= A;}
    while(Math.abs(y) < B){scale *= B; y *= A;}
    if(scale === 0) return z;
    var xs = x, ys = y, zs = z / scale;
    if(Math.abs(zs) > Math.abs(xs * ys) * 4 / EPSILON) return z;
    if(Math.abs(zs) < Math.abs(xs * ys) * EPSILON / 4 * EPSILON / 4)
     zs = (z < 0 ? - 1 : + 1) * MIN_VALUE;
    var
     xy = multiply(xs, ys),
     s = add(xy.p, zs),
     u = add(xy.e, s.e),
     i = add(s.s, u.s),
     f = i.s + adjust(i.e, u.e);
    if(f === 0) return f;
    var fs = f * scale;
    if(Math.abs(fs) > MIN_VALUE) return fs;
    return fs + adjust(f - fs / scale, i.e) * scale;
   }
   function caml_parse_format(fmt){
    fmt = caml_jsbytes_of_string(fmt);
    var len = fmt.length;
    if(len > 31) caml_invalid_argument("format_int: format too long");
    var
     f =
       {justify: "+",
        signstyle: "-",
        filler: " ",
        alternate: false,
        base: 0,
        signedconv: false,
        width: 0,
        uppercase: false,
        sign: 1,
        prec: - 1,
        conv: "f"};
    for(var i = 0; i < len; i++){
     var c = fmt.charAt(i);
     switch(c){
       case "-":
        f.justify = "-"; break;
       case "+":
       case " ":
        f.signstyle = c; break;
       case "0":
        f.filler = "0"; break;
       case "#":
        f.alternate = true; break;
       case "1":
       case "2":
       case "3":
       case "4":
       case "5":
       case "6":
       case "7":
       case "8":
       case "9":
        f.width = 0;
        while(c = fmt.charCodeAt(i) - 48, c >= 0 && c <= 9){f.width = f.width * 10 + c; i++;}
        i--;
        break;
       case ".":
        f.prec = 0;
        i++;
        while(c = fmt.charCodeAt(i) - 48, c >= 0 && c <= 9){f.prec = f.prec * 10 + c; i++;}
        i--;
       case "d":
       case "i":
        f.signedconv = true;
       case "u":
        f.base = 10; break;
       case "x":
        f.base = 16; break;
       case "X":
        f.base = 16; f.uppercase = true; break;
       case "o":
        f.base = 8; break;
       case "e":
       case "f":
       case "g":
        f.signedconv = true; f.conv = c; break;
       case "E":
       case "F":
       case "G":
        f.signedconv = true;
        f.uppercase = true;
        f.conv = c.toLowerCase();
        break;
     }
    }
    return f;
   }
   function caml_format_float(fmt, x){
    function toFixed(x, dp){
     if(Math.abs(x) < 1.0)
      return x.toFixed(dp);
     else{
      var e = parseInt(x.toString().split("+")[1]);
      if(e > 20){
       e -= 20;
       x /= Math.pow(10, e);
       x += new Array(e + 1).join("0");
       if(dp > 0) x = x + "." + new Array(dp + 1).join("0");
       return x;
      }
      else
       return x.toFixed(dp);
     }
    }
    var s, f = caml_parse_format(fmt), prec = f.prec < 0 ? 6 : f.prec;
    if(x < 0 || x == 0 && 1 / x == - Infinity){f.sign = - 1; x = - x;}
    if(isNaN(x)){
     s = "nan";
     f.filler = " ";
    }
    else if(! isFinite(x)){
     s = "inf";
     f.filler = " ";
    }
    else
     switch(f.conv){
       case "e":
        var s = x.toExponential(prec), i = s.length;
        if(s.charAt(i - 3) == "e")
         s = s.slice(0, i - 1) + "0" + s.slice(i - 1);
        break;
       case "f":
        s = toFixed(x, prec); break;
       case "g":
        prec = prec ? prec : 1;
        s = x.toExponential(prec - 1);
        var j = s.indexOf("e"), exp = + s.slice(j + 1);
        if(exp < - 4 || x >= 1e21 || x.toFixed(0).length > prec){
         var i = j - 1;
         while(s.charAt(i) == "0") i--;
         if(s.charAt(i) == ".") i--;
         s = s.slice(0, i + 1) + s.slice(j);
         i = s.length;
         if(s.charAt(i - 3) == "e")
          s = s.slice(0, i - 1) + "0" + s.slice(i - 1);
         break;
        }
        else{
         var p = prec;
         if(exp < 0){
          p -= exp + 1;
          s = x.toFixed(p);
         }
         else
          while(s = x.toFixed(p), s.length > prec + 1) p--;
         if(p){
          var i = s.length - 1;
          while(s.charAt(i) == "0") i--;
          if(s.charAt(i) == ".") i--;
          s = s.slice(0, i + 1);
         }
        }
        break;
     }
    return caml_finish_formatting(f, s);
   }
   function caml_format_int(fmt, i){
    if(caml_jsbytes_of_string(fmt) == "%d")
     return caml_string_of_jsbytes("" + i);
    var f = caml_parse_format(fmt);
    if(i < 0) if(f.signedconv){f.sign = - 1; i = - i;} else i >>>= 0;
    var s = i.toString(f.base);
    if(f.prec >= 0){
     f.filler = " ";
     var n = f.prec - s.length;
     if(n > 0) s = caml_str_repeat(n, "0") + s;
    }
    return caml_finish_formatting(f, s);
   }
   var caml_oo_last_id = 0;
   function caml_fresh_oo_id(){return caml_oo_last_id++;}
   function caml_frexp_float(x){
    if(x == 0 || ! isFinite(x)) return [0, x, 0];
    var neg = x < 0;
    if(neg) x = - x;
    var exp = Math.max(- 1023, jsoo_floor_log2(x) + 1);
    x *= Math.pow(2, - exp);
    while(x < 0.5){x *= 2; exp--;}
    while(x >= 1){x *= 0.5; exp++;}
    if(neg) x = - x;
    return [0, x, exp];
   }
   function jsoo_create_file(name, content){
    var
     name = caml_string_of_jsbytes(name),
     content = caml_string_of_jsbytes(content);
    return caml_create_file(name, content);
   }
   function caml_fs_init(){
    var tmp = globalThis.caml_fs_tmp;
    if(tmp)
     for(var i = 0; i < tmp.length; i++)
      jsoo_create_file(tmp[i].name, tmp[i].content);
    globalThis.jsoo_create_file = jsoo_create_file;
    globalThis.caml_fs_tmp = [];
    return 0;
   }
   function caml_gc_compaction(){return 0;}
   function caml_gc_counters(){return [254, 0, 0, 0];}
   function caml_gc_full_major(unit){
    if(typeof globalThis.gc == "function") globalThis.gc();
    return 0;
   }
   function caml_gc_get(){return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];}
   function caml_gc_huge_fallback_count(unit){return 0;}
   function caml_gc_major(unit){
    if(typeof globalThis.gc == "function") globalThis.gc();
    return 0;
   }
   function caml_gc_major_slice(work){return 0;}
   function caml_gc_minor(unit){
    if(typeof globalThis.gc == "function") globalThis.gc(true);
    return 0;
   }
   function caml_gc_minor_words(unit){return 0;}
   function caml_gc_quick_stat(){
    return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
   }
   function caml_gc_set(_control){return 0;}
   function caml_gc_stat(){return caml_gc_quick_stat();}
   function caml_get_continuation_callstack(){return [0];}
   function caml_get_current_callstack(){return [0];}
   function caml_get_exception_backtrace(){return 0;}
   function caml_get_exception_raw_backtrace(){return [0];}
   function caml_get_global_data(){return caml_global_data;}
   function caml_get_major_bucket(n){return 0;}
   function caml_get_major_credit(n){return 0;}
   function caml_get_minor_free(unit){return 0;}
   var caml_method_cache = [];
   function caml_get_public_method(obj, tag, cacheid){
    var meths = obj[1], ofs = caml_method_cache[cacheid];
    if(ofs === undefined)
     for(var i = caml_method_cache.length; i < cacheid; i++)
      caml_method_cache[i] = 0;
    else if(meths[ofs] === tag) return meths[ofs - 1];
    var li = 3, hi = meths[1] * 2 + 1, mi;
    while(li < hi){
     mi = li + hi >> 1 | 1;
     if(tag < meths[mi + 1]) hi = mi - 2; else li = mi;
    }
    caml_method_cache[cacheid] = li + 1;
    return tag == meths[li + 1] ? meths[li] : 0;
   }
   function caml_gr_arc_aux(ctx, cx, cy, ry, rx, a1, a2){
    while(a1 > a2) a2 += 360;
    a1 /= 180;
    a2 /= 180;
    var
     rot = 0,
     xPos,
     yPos,
     xPos_prev,
     yPos_prev,
     space = 2,
     num = (a2 - a1) * Math.PI * ((rx + ry) / 2) / space | 0,
     delta = (a2 - a1) * Math.PI / num,
     i = a1 * Math.PI;
    for(var j = 0; j <= num; j++){
     xPos =
      cx - rx * Math.sin(i) * Math.sin(rot * Math.PI)
      + ry * Math.cos(i) * Math.cos(rot * Math.PI);
     xPos = xPos.toFixed(2);
     yPos =
      cy + ry * Math.cos(i) * Math.sin(rot * Math.PI)
      + rx * Math.sin(i) * Math.cos(rot * Math.PI);
     yPos = yPos.toFixed(2);
     if(j == 0)
      ctx.moveTo(xPos, yPos);
     else if(xPos_prev != xPos || yPos_prev != yPos) ctx.lineTo(xPos, yPos);
     xPos_prev = xPos;
     yPos_prev = yPos;
     i -= delta;
    }
    return 0;
   }
   var caml_gr_state;
   function caml_gr_state_get(){
    if(caml_gr_state) return caml_gr_state;
    throw caml_maybe_attach_backtrace
           ([0,
             caml_named_value("Graphics.Graphic_failure"),
             caml_string_of_jsbytes("Not initialized")]);
   }
   function caml_gr_blit_image(im, x, y){
    var
     s = caml_gr_state_get(),
     im2 =
       s.context.getImageData
        (x, s.height - im.height - y, im.width, im.height);
    for(var i = 0; i < im2.data.length; i += 4){
     im.data[i] = im2.data[i];
     im.data[i + 1] = im2.data[i + 1];
     im.data[i + 2] = im2.data[i + 2];
     im.data[i + 3] = im2.data[i + 3];
    }
    return 0;
   }
   function caml_gr_clear_graph(){
    var s = caml_gr_state_get();
    s.canvas.width = s.width;
    s.canvas.height = s.height;
    return 0;
   }
   function caml_gr_close_graph(){
    var s = caml_gr_state_get();
    s.canvas.width = 0;
    s.canvas.height = 0;
    return 0;
   }
   function caml_gr_close_subwindow(a){
    caml_failwith("caml_gr_close_subwindow not Implemented");
   }
   function caml_gr_create_image(x, y){
    var s = caml_gr_state_get();
    return s.context.createImageData(x, y);
   }
   function caml_gr_current_x(){var s = caml_gr_state_get(); return s.x;}
   function caml_gr_current_y(){var s = caml_gr_state_get(); return s.y;}
   function caml_gr_display_mode(){
    caml_failwith("caml_gr_display_mode not Implemented");
   }
   function caml_gr_doc_of_state(state){
    if(state.canvas.ownerDocument) return state.canvas.ownerDocument;
   }
   function caml_gr_draw_arc(x, y, rx, ry, a1, a2){
    var s = caml_gr_state_get();
    s.context.beginPath();
    caml_gr_arc_aux(s.context, x, s.height - y, rx, ry, a1, a2);
    s.context.stroke();
    return 0;
   }
   function caml_gr_draw_str(str){
    var s = caml_gr_state_get(), m = s.context.measureText(str), dx = m.width;
    s.context.fillText(str, s.x, s.height - s.y);
    s.x += dx | 0;
    return 0;
   }
   function caml_gr_draw_char(c){
    caml_gr_draw_str(String.fromCharCode(c));
    return 0;
   }
   function caml_gr_draw_image(im, x, y){
    var s = caml_gr_state_get();
    if(! im.image){
     var canvas = document.createElement("canvas");
     canvas.width = s.width;
     canvas.height = s.height;
     canvas.getContext("2d").putImageData(im, 0, 0);
     var image = new globalThis.Image();
     image.onload =
      function(){
       s.context.drawImage(image, x, s.height - im.height - y);
       im.image = image;
      };
     image.src = canvas.toDataURL("image/png");
    }
    else
     s.context.drawImage(im.image, x, s.height - im.height - y);
    return 0;
   }
   function caml_gr_draw_rect(x, y, w, h){
    var s = caml_gr_state_get();
    s.context.strokeRect(x, s.height - y, w, - h);
    return 0;
   }
   function caml_gr_draw_string(str){
    caml_gr_draw_str(caml_jsstring_of_string(str));
    return 0;
   }
   function caml_gr_dump_image(im){
    var data = [0];
    for(var i = 0; i < im.height; i++){
     data[i + 1] = [0];
     for(var j = 0; j < im.width; j++){
      var
       o = i * (im.width * 4) + j * 4,
       r = im.data[o + 0],
       g = im.data[o + 1],
       b = im.data[o + 2];
      data[i + 1][j + 1] = (r << 16) + (g << 8) + b;
     }
    }
    return data;
   }
   function caml_gr_fill_arc(x, y, rx, ry, a1, a2){
    var s = caml_gr_state_get();
    s.context.beginPath();
    caml_gr_arc_aux(s.context, x, s.height - y, rx, ry, a1, a2);
    s.context.fill();
    return 0;
   }
   function caml_gr_fill_poly(ar){
    var s = caml_gr_state_get();
    s.context.beginPath();
    s.context.moveTo(ar[1][1], s.height - ar[1][2]);
    for(var i = 2; i < ar.length; i++)
     s.context.lineTo(ar[i][1], s.height - ar[i][2]);
    s.context.lineTo(ar[1][1], s.height - ar[1][2]);
    s.context.fill();
    return 0;
   }
   function caml_gr_fill_rect(x, y, w, h){
    var s = caml_gr_state_get();
    s.context.fillRect(x, s.height - y, w, - h);
    return 0;
   }
   function caml_gr_lineto(x, y){
    var s = caml_gr_state_get();
    s.context.beginPath();
    s.context.moveTo(s.x, s.height - s.y);
    s.context.lineTo(x, s.height - y);
    s.context.stroke();
    s.x = x;
    s.y = y;
    return 0;
   }
   function caml_gr_make_image(arr){
    var
     s = caml_gr_state_get(),
     h = arr.length - 1,
     w = arr[1].length - 1,
     im = s.context.createImageData(w, h);
    for(var i = 0; i < h; i++)
     for(var j = 0; j < w; j++){
      var c = arr[i + 1][j + 1], o = i * (w * 4) + j * 4;
      if(c == - 1){
       im.data[o + 0] = 0;
       im.data[o + 1] = 0;
       im.data[o + 2] = 0;
       im.data[o + 3] = 0;
      }
      else{
       im.data[o + 0] = c >> 16 & 0xff;
       im.data[o + 1] = c >> 8 & 0xff;
       im.data[o + 2] = c >> 0 & 0Xff;
       im.data[o + 3] = 0xff;
      }
     }
    return im;
   }
   function caml_gr_moveto(x, y){
    var s = caml_gr_state_get();
    s.x = x;
    s.y = y;
    return 0;
   }
   function caml_gr_set_window_title(name){
    var s = caml_gr_state_get();
    s.title = name;
    var jsname = caml_jsstring_of_string(name);
    if(s.set_title) s.set_title(jsname);
    return 0;
   }
   function caml_gr_set_line_width(w){
    var s = caml_gr_state_get();
    s.line_width = w;
    s.context.lineWidth = w;
    return 0;
   }
   function caml_gr_set_text_size(size){
    var s = caml_gr_state_get();
    s.text_size = size;
    s.context.font = s.text_size + "px " + caml_jsstring_of_string(s.font);
    return 0;
   }
   function caml_gr_set_font(f){
    var s = caml_gr_state_get();
    s.font = f;
    s.context.font = s.text_size + "px " + caml_jsstring_of_string(s.font);
    return 0;
   }
   function caml_gr_set_color(color){
    var s = caml_gr_state_get();
    function convert(number){
     var str = "" + number.toString(16);
     while(str.length < 2) str = "0" + str;
     return str;
    }
    var r = color >> 16 & 0xff, g = color >> 8 & 0xff, b = color >> 0 & 0xff;
    s.color = color;
    var c_str = "#" + convert(r) + convert(g) + convert(b);
    s.context.fillStyle = c_str;
    s.context.strokeStyle = c_str;
    return 0;
   }
   function caml_gr_resize_window(w, h){
    var s = caml_gr_state_get();
    s.width = w;
    s.height = h;
    s.canvas.width = w;
    s.canvas.height = h;
    return 0;
   }
   function caml_gr_state_init(){
    caml_gr_moveto(caml_gr_state.x, caml_gr_state.y);
    caml_gr_resize_window(caml_gr_state.width, caml_gr_state.height);
    caml_gr_set_line_width(caml_gr_state.line_width);
    caml_gr_set_text_size(caml_gr_state.text_size);
    caml_gr_set_font(caml_gr_state.font);
    caml_gr_set_color(caml_gr_state.color);
    caml_gr_set_window_title(caml_gr_state.title);
    caml_gr_state.context.textBaseline = "bottom";
   }
   function caml_gr_state_set(ctx){
    caml_gr_state = ctx;
    caml_gr_state_init();
    return 0;
   }
   function caml_gr_state_create(canvas, w, h){
    var context = canvas.getContext("2d");
    return {context: context,
            canvas: canvas,
            x: 0,
            y: 0,
            width: w,
            height: h,
            line_width: 1,
            font: caml_string_of_jsbytes("fixed"),
            text_size: 26,
            color: 0x000000,
            title: caml_string_of_jsbytes("")};
   }
   function caml_gr_open_graph(info){
    var info = caml_jsstring_of_string(info);
    function get(name){
     var res = info.match("(^|,) *" + name + " *= *([a-zA-Z0-9_]+) *(,|$)");
     if(res) return res[2];
    }
    var specs = [];
    if(! (info == "")) specs.push(info);
    var target = get("target");
    if(! target) target = "";
    var status = get("status");
    if(! status) specs.push("status=1");
    var w = get("width");
    w = w ? parseInt(w) : 200;
    specs.push("width=" + w);
    var h = get("height");
    h = h ? parseInt(h) : 200;
    specs.push("height=" + h);
    var win = globalThis.open("about:blank", target, specs.join(","));
    if(! win) caml_failwith("Graphics.open_graph: cannot open the window");
    var doc = win.document, canvas = doc.createElement("canvas");
    canvas.width = w;
    canvas.height = h;
    var ctx = caml_gr_state_create(canvas, w, h);
    ctx.set_title = function(title){doc.title = title;};
    caml_gr_state_set(ctx);
    var body = doc.body;
    body.style.margin = "0px";
    body.appendChild(canvas);
    return 0;
   }
   function caml_gr_open_subwindow(a, b, c, d){
    caml_failwith("caml_gr_open_subwindow not Implemented");
   }
   function caml_gr_plot(x, y){
    var
     s = caml_gr_state_get(),
     im = s.context.createImageData(1, 1),
     d = im.data,
     color = s.color;
    d[0] = color >> 16 & 0xff;
    d[1] = color >> 8 & 0xff, d[2] = color >> 0 & 0xff;
    d[3] = 0xFF;
    s.x = x;
    s.y = y;
    s.context.putImageData(im, x, s.height - y);
    return 0;
   }
   function caml_gr_point_color(x, y){
    var
     s = caml_gr_state_get(),
     im = s.context.getImageData(x, s.height - y, 1, 1),
     d = im.data;
    return (d[0] << 16) + (d[1] << 8) + d[2];
   }
   function caml_gr_remember_mode(){
    caml_failwith("caml_gr_remember_mode not Implemented");
   }
   function caml_gr_sigio_handler(){return 0;}
   function caml_gr_sigio_signal(){return 0;}
   function caml_gr_size_x(){var s = caml_gr_state_get(); return s.width;}
   function caml_gr_size_y(){var s = caml_gr_state_get(); return s.height;}
   function caml_gr_synchronize(){
    caml_failwith("caml_gr_synchronize not Implemented");
   }
   function caml_gr_text_size(txt){
    var
     s = caml_gr_state_get(),
     w = s.context.measureText(caml_jsstring_of_string(txt)).width;
    return [0, w, s.text_size];
   }
   function caml_gr_wait_event(_evl){
    caml_failwith
     ("caml_gr_wait_event not Implemented: use Graphics_js instead");
   }
   function caml_gr_window_id(a){
    caml_failwith("caml_gr_window_id not Implemented");
   }
   function caml_greaterequal(x, y){
    return + (caml_compare_val(x, y, false) >= 0);
   }
   function caml_greaterthan(x, y){
    return + (caml_compare_val(x, y, false) > 0);
   }
   function caml_hash_mix_jsbytes(h, s){
    var len = s.length, i, w;
    for(i = 0; i + 4 <= len; i += 4){
     w =
      s.charCodeAt(i) | s.charCodeAt(i + 1) << 8 | s.charCodeAt(i + 2) << 16
      | s.charCodeAt(i + 3) << 24;
     h = caml_hash_mix_int(h, w);
    }
    w = 0;
    switch(len & 3){
      case 3:
       w = s.charCodeAt(i + 2) << 16;
      case 2:
       w |= s.charCodeAt(i + 1) << 8;
      case 1:
       w |= s.charCodeAt(i); h = caml_hash_mix_int(h, w);
    }
    h ^= len;
    return h;
   }
   function caml_hash_mix_string(h, v){
    return caml_hash_mix_jsbytes(h, caml_jsbytes_of_string(v));
   }
   function caml_hash_mix_bytes_arr(h, s){
    var len = s.length, i, w;
    for(i = 0; i + 4 <= len; i += 4){
     w = s[i] | s[i + 1] << 8 | s[i + 2] << 16 | s[i + 3] << 24;
     h = caml_hash_mix_int(h, w);
    }
    w = 0;
    switch(len & 3){
      case 3:
       w = s[i + 2] << 16;
      case 2:
       w |= s[i + 1] << 8;
      case 1:
       w |= s[i]; h = caml_hash_mix_int(h, w);
    }
    h ^= len;
    return h;
   }
   function caml_ml_bytes_content(s){
    switch(s.t & 6){
      default: caml_convert_string_to_bytes(s);
      case 0:
       return s.c;
      case 4:
       return s.c;
    }
   }
   function caml_hash_mix_bytes(h, v){
    var content = caml_ml_bytes_content(v);
    return typeof content === "string"
            ? caml_hash_mix_jsbytes(h, content)
            : caml_hash_mix_bytes_arr(h, content);
   }
   function caml_hash_mix_final(h){
    h ^= h >>> 16;
    h = caml_mul(h, 0x85ebca6b | 0);
    h ^= h >>> 13;
    h = caml_mul(h, 0xc2b2ae35 | 0);
    h ^= h >>> 16;
    return h;
   }
   function caml_hash(count, limit, seed, obj){
    var queue, rd, wr, sz, num, h, v, i, len;
    sz = limit;
    if(sz < 0 || sz > 256) sz = 256;
    num = count;
    h = seed;
    queue = [obj];
    rd = 0;
    wr = 1;
    while(rd < wr && num > 0){
     v = queue[rd++];
     if(v && v.caml_custom){
      if
       (caml_custom_ops[v.caml_custom] && caml_custom_ops[v.caml_custom].hash){
       var hh = caml_custom_ops[v.caml_custom].hash(v);
       h = caml_hash_mix_int(h, hh);
       num--;
      }
     }
     else if(v instanceof Array && v[0] === (v[0] | 0))
      switch(v[0]){
        case 248:
         h = caml_hash_mix_int(h, v[2]); num--; break;
        case 250:
         queue[--rd] = v[1]; break;
        default:
         if(caml_is_continuation_tag(v[0])) break;
         var tag = v.length - 1 << 10 | v[0];
         h = caml_hash_mix_int(h, tag);
         for(i = 1, len = v.length; i < len; i++){if(wr >= sz) break; queue[wr++] = v[i];
         }
         break;
      }
     else if(caml_is_ml_bytes(v)){
      h = caml_hash_mix_bytes(h, v);
      num--;
     }
     else if(caml_is_ml_string(v)){
      h = caml_hash_mix_string(h, v);
      num--;
     }
     else if(typeof v === "string"){
      h = caml_hash_mix_jsbytes(h, v);
      num--;
     }
     else if(v === (v | 0)){
      h = caml_hash_mix_int(h, v + v + 1);
      num--;
     }
     else if(typeof v === "number"){h = caml_hash_mix_float(h, v); num--;}
    }
    h = caml_hash_mix_final(h);
    return h & 0x3FFFFFFF;
   }
   function caml_hash_mix_bigstring(h, bs){
    return caml_hash_mix_bytes_arr(h, bs.data);
   }
   function num_digits_nat(nat, ofs, len){
    for(var i = len - 1; i >= 0; i--) if(nat.data[ofs + i] != 0) return i + 1;
    return 1;
   }
   function caml_hash_nat(x){
    var len = num_digits_nat(x, 0, x.data.length), h = 0;
    for(var i = 0; i < len; i++) h = caml_hash_mix_int(h, x.data[i]);
    return h;
   }
   function caml_hexstring_of_float(x, prec, style){
    if(! isFinite(x)){
     if(isNaN(x)) return caml_string_of_jsstring("nan");
     return caml_string_of_jsstring(x > 0 ? "infinity" : "-infinity");
    }
    var sign = x == 0 && 1 / x == - Infinity ? 1 : x >= 0 ? 0 : 1;
    if(sign) x = - x;
    var exp = 0;
    if(x == 0)
     ;
    else if(x < 1)
     while(x < 1 && exp > - 1022){x *= 2; exp--;}
    else
     while(x >= 2){x /= 2; exp++;}
    var exp_sign = exp < 0 ? "" : "+", sign_str = "";
    if(sign)
     sign_str = "-";
    else
     switch(style){
       case 43:
        sign_str = "+"; break;
       case 32:
        sign_str = " "; break;
       default: break;
     }
    if(prec >= 0 && prec < 13){
     var cst = Math.pow(2, prec * 4);
     x = Math.round(x * cst) / cst;
    }
    var x_str = x.toString(16);
    if(prec >= 0){
     var idx = x_str.indexOf(".");
     if(idx < 0)
      x_str += "." + caml_str_repeat(prec, "0");
     else{
      var size = idx + 1 + prec;
      if(x_str.length < size)
       x_str += caml_str_repeat(size - x_str.length, "0");
      else
       x_str = x_str.substr(0, size);
     }
    }
    return caml_string_of_jsstring
            (sign_str + "0x" + x_str + "p" + exp_sign + exp.toString(10));
   }
   function caml_hypot_float(x, y){return Math.hypot(x, y);}
   var caml_marshal_header_size = 20;
   function caml_refill(chan){
    if(chan.refill != null){
     var str = chan.refill(), str_a = caml_uint8_array_of_string(str);
     if(str_a.length == 0)
      chan.refill = null;
     else{
      if(chan.buffer.length < chan.buffer_max + str_a.length){
       var b = new Uint8Array(chan.buffer_max + str_a.length);
       b.set(chan.buffer);
       chan.buffer = b;
      }
      chan.buffer.set(str_a, chan.buffer_max);
      chan.offset += str_a.length;
      chan.buffer_max += str_a.length;
     }
    }
    else{
     var
      nread =
        chan.file.read
         (chan.offset,
          chan.buffer,
          chan.buffer_max,
          chan.buffer.length - chan.buffer_max);
     chan.offset += nread;
     chan.buffer_max += nread;
    }
   }
   function caml_raise_end_of_file(){
    caml_raise_constant(caml_global_data.End_of_file);
   }
   function caml_marshal_data_size(s, ofs){
    var r = new UInt8ArrayReader(caml_uint8_array_of_bytes(s), ofs);
    function readvlq(overflow){
     var c = r.read8u(), n = c & 0x7F;
     while((c & 0x80) != 0){
      c = r.read8u();
      var n7 = n << 7;
      if(n != n7 >> 7) overflow[0] = true;
      n = n7 | c & 0x7F;
     }
     return n;
    }
    switch(r.read32u()){
      case 0x8495A6BE:
       var header_len = 20, data_len = r.read32u(); break;
      case 0x8495A6BD:
       var
        header_len = r.read8u() & 0x3F,
        overflow = [false],
        data_len = readvlq(overflow);
       if(overflow[0])
        caml_failwith
         ("Marshal.data_size: object too large to be read back on this platform");
       break;
      case 0x8495A6BF:
      default: caml_failwith("Marshal.data_size: bad object"); break;
    }
    return header_len - caml_marshal_header_size + data_len;
   }
   function caml_input_value_from_reader(reader, ofs){
    function readvlq(overflow){
     var c = reader.read8u(), n = c & 0x7F;
     while((c & 0x80) != 0){
      c = reader.read8u();
      var n7 = n << 7;
      if(n != n7 >> 7) overflow[0] = true;
      n = n7 | c & 0x7F;
     }
     return n;
    }
    var magic = reader.read32u();
    switch(magic){
      case 0x8495A6BE:
       var
        header_len = 20,
        compressed = 0,
        data_len = reader.read32u(),
        uncompressed_data_len = data_len,
        num_objects = reader.read32u(),
        _size_32 = reader.read32u(),
        _size_64 = reader.read32u();
       break;
      case 0x8495A6BD:
       var
        header_len = reader.read8u() & 0x3F,
        compressed = 1,
        overflow = [false],
        data_len = readvlq(overflow),
        uncompressed_data_len = readvlq(overflow),
        num_objects = readvlq(overflow),
        _size_32 = readvlq(overflow),
        _size_64 = readvlq(overflow);
       if(overflow[0])
        caml_failwith
         ("caml_input_value_from_reader: object too large to be read back on this platform");
       break;
      case 0x8495A6BF:
       caml_failwith
        ("caml_input_value_from_reader: object too large to be read back on a 32-bit platform");
       break;
      default:
       caml_failwith("caml_input_value_from_reader: bad object"); break;
    }
    var
     stack = [],
     intern_obj_table = num_objects > 0 ? [] : null,
     obj_counter = 0;
    function intern_rec(reader){
     var code = reader.read8u();
     if(code >= 0x40)
      if(code >= 0x80){
       var tag = code & 0xF, size = code >> 4 & 0x7, v = [tag];
       if(size == 0) return v;
       if(intern_obj_table) intern_obj_table[obj_counter++] = v;
       stack.push(v, size);
       return v;
      }
      else
       return code & 0x3F;
     else if(code >= 0x20){
      var len = code & 0x1F, v = reader.readstr(len);
      if(intern_obj_table) intern_obj_table[obj_counter++] = v;
      return v;
     }
     else
      switch(code){
        case 0x00:
         return reader.read8s();
        case 0x01:
         return reader.read16s();
        case 0x02:
         return reader.read32s();
        case 0x03:
         caml_failwith("input_value: integer too large"); break;
        case 0x04:
         var offset = reader.read8u();
         if(compressed == 0) offset = obj_counter - offset;
         return intern_obj_table[offset];
        case 0x05:
         var offset = reader.read16u();
         if(compressed == 0) offset = obj_counter - offset;
         return intern_obj_table[offset];
        case 0x06:
         var offset = reader.read32u();
         if(compressed == 0) offset = obj_counter - offset;
         return intern_obj_table[offset];
        case 0x08:
         var
          header = reader.read32u(),
          tag = header & 0xFF,
          size = header >> 10,
          v = [tag];
         if(size == 0) return v;
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         stack.push(v, size);
         return v;
        case 0x13:
         caml_failwith("input_value: data block too large"); break;
        case 0x09:
         var len = reader.read8u(), v = reader.readstr(len);
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         return v;
        case 0x0A:
         var len = reader.read32u(), v = reader.readstr(len);
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         return v;
        case 0x0C:
         var t = new Array(8);
         for(var i = 0; i < 8; i++) t[7 - i] = reader.read8u();
         var v = caml_float_of_bytes(t);
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         return v;
        case 0x0B:
         var t = new Array(8);
         for(var i = 0; i < 8; i++) t[i] = reader.read8u();
         var v = caml_float_of_bytes(t);
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         return v;
        case 0x0E:
         var len = reader.read8u(), v = new Array(len + 1);
         v[0] = 254;
         var t = new Array(8);
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         for(var i = 1; i <= len; i++){
          for(var j = 0; j < 8; j++) t[7 - j] = reader.read8u();
          v[i] = caml_float_of_bytes(t);
         }
         return v;
        case 0x0D:
         var len = reader.read8u(), v = new Array(len + 1);
         v[0] = 254;
         var t = new Array(8);
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         for(var i = 1; i <= len; i++){
          for(var j = 0; j < 8; j++) t[j] = reader.read8u();
          v[i] = caml_float_of_bytes(t);
         }
         return v;
        case 0x07:
         var len = reader.read32u(), v = new Array(len + 1);
         v[0] = 254;
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         var t = new Array(8);
         for(var i = 1; i <= len; i++){
          for(var j = 0; j < 8; j++) t[7 - j] = reader.read8u();
          v[i] = caml_float_of_bytes(t);
         }
         return v;
        case 0x0F:
         var len = reader.read32u(), v = new Array(len + 1);
         v[0] = 254;
         var t = new Array(8);
         for(var i = 1; i <= len; i++){
          for(var j = 0; j < 8; j++) t[j] = reader.read8u();
          v[i] = caml_float_of_bytes(t);
         }
         return v;
        case 0x10:
        case 0x11:
         caml_failwith("input_value: code pointer"); break;
        case 0x12:
        case 0x18:
        case 0x19:
         var c, s = "";
         while((c = reader.read8u()) != 0) s += String.fromCharCode(c);
         var ops = caml_custom_ops[s], expected_size;
         if(! ops)
          caml_failwith("input_value: unknown custom block identifier");
         switch(code){
           case 0x12: break;
           case 0x19:
            if(! ops.fixed_length)
             caml_failwith("input_value: expected a fixed-size custom block");
            expected_size = ops.fixed_length;
            break;
           case 0x18:
            expected_size = reader.read32u();
            reader.read32s();
            reader.read32s();
            break;
         }
         var
          old_pos = reader.i,
          size = [0],
          v = ops.deserialize(reader, size);
         if(expected_size != undefined)
          if(expected_size != size[0])
           caml_failwith
            ("input_value: incorrect length of serialized custom block");
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         return v;
        default: caml_failwith("input_value: ill-formed message");
      }
    }
    if(compressed)
     if(caml_decompress_input)
      var
       data = reader.readuint8array(data_len),
       res = new Uint8Array(uncompressed_data_len),
       res = caml_decompress_input(data, res),
       reader = new UInt8ArrayReader(res, 0);
     else
      caml_failwith("input_value: compressed object, cannot decompress");
    var res = intern_rec(reader);
    while(stack.length > 0){
     var size = stack.pop(), v = stack.pop(), d = v.length;
     if(d < size) stack.push(v, size);
     v[d] = intern_rec(reader);
    }
    if(typeof ofs != "number") ofs[0] = reader.i;
    return res;
   }
   function caml_string_of_bytes(s){
    s.t & 6 && caml_convert_string_to_bytes(s);
    return caml_string_of_jsbytes(s.c);
   }
   function caml_input_value_from_bytes(s, ofs){
    var
     reader =
       new
        MlStringReader
        (caml_string_of_bytes(s), typeof ofs == "number" ? ofs : ofs[0]);
    return caml_input_value_from_reader(reader, ofs);
   }
   function caml_input_value(chanid){
    var
     chan = caml_ml_channel_get(chanid),
     header = new Uint8Array(caml_marshal_header_size);
    function block(buffer, offset, n){
     var r = 0;
     while(r < n){
      if(chan.buffer_curr >= chan.buffer_max){
       chan.buffer_curr = 0;
       chan.buffer_max = 0;
       caml_refill(chan);
      }
      if(chan.buffer_curr >= chan.buffer_max) break;
      buffer[offset + r] = chan.buffer[chan.buffer_curr];
      chan.buffer_curr++;
      r++;
     }
     return r;
    }
    var r = block(header, 0, caml_marshal_header_size);
    if(r == 0)
     caml_raise_end_of_file();
    else if(r < caml_marshal_header_size)
     caml_failwith("input_value: truncated object");
    var
     len = caml_marshal_data_size(caml_bytes_of_array(header), 0),
     buf = new Uint8Array(len + caml_marshal_header_size);
    buf.set(header, 0);
    var r = block(buf, caml_marshal_header_size, len);
    if(r < len)
     caml_failwith("input_value: truncated object " + r + "  " + len);
    var
     offset = [0],
     res = caml_input_value_from_bytes(caml_bytes_of_array(buf), offset);
    chan.offset = chan.offset + offset[0];
    return res;
   }
   function caml_input_value_from_string(s, ofs){
    var reader = new MlStringReader(s, typeof ofs == "number" ? ofs : ofs[0]);
    return caml_input_value_from_reader(reader, ofs);
   }
   function caml_input_value_to_outside_heap(c){return caml_input_value(c);}
   function caml_install_signal_handler(){return 0;}
   function caml_int32_bswap(x){
    return (x & 0x000000FF) << 24 | (x & 0x0000FF00) << 8
           | (x & 0x00FF0000) >>> 8
           | (x & 0xFF000000) >>> 24;
   }
   function caml_int64_add(x, y){return x.add(y);}
   function caml_int64_and(x, y){return x.and(y);}
   function caml_int64_bswap(x){
    var y = caml_int64_to_bytes(x);
    return caml_int64_of_bytes
            ([y[7], y[6], y[5], y[4], y[3], y[2], y[1], y[0]]);
   }
   function caml_int64_div(x, y){return x.div(y);}
   function caml_int64_is_zero(x){return + x.isZero();}
   function caml_int64_of_int32(x){
    return new MlInt64(x & 0xffffff, x >> 24 & 0xffffff, x >> 31 & 0xffff);
   }
   function caml_int64_to_int32(x){return x.toInt();}
   function caml_int64_is_negative(x){return + x.isNeg();}
   function caml_int64_neg(x){return x.neg();}
   function caml_int64_format(fmt, x){
    var f = caml_parse_format(fmt);
    if(f.signedconv && caml_int64_is_negative(x)){f.sign = - 1; x = caml_int64_neg(x);}
    var
     buffer = "",
     wbase = caml_int64_of_int32(f.base),
     cvtbl = "0123456789abcdef";
    do{
     var p = x.udivmod(wbase);
     x = p.quotient;
     buffer = cvtbl.charAt(caml_int64_to_int32(p.modulus)) + buffer;
    }
    while
     (! caml_int64_is_zero(x));
    if(f.prec >= 0){
     f.filler = " ";
     var n = f.prec - buffer.length;
     if(n > 0) buffer = caml_str_repeat(n, "0") + buffer;
    }
    return caml_finish_formatting(f, buffer);
   }
   function caml_int64_mod(x, y){return x.mod(y);}
   function caml_int64_mul(x, y){return x.mul(y);}
   function caml_int64_ult(x, y){return x.ucompare(y) < 0;}
   function caml_parse_sign_and_base(s){
    var i = 0, len = caml_ml_string_length(s), base = 10, sign = 1;
    if(len > 0)
     switch(caml_string_unsafe_get(s, i)){
       case 45:
        i++; sign = - 1; break;
       case 43:
        i++; sign = 1; break;
     }
    if(i + 1 < len && caml_string_unsafe_get(s, i) == 48)
     switch(caml_string_unsafe_get(s, i + 1)){
       case 120:
       case 88:
        base = 16; i += 2; break;
       case 111:
       case 79:
        base = 8; i += 2; break;
       case 98:
       case 66:
        base = 2; i += 2; break;
       case 117:
       case 85:
        i += 2; break;
     }
    return [i, sign, base];
   }
   function caml_parse_digit(c){
    if(c >= 48 && c <= 57) return c - 48;
    if(c >= 65 && c <= 90) return c - 55;
    if(c >= 97 && c <= 122) return c - 87;
    return - 1;
   }
   function caml_int64_of_string(s){
    var
     r = caml_parse_sign_and_base(s),
     i = r[0],
     sign = r[1],
     base = r[2],
     base64 = caml_int64_of_int32(base),
     threshold =
       new MlInt64(0xffffff, 0xfffffff, 0xffff).udivmod(base64).quotient,
     c = caml_string_unsafe_get(s, i),
     d = caml_parse_digit(c);
    if(d < 0 || d >= base) caml_failwith("int_of_string");
    var res = caml_int64_of_int32(d);
    for(;;){
     i++;
     c = caml_string_unsafe_get(s, i);
     if(c == 95) continue;
     d = caml_parse_digit(c);
     if(d < 0 || d >= base) break;
     if(caml_int64_ult(threshold, res)) caml_failwith("int_of_string");
     d = caml_int64_of_int32(d);
     res = caml_int64_add(caml_int64_mul(base64, res), d);
     if(caml_int64_ult(res, d)) caml_failwith("int_of_string");
    }
    if(i != caml_ml_string_length(s)) caml_failwith("int_of_string");
    if(base == 10 && caml_int64_ult(new MlInt64(0, 0, 0x8000), res))
     caml_failwith("int_of_string");
    if(sign < 0) res = caml_int64_neg(res);
    return res;
   }
   function caml_int64_or(x, y){return x.or(y);}
   function caml_int64_shift_left(x, s){return x.shift_left(s);}
   function caml_int64_shift_right(x, s){return x.shift_right(s);}
   function caml_int64_shift_right_unsigned(x, s){return x.shift_right_unsigned(s);
   }
   function caml_int64_sub(x, y){return x.sub(y);}
   function caml_int64_to_float(x){return x.toFloat();}
   function caml_int64_xor(x, y){return x.xor(y);}
   function caml_int_of_string(s){
    var
     r = caml_parse_sign_and_base(s),
     i = r[0],
     sign = r[1],
     base = r[2],
     len = caml_ml_string_length(s),
     threshold = - 1 >>> 0,
     c = i < len ? caml_string_unsafe_get(s, i) : 0,
     d = caml_parse_digit(c);
    if(d < 0 || d >= base) caml_failwith("int_of_string");
    var res = d;
    for(i++; i < len; i++){
     c = caml_string_unsafe_get(s, i);
     if(c == 95) continue;
     d = caml_parse_digit(c);
     if(d < 0 || d >= base) break;
     res = base * res + d;
     if(res > threshold) caml_failwith("int_of_string");
    }
    if(i != len) caml_failwith("int_of_string");
    res = sign * res;
    if(base == 10 && (res | 0) != res) caml_failwith("int_of_string");
    return res | 0;
   }
   function caml_is_js(){return 1;}
   function caml_is_printable(c){return + (c > 31 && c < 127);}
   function caml_js_call(f, o, args){
    return f.apply(o, caml_js_from_array(args));
   }
   function caml_js_delete(o, f){delete o[f]; return 0;}
   function caml_js_equals(x, y){return + (x == y);}
   function caml_js_error_of_exception(exn){
    if(exn.js_error) return exn.js_error;
    return null;
   }
   function caml_js_error_option_of_exception(exn){
    if(exn.js_error) return [0, exn.js_error];
    return 0;
   }
   function caml_js_eval_string(s){return eval(caml_jsstring_of_string(s));}
   function caml_js_expr(s){
    console.error("caml_js_expr: fallback to runtime evaluation\n");
    return eval(caml_jsstring_of_string(s));
   }
   function caml_js_from_bool(x){return ! ! x;}
   function caml_js_from_float(x){return x;}
   function caml_js_from_string(s){return caml_jsstring_of_string(s);}
   function caml_js_fun_call(f, a){
    switch(a.length){
      case 1:
       return f();
      case 2:
       return f(a[1]);
      case 3:
       return f(a[1], a[2]);
      case 4:
       return f(a[1], a[2], a[3]);
      case 5:
       return f(a[1], a[2], a[3], a[4]);
      case 6:
       return f(a[1], a[2], a[3], a[4], a[5]);
      case 7:
       return f(a[1], a[2], a[3], a[4], a[5], a[6]);
      case 8:
       return f(a[1], a[2], a[3], a[4], a[5], a[6], a[7]);
    }
    return f.apply(null, caml_js_from_array(a));
   }
   function caml_js_function_arity(f){return f.l >= 0 ? f.l : f.l = f.length;}
   function caml_js_get(o, f){return o[f];}
   function caml_js_get_console(){
    var
     c = console,
     m =
       ["log",
        "debug",
        "info",
        "warn",
        "error",
        "assert",
        "dir",
        "dirxml",
        "trace",
        "group",
        "groupCollapsed",
        "groupEnd",
        "time",
        "timeEnd"];
    function f(){}
    for(var i = 0; i < m.length; i++) if(! c[m[i]]) c[m[i]] = f;
    return c;
   }
   function caml_js_html_entities(s){
    var entity = /^&#?[0-9a-zA-Z]+;$/;
    if(s.match(entity)){
     var str, temp = document.createElement("p");
     temp.innerHTML = s;
     str = temp.textContent || temp.innerText;
     temp = null;
     return str;
    }
    else
     caml_failwith("Invalid entity " + s);
   }
   var caml_js_regexps = {amp: /&/g, lt: /</g, quot: /\"/g, all: /[&<\"]/};
   function caml_js_html_escape(s){
    if(! caml_js_regexps.all.test(s)) return s;
    return s.replace(caml_js_regexps.amp, "&amp;").replace
             (caml_js_regexps.lt, "&lt;").replace
            (caml_js_regexps.quot, "&quot;");
   }
   function caml_js_instanceof(o, c){return o instanceof c ? 1 : 0;}
   function caml_js_meth_call(o, f, args){
    return o[caml_jsstring_of_string(f)].apply(o, caml_js_from_array(args));
   }
   function caml_js_new(c, a){
    switch(a.length){
      case 1:
       return new c;
      case 2:
       return new c(a[1]);
      case 3:
       return new c(a[1], a[2]);
      case 4:
       return new c(a[1], a[2], a[3]);
      case 5:
       return new c(a[1], a[2], a[3], a[4]);
      case 6:
       return new c(a[1], a[2], a[3], a[4], a[5]);
      case 7:
       return new c(a[1], a[2], a[3], a[4], a[5], a[6]);
      case 8:
       return new c(a[1], a[2], a[3], a[4], a[5], a[6], a[7]);
    }
    function F(){return c.apply(this, caml_js_from_array(a));}
    F.prototype = c.prototype;
    return new F;
   }
   function caml_js_object(a){
    var o = {};
    for(var i = 1; i < a.length; i++){
     var p = a[i];
     o[caml_jsstring_of_string(p[1])] = p[2];
    }
    return o;
   }
   function caml_js_on_ie(){
    var
     ua =
       globalThis.navigator && globalThis.navigator.userAgent
        ? globalThis.navigator.userAgent
        : "";
    return ua.indexOf("MSIE") != - 1 && ua.indexOf("Opera") != 0;
   }
   function caml_js_pure_expr(f){return caml_callback(f, [0]);}
   function caml_js_set(o, f, v){o[f] = v; return 0;}
   function caml_js_strict_equals(x, y){return + (x === y);}
   function caml_js_to_array(a){
    var len = a.length, b = new Array(len + 1);
    b[0] = 0;
    for(var i = 0; i < len; i++) b[i + 1] = a[i];
    return b;
   }
   function caml_js_to_bool(x){return + x;}
   function caml_js_to_byte_string(s){return caml_string_of_jsbytes(s);}
   function caml_js_to_float(x){return x;}
   function caml_js_to_int32(x){return x | 0;}
   function caml_js_to_string(s){return caml_string_of_jsstring(s);}
   function caml_js_typeof(o){return typeof o;}
   function caml_js_var(x){
    var x = caml_jsstring_of_string(x);
    if(! x.match(/^[a-zA-Z_$][a-zA-Z_$0-9]*(\.[a-zA-Z_$][a-zA-Z_$0-9]*)*$/))
     console.error
      ('caml_js_var: "' + x
       + '" is not a valid JavaScript variable. continuing ..');
    return eval(x);
   }
   function caml_js_wrap_callback(f){
    return function(){
     var len = arguments.length;
     if(len > 0){
      var args = new Array(len);
      for(var i = 0; i < len; i++) args[i] = arguments[i];
     }
     else
      args = [undefined];
     var res = caml_callback(f, args);
     return res instanceof Function ? caml_js_wrap_callback(res) : res;};
   }
   function caml_js_wrap_callback_arguments(f){
    return function(){
     var len = arguments.length, args = new Array(len);
     for(var i = 0; i < len; i++) args[i] = arguments[i];
     return caml_callback(f, [args]);};
   }
   function caml_js_wrap_callback_strict(arity, f){
    return function(){
     var
      n = arguments.length,
      args = new Array(arity),
      len = Math.min(arguments.length, arity);
     for(var i = 0; i < len; i++) args[i] = arguments[i];
     return caml_callback(f, args);};
   }
   function caml_js_wrap_callback_unsafe(f){
    return function(){
     var len = caml_js_function_arity(f), args = new Array(len);
     for(var i = 0; i < len; i++) args[i] = arguments[i];
     return caml_callback(f, args);};
   }
   function caml_js_wrap_meth_callback(f){
    return function(){
     var len = arguments.length, args = new Array(len + 1);
     args[0] = this;
     for(var i = 0; i < len; i++) args[i + 1] = arguments[i];
     var res = caml_callback(f, args);
     return res instanceof Function ? caml_js_wrap_callback(res) : res;};
   }
   function caml_js_wrap_meth_callback_arguments(f){
    return function(){
     var len = arguments.length, args = new Array(len);
     for(var i = 0; i < len; i++) args[i] = arguments[i];
     return caml_callback(f, [this, args]);};
   }
   function caml_js_wrap_meth_callback_strict(arity, f){
    return function(){
     var args = new Array(arity + 1), len = Math.min(arguments.length, arity);
     args[0] = this;
     for(var i = 0; i < len; i++) args[i + 1] = arguments[i];
     return caml_callback(f, args);};
   }
   function caml_js_wrap_meth_callback_unsafe(f){
    return function(){
     var len = caml_js_function_arity(f) - 1, args = new Array(len + 1);
     args[0] = this;
     for(var i = 0; i < len; i++) args[i + 1] = arguments[i];
     return caml_callback(f, args);};
   }
   function caml_jsoo_flags_effects(unit){return 0;}
   function caml_jsoo_flags_use_js_string(unit){return 1;}
   function caml_lazy_make_forward(v){return [250, v];}
   function caml_obj_tag(x){
    if(x instanceof Array && x[0] == x[0] >>> 0)
     return x[0];
    else if(caml_is_ml_bytes(x))
     return 252;
    else if(caml_is_ml_string(x))
     return 252;
    else if(x instanceof Function || typeof x == "function")
     return 247;
    else if(x && x.caml_custom) return 255; else return 1000;
   }
   function caml_lazy_read_result(o){
    return caml_obj_tag(o) == 250 ? o[1] : o;
   }
   function caml_obj_update_tag(b, o, n){
    if(b[0] == o){b[0] = n; return 1;}
    return 0;
   }
   function caml_lazy_reset_to_lazy(o){
    caml_obj_update_tag(o, 244, 246);
    return 0;
   }
   function caml_lazy_update_to_forcing(o){
    return o instanceof Array && o[0] == o[0] >>> 0
            && caml_obj_update_tag(o, 246, 244)
            ? 0
            : 1;
   }
   function caml_lazy_update_to_forward(o){
    caml_obj_update_tag(o, 244, 250);
    return 0;
   }
   function caml_ldexp_float(x, exp){
    exp |= 0;
    if(exp > 1023){
     exp -= 1023;
     x *= Math.pow(2, 1023);
     if(exp > 1023){exp -= 1023; x *= Math.pow(2, 1023);}
    }
    if(exp < - 1023){exp += 1023; x *= Math.pow(2, - 1023);}
    x *= Math.pow(2, exp);
    return x;
   }
   function caml_lessequal(x, y){
    return + (caml_compare_val(x, y, false) <= 0);
   }
   function caml_lessthan(x, y){return + (caml_compare_val(x, y, false) < 0);}
   function caml_lex_array(s){
    s = caml_jsbytes_of_string(s);
    var l = s.length / 2, a = new Array(l);
    for(var i = 0; i < l; i++)
     a[i] = (s.charCodeAt(2 * i) | s.charCodeAt(2 * i + 1) << 8) << 16 >> 16;
    return a;
   }
   function caml_lex_engine(tbl, start_state, lexbuf){
    var
     lex_buffer = 2,
     lex_buffer_len = 3,
     lex_start_pos = 5,
     lex_curr_pos = 6,
     lex_last_pos = 7,
     lex_last_action = 8,
     lex_eof_reached = 9,
     lex_base = 1,
     lex_backtrk = 2,
     lex_default = 3,
     lex_trans = 4,
     lex_check = 5;
    if(! tbl.lex_default){
     tbl.lex_base = caml_lex_array(tbl[lex_base]);
     tbl.lex_backtrk = caml_lex_array(tbl[lex_backtrk]);
     tbl.lex_check = caml_lex_array(tbl[lex_check]);
     tbl.lex_trans = caml_lex_array(tbl[lex_trans]);
     tbl.lex_default = caml_lex_array(tbl[lex_default]);
    }
    var
     c,
     state = start_state,
     buffer = caml_uint8_array_of_bytes(lexbuf[lex_buffer]);
    if(state >= 0){
     lexbuf[lex_last_pos] = lexbuf[lex_start_pos] = lexbuf[lex_curr_pos];
     lexbuf[lex_last_action] = - 1;
    }
    else
     state = - state - 1;
    for(;;){
     var base = tbl.lex_base[state];
     if(base < 0) return - base - 1;
     var backtrk = tbl.lex_backtrk[state];
     if(backtrk >= 0){
      lexbuf[lex_last_pos] = lexbuf[lex_curr_pos];
      lexbuf[lex_last_action] = backtrk;
     }
     if(lexbuf[lex_curr_pos] >= lexbuf[lex_buffer_len])
      if(lexbuf[lex_eof_reached] == 0) return - state - 1; else c = 256;
     else{c = buffer[lexbuf[lex_curr_pos]]; lexbuf[lex_curr_pos]++;}
     if(tbl.lex_check[base + c] == state)
      state = tbl.lex_trans[base + c];
     else
      state = tbl.lex_default[state];
     if(state < 0){
      lexbuf[lex_curr_pos] = lexbuf[lex_last_pos];
      if(lexbuf[lex_last_action] == - 1)
       caml_failwith("lexing: empty token");
      else
       return lexbuf[lex_last_action];
     }
     else if(c == 256) lexbuf[lex_eof_reached] = 0;
    }
   }
   function caml_list_mount_point(){
    var prev = 0;
    for(var i = 0; i < jsoo_mount_point.length; i++){
     var old = prev;
     prev = [0, caml_string_of_jsbytes(jsoo_mount_point[i].path), old];
    }
    return prev;
   }
   function caml_list_of_js_array(a){
    var l = 0;
    for(var i = a.length - 1; i >= 0; i--){var e = a[i]; l = [0, e, l];}
    return l;
   }
   function caml_list_to_js_array(l){
    var a = [];
    for(; l !== 0; l = l[2]) a.push(l[1]);
    return a;
   }
   function caml_log10_float(x){return Math.log10(x);}
   function caml_log1p_float(x){return Math.log1p(x);}
   function caml_log2_float(x){return Math.log2(x);}
   function caml_new_string(s){return caml_string_of_jsbytes(s);}
   function caml_lxm_next(v){
    function shift_l(x, k){return caml_int64_shift_left(x, k);}
    function shift_r(x, k){return caml_int64_shift_right_unsigned(x, k);}
    function or(a, b){return caml_int64_or(a, b);}
    function xor(a, b){return caml_int64_xor(a, b);}
    function add(a, b){return caml_int64_add(a, b);}
    function mul(a, b){return caml_int64_mul(a, b);}
    function rotl(x, k){return or(shift_l(x, k), shift_r(x, 64 - k));}
    function get(a, i){return caml_ba_get_1(a, i);}
    function set(a, i, x){return caml_ba_set_1(a, i, x);}
    var
     M = caml_int64_of_string(caml_new_string("0xd1342543de82ef95")),
     daba = caml_int64_of_string(caml_new_string("0xdaba0b6eb09322e3")),
     z,
     q0,
     q1,
     st = v,
     a = get(st, 0),
     s = get(st, 1),
     x0 = get(st, 2),
     x1 = get(st, 3);
    z = add(s, x0);
    z = mul(xor(z, shift_r(z, 32)), daba);
    z = mul(xor(z, shift_r(z, 32)), daba);
    z = xor(z, shift_r(z, 32));
    set(st, 1, add(mul(s, M), a));
    var q0 = x0, q1 = x1;
    q1 = xor(q1, q0);
    q0 = rotl(q0, 24);
    q0 = xor(xor(q0, q1), shift_l(q1, 16));
    q1 = rotl(q1, 37);
    set(st, 2, q0);
    set(st, 3, q1);
    return z;
   }
   function caml_make_float_vect(len){
    if(len < 0) caml_array_bound_error();
    var len = len + 1 | 0, b = new Array(len);
    b[0] = 254;
    for(var i = 1; i < len; i++) b[i] = 0;
    return b;
   }
   function caml_make_vect(len, init){
    if(len < 0) caml_array_bound_error();
    var len = len + 1 | 0, b = new Array(len);
    b[0] = 0;
    for(var i = 1; i < len; i++) b[i] = init;
    return b;
   }
   var
    caml_marshal_constants =
      {PREFIX_SMALL_BLOCK: 0x80,
       PREFIX_SMALL_INT: 0x40,
       PREFIX_SMALL_STRING: 0x20,
       CODE_INT8: 0x00,
       CODE_INT16: 0x01,
       CODE_INT32: 0x02,
       CODE_INT64: 0x03,
       CODE_SHARED8: 0x04,
       CODE_SHARED16: 0x05,
       CODE_SHARED32: 0x06,
       CODE_BLOCK32: 0x08,
       CODE_BLOCK64: 0x13,
       CODE_STRING8: 0x09,
       CODE_STRING32: 0x0A,
       CODE_DOUBLE_BIG: 0x0B,
       CODE_DOUBLE_LITTLE: 0x0C,
       CODE_DOUBLE_ARRAY8_BIG: 0x0D,
       CODE_DOUBLE_ARRAY8_LITTLE: 0x0E,
       CODE_DOUBLE_ARRAY32_BIG: 0x0F,
       CODE_DOUBLE_ARRAY32_LITTLE: 0x07,
       CODE_CODEPOINTER: 0x10,
       CODE_INFIXPOINTER: 0x11,
       CODE_CUSTOM: 0x12,
       CODE_CUSTOM_LEN: 0x18,
       CODE_CUSTOM_FIXED: 0x19};
   function caml_maybe_print_stats(unit){return 0;}
   function caml_md5_bytes(s, ofs, len){
    var ctx = caml_MD5Init(), a = caml_uint8_array_of_bytes(s);
    caml_MD5Update(ctx, a.subarray(ofs, ofs + len), len);
    return caml_string_of_array(caml_MD5Final(ctx));
   }
   function caml_ml_input_block(chanid, ba, i, l){
    var
     chan = caml_ml_channel_get(chanid),
     n = l,
     avail = chan.buffer_max - chan.buffer_curr;
    if(l <= avail){
     ba.set(chan.buffer.subarray(chan.buffer_curr, chan.buffer_curr + l), i);
     chan.buffer_curr += l;
    }
    else if(avail > 0){
     ba.set
      (chan.buffer.subarray(chan.buffer_curr, chan.buffer_curr + avail), i);
     chan.buffer_curr += avail;
     n = avail;
    }
    else{
     chan.buffer_curr = 0;
     chan.buffer_max = 0;
     caml_refill(chan);
     var avail = chan.buffer_max - chan.buffer_curr;
     if(n > avail) n = avail;
     ba.set(chan.buffer.subarray(chan.buffer_curr, chan.buffer_curr + n), i);
     chan.buffer_curr += n;
    }
    return n | 0;
   }
   function caml_md5_chan(chanid, toread){
    var ctx = caml_MD5Init(), buffer = new Uint8Array(4096);
    if(toread < 0)
     while(true){
      var read = caml_ml_input_block(chanid, buffer, 0, buffer.length);
      if(read == 0) break;
      caml_MD5Update(ctx, buffer.subarray(0, read), read);
     }
    else
     while(toread > 0){
      var
       read =
         caml_ml_input_block
          (chanid, buffer, 0, toread > buffer.length ? buffer.length : toread);
      if(read == 0) caml_raise_end_of_file();
      caml_MD5Update(ctx, buffer.subarray(0, read), read);
      toread -= read;
     }
    return caml_string_of_array(caml_MD5Final(ctx));
   }
   function caml_md5_string(s, ofs, len){
    return caml_md5_bytes(caml_bytes_of_string(s), ofs, len);
   }
   function caml_memprof_discard(t){return 0;}
   function caml_memprof_set(_control){return 0;}
   function caml_memprof_start(rate, stack_size, tracker){return 0;}
   function caml_memprof_stop(unit){return 0;}
   function caml_ml_channel_redirect(captured, into){
    var
     to_restore = caml_ml_channel_get(captured),
     new_ = caml_ml_channel_get(into);
    caml_ml_channels[captured] = new_;
    return to_restore;
   }
   function caml_ml_channel_restore(captured, to_restore){caml_ml_channels[captured] = to_restore; return 0;
   }
   function caml_ml_channel_size(chanid){
    var chan = caml_ml_channel_get(chanid);
    return chan.file.length();
   }
   function caml_ml_channel_size_64(chanid){
    var chan = caml_ml_channel_get(chanid);
    return caml_int64_of_float(chan.file.length());
   }
   var caml_sys_fds = new Array(3);
   function caml_sys_close(fd){
    var file = caml_sys_fds[fd];
    if(file) file.close();
    delete caml_sys_fds[fd];
    return 0;
   }
   function caml_ml_flush(chanid){
    var chan = caml_ml_channel_get(chanid);
    if(! chan.opened) caml_raise_sys_error("Cannot flush a closed channel");
    if(! chan.buffer || chan.buffer_curr == 0) return 0;
    if(chan.output)
     chan.output(caml_subarray_to_jsbytes(chan.buffer, 0, chan.buffer_curr));
    else
     chan.file.write(chan.offset, chan.buffer, 0, chan.buffer_curr);
    chan.offset += chan.buffer_curr;
    chan.buffer_curr = 0;
    return 0;
   }
   function caml_ml_close_channel(chanid){
    var chan = caml_ml_channel_get(chanid);
    if(chan.opened){
     chan.opened = false;
     caml_sys_close(chan.fd);
     chan.fd = - 1;
     chan.buffer = new Uint8Array(0);
     chan.buffer_curr = 0;
     chan.buffer_max = 0;
    }
    return 0;
   }
   function caml_ml_condition_broadcast(t){return 0;}
   function caml_ml_condition_new(unit){return {condition: 1};}
   function caml_ml_condition_signal(t){return 0;}
   function caml_ml_condition_wait(t, mutext){return 0;}
   function caml_ml_debug_info_status(){return 0;}
   function caml_ml_domain_cpu_relax(unit){return 0;}
   function caml_ml_domain_id(unit){return caml_domain_id;}
   function caml_ml_domain_set_name(_name){return 0;}
   var caml_ml_domain_unique_token_ = [0];
   function caml_ml_domain_unique_token(unit){return caml_ml_domain_unique_token_;
   }
   var caml_runtime_warnings = 0;
   function caml_ml_enable_runtime_warnings(bool){caml_runtime_warnings = bool; return 0;
   }
   function caml_ml_input(chanid, b, i, l){
    var ba = caml_uint8_array_of_bytes(b);
    return caml_ml_input_block(chanid, ba, i, l);
   }
   function caml_ml_input_bigarray(chanid, b, i, l){
    var ba = caml_ba_to_typed_array(b);
    return caml_ml_input_block(chanid, ba, i, l);
   }
   function caml_ml_input_char(chanid){
    var chan = caml_ml_channel_get(chanid);
    if(chan.buffer_curr >= chan.buffer_max){
     chan.buffer_curr = 0;
     chan.buffer_max = 0;
     caml_refill(chan);
    }
    if(chan.buffer_curr >= chan.buffer_max) caml_raise_end_of_file();
    var res = chan.buffer[chan.buffer_curr];
    chan.buffer_curr++;
    return res;
   }
   function caml_ml_input_int(chanid){
    var chan = caml_ml_channel_get(chanid), res = 0;
    for(var i = 0; i < 4; i++)
     res = (res << 8) + caml_ml_input_char(chanid) | 0;
    return res | 0;
   }
   function caml_ml_input_scan_line(chanid){
    var chan = caml_ml_channel_get(chanid), p = chan.buffer_curr;
    do
     if(p >= chan.buffer_max){
      if(chan.buffer_curr > 0){
       chan.buffer.set(chan.buffer.subarray(chan.buffer_curr), 0);
       p -= chan.buffer_curr;
       chan.buffer_max -= chan.buffer_curr;
       chan.buffer_curr = 0;
      }
      if(chan.buffer_max >= chan.buffer.length) return - chan.buffer_max | 0;
      var prev_max = chan.buffer_max;
      caml_refill(chan);
      if(prev_max == chan.buffer_max) return - chan.buffer_max | 0;
     }
    while
     (chan.buffer[p++] != 10);
    return p - chan.buffer_curr | 0;
   }
   function caml_ml_is_buffered(chanid){
    return caml_ml_channel_get(chanid).buffered ? 1 : 0;
   }
   function caml_ml_mutex_lock(t){
    if(t.locked)
     caml_failwith("Mutex.lock: mutex already locked. Cannot wait.");
    else
     t.locked = true;
    return 0;
   }
   function caml_ml_mutex_new(unit){return new MlMutex();}
   function caml_ml_mutex_try_lock(t){
    if(! t.locked){t.locked = true; return 1;}
    return 0;
   }
   function caml_sys_open_for_node(fd, flags){
    if(flags.name)
     try{
      var fs = require("fs"), fd2 = fs.openSync(flags.name, "rs");
      return new MlNodeFd(fd2, flags);
     }
     catch(e){}
    return new MlNodeFd(fd, flags);
   }
   function caml_sys_open_internal(file, idx){
    if(idx == undefined) idx = caml_sys_fds.length;
    caml_sys_fds[idx] = file;
    return idx | 0;
   }
   function caml_sys_open(name, flags, _perms){
    var f = {};
    while(flags){
     switch(flags[1]){
       case 0:
        f.rdonly = 1; break;
       case 1:
        f.wronly = 1; break;
       case 2:
        f.append = 1; break;
       case 3:
        f.create = 1; break;
       case 4:
        f.truncate = 1; break;
       case 5:
        f.excl = 1; break;
       case 6:
        f.binary = 1; break;
       case 7:
        f.text = 1; break;
       case 8:
        f.nonblock = 1; break;
     }
     flags = flags[2];
    }
    if(f.rdonly && f.wronly)
     caml_raise_sys_error
      (caml_jsbytes_of_string(name)
       + " : flags Open_rdonly and Open_wronly are not compatible");
    if(f.text && f.binary)
     caml_raise_sys_error
      (caml_jsbytes_of_string(name)
       + " : flags Open_text and Open_binary are not compatible");
    var root = resolve_fs_device(name), file = root.device.open(root.rest, f);
    return caml_sys_open_internal(file, undefined);
   }
   (function(){
      function file(fd, flags){
       return fs_node_supported()
               ? caml_sys_open_for_node(fd, flags)
               : new MlFakeFd_out(fd, flags);
      }
      caml_sys_open_internal
       (file(0, {rdonly: 1, altname: "/dev/stdin", isCharacterDevice: true}),
        0);
      caml_sys_open_internal
       (file(1, {buffered: 2, wronly: 1, isCharacterDevice: true}), 1);
      caml_sys_open_internal
       (file(2, {buffered: 2, wronly: 1, isCharacterDevice: true}), 2);
     }
     ());
   function caml_ml_open_descriptor_in(fd){
    var file = caml_sys_fds[fd];
    if(file.flags.wronly) caml_raise_sys_error("fd " + fd + " is writeonly");
    var
     refill = null,
     channel =
       {file: file,
        offset: file.flags.append ? file.length() : 0,
        fd: fd,
        opened: true,
        out: false,
        buffer_curr: 0,
        buffer_max: 0,
        buffer: new Uint8Array(65536),
        refill: refill};
    caml_ml_channels[channel.fd] = channel;
    return channel.fd;
   }
   function caml_ml_open_descriptor_out(fd){
    var file = caml_sys_fds[fd];
    if(file.flags.rdonly) caml_raise_sys_error("fd " + fd + " is readonly");
    var
     buffered = file.flags.buffered !== undefined ? file.flags.buffered : 1,
     channel =
       {file: file,
        offset: file.flags.append ? file.length() : 0,
        fd: fd,
        opened: true,
        out: true,
        buffer_curr: 0,
        buffer: new Uint8Array(65536),
        buffered: buffered};
    caml_ml_channels[channel.fd] = channel;
    return channel.fd;
   }
   function caml_ml_out_channels_list(){
    var l = 0;
    for(var c = 0; c < caml_ml_channels.length; c++)
     if
      (caml_ml_channels[c] && caml_ml_channels[c].opened
       && caml_ml_channels[c].out)
      l = [0, caml_ml_channels[c].fd, l];
    return l;
   }
   function caml_ml_output_ta(chanid, buffer, offset, len){
    var chan = caml_ml_channel_get(chanid);
    if(! chan.opened)
     caml_raise_sys_error("Cannot output to a closed channel");
    buffer = buffer.subarray(offset, offset + len);
    if(chan.buffer_curr + buffer.length > chan.buffer.length){
     var b = new Uint8Array(chan.buffer_curr + buffer.length);
     b.set(chan.buffer);
     chan.buffer = b;
    }
    switch(chan.buffered){
      case 0:
       chan.buffer.set(buffer, chan.buffer_curr);
       chan.buffer_curr += buffer.length;
       caml_ml_flush(chanid);
       break;
      case 1:
       chan.buffer.set(buffer, chan.buffer_curr);
       chan.buffer_curr += buffer.length;
       if(chan.buffer_curr >= chan.buffer.length) caml_ml_flush(chanid);
       break;
      case 2:
       var id = buffer.lastIndexOf(10);
       if(id < 0){
        chan.buffer.set(buffer, chan.buffer_curr);
        chan.buffer_curr += buffer.length;
        if(chan.buffer_curr >= chan.buffer.length) caml_ml_flush(chanid);
       }
       else{
        chan.buffer.set(buffer.subarray(0, id + 1), chan.buffer_curr);
        chan.buffer_curr += id + 1;
        caml_ml_flush(chanid);
        chan.buffer.set(buffer.subarray(id + 1), chan.buffer_curr);
        chan.buffer_curr += buffer.length - id - 1;
       }
       break;
    }
    return 0;
   }
   function caml_ml_output_bytes(chanid, buffer, offset, len){
    var buffer = caml_uint8_array_of_bytes(buffer);
    return caml_ml_output_ta(chanid, buffer, offset, len);
   }
   function caml_ml_output(chanid, buffer, offset, len){
    return caml_ml_output_bytes
            (chanid, caml_bytes_of_string(buffer), offset, len);
   }
   function caml_ml_output_bigarray(chanid, buffer, offset, len){
    var buffer = caml_ba_to_typed_array(buffer);
    return caml_ml_output_ta(chanid, buffer, offset, len);
   }
   function caml_ml_output_char(chanid, c){
    var s = caml_string_of_jsbytes(String.fromCharCode(c));
    caml_ml_output(chanid, s, 0, 1);
    return 0;
   }
   function caml_ml_output_int(chanid, i){
    var
     arr = [i >> 24 & 0xFF, i >> 16 & 0xFF, i >> 8 & 0xFF, i & 0xFF],
     s = caml_string_of_array(arr);
    caml_ml_output(chanid, s, 0, 4);
    return 0;
   }
   function caml_pos_in(chanid){
    var chan = caml_ml_channel_get(chanid);
    return chan.offset - (chan.buffer_max - chan.buffer_curr) | 0;
   }
   function caml_ml_pos_in(chanid){return caml_pos_in(chanid);}
   function caml_ml_pos_in_64(chanid){
    return caml_int64_of_float(caml_pos_in(chanid));
   }
   function caml_pos_out(chanid){
    var chan = caml_ml_channel_get(chanid);
    return chan.offset + chan.buffer_curr;
   }
   function caml_ml_pos_out(chanid){return caml_pos_out(chanid);}
   function caml_ml_pos_out_64(chanid){
    return caml_int64_of_float(caml_pos_out(chanid));
   }
   function caml_ml_runtime_events_pause(){return 0;}
   function caml_ml_runtime_events_resume(){return 0;}
   function caml_ml_runtime_events_start(){return 0;}
   function caml_ml_runtime_warnings_enabled(_unit){return caml_runtime_warnings;
   }
   function caml_seek_in(chanid, pos){
    var chan = caml_ml_channel_get(chanid);
    if(chan.refill != null) caml_raise_sys_error("Illegal seek");
    if
     (pos >= chan.offset - chan.buffer_max && pos <= chan.offset
      && chan.file.flags.binary)
     chan.buffer_curr = chan.buffer_max - (chan.offset - pos);
    else{chan.offset = pos; chan.buffer_curr = 0; chan.buffer_max = 0;}
    return 0;
   }
   function caml_ml_seek_in(chanid, pos){return caml_seek_in(chanid, pos);}
   function caml_ml_seek_in_64(chanid, pos){
    var pos = caml_int64_to_float(pos);
    return caml_seek_in(chanid, pos);
   }
   function caml_seek_out(chanid, pos){
    caml_ml_flush(chanid);
    var chan = caml_ml_channel_get(chanid);
    chan.offset = pos;
    return 0;
   }
   function caml_ml_seek_out(chanid, pos){return caml_seek_out(chanid, pos);}
   function caml_ml_seek_out_64(chanid, pos){
    var pos = caml_int64_to_float(pos);
    return caml_seek_out(chanid, pos);
   }
   function caml_ml_set_binary_mode(chanid, mode){
    var chan = caml_ml_channel_get(chanid);
    chan.file.flags.text = ! mode;
    chan.file.flags.binary = mode;
    return 0;
   }
   function caml_ml_set_buffered(chanid, v){
    caml_ml_channel_get(chanid).buffered = v;
    if(! v) caml_ml_flush(chanid);
    return 0;
   }
   function caml_ml_set_channel_name(chanid, name){
    var chan = caml_ml_channel_get(chanid);
    chan.name = name;
    return 0;
   }
   function caml_ml_set_channel_output(chanid, f){
    var chan = caml_ml_channel_get(chanid);
    chan.output = function(s){f(s);};
    return 0;
   }
   function caml_ml_set_channel_refill(chanid, f){
    caml_ml_channel_get(chanid).refill = f;
    return 0;
   }
   function caml_mod(x, y){if(y == 0) caml_raise_zero_divide(); return x % y;}
   function caml_modf_float(x){
    if(isFinite(x)){
     var neg = 1 / x < 0;
     x = Math.abs(x);
     var i = Math.floor(x), f = x - i;
     if(neg){i = - i; f = - f;}
     return [0, f, i];
    }
    if(isNaN(x)) return [0, NaN, NaN];
    return [0, 1 / x, x];
   }
   function caml_mount_autoload(name, f){
    var
     path = caml_make_path(name),
     name = caml_trailing_slash(path.join("/"));
    jsoo_mount_point.push({path: name, device: new MlFakeDevice(name, f)});
    return 0;
   }
   function caml_lex_run_mem(s, i, mem, curr_pos){
    for(;;){
     var dst = s.charCodeAt(i);
     i++;
     if(dst == 0xff) return;
     var src = s.charCodeAt(i);
     i++;
     if(src == 0xff)
      mem[dst + 1] = curr_pos;
     else
      mem[dst + 1] = mem[src + 1];
    }
   }
   function caml_lex_run_tag(s, i, mem){
    for(;;){
     var dst = s.charCodeAt(i);
     i++;
     if(dst == 0xff) return;
     var src = s.charCodeAt(i);
     i++;
     if(src == 0xff) mem[dst + 1] = - 1; else mem[dst + 1] = mem[src + 1];
    }
   }
   function caml_new_lex_engine(tbl, start_state, lexbuf){
    var
     lex_buffer = 2,
     lex_buffer_len = 3,
     lex_start_pos = 5,
     lex_curr_pos = 6,
     lex_last_pos = 7,
     lex_last_action = 8,
     lex_eof_reached = 9,
     lex_mem = 10,
     lex_base = 1,
     lex_backtrk = 2,
     lex_default = 3,
     lex_trans = 4,
     lex_check = 5,
     lex_base_code = 6,
     lex_backtrk_code = 7,
     lex_default_code = 8,
     lex_trans_code = 9,
     lex_check_code = 10,
     lex_code = 11;
    if(! tbl.lex_default){
     tbl.lex_base = caml_lex_array(tbl[lex_base]);
     tbl.lex_backtrk = caml_lex_array(tbl[lex_backtrk]);
     tbl.lex_check = caml_lex_array(tbl[lex_check]);
     tbl.lex_trans = caml_lex_array(tbl[lex_trans]);
     tbl.lex_default = caml_lex_array(tbl[lex_default]);
    }
    if(! tbl.lex_default_code){
     tbl.lex_base_code = caml_lex_array(tbl[lex_base_code]);
     tbl.lex_backtrk_code = caml_lex_array(tbl[lex_backtrk_code]);
     tbl.lex_check_code = caml_lex_array(tbl[lex_check_code]);
     tbl.lex_trans_code = caml_lex_array(tbl[lex_trans_code]);
     tbl.lex_default_code = caml_lex_array(tbl[lex_default_code]);
    }
    if(tbl.lex_code == null)
     tbl.lex_code = caml_jsbytes_of_string(tbl[lex_code]);
    var
     c,
     state = start_state,
     buffer = caml_uint8_array_of_bytes(lexbuf[lex_buffer]);
    if(state >= 0){
     lexbuf[lex_last_pos] = lexbuf[lex_start_pos] = lexbuf[lex_curr_pos];
     lexbuf[lex_last_action] = - 1;
    }
    else
     state = - state - 1;
    for(;;){
     var base = tbl.lex_base[state];
     if(base < 0){
      var pc_off = tbl.lex_base_code[state];
      caml_lex_run_tag(tbl.lex_code, pc_off, lexbuf[lex_mem]);
      return - base - 1;
     }
     var backtrk = tbl.lex_backtrk[state];
     if(backtrk >= 0){
      var pc_off = tbl.lex_backtrk_code[state];
      caml_lex_run_tag(tbl.lex_code, pc_off, lexbuf[lex_mem]);
      lexbuf[lex_last_pos] = lexbuf[lex_curr_pos];
      lexbuf[lex_last_action] = backtrk;
     }
     if(lexbuf[lex_curr_pos] >= lexbuf[lex_buffer_len])
      if(lexbuf[lex_eof_reached] == 0) return - state - 1; else c = 256;
     else{c = buffer[lexbuf[lex_curr_pos]]; lexbuf[lex_curr_pos]++;}
     var pstate = state;
     if(tbl.lex_check[base + c] == state)
      state = tbl.lex_trans[base + c];
     else
      state = tbl.lex_default[state];
     if(state < 0){
      lexbuf[lex_curr_pos] = lexbuf[lex_last_pos];
      if(lexbuf[lex_last_action] == - 1)
       caml_failwith("lexing: empty token");
      else
       return lexbuf[lex_last_action];
     }
     else{
      var base_code = tbl.lex_base_code[pstate], pc_off;
      if(tbl.lex_check_code[base_code + c] == pstate)
       pc_off = tbl.lex_trans_code[base_code + c];
      else
       pc_off = tbl.lex_default_code[pstate];
      if(pc_off > 0)
       caml_lex_run_mem
        (tbl.lex_code, pc_off, lexbuf[lex_mem], lexbuf[lex_curr_pos]);
      if(c == 256) lexbuf[lex_eof_reached] = 0;
     }
    }
   }
   function caml_nextafter_float(x, y){
    if(isNaN(x) || isNaN(y)) return NaN;
    if(x == y) return y;
    if(x == 0) return y < 0 ? - Math.pow(2, - 1074) : Math.pow(2, - 1074);
    var bits = caml_int64_bits_of_float(x), one = caml_int64_of_int32(1);
    if(x < y == x > 0)
     bits = caml_int64_add(bits, one);
    else
     bits = caml_int64_sub(bits, one);
    return caml_int64_float_of_bits(bits);
   }
   function caml_notequal(x, y){
    return + (caml_compare_val(x, y, false) != 0);
   }
   function caml_obj_add_offset(v, offset){
    caml_failwith("Obj.add_offset is not supported");
   }
   function caml_obj_block(tag, size){
    var o = new Array(size + 1);
    o[0] = tag;
    for(var i = 1; i <= size; i++) o[i] = 0;
    return o;
   }
   function caml_obj_compare_and_swap(x, i, old, n){
    if(x[i + 1] == old){x[i + 1] = n; return 1;}
    return 0;
   }
   function caml_obj_is_block(x){return + (x instanceof Array);}
   function caml_obj_is_shared(x){return 1;}
   function caml_obj_make_forward(b, v){b[0] = 250; b[1] = v; return 0;}
   function caml_obj_raw_field(o, i){return o[i + 1];}
   function caml_obj_reachable_words(o){return 0;}
   function caml_obj_set_raw_field(o, i, v){return o[i + 1] = v;}
   function caml_obj_set_tag(x, tag){x[0] = tag; return 0;}
   function caml_obj_truncate(x, s){
    if(s <= 0 || s + 1 > x.length) caml_invalid_argument("Obj.truncate");
    if(x.length != s + 1) x.length = s + 1;
    return 0;
   }
   function caml_obj_with_tag(tag, x){
    var l = x.length, a = new Array(l);
    a[0] = tag;
    for(var i = 1; i < l; i++) a[i] = x[i];
    return a;
   }
   function caml_ojs_new_arr(c, a){
    switch(a.length){
      case 0:
       return new c;
      case 1:
       return new c(a[0]);
      case 2:
       return new c(a[0], a[1]);
      case 3:
       return new c(a[0], a[1], a[2]);
      case 4:
       return new c(a[0], a[1], a[2], a[3]);
      case 5:
       return new c(a[0], a[1], a[2], a[3], a[4]);
      case 6:
       return new c(a[0], a[1], a[2], a[3], a[4], a[5]);
      case 7:
       return new c(a[0], a[1], a[2], a[3], a[4], a[5], a[6]);
    }
    function F(){return c.apply(this, a);}
    F.prototype = c.prototype;
    return new F;
   }
   var
    caml_output_val =
      function(){
        function Writer(){this.chunk = [];}
        Writer.prototype =
         {chunk_idx: 20,
          block_len: 0,
          obj_counter: 0,
          size_32: 0,
          size_64: 0,
          write:
          function(size, value){
           for(var i = size - 8; i >= 0; i -= 8)
            this.chunk[this.chunk_idx++] = value >> i & 0xFF;
          },
          write_at:
          function(pos, size, value){
           var pos = pos;
           for(var i = size - 8; i >= 0; i -= 8)
            this.chunk[pos++] = value >> i & 0xFF;
          },
          write_code:
          function(size, code, value){
           this.chunk[this.chunk_idx++] = code;
           for(var i = size - 8; i >= 0; i -= 8)
            this.chunk[this.chunk_idx++] = value >> i & 0xFF;
          },
          write_shared:
          function(offset){
           if(offset < 1 << 8)
            this.write_code(8, 0x04, offset);
           else if(offset < 1 << 16)
            this.write_code(16, 0x05, offset);
           else
            this.write_code(32, 0x06, offset);
          },
          pos: function(){return this.chunk_idx;},
          finalize:
          function(){
           this.block_len = this.chunk_idx - 20;
           this.chunk_idx = 0;
           this.write(32, 0x8495A6BE);
           this.write(32, this.block_len);
           this.write(32, this.obj_counter);
           this.write(32, this.size_32);
           this.write(32, this.size_64);
           return this.chunk;
          }};
        return function(v, flags){
         flags = caml_list_to_js_array(flags);
         var
          no_sharing = flags.indexOf(0) !== - 1,
          closures = flags.indexOf(1) !== - 1;
         if(closures)
          console.warn
           ("in caml_output_val: flag Marshal.Closures is not supported.");
         var
          writer = new Writer(),
          stack = [],
          intern_obj_table = no_sharing ? null : new MlObjectTable();
         function memo(v){
          if(no_sharing) return false;
          var existing_offset = intern_obj_table.recall(v);
          if(existing_offset){
           writer.write_shared(existing_offset);
           return true;
          }
          else{intern_obj_table.store(v); return false;}
         }
         function extern_rec(v){
          if(v.caml_custom){
           if(memo(v)) return;
           var
            name = v.caml_custom,
            ops = caml_custom_ops[name],
            sz_32_64 = [0, 0];
           if(! ops.serialize)
            caml_invalid_argument("output_value: abstract value (Custom)");
           if(ops.fixed_length == undefined){
            writer.write(8, 0x18);
            for(var i = 0; i < name.length; i++)
             writer.write(8, name.charCodeAt(i));
            writer.write(8, 0);
            var header_pos = writer.pos();
            for(var i = 0; i < 12; i++) writer.write(8, 0);
            ops.serialize(writer, v, sz_32_64);
            writer.write_at(header_pos, 32, sz_32_64[0]);
            writer.write_at(header_pos + 4, 32, 0);
            writer.write_at(header_pos + 8, 32, sz_32_64[1]);
           }
           else{
            writer.write(8, 0x19);
            for(var i = 0; i < name.length; i++)
             writer.write(8, name.charCodeAt(i));
            writer.write(8, 0);
            var old_pos = writer.pos();
            ops.serialize(writer, v, sz_32_64);
            if(ops.fixed_length != writer.pos() - old_pos)
             caml_failwith
              ("output_value: incorrect fixed sizes specified by " + name);
           }
           writer.size_32 += 2 + (sz_32_64[0] + 3 >> 2);
           writer.size_64 += 2 + (sz_32_64[1] + 7 >> 3);
          }
          else if(v instanceof Array && v[0] === (v[0] | 0)){
           if(v[0] == 251)
            caml_failwith("output_value: abstract value (Abstract)");
           if(caml_is_continuation_tag(v[0]))
            caml_invalid_argument("output_value: continuation value");
           if(v.length > 1 && memo(v)) return;
           if(v[0] < 16 && v.length - 1 < 8)
            writer.write(8, 0x80 + v[0] + (v.length - 1 << 4));
           else
            writer.write_code(32, 0x08, v.length - 1 << 10 | v[0]);
           writer.size_32 += v.length;
           writer.size_64 += v.length;
           if(v.length > 1) stack.push(v, 1);
          }
          else if(caml_is_ml_bytes(v)){
           if(! caml_is_ml_bytes(caml_string_of_jsbytes("")))
            caml_failwith
             ("output_value: [Bytes.t] cannot safely be marshaled with [--enable use-js-string]");
           if(memo(v)) return;
           var len = caml_ml_bytes_length(v);
           if(len < 0x20)
            writer.write(8, 0x20 + len);
           else if(len < 0x100)
            writer.write_code(8, 0x09, len);
           else
            writer.write_code(32, 0x0A, len);
           for(var i = 0; i < len; i++)
            writer.write(8, caml_bytes_unsafe_get(v, i));
           writer.size_32 += 1 + ((len + 4) / 4 | 0);
           writer.size_64 += 1 + ((len + 8) / 8 | 0);
          }
          else if(caml_is_ml_string(v)){
           if(memo(v)) return;
           var len = caml_ml_string_length(v);
           if(len < 0x20)
            writer.write(8, 0x20 + len);
           else if(len < 0x100)
            writer.write_code(8, 0x09, len);
           else
            writer.write_code(32, 0x0A, len);
           for(var i = 0; i < len; i++)
            writer.write(8, caml_string_unsafe_get(v, i));
           writer.size_32 += 1 + ((len + 4) / 4 | 0);
           writer.size_64 += 1 + ((len + 8) / 8 | 0);
          }
          else if(v != (v | 0)){
           var type_of_v = typeof v;
           if(type_of_v != "number")
            caml_failwith("output_value: abstract value (" + type_of_v + ")");
           if(memo(v)) return;
           var t = caml_int64_to_bytes(caml_int64_bits_of_float(v));
           writer.write(8, 0x0C);
           for(var i = 0; i < 8; i++) writer.write(8, t[7 - i]);
           writer.size_32 += 3;
           writer.size_64 += 2;
          }
          else if(v >= 0 && v < 0x40)
           writer.write(8, 0X40 + v);
          else if(v >= - (1 << 7) && v < 1 << 7)
           writer.write_code(8, 0x00, v);
          else if(v >= - (1 << 15) && v < 1 << 15)
           writer.write_code(16, 0x01, v);
          else
           writer.write_code(32, 0x02, v);
         }
         extern_rec(v);
         while(stack.length > 0){
          var i = stack.pop(), v = stack.pop();
          if(i + 1 < v.length) stack.push(v, i + 1);
          extern_rec(v[i]);
         }
         if(intern_obj_table)
          writer.obj_counter = intern_obj_table.objs.length;
         writer.finalize();
         return writer.chunk;};
       }
       ();
   function caml_output_value_to_string(v, flags){
    return caml_string_of_array(caml_output_val(v, flags));
   }
   function caml_output_value(chanid, v, flags){
    var s = caml_output_value_to_string(v, flags);
    caml_ml_output(chanid, s, 0, caml_ml_string_length(s));
    return 0;
   }
   function caml_output_value_to_buffer(s, ofs, len, v, flags){
    var t = caml_output_val(v, flags);
    if(t.length > len) caml_failwith("Marshal.to_buffer: buffer overflow");
    caml_blit_bytes(t, 0, s, ofs, t.length);
    return 0;
   }
   function caml_output_value_to_bytes(v, flags){
    return caml_bytes_of_array(caml_output_val(v, flags));
   }
   var caml_parser_trace = 0;
   function caml_parse_engine(tables, env, cmd, arg){
    var
     ERRCODE = 256,
     loop = 6,
     testshift = 7,
     shift = 8,
     shift_recover = 9,
     reduce = 10,
     READ_TOKEN = 0,
     RAISE_PARSE_ERROR = 1,
     GROW_STACKS_1 = 2,
     GROW_STACKS_2 = 3,
     COMPUTE_SEMANTIC_ACTION = 4,
     CALL_ERROR_FUNCTION = 5,
     env_s_stack = 1,
     env_v_stack = 2,
     env_symb_start_stack = 3,
     env_symb_end_stack = 4,
     env_stacksize = 5,
     env_stackbase = 6,
     env_curr_char = 7,
     env_lval = 8,
     env_symb_start = 9,
     env_symb_end = 10,
     env_asp = 11,
     env_rule_len = 12,
     env_rule_number = 13,
     env_sp = 14,
     env_state = 15,
     env_errflag = 16,
     tbl_transl_const = 2,
     tbl_transl_block = 3,
     tbl_lhs = 4,
     tbl_len = 5,
     tbl_defred = 6,
     tbl_dgoto = 7,
     tbl_sindex = 8,
     tbl_rindex = 9,
     tbl_gindex = 10,
     tbl_tablesize = 11,
     tbl_table = 12,
     tbl_check = 13,
     tbl_names_const = 15,
     tbl_names_block = 16;
    function log(x){
     var s = caml_string_of_jsbytes(x + "\n");
     caml_ml_output(2, s, 0, caml_ml_string_length(s));
    }
    function token_name(names, number){
     var str = caml_jsstring_of_string(names);
     if(str[0] == "\x00") return "<unknown token>";
     return str.split("\x00")[number];
    }
    function print_token(state, tok){
     var token, kind;
     if(tok instanceof Array){
      token = token_name(tables[tbl_names_block], tok[0]);
      if(typeof tok[1] == "number")
       kind = "" + tok[1];
      else if(typeof tok[1] == "string")
       kind = tok[1];
      else if(tok[1] instanceof MlBytes)
       kind = caml_jsbytes_of_string(tok[1]);
      else
       kind = "_";
      log("State " + state + ": read token " + token + "(" + kind + ")");
     }
     else{
      token = token_name(tables[tbl_names_const], tok);
      log("State " + state + ": read token " + token);
     }
    }
    if(! tables.dgoto){
     tables.defred = caml_lex_array(tables[tbl_defred]);
     tables.sindex = caml_lex_array(tables[tbl_sindex]);
     tables.check = caml_lex_array(tables[tbl_check]);
     tables.rindex = caml_lex_array(tables[tbl_rindex]);
     tables.table = caml_lex_array(tables[tbl_table]);
     tables.len = caml_lex_array(tables[tbl_len]);
     tables.lhs = caml_lex_array(tables[tbl_lhs]);
     tables.gindex = caml_lex_array(tables[tbl_gindex]);
     tables.dgoto = caml_lex_array(tables[tbl_dgoto]);
    }
    var
     res = 0,
     n,
     n1,
     n2,
     state1,
     sp = env[env_sp],
     state = env[env_state],
     errflag = env[env_errflag];
    exit:
    for(;;)
     next:
     switch(cmd){
       case 0:
        state = 0; errflag = 0;
       case 6:
        n = tables.defred[state];
        if(n != 0){cmd = reduce; break;}
        if(env[env_curr_char] >= 0){cmd = testshift; break;}
        res = READ_TOKEN;
        break exit;
       case 1:
        if(arg instanceof Array){
         env[env_curr_char] = tables[tbl_transl_block][arg[0] + 1];
         env[env_lval] = arg[1];
        }
        else{
         env[env_curr_char] = tables[tbl_transl_const][arg + 1];
         env[env_lval] = 0;
        }
        if(caml_parser_trace) print_token(state, arg);
       case 7:
        n1 = tables.sindex[state];
        n2 = n1 + env[env_curr_char];
        if
         (n1 != 0 && n2 >= 0 && n2 <= tables[tbl_tablesize]
          && tables.check[n2] == env[env_curr_char]){cmd = shift; break;}
        n1 = tables.rindex[state];
        n2 = n1 + env[env_curr_char];
        if
         (n1 != 0 && n2 >= 0 && n2 <= tables[tbl_tablesize]
          && tables.check[n2] == env[env_curr_char]){
         n = tables.table[n2];
         cmd = reduce;
         break;
        }
        if(errflag <= 0){res = CALL_ERROR_FUNCTION; break exit;}
       case 5:
        if(errflag < 3){
         errflag = 3;
         for(;;){
          state1 = env[env_s_stack][sp + 1];
          n1 = tables.sindex[state1];
          n2 = n1 + ERRCODE;
          if
           (n1 != 0 && n2 >= 0 && n2 <= tables[tbl_tablesize]
            && tables.check[n2] == ERRCODE){
           if(caml_parser_trace) log("Recovering in state " + state1);
           cmd = shift_recover;
           break next;
          }
          else{
           if(caml_parser_trace) log("Discarding state " + state1);
           if(sp <= env[env_stackbase]){
            if(caml_parser_trace) log("No more states to discard");
            return RAISE_PARSE_ERROR;
           }
           sp--;
          }
         }
        }
        else{
         if(env[env_curr_char] == 0) return RAISE_PARSE_ERROR;
         if(caml_parser_trace) log("Discarding last token read");
         env[env_curr_char] = - 1;
         cmd = loop;
         break;
        }
       case 8:
        env[env_curr_char] = - 1; if(errflag > 0) errflag--;
       case 9:
        if(caml_parser_trace)
         log("State " + state + ": shift to state " + tables.table[n2]);
        state = tables.table[n2];
        sp++;
        if(sp >= env[env_stacksize]){res = GROW_STACKS_1; break exit;}
       case 2:
        env[env_s_stack][sp + 1] = state;
        env[env_v_stack][sp + 1] = env[env_lval];
        env[env_symb_start_stack][sp + 1] = env[env_symb_start];
        env[env_symb_end_stack][sp + 1] = env[env_symb_end];
        cmd = loop;
        break;
       case 10:
        if(caml_parser_trace) log("State " + state + ": reduce by rule " + n);
        var m = tables.len[n];
        env[env_asp] = sp;
        env[env_rule_number] = n;
        env[env_rule_len] = m;
        sp = sp - m + 1;
        m = tables.lhs[n];
        state1 = env[env_s_stack][sp];
        n1 = tables.gindex[m];
        n2 = n1 + state1;
        if
         (n1 != 0 && n2 >= 0 && n2 <= tables[tbl_tablesize]
          && tables.check[n2] == state1)
         state = tables.table[n2];
        else
         state = tables.dgoto[m];
        if(sp >= env[env_stacksize]){res = GROW_STACKS_2; break exit;}
       case 3:
        res = COMPUTE_SEMANTIC_ACTION; break exit;
       case 4:
        env[env_s_stack][sp + 1] = state;
        env[env_v_stack][sp + 1] = arg;
        var asp = env[env_asp];
        env[env_symb_end_stack][sp + 1] = env[env_symb_end_stack][asp + 1];
        if(sp > asp)
         env[env_symb_start_stack][sp + 1] = env[env_symb_end_stack][asp + 1];
        cmd = loop;
        break;
       default: return RAISE_PARSE_ERROR;
     }
    env[env_sp] = sp;
    env[env_state] = state;
    env[env_errflag] = errflag;
    return res;
   }
   function caml_pure_js_expr(s){
    console.error("caml_pure_js_expr: fallback to runtime evaluation\n");
    return eval(caml_jsstring_of_string(s));
   }
   function caml_raise_not_a_dir(name){
    caml_raise_sys_error(name + ": Not a directory");
   }
   function caml_raise_not_found(){
    caml_raise_constant(caml_global_data.Not_found);
   }
   function caml_raw_backtrace_length(){return 0;}
   function caml_raw_backtrace_next_slot(){return 0;}
   function caml_raw_backtrace_slot(){
    caml_invalid_argument
     ("Printexc.get_raw_backtrace_slot: index out of bounds");
   }
   function caml_recommended_domain_count(unit){return 1;}
   function caml_record_backtrace(b){
    caml_record_backtrace_flag = b;
    return 0;
   }
   function caml_register_channel_for_spacetime(_channel){return 0;}
   function caml_register_global(n, v, name_opt){
    if(name_opt){
     var name = name_opt;
     if(globalThis.toplevelReloc)
      n = caml_callback(globalThis.toplevelReloc, [name]);
     else if(caml_global_data.symbols){
      if(! caml_global_data.symidx)
       caml_global_data.symidx = caml_build_symbols(caml_global_data.symbols);
      var nid = caml_global_data.symidx[name];
      if(nid >= 0)
       n = nid;
      else
       caml_failwith("caml_register_global: cannot locate " + name);
     }
    }
    caml_global_data[n + 1] = v;
    if(name_opt) caml_global_data[name_opt] = v;
   }
   function caml_register_named_value(nm, v){
    caml_named_values[caml_jsbytes_of_string(nm)] = v;
    return 0;
   }
   function caml_restore_raw_backtrace(exn, bt){return 0;}
   function caml_round_float(x){
    if(x >= 0){
     var y = Math.floor(x);
     return x - y >= 0.5 ? y + 1 : y;
    }
    else{var y = Math.ceil(x); return y - x >= 0.5 ? y - 1 : y;}
   }
   function caml_runtime_events_create_cursor(target){return {};}
   function caml_runtime_events_free_cursor(cursor){return 0;}
   function caml_runtime_events_read_poll(cursor, callbacks, num){return 0;}
   function caml_runtime_events_user_register
   (event_name, event_tag, event_type){
    caml_custom_event_index += 1;
    return [0, caml_custom_event_index, event_name, event_type, event_tag];
   }
   function caml_runtime_events_user_resolve(){return 0;}
   function caml_runtime_events_user_write(event, event_content){return 0;}
   function caml_runtime_parameters(_unit){return caml_string_of_jsbytes("");}
   function caml_runtime_variant(_unit){return caml_string_of_jsbytes("");}
   function caml_set_oo_id(b){b[2] = caml_oo_last_id++; return b;}
   function caml_set_parser_trace(bool){
    var oldflag = caml_parser_trace;
    caml_parser_trace = bool;
    return oldflag;
   }
   function caml_set_static_env(k, v){
    if(! globalThis.jsoo_static_env) globalThis.jsoo_static_env = {};
    globalThis.jsoo_static_env[k] = v;
    return 0;
   }
   function caml_signbit_float(x){if(x == 0) x = 1 / x; return x < 0 ? 1 : 0;}
   function caml_sinh_float(x){return Math.sinh(x);}
   function caml_spacetime_enabled(_unit){return 0;}
   function caml_spacetime_only_works_for_native_code(){
    caml_failwith("Spacetime profiling only works for native code");
   }
   function caml_str_initialize(unit){return 0;}
   function caml_string_bound_error(){
    caml_invalid_argument("index out of bounds");
   }
   function caml_string_concat(a, b){return a + b;}
   function caml_string_equal(s1, s2){if(s1 === s2) return 1; return 0;}
   function caml_string_get(s, i){
    if(i >>> 0 >= caml_ml_string_length(s)) caml_string_bound_error();
    return caml_string_unsafe_get(s, i);
   }
   function caml_string_get16(s, i){
    if(i >>> 0 >= caml_ml_string_length(s) - 1) caml_string_bound_error();
    var
     b1 = caml_string_unsafe_get(s, i),
     b2 = caml_string_unsafe_get(s, i + 1);
    return b2 << 8 | b1;
   }
   function caml_string_get32(s, i){
    if(i >>> 0 >= caml_ml_string_length(s) - 3) caml_string_bound_error();
    var
     b1 = caml_string_unsafe_get(s, i),
     b2 = caml_string_unsafe_get(s, i + 1),
     b3 = caml_string_unsafe_get(s, i + 2),
     b4 = caml_string_unsafe_get(s, i + 3);
    return b4 << 24 | b3 << 16 | b2 << 8 | b1;
   }
   function caml_string_get64(s, i){
    if(i >>> 0 >= caml_ml_string_length(s) - 7) caml_string_bound_error();
    var a = new Array(8);
    for(var j = 0; j < 8; j++) a[7 - j] = caml_string_unsafe_get(s, i + j);
    return caml_int64_of_bytes(a);
   }
   function caml_string_lessequal(s1, s2){return s1 <= s2 ? 1 : 0;}
   function caml_string_greaterequal(s1, s2){return caml_string_lessequal(s2, s1);
   }
   function caml_string_lessthan(s1, s2){return s1 < s2 ? 1 : 0;}
   function caml_string_greaterthan(s1, s2){return caml_string_lessthan(s2, s1);
   }
   function caml_string_hash(h, v){
    var h = caml_hash_mix_string(h, v), h = caml_hash_mix_final(h);
    return h & 0x3FFFFFFF;
   }
   function caml_string_notequal(s1, s2){
    return 1 - caml_string_equal(s1, s2);
   }
   function caml_string_set(s, i, c){caml_failwith("caml_string_set");}
   function caml_string_set16(s, i, i16){caml_failwith("caml_string_set16");}
   function caml_string_set32(s, i, i32){caml_failwith("caml_string_set32");}
   function caml_string_set64(s, i, i64){caml_failwith("caml_string_set64");}
   function caml_string_unsafe_set(s, i, c){
    caml_failwith("caml_string_unsafe_set");
   }
   function caml_sys_argv(a){return caml_argv;}
   function caml_sys_chdir(dir){
    var root = resolve_fs_device(dir);
    if(root.device.exists(root.rest)){
     if(root.rest)
      caml_current_dir = caml_trailing_slash(root.path + root.rest);
     else
      caml_current_dir = root.path;
     return 0;
    }
    else
     caml_raise_no_such_file(caml_jsbytes_of_string(dir));
   }
   function caml_sys_const_backend_type(){
    return [0, caml_string_of_jsbytes("js_of_ocaml")];
   }
   function caml_sys_const_big_endian(){return 0;}
   function caml_sys_const_int_size(){return 32;}
   function caml_sys_const_max_wosize(){return 0x7FFFFFFF / 4 | 0;}
   function caml_sys_const_naked_pointers_checked(_unit){return 0;}
   var
    os_type =
      globalThis.process && globalThis.process.platform
       && globalThis.process.platform == "win32"
       ? "Cygwin"
       : "Unix";
   function caml_sys_const_ostype_cygwin(){return os_type == "Cygwin" ? 1 : 0;
   }
   function caml_sys_const_ostype_unix(){return os_type == "Unix" ? 1 : 0;}
   function caml_sys_const_ostype_win32(){return os_type == "Win32" ? 1 : 0;}
   function caml_sys_const_word_size(){return 32;}
   function caml_sys_executable_name(a){return caml_executable_name;}
   function caml_sys_exit(code){
    if(globalThis.quit) globalThis.quit(code);
    if(globalThis.process && globalThis.process.exit)
     globalThis.process.exit(code);
    caml_invalid_argument("Function 'exit' not implemented");
   }
   function caml_sys_file_exists(name){
    var root = resolve_fs_device(name);
    return root.device.exists(root.rest);
   }
   function caml_sys_get_argv(a){return [0, caml_argv[1], caml_argv];}
   function caml_sys_get_config(){
    return [0, caml_string_of_jsbytes(os_type), 32, 0];
   }
   function caml_sys_getcwd(){
    return caml_string_of_jsbytes(caml_current_dir);
   }
   function caml_sys_getenv(name){
    var r = jsoo_sys_getenv(caml_jsstring_of_string(name));
    if(r === undefined) caml_raise_not_found();
    return caml_string_of_jsstring(r);
   }
   function caml_sys_is_directory(name){
    var root = resolve_fs_device(name), a = root.device.is_dir(root.rest);
    return a ? 1 : 0;
   }
   function caml_sys_is_regular_file(name){
    var root = resolve_fs_device(name);
    return root.device.isFile(root.rest);
   }
   function caml_sys_isatty(_chan){return 0;}
   function caml_sys_mkdir(name, perm){
    var root = resolve_fs_device(name);
    root.device.mkdir(root.rest, perm);
    return 0;
   }
   function caml_sys_modify_argv(arg){caml_argv = arg; return 0;}
   function caml_sys_random_seed(){
    if(globalThis.crypto)
     if(globalThis.crypto.getRandomValues){
      var a = globalThis.crypto.getRandomValues(new Int32Array(4));
      return [0, a[0], a[1], a[2], a[3]];
     }
     else if(globalThis.crypto.randomBytes){
      var a = new Int32Array(globalThis.crypto.randomBytes(16).buffer);
      return [0, a[0], a[1], a[2], a[3]];
     }
    var now = new Date().getTime(), x = now ^ 0xffffffff * Math.random();
    return [0, x];
   }
   function caml_sys_read_directory(name){
    var
     root = resolve_fs_device(name),
     a = root.device.readdir(root.rest),
     l = new Array(a.length + 1);
    l[0] = 0;
    for(var i = 0; i < a.length; i++) l[i + 1] = caml_string_of_jsbytes(a[i]);
    return l;
   }
   function caml_sys_remove(name){
    var root = resolve_fs_device(name), ok = root.device.unlink(root.rest);
    if(ok == 0) caml_raise_no_such_file(caml_jsbytes_of_string(name));
    return 0;
   }
   function caml_sys_rename(o, n){
    var o_root = resolve_fs_device(o), n_root = resolve_fs_device(n);
    if(o_root.device != n_root.device)
     caml_failwith("caml_sys_rename: cannot move file between two filesystem");
    if(! o_root.device.rename)
     caml_failwith("caml_sys_rename: no implemented");
    o_root.device.rename(o_root.rest, n_root.rest);
   }
   function caml_sys_rmdir(name){
    var root = resolve_fs_device(name);
    root.device.rmdir(root.rest);
    return 0;
   }
   function caml_sys_system_command(cmd){
    var cmd = caml_jsstring_of_string(cmd);
    if(typeof require != "undefined"){
     var child_process = require("child_process");
     if(child_process && child_process.execSync)
      try{child_process.execSync(cmd, {stdio: "inherit"}); return 0;}
      catch(e){return 1;}
    }
    else
     return 127;
   }
   var caml_initial_time = new Date().getTime() * 0.001;
   function caml_sys_time(){
    var now = new Date().getTime();
    return now * 0.001 - caml_initial_time;
   }
   function caml_sys_time_include_children(b){return caml_sys_time();}
   function caml_sys_unsafe_getenv(name){return caml_sys_getenv(name);}
   function caml_tanh_float(x){return Math.tanh(x);}
   function caml_to_js_string(s){return caml_jsstring_of_string(s);}
   function caml_trampoline(res){
    var c = 1;
    while(res && res.joo_tramp){
     res = res.joo_tramp.apply(null, res.joo_args);
     c++;
    }
    return res;
   }
   function caml_trampoline_return(f, args){return {joo_tramp: f, joo_args: args};
   }
   function caml_trunc_float(x){return Math.trunc(x);}
   function caml_unix_cleanup(){}
   function caml_unix_closedir(dir_handle){
    try{dir_handle.pointer.closeSync();}
    catch(e){
     var unix_error = caml_named_value("Unix.Unix_error");
     caml_raise_with_args
      (unix_error, make_unix_err_args("EBADF", "closedir", dir_handle.path));
    }
   }
   function caml_unix_filedescr_of_fd(x){return x;}
   function caml_unix_findclose(dir_handle){return caml_unix_closedir(dir_handle);
   }
   function caml_unix_opendir(path){
    var root = resolve_fs_device(path);
    if(! root.device.opendir)
     caml_failwith("caml_unix_opendir: not implemented");
    var dir_handle = root.device.opendir(root.rest, true);
    return {pointer: dir_handle, path: path};
   }
   function caml_unix_readdir(dir_handle){
    var entry;
    try{entry = dir_handle.pointer.readSync();}
    catch(e){
     var unix_error = caml_named_value("Unix.Unix_error");
     caml_raise_with_args
      (unix_error, make_unix_err_args("EBADF", "readdir", dir_handle.path));
    }
    if(entry === null)
     caml_raise_end_of_file();
    else
     return caml_string_of_jsstring(entry.name);
   }
   function caml_unix_findfirst(path){
    var path_js = caml_jsstring_of_string(path);
    path_js = path_js.replace(/(^|[\\\/])\*\.\*$/, "");
    path = caml_string_of_jsstring(path_js);
    var
     dir_handle = caml_unix_opendir(path),
     first_entry = caml_unix_readdir(dir_handle);
    return [0, first_entry, dir_handle];
   }
   function caml_unix_findnext(dir_handle){return caml_unix_readdir(dir_handle);
   }
   function caml_unix_getpwuid(unit){caml_raise_not_found();}
   function caml_unix_gettimeofday(){return new Date().getTime() / 1000;}
   function caml_unix_getuid(unit){
    if(globalThis.process && globalThis.process.getuid)
     return globalThis.process.getuid();
    caml_raise_not_found();
   }
   function caml_unix_gmtime(t){
    var
     d = new Date(t * 1000),
     d_num = d.getTime(),
     januaryfirst = new Date(Date.UTC(d.getUTCFullYear(), 0, 1)).getTime(),
     doy = Math.floor((d_num - januaryfirst) / 86400000);
    return [0,
            d.getUTCSeconds(),
            d.getUTCMinutes(),
            d.getUTCHours(),
            d.getUTCDate(),
            d.getUTCMonth(),
            d.getUTCFullYear() - 1900,
            d.getUTCDay(),
            doy,
            false | 0];
   }
   function caml_unix_has_symlink(unit){return fs_node_supported() ? 1 : 0;}
   function caml_unix_inet_addr_of_string(){return 0;}
   function caml_unix_isatty(fileDescriptor){
    if(fs_node_supported()){
     var tty = require("tty");
     return tty.isatty(fileDescriptor) ? 1 : 0;
    }
    else
     return 0;
   }
   function caml_unix_localtime(t){
    var
     d = new Date(t * 1000),
     d_num = d.getTime(),
     januaryfirst = new Date(d.getFullYear(), 0, 1).getTime(),
     doy = Math.floor((d_num - januaryfirst) / 86400000),
     jan = new Date(d.getFullYear(), 0, 1),
     jul = new Date(d.getFullYear(), 6, 1),
     stdTimezoneOffset =
       Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());
    return [0,
            d.getSeconds(),
            d.getMinutes(),
            d.getHours(),
            d.getDate(),
            d.getMonth(),
            d.getFullYear() - 1900,
            d.getDay(),
            doy,
            d.getTimezoneOffset() < stdTimezoneOffset | 0];
   }
   function caml_unix_lstat(name){
    var root = resolve_fs_device(name);
    if(! root.device.lstat) caml_failwith("caml_unix_lstat: not implemented");
    return root.device.lstat(root.rest, true);
   }
   function caml_unix_lstat_64(name){
    var r = caml_unix_lstat(name);
    r[9] = caml_int64_of_int32(r[9]);
    return r;
   }
   function caml_unix_mkdir(name, perm){
    var root = resolve_fs_device(name);
    if(! root.device.mkdir) caml_failwith("caml_unix_mkdir: not implemented");
    return root.device.mkdir(root.rest, perm, true);
   }
   function caml_unix_mktime(tm){
    var
     d = new Date(tm[6] + 1900, tm[5], tm[4], tm[3], tm[2], tm[1]).getTime(),
     t = Math.floor(d / 1000),
     tm2 = caml_unix_localtime(t);
    return [0, t, tm2];
   }
   function caml_unix_readlink(name){
    var root = resolve_fs_device(name);
    if(! root.device.readlink)
     caml_failwith("caml_unix_readlink: not implemented");
    return root.device.readlink(root.rest, true);
   }
   function caml_unix_rewinddir(dir_handle){
    caml_unix_closedir(dir_handle);
    var new_dir_handle = caml_unix_opendir(dir_handle.path);
    dir_handle.pointer = new_dir_handle.pointer;
    return 0;
   }
   function caml_unix_rmdir(name){
    var root = resolve_fs_device(name);
    if(! root.device.rmdir) caml_failwith("caml_unix_rmdir: not implemented");
    return root.device.rmdir(root.rest, true);
   }
   function caml_unix_startup(){}
   function caml_unix_stat(name){
    var root = resolve_fs_device(name);
    if(! root.device.stat) caml_failwith("caml_unix_stat: not implemented");
    return root.device.stat(root.rest, true);
   }
   function caml_unix_stat_64(name){
    var r = caml_unix_stat(name);
    r[9] = caml_int64_of_int32(r[9]);
    return r;
   }
   function caml_unix_symlink(to_dir, src, dst){
    var src_root = resolve_fs_device(src), dst_root = resolve_fs_device(dst);
    if(src_root.device != dst_root.device)
     caml_failwith
      ("caml_unix_symlink: cannot symlink between two filesystems");
    if(! src_root.device.symlink)
     caml_failwith("caml_unix_symlink: not implemented");
    return src_root.device.symlink(to_dir, src_root.rest, dst_root.rest, true);
   }
   function caml_unix_time(){return Math.floor(caml_unix_gettimeofday());}
   function caml_unix_unlink(name){
    var root = resolve_fs_device(name);
    if(! root.device.unlink)
     caml_failwith("caml_unix_unlink: not implemented");
    return root.device.unlink(root.rest, true);
   }
   function caml_unmount(name){
    var
     path = caml_make_path(name),
     name = caml_trailing_slash(path.join("/")),
     idx = - 1;
    for(var i = 0; i < jsoo_mount_point.length; i++)
     if(jsoo_mount_point[i].path == name) idx = i;
    if(idx > - 1) jsoo_mount_point.splice(idx, 1);
    return 0;
   }
   function caml_update_dummy(x, y){
    if(y.fun){x.fun = y.fun; return 0;}
    if(typeof y === "function"){x.fun = y; return 0;}
    var i = y.length;
    while(i--) x[i] = y[i];
    return 0;
   }
   function caml_weak_set(x, i, v){
    if(v == 0) caml_ephe_unset_key(x, i); else caml_ephe_set_key(x, i, v[1]);
    return 0;
   }
   function caml_wrap_exception(e){
    {
     if(e instanceof Array) return e;
     var exn;
     if
      (globalThis.RangeError && e instanceof globalThis.RangeError
       && e.message
       && e.message.match(/maximum call stack/i))
      exn = caml_global_data.Stack_overflow;
     else if
      (globalThis.InternalError && e instanceof globalThis.InternalError
       && e.message
       && e.message.match(/too much recursion/i))
      exn = caml_global_data.Stack_overflow;
     else if(e instanceof globalThis.Error && caml_named_value("jsError"))
      exn = [0, caml_named_value("jsError"), e];
     else
      exn = [0, caml_global_data.Failure, caml_string_of_jsstring(String(e))];
     if(e instanceof globalThis.Error) exn.js_error = e;
     return exn;
    }
   }
   function caml_xmlhttprequest_create(unit){
    if(typeof globalThis.XMLHttpRequest !== "undefined")
     try{return new globalThis.XMLHttpRequest;}catch(e){}
    if(typeof globalThis.activeXObject !== "undefined"){
     try{return new globalThis.activeXObject("Msxml2.XMLHTTP");}catch(e){}
     try{return new globalThis.activeXObject("Msxml3.XMLHTTP");}catch(e){}
     try{return new globalThis.activeXObject("Microsoft.XMLHTTP");}catch(e){}
    }
    caml_failwith("Cannot create a XMLHttpRequest");
   }
   function compare_digits_nat(nat1, ofs1, nat2, ofs2){
    if(nat1.data[ofs1] > nat2.data[ofs2]) return 1;
    if(nat1.data[ofs1] < nat2.data[ofs2]) return - 1;
    return 0;
   }
   function compare_nat(nat1, ofs1, len1, nat2, ofs2, len2){
    var
     a = num_digits_nat(nat1, ofs1, len1),
     b = num_digits_nat(nat2, ofs2, len2);
    if(a > b) return 1;
    if(a < b) return - 1;
    for(var i = len1 - 1; i >= 0; i--){
     if(nat1.data[ofs1 + i] >>> 0 > nat2.data[ofs2 + i] >>> 0) return 1;
     if(nat1.data[ofs1 + i] >>> 0 < nat2.data[ofs2 + i] >>> 0) return - 1;
    }
    return 0;
   }
   function compare_nat_real(nat1, nat2){
    return compare_nat(nat1, 0, nat1.data.length, nat2, 0, nat2.data.length);
   }
   function complement_nat(nat, ofs, len){
    for(var i = 0; i < len; i++)
     nat.data[ofs + i] = (- 1 >>> 0) - (nat.data[ofs + i] >>> 0);
   }
   function create_nat(size){
    var arr = new MlNat(size);
    for(var i = 0; i < size; i++) arr.data[i] = - 1;
    return arr;
   }
   function decr_nat(nat, ofs, len, carry_in){
    var borrow = carry_in == 1 ? 0 : 1;
    for(var i = 0; i < len; i++){
     var x = (nat.data[ofs + i] >>> 0) - borrow;
     nat.data[ofs + i] = x;
     if(x >= 0){borrow = 0; break;} else borrow = 1;
    }
    return borrow == 1 ? 0 : 1;
   }
   function deserialize_nat(reader, sz){
    var len = reader.read32s(), nat = new MlNat(len);
    for(var i = 0; i < len; i++) nat.data[i] = reader.read32s();
    sz[0] = len * 4;
    return nat;
   }
   function div_helper(a, b, c){
    var
     x = a * 65536 + (b >>> 16),
     y = Math.floor(x / c) * 65536,
     z = x % c * 65536,
     w = z + (b & 0x0000FFFF);
    return [y + Math.floor(w / c), w % c];
   }
   function div_digit_nat(natq, ofsq, natr, ofsr, nat1, ofs1, len, nat2, ofs2){
    var rem = nat1.data[ofs1 + len - 1] >>> 0;
    for(var i = len - 2; i >= 0; i--){
     var
      x = div_helper(rem, nat1.data[ofs1 + i] >>> 0, nat2.data[ofs2] >>> 0);
     natq.data[ofsq + i] = x[0];
     rem = x[1];
    }
    natr.data[ofsr] = rem;
    return 0;
   }
   function num_leading_zero_bits_in_digit(nat, ofs){
    var a = nat.data[ofs], b = 0;
    if(a & 0xFFFF0000){b += 16; a >>>= 16;}
    if(a & 0xFF00){b += 8; a >>>= 8;}
    if(a & 0xF0){b += 4; a >>>= 4;}
    if(a & 12){b += 2; a >>>= 2;}
    if(a & 2){b += 1; a >>>= 1;}
    if(a & 1) b += 1;
    return 32 - b;
   }
   function shift_left_nat(nat1, ofs1, len1, nat2, ofs2, nbits){
    if(nbits == 0){nat2.data[ofs2] = 0; return 0;}
    var wrap = 0;
    for(var i = 0; i < len1; i++){
     var a = nat1.data[ofs1 + i] >>> 0;
     nat1.data[ofs1 + i] = a << nbits | wrap;
     wrap = a >>> 32 - nbits;
    }
    nat2.data[ofs2] = wrap;
    return 0;
   }
   function shift_right_nat(nat1, ofs1, len1, nat2, ofs2, nbits){
    if(nbits == 0){nat2.data[ofs2] = 0; return 0;}
    var wrap = 0;
    for(var i = len1 - 1; i >= 0; i--){
     var a = nat1.data[ofs1 + i] >>> 0;
     nat1.data[ofs1 + i] = a >>> nbits | wrap;
     wrap = a << 32 - nbits;
    }
    nat2.data[ofs2] = wrap;
    return 0;
   }
   function set_to_zero_nat(nat, ofs, len){
    for(var i = 0; i < len; i++) nat.data[ofs + i] = 0;
    return 0;
   }
   function nat_of_array(l){return new MlNat(l);}
   function mult_digit_nat(nat1, ofs1, len1, nat2, ofs2, len2, nat3, ofs3){
    var carry = 0, a = nat3.data[ofs3] >>> 0;
    for(var i = 0; i < len2; i++){
     var
      x1 =
        (nat1.data[ofs1 + i] >>> 0)
        + (nat2.data[ofs2 + i] >>> 0) * (a & 0x0000FFFF)
        + carry,
      x2 = (nat2.data[ofs2 + i] >>> 0) * (a >>> 16);
     carry = Math.floor(x2 / 65536);
     var x3 = x1 + x2 % 65536 * 65536;
     nat1.data[ofs1 + i] = x3;
     carry += Math.floor(x3 / 4294967296);
    }
    return len2 < len1 && carry
            ? add_nat
              (nat1, ofs1 + len2, len1 - len2, nat_of_array([carry]), 0, 1, 0)
            : carry;
   }
   function sub_nat(nat1, ofs1, len1, nat2, ofs2, len2, carry_in){
    var borrow = carry_in == 1 ? 0 : 1;
    for(var i = 0; i < len2; i++){
     var
      x = (nat1.data[ofs1 + i] >>> 0) - (nat2.data[ofs2 + i] >>> 0) - borrow;
     nat1.data[ofs1 + i] = x;
     if(x >= 0) borrow = 0; else borrow = 1;
    }
    return decr_nat(nat1, ofs1 + len2, len1 - len2, borrow == 1 ? 0 : 1);
   }
   function div_nat(nat1, ofs1, len1, nat2, ofs2, len2){
    if(len2 == 1){
     div_digit_nat(nat1, ofs1 + 1, nat1, ofs1, nat1, ofs1, len1, nat2, ofs2);
     return 0;
    }
    var s = num_leading_zero_bits_in_digit(nat2, ofs2 + len2 - 1);
    shift_left_nat(nat2, ofs2, len2, nat_of_array([0]), 0, s);
    shift_left_nat(nat1, ofs1, len1, nat_of_array([0]), 0, s);
    var d = (nat2.data[ofs2 + len2 - 1] >>> 0) + 1, a = create_nat(len2 + 1);
    for(var i = len1 - 1; i >= len2; i--){
     var
      quo =
        d == 4294967296
         ? nat1.data[ofs1 + i] >>> 0
         : div_helper
            (nat1.data[ofs1 + i] >>> 0, nat1.data[ofs1 + i - 1] >>> 0, d)
           [0];
     set_to_zero_nat(a, 0, len2 + 1);
     mult_digit_nat(a, 0, len2 + 1, nat2, ofs2, len2, nat_of_array([quo]), 0);
     sub_nat(nat1, ofs1 + i - len2, len2 + 1, a, 0, len2 + 1, 1);
     while
     (nat1.data[ofs1 + i] != 0
      || compare_nat(nat1, ofs1 + i - len2, len2, nat2, ofs2, len2) >= 0){
      quo = quo + 1;
      sub_nat(nat1, ofs1 + i - len2, len2 + 1, nat2, ofs2, len2, 1);
     }
     nat1.data[ofs1 + i] = quo;
    }
    shift_right_nat(nat1, ofs1, len2, nat_of_array([0]), 0, s);
    shift_right_nat(nat2, ofs2, len2, nat_of_array([0]), 0, s);
    return 0;
   }
   function serialize_nat(writer, nat, sz){
    var len = nat.data.length;
    writer.write(32, len);
    for(var i = 0; i < len; i++) writer.write(32, nat.data[i]);
    sz[0] = len * 4;
    sz[1] = len * 8;
   }
   function initialize_nat(){
    caml_custom_ops["_nat"] =
     {deserialize: deserialize_nat,
      serialize: serialize_nat,
      hash: caml_hash_nat};
   }
   function is_digit_int(nat, ofs){if(nat.data[ofs] >= 0) return 1; return 0;}
   function is_digit_odd(nat, ofs){if(nat.data[ofs] & 1) return 1; return 0;}
   function is_digit_zero(nat, ofs){
    if(nat.data[ofs] == 0) return 1;
    return 0;
   }
   function jsoo_create_file_extern(name, content){
    if(globalThis.jsoo_create_file)
     globalThis.jsoo_create_file(name, content);
    else{
     if(! globalThis.caml_fs_tmp) globalThis.caml_fs_tmp = [];
     globalThis.caml_fs_tmp.push({name: name, content: content});
    }
    return 0;
   }
   function jsoo_effect_not_supported(){
    caml_failwith("Effect handlers are not supported");
   }
   function land_digit_nat(nat1, ofs1, nat2, ofs2){nat1.data[ofs1] &= nat2.data[ofs2]; return 0;
   }
   function length_nat(x){return x.data.length;}
   function lor_digit_nat(nat1, ofs1, nat2, ofs2){nat1.data[ofs1] |= nat2.data[ofs2]; return 0;
   }
   function lxor_digit_nat(nat1, ofs1, nat2, ofs2){nat1.data[ofs1] ^= nat2.data[ofs2]; return 0;
   }
   function ml_canvas_arc(canvas, p, radius, theta1, theta2, ccw){
    canvas.ctxt.arc(p[1], p[2], radius, theta1, theta2, ccw);
    return 0;
   }
   function ml_canvas_arc_to(canvas, p1, p2, radius){
    canvas.ctxt.arcTo(p1[1], p1[2], p2[1], p2[2], radius);
    return 0;
   }
   function ml_canvas_bezier_curve_to(canvas, p1, p2, p3){
    canvas.ctxt.bezierCurveTo(p1[1], p1[2], p2[1], p2[2], p3[1], p3[2]);
    return 0;
   }
   function ml_canvas_blit(dst_canvas, dpos, src_canvas, spos, size){
    var width = size[1], height = size[2];
    if(! _ml_canvas_valid_canvas_size(width, height))
     caml_invalid_argument("Canvas.blit: invalid dimensions");
    dst_canvas.ctxt.drawImage
     (src_canvas.surface,
      spos[1],
      spos[2],
      width,
      height,
      dpos[1],
      dpos[2],
      width,
      height);
    return 0;
   }
   function ml_canvas_clear_path(canvas){canvas.ctxt.beginPath(); return 0;}
   function ml_canvas_clip(canvas, nonzero){
    if(nonzero) canvas.ctxt.clip("nonzero"); else canvas.ctxt.clip();
    return 0;
   }
   function ml_canvas_clip_path(canvas, path, nonzero){
    if(nonzero)
     canvas.ctxt.clip(path, "nonzero");
    else
     canvas.ctxt.clip(path);
    return 0;
   }
   function ml_canvas_close_path(canvas){canvas.ctxt.closePath(); return 0;}
   function ml_canvas_commit(canvas){return 0;}
   function ml_canvas_compare(canvas1, canvas2){
    if(canvas1.id < canvas2.id)
     return - 1;
    else if(canvas1.id > canvas2.id) return 1; else return 0;
   }
   function ml_canvas_create_offscreen(size){
    _ml_canvas_ensure_initialized();
    var width = size[1], height = size[2];
    if(! _ml_canvas_valid_canvas_size(width, height))
     caml_invalid_argument("Canvas.createOffscreen: invalid dimensions");
    var
     id = ++_next_id,
     canvas =
       {name: null,
        frame: null,
        header: null,
        surface: surface,
        ctxt: ctxt,
        x: 0,
        y: 0,
        width: width,
        height: height,
        id: id,
        autocommit: false,
        resizeable: false,
        minimize: false,
        maximize: false,
        close: false},
     surface = document.createElement("canvas");
    surface.id = "s" + id;
    surface.width = width;
    surface.height = height;
    surface.style.position = "absolute";
    surface.canvas = canvas;
    canvas.surface = surface;
    var ctxt = surface.getContext("2d");
    ctxt.globalAlpha = 1.0;
    ctxt.lineWidth = 2.0;
    ctxt.fillStyle = "white";
    ctxt.strokeStyle = "black";
    canvas.ctxt = ctxt;
    return canvas;
   }
   function ml_canvas_create_offscreen_from_image_data(data){
    _ml_canvas_ensure_initialized();
    var
     width = caml_ba_dim(data, 1),
     height = caml_ba_dim(data, 0),
     canvas = ml_canvas_create_offscreen([0, width, height]);
    if(canvas === null) return null;
    var
     sta = new window.Uint8Array(caml_ba_to_typed_array(data).buffer),
     dta = new window.Uint8ClampedArray(sta.length);
    for(var i = 0; i < sta.length; i += 4){
     dta[i + 0] = sta[i + 2];
     dta[i + 1] = sta[i + 1];
     dta[i + 2] = sta[i + 0];
     dta[i + 3] = sta[i + 3];
    }
    if(window.ImageData === undefined){
     var image = canvas.ctxt.createImageData(width, height);
     image.data.set(dta);
    }
    else
     var image = new window.ImageData(dta, width, height);
    canvas.ctxt.putImageData(image, 0, 0);
    return canvas;
   }
   function ml_canvas_create_offscreen_from_png(filename, onload){
    _ml_canvas_ensure_initialized();
    var img = _ml_canvas_image_of_png_file(filename);
    if(img === null){
     caml_raise_with_string(caml_named_value("Read_png_failed"), filename);
     return 0;
    }
    img[0].then
     (function(__img){
       var
        canvas = ml_canvas_create_offscreen([0, img[1].width, img[1].height]);
       if(canvas === null) return 0;
       canvas.ctxt.drawImage(img[1], 0, 0);
       onload(canvas);
       return 0;
      });
    return 0;
   }
   function ml_canvas_create_onscreen
   (autocommit,
    decorated,
    resizeable,
    minimize,
    maximize,
    close,
    title,
    target,
    pos,
    size){
    _ml_canvas_ensure_initialized();
    var width = size[1], height = size[2];
    if(! _ml_canvas_valid_canvas_size(width, height))
     caml_invalid_argument("Canvas.blit: invalid dimensions");
    var
     pos = Optional_val(pos, [0, 0, 0]),
     x = pos[1],
     y = pos[2],
     autocommit = Optional_bool_val(autocommit, true),
     decorated = false,
     resizeable = Optional_bool_val(resizeable, true),
     minimize = Optional_bool_val(minimize, true),
     maximize = Optional_bool_val(maximize, true),
     close = Optional_bool_val(close, true),
     title = Optional_val(title, null),
     target = Optional_val(target, null);
    target = document.getElementById(target);
    if(target == null) target = document.body;
    var
     id = ++_next_id,
     canvas =
       {name: title,
        target: target,
        frame: null,
        header: null,
        surface: null,
        ctxt: null,
        x: x,
        y: y,
        width: width,
        height: height,
        id: id,
        autocommit: autocommit,
        resizeable: resizeable,
        minimize: minimize,
        maximize: maximize,
        close: close},
     header_height = decorated == true ? 30 : 0,
     frame = document.createElement("div");
    frame.id = "f" + id;
    if(resizeable == true){
     frame.style.width = "100%";
     frame.style.height = "100%";
    }
    else{
     frame.style.width = width + "px";
     frame.style.height = height + header_height + "px";
    }
    frame.style.visibility = "hidden";
    frame.oncontextmenu = function(){return false;};
    frame.canvas = canvas;
    canvas.frame = frame;
    target.appendChild(frame);
    var header = null;
    if(decorated === true){
     frame.style.border = "1px solid black";
     header = document.createElement("canvas");
     header.id = "h" + id;
     header.width = width;
     header.height = 30;
     _ml_canvas_decorate(header, minimize, maximize, close, title);
     header.onmousedown = _header_down_handler;
     header.canvas = canvas;
     canvas.header = header;
     frame.appendChild(header);
    }
    var surface = document.createElement("canvas");
    surface.id = "s" + id;
    surface.width = width;
    surface.height = height;
    surface.onmousedown = _surface_down_handler;
    surface.canvas = canvas;
    canvas.surface = surface;
    frame.appendChild(surface);
    if(resizeable === true){
     surface.style.width = "100%";
     surface.style.height = "100%";
     _resize.observe(surface);
    }
    var ctxt = surface.getContext("2d");
    ctxt.globalAlpha = 1.0;
    ctxt.lineWidth = 1.0;
    ctxt.fillStyle = "white";
    ctxt.strokeStyle = "black";
    canvas.ctxt = ctxt;
    ctxt.fillRect(0, 0, width, height);
    return canvas;
   }
   function ml_canvas_ellipse
   (canvas, p, radius, rotation, theta1, theta2, ccw){
    canvas.ctxt.ellipse
     (p[1], p[2], radius[1], radius[2], rotation, theta1, theta2, ccw);
    return 0;
   }
   function ml_canvas_export_png(canvas, filename){
    try{
     var data = canvas.surface.toDataURL("image/png").substring(22);
     caml_create_file(filename, window.atob(data));
    }
    catch(exn){
     caml_raise_with_string(caml_named_value("Write_png_failed"), filename);
    }
    return 0;
   }
   function ml_canvas_fill(canvas, nonzero){
    if(nonzero) canvas.ctxt.fill("nonzero"); else canvas.ctxt.fill();
    return 0;
   }
   function ml_canvas_fill_path(canvas, path, nonzero){
    if(nonzero)
     canvas.ctxt.fill(path, "nonzero");
    else
     canvas.ctxt.fill(path);
    return 0;
   }
   function ml_canvas_fill_rect(canvas, pos, size){
    canvas.ctxt.fillRect(pos[1], pos[2], size[1], size[2]);
    return 0;
   }
   function ml_canvas_fill_text(canvas, text, pos){
    canvas.ctxt.fillText(caml_jsstring_of_string(text), pos[1], pos[2]);
    return 0;
   }
   function ml_canvas_get_canvas(id){
    _ml_canvas_ensure_initialized();
    var surface = document.getElementById("s" + id);
    if(surface === null){caml_raise_not_found(); return 0;}
    return surface.canvas;
   }
   function ml_canvas_get_current_timestamp(){
    _ml_canvas_ensure_initialized();
    var e = new window.Event("dummy");
    return caml_int64_of_float(e.timeStamp * 1000.0);
   }
   function ml_canvas_get_fill_color(canvas){
    return typeof canvas.ctxt.fillStyle == "string"
            ? _int_of_color(canvas.ctxt.fillStyle)
            : 0;
   }
   function ml_canvas_get_fill_style(canvas){
    return Draw_style_val(canvas.ctxt.fillStyle);
   }
   function ml_canvas_get_global_alpha(canvas){return canvas.ctxt.globalAlpha;
   }
   function ml_canvas_get_global_composite_operation(canvas){return Val_compop(canvas.ctxt.globalCompositeOperation);
   }
   function ml_canvas_get_id(canvas){return canvas.id;}
   function ml_canvas_get_image_data(canvas, pos, size){
    var width = size[1], height = size[2];
    if(! _ml_canvas_valid_canvas_size(width, height))
     caml_invalid_argument("Canvas.getImageData: invalid dimensions");
    var
     image = canvas.ctxt.getImageData(pos[1], pos[2], width, height),
     sta = new window.Uint8Array(image.data.buffer),
     dta = new window.Uint8Array(sta.length);
    for(var i = 0; i < sta.length; i += 4){
     dta[i + 0] = sta[i + 2];
     dta[i + 1] = sta[i + 1];
     dta[i + 2] = sta[i + 0];
     dta[i + 3] = sta[i + 3];
    }
    return caml_ba_create_unsafe(3, 0, [height, width, 4], dta);
   }
   function ml_canvas_get_line_cap(canvas){return Val_cap_type(canvas.lineCap);
   }
   function ml_canvas_get_line_dash(canvas){
    var arr = canvas.ctxt.getLineDash();
    arr.unshift(254);
    return arr;
   }
   function ml_canvas_get_line_dash_offset(canvas){return canvas.ctxt.lineDashOffset;
   }
   function ml_canvas_get_line_join(canvas){return Val_join_type(canvas.lineJoin);
   }
   function ml_canvas_get_line_width(canvas){return canvas.ctxt.lineWidth;}
   function ml_canvas_get_miter_limit(canvas){return canvas.ctxt.miterLimit;}
   function ml_canvas_get_pixel(canvas, pos){
    var image = canvas.ctxt.getImageData(pos[1], pos[2], 1, 1);
    return image.data[3] << 24 >>> 0 | image.data[0] << 16
           | image.data[1] << 8
           | image.data[2] << 0;
   }
   function ml_canvas_get_position(canvas){
    return canvas.frame !== null ? [0, canvas.x, canvas.y] : [0, 0, 0];
   }
   function ml_canvas_get_shadow_blur(canvas){return canvas.ctxt.shadowBlur;}
   function ml_canvas_get_shadow_color(canvas){
    return _int_of_color(canvas.ctxt.shadowColor);
   }
   function ml_canvas_get_shadow_offset(canvas, offset){
    return [0, canvas.ctxt.shadowOffsetX, canvas.ctxt.shadowOffsetY];
   }
   function ml_canvas_get_size(canvas){
    return [0, canvas.width, canvas.height];
   }
   function ml_canvas_get_stroke_color(canvas){
    return typeof canvas.ctxt.strokeStyle == "string"
            ? _int_of_color(canvas.ctxt.strokeStyle)
            : 0;
   }
   function ml_canvas_get_stroke_style(canvas){
    return Draw_style_val(canvas.ctxt.strokeStyle);
    return 0;
   }
   function ml_canvas_gradient_add_color_stop(gradient, color, pos){gradient.addColorStop(pos, _color_of_int(color)); return 0;
   }
   function ml_canvas_gradient_create_conic(center, angle){
    return _internal_ctxt.createConicGradient(angle, center[1], center[2]);
   }
   function ml_canvas_gradient_create_linear(pos1, pos2){
    return _internal_ctxt.createLinearGradient
            (pos1[1], pos1[2], pos2[1], pos2[2]);
   }
   function ml_canvas_gradient_create_radial(center1, rad1, center2, rad2){
    return _internal_ctxt.createRadialGradient
            (center1[1], center1[2], rad1, center2[1], center2[2], rad2);
   }
   function ml_canvas_hash(canvas){
    var hash = caml_named_value("Hashtbl.hash");
    return hash(canvas.id);
   }
   function ml_canvas_image_data_blit(dst_data, dpos, src_data, spos, size){
    var width = size[1], height = size[2];
    if(! _ml_canvas_valid_canvas_size(width, height))
     caml_invalid_argument("ImageData.blit: invalid dimensions");
    var
     dwidth = caml_ba_dim(dst_data, 1),
     dheight = caml_ba_dim(dst_data, 0),
     swidth = caml_ba_dim(src_data, 1),
     sheight = caml_ba_dim(src_data, 0),
     blit_info =
       _ml_canvas_adjust_blit_info
        (dwidth,
         dheight,
         dpos[1],
         dpos[2],
         swidth,
         sheight,
         spos[1],
         spos[2],
         width,
         height),
     dx = blit_info[0],
     dy = blit_info[1],
     sx = blit_info[2],
     sy = blit_info[3],
     width = blit_info[4],
     height = blit_info[5];
    if(width > 0 && height > 0){
     var
      dta = new window.Uint32Array(caml_ba_to_typed_array(dst_data).buffer),
      sta = new window.Uint32Array(caml_ba_to_typed_array(src_data).buffer);
     for(var y = 0; y < height; ++y)
      for(var x = 0; x < width; ++x)
       dta[(dy + y) * dwidth + (dx + x)] = sta[(sy + y) * swidth + (sx + x)];
    }
    return 0;
   }
   function ml_canvas_image_data_create_from_png(filename, onload){
    _ml_canvas_ensure_initialized();
    var img = _ml_canvas_image_of_png_file(filename);
    if(img === null){
     caml_raise_with_string(caml_named_value("Read_png_failed"), filename);
     return 0;
    }
    img[0].then
     (function(__img){
       var ba = _ml_canvas_ba_of_img(img[1]);
       onload(ba);
       return 0;
      });
    return 0;
   }
   function ml_canvas_image_data_export_png(data, filename){
    _ml_canvas_ensure_initialized();
    try{
     var surface = _ml_canvas_surface_of_ba(data);
     if(surface !== null){
      var data = surface.toDataURL("image/png").substring(22);
      caml_create_file(filename, window.atob(data));
     }
    }
    catch(exn){
     caml_raise_with_string(caml_named_value("Write_png_failed"), filename);
    }
    return 0;
   }
   function ml_canvas_image_data_fill(data, color){
    var ta = new window.Uint32Array(caml_ba_to_typed_array(data).buffer);
    for(var i = 0; i < ta.length; i++) ta[i] = color;
    return 0;
   }
   function ml_canvas_image_data_get_pixel(data, pos){
    var ta = new window.Uint32Array(caml_ba_to_typed_array(data).buffer);
    return ta[pos[2] * caml_ba_dim(data, 1) + pos[1]];
   }
   function ml_canvas_image_data_get_size(data){
    return [0, caml_ba_dim(data, 1), caml_ba_dim(data, 0)];
   }
   function ml_canvas_image_data_import_png(data, pos, filename, onload){
    _ml_canvas_ensure_initialized();
    var
     img = _ml_canvas_image_of_png_file(filename),
     surface = _ml_canvas_surface_of_ba(data);
    if(img === null || surface === null){
     caml_raise_with_string(caml_named_value("Read_png_failed"), filename);
     return 0;
    }
    img[0].then
     (function(__img){
       var ctxt = surface.getContext("2d");
       ctxt.drawImage(img[1], pos[1], pos[2]);
       var
        image = ctxt.getImageData(0, 0, surface.width, surface.height),
        sta = new window.Uint8Array(image.data.buffer),
        dta = caml_ba_to_typed_array(data);
       for(var i = 0; i < dta.length; i++) dta[i] = sta[i];
       onload(data);
       return 0;
      });
    return 0;
   }
   function ml_canvas_image_data_put_pixel(data, pos, color){
    var ta = new window.Uint32Array(caml_ba_to_typed_array(data).buffer);
    ta[pos[2] * caml_ba_dim(data, 1) + pos[1]] = color;
    return 0;
   }
   function ml_canvas_image_data_sub(src_data, spos, size){
    var dwidth = size[1], dheight = size[2];
    if(! _ml_canvas_valid_canvas_size(dwidth, dheight))
     caml_invalid_argument("ImageData.blit: invalid dimensions");
    var
     swidth = caml_ba_dim(src_data, 1),
     sheight = caml_ba_dim(src_data, 0),
     ta = new window.Uint8Array(dwidth * dheight * 4),
     dst_data = caml_ba_create_unsafe(3, 0, [dheight, dwidth, 4], ta),
     blit_info =
       _ml_canvas_adjust_blit_info
        (dwidth,
         dheight,
         0,
         0,
         swidth,
         sheight,
         spos[1],
         spos[2],
         dwidth,
         dheight),
     dx = blit_info[0],
     dy = blit_info[1],
     sx = blit_info[2],
     sy = blit_info[3],
     width = blit_info[4],
     height = blit_info[5];
    if(width > 0 && height > 0){
     var
      dta = new window.Uint32Array(caml_ba_to_typed_array(dst_data).buffer),
      sta = new window.Uint32Array(caml_ba_to_typed_array(src_data).buffer);
     for(var y = 0; y < height; ++y)
      for(var x = 0; x < width; ++x)
       dta[(dy + y) * dwidth + (dx + x)] = sta[(sy + y) * swidth + (sx + x)];
    }
    return dst_data;
   }
   function ml_canvas_import_png(canvas, pos, filename, onload){
    var img = _ml_canvas_image_of_png_file(filename);
    if(img === null){
     caml_raise_with_string(caml_named_value("Read_png_failed"), filename);
     return 0;
    }
    img[0].then
     (function(__img){
       canvas.ctxt.drawImage(img[1], pos[1], pos[2]);
       onload(canvas);
       return 0;
      });
    return 0;
   }
   function ml_canvas_init(){
    if(_ml_canvas_initialized === true) return 0;
    document.addEventListener("keydown", _key_down_handler, {passive: true});
    document.addEventListener("keyup", _key_up_handler, {passive: true});
    document.addEventListener("mouseup", _up_handler, {passive: true});
    document.addEventListener("mousemove", _move_handler, {passive: true});
    window.requestAnimationFrame(_frame_handler);
    _ml_canvas_initialized = true;
    return 0;
   }
   function ml_canvas_int_of_key(keycode){return Key_code_val(keycode);}
   function ml_canvas_key_of_int(keycode){
    caml_invalid_argument("key_of_int: i must be in the 0-255 range");
    return Val_key_code(keycode);
   }
   function ml_canvas_line_to(canvas, p){
    canvas.ctxt.lineTo(p[1], p[2]);
    return 0;
   }
   function ml_canvas_move_to(canvas, p){
    canvas.ctxt.moveTo(p[1], p[2]);
    return 0;
   }
   function ml_canvas_path_add(path1, path2){path1.addPath(path2); return 0;}
   function ml_canvas_path_add_transformed(path1, path2, t){
    var m = new window.DOMMatrix([[1], t[2], t[3], t[4], t[5], t[6]]);
    path1.addPath(path2, m);
    return 0;
   }
   function ml_canvas_path_arc(path, p, radius, theta1, theta2, ccw){path.arc(p[1], p[2], radius, theta1, theta2, ccw); return 0;
   }
   function ml_canvas_path_arc_to(path, p1, p2, radius){
    path.arcTo(p1[1], p1[2], p2[1], p2[2], radius);
    return 0;
   }
   function ml_canvas_path_bezier_curve_to(path, cp1, cp2, p){
    path.bezierCurveTo(cp1[1], cp1[2], cp2[1], cp2[2], p[1], p[2]);
    return 0;
   }
   function ml_canvas_path_close(path){path.closePath(); return 0;}
   function ml_canvas_path_create(){return new window.Path2D();}
   function ml_canvas_path_ellipse
   (path, p, radius, rotation, theta1, theta2, ccw){
    path.ellipse
     (p[1], p[2], radius[1], radius[2], rotation, theta1, theta2, ccw);
    return 0;
   }
   function ml_canvas_path_line_to(path, p){path.lineTo(p[1], p[2]); return 0;
   }
   function ml_canvas_path_move_to(path, p){path.moveTo(p[1], p[2]); return 0;
   }
   function ml_canvas_path_quadratic_curve_to(path, cp, p){
    path.quadraticCurveTo(cp[1], cp[2], p[1], p[2]);
    return 0;
   }
   function ml_canvas_path_rect(path, pos, size){
    path.rect(pos[1], pos[2], size[1], size[2]);
    return 0;
   }
   function ml_canvas_pattern_create(image, repeat){
    var img_canv = _ml_canvas_surface_of_ba(image);
    return _internal_ctxt.createPattern(img_canv, Repeat_val(repeat));
   }
   function ml_canvas_put_image_data(canvas, dpos, data, spos, size){
    var width = size[1], height = size[2];
    if(! _ml_canvas_valid_canvas_size(width, height))
     caml_invalid_argument("Canvas.putImageData: invalid dimensions");
    var
     sta = new window.Uint8Array(caml_ba_to_typed_array(data).buffer),
     dta = new window.Uint8ClampedArray(sta.length);
    for(var i = 0; i < sta.length; i += 4){
     dta[i + 0] = sta[i + 2];
     dta[i + 1] = sta[i + 1];
     dta[i + 2] = sta[i + 0];
     dta[i + 3] = sta[i + 3];
    }
    if(window.ImageData === undefined){
     var
      image =
        canvas.ctxt.createImageData
         (caml_ba_dim(data, 1), caml_ba_dim(data, 0));
     image.data.set(dta);
    }
    else
     var
      image =
        new window.ImageData(dta, caml_ba_dim(data, 1), caml_ba_dim(data, 0));
    canvas.ctxt.putImageData
     (image, dpos[1], dpos[2], spos[1], spos[2], width, height);
    return 0;
   }
   function ml_canvas_put_pixel(canvas, pos, color){
    var image = canvas.ctxt.createImageData(1, 1);
    image.data[3] = (color & 0xFF000000) >>> 24;
    image.data[0] = (color & 0x00FF0000) >>> 16;
    image.data[1] = (color & 0x0000FF00) >>> 8;
    image.data[2] = (color & 0x000000FF) >>> 0;
    canvas.ctxt.putImageData(image, pos[1], pos[2]);
    return 0;
   }
   function ml_canvas_quadratic_curve_to(canvas, p1, p2){
    canvas.ctxt.quadraticCurveTo(p1[1], p1[2], p2[1], p2[2]);
    return 0;
   }
   function ml_canvas_rect(canvas, pos, size){
    canvas.ctxt.rect(pos[1], pos[2], size[1], size[2]);
    return 0;
   }
   function ml_canvas_restore(canvas){canvas.ctxt.restore(); return 0;}
   function ml_canvas_rotate(canvas, theta){canvas.ctxt.rotate(theta); return 0;
   }
   function ml_canvas_run(mlProcessEvent, mlContinuation){
    _ml_canvas_ensure_initialized();
    if(_ml_canvas_mlProcessEvent !== null) return 0;
    _ml_canvas_mlProcessEvent = mlProcessEvent;
    _ml_canvas_mlContinuation = mlContinuation;
    _ml_canvas_mlException = null;
    return 0;
   }
   function ml_canvas_save(canvas){canvas.ctxt.save(); return 0;}
   function ml_canvas_scale(canvas, vec){
    canvas.ctxt.scale(vec[1], vec[2]);
    return 0;
   }
   function ml_canvas_set_fill_color(canvas, color){
    canvas.ctxt.fillStyle = _color_of_int(color);
    return 0;
   }
   function ml_canvas_set_fill_gradient(canvas, grad){canvas.ctxt.fillStyle = grad; return 0;
   }
   function ml_canvas_set_fill_pattern(canvas, pattern){canvas.ctxt.fillStyle = pattern; return 0;
   }
   function ml_canvas_set_fill_style(canvas, style){
    canvas.ctxt.fillStyle = Val_draw_style(style);
    return 0;
   }
   function ml_canvas_set_font(canvas, family, size, slant, weight){
    canvas.ctxt.font =
     Slant_val(slant) + " " + weight + " " + size + "pt "
     + caml_jsstring_of_string(family);
    return 0;
   }
   function ml_canvas_set_global_alpha(canvas, global_alpha){canvas.ctxt.globalAlpha = global_alpha; return 0;
   }
   function ml_canvas_set_global_composite_operation(canvas, op){
    canvas.ctxt.globalCompositeOperation = Compop_val(op);
    return 0;
   }
   function ml_canvas_set_line_cap(canvas, cap){
    canvas.ctxt.lineCap = Cap_type_val(cap);
    return 0;
   }
   function ml_canvas_set_line_dash(canvas, dash){
    dash.shift();
    canvas.ctxt.setLineDash(dash);
    return 0;
   }
   function ml_canvas_set_line_dash_offset(canvas, offset){canvas.ctxt.lineDashOffset = offset; return 0;
   }
   function ml_canvas_set_line_join(canvas, join){
    canvas.ctxt.lineJoin = Join_type_val(join);
    return 0;
   }
   function ml_canvas_set_line_width(canvas, width){canvas.ctxt.lineWidth = width; return 0;
   }
   function ml_canvas_set_miter_limit(canvas, limit){canvas.ctxt.miterLimit = limit; return 0;
   }
   function ml_canvas_set_position(canvas, pos){
    if(canvas.frame !== null){
     var x = pos[1], y = pos[2];
     canvas.x = x;
     canvas.y = y;
     canvas.frame.style.left = x + "px";
     canvas.frame.style.top = y + "px";
    }
    return 0;
   }
   function ml_canvas_set_shadow_blur(canvas, blur){canvas.ctxt.shadowBlur = blur; return 0;
   }
   function ml_canvas_set_shadow_color(canvas, color){
    canvas.ctxt.shadowColor = _color_of_int(color);
    return 0;
   }
   function ml_canvas_set_shadow_offset(canvas, offset){
    canvas.ctxt.shadowOffsetX = offset[1];
    canvas.ctxt.shadowOffsetY = offset[2];
    return 0;
   }
   function ml_canvas_set_size(canvas, size){
    var width = size[1], height = size[2];
    if(! _ml_canvas_valid_canvas_size(width, height))
     caml_invalid_argument("Canvas.setSize: invalid dimensions");
    var img = canvas.ctxt.getImageData(0, 0, canvas.width, canvas.height);
    if(canvas.header !== null){
     canvas.header.width = width;
     _ml_canvas_decorate
      (canvas.header,
       canvas.minimize,
       canvas.maximize,
       canvas.close,
       canvas.name);
    }
    canvas.surface.width = canvas.width = width;
    canvas.surface.height = canvas.height = height;
    canvas.ctxt.fillRect(0, 0, width, height);
    canvas.ctxt.putImageData(img, 0, 0);
    return 0;
   }
   function ml_canvas_set_stroke_color(canvas, color){
    canvas.ctxt.strokeStyle = _color_of_int(color);
    return 0;
   }
   function ml_canvas_set_stroke_gradient(canvas, grad){canvas.ctxt.strokeStyle = grad; return 0;
   }
   function ml_canvas_set_stroke_pattern(canvas, pattern){canvas.ctxt.strokeStyle = pattern; return 0;
   }
   function ml_canvas_set_stroke_style(canvas, style){
    canvas.ctxt.strokeStyle = Val_draw_style(style);
    return 0;
   }
   function ml_canvas_set_transform(canvas, t){
    canvas.ctxt.setTransform(t[1], t[2], t[3], t[4], t[5], t[6]);
    return 0;
   }
   function ml_canvas_shear(canvas, vec){
    canvas.ctxt.transform(1.0, vec[2], vec[1], 1.0, 0.0, 0.0);
    return 0;
   }
   function ml_canvas_show(canvas){
    if(canvas.frame !== null){
     _focus = canvas;
     canvas.frame.style.visibility = "visible";
    }
    return 0;
   }
   function ml_canvas_stroke(canvas){canvas.ctxt.stroke(); return 0;}
   function ml_canvas_stroke_path(canvas, path){canvas.ctxt.stroke(path); return 0;
   }
   function ml_canvas_stroke_rect(canvas, pos, size){
    canvas.ctxt.strokeRect(pos[1], pos[2], size[1], size[2]);
    return 0;
   }
   function ml_canvas_stroke_text(canvas, text, pos){
    canvas.ctxt.strokeText(caml_jsstring_of_string(text), pos[1], pos[2]);
    return 0;
   }
   function ml_canvas_transform(canvas, t){
    canvas.ctxt.transform(t[1], t[2], t[3], t[4], t[5], t[6]);
    return 0;
   }
   function ml_canvas_translate(canvas, vec){
    canvas.ctxt.translate(vec[1], vec[2]);
    return 0;
   }
   function mult_nat(nat1, ofs1, len1, nat2, ofs2, len2, nat3, ofs3, len3){
    var carry = 0;
    for(var i = 0; i < len3; i++)
     carry +=
      mult_digit_nat
       (nat1, ofs1 + i, len1 - i, nat2, ofs2, len2, nat3, ofs3 + i);
    return carry;
   }
   function nth_digit_nat(nat, ofs){return nat.data[ofs];}
   function nth_digit_nat_native(nat, ofs){return nat.data[ofs];}
   var
    re_match =
      function(){
        var
         re_word_letters =
           [0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0xFF,
            0x03,
            0xFE,
            0xFF,
            0xFF,
            0x87,
            0xFE,
            0xFF,
            0xFF,
            0x07,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0xFF,
            0xFF,
            0x7F,
            0xFF,
            0xFF,
            0xFF,
            0x7F,
            0xFF],
         opcodes =
           {CHAR: 0,
            CHARNORM: 1,
            STRING: 2,
            STRINGNORM: 3,
            CHARCLASS: 4,
            BOL: 5,
            EOL: 6,
            WORDBOUNDARY: 7,
            BEGGROUP: 8,
            ENDGROUP: 9,
            REFGROUP: 10,
            ACCEPT: 11,
            SIMPLEOPT: 12,
            SIMPLESTAR: 13,
            SIMPLEPLUS: 14,
            GOTO: 15,
            PUSHBACK: 16,
            SETMARK: 17,
            CHECKPROGRESS: 18};
        function is_word_letter(c){
         return re_word_letters[c >> 3] >> (c & 7) & 1;
        }
        function in_bitset(s, i){
         return caml_string_get(s, i >> 3) >> (i & 7) & 1;
        }
        function re_match_impl(re, s, pos, partial){
         var
          prog = caml_js_from_array(re[1]),
          cpool = caml_js_from_array(re[2]),
          normtable = caml_jsbytes_of_string(re[3]),
          numgroups = re[4] | 0,
          numregisters = re[5] | 0,
          startchars = re[6] | 0,
          s = caml_uint8_array_of_string(s),
          pc = 0,
          quit = false,
          stack = [],
          groups = new Array(numgroups),
          re_register = new Array(numregisters);
         for(var i = 0; i < groups.length; i++)
          groups[i] = {start: - 1, end: - 1};
         groups[0].start = pos;
         function backtrack(){
          while(stack.length){
           var item = stack.pop();
           if(item.undo)
            item.undo.obj[item.undo.prop] = item.undo.value;
           else if(item.pos){pc = item.pos.pc; pos = item.pos.txt; return;}
          }
          quit = true;
         }
         function push(item){stack.push(item);}
         function accept(){
          groups[0].end = pos;
          var result = new Array(1 + groups.length * 2);
          result[0] = 0;
          for(var i = 0; i < groups.length; i++){
           var g = groups[i];
           if(g.start < 0 || g.end < 0) g.start = g.end = - 1;
           result[2 * i + 1] = g.start;
           result[2 * i + 1 + 1] = g.end;
          }
          return result;
         }
         function prefix_match(){
          if(partial) return accept(); else backtrack();
         }
         while(! quit){
          var
           op = prog[pc] & 0xff,
           sarg = prog[pc] >> 8,
           uarg = sarg & 0xff,
           c = s[pos],
           group;
          pc++;
          switch(op){
            case opcodes.CHAR:
             if(pos === s.length){prefix_match(); break;}
             if(c === uarg) pos++; else backtrack();
             break;
            case opcodes.CHARNORM:
             if(pos === s.length){prefix_match(); break;}
             if(normtable.charCodeAt(c) === uarg) pos++; else backtrack();
             break;
            case opcodes.STRING:
             for
             (var arg = caml_jsbytes_of_string(cpool[uarg]), i = 0;
              i < arg.length;
              i++){
              if(pos === s.length){prefix_match(); break;}
              if(c === arg.charCodeAt(i))
               c = s[++pos];
              else{backtrack(); break;}
             }
             break;
            case opcodes.STRINGNORM:
             for
             (var arg = caml_jsbytes_of_string(cpool[uarg]), i = 0;
              i < arg.length;
              i++){
              if(pos === s.length){prefix_match(); break;}
              if(normtable.charCodeAt(c) === arg.charCodeAt(i))
               c = s[++pos];
              else{backtrack(); break;}
             }
             break;
            case opcodes.CHARCLASS:
             if(pos === s.length){prefix_match(); break;}
             if(in_bitset(cpool[uarg], c)) pos++; else backtrack();
             break;
            case opcodes.BOL:
             if(pos > 0 && s[pos - 1] != 10) backtrack(); break;
            case opcodes.EOL:
             if(pos < s.length && s[pos] != 10) backtrack(); break;
            case opcodes.WORDBOUNDARY:
             if(pos == 0){
              if(pos === s.length){prefix_match(); break;}
              if(is_word_letter(s[0])) break;
              backtrack();
             }
             else if(pos === s.length){
              if(is_word_letter(s[pos - 1])) break;
              backtrack();
             }
             else{
              if(is_word_letter(s[pos - 1]) != is_word_letter(s[pos])) break;
              backtrack();
             }
             break;
            case opcodes.BEGGROUP:
             group = groups[uarg];
             push({undo: {obj: group, prop: "start", value: group.start}});
             group.start = pos;
             break;
            case opcodes.ENDGROUP:
             group = groups[uarg];
             push({undo: {obj: group, prop: "end", value: group.end}});
             group.end = pos;
             break;
            case opcodes.REFGROUP:
             group = groups[uarg];
             if(group.start < 0 || group.end < 0){backtrack(); break;}
             for(var i = group.start; i < group.end; i++){
              if(pos === s.length){prefix_match(); break;}
              if(s[i] != s[pos]){backtrack(); break;}
              pos++;
             }
             break;
            case opcodes.SIMPLEOPT:
             if(in_bitset(cpool[uarg], c)) pos++; break;
            case opcodes.SIMPLESTAR:
             while(in_bitset(cpool[uarg], c)) c = s[++pos]; break;
            case opcodes.SIMPLEPLUS:
             if(pos === s.length){prefix_match(); break;}
             if(in_bitset(cpool[uarg], c))
              do c = s[++pos];while(in_bitset(cpool[uarg], c));
             else
              backtrack();
             break;
            case opcodes.ACCEPT: return accept();
            case opcodes.GOTO:
             pc = pc + sarg; break;
            case opcodes.PUSHBACK:
             push({pos: {pc: pc + sarg, txt: pos}}); break;
            case opcodes.SETMARK:
             push
              ({undo: {obj: re_register, prop: uarg, value: re_register[uarg]}});
             re_register[uarg] = pos;
             break;
            case opcodes.CHECKPROGRESS:
             if(re_register[uarg] === pos) backtrack(); break;
            default: throw new Error("Invalid bytecode");
          }
         }
         return 0;
        }
        return re_match_impl;
       }
       ();
   function re_partial_match(re, s, pos){
    if(pos < 0 || pos > caml_ml_string_length(s))
     caml_invalid_argument("Str.partial_match");
    var res = re_match(re, s, pos, 1);
    return res ? res : [0];
   }
   function re_replacement_text(repl, groups, orig){
    var
     repl = caml_jsbytes_of_string(repl),
     len = repl.length,
     orig = caml_jsbytes_of_string(orig),
     res = "",
     n = 0,
     cur,
     start,
     end,
     c;
    while(n < len){
     cur = repl.charAt(n++);
     if(cur != "\\")
      res += cur;
     else{
      if(n == len) caml_failwith("Str.replace: illegal backslash sequence");
      cur = repl.charAt(n++);
      switch(cur){
        case "\\":
         res += cur; break;
        case "0":
        case "1":
        case "2":
        case "3":
        case "4":
        case "5":
        case "6":
        case "7":
        case "8":
        case "9":
         c = + cur;
         if(c * 2 >= groups.length - 1)
          caml_failwith("Str.replace: reference to unmatched group");
         start = caml_array_get(groups, c * 2);
         end = caml_array_get(groups, c * 2 + 1);
         if(start == - 1)
          caml_failwith("Str.replace: reference to unmatched group");
         res += orig.slice(start, end);
         break;
        default: res += "\\" + cur;
      }
     }
    }
    return caml_string_of_jsbytes(res);
   }
   function re_search_backward(re, s, pos){
    if(pos < 0 || pos > caml_ml_string_length(s))
     caml_invalid_argument("Str.search_backward");
    while(pos >= 0){
     var res = re_match(re, s, pos, 0);
     if(res) return res;
     pos--;
    }
    return [0];
   }
   function re_search_forward(re, s, pos){
    if(pos < 0 || pos > caml_ml_string_length(s))
     caml_invalid_argument("Str.search_forward");
    while(pos <= caml_ml_string_length(s)){
     var res = re_match(re, s, pos, 0);
     if(res) return res;
     pos++;
    }
    return [0];
   }
   function re_string_match(re, s, pos){
    if(pos < 0 || pos > caml_ml_string_length(s))
     caml_invalid_argument("Str.string_match");
    var res = re_match(re, s, pos, 0);
    return res ? res : [0];
   }
   function set_digit_nat(nat, ofs, digit){nat.data[ofs] = digit; return 0;}
   function set_digit_nat_native(nat, ofs, digit){nat.data[ofs] = digit; return 0;
   }
   function square_nat(nat1, ofs1, len1, nat2, ofs2, len2){
    var carry = 0;
    carry += add_nat(nat1, ofs1, len1, nat1, ofs1, len1, 0);
    carry += mult_nat(nat1, ofs1, len1, nat2, ofs2, len2, nat2, ofs2, len2);
    return carry;
   }
   function caml_setup_uncaught_exception_handler(){
    var process = globalThis.process;
    if(process && process.on)
     process.on
      ("uncaughtException",
       function(err, origin){
        caml_fatal_uncaught_exception(err);
        process.exit(2);
       });
    else if(globalThis.addEventListener)
     globalThis.addEventListener
      ("error",
       function(event){
        if(event.error) caml_fatal_uncaught_exception(event.error);
       });
   }
   caml_setup_uncaught_exception_handler();
   globalThis.jsoo_runtime =
    {ml_canvas_get_current_timestamp: ml_canvas_get_current_timestamp,
     ml_canvas_get_canvas: ml_canvas_get_canvas,
     ml_canvas_stop: ml_canvas_stop,
     ml_canvas_run: ml_canvas_run,
     _ml_canvas_process_event: _ml_canvas_process_event,
     _ml_canvas_mlException: _ml_canvas_mlException,
     _ml_canvas_mlContinuation: _ml_canvas_mlContinuation,
     _ml_canvas_mlProcessEvent: _ml_canvas_mlProcessEvent,
     ml_canvas_init: ml_canvas_init,
     ml_canvas_key_of_int: ml_canvas_key_of_int,
     ml_canvas_int_of_key: ml_canvas_int_of_key,
     ml_canvas_export_png: ml_canvas_export_png,
     ml_canvas_import_png: ml_canvas_import_png,
     ml_canvas_put_image_data: ml_canvas_put_image_data,
     ml_canvas_get_image_data: ml_canvas_get_image_data,
     ml_canvas_put_pixel: ml_canvas_put_pixel,
     ml_canvas_get_pixel: ml_canvas_get_pixel,
     ml_canvas_blit: ml_canvas_blit,
     ml_canvas_stroke_text: ml_canvas_stroke_text,
     ml_canvas_fill_text: ml_canvas_fill_text,
     ml_canvas_stroke_rect: ml_canvas_stroke_rect,
     ml_canvas_fill_rect: ml_canvas_fill_rect,
     ml_canvas_clip_path: ml_canvas_clip_path,
     ml_canvas_clip: ml_canvas_clip,
     ml_canvas_stroke_path: ml_canvas_stroke_path,
     ml_canvas_stroke: ml_canvas_stroke,
     ml_canvas_fill_path: ml_canvas_fill_path,
     ml_canvas_fill: ml_canvas_fill,
     ml_canvas_ellipse: ml_canvas_ellipse,
     ml_canvas_rect: ml_canvas_rect,
     ml_canvas_bezier_curve_to: ml_canvas_bezier_curve_to,
     ml_canvas_quadratic_curve_to: ml_canvas_quadratic_curve_to,
     ml_canvas_arc_to: ml_canvas_arc_to,
     ml_canvas_arc: ml_canvas_arc,
     ml_canvas_line_to: ml_canvas_line_to,
     ml_canvas_move_to: ml_canvas_move_to,
     ml_canvas_close_path: ml_canvas_close_path,
     ml_canvas_clear_path: ml_canvas_clear_path,
     ml_canvas_set_font: ml_canvas_set_font,
     ml_canvas_set_shadow_offset: ml_canvas_set_shadow_offset,
     ml_canvas_get_shadow_offset: ml_canvas_get_shadow_offset,
     ml_canvas_set_shadow_blur: ml_canvas_set_shadow_blur,
     ml_canvas_get_shadow_blur: ml_canvas_get_shadow_blur,
     ml_canvas_set_shadow_color: ml_canvas_set_shadow_color,
     ml_canvas_get_shadow_color: ml_canvas_get_shadow_color,
     ml_canvas_set_global_composite_operation:
     ml_canvas_set_global_composite_operation,
     ml_canvas_get_global_composite_operation:
     ml_canvas_get_global_composite_operation,
     ml_canvas_get_fill_style: ml_canvas_get_fill_style,
     ml_canvas_set_fill_style: ml_canvas_set_fill_style,
     ml_canvas_set_fill_pattern: ml_canvas_set_fill_pattern,
     ml_canvas_set_fill_gradient: ml_canvas_set_fill_gradient,
     ml_canvas_set_global_alpha: ml_canvas_set_global_alpha,
     ml_canvas_get_global_alpha: ml_canvas_get_global_alpha,
     ml_canvas_set_fill_color: ml_canvas_set_fill_color,
     ml_canvas_get_fill_color: ml_canvas_get_fill_color,
     ml_canvas_get_stroke_style: ml_canvas_get_stroke_style,
     ml_canvas_set_stroke_style: ml_canvas_set_stroke_style,
     ml_canvas_set_stroke_pattern: ml_canvas_set_stroke_pattern,
     ml_canvas_set_stroke_gradient: ml_canvas_set_stroke_gradient,
     ml_canvas_set_stroke_color: ml_canvas_set_stroke_color,
     ml_canvas_get_stroke_color: ml_canvas_get_stroke_color,
     ml_canvas_set_miter_limit: ml_canvas_set_miter_limit,
     ml_canvas_get_miter_limit: ml_canvas_get_miter_limit,
     ml_canvas_set_line_join: ml_canvas_set_line_join,
     ml_canvas_get_line_join: ml_canvas_get_line_join,
     ml_canvas_set_line_dash: ml_canvas_set_line_dash,
     ml_canvas_get_line_dash: ml_canvas_get_line_dash,
     ml_canvas_set_line_dash_offset: ml_canvas_set_line_dash_offset,
     ml_canvas_get_line_dash_offset: ml_canvas_get_line_dash_offset,
     ml_canvas_set_line_cap: ml_canvas_set_line_cap,
     ml_canvas_get_line_cap: ml_canvas_get_line_cap,
     ml_canvas_set_line_width: ml_canvas_set_line_width,
     ml_canvas_get_line_width: ml_canvas_get_line_width,
     _int_of_color: _int_of_color,
     _color_of_int: _color_of_int,
     ml_canvas_restore: ml_canvas_restore,
     ml_canvas_save: ml_canvas_save,
     ml_canvas_rotate: ml_canvas_rotate,
     ml_canvas_shear: ml_canvas_shear,
     ml_canvas_scale: ml_canvas_scale,
     ml_canvas_translate: ml_canvas_translate,
     ml_canvas_transform: ml_canvas_transform,
     ml_canvas_set_transform: ml_canvas_set_transform,
     ml_canvas_set_position: ml_canvas_set_position,
     ml_canvas_get_position: ml_canvas_get_position,
     ml_canvas_set_size: ml_canvas_set_size,
     ml_canvas_get_size: ml_canvas_get_size,
     ml_canvas_get_id: ml_canvas_get_id,
     ml_canvas_commit: ml_canvas_commit,
     ml_canvas_close: ml_canvas_close,
     ml_canvas_hide: ml_canvas_hide,
     ml_canvas_show: ml_canvas_show,
     ml_canvas_create_offscreen_from_png: ml_canvas_create_offscreen_from_png,
     ml_canvas_create_offscreen_from_image_data:
     ml_canvas_create_offscreen_from_image_data,
     ml_canvas_create_offscreen: ml_canvas_create_offscreen,
     ml_canvas_create_onscreen: ml_canvas_create_onscreen,
     _ml_canvas_decorate: _ml_canvas_decorate,
     _next_id: _next_id,
     ml_canvas_compare: ml_canvas_compare,
     ml_canvas_hash: ml_canvas_hash,
     ml_canvas_pattern_create: ml_canvas_pattern_create,
     ml_canvas_gradient_add_color_stop: ml_canvas_gradient_add_color_stop,
     ml_canvas_gradient_create_conic: ml_canvas_gradient_create_conic,
     ml_canvas_gradient_create_radial: ml_canvas_gradient_create_radial,
     ml_canvas_gradient_create_linear: ml_canvas_gradient_create_linear,
     ml_canvas_path_add_transformed: ml_canvas_path_add_transformed,
     ml_canvas_path_add: ml_canvas_path_add,
     ml_canvas_path_ellipse: ml_canvas_path_ellipse,
     ml_canvas_path_rect: ml_canvas_path_rect,
     ml_canvas_path_bezier_curve_to: ml_canvas_path_bezier_curve_to,
     ml_canvas_path_quadratic_curve_to: ml_canvas_path_quadratic_curve_to,
     ml_canvas_path_arc_to: ml_canvas_path_arc_to,
     ml_canvas_path_arc: ml_canvas_path_arc,
     ml_canvas_path_line_to: ml_canvas_path_line_to,
     ml_canvas_path_move_to: ml_canvas_path_move_to,
     ml_canvas_path_close: ml_canvas_path_close,
     ml_canvas_path_create: ml_canvas_path_create,
     ml_canvas_image_data_export_png: ml_canvas_image_data_export_png,
     ml_canvas_image_data_import_png: ml_canvas_image_data_import_png,
     ml_canvas_image_data_put_pixel: ml_canvas_image_data_put_pixel,
     ml_canvas_image_data_get_pixel: ml_canvas_image_data_get_pixel,
     ml_canvas_image_data_blit: ml_canvas_image_data_blit,
     ml_canvas_image_data_sub: ml_canvas_image_data_sub,
     _ml_canvas_adjust_blit_info: _ml_canvas_adjust_blit_info,
     ml_canvas_image_data_fill: ml_canvas_image_data_fill,
     ml_canvas_image_data_get_size: ml_canvas_image_data_get_size,
     ml_canvas_image_data_create_from_png:
     ml_canvas_image_data_create_from_png,
     _ml_canvas_surface_of_ba: _ml_canvas_surface_of_ba,
     _ml_canvas_ba_of_img: _ml_canvas_ba_of_img,
     _ml_canvas_image_of_png_file: _ml_canvas_image_of_png_file,
     _frame_handler: _frame_handler,
     _resize_handler: _resize_handler,
     _move_handler: _move_handler,
     _up_handler: _up_handler,
     _surface_down_handler: _surface_down_handler,
     _header_down_handler: _header_down_handler,
     _key_up_handler: _key_up_handler,
     _key_down_handler: _key_down_handler,
     _make_key_event: _make_key_event,
     _event_canvas_scale: _event_canvas_scale,
     _resize: _resize,
     _move: _move,
     _focus: _focus,
     _internal_ctxt: _internal_ctxt,
     _internal_canvas: _internal_canvas,
     _ml_canvas_valid_canvas_size: _ml_canvas_valid_canvas_size,
     _ml_canvas_ensure_initialized: _ml_canvas_ensure_initialized,
     _ml_canvas_initialized: _ml_canvas_initialized,
     Compop_val: Compop_val,
     Val_compop: Val_compop,
     Cap_type_val: Cap_type_val,
     Val_cap_type: Val_cap_type,
     Join_type_val: Join_type_val,
     Val_join_type: Val_join_type,
     Slant_val: Slant_val,
     Draw_style_val: Draw_style_val,
     Val_draw_style: Val_draw_style,
     Repeat_val: Repeat_val,
     Val_repeat: Val_repeat,
     Val_button_state: Val_button_state,
     Val_button: Val_button,
     Val_key_state: Val_key_state,
     Key_code_val: Key_code_val,
     Val_key_code: Val_key_code,
     Val_focus_in_out: Val_focus_in_out,
     Optional_val: Optional_val,
     Optional_bool_val: Optional_bool_val,
     COMPOP_TAG: COMPOP_TAG,
     CAP_TYPE_TAG: CAP_TYPE_TAG,
     JOIN_TYPE_TAG: JOIN_TYPE_TAG,
     SLANT_TAG: SLANT_TAG,
     REPEAT_TAG: REPEAT_TAG,
     STYLE_TAG: STYLE_TAG,
     EVENT_TAG: EVENT_TAG,
     BUTTON_STATE_TAG: BUTTON_STATE_TAG,
     BUTTON_TAG: BUTTON_TAG,
     KEY_STATE_TAG: KEY_STATE_TAG,
     KEY_TAG: KEY_TAG,
     FOCUS_TAG: FOCUS_TAG,
     keyname_to_keycode: keyname_to_keycode,
     BUTTON_STATE: BUTTON_STATE,
     BUTTON: BUTTON,
     KEY_STATE: KEY_STATE,
     KEY: KEY,
     FOCUS: FOCUS,
     SLANT: SLANT,
     caml_runtime_events_read_poll: caml_runtime_events_read_poll,
     caml_runtime_events_free_cursor: caml_runtime_events_free_cursor,
     caml_runtime_events_create_cursor: caml_runtime_events_create_cursor,
     caml_ml_runtime_events_resume: caml_ml_runtime_events_resume,
     caml_ml_runtime_events_pause: caml_ml_runtime_events_pause,
     caml_ml_runtime_events_start: caml_ml_runtime_events_start,
     caml_runtime_events_user_resolve: caml_runtime_events_user_resolve,
     caml_runtime_events_user_write: caml_runtime_events_user_write,
     caml_runtime_events_user_register: caml_runtime_events_user_register,
     caml_custom_event_index: caml_custom_event_index,
     caml_decompress_input: caml_decompress_input,
     jsoo_effect_not_supported: jsoo_effect_not_supported,
     caml_ml_condition_signal: caml_ml_condition_signal,
     caml_ml_condition_broadcast: caml_ml_condition_broadcast,
     caml_ml_condition_wait: caml_ml_condition_wait,
     caml_ml_condition_new: caml_ml_condition_new,
     caml_get_continuation_callstack: caml_get_continuation_callstack,
     caml_continuation_use_and_update_handler_noexc:
     caml_continuation_use_and_update_handler_noexc,
     caml_continuation_use_noexc: caml_continuation_use_noexc,
     caml_alloc_stack: caml_alloc_stack,
     caml_ml_mutex_unlock: caml_ml_mutex_unlock,
     caml_ml_mutex_try_lock: caml_ml_mutex_try_lock,
     caml_ml_mutex_lock: caml_ml_mutex_lock,
     caml_ml_mutex_new: caml_ml_mutex_new,
     MlMutex: MlMutex,
     caml_lxm_next: caml_lxm_next,
     caml_ml_domain_cpu_relax: caml_ml_domain_cpu_relax,
     caml_ml_domain_id: caml_ml_domain_id,
     caml_domain_spawn: caml_domain_spawn,
     caml_domain_id: caml_domain_id,
     caml_recommended_domain_count: caml_recommended_domain_count,
     caml_ml_domain_set_name: caml_ml_domain_set_name,
     caml_ml_domain_unique_token: caml_ml_domain_unique_token,
     caml_atomic_make_contended: caml_atomic_make_contended,
     caml_atomic_exchange: caml_atomic_exchange,
     caml_atomic_fetch_add: caml_atomic_fetch_add,
     caml_atomic_cas: caml_atomic_cas,
     caml_atomic_load: caml_atomic_load,
     caml_domain_dls_get: caml_domain_dls_get,
     caml_domain_dls_set: caml_domain_dls_set,
     caml_domain_dls: caml_domain_dls,
     caml_ephe_check_data: caml_ephe_check_data,
     caml_ephe_unset_data: caml_ephe_unset_data,
     caml_ephe_set_data: caml_ephe_set_data,
     caml_ephe_get_data_copy: caml_ephe_get_data_copy,
     caml_ephe_get_data: caml_ephe_get_data,
     caml_ephe_blit_data: caml_ephe_blit_data,
     caml_ephe_blit_key: caml_ephe_blit_key,
     caml_ephe_check_key: caml_ephe_check_key,
     caml_ephe_get_key_copy: caml_ephe_get_key_copy,
     caml_ephe_get_key: caml_ephe_get_key,
     caml_weak_set: caml_weak_set,
     caml_weak_create: caml_weak_create,
     caml_ephe_create: caml_ephe_create,
     caml_ephe_unset_key: caml_ephe_unset_key,
     caml_ephe_set_key: caml_ephe_set_key,
     caml_ephe_data_offset: caml_ephe_data_offset,
     caml_ephe_key_offset: caml_ephe_key_offset,
     caml_unix_inet_addr_of_string: caml_unix_inet_addr_of_string,
     caml_unix_findclose: caml_unix_findclose,
     caml_unix_findnext: caml_unix_findnext,
     caml_unix_findfirst: caml_unix_findfirst,
     caml_unix_rewinddir: caml_unix_rewinddir,
     caml_unix_closedir: caml_unix_closedir,
     caml_unix_readdir: caml_unix_readdir,
     caml_unix_opendir: caml_unix_opendir,
     caml_unix_has_symlink: caml_unix_has_symlink,
     caml_unix_getpwuid: caml_unix_getpwuid,
     caml_unix_getuid: caml_unix_getuid,
     caml_unix_unlink: caml_unix_unlink,
     caml_unix_readlink: caml_unix_readlink,
     caml_unix_symlink: caml_unix_symlink,
     caml_unix_rmdir: caml_unix_rmdir,
     caml_unix_mkdir: caml_unix_mkdir,
     caml_unix_lstat_64: caml_unix_lstat_64,
     caml_unix_lstat: caml_unix_lstat,
     caml_unix_stat_64: caml_unix_stat_64,
     caml_unix_stat: caml_unix_stat,
     make_unix_err_args: make_unix_err_args,
     caml_unix_isatty: caml_unix_isatty,
     caml_unix_filedescr_of_fd: caml_unix_filedescr_of_fd,
     caml_unix_cleanup: caml_unix_cleanup,
     caml_unix_startup: caml_unix_startup,
     caml_unix_mktime: caml_unix_mktime,
     caml_unix_localtime: caml_unix_localtime,
     caml_unix_gmtime: caml_unix_gmtime,
     caml_unix_time: caml_unix_time,
     caml_unix_gettimeofday: caml_unix_gettimeofday,
     caml_str_initialize: caml_str_initialize,
     re_replacement_text: re_replacement_text,
     re_partial_match: re_partial_match,
     re_string_match: re_string_match,
     re_search_backward: re_search_backward,
     re_search_forward: re_search_forward,
     re_match: re_match,
     caml_sys_is_regular_file: caml_sys_is_regular_file,
     caml_spacetime_only_works_for_native_code:
     caml_spacetime_only_works_for_native_code,
     caml_register_channel_for_spacetime: caml_register_channel_for_spacetime,
     caml_sys_const_naked_pointers_checked:
     caml_sys_const_naked_pointers_checked,
     caml_spacetime_enabled: caml_spacetime_enabled,
     caml_ml_runtime_warnings_enabled: caml_ml_runtime_warnings_enabled,
     caml_ml_enable_runtime_warnings: caml_ml_enable_runtime_warnings,
     caml_runtime_warnings: caml_runtime_warnings,
     caml_install_signal_handler: caml_install_signal_handler,
     caml_runtime_parameters: caml_runtime_parameters,
     caml_runtime_variant: caml_runtime_variant,
     caml_sys_isatty: caml_sys_isatty,
     caml_sys_get_config: caml_sys_get_config,
     os_type: os_type,
     caml_sys_const_backend_type: caml_sys_const_backend_type,
     caml_sys_const_ostype_cygwin: caml_sys_const_ostype_cygwin,
     caml_sys_const_ostype_win32: caml_sys_const_ostype_win32,
     caml_sys_const_ostype_unix: caml_sys_const_ostype_unix,
     caml_sys_const_max_wosize: caml_sys_const_max_wosize,
     caml_sys_const_int_size: caml_sys_const_int_size,
     caml_sys_const_word_size: caml_sys_const_word_size,
     caml_sys_const_big_endian: caml_sys_const_big_endian,
     caml_sys_random_seed: caml_sys_random_seed,
     caml_sys_time_include_children: caml_sys_time_include_children,
     caml_sys_time: caml_sys_time,
     caml_sys_system_command: caml_sys_system_command,
     caml_sys_executable_name: caml_sys_executable_name,
     caml_sys_modify_argv: caml_sys_modify_argv,
     caml_sys_argv: caml_sys_argv,
     caml_sys_get_argv: caml_sys_get_argv,
     caml_executable_name: caml_executable_name,
     caml_argv: caml_argv,
     caml_sys_unsafe_getenv: caml_sys_unsafe_getenv,
     caml_sys_getenv: caml_sys_getenv,
     jsoo_sys_getenv: jsoo_sys_getenv,
     caml_set_static_env: caml_set_static_env,
     caml_fatal_uncaught_exception: caml_fatal_uncaught_exception,
     caml_format_exception: caml_format_exception,
     caml_is_special_exception: caml_is_special_exception,
     caml_sys_exit: caml_sys_exit,
     caml_raise_sys_error: caml_raise_sys_error,
     caml_maybe_print_stats: caml_maybe_print_stats,
     caml_is_printable: caml_is_printable,
     caml_get_global_data: caml_get_global_data,
     caml_register_global: caml_register_global,
     caml_build_symbols: caml_build_symbols,
     caml_global_data: caml_global_data,
     caml_named_value: caml_named_value,
     caml_register_named_value: caml_register_named_value,
     caml_named_values: caml_named_values,
     caml_call_gen: caml_call_gen,
     caml_set_parser_trace: caml_set_parser_trace,
     caml_parse_engine: caml_parse_engine,
     caml_parser_trace: caml_parser_trace,
     caml_is_continuation_tag: caml_is_continuation_tag,
     caml_lazy_read_result: caml_lazy_read_result,
     caml_lazy_reset_to_lazy: caml_lazy_reset_to_lazy,
     caml_lazy_update_to_forward: caml_lazy_update_to_forward,
     caml_lazy_update_to_forcing: caml_lazy_update_to_forcing,
     caml_obj_update_tag: caml_obj_update_tag,
     caml_obj_add_offset: caml_obj_add_offset,
     caml_obj_reachable_words: caml_obj_reachable_words,
     caml_obj_set_raw_field: caml_obj_set_raw_field,
     caml_obj_raw_field: caml_obj_raw_field,
     caml_fresh_oo_id: caml_fresh_oo_id,
     caml_set_oo_id: caml_set_oo_id,
     caml_oo_last_id: caml_oo_last_id,
     caml_get_public_method: caml_get_public_method,
     caml_lazy_make_forward: caml_lazy_make_forward,
     caml_obj_is_shared: caml_obj_is_shared,
     caml_obj_compare_and_swap: caml_obj_compare_and_swap,
     caml_obj_make_forward: caml_obj_make_forward,
     caml_obj_truncate: caml_obj_truncate,
     caml_obj_dup: caml_obj_dup,
     caml_obj_with_tag: caml_obj_with_tag,
     caml_obj_block: caml_obj_block,
     caml_obj_set_tag: caml_obj_set_tag,
     caml_obj_tag: caml_obj_tag,
     caml_obj_is_block: caml_obj_is_block,
     caml_alloc_dummy_infix: caml_alloc_dummy_infix,
     caml_update_dummy: caml_update_dummy,
     deserialize_nat: deserialize_nat,
     serialize_nat: serialize_nat,
     lxor_digit_nat: lxor_digit_nat,
     lor_digit_nat: lor_digit_nat,
     land_digit_nat: land_digit_nat,
     compare_nat_real: compare_nat_real,
     compare_nat: compare_nat,
     compare_digits_nat: compare_digits_nat,
     shift_right_nat: shift_right_nat,
     div_nat: div_nat,
     div_digit_nat: div_digit_nat,
     div_helper: div_helper,
     shift_left_nat: shift_left_nat,
     square_nat: square_nat,
     mult_nat: mult_nat,
     mult_digit_nat: mult_digit_nat,
     sub_nat: sub_nat,
     decr_nat: decr_nat,
     complement_nat: complement_nat,
     add_nat: add_nat,
     incr_nat: incr_nat,
     is_digit_odd: is_digit_odd,
     is_digit_zero: is_digit_zero,
     is_digit_int: is_digit_int,
     num_leading_zero_bits_in_digit: num_leading_zero_bits_in_digit,
     num_digits_nat: num_digits_nat,
     nth_digit_nat_native: nth_digit_nat_native,
     set_digit_nat_native: set_digit_nat_native,
     nth_digit_nat: nth_digit_nat,
     set_digit_nat: set_digit_nat,
     blit_nat: blit_nat,
     set_to_zero_nat: set_to_zero_nat,
     create_nat: create_nat,
     nat_of_array: nat_of_array,
     length_nat: length_nat,
     caml_hash_nat: caml_hash_nat,
     MlNat: MlNat,
     initialize_nat: initialize_nat,
     caml_array_of_bytes: caml_array_of_bytes,
     caml_array_of_string: caml_array_of_string,
     caml_js_to_string: caml_js_to_string,
     caml_to_js_string: caml_to_js_string,
     caml_js_from_string: caml_js_from_string,
     caml_new_string: caml_new_string,
     caml_js_to_byte_string: caml_js_to_byte_string,
     caml_is_ml_string: caml_is_ml_string,
     caml_ml_bytes_content: caml_ml_bytes_content,
     caml_is_ml_bytes: caml_is_ml_bytes,
     caml_bytes_of_jsbytes: caml_bytes_of_jsbytes,
     caml_string_of_jsstring: caml_string_of_jsstring,
     caml_jsstring_of_string: caml_jsstring_of_string,
     caml_jsbytes_of_string: caml_jsbytes_of_string,
     caml_string_of_jsbytes: caml_string_of_jsbytes,
     caml_bytes_of_string: caml_bytes_of_string,
     caml_string_of_bytes: caml_string_of_bytes,
     caml_string_lessthan: caml_string_lessthan,
     caml_string_lessequal: caml_string_lessequal,
     caml_string_equal: caml_string_equal,
     caml_string_compare: caml_string_compare,
     caml_ml_string_length: caml_ml_string_length,
     caml_string_unsafe_set: caml_string_unsafe_set,
     caml_string_unsafe_get: caml_string_unsafe_get,
     caml_string_concat: caml_string_concat,
     caml_ml_bytes_length: caml_ml_bytes_length,
     caml_blit_string: caml_blit_string,
     caml_blit_bytes: caml_blit_bytes,
     caml_fill_bytes: caml_fill_bytes,
     caml_bytes_greaterthan: caml_bytes_greaterthan,
     caml_string_greaterthan: caml_string_greaterthan,
     caml_bytes_greaterequal: caml_bytes_greaterequal,
     caml_string_greaterequal: caml_string_greaterequal,
     caml_bytes_lessthan: caml_bytes_lessthan,
     caml_bytes_lessequal: caml_bytes_lessequal,
     caml_bytes_notequal: caml_bytes_notequal,
     caml_string_notequal: caml_string_notequal,
     caml_bytes_equal: caml_bytes_equal,
     caml_bytes_compare: caml_bytes_compare,
     caml_bytes_of_array: caml_bytes_of_array,
     caml_string_of_array: caml_string_of_array,
     caml_create_bytes: caml_create_bytes,
     caml_create_string: caml_create_string,
     caml_uint8_array_of_string: caml_uint8_array_of_string,
     caml_uint8_array_of_bytes: caml_uint8_array_of_bytes,
     caml_convert_bytes_to_array: caml_convert_bytes_to_array,
     caml_convert_string_to_bytes: caml_convert_string_to_bytes,
     MlBytes: MlBytes,
     caml_bytes_of_utf16_jsstring: caml_bytes_of_utf16_jsstring,
     caml_bytes_set: caml_bytes_set,
     caml_string_set64: caml_string_set64,
     caml_bytes_set64: caml_bytes_set64,
     caml_string_set32: caml_string_set32,
     caml_bytes_set32: caml_bytes_set32,
     caml_string_set16: caml_string_set16,
     caml_bytes_set16: caml_bytes_set16,
     caml_string_set: caml_string_set,
     caml_bytes_get: caml_bytes_get,
     caml_bytes_get64: caml_bytes_get64,
     caml_string_get64: caml_string_get64,
     caml_bytes_get32: caml_bytes_get32,
     caml_string_get32: caml_string_get32,
     caml_bytes_get16: caml_bytes_get16,
     caml_string_get16: caml_string_get16,
     caml_string_get: caml_string_get,
     caml_bytes_bound_error: caml_bytes_bound_error,
     caml_string_bound_error: caml_string_bound_error,
     caml_bytes_unsafe_set: caml_bytes_unsafe_set,
     caml_bytes_unsafe_get: caml_bytes_unsafe_get,
     jsoo_is_ascii: jsoo_is_ascii,
     caml_utf16_of_utf8: caml_utf16_of_utf8,
     caml_utf8_of_utf16: caml_utf8_of_utf16,
     caml_subarray_to_jsbytes: caml_subarray_to_jsbytes,
     caml_str_repeat: caml_str_repeat,
     caml_md5_bytes: caml_md5_bytes,
     caml_MD5Final: caml_MD5Final,
     caml_MD5Update: caml_MD5Update,
     caml_MD5Init: caml_MD5Init,
     caml_MD5Transform: caml_MD5Transform,
     caml_md5_string: caml_md5_string,
     caml_md5_chan: caml_md5_chan,
     caml_output_value_to_buffer: caml_output_value_to_buffer,
     caml_output_value_to_bytes: caml_output_value_to_bytes,
     caml_output_value_to_string: caml_output_value_to_string,
     caml_output_val: caml_output_val,
     MlObjectTable: MlObjectTable,
     caml_marshal_data_size: caml_marshal_data_size,
     caml_marshal_header_size: caml_marshal_header_size,
     caml_input_value_from_reader: caml_input_value_from_reader,
     caml_custom_ops: caml_custom_ops,
     caml_nativeint_unmarshal: caml_nativeint_unmarshal,
     caml_int32_unmarshal: caml_int32_unmarshal,
     caml_int64_marshal: caml_int64_marshal,
     caml_int64_unmarshal: caml_int64_unmarshal,
     caml_input_value_from_bytes: caml_input_value_from_bytes,
     caml_input_value_from_string: caml_input_value_from_string,
     caml_float_of_bytes: caml_float_of_bytes,
     BigStringReader: BigStringReader,
     MlStringReader: MlStringReader,
     UInt8ArrayReader: UInt8ArrayReader,
     caml_marshal_constants: caml_marshal_constants,
     caml_new_lex_engine: caml_new_lex_engine,
     caml_lex_engine: caml_lex_engine,
     caml_lex_array: caml_lex_array,
     caml_js_error_of_exception: caml_js_error_of_exception,
     caml_xmlhttprequest_create: caml_xmlhttprequest_create,
     caml_js_get_console: caml_js_get_console,
     caml_js_html_entities: caml_js_html_entities,
     caml_js_html_escape: caml_js_html_escape,
     caml_js_on_ie: caml_js_on_ie,
     caml_js_object: caml_js_object,
     caml_pure_js_expr: caml_pure_js_expr,
     caml_js_expr: caml_js_expr,
     caml_js_eval_string: caml_js_eval_string,
     caml_js_strict_equals: caml_js_strict_equals,
     caml_js_equals: caml_js_equals,
     caml_js_function_arity: caml_js_function_arity,
     caml_js_wrap_meth_callback_unsafe: caml_js_wrap_meth_callback_unsafe,
     caml_js_wrap_meth_callback_strict: caml_js_wrap_meth_callback_strict,
     caml_js_wrap_meth_callback_arguments:
     caml_js_wrap_meth_callback_arguments,
     caml_js_wrap_meth_callback: caml_js_wrap_meth_callback,
     caml_js_wrap_callback_unsafe: caml_js_wrap_callback_unsafe,
     caml_js_wrap_callback_strict: caml_js_wrap_callback_strict,
     caml_js_wrap_callback_arguments: caml_js_wrap_callback_arguments,
     caml_js_wrap_callback: caml_js_wrap_callback,
     caml_ojs_new_arr: caml_ojs_new_arr,
     caml_js_new: caml_js_new,
     caml_js_meth_call: caml_js_meth_call,
     caml_js_fun_call: caml_js_fun_call,
     caml_js_call: caml_js_call,
     caml_js_var: caml_js_var,
     caml_list_to_js_array: caml_list_to_js_array,
     caml_list_of_js_array: caml_list_of_js_array,
     caml_js_to_array: caml_js_to_array,
     caml_js_from_array: caml_js_from_array,
     caml_js_to_int32: caml_js_to_int32,
     caml_js_to_float: caml_js_to_float,
     caml_js_from_float: caml_js_from_float,
     caml_js_to_bool: caml_js_to_bool,
     caml_js_from_bool: caml_js_from_bool,
     caml_js_error_option_of_exception: caml_js_error_option_of_exception,
     caml_exn_with_js_backtrace: caml_exn_with_js_backtrace,
     caml_maybe_attach_backtrace: caml_maybe_attach_backtrace,
     caml_wrap_exception: caml_wrap_exception,
     caml_jsoo_flags_effects: caml_jsoo_flags_effects,
     caml_jsoo_flags_use_js_string: caml_jsoo_flags_use_js_string,
     caml_is_js: caml_is_js,
     caml_callback: caml_callback,
     caml_trampoline_return: caml_trampoline_return,
     caml_trampoline: caml_trampoline,
     caml_js_typeof: caml_js_typeof,
     caml_js_instanceof: caml_js_instanceof,
     caml_js_delete: caml_js_delete,
     caml_js_get: caml_js_get,
     caml_js_set: caml_js_set,
     caml_js_pure_expr: caml_js_pure_expr,
     caml_ml_set_buffered: caml_ml_set_buffered,
     caml_ml_is_buffered: caml_ml_is_buffered,
     caml_ml_output_int: caml_ml_output_int,
     caml_ml_pos_out_64: caml_ml_pos_out_64,
     caml_ml_pos_out: caml_ml_pos_out,
     caml_pos_out: caml_pos_out,
     caml_ml_seek_out_64: caml_ml_seek_out_64,
     caml_ml_seek_out: caml_ml_seek_out,
     caml_seek_out: caml_seek_out,
     caml_output_value: caml_output_value,
     caml_ml_output_char: caml_ml_output_char,
     caml_ml_output: caml_ml_output,
     caml_ml_output_bigarray: caml_ml_output_bigarray,
     caml_ml_output_bytes: caml_ml_output_bytes,
     caml_ml_output_ta: caml_ml_output_ta,
     caml_ml_flush: caml_ml_flush,
     caml_ml_input_scan_line: caml_ml_input_scan_line,
     caml_ml_pos_in_64: caml_ml_pos_in_64,
     caml_ml_pos_in: caml_ml_pos_in,
     caml_pos_in: caml_pos_in,
     caml_ml_seek_in_64: caml_ml_seek_in_64,
     caml_ml_seek_in: caml_ml_seek_in,
     caml_seek_in: caml_seek_in,
     caml_ml_input_int: caml_ml_input_int,
     caml_ml_input_char: caml_ml_input_char,
     caml_input_value_to_outside_heap: caml_input_value_to_outside_heap,
     caml_input_value: caml_input_value,
     caml_ml_input_block: caml_ml_input_block,
     caml_ml_input_bigarray: caml_ml_input_bigarray,
     caml_ml_input: caml_ml_input,
     caml_refill: caml_refill,
     caml_ml_set_channel_refill: caml_ml_set_channel_refill,
     caml_ml_set_channel_output: caml_ml_set_channel_output,
     caml_ml_channel_size_64: caml_ml_channel_size_64,
     caml_ml_channel_size: caml_ml_channel_size,
     caml_ml_close_channel: caml_ml_close_channel,
     caml_ml_set_binary_mode: caml_ml_set_binary_mode,
     caml_channel_descriptor: caml_channel_descriptor,
     caml_ml_open_descriptor_in: caml_ml_open_descriptor_in,
     caml_ml_open_descriptor_out: caml_ml_open_descriptor_out,
     caml_ml_out_channels_list: caml_ml_out_channels_list,
     caml_ml_channel_get: caml_ml_channel_get,
     caml_ml_channel_restore: caml_ml_channel_restore,
     caml_ml_channel_redirect: caml_ml_channel_redirect,
     caml_ml_channels: caml_ml_channels,
     caml_ml_set_channel_name: caml_ml_set_channel_name,
     caml_sys_open: caml_sys_open,
     caml_sys_close: caml_sys_close,
     caml_sys_fds: caml_sys_fds,
     caml_int64_bswap: caml_int64_bswap,
     caml_int32_bswap: caml_int32_bswap,
     caml_bswap16: caml_bswap16,
     caml_mod: caml_mod,
     caml_div: caml_div,
     caml_mul: caml_mul,
     caml_int_of_string: caml_int_of_string,
     caml_parse_digit: caml_parse_digit,
     caml_parse_sign_and_base: caml_parse_sign_and_base,
     caml_format_int: caml_format_int,
     caml_int64_hash: caml_int64_hash,
     caml_int64_to_bytes: caml_int64_to_bytes,
     caml_int64_of_bytes: caml_int64_of_bytes,
     caml_int64_hi32: caml_int64_hi32,
     caml_int64_lo32: caml_int64_lo32,
     caml_int64_create_lo_hi: caml_int64_create_lo_hi,
     caml_int64_create_lo_mi_hi: caml_int64_create_lo_mi_hi,
     caml_int64_of_string: caml_int64_of_string,
     caml_int64_format: caml_int64_format,
     caml_int64_of_float: caml_int64_of_float,
     caml_int64_to_float: caml_int64_to_float,
     caml_int64_to_int32: caml_int64_to_int32,
     caml_int64_of_int32: caml_int64_of_int32,
     caml_int64_mod: caml_int64_mod,
     caml_int64_div: caml_int64_div,
     caml_int64_shift_right: caml_int64_shift_right,
     caml_int64_shift_right_unsigned: caml_int64_shift_right_unsigned,
     caml_int64_shift_left: caml_int64_shift_left,
     caml_int64_xor: caml_int64_xor,
     caml_int64_or: caml_int64_or,
     caml_int64_and: caml_int64_and,
     caml_int64_is_negative: caml_int64_is_negative,
     caml_int64_is_zero: caml_int64_is_zero,
     caml_int64_mul: caml_int64_mul,
     caml_int64_sub: caml_int64_sub,
     caml_int64_add: caml_int64_add,
     caml_int64_neg: caml_int64_neg,
     caml_int64_compare: caml_int64_compare,
     caml_int64_ult: caml_int64_ult,
     MlInt64: MlInt64,
     caml_int64_offset: caml_int64_offset,
     caml_float_of_string: caml_float_of_string,
     caml_format_float: caml_format_float,
     caml_fma_float: caml_fma_float,
     caml_erfc_float: caml_erfc_float,
     caml_erf_float: caml_erf_float,
     caml_cbrt_float: caml_cbrt_float,
     caml_round_float: caml_round_float,
     caml_atanh_float: caml_atanh_float,
     caml_tanh_float: caml_tanh_float,
     caml_asinh_float: caml_asinh_float,
     caml_sinh_float: caml_sinh_float,
     caml_acosh_float: caml_acosh_float,
     caml_cosh_float: caml_cosh_float,
     caml_log10_float: caml_log10_float,
     caml_hypot_float: caml_hypot_float,
     caml_log2_float: caml_log2_float,
     caml_log1p_float: caml_log1p_float,
     caml_exp2_float: caml_exp2_float,
     caml_expm1_float: caml_expm1_float,
     caml_signbit_float: caml_signbit_float,
     caml_copysign_float: caml_copysign_float,
     caml_float_compare: caml_float_compare,
     caml_frexp_float: caml_frexp_float,
     caml_ldexp_float: caml_ldexp_float,
     caml_modf_float: caml_modf_float,
     caml_classify_float: caml_classify_float,
     caml_int32_float_of_bits: caml_int32_float_of_bits,
     caml_trunc_float: caml_trunc_float,
     caml_nextafter_float: caml_nextafter_float,
     caml_int64_float_of_bits: caml_int64_float_of_bits,
     caml_hexstring_of_float: caml_hexstring_of_float,
     caml_int32_bits_of_float: caml_int32_bits_of_float,
     caml_int64_bits_of_float: caml_int64_bits_of_float,
     jsoo_floor_log2: jsoo_floor_log2,
     caml_string_hash: caml_string_hash,
     caml_hash: caml_hash,
     caml_hash_mix_string: caml_hash_mix_string,
     caml_hash_mix_bytes: caml_hash_mix_bytes,
     caml_hash_mix_bytes_arr: caml_hash_mix_bytes_arr,
     caml_hash_mix_jsbytes: caml_hash_mix_jsbytes,
     caml_hash_mix_int64: caml_hash_mix_int64,
     caml_hash_mix_float: caml_hash_mix_float,
     caml_hash_mix_final: caml_hash_mix_final,
     caml_hash_mix_int: caml_hash_mix_int,
     caml_gr_close_subwindow: caml_gr_close_subwindow,
     caml_gr_open_subwindow: caml_gr_open_subwindow,
     caml_gr_window_id: caml_gr_window_id,
     caml_gr_display_mode: caml_gr_display_mode,
     caml_gr_remember_mode: caml_gr_remember_mode,
     caml_gr_synchronize: caml_gr_synchronize,
     caml_gr_wait_event: caml_gr_wait_event,
     caml_gr_sigio_signal: caml_gr_sigio_signal,
     caml_gr_sigio_handler: caml_gr_sigio_handler,
     caml_gr_blit_image: caml_gr_blit_image,
     caml_gr_create_image: caml_gr_create_image,
     caml_gr_draw_image: caml_gr_draw_image,
     caml_gr_dump_image: caml_gr_dump_image,
     caml_gr_make_image: caml_gr_make_image,
     caml_gr_text_size: caml_gr_text_size,
     caml_gr_set_text_size: caml_gr_set_text_size,
     caml_gr_set_font: caml_gr_set_font,
     caml_gr_draw_string: caml_gr_draw_string,
     caml_gr_draw_char: caml_gr_draw_char,
     caml_gr_draw_str: caml_gr_draw_str,
     caml_gr_fill_arc: caml_gr_fill_arc,
     caml_gr_fill_poly: caml_gr_fill_poly,
     caml_gr_fill_rect: caml_gr_fill_rect,
     caml_gr_set_line_width: caml_gr_set_line_width,
     caml_gr_draw_arc: caml_gr_draw_arc,
     caml_gr_arc_aux: caml_gr_arc_aux,
     caml_gr_draw_rect: caml_gr_draw_rect,
     caml_gr_lineto: caml_gr_lineto,
     caml_gr_current_y: caml_gr_current_y,
     caml_gr_current_x: caml_gr_current_x,
     caml_gr_moveto: caml_gr_moveto,
     caml_gr_point_color: caml_gr_point_color,
     caml_gr_plot: caml_gr_plot,
     caml_gr_set_color: caml_gr_set_color,
     caml_gr_size_y: caml_gr_size_y,
     caml_gr_size_x: caml_gr_size_x,
     caml_gr_clear_graph: caml_gr_clear_graph,
     caml_gr_resize_window: caml_gr_resize_window,
     caml_gr_set_window_title: caml_gr_set_window_title,
     caml_gr_close_graph: caml_gr_close_graph,
     caml_gr_doc_of_state: caml_gr_doc_of_state,
     caml_gr_state_create: caml_gr_state_create,
     caml_gr_state_init: caml_gr_state_init,
     caml_gr_open_graph: caml_gr_open_graph,
     caml_gr_state_set: caml_gr_state_set,
     caml_gr_state_get: caml_gr_state_get,
     caml_gr_state: caml_gr_state,
     caml_get_major_credit: caml_get_major_credit,
     caml_get_major_bucket: caml_get_major_bucket,
     caml_get_minor_free: caml_get_minor_free,
     caml_gc_minor_words: caml_gc_minor_words,
     caml_gc_major_slice: caml_gc_major_slice,
     caml_gc_huge_fallback_count: caml_gc_huge_fallback_count,
     caml_eventlog_pause: caml_eventlog_pause,
     caml_eventlog_resume: caml_eventlog_resume,
     caml_memprof_discard: caml_memprof_discard,
     caml_memprof_stop: caml_memprof_stop,
     caml_memprof_start: caml_memprof_start,
     caml_final_release: caml_final_release,
     caml_final_register_called_without_value:
     caml_final_register_called_without_value,
     caml_final_register: caml_final_register,
     caml_memprof_set: caml_memprof_set,
     caml_gc_get: caml_gc_get,
     caml_gc_set: caml_gc_set,
     caml_gc_stat: caml_gc_stat,
     caml_gc_quick_stat: caml_gc_quick_stat,
     caml_gc_counters: caml_gc_counters,
     caml_gc_compaction: caml_gc_compaction,
     caml_gc_full_major: caml_gc_full_major,
     caml_gc_major: caml_gc_major,
     caml_gc_minor: caml_gc_minor,
     caml_sys_open_for_node: caml_sys_open_for_node,
     MlNodeFd: MlNodeFd,
     MlNodeDevice: MlNodeDevice,
     fs_node_supported: fs_node_supported,
     MlFakeFd: MlFakeFd,
     MlFakeFd_out: MlFakeFd_out,
     MlFakeFile: MlFakeFile,
     MlFakeDevice: MlFakeDevice,
     caml_read_file_content: caml_read_file_content,
     jsoo_create_file: jsoo_create_file,
     caml_create_file: caml_create_file,
     caml_fs_init: caml_fs_init,
     jsoo_create_file_extern: jsoo_create_file_extern,
     caml_ba_map_file_bytecode: caml_ba_map_file_bytecode,
     caml_ba_map_file: caml_ba_map_file,
     caml_sys_rmdir: caml_sys_rmdir,
     caml_sys_mkdir: caml_sys_mkdir,
     caml_sys_rename: caml_sys_rename,
     caml_sys_is_directory: caml_sys_is_directory,
     caml_sys_remove: caml_sys_remove,
     caml_sys_read_directory: caml_sys_read_directory,
     caml_sys_file_exists: caml_sys_file_exists,
     caml_raise_not_a_dir: caml_raise_not_a_dir,
     caml_raise_no_such_file: caml_raise_no_such_file,
     caml_sys_chdir: caml_sys_chdir,
     caml_sys_getcwd: caml_sys_getcwd,
     caml_unmount: caml_unmount,
     caml_mount_autoload: caml_mount_autoload,
     resolve_fs_device: resolve_fs_device,
     caml_list_mount_point: caml_list_mount_point,
     jsoo_mount_point: jsoo_mount_point,
     caml_make_path: caml_make_path,
     path_is_absolute: path_is_absolute,
     MlFile: MlFile,
     caml_root: caml_root,
     caml_get_root: caml_get_root,
     caml_current_dir: caml_current_dir,
     caml_trailing_slash: caml_trailing_slash,
     caml_finish_formatting: caml_finish_formatting,
     caml_parse_format: caml_parse_format,
     caml_array_bound_error: caml_array_bound_error,
     caml_raise_not_found: caml_raise_not_found,
     caml_raise_zero_divide: caml_raise_zero_divide,
     caml_raise_end_of_file: caml_raise_end_of_file,
     caml_invalid_argument: caml_invalid_argument,
     caml_failwith: caml_failwith,
     caml_raise_with_string: caml_raise_with_string,
     caml_raise_with_args: caml_raise_with_args,
     caml_raise_with_arg: caml_raise_with_arg,
     caml_raise_constant: caml_raise_constant,
     caml_lessthan: caml_lessthan,
     caml_lessequal: caml_lessequal,
     caml_greaterthan: caml_greaterthan,
     caml_greaterequal: caml_greaterequal,
     caml_notequal: caml_notequal,
     caml_equal: caml_equal,
     caml_int_compare: caml_int_compare,
     caml_compare: caml_compare,
     caml_compare_val: caml_compare_val,
     caml_compare_val_number_custom: caml_compare_val_number_custom,
     caml_compare_val_get_custom: caml_compare_val_get_custom,
     caml_compare_val_tag: caml_compare_val_tag,
     caml_bigstring_blit_ba_to_bytes: caml_bigstring_blit_ba_to_bytes,
     caml_bigstring_blit_bytes_to_ba: caml_bigstring_blit_bytes_to_ba,
     caml_bigstring_blit_string_to_ba: caml_bigstring_blit_string_to_ba,
     caml_bigstring_blit_ba_to_ba: caml_bigstring_blit_ba_to_ba,
     caml_bigstring_memcmp: caml_bigstring_memcmp,
     bigstring_of_typed_array: bigstring_of_typed_array,
     bigstring_of_array_buffer: bigstring_of_array_buffer,
     bigstring_to_typed_array: bigstring_to_typed_array,
     bigstring_to_array_buffer: bigstring_to_array_buffer,
     caml_hash_mix_bigstring: caml_hash_mix_bigstring,
     caml_ba_from_typed_array: caml_ba_from_typed_array,
     caml_ba_kind_of_typed_array: caml_ba_kind_of_typed_array,
     caml_ba_to_typed_array: caml_ba_to_typed_array,
     caml_ba_hash: caml_ba_hash,
     caml_ba_create_from: caml_ba_create_from,
     caml_ba_deserialize: caml_ba_deserialize,
     caml_ba_serialize: caml_ba_serialize,
     caml_ba_reshape: caml_ba_reshape,
     caml_ba_slice: caml_ba_slice,
     caml_ba_sub: caml_ba_sub,
     caml_ba_blit: caml_ba_blit,
     caml_ba_fill: caml_ba_fill,
     caml_ba_set_3: caml_ba_set_3,
     caml_ba_set_2: caml_ba_set_2,
     caml_ba_set_1: caml_ba_set_1,
     caml_ba_uint8_set64: caml_ba_uint8_set64,
     caml_ba_uint8_set32: caml_ba_uint8_set32,
     caml_ba_uint8_set16: caml_ba_uint8_set16,
     caml_ba_set_generic: caml_ba_set_generic,
     caml_ba_get_3: caml_ba_get_3,
     caml_ba_get_2: caml_ba_get_2,
     caml_ba_get_1: caml_ba_get_1,
     caml_ba_uint8_get64: caml_ba_uint8_get64,
     caml_ba_uint8_get32: caml_ba_uint8_get32,
     caml_ba_uint8_get16: caml_ba_uint8_get16,
     caml_ba_get_generic: caml_ba_get_generic,
     caml_ba_dim_3: caml_ba_dim_3,
     caml_ba_dim_2: caml_ba_dim_2,
     caml_ba_dim_1: caml_ba_dim_1,
     caml_ba_dim: caml_ba_dim,
     caml_ba_num_dims: caml_ba_num_dims,
     caml_ba_layout: caml_ba_layout,
     caml_ba_kind: caml_ba_kind,
     caml_ba_change_layout: caml_ba_change_layout,
     caml_ba_create: caml_ba_create,
     caml_ba_create_unsafe: caml_ba_create_unsafe,
     caml_ba_compare: caml_ba_compare,
     Ml_Bigarray_c_1_1: Ml_Bigarray_c_1_1,
     Ml_Bigarray: Ml_Bigarray,
     caml_ba_custom_name: caml_ba_custom_name,
     caml_ba_create_buffer: caml_ba_create_buffer,
     caml_ba_get_size_per_element: caml_ba_get_size_per_element,
     caml_ba_get_size: caml_ba_get_size,
     caml_ba_init: caml_ba_init,
     caml_convert_raw_backtrace_slot: caml_convert_raw_backtrace_slot,
     caml_get_current_callstack: caml_get_current_callstack,
     caml_restore_raw_backtrace: caml_restore_raw_backtrace,
     caml_raw_backtrace_slot: caml_raw_backtrace_slot,
     caml_raw_backtrace_next_slot: caml_raw_backtrace_next_slot,
     caml_raw_backtrace_length: caml_raw_backtrace_length,
     caml_convert_raw_backtrace: caml_convert_raw_backtrace,
     caml_record_backtrace: caml_record_backtrace,
     caml_get_exception_raw_backtrace: caml_get_exception_raw_backtrace,
     caml_get_exception_backtrace: caml_get_exception_backtrace,
     caml_backtrace_status: caml_backtrace_status,
     caml_ml_debug_info_status: caml_ml_debug_info_status,
     caml_record_backtrace_flag: caml_record_backtrace_flag,
     caml_floatarray_create: caml_floatarray_create,
     caml_make_float_vect: caml_make_float_vect,
     caml_make_vect: caml_make_vect,
     caml_check_bound: caml_check_bound,
     caml_array_fill: caml_array_fill,
     caml_array_get: caml_array_get,
     caml_array_set: caml_array_set,
     caml_floatarray_blit: caml_floatarray_blit,
     caml_array_blit: caml_array_blit,
     caml_array_concat: caml_array_concat,
     caml_array_append: caml_array_append,
     caml_array_sub: caml_array_sub};
   var
    cst_Assert_failure = "Assert_failure",
    cst_Division_by_zero = "Division_by_zero",
    cst_End_of_file = "End_of_file",
    cst_Failure = "Failure",
    cst_Invalid_argument = "Invalid_argument",
    cst_Match_failure = "Match_failure",
    cst_Not_found = "Not_found",
    cst_Out_of_memory = "Out_of_memory",
    cst_Stack_overflow = "Stack_overflow",
    cst_Sys_blocked_io = "Sys_blocked_io",
    cst_Sys_error = "Sys_error",
    cst_Undefined_recursive_module = "Undefined_recursive_module";
   caml_fs_init();
   caml_register_global(0, [248, cst_Out_of_memory, -1], cst_Out_of_memory);
   caml_register_global(1, [248, cst_Sys_error, -2], cst_Sys_error);
   caml_register_global(2, [248, cst_Failure, -3], cst_Failure);
   caml_register_global
    (3, [248, cst_Invalid_argument, -4], cst_Invalid_argument);
   caml_register_global(4, [248, cst_End_of_file, -5], cst_End_of_file);
   caml_register_global
    (5, [248, cst_Division_by_zero, -6], cst_Division_by_zero);
   caml_register_global(6, [248, cst_Not_found, -7], cst_Not_found);
   caml_register_global(7, [248, cst_Match_failure, -8], cst_Match_failure);
   caml_register_global(8, [248, cst_Stack_overflow, -9], cst_Stack_overflow);
   caml_register_global(9, [248, cst_Sys_blocked_io, -10], cst_Sys_blocked_io);
   caml_register_global
    (10, [248, cst_Assert_failure, -11], cst_Assert_failure);
   caml_register_global
    (11,
     [248, cst_Undefined_recursive_module, -12],
     cst_Undefined_recursive_module);
   return;
  }
  (globalThis));


(function(a){"use strict";var
s="Sys_error",ao="Stdlib__Obj",ap="Stdlib__Unit",ay="Stdlib__Nativeint",l="Stdlib__Gc",ax="Stdlib__Stack",r="CamlinternalFormat",S="Stdlib__Genlex",av="Stdlib__Random",q="Stdlib__Pervasives",B="Stack_overflow",ac="Stdlib__ArrayLabels",af="Stdlib__Either",aj="Stdlib__Printexc",w="Stdlib__Map",A="Stdlib__Arg",R="Undefined_recursive_module",au="Stdlib__Array",G="Assert_failure",Q="CamlinternalFormatBasics",k="Stdlib__Lazy",P="Stdlib__Queue",v="Stdlib__Format",W="Stdlib__In_channel",f="Stdlib__Bool",F="Stdlib__BytesLabels",aF="Stdlib__Bytes",ah="Division_by_zero",ai="Unix",u="End_of_file",O="CamlinternalMod",E="Stdlib__Marshal",ab="React",aE="Out_of_memory",N="Stdlib__Parsing",ag="Stdlib__Weak",ae="Not_found",aD="Failure",e="Stdlib__Int",p="Stdlib__StdLabels",z="Dune__exe__Ball",d="Stdlib__Oo",L="Stdlib__Bigarray",M="Stdlib__List",aa="Stdlib__Ephemeron",at="Stdlib__String",aC="Stdlib__Printf",V="Stdlib",as="Bigarray",an="Stdlib__Callback",U="Stdlib__Filename",am="Stdlib__Hashtbl",j="Invalid_argument",$="Stdlib__Fun",t="Stdlib__Option",y="Stdlib__Lexing",aB="Stdlib__ListLabels",al="CamlinternalAtomic",aw="Stdlib__Atomic",ak="Stdlib__MoreLabels",_="Stdlib__Result",i="Std_exit",K="Stdlib__Set",Y="OcamlCanvas",Z="Stdlib__Buffer",aA="Match_failure",h="Stdlib__StringLabels",ar="Stdlib__Complex",T="Stdlib__Int64",X="Stdlib__Out_channel",o="Stdlib__Seq",J="UnixLabels",aq="Stdlib__Sys",ad="CamlinternalLazy",I="Sys_blocked_io",x="Stdlib__Float",H="Stdlib__Uchar",g="Stdlib__Scanf",n="CamlinternalOO",az="Stdlib__Digest",m="Stdlib__Stream",D="Stdlib__Char",C="Stdlib__Int32",c=a.jsoo_runtime,b=c.caml_get_global_data();b.prim_count=902;b.symbols=[0,[0,J,77],[0,ai,76],[0,R,11],[0,s,10],[0,I,9],[0,ag,56],[0,ap,31],[0,H,26],[0,aq,17],[0,h,70],[0,at,30],[0,m,44],[0,p,72],[0,ax,42],[0,K,40],[0,o,21],[0,g,58],[0,_,23],[0,av,54],[0,P,43],[0,aC,47],[0,aj,50],[0,q,15],[0,N,39],[0,X,75],[0,t,22],[0,d,61],[0,ao,18],[0,ay,37],[0,ak,71],[0,E,32],[0,w,41],[0,aB,68],[0,M,27],[0,y,38],[0,k,20],[0,T,36],[0,C,35],[0,e,28],[0,W,74],[0,am,55],[0,S,63],[0,l,52],[0,$,51],[0,v,57],[0,x,34],[0,U,65],[0,aa,64],[0,af,16],[0,az,53],[0,ar,66],[0,D,25],[0,an,59],[0,F,69],[0,aF,29],[0,Z,45],[0,f,24],[0,L,73],[0,aw,49],[0,ac,67],[0,au,33],[0,A,48],[0,V,14],[0,i,82],[0,B,8],[0,ab,79],[0,aE,7],[0,Y,80],[0,ae,6],[0,aA,5],[0,j,4],[0,aD,3],[0,u,2],[0,z,81],[0,ah,1],[0,n,60],[0,O,62],[0,ad,19],[0,Q,12],[0,r,46],[0,al,13],[0,as,78],[0,G,0]];b.sections=[0,[0,83,[0,[0,[0,[0,[0,0,[2,G],0,[0,0,[2,as],78,0,1],2],[2,al],13,[0,0,[2,r],46,0,1],3],[2,Q],12,[0,[0,0,[2,ad],19,[0,[0,0,[2,O],62,0,1],[2,n],60,0,2],3],[2,ah],1,[0,[0,0,[2,z],81,0,1],[2,u],2,0,2],4],5],[2,aD],3,[0,[0,[0,[0,0,[2,j],4,0,1],[2,aA],5,[0,0,[2,ae],6,[0,0,[2,Y],80,0,1],2],3],[2,aE],7,[0,[0,0,[2,ab],79,0,1],[2,B],8,[0,0,[2,i],82,0,1],2],4],[2,V],14,[0,[0,[0,0,[2,A],48,0,1],[2,au],33,[0,[0,0,[2,ac],67,0,1],[2,aw],49,[0,0,[2,L],73,0,1],2],3],[2,f],24,[0,[0,[0,0,[2,Z],45,0,1],[2,aF],29,[0,[0,0,[2,F],69,0,1],[2,an],59,0,2],3],[2,D],25,[0,[0,0,[2,ar],66,0,1],[2,az],53,0,2],4],5],6],7],[2,af],16,[0,[0,[0,[0,[0,[0,0,[2,aa],64,[0,0,[2,U],65,0,1],2],[2,x],34,[0,0,[2,v],57,0,1],3],[2,$],51,[0,0,[2,l],52,[0,[0,0,[2,S],63,0,1],[2,am],55,[0,0,[2,W],74,0,1],2],3],4],[2,e],28,[0,0,[2,C],35,[0,0,[2,T],36,0,1],2],5],[2,k],20,[0,[0,[0,0,[2,y],38,0,1],[2,M],27,[0,[0,[0,0,[2,aB],68,0,1],[2,w],41,0,2],[2,E],32,[0,[0,0,[2,ak],71,0,1],[2,ay],37,0,2],3],4],[2,ao],18,[0,[0,0,[2,d],61,0,1],[2,t],22,[0,[0,0,[2,X],75,0,1],[2,N],39,0,2],3],5],6],[2,q],15,[0,[0,[0,[0,[0,0,[2,aj],50,0,1],[2,aC],47,0,2],[2,P],43,[0,[0,0,[2,av],54,0,1],[2,_],23,[0,0,[2,g],58,0,1],2],3],[2,o],21,[0,[0,0,[2,K],40,0,1],[2,ax],42,[0,[0,[0,0,[2,p],72,0,1],[2,m],44,0,2],[2,at],30,[0,0,[2,h],70,0,1],3],4],5],[2,aq],17,[0,[0,0,[2,H],26,[0,0,[2,ap],31,[0,0,[2,ag],56,0,1],2],3],[2,I],9,[0,[0,0,[2,s],10,0,1],[2,R],11,[0,0,[2,ai],76,[0,0,[2,J],77,0,1],2],3],4],6],7],8]],0,c.caml_list_of_js_array(["BUTTON","BUTTON_STATE","BUTTON_STATE_TAG","BUTTON_TAG","BigStringReader","CAP_TYPE_TAG","COMPOP_TAG","Cap_type_val","Compop_val","Draw_style_val","EVENT_TAG","FOCUS","FOCUS_TAG","JOIN_TYPE_TAG","Join_type_val","KEY","KEY_STATE","KEY_STATE_TAG","KEY_TAG","Key_code_val","MlBytes","MlFakeDevice","MlFakeFd","MlFakeFd_out","MlFakeFile","MlFile","MlInt64","MlMutex","MlNat","MlNodeDevice","MlNodeFd","MlObjectTable","MlStringReader","Ml_Bigarray","Ml_Bigarray_c_1_1","Optional_bool_val","Optional_val","REPEAT_TAG","Repeat_val","SLANT","SLANT_TAG","STYLE_TAG","Slant_val","UInt8ArrayReader","Val_button","Val_button_state","Val_cap_type","Val_compop","Val_draw_style","Val_focus_in_out","Val_join_type","Val_key_code","Val_key_state","Val_repeat","_color_of_int","_event_canvas_scale","_focus","_frame_handler","_header_down_handler","_int_of_color","_internal_canvas","_internal_ctxt","_key_down_handler","_key_up_handler","_make_key_event","_ml_canvas_adjust_blit_info","_ml_canvas_ba_of_img","_ml_canvas_decorate","_ml_canvas_ensure_initialized","_ml_canvas_image_of_png_file","_ml_canvas_initialized","_ml_canvas_mlContinuation","_ml_canvas_mlException","_ml_canvas_mlProcessEvent","_ml_canvas_process_event","_ml_canvas_surface_of_ba","_ml_canvas_valid_canvas_size","_move","_move_handler","_next_id","_resize","_resize_handler","_surface_down_handler","_up_handler","add_nat","bigstring_of_array_buffer","bigstring_of_typed_array","bigstring_to_array_buffer","bigstring_to_typed_array","blit_nat","caml_MD5Final","caml_MD5Init","caml_MD5Transform","caml_MD5Update","caml_acosh_float","caml_alloc_dummy_infix","caml_alloc_stack","caml_argv","caml_array_append","caml_array_blit","caml_array_bound_error","caml_array_concat","caml_array_fill","caml_array_get","caml_array_of_bytes","caml_array_of_string","caml_array_set","caml_array_sub","caml_asinh_float","caml_atanh_float","caml_atomic_cas","caml_atomic_exchange","caml_atomic_fetch_add","caml_atomic_load","caml_atomic_make_contended","caml_ba_blit","caml_ba_change_layout","caml_ba_compare","caml_ba_create","caml_ba_create_buffer","caml_ba_create_from","caml_ba_create_unsafe","caml_ba_custom_name","caml_ba_deserialize","caml_ba_dim","caml_ba_dim_1","caml_ba_dim_2","caml_ba_dim_3","caml_ba_fill","caml_ba_from_typed_array","caml_ba_get_1","caml_ba_get_2","caml_ba_get_3","caml_ba_get_generic","caml_ba_get_size","caml_ba_get_size_per_element","caml_ba_hash","caml_ba_init","caml_ba_kind","caml_ba_kind_of_typed_array","caml_ba_layout","caml_ba_map_file","caml_ba_map_file_bytecode","caml_ba_num_dims","caml_ba_reshape","caml_ba_serialize","caml_ba_set_1","caml_ba_set_2","caml_ba_set_3","caml_ba_set_generic","caml_ba_slice","caml_ba_sub","caml_ba_to_typed_array","caml_ba_uint8_get16","caml_ba_uint8_get32","caml_ba_uint8_get64","caml_ba_uint8_set16","caml_ba_uint8_set32","caml_ba_uint8_set64","caml_backtrace_status","caml_bigstring_blit_ba_to_ba","caml_bigstring_blit_ba_to_bytes","caml_bigstring_blit_bytes_to_ba","caml_bigstring_blit_string_to_ba","caml_bigstring_memcmp","caml_blit_bytes","caml_blit_string","caml_bswap16","caml_build_symbols","caml_bytes_bound_error","caml_bytes_compare","caml_bytes_equal","caml_bytes_get","caml_bytes_get16","caml_bytes_get32","caml_bytes_get64","caml_bytes_greaterequal","caml_bytes_greaterthan","caml_bytes_lessequal","caml_bytes_lessthan","caml_bytes_notequal","caml_bytes_of_array","caml_bytes_of_jsbytes","caml_bytes_of_string","caml_bytes_of_utf16_jsstring","caml_bytes_set","caml_bytes_set16","caml_bytes_set32","caml_bytes_set64","caml_bytes_unsafe_get","caml_bytes_unsafe_set","caml_call_gen","caml_callback","caml_cbrt_float","caml_channel_descriptor","caml_check_bound","caml_classify_float","caml_compare","caml_compare_val","caml_compare_val_get_custom","caml_compare_val_number_custom","caml_compare_val_tag","caml_continuation_use_and_update_handler_noexc","caml_continuation_use_noexc","caml_convert_bytes_to_array","caml_convert_raw_backtrace","caml_convert_raw_backtrace_slot","caml_convert_string_to_bytes","caml_copysign_float","caml_cosh_float","caml_create_bytes","caml_create_file","caml_create_string","caml_current_dir","caml_custom_event_index","caml_custom_ops","caml_decompress_input","caml_div","caml_domain_dls","caml_domain_dls_get","caml_domain_dls_set","caml_domain_id","caml_domain_spawn","caml_ephe_blit_data","caml_ephe_blit_key","caml_ephe_check_data","caml_ephe_check_key","caml_ephe_create","caml_ephe_data_offset","caml_ephe_get_data","caml_ephe_get_data_copy","caml_ephe_get_key","caml_ephe_get_key_copy","caml_ephe_key_offset","caml_ephe_set_data","caml_ephe_set_key","caml_ephe_unset_data","caml_ephe_unset_key","caml_equal","caml_erf_float","caml_erfc_float","caml_eventlog_pause","caml_eventlog_resume","caml_executable_name","caml_exn_with_js_backtrace","caml_exp2_float","caml_expm1_float","caml_failwith","caml_fatal_uncaught_exception","caml_fill_bytes","caml_final_register","caml_final_register_called_without_value","caml_final_release","caml_finish_formatting","caml_float_compare","caml_float_of_bytes","caml_float_of_string","caml_floatarray_blit","caml_floatarray_create","caml_fma_float","caml_format_exception","caml_format_float","caml_format_int","caml_fresh_oo_id","caml_frexp_float","caml_fs_init","caml_gc_compaction","caml_gc_counters","caml_gc_full_major","caml_gc_get","caml_gc_huge_fallback_count","caml_gc_major","caml_gc_major_slice","caml_gc_minor","caml_gc_minor_words","caml_gc_quick_stat","caml_gc_set","caml_gc_stat","caml_get_continuation_callstack","caml_get_current_callstack","caml_get_exception_backtrace","caml_get_exception_raw_backtrace","caml_get_global_data","caml_get_major_bucket","caml_get_major_credit","caml_get_minor_free","caml_get_public_method","caml_get_root","caml_global_data","caml_gr_arc_aux","caml_gr_blit_image","caml_gr_clear_graph","caml_gr_close_graph","caml_gr_close_subwindow","caml_gr_create_image","caml_gr_current_x","caml_gr_current_y","caml_gr_display_mode","caml_gr_doc_of_state","caml_gr_draw_arc","caml_gr_draw_char","caml_gr_draw_image","caml_gr_draw_rect","caml_gr_draw_str","caml_gr_draw_string","caml_gr_dump_image","caml_gr_fill_arc","caml_gr_fill_poly","caml_gr_fill_rect","caml_gr_lineto","caml_gr_make_image","caml_gr_moveto","caml_gr_open_graph","caml_gr_open_subwindow","caml_gr_plot","caml_gr_point_color","caml_gr_remember_mode","caml_gr_resize_window","caml_gr_set_color","caml_gr_set_font","caml_gr_set_line_width","caml_gr_set_text_size","caml_gr_set_window_title","caml_gr_sigio_handler","caml_gr_sigio_signal","caml_gr_size_x","caml_gr_size_y","caml_gr_state","caml_gr_state_create","caml_gr_state_get","caml_gr_state_init","caml_gr_state_set","caml_gr_synchronize","caml_gr_text_size","caml_gr_wait_event","caml_gr_window_id","caml_greaterequal","caml_greaterthan","caml_hash","caml_hash_mix_bigstring","caml_hash_mix_bytes","caml_hash_mix_bytes_arr","caml_hash_mix_final","caml_hash_mix_float","caml_hash_mix_int","caml_hash_mix_int64","caml_hash_mix_jsbytes","caml_hash_mix_string","caml_hash_nat","caml_hexstring_of_float","caml_hypot_float","caml_input_value","caml_input_value_from_bytes","caml_input_value_from_reader","caml_input_value_from_string","caml_input_value_to_outside_heap","caml_install_signal_handler","caml_int32_bits_of_float","caml_int32_bswap","caml_int32_float_of_bits","caml_int32_unmarshal","caml_int64_add","caml_int64_and","caml_int64_bits_of_float","caml_int64_bswap","caml_int64_compare","caml_int64_create_lo_hi","caml_int64_create_lo_mi_hi","caml_int64_div","caml_int64_float_of_bits","caml_int64_format","caml_int64_hash","caml_int64_hi32","caml_int64_is_negative","caml_int64_is_zero","caml_int64_lo32","caml_int64_marshal","caml_int64_mod","caml_int64_mul","caml_int64_neg","caml_int64_of_bytes","caml_int64_of_float","caml_int64_of_int32","caml_int64_of_string","caml_int64_offset","caml_int64_or","caml_int64_shift_left","caml_int64_shift_right","caml_int64_shift_right_unsigned","caml_int64_sub","caml_int64_to_bytes","caml_int64_to_float","caml_int64_to_int32","caml_int64_ult","caml_int64_unmarshal","caml_int64_xor","caml_int_compare","caml_int_of_string","caml_invalid_argument","caml_is_continuation_tag","caml_is_js","caml_is_ml_bytes","caml_is_ml_string","caml_is_printable","caml_is_special_exception","caml_js_call","caml_js_delete","caml_js_equals","caml_js_error_of_exception","caml_js_error_option_of_exception","caml_js_eval_string","caml_js_expr","caml_js_from_array","caml_js_from_bool","caml_js_from_float","caml_js_from_string","caml_js_fun_call","caml_js_function_arity","caml_js_get","caml_js_get_console","caml_js_html_entities","caml_js_html_escape","caml_js_instanceof","caml_js_meth_call","caml_js_new","caml_js_object","caml_js_on_ie","caml_js_pure_expr","caml_js_set","caml_js_strict_equals","caml_js_to_array","caml_js_to_bool","caml_js_to_byte_string","caml_js_to_float","caml_js_to_int32","caml_js_to_string","caml_js_typeof","caml_js_var","caml_js_wrap_callback","caml_js_wrap_callback_arguments","caml_js_wrap_callback_strict","caml_js_wrap_callback_unsafe","caml_js_wrap_meth_callback","caml_js_wrap_meth_callback_arguments","caml_js_wrap_meth_callback_strict","caml_js_wrap_meth_callback_unsafe","caml_jsbytes_of_string","caml_jsoo_flags_effects","caml_jsoo_flags_use_js_string","caml_jsstring_of_string","caml_lazy_make_forward","caml_lazy_read_result","caml_lazy_reset_to_lazy","caml_lazy_update_to_forcing","caml_lazy_update_to_forward","caml_ldexp_float","caml_lessequal","caml_lessthan","caml_lex_array","caml_lex_engine","caml_list_mount_point","caml_list_of_js_array","caml_list_to_js_array","caml_log10_float","caml_log1p_float","caml_log2_float","caml_lxm_next","caml_make_float_vect","caml_make_path","caml_make_vect","caml_marshal_constants","caml_marshal_data_size","caml_marshal_header_size","caml_maybe_attach_backtrace","caml_maybe_print_stats","caml_md5_bytes","caml_md5_chan","caml_md5_string","caml_memprof_discard","caml_memprof_set","caml_memprof_start","caml_memprof_stop","caml_ml_bytes_content","caml_ml_bytes_length","caml_ml_channel_get","caml_ml_channel_redirect","caml_ml_channel_restore","caml_ml_channel_size","caml_ml_channel_size_64","caml_ml_channels","caml_ml_close_channel","caml_ml_condition_broadcast","caml_ml_condition_new","caml_ml_condition_signal","caml_ml_condition_wait","caml_ml_debug_info_status","caml_ml_domain_cpu_relax","caml_ml_domain_id","caml_ml_domain_set_name","caml_ml_domain_unique_token","caml_ml_enable_runtime_warnings","caml_ml_flush","caml_ml_input","caml_ml_input_bigarray","caml_ml_input_block","caml_ml_input_char","caml_ml_input_int","caml_ml_input_scan_line","caml_ml_is_buffered","caml_ml_mutex_lock","caml_ml_mutex_new","caml_ml_mutex_try_lock","caml_ml_mutex_unlock","caml_ml_open_descriptor_in","caml_ml_open_descriptor_out","caml_ml_out_channels_list","caml_ml_output","caml_ml_output_bigarray","caml_ml_output_bytes","caml_ml_output_char","caml_ml_output_int","caml_ml_output_ta","caml_ml_pos_in","caml_ml_pos_in_64","caml_ml_pos_out","caml_ml_pos_out_64","caml_ml_runtime_events_pause","caml_ml_runtime_events_resume","caml_ml_runtime_events_start","caml_ml_runtime_warnings_enabled","caml_ml_seek_in","caml_ml_seek_in_64","caml_ml_seek_out","caml_ml_seek_out_64","caml_ml_set_binary_mode","caml_ml_set_buffered","caml_ml_set_channel_name","caml_ml_set_channel_output","caml_ml_set_channel_refill","caml_ml_string_length","caml_mod","caml_modf_float","caml_mount_autoload","caml_mul","caml_named_value","caml_named_values","caml_nativeint_unmarshal","caml_new_lex_engine","caml_new_string","caml_nextafter_float","caml_notequal","caml_obj_add_offset","caml_obj_block","caml_obj_compare_and_swap","caml_obj_dup","caml_obj_is_block","caml_obj_is_shared","caml_obj_make_forward","caml_obj_raw_field","caml_obj_reachable_words","caml_obj_set_raw_field","caml_obj_set_tag","caml_obj_tag","caml_obj_truncate","caml_obj_update_tag","caml_obj_with_tag","caml_ojs_new_arr","caml_oo_last_id","caml_output_val","caml_output_value","caml_output_value_to_buffer","caml_output_value_to_bytes","caml_output_value_to_string","caml_parse_digit","caml_parse_engine","caml_parse_format","caml_parse_sign_and_base","caml_parser_trace","caml_pos_in","caml_pos_out","caml_pure_js_expr","caml_raise_constant","caml_raise_end_of_file","caml_raise_no_such_file","caml_raise_not_a_dir","caml_raise_not_found","caml_raise_sys_error","caml_raise_with_arg","caml_raise_with_args","caml_raise_with_string","caml_raise_zero_divide","caml_raw_backtrace_length","caml_raw_backtrace_next_slot","caml_raw_backtrace_slot","caml_read_file_content","caml_recommended_domain_count","caml_record_backtrace","caml_record_backtrace_flag","caml_refill","caml_register_channel_for_spacetime","caml_register_global","caml_register_named_value","caml_restore_raw_backtrace","caml_root","caml_round_float","caml_runtime_events_create_cursor","caml_runtime_events_free_cursor","caml_runtime_events_read_poll","caml_runtime_events_user_register","caml_runtime_events_user_resolve","caml_runtime_events_user_write","caml_runtime_parameters","caml_runtime_variant","caml_runtime_warnings","caml_seek_in","caml_seek_out","caml_set_oo_id","caml_set_parser_trace","caml_set_static_env","caml_signbit_float","caml_sinh_float","caml_spacetime_enabled","caml_spacetime_only_works_for_native_code","caml_str_initialize","caml_str_repeat","caml_string_bound_error","caml_string_compare","caml_string_concat","caml_string_equal","caml_string_get","caml_string_get16","caml_string_get32","caml_string_get64","caml_string_greaterequal","caml_string_greaterthan","caml_string_hash","caml_string_lessequal","caml_string_lessthan","caml_string_notequal","caml_string_of_array","caml_string_of_bytes","caml_string_of_jsbytes","caml_string_of_jsstring","caml_string_set","caml_string_set16","caml_string_set32","caml_string_set64","caml_string_unsafe_get","caml_string_unsafe_set","caml_subarray_to_jsbytes","caml_sys_argv","caml_sys_chdir","caml_sys_close","caml_sys_const_backend_type","caml_sys_const_big_endian","caml_sys_const_int_size","caml_sys_const_max_wosize","caml_sys_const_naked_pointers_checked","caml_sys_const_ostype_cygwin","caml_sys_const_ostype_unix","caml_sys_const_ostype_win32","caml_sys_const_word_size","caml_sys_executable_name","caml_sys_exit","caml_sys_fds","caml_sys_file_exists","caml_sys_get_argv","caml_sys_get_config","caml_sys_getcwd","caml_sys_getenv","caml_sys_is_directory","caml_sys_is_regular_file","caml_sys_isatty","caml_sys_mkdir","caml_sys_modify_argv","caml_sys_open","caml_sys_open_for_node","caml_sys_random_seed","caml_sys_read_directory","caml_sys_remove","caml_sys_rename","caml_sys_rmdir","caml_sys_system_command","caml_sys_time","caml_sys_time_include_children","caml_sys_unsafe_getenv","caml_tanh_float","caml_to_js_string","caml_trailing_slash","caml_trampoline","caml_trampoline_return","caml_trunc_float","caml_uint8_array_of_bytes","caml_uint8_array_of_string","caml_unix_cleanup","caml_unix_closedir","caml_unix_filedescr_of_fd","caml_unix_findclose","caml_unix_findfirst","caml_unix_findnext","caml_unix_getpwuid","caml_unix_gettimeofday","caml_unix_getuid","caml_unix_gmtime","caml_unix_has_symlink","caml_unix_inet_addr_of_string","caml_unix_isatty","caml_unix_localtime","caml_unix_lstat","caml_unix_lstat_64","caml_unix_mkdir","caml_unix_mktime","caml_unix_opendir","caml_unix_readdir","caml_unix_readlink","caml_unix_rewinddir","caml_unix_rmdir","caml_unix_startup","caml_unix_stat","caml_unix_stat_64","caml_unix_symlink","caml_unix_time","caml_unix_unlink","caml_unmount","caml_update_dummy","caml_utf16_of_utf8","caml_utf8_of_utf16","caml_weak_create","caml_weak_set","caml_wrap_exception","caml_xmlhttprequest_create","compare_digits_nat","compare_nat","compare_nat_real","complement_nat","create_nat","decr_nat","deserialize_nat","div_digit_nat","div_helper","div_nat","fs_node_supported","incr_nat","initialize_nat","is_digit_int","is_digit_odd","is_digit_zero","jsoo_create_file","jsoo_create_file_extern","jsoo_effect_not_supported","jsoo_floor_log2","jsoo_is_ascii","jsoo_mount_point","jsoo_sys_getenv","keyname_to_keycode","land_digit_nat","length_nat","lor_digit_nat","lxor_digit_nat","make_unix_err_args","ml_canvas_arc","ml_canvas_arc_to","ml_canvas_bezier_curve_to","ml_canvas_blit","ml_canvas_clear_path","ml_canvas_clip","ml_canvas_clip_path","ml_canvas_close","ml_canvas_close_path","ml_canvas_commit","ml_canvas_compare","ml_canvas_create_offscreen","ml_canvas_create_offscreen_from_image_data","ml_canvas_create_offscreen_from_png","ml_canvas_create_onscreen","ml_canvas_ellipse","ml_canvas_export_png","ml_canvas_fill","ml_canvas_fill_path","ml_canvas_fill_rect","ml_canvas_fill_text","ml_canvas_get_canvas","ml_canvas_get_current_timestamp","ml_canvas_get_fill_color","ml_canvas_get_fill_style","ml_canvas_get_global_alpha","ml_canvas_get_global_composite_operation","ml_canvas_get_id","ml_canvas_get_image_data","ml_canvas_get_line_cap","ml_canvas_get_line_dash","ml_canvas_get_line_dash_offset","ml_canvas_get_line_join","ml_canvas_get_line_width","ml_canvas_get_miter_limit","ml_canvas_get_pixel","ml_canvas_get_position","ml_canvas_get_shadow_blur","ml_canvas_get_shadow_color","ml_canvas_get_shadow_offset","ml_canvas_get_size","ml_canvas_get_stroke_color","ml_canvas_get_stroke_style","ml_canvas_gradient_add_color_stop","ml_canvas_gradient_create_conic","ml_canvas_gradient_create_linear","ml_canvas_gradient_create_radial","ml_canvas_hash","ml_canvas_hide","ml_canvas_image_data_blit","ml_canvas_image_data_create_from_png","ml_canvas_image_data_export_png","ml_canvas_image_data_fill","ml_canvas_image_data_get_pixel","ml_canvas_image_data_get_size","ml_canvas_image_data_import_png","ml_canvas_image_data_put_pixel","ml_canvas_image_data_sub","ml_canvas_import_png","ml_canvas_init","ml_canvas_int_of_key","ml_canvas_key_of_int","ml_canvas_line_to","ml_canvas_move_to","ml_canvas_path_add","ml_canvas_path_add_transformed","ml_canvas_path_arc","ml_canvas_path_arc_to","ml_canvas_path_bezier_curve_to","ml_canvas_path_close","ml_canvas_path_create","ml_canvas_path_ellipse","ml_canvas_path_line_to","ml_canvas_path_move_to","ml_canvas_path_quadratic_curve_to","ml_canvas_path_rect","ml_canvas_pattern_create","ml_canvas_put_image_data","ml_canvas_put_pixel","ml_canvas_quadratic_curve_to","ml_canvas_rect","ml_canvas_restore","ml_canvas_rotate","ml_canvas_run","ml_canvas_save","ml_canvas_scale","ml_canvas_set_fill_color","ml_canvas_set_fill_gradient","ml_canvas_set_fill_pattern","ml_canvas_set_fill_style","ml_canvas_set_font","ml_canvas_set_global_alpha","ml_canvas_set_global_composite_operation","ml_canvas_set_line_cap","ml_canvas_set_line_dash","ml_canvas_set_line_dash_offset","ml_canvas_set_line_join","ml_canvas_set_line_width","ml_canvas_set_miter_limit","ml_canvas_set_position","ml_canvas_set_shadow_blur","ml_canvas_set_shadow_color","ml_canvas_set_shadow_offset","ml_canvas_set_size","ml_canvas_set_stroke_color","ml_canvas_set_stroke_gradient","ml_canvas_set_stroke_pattern","ml_canvas_set_stroke_style","ml_canvas_set_transform","ml_canvas_shear","ml_canvas_show","ml_canvas_stop","ml_canvas_stroke","ml_canvas_stroke_path","ml_canvas_stroke_rect","ml_canvas_stroke_text","ml_canvas_transform","ml_canvas_translate","mult_digit_nat","mult_nat","nat_of_array","nth_digit_nat","nth_digit_nat_native","num_digits_nat","num_leading_zero_bits_in_digit","os_type","path_is_absolute","re_match","re_partial_match","re_replacement_text","re_search_backward","re_search_forward","re_string_match","resolve_fs_device","serialize_nat","set_digit_nat","set_digit_nat_native","set_to_zero_nat","shift_left_nat","shift_right_nat","square_nat","sub_nat"]),0];return}(globalThis));
//# 1 "../.js/default/stdlib/stdlib.cma.js"
// Generated by js_of_ocaml
//# 3 "../.js/default/stdlib/stdlib.cma.js"

//# 5 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function erase_rel(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var rest = param[1]; return [0, erase_rel(rest)];
      case 1:
       var rest$0 = param[1]; return [1, erase_rel(rest$0)];
      case 2:
       var rest$1 = param[1]; return [2, erase_rel(rest$1)];
      case 3:
       var rest$2 = param[1]; return [3, erase_rel(rest$2)];
      case 4:
       var rest$3 = param[1]; return [4, erase_rel(rest$3)];
      case 5:
       var rest$4 = param[1]; return [5, erase_rel(rest$4)];
      case 6:
       var rest$5 = param[1]; return [6, erase_rel(rest$5)];
      case 7:
       var rest$6 = param[1]; return [7, erase_rel(rest$6)];
      case 8:
       var rest$7 = param[2], ty = param[1];
       return [8, ty, erase_rel(rest$7)];
      case 9:
       var rest$8 = param[3], ty1 = param[1];
       return [9, ty1, ty1, erase_rel(rest$8)];
      case 10:
       var rest$9 = param[1]; return [10, erase_rel(rest$9)];
      case 11:
       var rest$10 = param[1]; return [11, erase_rel(rest$10)];
      case 12:
       var rest$11 = param[1]; return [12, erase_rel(rest$11)];
      case 13:
       var rest$12 = param[1]; return [13, erase_rel(rest$12)];
      default: var rest$13 = param[1]; return [14, erase_rel(rest$13)];
    }
   }
   function concat_fmtty(fmtty1, fmtty2){
    if(typeof fmtty1 === "number") return fmtty2;
    switch(fmtty1[0]){
      case 0:
       var rest = fmtty1[1]; return [0, concat_fmtty(rest, fmtty2)];
      case 1:
       var rest$0 = fmtty1[1]; return [1, concat_fmtty(rest$0, fmtty2)];
      case 2:
       var rest$1 = fmtty1[1]; return [2, concat_fmtty(rest$1, fmtty2)];
      case 3:
       var rest$2 = fmtty1[1]; return [3, concat_fmtty(rest$2, fmtty2)];
      case 4:
       var rest$3 = fmtty1[1]; return [4, concat_fmtty(rest$3, fmtty2)];
      case 5:
       var rest$4 = fmtty1[1]; return [5, concat_fmtty(rest$4, fmtty2)];
      case 6:
       var rest$5 = fmtty1[1]; return [6, concat_fmtty(rest$5, fmtty2)];
      case 7:
       var rest$6 = fmtty1[1]; return [7, concat_fmtty(rest$6, fmtty2)];
      case 8:
       var rest$7 = fmtty1[2], ty = fmtty1[1];
       return [8, ty, concat_fmtty(rest$7, fmtty2)];
      case 9:
       var rest$8 = fmtty1[3], ty2 = fmtty1[2], ty1 = fmtty1[1];
       return [9, ty1, ty2, concat_fmtty(rest$8, fmtty2)];
      case 10:
       var rest$9 = fmtty1[1]; return [10, concat_fmtty(rest$9, fmtty2)];
      case 11:
       var rest$10 = fmtty1[1]; return [11, concat_fmtty(rest$10, fmtty2)];
      case 12:
       var rest$11 = fmtty1[1]; return [12, concat_fmtty(rest$11, fmtty2)];
      case 13:
       var rest$12 = fmtty1[1]; return [13, concat_fmtty(rest$12, fmtty2)];
      default:
       var rest$13 = fmtty1[1]; return [14, concat_fmtty(rest$13, fmtty2)];
    }
   }
   function concat_fmt(fmt1, fmt2){
    if(typeof fmt1 === "number") return fmt2;
    switch(fmt1[0]){
      case 0:
       var rest = fmt1[1]; return [0, concat_fmt(rest, fmt2)];
      case 1:
       var rest$0 = fmt1[1]; return [1, concat_fmt(rest$0, fmt2)];
      case 2:
       var rest$1 = fmt1[2], pad = fmt1[1];
       return [2, pad, concat_fmt(rest$1, fmt2)];
      case 3:
       var rest$2 = fmt1[2], pad$0 = fmt1[1];
       return [3, pad$0, concat_fmt(rest$2, fmt2)];
      case 4:
       var rest$3 = fmt1[4], prec = fmt1[3], pad$1 = fmt1[2], iconv = fmt1[1];
       return [4, iconv, pad$1, prec, concat_fmt(rest$3, fmt2)];
      case 5:
       var
        rest$4 = fmt1[4],
        prec$0 = fmt1[3],
        pad$2 = fmt1[2],
        iconv$0 = fmt1[1];
       return [5, iconv$0, pad$2, prec$0, concat_fmt(rest$4, fmt2)];
      case 6:
       var
        rest$5 = fmt1[4],
        prec$1 = fmt1[3],
        pad$3 = fmt1[2],
        iconv$1 = fmt1[1];
       return [6, iconv$1, pad$3, prec$1, concat_fmt(rest$5, fmt2)];
      case 7:
       var
        rest$6 = fmt1[4],
        prec$2 = fmt1[3],
        pad$4 = fmt1[2],
        iconv$2 = fmt1[1];
       return [7, iconv$2, pad$4, prec$2, concat_fmt(rest$6, fmt2)];
      case 8:
       var
        rest$7 = fmt1[4],
        prec$3 = fmt1[3],
        pad$5 = fmt1[2],
        fconv = fmt1[1];
       return [8, fconv, pad$5, prec$3, concat_fmt(rest$7, fmt2)];
      case 9:
       var rest$8 = fmt1[2], pad$6 = fmt1[1];
       return [9, pad$6, concat_fmt(rest$8, fmt2)];
      case 10:
       var rest$9 = fmt1[1]; return [10, concat_fmt(rest$9, fmt2)];
      case 11:
       var rest$10 = fmt1[2], str = fmt1[1];
       return [11, str, concat_fmt(rest$10, fmt2)];
      case 12:
       var rest$11 = fmt1[2], chr = fmt1[1];
       return [12, chr, concat_fmt(rest$11, fmt2)];
      case 13:
       var rest$12 = fmt1[3], fmtty = fmt1[2], pad$7 = fmt1[1];
       return [13, pad$7, fmtty, concat_fmt(rest$12, fmt2)];
      case 14:
       var rest$13 = fmt1[3], fmtty$0 = fmt1[2], pad$8 = fmt1[1];
       return [14, pad$8, fmtty$0, concat_fmt(rest$13, fmt2)];
      case 15:
       var rest$14 = fmt1[1]; return [15, concat_fmt(rest$14, fmt2)];
      case 16:
       var rest$15 = fmt1[1]; return [16, concat_fmt(rest$15, fmt2)];
      case 17:
       var rest$16 = fmt1[2], fmting_lit = fmt1[1];
       return [17, fmting_lit, concat_fmt(rest$16, fmt2)];
      case 18:
       var rest$17 = fmt1[2], fmting_gen = fmt1[1];
       return [18, fmting_gen, concat_fmt(rest$17, fmt2)];
      case 19:
       var rest$18 = fmt1[1]; return [19, concat_fmt(rest$18, fmt2)];
      case 20:
       var rest$19 = fmt1[3], char_set = fmt1[2], width_opt = fmt1[1];
       return [20, width_opt, char_set, concat_fmt(rest$19, fmt2)];
      case 21:
       var rest$20 = fmt1[2], counter = fmt1[1];
       return [21, counter, concat_fmt(rest$20, fmt2)];
      case 22:
       var rest$21 = fmt1[1]; return [22, concat_fmt(rest$21, fmt2)];
      case 23:
       var rest$22 = fmt1[2], ign = fmt1[1];
       return [23, ign, concat_fmt(rest$22, fmt2)];
      default:
       var rest$23 = fmt1[3], f = fmt1[2], arity = fmt1[1];
       return [24, arity, f, concat_fmt(rest$23, fmt2)];
    }
   }
   var CamlinternalFormatBasics = [0, concat_fmtty, erase_rel, concat_fmt];
   runtime.caml_register_global
    (0, CamlinternalFormatBasics, "CamlinternalFormatBasics");
   return;
  }
  (globalThis));

//# 179 "../.js/default/stdlib/stdlib.cma.js"
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function make(v){return [0, v];}
   function get(r){return r[1];}
   function set(r, v){r[1] = v; return 0;}
   function exchange(r, v){var cur = r[1]; r[1] = v; return cur;}
   function compare_and_set(r, seen, v){
    var cur = r[1];
    return cur === seen ? (r[1] = v, 1) : 0;
   }
   function fetch_and_add(r, n){
    var cur = r[1];
    r[1] = cur + n | 0;
    return cur;
   }
   function incr(r){fetch_and_add(r, 1); return 0;}
   function decr(r){fetch_and_add(r, -1); return 0;}
   var
    CamlinternalAtomic =
      [0,
       make,
       get,
       set,
       exchange,
       compare_and_set,
       fetch_and_add,
       incr,
       decr];
   runtime.caml_register_global(0, CamlinternalAtomic, "CamlinternalAtomic");
   return;
  }
  (globalThis));

//# 215 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_false$0 = "false",
    cst_true$0 = "true",
    caml_create_bytes = runtime.caml_create_bytes,
    caml_float_of_string = runtime.caml_float_of_string,
    caml_int64_float_of_bits = runtime.caml_int64_float_of_bits,
    caml_int_of_string = runtime.caml_int_of_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_channel_size = runtime.caml_ml_channel_size,
    caml_ml_channel_size_64 = runtime.caml_ml_channel_size_64,
    caml_ml_close_channel = runtime.caml_ml_close_channel,
    caml_ml_flush = runtime.caml_ml_flush,
    caml_ml_input = runtime.caml_ml_input,
    caml_ml_input_char = runtime.caml_ml_input_char,
    caml_ml_open_descriptor_in = runtime.caml_ml_open_descriptor_in,
    caml_ml_open_descriptor_out = runtime.caml_ml_open_descriptor_out,
    caml_ml_output = runtime.caml_ml_output,
    caml_ml_output_bytes = runtime.caml_ml_output_bytes,
    caml_ml_output_char = runtime.caml_ml_output_char,
    caml_ml_set_binary_mode = runtime.caml_ml_set_binary_mode,
    caml_ml_set_channel_name = runtime.caml_ml_set_channel_name,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_concat = runtime.caml_string_concat,
    caml_string_of_bytes = runtime.caml_string_of_bytes,
    caml_sys_open = runtime.caml_sys_open,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    CamlinternalAtomic = global_data.CamlinternalAtomic,
    CamlinternalFormatBasics = global_data.CamlinternalFormatBasics,
    Invalid_argument = global_data.Invalid_argument,
    Failure = global_data.Failure,
    Match_failure = global_data.Match_failure,
    Assert_failure = global_data.Assert_failure,
    Not_found = global_data.Not_found,
    Out_of_memory = global_data.Out_of_memory,
    Stack_overflow = global_data.Stack_overflow,
    Sys_error = global_data.Sys_error,
    End_of_file = global_data.End_of_file,
    Division_by_zero = global_data.Division_by_zero,
    Sys_blocked_io = global_data.Sys_blocked_io,
    Undefined_recursive_module = global_data.Undefined_recursive_module;
   function failwith(s){
    throw caml_maybe_attach_backtrace([0, Failure, s], 1);
   }
   function invalid_arg(s){
    throw caml_maybe_attach_backtrace([0, Invalid_argument, s], 1);
   }
   var Exit = [248, "Stdlib.Exit", runtime.caml_fresh_oo_id(0)];
   function min(x, y){return runtime.caml_lessequal(x, y) ? x : y;}
   function max(x, y){return runtime.caml_greaterequal(x, y) ? x : y;}
   function abs(x){return 0 <= x ? x : - x | 0;}
   function lnot(x){return x ^ -1;}
   var
    infinity =
      caml_int64_float_of_bits
       (runtime.caml_int64_create_lo_mi_hi(0, 0, 32752)),
    neg_infinity =
      caml_int64_float_of_bits
       (runtime.caml_int64_create_lo_mi_hi(0, 0, 65520)),
    nan =
      caml_int64_float_of_bits
       (runtime.caml_int64_create_lo_mi_hi(1, 0, 32752)),
    max_float =
      caml_int64_float_of_bits
       (runtime.caml_int64_create_lo_mi_hi(16777215, 16777215, 32751)),
    min_float =
      caml_int64_float_of_bits(runtime.caml_int64_create_lo_mi_hi(0, 0, 16)),
    epsilon_float =
      caml_int64_float_of_bits
       (runtime.caml_int64_create_lo_mi_hi(0, 0, 15536)),
    symbol_concat = caml_string_concat,
    cst_char_of_int = "char_of_int",
    cst_true = cst_true$0,
    cst_false = cst_false$0,
    cst_bool_of_string = "bool_of_string",
    _a_ = [0, 1],
    _b_ = [0, 0];
   function char_of_int(n){
    if(0 <= n && 255 >= n) return n;
    return invalid_arg(cst_char_of_int);
   }
   function string_of_bool(b){return b ? cst_true : cst_false;}
   function bool_of_string(param){
    return param !== cst_false$0
            ? param !== cst_true$0 ? invalid_arg(cst_bool_of_string) : 1
            : 0;
   }
   function bool_of_string_opt(param){
    return param !== cst_false$0 ? param !== cst_true$0 ? 0 : _a_ : _b_;
   }
   function string_of_int(n){return "" + n;}
   function int_of_string_opt(s){
    try{var _u_ = [0, caml_int_of_string(s)]; return _u_;}
    catch(_v_){
     var _t_ = caml_wrap_exception(_v_);
     if(_t_[1] === Failure) return 0;
     throw caml_maybe_attach_backtrace(_t_, 0);
    }
   }
   function valid_float_lexem(s1){
    var l = caml_ml_string_length(s1), i = 0;
    for(;;){
     if(l <= i) return s1 + ".";
     var match = runtime.caml_string_get(s1, i);
     a:
     {
      if(48 <= match){if(58 > match) break a;} else if(45 === match) break a;
      return s1;
     }
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function string_of_float(f){
    return valid_float_lexem(runtime.caml_format_float("%.12g", f));
   }
   function float_of_string_opt(s){
    try{var _r_ = [0, caml_float_of_string(s)]; return _r_;}
    catch(_s_){
     var _q_ = caml_wrap_exception(_s_);
     if(_q_[1] === Failure) return 0;
     throw caml_maybe_attach_backtrace(_q_, 0);
    }
   }
   function symbol(l1, l2){
    if(! l1) return l2;
    var tl = l1[2], hd = l1[1];
    return [0, hd, symbol(tl, l2)];
   }
   var
    stdin = caml_ml_open_descriptor_in(0),
    stdout = caml_ml_open_descriptor_out(1),
    stderr = caml_ml_open_descriptor_out(2),
    _c_ = [0, 1, [0, 3, [0, 4, [0, 7, 0]]]],
    _d_ = [0, 1, [0, 3, [0, 4, [0, 6, 0]]]],
    cst_output = "output",
    cst_output_substring = "output_substring",
    _e_ = [0, 0, [0, 7, 0]],
    _f_ = [0, 0, [0, 6, 0]],
    cst_input = "input",
    cst_really_input = "really_input";
   function open_out_gen(mode, perm, name){
    var c = caml_ml_open_descriptor_out(caml_sys_open(name, mode, perm));
    caml_ml_set_channel_name(c, name);
    return c;
   }
   function open_out(name){return open_out_gen(_c_, 438, name);}
   function open_out_bin(name){return open_out_gen(_d_, 438, name);}
   function flush_all(param){
    var param$0 = runtime.caml_ml_out_channels_list(0);
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], a = param$0[1];
     try{caml_ml_flush(a);}
     catch(_p_){
      var _o_ = caml_wrap_exception(_p_);
      if(_o_[1] !== Sys_error) throw caml_maybe_attach_backtrace(_o_, 0);
     }
     param$0 = l;
    }
   }
   function output_bytes(oc, s){
    return caml_ml_output_bytes(oc, s, 0, caml_ml_bytes_length(s));
   }
   function output_string(oc, s){
    return caml_ml_output(oc, s, 0, caml_ml_string_length(s));
   }
   function output(oc, s, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs)
     return caml_ml_output_bytes(oc, s, ofs, len);
    return invalid_arg(cst_output);
   }
   function output_substring(oc, s, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_string_length(s) - len | 0) >= ofs)
     return caml_ml_output(oc, s, ofs, len);
    return invalid_arg(cst_output_substring);
   }
   function output_value(chan, v){
    return runtime.caml_output_value(chan, v, 0);
   }
   function close_out(oc){
    caml_ml_flush(oc);
    return caml_ml_close_channel(oc);
   }
   function close_out_noerr(oc){
    try{caml_ml_flush(oc);}catch(_n_){}
    try{var _l_ = caml_ml_close_channel(oc); return _l_;}catch(_m_){return 0;}
   }
   function open_in_gen(mode, perm, name){
    var c = caml_ml_open_descriptor_in(caml_sys_open(name, mode, perm));
    caml_ml_set_channel_name(c, name);
    return c;
   }
   function open_in(name){return open_in_gen(_e_, 0, name);}
   function open_in_bin(name){return open_in_gen(_f_, 0, name);}
   function input(ic, s, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs)
     return caml_ml_input(ic, s, ofs, len);
    return invalid_arg(cst_input);
   }
   function unsafe_really_input(ic, s, ofs, len){
    var ofs$0 = ofs, len$0 = len;
    for(;;){
     if(0 >= len$0) return 0;
     var r = caml_ml_input(ic, s, ofs$0, len$0);
     if(0 === r) throw caml_maybe_attach_backtrace(End_of_file, 1);
     var len$1 = len$0 - r | 0, ofs$1 = ofs$0 + r | 0;
     ofs$0 = ofs$1;
     len$0 = len$1;
    }
   }
   function really_input(ic, s, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs)
     return unsafe_really_input(ic, s, ofs, len);
    return invalid_arg(cst_really_input);
   }
   function really_input_string(ic, len){
    var s = caml_create_bytes(len);
    really_input(ic, s, 0, len);
    return caml_string_of_bytes(s);
   }
   function input_line(chan){
    function build_result(buf, pos, param){
     var pos$0 = pos, param$0 = param;
     for(;;){
      if(! param$0) return buf;
      var tl = param$0[2], hd = param$0[1], len = caml_ml_bytes_length(hd);
      runtime.caml_blit_bytes(hd, 0, buf, pos$0 - len | 0, len);
      var pos$1 = pos$0 - len | 0;
      pos$0 = pos$1;
      param$0 = tl;
     }
    }
    var accu = 0, len = 0;
    for(;;){
     var n = runtime.caml_ml_input_scan_line(chan);
     if(0 === n){
      if(! accu) throw caml_maybe_attach_backtrace(End_of_file, 1);
      var _k_ = build_result(caml_create_bytes(len), len, accu);
     }
     else{
      if(0 >= n){
       var beg = caml_create_bytes(- n | 0);
       caml_ml_input(chan, beg, 0, - n | 0);
       var len$1 = len - n | 0, accu$0 = [0, beg, accu];
       accu = accu$0;
       len = len$1;
       continue;
      }
      var res = caml_create_bytes(n - 1 | 0);
      caml_ml_input(chan, res, 0, n - 1 | 0);
      caml_ml_input_char(chan);
      if(accu)
       var
        len$0 = (len + n | 0) - 1 | 0,
        _k_ = build_result(caml_create_bytes(len$0), len$0, [0, res, accu]);
      else
       var _k_ = res;
     }
     return caml_string_of_bytes(_k_);
    }
   }
   function close_in_noerr(ic){
    try{var _i_ = caml_ml_close_channel(ic); return _i_;}catch(_j_){return 0;}
   }
   function print_char(c){return caml_ml_output_char(stdout, c);}
   function print_string(s){return output_string(stdout, s);}
   function print_bytes(s){return output_bytes(stdout, s);}
   function print_int(i){return output_string(stdout, "" + i);}
   function print_float(f){return output_string(stdout, string_of_float(f));}
   function print_endline(s){
    output_string(stdout, s);
    caml_ml_output_char(stdout, 10);
    return caml_ml_flush(stdout);
   }
   function print_newline(param){
    caml_ml_output_char(stdout, 10);
    return caml_ml_flush(stdout);
   }
   function prerr_char(c){return caml_ml_output_char(stderr, c);}
   function prerr_string(s){return output_string(stderr, s);}
   function prerr_bytes(s){return output_bytes(stderr, s);}
   function prerr_int(i){return output_string(stderr, "" + i);}
   function prerr_float(f){return output_string(stderr, string_of_float(f));}
   function prerr_endline(s){
    output_string(stderr, s);
    caml_ml_output_char(stderr, 10);
    return caml_ml_flush(stderr);
   }
   function prerr_newline(param){
    caml_ml_output_char(stderr, 10);
    return caml_ml_flush(stderr);
   }
   function read_line(param){caml_ml_flush(stdout); return input_line(stdin);}
   function read_int(param){return caml_int_of_string(read_line(0));}
   function read_int_opt(param){return int_of_string_opt(read_line(0));}
   function read_float(param){return caml_float_of_string(read_line(0));}
   function read_float_opt(param){return float_of_string_opt(read_line(0));}
   function string_of_format(param){var str = param[2]; return str;}
   function symbol$0(param, _h_){
    var
     str2 = _h_[2],
     fmt2 = _h_[1],
     str1 = param[2],
     fmt1 = param[1],
     s2 = "%," + str2;
    return [0, caml_call2(CamlinternalFormatBasics[3], fmt1, fmt2), str1 + s2];
   }
   var exit_function = caml_call1(CamlinternalAtomic[1], flush_all);
   function at_exit(f){
    for(;;){
     var
      f_yet_to_run = caml_call1(CamlinternalAtomic[1], 1),
      old_exit = caml_call1(CamlinternalAtomic[2], exit_function);
     let f_yet_to_run$0 = f_yet_to_run, old_exit$0 = old_exit;
     var
      new_exit =
        function(param){
         if(caml_call3(CamlinternalAtomic[5], f_yet_to_run$0, 1, 0))
          caml_call1(f, 0);
         return caml_call1(old_exit$0, 0);
        },
      success =
        caml_call3(CamlinternalAtomic[5], exit_function, old_exit, new_exit),
      _g_ = 1 - success;
     if(! _g_) return _g_;
    }
   }
   function do_at_exit(param){
    return caml_call1(caml_call1(CamlinternalAtomic[2], exit_function), 0);
   }
   function exit(retcode){
    do_at_exit(0);
    return runtime.caml_sys_exit(retcode);
   }
   runtime.caml_register_named_value("Pervasives.do_at_exit", do_at_exit);
   var
    Stdlib =
      [0,
       invalid_arg,
       failwith,
       Exit,
       Match_failure,
       Assert_failure,
       Invalid_argument,
       Failure,
       Not_found,
       Out_of_memory,
       Stack_overflow,
       Sys_error,
       End_of_file,
       Division_by_zero,
       Sys_blocked_io,
       Undefined_recursive_module,
       min,
       max,
       abs,
       2147483647,
       -2147483648,
       lnot,
       infinity,
       neg_infinity,
       nan,
       max_float,
       min_float,
       epsilon_float,
       symbol_concat,
       char_of_int,
       string_of_bool,
       bool_of_string_opt,
       bool_of_string,
       string_of_int,
       int_of_string_opt,
       string_of_float,
       float_of_string_opt,
       symbol,
       stdin,
       stdout,
       stderr,
       print_char,
       print_string,
       print_bytes,
       print_int,
       print_float,
       print_endline,
       print_newline,
       prerr_char,
       prerr_string,
       prerr_bytes,
       prerr_int,
       prerr_float,
       prerr_endline,
       prerr_newline,
       read_line,
       read_int_opt,
       read_int,
       read_float_opt,
       read_float,
       open_out,
       open_out_bin,
       open_out_gen,
       caml_ml_flush,
       flush_all,
       caml_ml_output_char,
       output_string,
       output_bytes,
       output,
       output_substring,
       caml_ml_output_char,
       runtime.caml_ml_output_int,
       output_value,
       runtime.caml_ml_seek_out,
       runtime.caml_ml_pos_out,
       caml_ml_channel_size,
       close_out,
       close_out_noerr,
       caml_ml_set_binary_mode,
       open_in,
       open_in_bin,
       open_in_gen,
       caml_ml_input_char,
       input_line,
       input,
       really_input,
       really_input_string,
       caml_ml_input_char,
       runtime.caml_ml_input_int,
       runtime.caml_input_value,
       runtime.caml_ml_seek_in,
       runtime.caml_ml_pos_in,
       caml_ml_channel_size,
       caml_ml_close_channel,
       close_in_noerr,
       caml_ml_set_binary_mode,
       [0,
        runtime.caml_ml_seek_out_64,
        runtime.caml_ml_pos_out_64,
        caml_ml_channel_size_64,
        runtime.caml_ml_seek_in_64,
        runtime.caml_ml_pos_in_64,
        caml_ml_channel_size_64],
       string_of_format,
       symbol$0,
       exit,
       at_exit,
       valid_float_lexem,
       unsafe_really_input,
       do_at_exit];
   runtime.caml_register_global(46, Stdlib, "Stdlib");
   return;
  }
  (globalThis));

//# 978 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception,
    global_data = runtime.caml_get_global_data(),
    ocaml_version = "4.14.0",
    ocaml_release = [0, 4, 14, 0, 0],
    Stdlib = global_data.Stdlib,
    executable_name = runtime.caml_sys_executable_name(0),
    os_type = runtime.caml_sys_get_config(0)[1],
    backend_type = [0, "js_of_ocaml"],
    unix = runtime.caml_sys_const_ostype_unix(0),
    win32 = runtime.caml_sys_const_ostype_win32(0),
    cygwin = runtime.caml_sys_const_ostype_cygwin(0),
    max_array_length = runtime.caml_sys_const_max_wosize(0),
    max_floatarray_length = max_array_length / 2 | 0,
    max_string_length = (4 * max_array_length | 0) - 1 | 0;
   function getenv_opt(s){
    try{var _d_ = [0, runtime.caml_sys_getenv(s)]; return _d_;}
    catch(_e_){
     var _c_ = caml_wrap_exception(_e_);
     if(_c_ === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(_c_, 0);
    }
   }
   var interactive = [0, 0];
   function set_signal(sig_num, sig_beh){return 0;}
   var Break = [248, "Stdlib.Sys.Break", runtime.caml_fresh_oo_id(0)];
   function catch_break(on){return on ? 0 : 0;}
   function Make(_b_, _a_){return [0, 1];}
   var
    Immediate64 = [0, Make],
    Stdlib_Sys =
      [0,
       executable_name,
       getenv_opt,
       interactive,
       os_type,
       backend_type,
       unix,
       win32,
       cygwin,
       32,
       32,
       0,
       max_string_length,
       max_array_length,
       max_floatarray_length,
       set_signal,
       -1,
       -2,
       -3,
       -4,
       -5,
       -6,
       -7,
       -8,
       -9,
       -10,
       -11,
       -12,
       -13,
       -14,
       -15,
       -16,
       -17,
       -18,
       -19,
       -20,
       -21,
       -22,
       -23,
       -24,
       -25,
       -26,
       -27,
       -28,
       Break,
       catch_break,
       ocaml_version,
       0,
       ocaml_release,
       runtime.caml_ml_enable_runtime_warnings,
       runtime.caml_ml_runtime_warnings_enabled,
       Immediate64];
   runtime.caml_register_global(4, Stdlib_Sys, "Stdlib__Sys");
   return;
  }
  (globalThis));

//# 1073 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Obj_extension_constructor$1 = "Obj.extension_constructor",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Sys = global_data.Stdlib__Sys;
   function is_block(a){return 1 - (typeof a === "number" ? 1 : 0);}
   var
    double_field = runtime.caml_array_get,
    set_double_field = runtime.caml_array_set,
    custom_tag = 255,
    _a_ = [0, "obj.ml", 95, 4],
    cst_Obj_extension_constructor = cst_Obj_extension_constructor$1,
    cst_Obj_extension_constructor$0 = cst_Obj_extension_constructor$1;
   function info(obj){
    if(caml_obj_tag(obj) !== 247)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
    var
     info = runtime.caml_obj_raw_field(obj, 1),
     arity = 64 === Stdlib_Sys[9] ? info >> 56 : info >> 24,
     start_env = info << 8 >>> 9 | 0;
    return [0, arity, start_env];
   }
   function of_val(x){
    a:
    {
     if(is_block(x) && caml_obj_tag(x) !== 248 && 1 <= x.length - 1){var slot = x[1]; break a;}
     var slot = x;
    }
    a:
    {
     if(is_block(slot) && caml_obj_tag(slot) === 248){var name = slot[1]; break a;}
     var name = caml_call1(Stdlib[1], cst_Obj_extension_constructor$0);
    }
    return caml_obj_tag(name) === 252
            ? slot
            : caml_call1(Stdlib[1], cst_Obj_extension_constructor);
   }
   function name(slot){return slot[1];}
   function id(slot){return slot[2];}
   var
    Extension_constructor = [0, of_val, name, id],
    extension_constructor = Extension_constructor[1],
    extension_name = Extension_constructor[2],
    extension_id = Extension_constructor[3],
    max_ephe_length = Stdlib_Sys[13] - 2 | 0,
    cst_Obj_Ephemeron_create = "Obj.Ephemeron.create",
    cst_Obj_Ephemeron_get_key = "Obj.Ephemeron.get_key",
    cst_Obj_Ephemeron_get_key_copy = "Obj.Ephemeron.get_key_copy",
    cst_Obj_Ephemeron_set_key = "Obj.Ephemeron.set_key",
    cst_Obj_Ephemeron_unset_key = "Obj.Ephemeron.unset_key",
    cst_Obj_Ephemeron_check_key = "Obj.Ephemeron.check_key",
    cst_Obj_Ephemeron_blit_key = "Obj.Ephemeron.blit_key";
   function create(l){
    var _g_ = 0 <= l ? 1 : 0, _h_ = _g_ ? l <= max_ephe_length ? 1 : 0 : _g_;
    if(1 - _h_) caml_call1(Stdlib[1], cst_Obj_Ephemeron_create);
    return runtime.caml_ephe_create(l);
   }
   function length(x){return x.length - 3 | 0;}
   function raise_if_invalid_offset(e, o, msg){
    var
     _d_ = 0 <= o ? 1 : 0,
     _e_ = _d_ ? o < length(e) ? 1 : 0 : _d_,
     _f_ = 1 - _e_;
    return _f_ ? caml_call1(Stdlib[1], msg) : _f_;
   }
   function get_key(e, o){
    raise_if_invalid_offset(e, o, cst_Obj_Ephemeron_get_key);
    return runtime.caml_ephe_get_key(e, o);
   }
   function get_key_copy(e, o){
    raise_if_invalid_offset(e, o, cst_Obj_Ephemeron_get_key_copy);
    return runtime.caml_ephe_get_key_copy(e, o);
   }
   function set_key(e, o, x){
    raise_if_invalid_offset(e, o, cst_Obj_Ephemeron_set_key);
    return runtime.caml_ephe_set_key(e, o, x);
   }
   function unset_key(e, o){
    raise_if_invalid_offset(e, o, cst_Obj_Ephemeron_unset_key);
    return runtime.caml_ephe_unset_key(e, o);
   }
   function check_key(e, o){
    raise_if_invalid_offset(e, o, cst_Obj_Ephemeron_check_key);
    return runtime.caml_ephe_check_key(e, o);
   }
   function blit_key(e1, o1, e2, o2, l){
    if
     (0 <= l
      &&
       0 <= o1
       && (length(e1) - l | 0) >= o1 && 0 <= o2 && (length(e2) - l | 0) >= o2){
     var
      _b_ = 0 !== l ? 1 : 0,
      _c_ = _b_ ? runtime.caml_ephe_blit_key(e1, o1, e2, o2, l) : _b_;
     return _c_;
    }
    return caml_call1(Stdlib[1], cst_Obj_Ephemeron_blit_key);
   }
   var
    Stdlib_Obj =
      [0,
       is_block,
       double_field,
       set_double_field,
       0,
       245,
       246,
       247,
       248,
       249,
       250,
       251,
       251,
       252,
       253,
       254,
       custom_tag,
       custom_tag,
       1000,
       1001,
       1002,
       [0, info],
       Extension_constructor,
       extension_constructor,
       extension_name,
       extension_id,
       [0,
        create,
        length,
        get_key,
        get_key_copy,
        set_key,
        unset_key,
        check_key,
        blit_key,
        runtime.caml_ephe_get_data,
        runtime.caml_ephe_get_data_copy,
        runtime.caml_ephe_set_data,
        runtime.caml_ephe_unset_data,
        runtime.caml_ephe_check_data,
        runtime.caml_ephe_blit_data,
        max_ephe_length]];
   runtime.caml_register_global(13, Stdlib_Obj, "Stdlib__Obj");
   return;
  }
  (globalThis));

//# 1235 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_make_forward = runtime.caml_obj_make_forward,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Obj = global_data.Stdlib__Obj,
    Undefined =
      [248, "CamlinternalLazy.Undefined", runtime.caml_fresh_oo_id(0)];
   function raise_undefined(param){
    throw caml_maybe_attach_backtrace(Undefined, 1);
   }
   function force_lazy_block(blk){
    var closure = blk[1];
    blk[1] = raise_undefined;
    try{
     var result = caml_call1(closure, 0);
     caml_obj_make_forward(blk, result);
     return result;
    }
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     blk[1] = function(param){throw caml_maybe_attach_backtrace(e, 0);};
     throw caml_maybe_attach_backtrace(e, 0);
    }
   }
   function force_val_lazy_block(blk){
    var closure = blk[1];
    blk[1] = raise_undefined;
    var result = caml_call1(closure, 0);
    caml_obj_make_forward(blk, result);
    return result;
   }
   function force(lzv){
    var t = caml_obj_tag(lzv);
    return t === Stdlib_Obj[10]
            ? lzv[1]
            : t !== Stdlib_Obj[6] ? lzv : force_lazy_block(lzv);
   }
   function force_val(lzv){
    var t = caml_obj_tag(lzv);
    return t === Stdlib_Obj[10]
            ? lzv[1]
            : t !== Stdlib_Obj[6] ? lzv : force_val_lazy_block(lzv);
   }
   var
    CamlinternalLazy =
      [0, Undefined, force_lazy_block, force_val_lazy_block, force, force_val];
   runtime.caml_register_global(2, CamlinternalLazy, "CamlinternalLazy");
   return;
  }
  (globalThis));

//# 1300 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, caml_obj_tag = runtime.caml_obj_tag;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    CamlinternalLazy = global_data.CamlinternalLazy,
    Stdlib_Obj = global_data.Stdlib__Obj,
    Undefined = CamlinternalLazy[1],
    force_val = CamlinternalLazy[5];
   function from_fun(f){
    var x = runtime.caml_obj_block(Stdlib_Obj[6], 1);
    x[1] = f;
    return x;
   }
   function from_val(v){
    var t = caml_obj_tag(v);
    if(t !== Stdlib_Obj[10] && t !== Stdlib_Obj[6] && t !== Stdlib_Obj[14])
     return v;
    return runtime.caml_lazy_make_forward(v);
   }
   function is_val(l){
    var _i_ = Stdlib_Obj[6];
    return caml_obj_tag(l) !== _i_ ? 1 : 0;
   }
   function map(f, x){
    return [246,
            function(_f_){
             var
              _g_ = caml_obj_tag(x),
              _h_ =
                250 === _g_
                 ? x[1]
                 : 246 === _g_ ? caml_call1(CamlinternalLazy[2], x) : x;
             return caml_call1(f, _h_);
            }];
   }
   function map_val(f, x){
    if(! is_val(x))
     return [246,
             function(_c_){
              var
               _d_ = caml_obj_tag(x),
               _e_ =
                 250 === _d_
                  ? x[1]
                  : 246 === _d_ ? caml_call1(CamlinternalLazy[2], x) : x;
              return caml_call1(f, _e_);
             }];
    var
     _a_ = caml_obj_tag(x),
     _b_ =
       250 === _a_
        ? x[1]
        : 246 === _a_ ? caml_call1(CamlinternalLazy[2], x) : x;
    return from_val(caml_call1(f, _b_));
   }
   var
    Stdlib_Lazy =
      [0,
       Undefined,
       map,
       is_val,
       from_val,
       map_val,
       from_fun,
       force_val,
       from_fun,
       from_val,
       is_val];
   runtime.caml_register_global(2, Stdlib_Lazy, "Stdlib__Lazy");
   return;
  }
  (globalThis));

//# 1382 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Assert_failure = global_data.Assert_failure,
    CamlinternalAtomic = global_data.CamlinternalAtomic,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Stdlib = global_data.Stdlib,
    Stdlib_Lazy = global_data.Stdlib__Lazy,
    cst_Seq_init = "Seq.init",
    cst_Seq_take = "Seq.take",
    cst_Seq_drop = "Seq.drop";
   function empty(param){return 0;}
   function return$0(x, param){return [0, x, empty];}
   function cons(x, next, param){return [0, x, next];}
   function append(seq1, seq2, param){
    var match = caml_call1(seq1, 0);
    if(! match) return caml_call1(seq2, 0);
    var next = match[2], x = match[1];
    return [0, x, function(_av_){return append(next, seq2, _av_);}];
   }
   function map(f, seq, param){
    var match = caml_call1(seq, 0);
    if(! match) return 0;
    var next = match[2], x = match[1];
    return [0, caml_call1(f, x), function(_au_){return map(f, next, _au_);}];
   }
   function filter_map(f, seq, param){
    var seq$0 = seq;
    for(;;){
     var match = caml_call1(seq$0, 0);
     if(! match) return 0;
     var next = match[2], x = match[1], match$0 = caml_call1(f, x);
     if(match$0){
      var y = match$0[1];
      return [0, y, function(_at_){return filter_map(f, next, _at_);}];
     }
     seq$0 = next;
    }
   }
   function filter(f, seq, param){
    var seq$0 = seq;
    for(;;){
     var match = caml_call1(seq$0, 0);
     if(! match) return 0;
     var next = match[2], x = match[1];
     if(caml_call1(f, x))
      return [0, x, function(_as_){return filter(f, next, _as_);}];
     seq$0 = next;
    }
   }
   function concat(seq, param){
    var match = caml_call1(seq, 0);
    if(! match) return 0;
    var next = match[2], x = match[1];
    return append(x, function(_ar_){return concat(next, _ar_);}, 0);
   }
   function flat_map(f, seq, param){
    var match = caml_call1(seq, 0);
    if(! match) return 0;
    var next = match[2], x = match[1];
    return append
            (caml_call1(f, x),
             function(_aq_){return flat_map(f, next, _aq_);},
             0);
   }
   function fold_left(f, acc, seq){
    var acc$0 = acc, seq$0 = seq;
    for(;;){
     var match = caml_call1(seq$0, 0);
     if(! match) return acc$0;
     var next = match[2], x = match[1], acc$1 = caml_call2(f, acc$0, x);
     acc$0 = acc$1;
     seq$0 = next;
    }
   }
   function iter(f, seq){
    var seq$0 = seq;
    for(;;){
     var match = caml_call1(seq$0, 0);
     if(! match) return 0;
     var next = match[2], x = match[1];
     caml_call1(f, x);
     seq$0 = next;
    }
   }
   function unfold(f, u, param){
    var match = caml_call1(f, u);
    if(! match) return 0;
    var match$0 = match[1], u$0 = match$0[2], x = match$0[1];
    return [0, x, function(_ap_){return unfold(f, u$0, _ap_);}];
   }
   function is_empty(xs){return caml_call1(xs, 0) ? 0 : 1;}
   function uncons(xs){
    var match = caml_call1(xs, 0);
    if(! match) return 0;
    var xs$0 = match[2], x = match[1];
    return [0, [0, x, xs$0]];
   }
   function length(xs$1){
    var accu = 0, xs = xs$1;
    for(;;){
     var match = caml_call1(xs, 0);
     if(! match) return accu;
     var xs$0 = match[2], accu$0 = accu + 1 | 0;
     accu = accu$0;
     xs = xs$0;
    }
   }
   function iteri(f, xs$1){
    var i = 0, xs = xs$1;
    for(;;){
     var match = caml_call1(xs, 0);
     if(! match) return 0;
     var xs$0 = match[2], x = match[1];
     caml_call2(f, i, x);
     var i$0 = i + 1 | 0;
     i = i$0;
     xs = xs$0;
    }
   }
   function fold_lefti(f, accu$1, xs$1){
    var accu = accu$1, i = 0, xs = xs$1;
    for(;;){
     var match = caml_call1(xs, 0);
     if(! match) return accu;
     var
      xs$0 = match[2],
      x = match[1],
      accu$0 = caml_call3(f, accu, i, x),
      i$0 = i + 1 | 0;
     accu = accu$0;
     i = i$0;
     xs = xs$0;
    }
   }
   function for_all(p, xs){
    var xs$0 = xs;
    for(;;){
     var match = caml_call1(xs$0, 0);
     if(! match) return 1;
     var xs$1 = match[2], x = match[1], _ao_ = caml_call1(p, x);
     if(! _ao_) return _ao_;
     xs$0 = xs$1;
    }
   }
   function exists(p, xs){
    var xs$0 = xs;
    for(;;){
     var match = caml_call1(xs$0, 0);
     if(! match) return 0;
     var xs$1 = match[2], x = match[1], _an_ = caml_call1(p, x);
     if(_an_) return _an_;
     xs$0 = xs$1;
    }
   }
   function find(p, xs){
    var xs$0 = xs;
    for(;;){
     var match = caml_call1(xs$0, 0);
     if(! match) return 0;
     var xs$1 = match[2], x = match[1];
     if(caml_call1(p, x)) return [0, x];
     xs$0 = xs$1;
    }
   }
   function find_map(f, xs){
    var xs$0 = xs;
    for(;;){
     var match = caml_call1(xs$0, 0);
     if(! match) return 0;
     var xs$1 = match[2], x = match[1], result = caml_call1(f, x);
     if(result) return result;
     xs$0 = xs$1;
    }
   }
   function iter2(f, xs, ys){
    var xs$0 = xs, ys$0 = ys;
    for(;;){
     var match = caml_call1(xs$0, 0);
     if(! match) return 0;
     var xs$1 = match[2], x = match[1], match$0 = caml_call1(ys$0, 0);
     if(! match$0) return 0;
     var ys$1 = match$0[2], y = match$0[1];
     caml_call2(f, x, y);
     xs$0 = xs$1;
     ys$0 = ys$1;
    }
   }
   function fold_left2(f, accu, xs, ys){
    var accu$0 = accu, xs$0 = xs, ys$0 = ys;
    for(;;){
     var match = caml_call1(xs$0, 0);
     if(! match) return accu$0;
     var xs$1 = match[2], x = match[1], match$0 = caml_call1(ys$0, 0);
     if(! match$0) return accu$0;
     var
      ys$1 = match$0[2],
      y = match$0[1],
      accu$1 = caml_call3(f, accu$0, x, y);
     accu$0 = accu$1;
     xs$0 = xs$1;
     ys$0 = ys$1;
    }
   }
   function for_all2(f, xs, ys){
    var xs$0 = xs, ys$0 = ys;
    for(;;){
     var match = caml_call1(xs$0, 0);
     if(! match) return 1;
     var xs$1 = match[2], x = match[1], match$0 = caml_call1(ys$0, 0);
     if(! match$0) return 1;
     var ys$1 = match$0[2], y = match$0[1], _am_ = caml_call2(f, x, y);
     if(! _am_) return _am_;
     xs$0 = xs$1;
     ys$0 = ys$1;
    }
   }
   function exists2(f, xs, ys){
    var xs$0 = xs, ys$0 = ys;
    for(;;){
     var match = caml_call1(xs$0, 0);
     if(! match) return 0;
     var xs$1 = match[2], x = match[1], match$0 = caml_call1(ys$0, 0);
     if(! match$0) return 0;
     var ys$1 = match$0[2], y = match$0[1], _al_ = caml_call2(f, x, y);
     if(_al_) return _al_;
     xs$0 = xs$1;
     ys$0 = ys$1;
    }
   }
   function equal(eq, xs, ys){
    var xs$0 = xs, ys$0 = ys;
    for(;;){
     var match = caml_call1(xs$0, 0), match$0 = caml_call1(ys$0, 0);
     if(match){
      if(match$0){
       var
        ys$1 = match$0[2],
        y = match$0[1],
        xs$1 = match[2],
        x = match[1],
        _ak_ = caml_call2(eq, x, y);
       if(! _ak_) return _ak_;
       xs$0 = xs$1;
       ys$0 = ys$1;
       continue;
      }
     }
     else if(! match$0) return 1;
     return 0;
    }
   }
   function compare(cmp, xs, ys){
    var xs$0 = xs, ys$0 = ys;
    for(;;){
     var match = caml_call1(xs$0, 0), match$0 = caml_call1(ys$0, 0);
     if(! match) return match$0 ? -1 : 0;
     var xs$1 = match[2], x = match[1];
     if(! match$0) return 1;
     var ys$1 = match$0[2], y = match$0[1], c = caml_call2(cmp, x, y);
     if(0 !== c) return c;
     xs$0 = xs$1;
     ys$0 = ys$1;
    }
   }
   function init_aux(f, i, j, param){
    if(i >= j) return 0;
    var _ai_ = i + 1 | 0;
    return [0,
            caml_call1(f, i),
            function(_aj_){return init_aux(f, _ai_, j, _aj_);}];
   }
   function init(n, f){
    if(0 > n) return caml_call1(Stdlib[1], cst_Seq_init);
    var _ag_ = 0;
    return function(_ah_){return init_aux(f, _ag_, n, _ah_);};
   }
   function repeat(x, param){
    return [0, x, function(_af_){return repeat(x, _af_);}];
   }
   function forever(f, param){
    return [0, caml_call1(f, 0), function(_ae_){return forever(f, _ae_);}];
   }
   function cycle_nonempty(xs, param){
    return append(xs, function(_ad_){return cycle_nonempty(xs, _ad_);}, 0);
   }
   function cycle(xs, param){
    var match = caml_call1(xs, 0);
    if(! match) return 0;
    var xs$0 = match[2], x = match[1];
    function _aa_(_ac_){return cycle_nonempty(xs, _ac_);}
    return [0, x, function(_ab_){return append(xs$0, _aa_, _ab_);}];
   }
   function iterate1(f, x, param){
    var y = caml_call1(f, x);
    return [0, y, function(_$_){return iterate1(f, y, _$_);}];
   }
   function iterate(f, x){
    function next(___){return iterate1(f, x, ___);}
    return function(_Z_){return [0, x, next];};
   }
   function mapi_aux(f, i, xs, param){
    var match = caml_call1(xs, 0);
    if(! match) return 0;
    var xs$0 = match[2], x = match[1], _X_ = i + 1 | 0;
    return [0,
            caml_call2(f, i, x),
            function(_Y_){return mapi_aux(f, _X_, xs$0, _Y_);}];
   }
   function mapi(f, xs){
    var _V_ = 0;
    return function(_W_){return mapi_aux(f, _V_, xs, _W_);};
   }
   function tail_scan(f, s, xs, param){
    var match = caml_call1(xs, 0);
    if(! match) return 0;
    var xs$0 = match[2], x = match[1], s$0 = caml_call2(f, s, x);
    return [0, s$0, function(_U_){return tail_scan(f, s$0, xs$0, _U_);}];
   }
   function scan(f, s, xs){
    function next(_T_){return tail_scan(f, s, xs, _T_);}
    return function(_S_){return [0, s, next];};
   }
   function take_aux(n, xs){
    return 0 === n
            ? empty
            : function
             (param){
              var match = caml_call1(xs, 0);
              if(! match) return 0;
              var xs$0 = match[2], x = match[1];
              return [0, x, take_aux(n - 1 | 0, xs$0)];
             };
   }
   function take(n, xs){
    if(n < 0) caml_call1(Stdlib[1], cst_Seq_take);
    return take_aux(n, xs);
   }
   function drop(n, xs){
    return 0 <= n
            ? 0
              === n
              ? xs
              : function
               (param){
                var n$0 = n, xs$0 = xs;
                for(;;){
                 var match = caml_call1(xs$0, 0);
                 if(! match) return 0;
                 var xs$1 = match[2], n$1 = n$0 - 1 | 0;
                 if(0 === n$1) return caml_call1(xs$1, 0);
                 n$0 = n$1;
                 xs$0 = xs$1;
                }
               }
            : caml_call1(Stdlib[1], cst_Seq_drop);
   }
   function take_while(p, xs, param){
    var match = caml_call1(xs, 0);
    if(! match) return 0;
    var xs$0 = match[2], x = match[1];
    return caml_call1(p, x)
            ? [0, x, function(_R_){return take_while(p, xs$0, _R_);}]
            : 0;
   }
   function drop_while(p, xs, param){
    var xs$0 = xs;
    for(;;){
     var node = caml_call1(xs$0, 0);
     if(! node) return 0;
     var xs$1 = node[2], x = node[1];
     if(! caml_call1(p, x)) return node;
     xs$0 = xs$1;
    }
   }
   function group(eq, xs, param){
    var match = caml_call1(xs, 0);
    if(! match) return 0;
    var xs$0 = match[2], x = match[1], _K_ = caml_call1(eq, x);
    function _L_(_Q_){return drop_while(_K_, xs$0, _Q_);}
    var _M_ = caml_call1(eq, x);
    function next(_P_){return take_while(_M_, xs$0, _P_);}
    return [0,
            function(_O_){return [0, x, next];},
            function(_N_){return group(eq, _L_, _N_);}];
   }
   var
    Forced_twice =
      [248, "Stdlib.Seq.Forced_twice", runtime.caml_fresh_oo_id(0)],
    to_lazy = Stdlib_Lazy[6],
    _a_ = [0, "seq.ml", 596, 4];
   function failure(param){
    throw caml_maybe_attach_backtrace(Forced_twice, 1);
   }
   function memoize(xs){
    function s$0(param){
     var match = caml_call1(xs, 0);
     if(! match) return 0;
     var xs$0 = match[2], x = match[1];
     return [0, x, memoize(xs$0)];
    }
    var s = caml_call1(to_lazy, s$0);
    return function(_J_){
     var _I_ = runtime.caml_obj_tag(s);
     return 250 === _I_
             ? s[1]
             : 246 === _I_ ? caml_call1(CamlinternalLazy[2], s) : s;};
   }
   function once(xs){
    function f(param){
     var match = caml_call1(xs, 0);
     if(! match) return 0;
     var xs$0 = match[2], x = match[1];
     return [0, x, once(xs$0)];
    }
    var action = caml_call1(CamlinternalAtomic[1], f);
    return function(param){
     var f = caml_call2(CamlinternalAtomic[4], action, failure);
     return caml_call1(f, 0);};
   }
   function zip(xs, ys, param){
    var match = caml_call1(xs, 0);
    if(! match) return 0;
    var xs$0 = match[2], x = match[1], match$0 = caml_call1(ys, 0);
    if(! match$0) return 0;
    var ys$0 = match$0[2], y = match$0[1];
    return [0, [0, x, y], function(_H_){return zip(xs$0, ys$0, _H_);}];
   }
   function map2(f, xs, ys, param){
    var match = caml_call1(xs, 0);
    if(! match) return 0;
    var xs$0 = match[2], x = match[1], match$0 = caml_call1(ys, 0);
    if(! match$0) return 0;
    var ys$0 = match$0[2], y = match$0[1];
    return [0,
            caml_call2(f, x, y),
            function(_G_){return map2(f, xs$0, ys$0, _G_);}];
   }
   function interleave(xs, ys, param){
    var match = caml_call1(xs, 0);
    if(! match) return caml_call1(ys, 0);
    var xs$0 = match[2], x = match[1];
    return [0, x, function(_F_){return interleave(ys, xs$0, _F_);}];
   }
   function sorted_merge1(cmp, x, xs, y, ys){
    return 0 < caml_call2(cmp, x, y)
            ? [0,
              y,
              function(_D_){
               var match = caml_call1(ys, 0);
               if(! match) return [0, x, xs];
               var ys$0 = match[2], y = match[1];
               return sorted_merge1(cmp, x, xs, y, ys$0);
              }]
            : [0,
              x,
              function(_E_){
               var match = caml_call1(xs, 0);
               if(! match) return [0, y, ys];
               var xs$0 = match[2], x = match[1];
               return sorted_merge1(cmp, x, xs$0, y, ys);
              }];
   }
   function sorted_merge(cmp, xs, ys, param){
    var match = caml_call1(xs, 0), match$0 = caml_call1(ys, 0);
    if(match){
     if(match$0){
      var ys$0 = match$0[2], y = match$0[1], xs$0 = match[2], x = match[1];
      return sorted_merge1(cmp, x, xs$0, y, ys$0);
     }
     var c = match;
    }
    else{if(! match$0) return 0; var c = match$0;}
    return c;
   }
   function map_fst(xys, param){
    var match = caml_call1(xys, 0);
    if(! match) return 0;
    var xys$0 = match[2], x = match[1][1];
    return [0, x, function(_C_){return map_fst(xys$0, _C_);}];
   }
   function map_snd(xys, param){
    var match = caml_call1(xys, 0);
    if(! match) return 0;
    var xys$0 = match[2], y = match[1][2];
    return [0, y, function(_B_){return map_snd(xys$0, _B_);}];
   }
   function unzip(xys){
    return [0,
            function(_A_){return map_fst(xys, _A_);},
            function(_z_){return map_snd(xys, _z_);}];
   }
   function filter_map_find_left_map(f, xs, param){
    var xs$0 = xs;
    for(;;){
     var match = caml_call1(xs$0, 0);
     if(! match) return 0;
     var xs$1 = match[2], x = match[1], match$0 = caml_call1(f, x);
     if(0 === match$0[0]){
      var y = match$0[1];
      return [0,
              y,
              function(_y_){return filter_map_find_left_map(f, xs$1, _y_);}];
     }
     xs$0 = xs$1;
    }
   }
   function filter_map_find_right_map(f, xs, param){
    var xs$0 = xs;
    for(;;){
     var match = caml_call1(xs$0, 0);
     if(! match) return 0;
     var xs$1 = match[2], x = match[1], match$0 = caml_call1(f, x);
     if(0 !== match$0[0]){
      var z = match$0[1];
      return [0,
              z,
              function(_x_){return filter_map_find_right_map(f, xs$1, _x_);}];
     }
     xs$0 = xs$1;
    }
   }
   function partition_map(f, xs){
    return [0,
            function(_w_){return filter_map_find_left_map(f, xs, _w_);},
            function(_v_){return filter_map_find_right_map(f, xs, _v_);}];
   }
   function partition(p, xs){
    function _s_(x){return 1 - caml_call1(p, x);}
    return [0,
            function(_u_){return filter(p, xs, _u_);},
            function(_t_){return filter(_s_, xs, _t_);}];
   }
   function peel(xss){
    return unzip(function(_r_){return filter_map(uncons, xss, _r_);});
   }
   function transpose(xss, param){
    var match = peel(xss), tails = match[2], heads = match[1];
    if(! is_empty(heads))
     return [0, heads, function(_q_){return transpose(tails, _q_);}];
    if(is_empty(tails)) return 0;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
   }
   function _b_(remainders, xss, param){
    var match = caml_call1(xss, 0);
    if(! match) return transpose(remainders, 0);
    var xss$0 = match[2], xs = match[1], match$0 = caml_call1(xs, 0);
    if(match$0){
     var
      xs$0 = match$0[2],
      x = match$0[1],
      match$1 = peel(remainders),
      tails = match$1[2],
      heads = match$1[1],
      _l_ = function(_p_){return [0, xs$0, tails];};
     return [0,
             function(_o_){return [0, x, heads];},
             function(_n_){return _b_(_l_, xss$0, _n_);}];
    }
    var
     match$2 = peel(remainders),
     tails$0 = match$2[2],
     heads$0 = match$2[1];
    return [0, heads$0, function(_m_){return _b_(tails$0, xss$0, _m_);}];
   }
   function map_product(f, xs, ys){
    function _f_(x){
     function _j_(y){return caml_call2(f, x, y);}
     return function(_k_){return map(_j_, ys, _k_);};
    }
    function xss(_i_){return map(_f_, xs, _i_);}
    function _e_(_h_){return _b_(empty, xss, _h_);}
    return function(_g_){return concat(_e_, _g_);};
   }
   function product(xs, ys){
    return map_product(function(x, y){return [0, x, y];}, xs, ys);
   }
   function of_dispenser(it){
    function c(param){
     var match = caml_call1(it, 0);
     if(! match) return 0;
     var x = match[1];
     return [0, x, c];
    }
    return c;
   }
   function to_dispenser(xs){
    var s = [0, xs];
    return function(param){
     var match = caml_call1(s[1], 0);
     if(! match) return 0;
     var xs = match[2], x = match[1];
     s[1] = xs;
     return [0, x];};
   }
   function ints(i, param){
    var _c_ = i + 1 | 0;
    return [0, i, function(_d_){return ints(_c_, _d_);}];
   }
   var
    Stdlib_Seq =
      [0,
       is_empty,
       uncons,
       length,
       iter,
       fold_left,
       iteri,
       fold_lefti,
       for_all,
       exists,
       find,
       find_map,
       iter2,
       fold_left2,
       for_all2,
       exists2,
       equal,
       compare,
       empty,
       return$0,
       cons,
       init,
       unfold,
       repeat,
       forever,
       cycle,
       iterate,
       map,
       mapi,
       filter,
       filter_map,
       scan,
       take,
       drop,
       take_while,
       drop_while,
       group,
       memoize,
       Forced_twice,
       once,
       transpose,
       append,
       concat,
       flat_map,
       flat_map,
       zip,
       map2,
       interleave,
       sorted_merge,
       product,
       map_product,
       unzip,
       unzip,
       partition_map,
       partition,
       of_dispenser,
       to_dispenser,
       ints];
   runtime.caml_register_global(10, Stdlib_Seq, "Stdlib__Seq");
   return;
  }
  (globalThis));

//# 2338 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_bytes_unsafe_set = runtime.caml_bytes_unsafe_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_string_of_bytes = runtime.caml_string_of_bytes;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "\\\\",
    cst$0 = "\\'",
    Stdlib = global_data.Stdlib,
    cst_Char_chr = "Char.chr",
    cst_b = "\\b",
    cst_t = "\\t",
    cst_n = "\\n",
    cst_r = "\\r";
   function chr(n){
    if(0 <= n && 255 >= n) return n;
    return caml_call1(Stdlib[1], cst_Char_chr);
   }
   function escaped(c){
    a:
    {
     if(40 <= c){
      if(92 === c) return cst;
      if(127 > c) break a;
     }
     else{
      if(32 <= c){if(39 <= c) return cst$0; break a;}
      if(14 > c)
       switch(c){
         case 8:
          return cst_b;
         case 9:
          return cst_t;
         case 10:
          return cst_n;
         case 13:
          return cst_r;
       }
     }
     var s = caml_create_bytes(4);
     caml_bytes_unsafe_set(s, 0, 92);
     caml_bytes_unsafe_set(s, 1, 48 + (c / 100 | 0) | 0);
     caml_bytes_unsafe_set(s, 2, 48 + ((c / 10 | 0) % 10 | 0) | 0);
     caml_bytes_unsafe_set(s, 3, 48 + (c % 10 | 0) | 0);
     return caml_string_of_bytes(s);
    }
    var s$0 = caml_create_bytes(1);
    caml_bytes_unsafe_set(s$0, 0, c);
    return caml_string_of_bytes(s$0);
   }
   function lowercase(c){
    var _b_ = c - 192 | 0;
    a:
    {
     if(30 < _b_ >>> 0){
      if(25 < _b_ + 127 >>> 0) break a;
     }
     else if(23 === _b_) break a;
     return c + 32 | 0;
    }
    return c;
   }
   function uppercase(c){
    var _a_ = c - 224 | 0;
    a:
    {
     if(30 < _a_ >>> 0){
      if(25 < _a_ + 127 >>> 0) break a;
     }
     else if(23 === _a_) break a;
     return c - 32 | 0;
    }
    return c;
   }
   function lowercase_ascii(c){return 25 < c - 65 >>> 0 ? c : c + 32 | 0;}
   function uppercase_ascii(c){return 25 < c - 97 >>> 0 ? c : c - 32 | 0;}
   function compare(c1, c2){return c1 - c2 | 0;}
   function equal(c1, c2){return 0 === (c1 - c2 | 0) ? 1 : 0;}
   var
    Stdlib_Char =
      [0,
       chr,
       escaped,
       lowercase,
       uppercase,
       lowercase_ascii,
       uppercase_ascii,
       compare,
       equal];
   runtime.caml_register_global(8, Stdlib_Char, "Stdlib__Char");
   return;
  }
  (globalThis));

//# 2443 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_uchar_ml = "uchar.ml",
    caml_format_int = runtime.caml_format_int,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    err_no_pred = "U+0000 has no predecessor",
    err_no_succ = "U+10FFFF has no successor",
    Assert_failure = global_data.Assert_failure,
    Stdlib = global_data.Stdlib,
    cst_is_not_an_Unicode_scalar_v = " is not an Unicode scalar value",
    cst_is_not_a_latin1_character = " is not a latin1 character",
    cst_U = "U+",
    lo_bound = 55295,
    hi_bound = 57344;
   function succ(u){
    return u === 55295
            ? hi_bound
            : u === 1114111 ? caml_call1(Stdlib[1], err_no_succ) : u + 1 | 0;
   }
   function pred(u){
    return u === 57344
            ? lo_bound
            : u === 0 ? caml_call1(Stdlib[1], err_no_pred) : u - 1 | 0;
   }
   function is_valid(i){
    var _n_ = 0 <= i ? 1 : 0, _o_ = _n_ ? i <= 55295 ? 1 : 0 : _n_;
    if(_o_)
     var _p_ = _o_;
    else
     var _q_ = 57344 <= i ? 1 : 0, _p_ = _q_ ? i <= 1114111 ? 1 : 0 : _q_;
    return _p_;
   }
   function of_int(i){
    if(is_valid(i)) return i;
    var
     _m_ =
       caml_call2
        (Stdlib[28], caml_format_int("%X", i), cst_is_not_an_Unicode_scalar_v);
    return caml_call1(Stdlib[1], _m_);
   }
   function is_char(u){return u < 256 ? 1 : 0;}
   function of_char(c){return c;}
   function to_char(u){
    if(255 >= u) return u;
    var
     _k_ =
       caml_call2
        (Stdlib[28],
         caml_format_int("%04X", u),
         cst_is_not_a_latin1_character),
     _l_ = caml_call2(Stdlib[28], cst_U, _k_);
    return caml_call1(Stdlib[1], _l_);
   }
   function unsafe_to_char(_j_){return _j_;}
   function equal(_i_, _h_){return _i_ === _h_ ? 1 : 0;}
   var
    compare = runtime.caml_int_compare,
    _a_ = [0, cst_uchar_ml, 85, 7],
    _b_ = [0, cst_uchar_ml, 80, 18],
    _c_ = [0, cst_uchar_ml, 91, 7],
    _d_ = [0, cst_uchar_ml, 88, 18];
   function hash(_g_){return _g_;}
   function utf_decode_is_valid(d){return 1 === (d >>> 27 | 0) ? 1 : 0;}
   function utf_decode_length(d){return (d >>> 24 | 0) & 7;}
   function utf_decode_uchar(d){return d & 16777215;}
   function utf_decode(n, u){return (8 | n) << 24 | u;}
   function utf_decode_invalid(n){return n << 24 | 65533;}
   function utf_8_byte_length(u){
    if(0 > u) throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
    if(127 >= u) return 1;
    if(2047 >= u) return 2;
    if(65535 >= u) return 3;
    if(1114111 < u)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
    return 4;
   }
   function utf_16_byte_length(u){
    if(0 > u) throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
    if(65535 >= u) return 2;
    if(1114111 < u)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
    return 4;
   }
   var
    Stdlib_Uchar =
      [0,
       0,
       1114111,
       65279,
       65533,
       succ,
       pred,
       is_valid,
       of_int,
       function(_f_){return _f_;},
       function(_e_){return _e_;},
       is_char,
       of_char,
       to_char,
       unsafe_to_char,
       equal,
       compare,
       hash,
       utf_decode_is_valid,
       utf_decode_uchar,
       utf_decode_length,
       utf_decode,
       utf_decode_invalid,
       utf_8_byte_length,
       utf_16_byte_length];
   runtime.caml_register_global(13, Stdlib_Uchar, "Stdlib__Uchar");
   return;
  }
  (globalThis));

//# 2575 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_List_nth$1 = "List.nth",
    caml_compare = runtime.caml_compare,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib_Sys = global_data.Stdlib__Sys,
    cst_hd = "hd",
    cst_tl = "tl",
    cst_nth = "nth",
    cst_List_nth = cst_List_nth$1,
    cst_List_nth$0 = cst_List_nth$1;
   function length(l$0){
    var len = 0, param = l$0;
    for(;;){
     if(! param) return len;
     var l = param[2], len$0 = len + 1 | 0;
     len = len$0;
     param = l;
    }
   }
   function cons(a, l){return [0, a, l];}
   function hd(param){
    if(! param) return caml_call1(Stdlib[2], cst_hd);
    var a = param[1];
    return a;
   }
   function tl(param){
    if(! param) return caml_call1(Stdlib[2], cst_tl);
    var l = param[2];
    return l;
   }
   function nth(l, n){
    if(0 > n) return caml_call1(Stdlib[1], cst_List_nth);
    var l$0 = l, n$0 = n;
    for(;;){
     if(! l$0) return caml_call1(Stdlib[2], cst_nth);
     var l$1 = l$0[2], a = l$0[1];
     if(0 === n$0) return a;
     var n$1 = n$0 - 1 | 0;
     l$0 = l$1;
     n$0 = n$1;
    }
   }
   function nth_opt(l, n){
    if(0 > n) return caml_call1(Stdlib[1], cst_List_nth$0);
    var l$0 = l, n$0 = n;
    for(;;){
     if(! l$0) return 0;
     var l$1 = l$0[2], a = l$0[1];
     if(0 === n$0) return [0, a];
     var n$1 = n$0 - 1 | 0;
     l$0 = l$1;
     n$0 = n$1;
    }
   }
   var append = Stdlib[37];
   function rev_append(l1, l2){
    var l1$0 = l1, l2$0 = l2;
    for(;;){
     if(! l1$0) return l2$0;
     var l1$1 = l1$0[2], a = l1$0[1], l2$1 = [0, a, l2$0];
     l1$0 = l1$1;
     l2$0 = l2$1;
    }
   }
   function rev(l){return rev_append(l, 0);}
   function init_aux(i, n, f){
    if(n <= i) return 0;
    var r = caml_call1(f, i);
    return [0, r, init_aux(i + 1 | 0, n, f)];
   }
   var
    cst_List_map2 = "List.map2",
    cst_List_iter2 = "List.iter2",
    cst_List_fold_left2 = "List.fold_left2",
    cst_List_fold_right2 = "List.fold_right2",
    cst_List_for_all2 = "List.for_all2",
    cst_List_exists2 = "List.exists2",
    _b_ = [0, 0, 0],
    cst_List_combine = "List.combine",
    cst_List_rev_map2 = "List.rev_map2",
    cst_List_init = "List.init",
    rev_init_threshold = typeof Stdlib_Sys[5] === "number" ? 10000 : 50;
   function init(len, f){
    if(0 > len) return caml_call1(Stdlib[1], cst_List_init);
    if(rev_init_threshold >= len) return init_aux(0, len, f);
    var acc = 0, i = 0;
    for(;;){
     if(len <= i) return rev(acc);
     var i$0 = i + 1 | 0, acc$0 = [0, caml_call1(f, i), acc];
     acc = acc$0;
     i = i$0;
    }
   }
   function flatten(param){
    if(! param) return 0;
    var r = param[2], l = param[1], _H_ = flatten(r);
    return caml_call2(Stdlib[37], l, _H_);
   }
   function map(f, param){
    if(! param) return 0;
    var l = param[2], a = param[1], r = caml_call1(f, a);
    return [0, r, map(f, l)];
   }
   function _a_(i, f, param){
    if(! param) return 0;
    var l = param[2], a = param[1], r = caml_call2(f, i, a);
    return [0, r, _a_(i + 1 | 0, f, l)];
   }
   function mapi(f, l){return _a_(0, f, l);}
   function rev_map(f, l){
    var accu = 0, param = l;
    for(;;){
     if(! param) return accu;
     var l$0 = param[2], a = param[1], accu$0 = [0, caml_call1(f, a), accu];
     accu = accu$0;
     param = l$0;
    }
   }
   function iter(f, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], a = param$0[1];
     caml_call1(f, a);
     param$0 = l;
    }
   }
   function iteri(f, l$0){
    var i = 0, param = l$0;
    for(;;){
     if(! param) return 0;
     var l = param[2], a = param[1];
     caml_call2(f, i, a);
     var i$0 = i + 1 | 0;
     i = i$0;
     param = l;
    }
   }
   function fold_left(f, accu, l){
    var accu$0 = accu, l$0 = l;
    for(;;){
     if(! l$0) return accu$0;
     var l$1 = l$0[2], a = l$0[1], accu$1 = caml_call2(f, accu$0, a);
     accu$0 = accu$1;
     l$0 = l$1;
    }
   }
   function fold_right(f, l, accu){
    if(! l) return accu;
    var l$0 = l[2], a = l[1];
    return caml_call2(f, a, fold_right(f, l$0, accu));
   }
   function map2(f, l1, l2){
    if(l1){
     if(l2){
      var
       l2$0 = l2[2],
       a2 = l2[1],
       l1$0 = l1[2],
       a1 = l1[1],
       r = caml_call2(f, a1, a2);
      return [0, r, map2(f, l1$0, l2$0)];
     }
    }
    else if(! l2) return 0;
    return caml_call1(Stdlib[1], cst_List_map2);
   }
   function rev_map2(f, l1, l2){
    var accu = 0, l1$0 = l1, l2$0 = l2;
    for(;;){
     if(l1$0){
      if(l2$0){
       var
        l2$1 = l2$0[2],
        a2 = l2$0[1],
        l1$1 = l1$0[2],
        a1 = l1$0[1],
        accu$0 = [0, caml_call2(f, a1, a2), accu];
       accu = accu$0;
       l1$0 = l1$1;
       l2$0 = l2$1;
       continue;
      }
     }
     else if(! l2$0) return accu;
     return caml_call1(Stdlib[1], cst_List_rev_map2);
    }
   }
   function iter2(f, l1, l2){
    var l1$0 = l1, l2$0 = l2;
    for(;;){
     if(l1$0){
      if(l2$0){
       var l2$1 = l2$0[2], a2 = l2$0[1], l1$1 = l1$0[2], a1 = l1$0[1];
       caml_call2(f, a1, a2);
       l1$0 = l1$1;
       l2$0 = l2$1;
       continue;
      }
     }
     else if(! l2$0) return 0;
     return caml_call1(Stdlib[1], cst_List_iter2);
    }
   }
   function fold_left2(f, accu, l1, l2){
    var accu$0 = accu, l1$0 = l1, l2$0 = l2;
    for(;;){
     if(l1$0){
      if(l2$0){
       var
        l2$1 = l2$0[2],
        a2 = l2$0[1],
        l1$1 = l1$0[2],
        a1 = l1$0[1],
        accu$1 = caml_call3(f, accu$0, a1, a2);
       accu$0 = accu$1;
       l1$0 = l1$1;
       l2$0 = l2$1;
       continue;
      }
     }
     else if(! l2$0) return accu$0;
     return caml_call1(Stdlib[1], cst_List_fold_left2);
    }
   }
   function fold_right2(f, l1, l2, accu){
    if(l1){
     if(l2){
      var l2$0 = l2[2], a2 = l2[1], l1$0 = l1[2], a1 = l1[1];
      return caml_call3(f, a1, a2, fold_right2(f, l1$0, l2$0, accu));
     }
    }
    else if(! l2) return accu;
    return caml_call1(Stdlib[1], cst_List_fold_right2);
   }
   function for_all(p, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 1;
     var l = param$0[2], a = param$0[1], _G_ = caml_call1(p, a);
     if(! _G_) return _G_;
     param$0 = l;
    }
   }
   function exists(p, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], a = param$0[1], _F_ = caml_call1(p, a);
     if(_F_) return _F_;
     param$0 = l;
    }
   }
   function for_all2(p, l1, l2){
    var l1$0 = l1, l2$0 = l2;
    for(;;){
     if(l1$0){
      if(l2$0){
       var
        l2$1 = l2$0[2],
        a2 = l2$0[1],
        l1$1 = l1$0[2],
        a1 = l1$0[1],
        _E_ = caml_call2(p, a1, a2);
       if(! _E_) return _E_;
       l1$0 = l1$1;
       l2$0 = l2$1;
       continue;
      }
     }
     else if(! l2$0) return 1;
     return caml_call1(Stdlib[1], cst_List_for_all2);
    }
   }
   function exists2(p, l1, l2){
    var l1$0 = l1, l2$0 = l2;
    for(;;){
     if(l1$0){
      if(l2$0){
       var
        l2$1 = l2$0[2],
        a2 = l2$0[1],
        l1$1 = l1$0[2],
        a1 = l1$0[1],
        _D_ = caml_call2(p, a1, a2);
       if(_D_) return _D_;
       l1$0 = l1$1;
       l2$0 = l2$1;
       continue;
      }
     }
     else if(! l2$0) return 0;
     return caml_call1(Stdlib[1], cst_List_exists2);
    }
   }
   function mem(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var
      l = param$0[2],
      a = param$0[1],
      _C_ = 0 === caml_compare(a, x) ? 1 : 0;
     if(_C_) return _C_;
     param$0 = l;
    }
   }
   function memq(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], a = param$0[1], _B_ = a === x ? 1 : 0;
     if(_B_) return _B_;
     param$0 = l;
    }
   }
   function assoc(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var l = param$0[2], match = param$0[1], b = match[2], a = match[1];
     if(0 === caml_compare(a, x)) return b;
     param$0 = l;
    }
   }
   function assoc_opt(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], match = param$0[1], b = match[2], a = match[1];
     if(0 === caml_compare(a, x)) return [0, b];
     param$0 = l;
    }
   }
   function assq(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var l = param$0[2], match = param$0[1], b = match[2], a = match[1];
     if(a === x) return b;
     param$0 = l;
    }
   }
   function assq_opt(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], match = param$0[1], b = match[2], a = match[1];
     if(a === x) return [0, b];
     param$0 = l;
    }
   }
   function mem_assoc(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var
      l = param$0[2],
      a = param$0[1][1],
      _A_ = 0 === caml_compare(a, x) ? 1 : 0;
     if(_A_) return _A_;
     param$0 = l;
    }
   }
   function mem_assq(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], a = param$0[1][1], _z_ = a === x ? 1 : 0;
     if(_z_) return _z_;
     param$0 = l;
    }
   }
   function remove_assoc(x, param){
    if(! param) return 0;
    var l = param[2], pair = param[1], a = pair[1];
    return 0 === caml_compare(a, x) ? l : [0, pair, remove_assoc(x, l)];
   }
   function remove_assq(x, param){
    if(! param) return 0;
    var l = param[2], pair = param[1], a = pair[1];
    return a === x ? l : [0, pair, remove_assq(x, l)];
   }
   function find(p, param){
    var param$0 = param;
    for(;;){
     if(! param$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var l = param$0[2], x = param$0[1];
     if(caml_call1(p, x)) return x;
     param$0 = l;
    }
   }
   function find_opt(p, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], x = param$0[1];
     if(caml_call1(p, x)) return [0, x];
     param$0 = l;
    }
   }
   function find_map(f, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], x = param$0[1], result = caml_call1(f, x);
     if(result) return result;
     param$0 = l;
    }
   }
   function find_all(p){
    var accu = 0;
    return function(param$0){
     var accu$0 = accu, param = param$0;
     for(;;){
      if(! param) return rev(accu$0);
      var l = param[2], x = param[1];
      if(caml_call1(p, x)){
       var accu$1 = [0, x, accu$0];
       accu$0 = accu$1;
       param = l;
      }
      else
       param = l;
     }};
   }
   function filteri(p, l){
    var i = 0, acc = 0, param = l;
    for(;;){
     if(! param) return rev(acc);
     var
      l$0 = param[2],
      x = param[1],
      acc$0 = caml_call2(p, i, x) ? [0, x, acc] : acc,
      i$0 = i + 1 | 0;
     i = i$0;
     acc = acc$0;
     param = l$0;
    }
   }
   function filter_map(f){
    var accu = 0;
    return function(param$0){
     var accu$0 = accu, param = param$0;
     for(;;){
      if(! param) return rev(accu$0);
      var l = param[2], x = param[1], match = caml_call1(f, x);
      if(match){
       var v = match[1], accu$1 = [0, v, accu$0];
       accu$0 = accu$1;
       param = l;
      }
      else
       param = l;
     }};
   }
   function concat_map(f, l){
    var acc = 0, param = l;
    for(;;){
     if(! param) return rev(acc);
     var
      l$0 = param[2],
      x = param[1],
      xs = caml_call1(f, x),
      acc$0 = rev_append(xs, acc);
     acc = acc$0;
     param = l$0;
    }
   }
   function fold_left_map(f, accu, l){
    var accu$0 = accu, l_accu = 0, param = l;
    for(;;){
     if(! param) return [0, accu$0, rev(l_accu)];
     var
      l$0 = param[2],
      x = param[1],
      match = caml_call2(f, accu$0, x),
      x$0 = match[2],
      accu$1 = match[1],
      l_accu$0 = [0, x$0, l_accu];
     accu$0 = accu$1;
     l_accu = l_accu$0;
     param = l$0;
    }
   }
   function partition(p, l){
    var yes = 0, no = 0, param = l;
    for(;;){
     if(! param){var _y_ = rev(no); return [0, rev(yes), _y_];}
     var l$0 = param[2], x = param[1];
     if(caml_call1(p, x)){
      var yes$0 = [0, x, yes];
      yes = yes$0;
      param = l$0;
     }
     else{var no$0 = [0, x, no]; no = no$0; param = l$0;}
    }
   }
   function partition_map(p, l){
    var left = 0, right = 0, param = l;
    for(;;){
     if(! param){var _x_ = rev(right); return [0, rev(left), _x_];}
     var l$0 = param[2], x = param[1], match = caml_call1(p, x);
     if(0 === match[0]){
      var v = match[1], left$0 = [0, v, left];
      left = left$0;
      param = l$0;
     }
     else{
      var v$0 = match[1], right$0 = [0, v$0, right];
      right = right$0;
      param = l$0;
     }
    }
   }
   function split(param){
    if(! param) return _b_;
    var
     l = param[2],
     match = param[1],
     y = match[2],
     x = match[1],
     match$0 = split(l),
     ry = match$0[2],
     rx = match$0[1];
    return [0, [0, x, rx], [0, y, ry]];
   }
   function combine(l1, l2){
    if(l1){
     if(l2){
      var l2$0 = l2[2], a2 = l2[1], l1$0 = l1[2], a1 = l1[1];
      return [0, [0, a1, a2], combine(l1$0, l2$0)];
     }
    }
    else if(! l2) return 0;
    return caml_call1(Stdlib[1], cst_List_combine);
   }
   function merge(cmp, l1, l2){
    if(! l1) return l2;
    if(! l2) return l1;
    var t2 = l2[2], h2 = l2[1], t1 = l1[2], h1 = l1[1];
    return 0 < caml_call2(cmp, h1, h2)
            ? [0, h2, merge(cmp, l1, t2)]
            : [0, h1, merge(cmp, t1, l2)];
   }
   function stable_sort(cmp, l){
    function sort(n, l){
     if(2 === n){
      if(l){
       var match = l[2];
       if(match){
        var
         tl = match[2],
         x2 = match[1],
         x1 = l[1],
         s =
           0 < caml_call2(cmp, x1, x2)
            ? [0, x2, [0, x1, 0]]
            : [0, x1, [0, x2, 0]];
        return [0, s, tl];
       }
      }
     }
     else if(3 === n && l){
      var _w_ = l[2];
      if(_w_){
       var match$2 = _w_[2];
       if(match$2){
        var
         tl$1 = match$2[2],
         x3 = match$2[1],
         x2$0 = _w_[1],
         x1$0 = l[1],
         s$0 =
           0 < caml_call2(cmp, x1$0, x2$0)
            ? 0
              < caml_call2(cmp, x1$0, x3)
              ? 0
                < caml_call2(cmp, x2$0, x3)
                ? [0, x3, [0, x2$0, [0, x1$0, 0]]]
                : [0, x2$0, [0, x3, [0, x1$0, 0]]]
              : [0, x2$0, [0, x1$0, [0, x3, 0]]]
            : 0
              < caml_call2(cmp, x2$0, x3)
              ? 0
                < caml_call2(cmp, x1$0, x3)
                ? [0, x3, [0, x1$0, [0, x2$0, 0]]]
                : [0, x1$0, [0, x3, [0, x2$0, 0]]]
              : [0, x1$0, [0, x2$0, [0, x3, 0]]];
        return [0, s$0, tl$1];
       }
      }
     }
     var
      n1 = n >> 1,
      n2 = n - n1 | 0,
      match$0 = rev_sort(n1, l),
      l2$0 = match$0[2],
      s1 = match$0[1],
      match$1 = rev_sort(n2, l2$0),
      tl$0 = match$1[2],
      s2 = match$1[1],
      l1 = s1,
      l2 = s2,
      accu = 0;
     for(;;){
      if(l1){
       if(l2){
        var t2 = l2[2], h2 = l2[1], t1 = l1[2], h1 = l1[1];
        if(0 < caml_call2(cmp, h1, h2)){
         var accu$0 = [0, h1, accu];
         l1 = t1;
         accu = accu$0;
         continue;
        }
        var accu$1 = [0, h2, accu];
        l2 = t2;
        accu = accu$1;
        continue;
       }
       var _v_ = rev_append(l1, accu);
      }
      else
       var _v_ = rev_append(l2, accu);
      return [0, _v_, tl$0];
     }
    }
    function rev_sort(n, l){
     if(2 === n){
      if(l){
       var match = l[2];
       if(match){
        var
         tl = match[2],
         x2 = match[1],
         x1 = l[1],
         s =
           0 < caml_call2(cmp, x1, x2)
            ? [0, x1, [0, x2, 0]]
            : [0, x2, [0, x1, 0]];
        return [0, s, tl];
       }
      }
     }
     else if(3 === n && l){
      var _u_ = l[2];
      if(_u_){
       var match$2 = _u_[2];
       if(match$2){
        var
         tl$1 = match$2[2],
         x3 = match$2[1],
         x2$0 = _u_[1],
         x1$0 = l[1],
         s$0 =
           0 < caml_call2(cmp, x1$0, x2$0)
            ? 0
              < caml_call2(cmp, x2$0, x3)
              ? [0, x1$0, [0, x2$0, [0, x3, 0]]]
              : 0
                < caml_call2(cmp, x1$0, x3)
                ? [0, x1$0, [0, x3, [0, x2$0, 0]]]
                : [0, x3, [0, x1$0, [0, x2$0, 0]]]
            : 0
              < caml_call2(cmp, x1$0, x3)
              ? [0, x2$0, [0, x1$0, [0, x3, 0]]]
              : 0
                < caml_call2(cmp, x2$0, x3)
                ? [0, x2$0, [0, x3, [0, x1$0, 0]]]
                : [0, x3, [0, x2$0, [0, x1$0, 0]]];
        return [0, s$0, tl$1];
       }
      }
     }
     var
      n1 = n >> 1,
      n2 = n - n1 | 0,
      match$0 = sort(n1, l),
      l2$0 = match$0[2],
      s1 = match$0[1],
      match$1 = sort(n2, l2$0),
      tl$0 = match$1[2],
      s2 = match$1[1],
      l1 = s1,
      l2 = s2,
      accu = 0;
     for(;;){
      if(l1){
       if(l2){
        var t2 = l2[2], h2 = l2[1], t1 = l1[2], h1 = l1[1];
        if(0 < caml_call2(cmp, h1, h2)){
         var accu$0 = [0, h2, accu];
         l2 = t2;
         accu = accu$0;
         continue;
        }
        var accu$1 = [0, h1, accu];
        l1 = t1;
        accu = accu$1;
        continue;
       }
       var _t_ = rev_append(l1, accu);
      }
      else
       var _t_ = rev_append(l2, accu);
      return [0, _t_, tl$0];
     }
    }
    var len = length(l);
    return 2 <= len ? sort(len, l)[1] : l;
   }
   function sort_uniq(cmp, l){
    function sort(n, l){
     if(2 === n){
      if(l){
       var match = l[2];
       if(match){
        var
         tl = match[2],
         x2 = match[1],
         x1 = l[1],
         c$0 = caml_call2(cmp, x1, x2),
         s =
           0 === c$0
            ? [0, x1, 0]
            : 0 <= c$0 ? [0, x2, [0, x1, 0]] : [0, x1, [0, x2, 0]];
        return [0, s, tl];
       }
      }
     }
     else if(3 === n && l){
      var _n_ = l[2];
      if(_n_){
       var match$2 = _n_[2];
       if(match$2){
        var
         tl$1 = match$2[2],
         x3 = match$2[1],
         x2$0 = _n_[1],
         x1$0 = l[1],
         c$1 = caml_call2(cmp, x1$0, x2$0);
        if(0 === c$1)
         var
          c$2 = caml_call2(cmp, x2$0, x3),
          _o_ =
            0 === c$2
             ? [0, x2$0, 0]
             : 0 <= c$2 ? [0, x3, [0, x2$0, 0]] : [0, x2$0, [0, x3, 0]],
          s$0 = _o_;
        else if(0 <= c$1){
         var c$3 = caml_call2(cmp, x1$0, x3);
         if(0 === c$3)
          var _p_ = [0, x2$0, [0, x1$0, 0]];
         else if(0 <= c$3)
          var
           c$4 = caml_call2(cmp, x2$0, x3),
           _q_ =
             0 === c$4
              ? [0, x2$0, [0, x1$0, 0]]
              : 0
                <= c$4
                ? [0, x3, [0, x2$0, [0, x1$0, 0]]]
                : [0, x2$0, [0, x3, [0, x1$0, 0]]],
           _p_ = _q_;
         else
          var _p_ = [0, x2$0, [0, x1$0, [0, x3, 0]]];
         var s$0 = _p_;
        }
        else{
         var c$5 = caml_call2(cmp, x2$0, x3);
         if(0 === c$5)
          var _r_ = [0, x1$0, [0, x2$0, 0]];
         else if(0 <= c$5)
          var
           c$6 = caml_call2(cmp, x1$0, x3),
           _s_ =
             0 === c$6
              ? [0, x1$0, [0, x2$0, 0]]
              : 0
                <= c$6
                ? [0, x3, [0, x1$0, [0, x2$0, 0]]]
                : [0, x1$0, [0, x3, [0, x2$0, 0]]],
           _r_ = _s_;
         else
          var _r_ = [0, x1$0, [0, x2$0, [0, x3, 0]]];
         var s$0 = _r_;
        }
        return [0, s$0, tl$1];
       }
      }
     }
     var
      n1 = n >> 1,
      n2 = n - n1 | 0,
      match$0 = rev_sort(n1, l),
      l2$0 = match$0[2],
      s1 = match$0[1],
      match$1 = rev_sort(n2, l2$0),
      tl$0 = match$1[2],
      s2 = match$1[1],
      l1 = s1,
      l2 = s2,
      accu = 0;
     for(;;){
      if(l1){
       if(l2){
        var
         t2 = l2[2],
         h2 = l2[1],
         t1 = l1[2],
         h1 = l1[1],
         c = caml_call2(cmp, h1, h2);
        if(0 === c){
         var accu$0 = [0, h1, accu];
         l1 = t1;
         l2 = t2;
         accu = accu$0;
         continue;
        }
        if(0 < c){
         var accu$1 = [0, h1, accu];
         l1 = t1;
         accu = accu$1;
         continue;
        }
        var accu$2 = [0, h2, accu];
        l2 = t2;
        accu = accu$2;
        continue;
       }
       var _m_ = rev_append(l1, accu);
      }
      else
       var _m_ = rev_append(l2, accu);
      return [0, _m_, tl$0];
     }
    }
    function rev_sort(n, l){
     if(2 === n){
      if(l){
       var match = l[2];
       if(match){
        var
         tl = match[2],
         x2 = match[1],
         x1 = l[1],
         c$0 = caml_call2(cmp, x1, x2),
         s =
           0 === c$0
            ? [0, x1, 0]
            : 0 < c$0 ? [0, x1, [0, x2, 0]] : [0, x2, [0, x1, 0]];
        return [0, s, tl];
       }
      }
     }
     else if(3 === n && l){
      var _g_ = l[2];
      if(_g_){
       var match$2 = _g_[2];
       if(match$2){
        var
         tl$1 = match$2[2],
         x3 = match$2[1],
         x2$0 = _g_[1],
         x1$0 = l[1],
         c$1 = caml_call2(cmp, x1$0, x2$0);
        if(0 === c$1)
         var
          c$2 = caml_call2(cmp, x2$0, x3),
          _h_ =
            0 === c$2
             ? [0, x2$0, 0]
             : 0 < c$2 ? [0, x2$0, [0, x3, 0]] : [0, x3, [0, x2$0, 0]],
          s$0 = _h_;
        else if(0 < c$1){
         var c$3 = caml_call2(cmp, x2$0, x3);
         if(0 === c$3)
          var _i_ = [0, x1$0, [0, x2$0, 0]];
         else if(0 < c$3)
          var _i_ = [0, x1$0, [0, x2$0, [0, x3, 0]]];
         else
          var
           c$4 = caml_call2(cmp, x1$0, x3),
           _j_ =
             0 === c$4
              ? [0, x1$0, [0, x2$0, 0]]
              : 0
                < c$4
                ? [0, x1$0, [0, x3, [0, x2$0, 0]]]
                : [0, x3, [0, x1$0, [0, x2$0, 0]]],
           _i_ = _j_;
         var s$0 = _i_;
        }
        else{
         var c$5 = caml_call2(cmp, x1$0, x3);
         if(0 === c$5)
          var _k_ = [0, x2$0, [0, x1$0, 0]];
         else if(0 < c$5)
          var _k_ = [0, x2$0, [0, x1$0, [0, x3, 0]]];
         else
          var
           c$6 = caml_call2(cmp, x2$0, x3),
           _l_ =
             0 === c$6
              ? [0, x2$0, [0, x1$0, 0]]
              : 0
                < c$6
                ? [0, x2$0, [0, x3, [0, x1$0, 0]]]
                : [0, x3, [0, x2$0, [0, x1$0, 0]]],
           _k_ = _l_;
         var s$0 = _k_;
        }
        return [0, s$0, tl$1];
       }
      }
     }
     var
      n1 = n >> 1,
      n2 = n - n1 | 0,
      match$0 = sort(n1, l),
      l2$0 = match$0[2],
      s1 = match$0[1],
      match$1 = sort(n2, l2$0),
      tl$0 = match$1[2],
      s2 = match$1[1],
      l1 = s1,
      l2 = s2,
      accu = 0;
     for(;;){
      if(l1){
       if(l2){
        var
         t2 = l2[2],
         h2 = l2[1],
         t1 = l1[2],
         h1 = l1[1],
         c = caml_call2(cmp, h1, h2);
        if(0 === c){
         var accu$0 = [0, h1, accu];
         l1 = t1;
         l2 = t2;
         accu = accu$0;
         continue;
        }
        if(0 <= c){
         var accu$1 = [0, h2, accu];
         l2 = t2;
         accu = accu$1;
         continue;
        }
        var accu$2 = [0, h1, accu];
        l1 = t1;
        accu = accu$2;
        continue;
       }
       var _f_ = rev_append(l1, accu);
      }
      else
       var _f_ = rev_append(l2, accu);
      return [0, _f_, tl$0];
     }
    }
    var len = length(l);
    return 2 <= len ? sort(len, l)[1] : l;
   }
   function compare_lengths(l1, l2){
    var l1$0 = l1, l2$0 = l2;
    for(;;){
     if(! l1$0) return l2$0 ? -1 : 0;
     if(! l2$0) return 1;
     var l2$1 = l2$0[2], l1$1 = l1$0[2];
     l1$0 = l1$1;
     l2$0 = l2$1;
    }
   }
   function compare_length_with(l, n){
    var l$0 = l, n$0 = n;
    for(;;){
     if(! l$0) return 0 === n$0 ? 0 : 0 < n$0 ? -1 : 1;
     var l$1 = l$0[2];
     if(0 >= n$0) return 1;
     var n$1 = n$0 - 1 | 0;
     l$0 = l$1;
     n$0 = n$1;
    }
   }
   function equal(eq, l1, l2){
    var l1$0 = l1, l2$0 = l2;
    for(;;){
     if(l1$0){
      if(l2$0){
       var
        l2$1 = l2$0[2],
        a2 = l2$0[1],
        l1$1 = l1$0[2],
        a1 = l1$0[1],
        _e_ = caml_call2(eq, a1, a2);
       if(! _e_) return _e_;
       l1$0 = l1$1;
       l2$0 = l2$1;
       continue;
      }
     }
     else if(! l2$0) return 1;
     return 0;
    }
   }
   function compare(cmp, l1, l2){
    var l1$0 = l1, l2$0 = l2;
    for(;;){
     if(! l1$0) return l2$0 ? -1 : 0;
     var l1$1 = l1$0[2], a1 = l1$0[1];
     if(! l2$0) return 1;
     var l2$1 = l2$0[2], a2 = l2$0[1], c = caml_call2(cmp, a1, a2);
     if(0 !== c) return c;
     l1$0 = l1$1;
     l2$0 = l2$1;
    }
   }
   function to_seq(l){
    function aux(l, param){
     if(! l) return 0;
     var tail = l[2], x = l[1];
     return [0, x, function(_d_){return aux(tail, _d_);}];
    }
    return function(_c_){return aux(l, _c_);};
   }
   function of_seq(seq){
    function direct(depth, seq){
     if(0 === depth)
      return rev
              (caml_call3
                (Stdlib_Seq[5], function(acc, x){return [0, x, acc];}, 0, seq));
     var match = caml_call1(seq, 0);
     if(! match) return 0;
     var next = match[2], x = match[1];
     return [0, x, direct(depth - 1 | 0, next)];
    }
    return direct(500, seq);
   }
   var
    Stdlib_List =
      [0,
       length,
       compare_lengths,
       compare_length_with,
       cons,
       hd,
       tl,
       nth,
       nth_opt,
       rev,
       init,
       append,
       rev_append,
       flatten,
       flatten,
       equal,
       compare,
       iter,
       iteri,
       map,
       mapi,
       rev_map,
       filter_map,
       concat_map,
       fold_left_map,
       fold_left,
       fold_right,
       iter2,
       map2,
       rev_map2,
       fold_left2,
       fold_right2,
       for_all,
       exists,
       for_all2,
       exists2,
       mem,
       memq,
       find,
       find_opt,
       find_map,
       find_all,
       find_all,
       filteri,
       partition,
       partition_map,
       assoc,
       assoc_opt,
       assq,
       assq_opt,
       mem_assoc,
       mem_assq,
       remove_assoc,
       remove_assq,
       split,
       combine,
       stable_sort,
       stable_sort,
       stable_sort,
       sort_uniq,
       merge,
       to_seq,
       of_seq];
   runtime.caml_register_global(18, Stdlib_List, "Stdlib__List");
   return;
  }
  (globalThis));

//# 3709 "../.js/default/stdlib/stdlib.cma.js"
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function abs(x){return 0 <= x ? x : - x | 0;}
   function lognot(x){return x ^ -1;}
   function equal(_b_, _a_){return _b_ === _a_ ? 1 : 0;}
   var compare = runtime.caml_int_compare;
   function min(x, y){return x <= y ? x : y;}
   function max(x, y){return y <= x ? x : y;}
   function to_string(x){return "" + x;}
   var
    Stdlib_Int =
      [0,
       0,
       1,
       -1,
       abs,
       2147483647,
       -2147483648,
       lognot,
       equal,
       compare,
       min,
       max,
       to_string];
   runtime.caml_register_global(1, Stdlib_Int, "Stdlib__Int");
   return;
  }
  (globalThis));

//# 3741 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_bytes_ml = "bytes.ml",
    cst_index_out_of_bounds$3 = "index out of bounds",
    caml_blit_bytes = runtime.caml_blit_bytes,
    caml_bswap16 = runtime.caml_bswap16,
    caml_bytes_get = runtime.caml_bytes_get,
    caml_bytes_get16 = runtime.caml_bytes_get16,
    caml_bytes_get32 = runtime.caml_bytes_get32,
    caml_bytes_get64 = runtime.caml_bytes_get64,
    caml_bytes_of_string = runtime.caml_bytes_of_string,
    caml_bytes_set = runtime.caml_bytes_set,
    caml_bytes_set16 = runtime.caml_bytes_set16,
    caml_bytes_set32 = runtime.caml_bytes_set32,
    caml_bytes_set64 = runtime.caml_bytes_set64,
    caml_bytes_unsafe_get = runtime.caml_bytes_unsafe_get,
    caml_bytes_unsafe_set = runtime.caml_bytes_unsafe_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_fill_bytes = runtime.caml_fill_bytes,
    caml_int32_bswap = runtime.caml_int32_bswap,
    caml_int64_bswap = runtime.caml_int64_bswap,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_string_of_bytes = runtime.caml_string_of_bytes,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Uchar = global_data.Stdlib__Uchar,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib_Char = global_data.Stdlib__Char;
   function make(n, c){
    var s = caml_create_bytes(n);
    caml_fill_bytes(s, 0, n, c);
    return s;
   }
   function init(n, f){
    var s = caml_create_bytes(n), _ap_ = n - 1 | 0, _ao_ = 0;
    if(_ap_ >= 0){
     var i = _ao_;
     for(;;){
      caml_bytes_unsafe_set(s, i, caml_call1(f, i));
      var _aq_ = i + 1 | 0;
      if(_ap_ === i) break;
      i = _aq_;
     }
    }
    return s;
   }
   var
    empty = caml_create_bytes(0),
    cst_String_sub_Bytes_sub = "String.sub / Bytes.sub",
    cst_Bytes_extend = "Bytes.extend",
    cst_String_fill_Bytes_fill = "String.fill / Bytes.fill",
    cst_Bytes_blit = "Bytes.blit",
    cst_String_blit_Bytes_blit_str = "String.blit / Bytes.blit_string",
    cst_Bytes_concat = "Bytes.concat",
    cst_String_index_from_Bytes_in = "String.index_from / Bytes.index_from",
    cst_String_index_from_opt_Byte =
      "String.index_from_opt / Bytes.index_from_opt",
    cst_String_rindex_from_Bytes_r = "String.rindex_from / Bytes.rindex_from",
    cst_String_rindex_from_opt_Byt =
      "String.rindex_from_opt / Bytes.rindex_from_opt",
    cst_String_contains_from_Bytes =
      "String.contains_from / Bytes.contains_from",
    cst_String_rcontains_from_Byte =
      "String.rcontains_from / Bytes.rcontains_from";
   function copy(s){
    var len = caml_ml_bytes_length(s), r = caml_create_bytes(len);
    caml_blit_bytes(s, 0, r, 0, len);
    return r;
   }
   function to_string(b){return caml_string_of_bytes(copy(b));}
   function of_string(s){return copy(caml_bytes_of_string(s));}
   function sub(s, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs){
     var r = caml_create_bytes(len);
     caml_blit_bytes(s, ofs, r, 0, len);
     return r;
    }
    return caml_call1(Stdlib[1], cst_String_sub_Bytes_sub);
   }
   function sub_string(b, ofs, len){
    return caml_string_of_bytes(sub(b, ofs, len));
   }
   function symbol(a, b){
    var c = a + b | 0, _an_ = b < 0 ? 1 : 0, match = c < 0 ? 1 : 0;
    a:
    {
     if(a < 0){if(_an_ && ! match) break a;} else if(! _an_ && match) break a;
     return c;
    }
    return caml_call1(Stdlib[1], cst_Bytes_extend);
   }
   function extend(s, left, right){
    var
     len = symbol(symbol(caml_ml_bytes_length(s), left), right),
     r = caml_create_bytes(len);
    if(0 <= left)
     var dstoff = left, srcoff = 0;
    else
     var dstoff = 0, srcoff = - left | 0;
    var
     cpylen =
       caml_call2
        (Stdlib_Int[10],
         caml_ml_bytes_length(s) - srcoff | 0,
         len - dstoff | 0);
    if(0 < cpylen) caml_blit_bytes(s, srcoff, r, dstoff, cpylen);
    return r;
   }
   function fill(s, ofs, len, c){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs)
     return caml_fill_bytes(s, ofs, len, c);
    return caml_call1(Stdlib[1], cst_String_fill_Bytes_fill);
   }
   function blit(s1, ofs1, s2, ofs2, len){
    if
     (0 <= len
      &&
       0 <= ofs1
       &&
        (caml_ml_bytes_length(s1) - len | 0) >= ofs1
        && 0 <= ofs2 && (caml_ml_bytes_length(s2) - len | 0) >= ofs2)
     return caml_blit_bytes(s1, ofs1, s2, ofs2, len);
    return caml_call1(Stdlib[1], cst_Bytes_blit);
   }
   function blit_string(s1, ofs1, s2, ofs2, len){
    if
     (0 <= len
      &&
       0 <= ofs1
       &&
        (runtime.caml_ml_string_length(s1) - len | 0) >= ofs1
        && 0 <= ofs2 && (caml_ml_bytes_length(s2) - len | 0) >= ofs2)
     return runtime.caml_blit_string(s1, ofs1, s2, ofs2, len);
    return caml_call1(Stdlib[1], cst_String_blit_Bytes_blit_str);
   }
   function iter(f, a){
    var _al_ = caml_ml_bytes_length(a) - 1 | 0, _ak_ = 0;
    if(_al_ >= 0){
     var i = _ak_;
     for(;;){
      caml_call1(f, caml_bytes_unsafe_get(a, i));
      var _am_ = i + 1 | 0;
      if(_al_ === i) break;
      i = _am_;
     }
    }
    return 0;
   }
   function iteri(f, a){
    var _ai_ = caml_ml_bytes_length(a) - 1 | 0, _ah_ = 0;
    if(_ai_ >= 0){
     var i = _ah_;
     for(;;){
      caml_call2(f, i, caml_bytes_unsafe_get(a, i));
      var _aj_ = i + 1 | 0;
      if(_ai_ === i) break;
      i = _aj_;
     }
    }
    return 0;
   }
   function concat(sep, l){
    if(! l) return empty;
    var seplen = caml_ml_bytes_length(sep);
    a:
    {
     b:
     {
      var acc = 0, param = l, pos$1 = 0;
      for(;;){
       if(! param) break;
       var hd = param[1];
       if(! param[2]) break b;
       var
        tl = param[2],
        x = (caml_ml_bytes_length(hd) + seplen | 0) + acc | 0,
        acc$0 = acc <= x ? x : caml_call1(Stdlib[1], cst_Bytes_concat);
       acc = acc$0;
       param = tl;
      }
      var _ag_ = acc;
      break a;
     }
     var _ag_ = caml_ml_bytes_length(hd) + acc | 0;
    }
    var dst = caml_create_bytes(_ag_), pos = pos$1, param$0 = l;
    for(;;){
     if(! param$0) return dst;
     var hd$0 = param$0[1];
     if(! param$0[2]){
      caml_blit_bytes(hd$0, 0, dst, pos, caml_ml_bytes_length(hd$0));
      return dst;
     }
     var tl$0 = param$0[2];
     caml_blit_bytes(hd$0, 0, dst, pos, caml_ml_bytes_length(hd$0));
     caml_blit_bytes
      (sep, 0, dst, pos + caml_ml_bytes_length(hd$0) | 0, seplen);
     var pos$0 = (pos + caml_ml_bytes_length(hd$0) | 0) + seplen | 0;
     pos = pos$0;
     param$0 = tl$0;
    }
   }
   function cat(s1, s2){
    var
     l1 = caml_ml_bytes_length(s1),
     l2 = caml_ml_bytes_length(s2),
     r = caml_create_bytes(l1 + l2 | 0);
    caml_blit_bytes(s1, 0, r, 0, l1);
    caml_blit_bytes(s2, 0, r, l1, l2);
    return r;
   }
   function is_space(param){
    var _af_ = param - 9 | 0;
    a:
    {
     if(4 < _af_ >>> 0){if(23 !== _af_) break a;} else if(2 === _af_) break a;
     return 1;
    }
    return 0;
   }
   function trim(s){
    var len = caml_ml_bytes_length(s), i = [0, 0];
    for(;;){
     if(i[1] >= len) break;
     if(! is_space(caml_bytes_unsafe_get(s, i[1]))) break;
     i[1]++;
    }
    var j = [0, len - 1 | 0];
    for(;;){
     if(i[1] <= j[1] && is_space(caml_bytes_unsafe_get(s, j[1]))){j[1]--; continue;}
     return i[1] <= j[1] ? sub(s, i[1], (j[1] - i[1] | 0) + 1 | 0) : empty;
    }
   }
   function escaped(s){
    var n = [0, 0], ___ = caml_ml_bytes_length(s) - 1 | 0, _Z_ = 0;
    if(___ >= 0){
     var i$0 = _Z_;
     for(;;){
      var match = caml_bytes_unsafe_get(s, i$0);
      a:
      {
       b:
       {
        c:
        {
         if(32 <= match){
          var _ac_ = match - 34 | 0;
          if(58 < _ac_ >>> 0){
           if(93 <= _ac_) break c;
          }
          else if(56 < _ac_ - 1 >>> 0) break b;
          var _ad_ = 1;
          break a;
         }
         if(11 <= match){
          if(13 === match) break b;
         }
         else if(8 <= match) break b;
        }
        var _ad_ = 4;
        break a;
       }
       var _ad_ = 2;
      }
      n[1] = n[1] + _ad_ | 0;
      var _ae_ = i$0 + 1 | 0;
      if(___ === i$0) break;
      i$0 = _ae_;
     }
    }
    if(n[1] === caml_ml_bytes_length(s)) return copy(s);
    var s$0 = caml_create_bytes(n[1]);
    n[1] = 0;
    var _aa_ = caml_ml_bytes_length(s) - 1 | 0, _$_ = 0;
    if(_aa_ >= 0){
     var i = _$_;
     for(;;){
      var c = caml_bytes_unsafe_get(s, i);
      a:
      {
       b:
       {
        c:
        {
         if(35 <= c){
          if(92 !== c){if(127 <= c) break c; break b;}
         }
         else{
          if(32 > c){
           if(14 <= c) break c;
           switch(c){
             case 8:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 98);
              break a;
             case 9:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 116);
              break a;
             case 10:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 110);
              break a;
             case 13:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 114);
              break a;
             default: break c;
           }
          }
          if(34 > c) break b;
         }
         caml_bytes_unsafe_set(s$0, n[1], 92);
         n[1]++;
         caml_bytes_unsafe_set(s$0, n[1], c);
         break a;
        }
        caml_bytes_unsafe_set(s$0, n[1], 92);
        n[1]++;
        caml_bytes_unsafe_set(s$0, n[1], 48 + (c / 100 | 0) | 0);
        n[1]++;
        caml_bytes_unsafe_set(s$0, n[1], 48 + ((c / 10 | 0) % 10 | 0) | 0);
        n[1]++;
        caml_bytes_unsafe_set(s$0, n[1], 48 + (c % 10 | 0) | 0);
        break a;
       }
       caml_bytes_unsafe_set(s$0, n[1], c);
      }
      n[1]++;
      var _ab_ = i + 1 | 0;
      if(_aa_ === i) break;
      i = _ab_;
     }
    }
    return s$0;
   }
   function map(f, s){
    var l = caml_ml_bytes_length(s);
    if(0 === l) return s;
    var r = caml_create_bytes(l), _X_ = l - 1 | 0, _W_ = 0;
    if(_X_ >= 0){
     var i = _W_;
     for(;;){
      caml_bytes_unsafe_set(r, i, caml_call1(f, caml_bytes_unsafe_get(s, i)));
      var _Y_ = i + 1 | 0;
      if(_X_ === i) break;
      i = _Y_;
     }
    }
    return r;
   }
   function mapi(f, s){
    var l = caml_ml_bytes_length(s);
    if(0 === l) return s;
    var r = caml_create_bytes(l), _U_ = l - 1 | 0, _T_ = 0;
    if(_U_ >= 0){
     var i = _T_;
     for(;;){
      caml_bytes_unsafe_set
       (r, i, caml_call2(f, i, caml_bytes_unsafe_get(s, i)));
      var _V_ = i + 1 | 0;
      if(_U_ === i) break;
      i = _V_;
     }
    }
    return r;
   }
   function fold_left(f, x, a){
    var r = [0, x], _R_ = caml_ml_bytes_length(a) - 1 | 0, _Q_ = 0;
    if(_R_ >= 0){
     var i = _Q_;
     for(;;){
      r[1] = caml_call2(f, r[1], caml_bytes_unsafe_get(a, i));
      var _S_ = i + 1 | 0;
      if(_R_ === i) break;
      i = _S_;
     }
    }
    return r[1];
   }
   function fold_right(f, a, x){
    var r = [0, x], _O_ = caml_ml_bytes_length(a) - 1 | 0;
    if(_O_ >= 0){
     var i = _O_;
     for(;;){
      r[1] = caml_call2(f, caml_bytes_unsafe_get(a, i), r[1]);
      var _P_ = i - 1 | 0;
      if(0 === i) break;
      i = _P_;
     }
    }
    return r[1];
   }
   function exists(p, s){
    var n = caml_ml_bytes_length(s), i = 0;
    for(;;){
     if(i === n) return 0;
     if(caml_call1(p, caml_bytes_unsafe_get(s, i))) return 1;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function for_all(p, s){
    var n = caml_ml_bytes_length(s), i = 0;
    for(;;){
     if(i === n) return 1;
     if(! caml_call1(p, caml_bytes_unsafe_get(s, i))) return 0;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function uppercase_ascii(s){return map(Stdlib_Char[6], s);}
   function lowercase_ascii(s){return map(Stdlib_Char[5], s);}
   function apply1(f, s){
    if(0 === caml_ml_bytes_length(s)) return s;
    var r = copy(s);
    caml_bytes_unsafe_set(r, 0, caml_call1(f, caml_bytes_unsafe_get(s, 0)));
    return r;
   }
   function capitalize_ascii(s){return apply1(Stdlib_Char[6], s);}
   function uncapitalize_ascii(s){return apply1(Stdlib_Char[5], s);}
   function starts_with(prefix, s){
    var
     len_s = caml_ml_bytes_length(s),
     len_pre = caml_ml_bytes_length(prefix),
     _N_ = len_pre <= len_s ? 1 : 0;
    if(! _N_) return _N_;
    var i = 0;
    for(;;){
     if(i === len_pre) return 1;
     if(caml_bytes_unsafe_get(s, i) !== caml_bytes_unsafe_get(prefix, i))
      return 0;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function ends_with(suffix, s){
    var
     len_s = caml_ml_bytes_length(s),
     len_suf = caml_ml_bytes_length(suffix),
     diff = len_s - len_suf | 0,
     _M_ = 0 <= diff ? 1 : 0;
    if(! _M_) return _M_;
    var i = 0;
    for(;;){
     if(i === len_suf) return 1;
     if
      (caml_bytes_unsafe_get(s, diff + i | 0)
       !== caml_bytes_unsafe_get(suffix, i))
      return 0;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function index_rec(s, lim, i, c){
    var i$0 = i;
    for(;;){
     if(lim <= i$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     if(caml_bytes_unsafe_get(s, i$0) === c) return i$0;
     var i$1 = i$0 + 1 | 0;
     i$0 = i$1;
    }
   }
   function index(s, c){return index_rec(s, caml_ml_bytes_length(s), 0, c);}
   function index_rec_opt(s, lim, i, c){
    var i$0 = i;
    for(;;){
     if(lim <= i$0) return 0;
     if(caml_bytes_unsafe_get(s, i$0) === c) return [0, i$0];
     var i$1 = i$0 + 1 | 0;
     i$0 = i$1;
    }
   }
   function index_opt(s, c){
    return index_rec_opt(s, caml_ml_bytes_length(s), 0, c);
   }
   function index_from(s, i, c){
    var l = caml_ml_bytes_length(s);
    if(0 <= i && l >= i) return index_rec(s, l, i, c);
    return caml_call1(Stdlib[1], cst_String_index_from_Bytes_in);
   }
   function index_from_opt(s, i, c){
    var l = caml_ml_bytes_length(s);
    if(0 <= i && l >= i) return index_rec_opt(s, l, i, c);
    return caml_call1(Stdlib[1], cst_String_index_from_opt_Byte);
   }
   function rindex_rec(s, i, c){
    var i$0 = i;
    for(;;){
     if(0 > i$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     if(caml_bytes_unsafe_get(s, i$0) === c) return i$0;
     var i$1 = i$0 - 1 | 0;
     i$0 = i$1;
    }
   }
   function rindex(s, c){
    return rindex_rec(s, caml_ml_bytes_length(s) - 1 | 0, c);
   }
   function rindex_from(s, i, c){
    if(-1 <= i && caml_ml_bytes_length(s) > i) return rindex_rec(s, i, c);
    return caml_call1(Stdlib[1], cst_String_rindex_from_Bytes_r);
   }
   function rindex_rec_opt(s, i, c){
    var i$0 = i;
    for(;;){
     if(0 > i$0) return 0;
     if(caml_bytes_unsafe_get(s, i$0) === c) return [0, i$0];
     var i$1 = i$0 - 1 | 0;
     i$0 = i$1;
    }
   }
   function rindex_opt(s, c){
    return rindex_rec_opt(s, caml_ml_bytes_length(s) - 1 | 0, c);
   }
   function rindex_from_opt(s, i, c){
    if(-1 <= i && caml_ml_bytes_length(s) > i) return rindex_rec_opt(s, i, c);
    return caml_call1(Stdlib[1], cst_String_rindex_from_opt_Byt);
   }
   function contains_from(s, i, c){
    var l = caml_ml_bytes_length(s);
    if(0 <= i && l >= i)
     try{index_rec(s, l, i, c); var _K_ = 1; return _K_;}
     catch(_L_){
      var _J_ = caml_wrap_exception(_L_);
      if(_J_ === Stdlib[8]) return 0;
      throw caml_maybe_attach_backtrace(_J_, 0);
     }
    return caml_call1(Stdlib[1], cst_String_contains_from_Bytes);
   }
   function contains(s, c){return contains_from(s, 0, c);}
   function rcontains_from(s, i, c){
    if(0 <= i && caml_ml_bytes_length(s) > i)
     try{rindex_rec(s, i, c); var _H_ = 1; return _H_;}
     catch(_I_){
      var _G_ = caml_wrap_exception(_I_);
      if(_G_ === Stdlib[8]) return 0;
      throw caml_maybe_attach_backtrace(_G_, 0);
     }
    return caml_call1(Stdlib[1], cst_String_rcontains_from_Byte);
   }
   var
    compare = runtime.caml_bytes_compare,
    cst_Bytes_of_seq_cannot_grow_b = "Bytes.of_seq: cannot grow bytes";
   function split_on_char(sep, s){
    var
     r = [0, 0],
     j = [0, caml_ml_bytes_length(s)],
     _C_ = caml_ml_bytes_length(s) - 1 | 0;
    if(_C_ >= 0){
     var i = _C_;
     for(;;){
      if(caml_bytes_unsafe_get(s, i) === sep){
       var _E_ = r[1];
       r[1] = [0, sub(s, i + 1 | 0, (j[1] - i | 0) - 1 | 0), _E_];
       j[1] = i;
      }
      var _F_ = i - 1 | 0;
      if(0 === i) break;
      i = _F_;
     }
    }
    var _D_ = r[1];
    return [0, sub(s, 0, j[1]), _D_];
   }
   function uppercase(s){return map(Stdlib_Char[4], s);}
   function lowercase(s){return map(Stdlib_Char[3], s);}
   function capitalize(s){return apply1(Stdlib_Char[4], s);}
   function uncapitalize(s){return apply1(Stdlib_Char[3], s);}
   function to_seq(s){
    function aux(i, param){
     if(i === caml_ml_bytes_length(s)) return 0;
     var x = caml_bytes_get(s, i), _A_ = i + 1 | 0;
     return [0, x, function(_B_){return aux(_A_, _B_);}];
    }
    var _y_ = 0;
    return function(_z_){return aux(_y_, _z_);};
   }
   function to_seqi(s){
    function aux(i, param){
     if(i === caml_ml_bytes_length(s)) return 0;
     var x = caml_bytes_get(s, i), _w_ = i + 1 | 0;
     return [0, [0, i, x], function(_x_){return aux(_w_, _x_);}];
    }
    var _u_ = 0;
    return function(_v_){return aux(_u_, _v_);};
   }
   function of_seq(i){
    var n = [0, 0], buf = [0, make(256, 0)];
    caml_call2
     (Stdlib_Seq[4],
      function(c){
       if(n[1] === caml_ml_bytes_length(buf[1])){
        var
         new_len =
           caml_call2
            (Stdlib_Int[10],
             2 * caml_ml_bytes_length(buf[1]) | 0,
             Stdlib_Sys[12]);
        if(caml_ml_bytes_length(buf[1]) === new_len)
         caml_call1(Stdlib[2], cst_Bytes_of_seq_cannot_grow_b);
        var new_buf = make(new_len, 0);
        blit(buf[1], 0, new_buf, 0, n[1]);
        buf[1] = new_buf;
       }
       caml_bytes_set(buf[1], n[1], c);
       n[1]++;
       return 0;
      },
      i);
    return sub(buf[1], 0, n[1]);
   }
   function unsafe_get_uint16_le(b, i){
    return Stdlib_Sys[11]
            ? caml_bswap16(caml_bytes_get16(b, i))
            : caml_bytes_get16(b, i);
   }
   function unsafe_get_uint16_be(b, i){
    return Stdlib_Sys[11]
            ? caml_bytes_get16(b, i)
            : caml_bswap16(caml_bytes_get16(b, i));
   }
   function get_int8(b, i){
    var _s_ = Stdlib_Sys[10] - 8 | 0, _t_ = Stdlib_Sys[10] - 8 | 0;
    return caml_bytes_get(b, i) << _t_ >> _s_;
   }
   function get_uint16_le(b, i){
    return Stdlib_Sys[11]
            ? caml_bswap16(caml_bytes_get16(b, i))
            : caml_bytes_get16(b, i);
   }
   function get_uint16_be(b, i){
    return Stdlib_Sys[11]
            ? caml_bytes_get16(b, i)
            : caml_bswap16(caml_bytes_get16(b, i));
   }
   function get_int16_ne(b, i){
    var _q_ = Stdlib_Sys[10] - 16 | 0, _r_ = Stdlib_Sys[10] - 16 | 0;
    return caml_bytes_get16(b, i) << _r_ >> _q_;
   }
   function get_int16_le(b, i){
    var _o_ = Stdlib_Sys[10] - 16 | 0, _p_ = Stdlib_Sys[10] - 16 | 0;
    return get_uint16_le(b, i) << _p_ >> _o_;
   }
   function get_int16_be(b, i){
    var _m_ = Stdlib_Sys[10] - 16 | 0, _n_ = Stdlib_Sys[10] - 16 | 0;
    return get_uint16_be(b, i) << _n_ >> _m_;
   }
   function get_int32_le(b, i){
    return Stdlib_Sys[11]
            ? caml_int32_bswap(caml_bytes_get32(b, i))
            : caml_bytes_get32(b, i);
   }
   function get_int32_be(b, i){
    return Stdlib_Sys[11]
            ? caml_bytes_get32(b, i)
            : caml_int32_bswap(caml_bytes_get32(b, i));
   }
   function get_int64_le(b, i){
    return Stdlib_Sys[11]
            ? caml_int64_bswap(caml_bytes_get64(b, i))
            : caml_bytes_get64(b, i);
   }
   function get_int64_be(b, i){
    return Stdlib_Sys[11]
            ? caml_bytes_get64(b, i)
            : caml_int64_bswap(caml_bytes_get64(b, i));
   }
   function unsafe_set_uint16_le(b, i, x){
    if(Stdlib_Sys[11]){caml_bytes_set16(b, i, caml_bswap16(x)); return;}
    caml_bytes_set16(b, i, x);
    return;
   }
   function unsafe_set_uint16_be(b, i, x){
    if(Stdlib_Sys[11]){caml_bytes_set16(b, i, x); return;}
    caml_bytes_set16(b, i, caml_bswap16(x));
    return;
   }
   function set_int16_le(b, i, x){
    return Stdlib_Sys[11]
            ? caml_bytes_set16(b, i, caml_bswap16(x))
            : caml_bytes_set16(b, i, x);
   }
   function set_int16_be(b, i, x){
    return Stdlib_Sys[11]
            ? caml_bytes_set16(b, i, x)
            : caml_bytes_set16(b, i, caml_bswap16(x));
   }
   function set_int32_le(b, i, x){
    return Stdlib_Sys[11]
            ? caml_bytes_set32(b, i, caml_int32_bswap(x))
            : caml_bytes_set32(b, i, x);
   }
   function set_int32_be(b, i, x){
    return Stdlib_Sys[11]
            ? caml_bytes_set32(b, i, x)
            : caml_bytes_set32(b, i, caml_int32_bswap(x));
   }
   function set_int64_le(b, i, x){
    return Stdlib_Sys[11]
            ? caml_bytes_set64(b, i, caml_int64_bswap(x))
            : caml_bytes_set64(b, i, x);
   }
   function set_int64_be(b, i, x){
    return Stdlib_Sys[11]
            ? caml_bytes_set64(b, i, x)
            : caml_bytes_set64(b, i, caml_int64_bswap(x));
   }
   var
    set_uint8 = caml_bytes_set,
    set_uint16_ne = caml_bytes_set16,
    dec_invalid = Stdlib_Uchar[22],
    _a_ = [0, cst_bytes_ml, 667, 9],
    _b_ = [0, cst_bytes_ml, 642, 20],
    cst_index_out_of_bounds = cst_index_out_of_bounds$3,
    cst_index_out_of_bounds$0 = cst_index_out_of_bounds$3,
    _c_ = [0, cst_bytes_ml, 765, 9],
    _d_ = [0, cst_bytes_ml, 754, 20],
    cst_index_out_of_bounds$1 = cst_index_out_of_bounds$3,
    cst_index_out_of_bounds$2 = cst_index_out_of_bounds$3,
    _e_ = [0, cst_bytes_ml, 819, 9],
    _f_ = [0, cst_bytes_ml, 808, 20];
   function dec_ret(n, u){
    var _l_ = caml_call1(Stdlib_Uchar[9], u);
    return caml_call2(Stdlib_Uchar[21], n, _l_);
   }
   function not_in_x80_to_xBF(b){return 2 !== (b >>> 6 | 0) ? 1 : 0;}
   function not_in_xA0_to_xBF(b){return 5 !== (b >>> 5 | 0) ? 1 : 0;}
   function not_in_x80_to_x9F(b){return 4 !== (b >>> 5 | 0) ? 1 : 0;}
   function not_in_x90_to_xBF(b){
    var _j_ = b < 144 ? 1 : 0, _k_ = _j_ || (191 < b ? 1 : 0);
    return _k_;
   }
   function not_in_x80_to_x8F(b){return 8 !== (b >>> 4 | 0) ? 1 : 0;}
   function utf_8_uchar_3(b0, b1, b2){
    return (b0 & 15) << 12 | (b1 & 63) << 6 | b2 & 63;
   }
   function utf_8_uchar_4(b0, b1, b2, b3){
    return (b0 & 7) << 18 | (b1 & 63) << 12 | (b2 & 63) << 6 | b3 & 63;
   }
   function get_utf_8_uchar(b, i){
    var b0 = caml_bytes_get(b, i), max = caml_ml_bytes_length(b) - 1 | 0;
    a:
    {
     if(224 <= b0){
      if(237 <= b0){
       if(245 <= b0) break a;
       switch(b0 - 237 | 0){
         case 0:
          var i$0 = i + 1 | 0;
          if(max < i$0) return caml_call1(dec_invalid, 1);
          var b1$4 = caml_bytes_unsafe_get(b, i$0);
          if(not_in_x80_to_x9F(b1$4)) return caml_call1(dec_invalid, 1);
          var i$1 = i$0 + 1 | 0;
          if(max < i$1) return caml_call1(dec_invalid, 2);
          var b2$3 = caml_bytes_unsafe_get(b, i$1);
          return not_in_x80_to_xBF(b2$3)
                  ? caml_call1(dec_invalid, 2)
                  : dec_ret(3, utf_8_uchar_3(b0, b1$4, b2$3));
         case 3:
          var i$4 = i + 1 | 0;
          if(max < i$4) return caml_call1(dec_invalid, 1);
          var b1$2 = caml_bytes_unsafe_get(b, i$4);
          if(not_in_x90_to_xBF(b1$2)) return caml_call1(dec_invalid, 1);
          var i$5 = i$4 + 1 | 0;
          if(max < i$5) return caml_call1(dec_invalid, 2);
          var b2$1 = caml_bytes_unsafe_get(b, i$5);
          if(not_in_x80_to_xBF(b2$1)) return caml_call1(dec_invalid, 2);
          var i$6 = i$5 + 1 | 0;
          if(max < i$6) return caml_call1(dec_invalid, 3);
          var b3$1 = caml_bytes_unsafe_get(b, i$6);
          return not_in_x80_to_xBF(b3$1)
                  ? caml_call1(dec_invalid, 3)
                  : dec_ret(4, utf_8_uchar_4(b0, b1$2, b2$1, b3$1));
         case 7:
          var i$10 = i + 1 | 0;
          if(max < i$10) return caml_call1(dec_invalid, 1);
          var b1$0 = caml_bytes_unsafe_get(b, i$10);
          if(not_in_x80_to_x8F(b1$0)) return caml_call1(dec_invalid, 1);
          var i$11 = i$10 + 1 | 0;
          if(max < i$11) return caml_call1(dec_invalid, 2);
          var b2 = caml_bytes_unsafe_get(b, i$11);
          if(not_in_x80_to_xBF(b2)) return caml_call1(dec_invalid, 2);
          var i$12 = i$11 + 1 | 0;
          if(max < i$12) return caml_call1(dec_invalid, 3);
          var b3 = caml_bytes_unsafe_get(b, i$12);
          return not_in_x80_to_xBF(b3)
                  ? caml_call1(dec_invalid, 3)
                  : dec_ret(4, utf_8_uchar_4(b0, b1$0, b2, b3));
         case 1:
         case 2: break;
         default:
          var i$7 = i + 1 | 0;
          if(max < i$7) return caml_call1(dec_invalid, 1);
          var b1$1 = caml_bytes_unsafe_get(b, i$7);
          if(not_in_x80_to_xBF(b1$1)) return caml_call1(dec_invalid, 1);
          var i$8 = i$7 + 1 | 0;
          if(max < i$8) return caml_call1(dec_invalid, 2);
          var b2$0 = caml_bytes_unsafe_get(b, i$8);
          if(not_in_x80_to_xBF(b2$0)) return caml_call1(dec_invalid, 2);
          var i$9 = i$8 + 1 | 0;
          if(max < i$9) return caml_call1(dec_invalid, 3);
          var b3$0 = caml_bytes_unsafe_get(b, i$9);
          return not_in_x80_to_xBF(b3$0)
                  ? caml_call1(dec_invalid, 3)
                  : dec_ret(4, utf_8_uchar_4(b0, b1$1, b2$0, b3$0));
       }
      }
      else if(225 > b0){
       var i$13 = i + 1 | 0;
       if(max < i$13) return caml_call1(dec_invalid, 1);
       var b1$5 = caml_bytes_unsafe_get(b, i$13);
       if(not_in_xA0_to_xBF(b1$5)) return caml_call1(dec_invalid, 1);
       var i$14 = i$13 + 1 | 0;
       if(max < i$14) return caml_call1(dec_invalid, 2);
       var b2$4 = caml_bytes_unsafe_get(b, i$14);
       return not_in_x80_to_xBF(b2$4)
               ? caml_call1(dec_invalid, 2)
               : dec_ret(3, utf_8_uchar_3(b0, b1$5, b2$4));
      }
      var i$2 = i + 1 | 0;
      if(max < i$2) return caml_call1(dec_invalid, 1);
      var b1$3 = caml_bytes_unsafe_get(b, i$2);
      if(not_in_x80_to_xBF(b1$3)) return caml_call1(dec_invalid, 1);
      var i$3 = i$2 + 1 | 0;
      if(max < i$3) return caml_call1(dec_invalid, 2);
      var b2$2 = caml_bytes_unsafe_get(b, i$3);
      return not_in_x80_to_xBF(b2$2)
              ? caml_call1(dec_invalid, 2)
              : dec_ret(3, utf_8_uchar_3(b0, b1$3, b2$2));
     }
     if(128 > b0) return dec_ret(1, b0);
     if(194 <= b0){
      var i$15 = i + 1 | 0;
      if(max < i$15) return caml_call1(dec_invalid, 1);
      var b1 = caml_bytes_unsafe_get(b, i$15);
      return not_in_x80_to_xBF(b1)
              ? caml_call1(dec_invalid, 1)
              : dec_ret(2, (b0 & 31) << 6 | b1 & 63);
     }
    }
    return caml_call1(dec_invalid, 1);
   }
   function set_utf_8_uchar(b, i, u){
    function set(_i_, _h_, _g_){caml_bytes_unsafe_set(_i_, _h_, _g_); return;}
    var
     max = caml_ml_bytes_length(b) - 1 | 0,
     u$0 = caml_call1(Stdlib_Uchar[10], u);
    if(0 > u$0)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
    if(127 >= u$0){caml_bytes_set(b, i, u$0); return 1;}
    if(2047 >= u$0){
     var last$1 = i + 1 | 0;
     return max < last$1
             ? 0
             : (caml_bytes_set
                (b, i, 192 | u$0 >>> 6 | 0),
               set(b, last$1, 128 | u$0 & 63),
               2);
    }
    if(65535 >= u$0){
     var last$0 = i + 2 | 0;
     return max < last$0
             ? 0
             : (caml_bytes_set
                (b, i, 224 | u$0 >>> 12 | 0),
               set(b, i + 1 | 0, 128 | (u$0 >>> 6 | 0) & 63),
               set(b, last$0, 128 | u$0 & 63),
               3);
    }
    if(1114111 < u$0)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
    var last = i + 3 | 0;
    return max < last
            ? 0
            : (caml_bytes_set
               (b, i, 240 | u$0 >>> 18 | 0),
              set(b, i + 1 | 0, 128 | (u$0 >>> 12 | 0) & 63),
              set(b, i + 2 | 0, 128 | (u$0 >>> 6 | 0) & 63),
              set(b, last, 128 | u$0 & 63),
              4);
   }
   function is_valid_utf_8(b){
    var max = caml_ml_bytes_length(b) - 1 | 0, i = 0;
    for(;;){
     if(max < i) return 1;
     var match = caml_bytes_unsafe_get(b, i);
     a:
     {
      if(224 <= match){
       if(237 <= match){
        if(245 <= match) break a;
        switch(match - 237 | 0){
          case 0:
           var last = i + 2 | 0;
           if
            (max >= last
             &&
              !
              not_in_x80_to_x9F(caml_bytes_unsafe_get(b, i + 1 | 0))
              && ! not_in_x80_to_xBF(caml_bytes_unsafe_get(b, last))){var i$0 = last + 1 | 0; i = i$0; continue;}
           return 0;
          case 3:
           var last$1 = i + 3 | 0;
           if
            (max >= last$1
             &&
              !
              not_in_x90_to_xBF(caml_bytes_unsafe_get(b, i + 1 | 0))
              &&
               !
               not_in_x80_to_xBF(caml_bytes_unsafe_get(b, i + 2 | 0))
               && ! not_in_x80_to_xBF(caml_bytes_unsafe_get(b, last$1))){var i$2 = last$1 + 1 | 0; i = i$2; continue;}
           return 0;
          case 7:
           var last$3 = i + 3 | 0;
           if
            (max >= last$3
             &&
              !
              not_in_x80_to_x8F(caml_bytes_unsafe_get(b, i + 1 | 0))
              &&
               !
               not_in_x80_to_xBF(caml_bytes_unsafe_get(b, i + 2 | 0))
               && ! not_in_x80_to_xBF(caml_bytes_unsafe_get(b, last$3))){var i$4 = last$3 + 1 | 0; i = i$4; continue;}
           return 0;
          case 1:
          case 2: break;
          default:
           var last$2 = i + 3 | 0;
           if
            (max >= last$2
             &&
              !
              not_in_x80_to_xBF(caml_bytes_unsafe_get(b, i + 1 | 0))
              &&
               !
               not_in_x80_to_xBF(caml_bytes_unsafe_get(b, i + 2 | 0))
               && ! not_in_x80_to_xBF(caml_bytes_unsafe_get(b, last$2))){var i$3 = last$2 + 1 | 0; i = i$3; continue;}
           return 0;
        }
       }
       else if(225 > match){
        var last$4 = i + 2 | 0;
        if
         (max >= last$4
          &&
           !
           not_in_xA0_to_xBF(caml_bytes_unsafe_get(b, i + 1 | 0))
           && ! not_in_x80_to_xBF(caml_bytes_unsafe_get(b, last$4))){var i$5 = last$4 + 1 | 0; i = i$5; continue;}
        return 0;
       }
       var last$0 = i + 2 | 0;
       if
        (max >= last$0
         &&
          !
          not_in_x80_to_xBF(caml_bytes_unsafe_get(b, i + 1 | 0))
          && ! not_in_x80_to_xBF(caml_bytes_unsafe_get(b, last$0))){var i$1 = last$0 + 1 | 0; i = i$1; continue;}
       return 0;
      }
      if(128 > match){var i$7 = i + 1 | 0; i = i$7; continue;}
      if(194 <= match){
       var last$5 = i + 1 | 0;
       if
        (max >= last$5
         && ! not_in_x80_to_xBF(caml_bytes_unsafe_get(b, last$5))){var i$6 = last$5 + 1 | 0; i = i$6; continue;}
       return 0;
      }
     }
     return 0;
    }
   }
   function get_utf_16be_uchar(b, i){
    var max = caml_ml_bytes_length(b) - 1 | 0;
    if(0 <= i && max >= i){
     if(i === max) return caml_call1(dec_invalid, 1);
     var hi = unsafe_get_uint16_be(b, i);
     if(55296 <= hi && 57343 >= hi){
      if(56319 < hi) return caml_call1(dec_invalid, 2);
      var last = i + 3 | 0;
      if(max < last) return caml_call1(dec_invalid, (max - i | 0) + 1 | 0);
      var lo = unsafe_get_uint16_be(b, i + 2 | 0);
      if(56320 <= lo && 57343 >= lo){
       var u = ((hi & 1023) << 10 | lo & 1023) + 65536 | 0;
       return dec_ret(4, u);
      }
      return caml_call1(dec_invalid, 2);
     }
     return dec_ret(2, hi);
    }
    return caml_call1(Stdlib[1], cst_index_out_of_bounds);
   }
   function set_utf_16be_uchar(b, i, u){
    var max = caml_ml_bytes_length(b) - 1 | 0;
    if(0 <= i && max >= i){
     var u$0 = caml_call1(Stdlib_Uchar[10], u);
     if(0 > u$0)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
     if(65535 >= u$0){
      var last$0 = i + 1 | 0;
      return max < last$0 ? 0 : (unsafe_set_uint16_be(b, i, u$0), 2);
     }
     if(1114111 < u$0)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
     var last = i + 3 | 0;
     if(max < last) return 0;
     var
      u$1 = u$0 - 65536 | 0,
      hi = 55296 | u$1 >>> 10 | 0,
      lo = 56320 | u$1 & 1023;
     unsafe_set_uint16_be(b, i, hi);
     unsafe_set_uint16_be(b, i + 2 | 0, lo);
     return 4;
    }
    return caml_call1(Stdlib[1], cst_index_out_of_bounds$0);
   }
   function is_valid_utf_16be(b){
    var max = caml_ml_bytes_length(b) - 1 | 0, i = 0;
    for(;;){
     if(max < i) return 1;
     if(i === max) return 0;
     var u = unsafe_get_uint16_be(b, i);
     if(55296 <= u && 57343 >= u){
      if(56319 < u) return 0;
      var last = i + 3 | 0;
      if(max < last) return 0;
      var u$0 = unsafe_get_uint16_be(b, i + 2 | 0);
      if(56320 <= u$0 && 57343 >= u$0){
       var i$1 = i + 4 | 0;
       i = i$1;
       continue;
      }
      return 0;
     }
     var i$0 = i + 2 | 0;
     i = i$0;
    }
   }
   function get_utf_16le_uchar(b, i){
    var max = caml_ml_bytes_length(b) - 1 | 0;
    if(0 <= i && max >= i){
     if(i === max) return caml_call1(dec_invalid, 1);
     var hi = unsafe_get_uint16_le(b, i);
     if(55296 <= hi && 57343 >= hi){
      if(56319 < hi) return caml_call1(dec_invalid, 2);
      var last = i + 3 | 0;
      if(max < last) return caml_call1(dec_invalid, (max - i | 0) + 1 | 0);
      var lo = unsafe_get_uint16_le(b, i + 2 | 0);
      if(56320 <= lo && 57343 >= lo){
       var u = ((hi & 1023) << 10 | lo & 1023) + 65536 | 0;
       return dec_ret(4, u);
      }
      return caml_call1(dec_invalid, 2);
     }
     return dec_ret(2, hi);
    }
    return caml_call1(Stdlib[1], cst_index_out_of_bounds$1);
   }
   function set_utf_16le_uchar(b, i, u){
    var max = caml_ml_bytes_length(b) - 1 | 0;
    if(0 <= i && max >= i){
     var u$0 = caml_call1(Stdlib_Uchar[10], u);
     if(0 > u$0)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _f_], 1);
     if(65535 >= u$0){
      var last$0 = i + 1 | 0;
      return max < last$0 ? 0 : (unsafe_set_uint16_le(b, i, u$0), 2);
     }
     if(1114111 < u$0)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
     var last = i + 3 | 0;
     if(max < last) return 0;
     var
      u$1 = u$0 - 65536 | 0,
      hi = 55296 | u$1 >>> 10 | 0,
      lo = 56320 | u$1 & 1023;
     unsafe_set_uint16_le(b, i, hi);
     unsafe_set_uint16_le(b, i + 2 | 0, lo);
     return 4;
    }
    return caml_call1(Stdlib[1], cst_index_out_of_bounds$2);
   }
   function is_valid_utf_16le(b){
    var max = caml_ml_bytes_length(b) - 1 | 0, i = 0;
    for(;;){
     if(max < i) return 1;
     if(i === max) return 0;
     var u = unsafe_get_uint16_le(b, i);
     if(55296 <= u && 57343 >= u){
      if(56319 < u) return 0;
      var last = i + 3 | 0;
      if(max < last) return 0;
      var u$0 = unsafe_get_uint16_le(b, i + 2 | 0);
      if(56320 <= u$0 && 57343 >= u$0){
       var i$1 = i + 4 | 0;
       i = i$1;
       continue;
      }
      return 0;
     }
     var i$0 = i + 2 | 0;
     i = i$0;
    }
   }
   var
    Stdlib_Bytes =
      [0,
       make,
       init,
       empty,
       copy,
       of_string,
       to_string,
       sub,
       sub_string,
       extend,
       fill,
       blit,
       blit_string,
       concat,
       cat,
       iter,
       iteri,
       map,
       mapi,
       fold_left,
       fold_right,
       for_all,
       exists,
       trim,
       escaped,
       index,
       index_opt,
       rindex,
       rindex_opt,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       contains,
       contains_from,
       rcontains_from,
       uppercase,
       lowercase,
       capitalize,
       uncapitalize,
       uppercase_ascii,
       lowercase_ascii,
       capitalize_ascii,
       uncapitalize_ascii,
       compare,
       runtime.caml_bytes_equal,
       starts_with,
       ends_with,
       caml_string_of_bytes,
       caml_bytes_of_string,
       split_on_char,
       to_seq,
       to_seqi,
       of_seq,
       get_utf_8_uchar,
       set_utf_8_uchar,
       is_valid_utf_8,
       get_utf_16be_uchar,
       set_utf_16be_uchar,
       is_valid_utf_16be,
       get_utf_16le_uchar,
       set_utf_16le_uchar,
       is_valid_utf_16le,
       caml_bytes_get,
       get_int8,
       caml_bytes_get16,
       get_uint16_be,
       get_uint16_le,
       get_int16_ne,
       get_int16_be,
       get_int16_le,
       caml_bytes_get32,
       get_int32_be,
       get_int32_le,
       caml_bytes_get64,
       get_int64_be,
       get_int64_le,
       set_uint8,
       caml_bytes_set,
       set_uint16_ne,
       set_int16_be,
       set_int16_le,
       caml_bytes_set16,
       set_int16_be,
       set_int16_le,
       caml_bytes_set32,
       set_int32_be,
       set_int32_le,
       caml_bytes_set64,
       set_int64_be,
       set_int64_le];
   runtime.caml_register_global(30, Stdlib_Bytes, "Stdlib__Bytes");
   return;
  }
  (globalThis));

//# 4969 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$0 = "",
    caml_blit_string = runtime.caml_blit_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_equal = runtime.caml_string_equal,
    caml_string_unsafe_get = runtime.caml_string_unsafe_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$0,
    empty = cst$0,
    Stdlib = global_data.Stdlib,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    bts = Stdlib_Bytes[48],
    bos = Stdlib_Bytes[49];
   function make(n, c){
    return caml_call1(bts, caml_call2(Stdlib_Bytes[1], n, c));
   }
   function init(n, f){
    return caml_call1(bts, caml_call2(Stdlib_Bytes[2], n, f));
   }
   function copy(s){
    var _ac_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call1(Stdlib_Bytes[4], _ac_));
   }
   var of_bytes = Stdlib_Bytes[6], to_bytes = Stdlib_Bytes[5];
   function sub(s, ofs, len){
    var _ab_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call3(Stdlib_Bytes[7], _ab_, ofs, len));
   }
   var
    fill = Stdlib_Bytes[10],
    blit = Stdlib_Bytes[12],
    cst_String_concat = "String.concat";
   function concat(sep, l){
    if(! l) return cst;
    var seplen = caml_ml_string_length(sep);
    a:
    {
     b:
     {
      var acc = 0, param = l, pos$1 = 0;
      for(;;){
       if(! param) break;
       var hd = param[1];
       if(! param[2]) break b;
       var
        tl = param[2],
        x = (caml_ml_string_length(hd) + seplen | 0) + acc | 0,
        acc$0 = acc <= x ? x : caml_call1(Stdlib[1], cst_String_concat);
       acc = acc$0;
       param = tl;
      }
      var _aa_ = acc;
      break a;
     }
     var _aa_ = caml_ml_string_length(hd) + acc | 0;
    }
    var dst = runtime.caml_create_bytes(_aa_), pos = pos$1, param$0 = l;
    for(;;){
     if(param$0){
      var hd$0 = param$0[1];
      if(param$0[2]){
       var tl$0 = param$0[2];
       caml_blit_string(hd$0, 0, dst, pos, caml_ml_string_length(hd$0));
       caml_blit_string
        (sep, 0, dst, pos + caml_ml_string_length(hd$0) | 0, seplen);
       var pos$0 = (pos + caml_ml_string_length(hd$0) | 0) + seplen | 0;
       pos = pos$0;
       param$0 = tl$0;
       continue;
      }
      caml_blit_string(hd$0, 0, dst, pos, caml_ml_string_length(hd$0));
     }
     return caml_call1(bts, dst);
    }
   }
   var
    cat = Stdlib[28],
    cst_String_index_from_Bytes_in = "String.index_from / Bytes.index_from",
    cst_String_index_from_opt_Byte =
      "String.index_from_opt / Bytes.index_from_opt",
    cst_String_rindex_from_Bytes_r = "String.rindex_from / Bytes.rindex_from",
    cst_String_rindex_from_opt_Byt =
      "String.rindex_from_opt / Bytes.rindex_from_opt",
    cst_String_contains_from_Bytes =
      "String.contains_from / Bytes.contains_from",
    cst_String_rcontains_from_Byte =
      "String.rcontains_from / Bytes.rcontains_from";
   function iter(f, s){
    var ___ = caml_ml_string_length(s) - 1 | 0, _Z_ = 0;
    if(___ >= 0){
     var i = _Z_;
     for(;;){
      caml_call1(f, caml_string_unsafe_get(s, i));
      var _$_ = i + 1 | 0;
      if(___ === i) break;
      i = _$_;
     }
    }
    return 0;
   }
   function iteri(f, s){
    var _X_ = caml_ml_string_length(s) - 1 | 0, _W_ = 0;
    if(_X_ >= 0){
     var i = _W_;
     for(;;){
      caml_call2(f, i, caml_string_unsafe_get(s, i));
      var _Y_ = i + 1 | 0;
      if(_X_ === i) break;
      i = _Y_;
     }
    }
    return 0;
   }
   function map(f, s){
    var _V_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call2(Stdlib_Bytes[17], f, _V_));
   }
   function mapi(f, s){
    var _U_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call2(Stdlib_Bytes[18], f, _U_));
   }
   function fold_right(f, x, a){
    var _T_ = caml_call1(bos, x);
    return caml_call3(Stdlib_Bytes[20], f, _T_, a);
   }
   function fold_left(f, a, x){
    var _S_ = caml_call1(bos, x);
    return caml_call3(Stdlib_Bytes[19], f, a, _S_);
   }
   function exists(f, s){
    var _R_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[22], f, _R_);
   }
   function for_all(f, s){
    var _Q_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[21], f, _Q_);
   }
   function is_space(param){
    var _P_ = param - 9 | 0;
    a:
    {
     if(4 < _P_ >>> 0){if(23 !== _P_) break a;} else if(2 === _P_) break a;
     return 1;
    }
    return 0;
   }
   function trim(s){
    if(s == cst$0) return s;
    if
     (!
      is_space(caml_string_unsafe_get(s, 0))
      &&
       !
       is_space(caml_string_unsafe_get(s, caml_ml_string_length(s) - 1 | 0)))
     return s;
    var _O_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call1(Stdlib_Bytes[23], _O_));
   }
   function escaped(s){
    var n = caml_ml_string_length(s), i = 0;
    for(;;){
     if(n <= i) return s;
     var _M_ = caml_string_unsafe_get(s, i) - 32 | 0;
     a:
     {
      if(59 < _M_ >>> 0){
       if(33 < _M_ - 61 >>> 0) break a;
      }
      else if(2 === _M_) break a;
      var i$0 = i + 1 | 0;
      i = i$0;
      continue;
     }
     var _N_ = caml_call1(bos, s);
     return caml_call1(bts, caml_call1(Stdlib_Bytes[24], _N_));
    }
   }
   function index_rec(s, lim, i, c){
    var i$0 = i;
    for(;;){
     if(lim <= i$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     if(caml_string_unsafe_get(s, i$0) === c) return i$0;
     var i$1 = i$0 + 1 | 0;
     i$0 = i$1;
    }
   }
   function index(s, c){return index_rec(s, caml_ml_string_length(s), 0, c);}
   function index_rec_opt(s, lim, i, c){
    var i$0 = i;
    for(;;){
     if(lim <= i$0) return 0;
     if(caml_string_unsafe_get(s, i$0) === c) return [0, i$0];
     var i$1 = i$0 + 1 | 0;
     i$0 = i$1;
    }
   }
   function index_opt(s, c){
    return index_rec_opt(s, caml_ml_string_length(s), 0, c);
   }
   function index_from(s, i, c){
    var l = caml_ml_string_length(s);
    if(0 <= i && l >= i) return index_rec(s, l, i, c);
    return caml_call1(Stdlib[1], cst_String_index_from_Bytes_in);
   }
   function index_from_opt(s, i, c){
    var l = caml_ml_string_length(s);
    if(0 <= i && l >= i) return index_rec_opt(s, l, i, c);
    return caml_call1(Stdlib[1], cst_String_index_from_opt_Byte);
   }
   function rindex_rec(s, i, c){
    var i$0 = i;
    for(;;){
     if(0 > i$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     if(caml_string_unsafe_get(s, i$0) === c) return i$0;
     var i$1 = i$0 - 1 | 0;
     i$0 = i$1;
    }
   }
   function rindex(s, c){
    return rindex_rec(s, caml_ml_string_length(s) - 1 | 0, c);
   }
   function rindex_from(s, i, c){
    if(-1 <= i && caml_ml_string_length(s) > i) return rindex_rec(s, i, c);
    return caml_call1(Stdlib[1], cst_String_rindex_from_Bytes_r);
   }
   function rindex_rec_opt(s, i, c){
    var i$0 = i;
    for(;;){
     if(0 > i$0) return 0;
     if(caml_string_unsafe_get(s, i$0) === c) return [0, i$0];
     var i$1 = i$0 - 1 | 0;
     i$0 = i$1;
    }
   }
   function rindex_opt(s, c){
    return rindex_rec_opt(s, caml_ml_string_length(s) - 1 | 0, c);
   }
   function rindex_from_opt(s, i, c){
    if(-1 <= i && caml_ml_string_length(s) > i)
     return rindex_rec_opt(s, i, c);
    return caml_call1(Stdlib[1], cst_String_rindex_from_opt_Byt);
   }
   function contains_from(s, i, c){
    var l = caml_ml_string_length(s);
    if(0 <= i && l >= i)
     try{index_rec(s, l, i, c); var _K_ = 1; return _K_;}
     catch(_L_){
      var _J_ = caml_wrap_exception(_L_);
      if(_J_ === Stdlib[8]) return 0;
      throw caml_maybe_attach_backtrace(_J_, 0);
     }
    return caml_call1(Stdlib[1], cst_String_contains_from_Bytes);
   }
   function contains(s, c){return contains_from(s, 0, c);}
   function rcontains_from(s, i, c){
    if(0 <= i && caml_ml_string_length(s) > i)
     try{rindex_rec(s, i, c); var _H_ = 1; return _H_;}
     catch(_I_){
      var _G_ = caml_wrap_exception(_I_);
      if(_G_ === Stdlib[8]) return 0;
      throw caml_maybe_attach_backtrace(_G_, 0);
     }
    return caml_call1(Stdlib[1], cst_String_rcontains_from_Byte);
   }
   function uppercase_ascii(s){
    var _F_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call1(Stdlib_Bytes[40], _F_));
   }
   function lowercase_ascii(s){
    var _E_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call1(Stdlib_Bytes[41], _E_));
   }
   function capitalize_ascii(s){
    var _D_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call1(Stdlib_Bytes[42], _D_));
   }
   function uncapitalize_ascii(s){
    var _C_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call1(Stdlib_Bytes[43], _C_));
   }
   function starts_with(prefix, s){
    var
     len_s = caml_ml_string_length(s),
     len_pre = caml_ml_string_length(prefix),
     _B_ = len_pre <= len_s ? 1 : 0;
    if(! _B_) return _B_;
    var i = 0;
    for(;;){
     if(i === len_pre) return 1;
     if(caml_string_unsafe_get(s, i) !== caml_string_unsafe_get(prefix, i))
      return 0;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function ends_with(suffix, s){
    var
     len_s = caml_ml_string_length(s),
     len_suf = caml_ml_string_length(suffix),
     diff = len_s - len_suf | 0,
     _A_ = 0 <= diff ? 1 : 0;
    if(! _A_) return _A_;
    var i = 0;
    for(;;){
     if(i === len_suf) return 1;
     if
      (caml_string_unsafe_get(s, diff + i | 0)
       !== caml_string_unsafe_get(suffix, i))
      return 0;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function split_on_char(sep, s){
    var
     r = [0, 0],
     j = [0, caml_ml_string_length(s)],
     _w_ = caml_ml_string_length(s) - 1 | 0;
    if(_w_ >= 0){
     var i = _w_;
     for(;;){
      if(caml_string_unsafe_get(s, i) === sep){
       var _y_ = r[1];
       r[1] = [0, sub(s, i + 1 | 0, (j[1] - i | 0) - 1 | 0), _y_];
       j[1] = i;
      }
      var _z_ = i - 1 | 0;
      if(0 === i) break;
      i = _z_;
     }
    }
    var _x_ = r[1];
    return [0, sub(s, 0, j[1]), _x_];
   }
   function uppercase(s){
    var _v_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call1(Stdlib_Bytes[36], _v_));
   }
   function lowercase(s){
    var _u_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call1(Stdlib_Bytes[37], _u_));
   }
   function capitalize(s){
    var _t_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call1(Stdlib_Bytes[38], _t_));
   }
   function uncapitalize(s){
    var _s_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call1(Stdlib_Bytes[39], _s_));
   }
   var compare = runtime.caml_string_compare;
   function to_seq(s){
    var _r_ = caml_call1(bos, s);
    return caml_call1(Stdlib_Bytes[51], _r_);
   }
   function to_seqi(s){
    var _q_ = caml_call1(bos, s);
    return caml_call1(Stdlib_Bytes[52], _q_);
   }
   function of_seq(g){
    return caml_call1(bts, caml_call1(Stdlib_Bytes[53], g));
   }
   function get_utf_8_uchar(s, i){
    var _p_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[54], _p_, i);
   }
   function is_valid_utf_8(s){
    var _o_ = caml_call1(bos, s);
    return caml_call1(Stdlib_Bytes[56], _o_);
   }
   function get_utf_16be_uchar(s, i){
    var _n_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[57], _n_, i);
   }
   function is_valid_utf_16be(s){
    var _m_ = caml_call1(bos, s);
    return caml_call1(Stdlib_Bytes[59], _m_);
   }
   function get_utf_16le_uchar(s, i){
    var _l_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[60], _l_, i);
   }
   function is_valid_utf_16le(s){
    var _k_ = caml_call1(bos, s);
    return caml_call1(Stdlib_Bytes[62], _k_);
   }
   function get_int8(s, i){
    var _j_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[64], _j_, i);
   }
   function get_uint16_le(s, i){
    var _i_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[67], _i_, i);
   }
   function get_uint16_be(s, i){
    var _h_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[66], _h_, i);
   }
   function get_int16_ne(s, i){
    var _g_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[68], _g_, i);
   }
   function get_int16_le(s, i){
    var _f_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[70], _f_, i);
   }
   function get_int16_be(s, i){
    var _e_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[69], _e_, i);
   }
   function get_int32_le(s, i){
    var _d_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[73], _d_, i);
   }
   function get_int32_be(s, i){
    var _c_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[72], _c_, i);
   }
   function get_int64_le(s, i){
    var _b_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[76], _b_, i);
   }
   function get_int64_be(s, i){
    var _a_ = caml_call1(bos, s);
    return caml_call2(Stdlib_Bytes[75], _a_, i);
   }
   var
    Stdlib_String =
      [0,
       make,
       init,
       empty,
       of_bytes,
       to_bytes,
       concat,
       cat,
       caml_string_equal,
       compare,
       starts_with,
       ends_with,
       contains_from,
       rcontains_from,
       contains,
       sub,
       split_on_char,
       map,
       mapi,
       fold_left,
       fold_right,
       for_all,
       exists,
       trim,
       escaped,
       uppercase_ascii,
       lowercase_ascii,
       capitalize_ascii,
       uncapitalize_ascii,
       iter,
       iteri,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       index,
       index_opt,
       rindex,
       rindex_opt,
       to_seq,
       to_seqi,
       of_seq,
       get_utf_8_uchar,
       is_valid_utf_8,
       get_utf_16be_uchar,
       is_valid_utf_16be,
       get_utf_16le_uchar,
       is_valid_utf_16le,
       blit,
       copy,
       fill,
       uppercase,
       lowercase,
       capitalize,
       uncapitalize,
       runtime.caml_string_get,
       get_int8,
       runtime.caml_string_get16,
       get_uint16_be,
       get_uint16_le,
       get_int16_ne,
       get_int16_be,
       get_int16_le,
       runtime.caml_string_get32,
       get_int32_be,
       get_int32_le,
       runtime.caml_string_get64,
       get_int64_be,
       get_int64_le];
   runtime.caml_register_global(12, Stdlib_String, "Stdlib__String");
   return;
  }
  (globalThis));

//# 5572 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_array_sub = runtime.caml_array_sub,
    caml_check_bound = runtime.caml_check_bound,
    caml_make_vect = runtime.caml_make_vect,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Seq = global_data.Stdlib__Seq,
    Assert_failure = global_data.Assert_failure,
    Stdlib = global_data.Stdlib,
    make_float = runtime.caml_make_float_vect,
    Floatarray = [0],
    cst_Array_init = "Array.init",
    cst_Array_sub = "Array.sub",
    cst_Array_fill = "Array.fill",
    cst_Array_blit = "Array.blit",
    cst_Array_iter2_arrays_must_ha =
      "Array.iter2: arrays must have the same length",
    cst_Array_map2_arrays_must_hav =
      "Array.map2: arrays must have the same length",
    cst_Array_for_all2 = "Array.for_all2",
    cst_Array_exists2 = "Array.exists2",
    cst_Array_combine = "Array.combine";
   function init(l, f){
    if(0 === l) return [0];
    if(0 > l) return caml_call1(Stdlib[1], cst_Array_init);
    var res = caml_make_vect(l, caml_call1(f, 0)), _aq_ = l - 1 | 0, _ap_ = 1;
    if(_aq_ >= 1){
     var i = _ap_;
     for(;;){
      res[1 + i] = caml_call1(f, i);
      var _ar_ = i + 1 | 0;
      if(_aq_ === i) break;
      i = _ar_;
     }
    }
    return res;
   }
   function make_matrix(sx, sy, init){
    var res = caml_make_vect(sx, [0]), _an_ = sx - 1 | 0, _am_ = 0;
    if(_an_ >= 0){
     var x = _am_;
     for(;;){
      res[1 + x] = caml_make_vect(sy, init);
      var _ao_ = x + 1 | 0;
      if(_an_ === x) break;
      x = _ao_;
     }
    }
    return res;
   }
   function copy(a){
    var l = a.length - 1;
    return 0 === l ? [0] : caml_array_sub(a, 0, l);
   }
   function append(a1, a2){
    var l1 = a1.length - 1;
    return 0 === l1
            ? copy(a2)
            : 0
              === a2.length - 1
              ? caml_array_sub(a1, 0, l1)
              : runtime.caml_array_append(a1, a2);
   }
   function sub(a, ofs, len){
    if(0 <= ofs && 0 <= len && (a.length - 1 - len | 0) >= ofs)
     return caml_array_sub(a, ofs, len);
    return caml_call1(Stdlib[1], cst_Array_sub);
   }
   function fill(a, ofs, len, v){
    if(0 <= ofs && 0 <= len && (a.length - 1 - len | 0) >= ofs)
     return runtime.caml_array_fill(a, ofs, len, v);
    return caml_call1(Stdlib[1], cst_Array_fill);
   }
   function blit(a1, ofs1, a2, ofs2, len){
    if
     (0 <= len
      &&
       0 <= ofs1
       &&
        (a1.length - 1 - len | 0) >= ofs1
        && 0 <= ofs2 && (a2.length - 1 - len | 0) >= ofs2)
     return runtime.caml_array_blit(a1, ofs1, a2, ofs2, len);
    return caml_call1(Stdlib[1], cst_Array_blit);
   }
   function iter(f, a){
    var _ak_ = a.length - 2 | 0, _aj_ = 0;
    if(_ak_ >= 0){
     var i = _aj_;
     for(;;){
      caml_call1(f, a[1 + i]);
      var _al_ = i + 1 | 0;
      if(_ak_ === i) break;
      i = _al_;
     }
    }
    return 0;
   }
   function iter2(f, a, b){
    if(a.length - 1 !== b.length - 1)
     return caml_call1(Stdlib[1], cst_Array_iter2_arrays_must_ha);
    var _ah_ = a.length - 2 | 0, _ag_ = 0;
    if(_ah_ >= 0){
     var i = _ag_;
     for(;;){
      caml_call2(f, a[1 + i], b[1 + i]);
      var _ai_ = i + 1 | 0;
      if(_ah_ === i) break;
      i = _ai_;
     }
    }
    return 0;
   }
   function map(f, a){
    var l = a.length - 1;
    if(0 === l) return [0];
    var
     r = caml_make_vect(l, caml_call1(f, a[1])),
     _ae_ = l - 1 | 0,
     _ad_ = 1;
    if(_ae_ >= 1){
     var i = _ad_;
     for(;;){
      r[1 + i] = caml_call1(f, a[1 + i]);
      var _af_ = i + 1 | 0;
      if(_ae_ === i) break;
      i = _af_;
     }
    }
    return r;
   }
   function map2(f, a, b){
    var la = a.length - 1, lb = b.length - 1;
    if(la !== lb)
     return caml_call1(Stdlib[1], cst_Array_map2_arrays_must_hav);
    if(0 === la) return [0];
    var
     r = caml_make_vect(la, caml_call2(f, a[1], b[1])),
     _ab_ = la - 1 | 0,
     _aa_ = 1;
    if(_ab_ >= 1){
     var i = _aa_;
     for(;;){
      r[1 + i] = caml_call2(f, a[1 + i], b[1 + i]);
      var _ac_ = i + 1 | 0;
      if(_ab_ === i) break;
      i = _ac_;
     }
    }
    return r;
   }
   function iteri(f, a){
    var ___ = a.length - 2 | 0, _Z_ = 0;
    if(___ >= 0){
     var i = _Z_;
     for(;;){
      caml_call2(f, i, a[1 + i]);
      var _$_ = i + 1 | 0;
      if(___ === i) break;
      i = _$_;
     }
    }
    return 0;
   }
   function mapi(f, a){
    var l = a.length - 1;
    if(0 === l) return [0];
    var
     r = caml_make_vect(l, caml_call2(f, 0, a[1])),
     _X_ = l - 1 | 0,
     _W_ = 1;
    if(_X_ >= 1){
     var i = _W_;
     for(;;){
      r[1 + i] = caml_call2(f, i, a[1 + i]);
      var _Y_ = i + 1 | 0;
      if(_X_ === i) break;
      i = _Y_;
     }
    }
    return r;
   }
   function to_list(a){
    var i$1 = a.length - 2 | 0, i = i$1, res = 0;
    for(;;){
     if(0 > i) return res;
     var res$0 = [0, a[1 + i], res], i$0 = i - 1 | 0;
     i = i$0;
     res = res$0;
    }
   }
   function list_length(accu, param){
    var accu$0 = accu, param$0 = param;
    for(;;){
     if(! param$0) return accu$0;
     var t = param$0[2], accu$1 = accu$0 + 1 | 0;
     accu$0 = accu$1;
     param$0 = t;
    }
   }
   function of_list(l){
    if(! l) return [0];
    var
     tl = l[2],
     hd = l[1],
     a = caml_make_vect(list_length(0, l), hd),
     i = 1,
     param = tl;
    for(;;){
     if(! param) return a;
     var tl$0 = param[2], hd$0 = param[1];
     a[1 + i] = hd$0;
     var i$0 = i + 1 | 0;
     i = i$0;
     param = tl$0;
    }
   }
   function fold_left(f, x, a){
    var r = [0, x], _U_ = a.length - 2 | 0, _T_ = 0;
    if(_U_ >= 0){
     var i = _T_;
     for(;;){
      r[1] = caml_call2(f, r[1], a[1 + i]);
      var _V_ = i + 1 | 0;
      if(_U_ === i) break;
      i = _V_;
     }
    }
    return r[1];
   }
   function fold_left_map(f, acc, input_array){
    var len = input_array.length - 1;
    if(0 === len) return [0, acc, [0]];
    var
     match = caml_call2(f, acc, input_array[1]),
     elt = match[2],
     acc$0 = match[1],
     output_array = caml_make_vect(len, elt),
     acc$1 = [0, acc$0],
     _R_ = len - 1 | 0,
     _Q_ = 1;
    if(_R_ >= 1){
     var i = _Q_;
     for(;;){
      var
       match$0 = caml_call2(f, acc$1[1], input_array[1 + i]),
       elt$0 = match$0[2],
       acc$2 = match$0[1];
      acc$1[1] = acc$2;
      output_array[1 + i] = elt$0;
      var _S_ = i + 1 | 0;
      if(_R_ === i) break;
      i = _S_;
     }
    }
    return [0, acc$1[1], output_array];
   }
   function fold_right(f, a, x){
    var r = [0, x], _O_ = a.length - 2 | 0;
    if(_O_ >= 0){
     var i = _O_;
     for(;;){
      r[1] = caml_call2(f, a[1 + i], r[1]);
      var _P_ = i - 1 | 0;
      if(0 === i) break;
      i = _P_;
     }
    }
    return r[1];
   }
   function exists(p, a){
    var n = a.length - 1, i = 0;
    for(;;){
     if(i === n) return 0;
     if(caml_call1(p, a[1 + i])) return 1;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function for_all(p, a){
    var n = a.length - 1, i = 0;
    for(;;){
     if(i === n) return 1;
     if(! caml_call1(p, a[1 + i])) return 0;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function for_all2(p, l1, l2){
    var n1 = l1.length - 1, n2 = l2.length - 1;
    if(n1 !== n2) return caml_call1(Stdlib[1], cst_Array_for_all2);
    var i = 0;
    for(;;){
     if(i === n1) return 1;
     if(! caml_call2(p, l1[1 + i], l2[1 + i])) return 0;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function exists2(p, l1, l2){
    var n1 = l1.length - 1, n2 = l2.length - 1;
    if(n1 !== n2) return caml_call1(Stdlib[1], cst_Array_exists2);
    var i = 0;
    for(;;){
     if(i === n1) return 0;
     if(caml_call2(p, l1[1 + i], l2[1 + i])) return 1;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function mem(x, a){
    var n = a.length - 1, i = 0;
    for(;;){
     if(i === n) return 0;
     if(0 === runtime.caml_compare(a[1 + i], x)) return 1;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function memq(x, a){
    var n = a.length - 1, i = 0;
    for(;;){
     if(i === n) return 0;
     if(x === a[1 + i]) return 1;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function find_opt(p, a){
    var n = a.length - 1, i = 0;
    for(;;){
     if(i === n) return 0;
     var x = a[1 + i];
     if(caml_call1(p, x)) return [0, x];
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function find_map(f, a){
    var n = a.length - 1, i = 0;
    for(;;){
     if(i === n) return 0;
     var r = caml_call1(f, a[1 + i]);
     if(r) return r;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function split(x){
    if(runtime.caml_equal(x, [0])) return [0, [0], [0]];
    var
     match = x[1],
     b0 = match[2],
     a0 = match[1],
     n = x.length - 1,
     a = caml_make_vect(n, a0),
     b = caml_make_vect(n, b0),
     _M_ = n - 1 | 0,
     _L_ = 1;
    if(_M_ >= 1){
     var i = _L_;
     for(;;){
      var match$0 = x[1 + i], bi = match$0[2], ai = match$0[1];
      a[1 + i] = ai;
      b[1 + i] = bi;
      var _N_ = i + 1 | 0;
      if(_M_ === i) break;
      i = _N_;
     }
    }
    return [0, a, b];
   }
   function combine(a, b){
    var na = a.length - 1, nb = b.length - 1;
    if(na !== nb) caml_call1(Stdlib[1], cst_Array_combine);
    if(0 === na) return [0];
    var x = caml_make_vect(na, [0, a[1], b[1]]), _J_ = na - 1 | 0, _I_ = 1;
    if(_J_ >= 1){
     var i = _I_;
     for(;;){
      x[1 + i] = [0, a[1 + i], b[1 + i]];
      var _K_ = i + 1 | 0;
      if(_J_ === i) break;
      i = _K_;
     }
    }
    return x;
   }
   var
    Bottom = [248, "Stdlib.Array.Bottom", runtime.caml_fresh_oo_id(0)],
    _a_ = [0, "array.ml", 322, 4];
   function sort(cmp, a){
    function maxson(l, i){
     var i31 = ((i + i | 0) + i | 0) + 1 | 0, x = [0, i31];
     if((i31 + 2 | 0) < l){
      var _B_ = i31 + 1 | 0, _C_ = caml_check_bound(a, _B_)[1 + _B_];
      if(caml_call2(cmp, caml_check_bound(a, i31)[1 + i31], _C_) < 0)
       x[1] = i31 + 1 | 0;
      var
       _D_ = i31 + 2 | 0,
       _E_ = caml_check_bound(a, _D_)[1 + _D_],
       _F_ = x[1];
      if(caml_call2(cmp, caml_check_bound(a, _F_)[1 + _F_], _E_) < 0)
       x[1] = i31 + 2 | 0;
      return x[1];
     }
     if((i31 + 1 | 0) < l){
      var _G_ = i31 + 1 | 0, _H_ = caml_check_bound(a, _G_)[1 + _G_];
      if(0 > caml_call2(cmp, caml_check_bound(a, i31)[1 + i31], _H_))
       return i31 + 1 | 0;
     }
     if(i31 < l) return i31;
     throw caml_maybe_attach_backtrace([0, Bottom, i], 1);
    }
    var l = a.length - 1, _v_ = ((l + 1 | 0) / 3 | 0) - 1 | 0;
    if(_v_ >= 0){
     var i$6 = _v_;
     for(;;){
      var e$1 = caml_check_bound(a, i$6)[1 + i$6];
      try{
       var i = i$6;
       for(;;){
        var j = maxson(l, i);
        if(0 >= caml_call2(cmp, caml_check_bound(a, j)[1 + j], e$1)) break;
        var _s_ = caml_check_bound(a, j)[1 + j];
        caml_check_bound(a, i)[1 + i] = _s_;
        i = j;
       }
       caml_check_bound(a, i)[1 + i] = e$1;
      }
      catch(exn$0){
       var exn = caml_wrap_exception(exn$0);
       if(exn[1] !== Bottom) throw caml_maybe_attach_backtrace(exn, 0);
       var i$0 = exn[2];
       caml_check_bound(a, i$0)[1 + i$0] = e$1;
      }
      var _A_ = i$6 - 1 | 0;
      if(0 === i$6) break;
      i$6 = _A_;
     }
    }
    var _w_ = l - 1 | 0;
    if(_w_ >= 2){
     var i$4 = _w_;
     for(;;){
      var e$0 = caml_check_bound(a, i$4)[1 + i$4];
      a[1 + i$4] = caml_check_bound(a, 0)[1];
      var i$5 = 0;
      try{
       var i$1 = i$5;
       for(;;){
        var j$0 = maxson(i$4, i$1), _t_ = caml_check_bound(a, j$0)[1 + j$0];
        caml_check_bound(a, i$1)[1 + i$1] = _t_;
        i$1 = j$0;
       }
      }
      catch(exn){
       var exn$0 = caml_wrap_exception(exn);
       if(exn$0[1] !== Bottom) throw caml_maybe_attach_backtrace(exn$0, 0);
       var i$2 = exn$0[2];
       a:
       {
        b:
        {
         var i$3 = i$2;
         for(;;){
          var father = (i$3 - 1 | 0) / 3 | 0;
          if(i$3 === father)
           throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
          if
           (0 <= caml_call2(cmp, caml_check_bound(a, father)[1 + father], e$0))
           break;
          var _u_ = caml_check_bound(a, father)[1 + father];
          caml_check_bound(a, i$3)[1 + i$3] = _u_;
          if(0 >= father) break b;
          i$3 = father;
         }
         caml_check_bound(a, i$3)[1 + i$3] = e$0;
         break a;
        }
        caml_check_bound(a, 0)[1] = e$0;
       }
       var _z_ = i$4 - 1 | 0;
       if(2 === i$4) break;
       i$4 = _z_;
      }
     }
    }
    var _x_ = 1 < l ? 1 : 0;
    if(_x_){
     var e = caml_check_bound(a, 1)[2];
     a[2] = caml_check_bound(a, 0)[1];
     a[1] = e;
     var _y_ = 0;
    }
    else
     var _y_ = _x_;
    return _y_;
   }
   function stable_sort(cmp, a){
    function merge(src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs){
     var
      src1r = src1ofs + src1len | 0,
      src2r = src2ofs + src2len | 0,
      s2$1 = caml_check_bound(src2, src2ofs)[1 + src2ofs],
      s1$1 = caml_check_bound(a, src1ofs)[1 + src1ofs],
      i1 = src1ofs,
      s1 = s1$1,
      i2 = src2ofs,
      s2 = s2$1,
      d = dstofs;
     for(;;)
      if(0 < caml_call2(cmp, s1, s2)){
       caml_check_bound(dst, d)[1 + d] = s2;
       var i2$0 = i2 + 1 | 0;
       if(i2$0 >= src2r) return blit(a, i1, dst, d + 1 | 0, src1r - i1 | 0);
       var d$0 = d + 1 | 0, s2$0 = caml_check_bound(src2, i2$0)[1 + i2$0];
       i2 = i2$0;
       s2 = s2$0;
       d = d$0;
      }
      else{
       caml_check_bound(dst, d)[1 + d] = s1;
       var i1$0 = i1 + 1 | 0;
       if(i1$0 >= src1r)
        return blit(src2, i2, dst, d + 1 | 0, src2r - i2 | 0);
       var d$1 = d + 1 | 0, s1$0 = caml_check_bound(a, i1$0)[1 + i1$0];
       i1 = i1$0;
       s1 = s1$0;
       d = d$1;
      }
    }
    function isortto(srcofs, dst, dstofs, len){
     var _k_ = len - 1 | 0, _j_ = 0;
     if(_k_ >= 0){
      var i = _j_;
      for(;;){
       var
        _l_ = srcofs + i | 0,
        e = caml_check_bound(a, _l_)[1 + _l_],
        j = [0, (dstofs + i | 0) - 1 | 0];
       for(;;){
        if(dstofs > j[1]) break;
        var _m_ = j[1];
        if(0 >= caml_call2(cmp, caml_check_bound(dst, _m_)[1 + _m_], e))
         break;
        var
         _n_ = j[1],
         _o_ = caml_check_bound(dst, _n_)[1 + _n_],
         _p_ = j[1] + 1 | 0;
        caml_check_bound(dst, _p_)[1 + _p_] = _o_;
        j[1]--;
       }
       var _q_ = j[1] + 1 | 0;
       caml_check_bound(dst, _q_)[1 + _q_] = e;
       var _r_ = i + 1 | 0;
       if(_k_ === i) break;
       i = _r_;
      }
     }
     return 0;
    }
    function sortto(srcofs, dst, dstofs, len){
     if(len <= 5) return isortto(srcofs, dst, dstofs, len);
     var l1 = len / 2 | 0, l2 = len - l1 | 0;
     sortto(srcofs + l1 | 0, dst, dstofs + l1 | 0, l2);
     sortto(srcofs, a, srcofs + l2 | 0, l1);
     return merge(srcofs + l2 | 0, l1, dst, dstofs + l1 | 0, l2, dst, dstofs);
    }
    var l = a.length - 1;
    if(l <= 5) return isortto(0, a, 0, l);
    var
     l1 = l / 2 | 0,
     l2 = l - l1 | 0,
     t = caml_make_vect(l2, caml_check_bound(a, 0)[1]);
    sortto(l1, t, 0, l2);
    sortto(0, a, l2, l1);
    return merge(l2, l1, t, 0, l2, a, 0);
   }
   function to_seq(a){
    function aux(i, param){
     if(i >= a.length - 1) return 0;
     var x = a[1 + i], _h_ = i + 1 | 0;
     return [0, x, function(_i_){return aux(_h_, _i_);}];
    }
    var _f_ = 0;
    return function(_g_){return aux(_f_, _g_);};
   }
   function to_seqi(a){
    function aux(i, param){
     if(i >= a.length - 1) return 0;
     var x = a[1 + i], _d_ = i + 1 | 0;
     return [0, [0, i, x], function(_e_){return aux(_d_, _e_);}];
    }
    var _b_ = 0;
    return function(_c_){return aux(_b_, _c_);};
   }
   function of_seq(i$2){
    var
     l =
       caml_call3
        (Stdlib_Seq[5], function(acc, x){return [0, x, acc];}, 0, i$2);
    if(! l) return [0];
    var
     tl = l[2],
     hd = l[1],
     len = list_length(0, l),
     a = caml_make_vect(len, hd),
     i$1 = len - 2 | 0,
     i = i$1,
     param = tl;
    for(;;){
     if(! param) return a;
     var tl$0 = param[2], hd$0 = param[1];
     a[1 + i] = hd$0;
     var i$0 = i - 1 | 0;
     i = i$0;
     param = tl$0;
    }
   }
   var
    Stdlib_Array =
      [0,
       make_float,
       init,
       make_matrix,
       make_matrix,
       append,
       runtime.caml_array_concat,
       sub,
       copy,
       fill,
       blit,
       to_list,
       of_list,
       iter,
       iteri,
       map,
       mapi,
       fold_left,
       fold_left_map,
       fold_right,
       iter2,
       map2,
       for_all,
       exists,
       for_all2,
       exists2,
       mem,
       memq,
       find_opt,
       find_map,
       split,
       combine,
       sort,
       stable_sort,
       stable_sort,
       to_seq,
       to_seqi,
       of_seq,
       Floatarray];
   runtime.caml_register_global(14, Stdlib_Array, "Stdlib__Array");
   return;
  }
  (globalThis));

//# 7011 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_greaterequal = runtime.caml_greaterequal,
    caml_int_compare = runtime.caml_int_compare,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_mul = runtime.caml_mul,
    caml_wrap_exception = runtime.caml_wrap_exception,
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Assert_failure = global_data.Assert_failure,
    zero = 0,
    one = 1;
   function succ(n){return n + 1 | 0;}
   function pred(n){return n - 1 | 0;}
   function abs(n){return caml_greaterequal(n, 0) ? n : - n | 0;}
   function lognot(n){return n ^ -1;}
   var
    _a_ = Stdlib_Sys[9],
    _b_ = [0, "int32.ml", 69, 6],
    minus_one = -1,
    min_int = -2147483648,
    max_int = 2147483647;
   if(32 === _a_)
    var
     max_int$0 = Stdlib[19],
     unsigned_to_int =
       function(n){
        if(0 >= caml_int_compare(0, n) && 0 >= caml_int_compare(n, max_int$0))
         return [0, n];
        return 0;
       };
   else{
    if(64 !== _a_)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
    var unsigned_to_int = function(n){return [0, n & -1];};
   }
   function to_string(n){return runtime.caml_format_int("%d", n);}
   function of_string_opt(s){
    try{var _d_ = [0, runtime.caml_int_of_string(s)]; return _d_;}
    catch(_e_){
     var _c_ = caml_wrap_exception(_e_);
     if(_c_[1] === Stdlib[7]) return 0;
     throw caml_maybe_attach_backtrace(_c_, 0);
    }
   }
   var compare = caml_int_compare;
   function equal(x, y){return 0 === caml_int_compare(x, y) ? 1 : 0;}
   function unsigned_compare(n, m){
    var y = m + 2147483648 | 0, x = n + 2147483648 | 0;
    return caml_int_compare(x, y);
   }
   function min(x, y){return runtime.caml_lessequal(x, y) ? x : y;}
   function max(x, y){return caml_greaterequal(x, y) ? x : y;}
   function unsigned_div(n, d){
    if(runtime.caml_lessthan(d, 0))
     return 0 <= unsigned_compare(n, d) ? one : zero;
    var q = runtime.caml_div(n >>> 1 | 0, d) << 1, r = n - caml_mul(q, d) | 0;
    return 0 <= unsigned_compare(r, d) ? q + 1 | 0 : q;
   }
   function unsigned_rem(n, d){
    return n - caml_mul(unsigned_div(n, d), d) | 0;
   }
   var
    Stdlib_Int32 =
      [0,
       zero,
       one,
       minus_one,
       unsigned_div,
       unsigned_rem,
       succ,
       pred,
       abs,
       max_int,
       min_int,
       lognot,
       unsigned_to_int,
       of_string_opt,
       to_string,
       compare,
       unsigned_compare,
       equal,
       min,
       max];
   runtime.caml_register_global(14, Stdlib_Int32, "Stdlib__Int32");
   return;
  }
  (globalThis));

//# 7106 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_greaterequal = runtime.caml_greaterequal,
    caml_int64_add = runtime.caml_int64_add,
    caml_int64_compare = runtime.caml_int64_compare,
    caml_int64_mul = runtime.caml_int64_mul,
    caml_int64_sub = runtime.caml_int64_sub,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception,
    global_data = runtime.caml_get_global_data(),
    _a_ = runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
    zero = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    one = runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
    minus_one = runtime.caml_int64_create_lo_mi_hi(16777215, 16777215, 65535),
    min_int = runtime.caml_int64_create_lo_mi_hi(0, 0, 32768),
    max_int = runtime.caml_int64_create_lo_mi_hi(16777215, 16777215, 32767),
    Stdlib = global_data.Stdlib,
    _b_ = runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
    _c_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _d_ = runtime.caml_int64_create_lo_mi_hi(16777215, 16777215, 65535);
   function succ(n){return caml_int64_add(n, _a_);}
   function pred(n){return caml_int64_sub(n, _b_);}
   function abs(n){
    return caml_greaterequal(n, _c_) ? n : runtime.caml_int64_neg(n);
   }
   function lognot(n){return runtime.caml_int64_xor(n, _d_);}
   var max_int$0 = runtime.caml_int64_of_int32(Stdlib[19]);
   function unsigned_to_int(n){
    if
     (0 >= caml_int64_compare(zero, n)
      && 0 >= caml_int64_compare(n, max_int$0))
     return [0, runtime.caml_int64_to_int32(n)];
    return 0;
   }
   function to_string(n){return runtime.caml_int64_format("%d", n);}
   function of_string_opt(s){
    try{var _f_ = [0, runtime.caml_int64_of_string(s)]; return _f_;}
    catch(_g_){
     var _e_ = caml_wrap_exception(_g_);
     if(_e_[1] === Stdlib[7]) return 0;
     throw caml_maybe_attach_backtrace(_e_, 0);
    }
   }
   function compare(x, y){return caml_int64_compare(x, y);}
   function equal(x, y){return 0 === caml_int64_compare(x, y) ? 1 : 0;}
   function unsigned_compare(n, m){
    var y = caml_int64_sub(m, min_int), x = caml_int64_sub(n, min_int);
    return caml_int64_compare(x, y);
   }
   function min(x, y){return runtime.caml_lessequal(x, y) ? x : y;}
   function max(x, y){return caml_greaterequal(x, y) ? x : y;}
   function unsigned_div(n, d){
    if(runtime.caml_lessthan(d, zero))
     return 0 <= unsigned_compare(n, d) ? one : zero;
    var
     q =
       runtime.caml_int64_shift_left
        (runtime.caml_int64_div
          (runtime.caml_int64_shift_right_unsigned(n, 1), d),
         1),
     r = caml_int64_sub(n, caml_int64_mul(q, d));
    return 0 <= unsigned_compare(r, d) ? caml_int64_add(q, _a_) : q;
   }
   function unsigned_rem(n, d){
    return caml_int64_sub(n, caml_int64_mul(unsigned_div(n, d), d));
   }
   var
    Stdlib_Int64 =
      [0,
       zero,
       one,
       minus_one,
       unsigned_div,
       unsigned_rem,
       succ,
       pred,
       abs,
       max_int,
       min_int,
       lognot,
       unsigned_to_int,
       of_string_opt,
       to_string,
       compare,
       unsigned_compare,
       equal,
       min,
       max];
   runtime.caml_register_global(11, Stdlib_Int64, "Stdlib__Int64");
   return;
  }
  (globalThis));

//# 7204 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_greaterequal = runtime.caml_greaterequal,
    caml_int_compare = runtime.caml_int_compare,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_mul = runtime.caml_mul,
    caml_wrap_exception = runtime.caml_wrap_exception,
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Sys = global_data.Stdlib__Sys,
    zero = 0,
    one = 1;
   function succ(n){return n + 1 | 0;}
   function pred(n){return n - 1 | 0;}
   function abs(n){return caml_greaterequal(n, 0) ? n : - n | 0;}
   var
    size = Stdlib_Sys[9],
    min_int = 1 << (size - 1 | 0),
    max_int = min_int - 1 | 0;
   function lognot(n){return n ^ -1;}
   var max_int$0 = Stdlib[19];
   function unsigned_to_int(n){
    if(0 >= caml_int_compare(0, n) && 0 >= caml_int_compare(n, max_int$0))
     return [0, n];
    return 0;
   }
   function to_string(n){return runtime.caml_format_int("%d", n);}
   function of_string_opt(s){
    try{var _b_ = [0, runtime.caml_int_of_string(s)]; return _b_;}
    catch(_c_){
     var _a_ = caml_wrap_exception(_c_);
     if(_a_[1] === Stdlib[7]) return 0;
     throw caml_maybe_attach_backtrace(_a_, 0);
    }
   }
   var compare = caml_int_compare;
   function equal(x, y){return 0 === caml_int_compare(x, y) ? 1 : 0;}
   function unsigned_compare(n, m){
    var y = m - min_int | 0, x = n - min_int | 0;
    return caml_int_compare(x, y);
   }
   function min(x, y){return runtime.caml_lessequal(x, y) ? x : y;}
   function max(x, y){return caml_greaterequal(x, y) ? x : y;}
   function unsigned_div(n, d){
    if(runtime.caml_lessthan(d, 0))
     return 0 <= unsigned_compare(n, d) ? one : zero;
    var q = runtime.caml_div(n >>> 1 | 0, d) << 1, r = n - caml_mul(q, d) | 0;
    return 0 <= unsigned_compare(r, d) ? q + 1 | 0 : q;
   }
   function unsigned_rem(n, d){
    return n - caml_mul(unsigned_div(n, d), d) | 0;
   }
   var
    Stdlib_Nativeint =
      [0,
       zero,
       one,
       -1,
       unsigned_div,
       unsigned_rem,
       succ,
       pred,
       abs,
       size,
       max_int,
       min_int,
       lognot,
       unsigned_to_int,
       of_string_opt,
       to_string,
       compare,
       unsigned_compare,
       equal,
       min,
       max];
   runtime.caml_register_global(12, Stdlib_Nativeint, "Stdlib__Nativeint");
   return;
  }
  (globalThis));

//# 8582 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Map_bal$3 = "Map.bal",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Seq = global_data.Stdlib__Seq,
    cst_Map_bal = cst_Map_bal$3,
    cst_Map_bal$0 = cst_Map_bal$3,
    cst_Map_bal$1 = cst_Map_bal$3,
    cst_Map_bal$2 = cst_Map_bal$3,
    cst_Map_remove_min_elt = "Map.remove_min_elt",
    _a_ = [0, 0, 0, 0],
    _b_ = [0, "map.ml", 400, 10],
    _c_ = [0, 0, 0],
    Stdlib_Map =
      [0,
       function(Ord){
        function height(param){
         if(! param) return 0;
         var h = param[5];
         return h;
        }
        function create(l, x, d, r){
         var
          hl = height(l),
          hr = height(r),
          _K_ = hr <= hl ? hl + 1 | 0 : hr + 1 | 0;
         return [0, l, x, d, r, _K_];
        }
        function singleton(x, d){return [0, 0, x, d, 0, 1];}
        function bal(l, x, d, r){
         if(l) var h = l[5], hl = h; else var hl = 0;
         if(r) var h$0 = r[5], hr = h$0; else var hr = 0;
         if((hr + 2 | 0) < hl){
          if(! l) return caml_call1(Stdlib[1], cst_Map_bal$0);
          var lr = l[4], ld = l[3], lv = l[2], ll = l[1], _F_ = height(lr);
          if(_F_ <= height(ll))
           return create(ll, lv, ld, create(lr, x, d, r));
          if(! lr) return caml_call1(Stdlib[1], cst_Map_bal);
          var
           lrr = lr[4],
           lrd = lr[3],
           lrv = lr[2],
           lrl = lr[1],
           _G_ = create(lrr, x, d, r);
          return create(create(ll, lv, ld, lrl), lrv, lrd, _G_);
         }
         if((hl + 2 | 0) >= hr){
          var _J_ = hr <= hl ? hl + 1 | 0 : hr + 1 | 0;
          return [0, l, x, d, r, _J_];
         }
         if(! r) return caml_call1(Stdlib[1], cst_Map_bal$2);
         var rr = r[4], rd = r[3], rv = r[2], rl = r[1], _H_ = height(rl);
         if(_H_ <= height(rr)) return create(create(l, x, d, rl), rv, rd, rr);
         if(! rl) return caml_call1(Stdlib[1], cst_Map_bal$1);
         var
          rlr = rl[4],
          rld = rl[3],
          rlv = rl[2],
          rll = rl[1],
          _I_ = create(rlr, rv, rd, rr);
         return create(create(l, x, d, rll), rlv, rld, _I_);
        }
        var empty = 0;
        function is_empty(param){return param ? 0 : 1;}
        function add(x, data, m){
         if(! m) return [0, 0, x, data, 0, 1];
         var
          h = m[5],
          r = m[4],
          d = m[3],
          v = m[2],
          l = m[1],
          c = caml_call2(Ord[1], x, v);
         if(0 === c) return d === data ? m : [0, l, x, data, r, h];
         if(0 <= c){
          var rr = add(x, data, r);
          return r === rr ? m : bal(l, v, d, rr);
         }
         var ll = add(x, data, l);
         return l === ll ? m : bal(ll, v, d, r);
        }
        function find(x, param){
         var param$0 = param;
         for(;;){
          if(! param$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
          var
           r = param$0[4],
           d = param$0[3],
           v = param$0[2],
           l = param$0[1],
           c = caml_call2(Ord[1], x, v);
          if(0 === c) return d;
          var r$0 = 0 <= c ? r : l;
          param$0 = r$0;
         }
        }
        function find_first(f, param$0){
         var param$1 = param$0;
         for(;;){
          if(! param$1) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
          var
           r$0 = param$1[4],
           d0$1 = param$1[3],
           v0$1 = param$1[2],
           l$0 = param$1[1];
          if(caml_call1(f, v0$1)){
           var v0 = v0$1, d0 = d0$1, param = l$0;
           for(;;){
            if(! param) return [0, v0, d0];
            var r = param[4], d0$0 = param[3], v0$0 = param[2], l = param[1];
            if(caml_call1(f, v0$0)){
             v0 = v0$0;
             d0 = d0$0;
             param = l;
            }
            else
             param = r;
           }
          }
          else
           param$1 = r$0;
         }
        }
        function find_first_opt(f, param$0){
         var param$1 = param$0;
         for(;;){
          if(! param$1) return 0;
          var
           r$0 = param$1[4],
           d0$1 = param$1[3],
           v0$1 = param$1[2],
           l$0 = param$1[1];
          if(caml_call1(f, v0$1)){
           var v0 = v0$1, d0 = d0$1, param = l$0;
           for(;;){
            if(! param) return [0, [0, v0, d0]];
            var r = param[4], d0$0 = param[3], v0$0 = param[2], l = param[1];
            if(caml_call1(f, v0$0)){
             v0 = v0$0;
             d0 = d0$0;
             param = l;
            }
            else
             param = r;
           }
          }
          else
           param$1 = r$0;
         }
        }
        function find_last(f, param$0){
         var param$1 = param$0;
         for(;;){
          if(! param$1) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
          var
           r$0 = param$1[4],
           d0$1 = param$1[3],
           v0$1 = param$1[2],
           l$0 = param$1[1];
          if(caml_call1(f, v0$1)){
           var v0 = v0$1, d0 = d0$1, param = r$0;
           for(;;){
            if(! param) return [0, v0, d0];
            var r = param[4], d0$0 = param[3], v0$0 = param[2], l = param[1];
            if(caml_call1(f, v0$0)){
             v0 = v0$0;
             d0 = d0$0;
             param = r;
            }
            else
             param = l;
           }
          }
          else
           param$1 = l$0;
         }
        }
        function find_last_opt(f, param$0){
         var param$1 = param$0;
         for(;;){
          if(! param$1) return 0;
          var
           r$0 = param$1[4],
           d0$1 = param$1[3],
           v0$1 = param$1[2],
           l$0 = param$1[1];
          if(caml_call1(f, v0$1)){
           var v0 = v0$1, d0 = d0$1, param = r$0;
           for(;;){
            if(! param) return [0, [0, v0, d0]];
            var r = param[4], d0$0 = param[3], v0$0 = param[2], l = param[1];
            if(caml_call1(f, v0$0)){
             v0 = v0$0;
             d0 = d0$0;
             param = r;
            }
            else
             param = l;
           }
          }
          else
           param$1 = l$0;
         }
        }
        function find_opt(x, param){
         var param$0 = param;
         for(;;){
          if(! param$0) return 0;
          var
           r = param$0[4],
           d = param$0[3],
           v = param$0[2],
           l = param$0[1],
           c = caml_call2(Ord[1], x, v);
          if(0 === c) return [0, d];
          var r$0 = 0 <= c ? r : l;
          param$0 = r$0;
         }
        }
        function mem(x, param){
         var param$0 = param;
         for(;;){
          if(! param$0) return 0;
          var
           r = param$0[4],
           v = param$0[2],
           l = param$0[1],
           c = caml_call2(Ord[1], x, v),
           _E_ = 0 === c ? 1 : 0;
          if(_E_) return _E_;
          var r$0 = 0 <= c ? r : l;
          param$0 = r$0;
         }
        }
        function min_binding(param){
         var param$0 = param;
         for(;;){
          if(! param$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
          var l = param$0[1];
          if(! l){var d = param$0[3], v = param$0[2]; return [0, v, d];}
          param$0 = l;
         }
        }
        function min_binding_opt(param){
         var param$0 = param;
         for(;;){
          if(! param$0) return 0;
          var l = param$0[1];
          if(! l){var d = param$0[3], v = param$0[2]; return [0, [0, v, d]];}
          param$0 = l;
         }
        }
        function max_binding(param){
         var param$0 = param;
         for(;;){
          if(! param$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
          if(! param$0[4]){
           var d = param$0[3], v = param$0[2];
           return [0, v, d];
          }
          var r = param$0[4];
          param$0 = r;
         }
        }
        function max_binding_opt(param){
         var param$0 = param;
         for(;;){
          if(! param$0) return 0;
          if(! param$0[4]){
           var d = param$0[3], v = param$0[2];
           return [0, [0, v, d]];
          }
          var r = param$0[4];
          param$0 = r;
         }
        }
        function remove_min_binding(param){
         if(! param) return caml_call1(Stdlib[1], cst_Map_remove_min_elt);
         var l = param[1];
         if(l){
          var r = param[4], d = param[3], v = param[2];
          return bal(remove_min_binding(l), v, d, r);
         }
         var r$0 = param[4];
         return r$0;
        }
        function _d_(t1, t2){
         if(! t1) return t2;
         if(! t2) return t1;
         var match = min_binding(t2), d = match[2], x = match[1];
         return bal(t1, x, d, remove_min_binding(t2));
        }
        function remove(x, m){
         if(! m) return 0;
         var
          r = m[4],
          d = m[3],
          v = m[2],
          l = m[1],
          c = caml_call2(Ord[1], x, v);
         if(0 === c) return _d_(l, r);
         if(0 <= c){
          var rr = remove(x, r);
          return r === rr ? m : bal(l, v, d, rr);
         }
         var ll = remove(x, l);
         return l === ll ? m : bal(ll, v, d, r);
        }
        function update(x, f, m){
         if(! m){
          var match$0 = caml_call1(f, 0);
          if(! match$0) return 0;
          var data$0 = match$0[1];
          return [0, 0, x, data$0, 0, 1];
         }
         var
          h = m[5],
          r = m[4],
          d = m[3],
          v = m[2],
          l = m[1],
          c = caml_call2(Ord[1], x, v);
         if(0 === c){
          var match = caml_call1(f, [0, d]);
          if(! match) return _d_(l, r);
          var data = match[1];
          return d === data ? m : [0, l, x, data, r, h];
         }
         if(0 <= c){
          var rr = update(x, f, r);
          return r === rr ? m : bal(l, v, d, rr);
         }
         var ll = update(x, f, l);
         return l === ll ? m : bal(ll, v, d, r);
        }
        function iter(f, param){
         var param$0 = param;
         for(;;){
          if(! param$0) return 0;
          var r = param$0[4], d = param$0[3], v = param$0[2], l = param$0[1];
          iter(f, l);
          caml_call2(f, v, d);
          param$0 = r;
         }
        }
        function map(f, param){
         if(! param) return 0;
         var
          h = param[5],
          r = param[4],
          d = param[3],
          v = param[2],
          l = param[1],
          l$0 = map(f, l),
          d$0 = caml_call1(f, d),
          r$0 = map(f, r);
         return [0, l$0, v, d$0, r$0, h];
        }
        function mapi(f, param){
         if(! param) return 0;
         var
          h = param[5],
          r = param[4],
          d = param[3],
          v = param[2],
          l = param[1],
          l$0 = mapi(f, l),
          d$0 = caml_call2(f, v, d),
          r$0 = mapi(f, r);
         return [0, l$0, v, d$0, r$0, h];
        }
        function fold(f, m, accu){
         var m$0 = m, accu$0 = accu;
         for(;;){
          if(! m$0) return accu$0;
          var
           r = m$0[4],
           d = m$0[3],
           v = m$0[2],
           l = m$0[1],
           accu$1 = caml_call3(f, v, d, fold(f, l, accu$0));
          m$0 = r;
          accu$0 = accu$1;
         }
        }
        function for_all(p, param){
         var param$0 = param;
         for(;;){
          if(! param$0) return 1;
          var
           r = param$0[4],
           d = param$0[3],
           v = param$0[2],
           l = param$0[1],
           _B_ = caml_call2(p, v, d);
          if(_B_){
           var _C_ = for_all(p, l);
           if(_C_){param$0 = r; continue;}
           var _D_ = _C_;
          }
          else
           var _D_ = _B_;
          return _D_;
         }
        }
        function exists(p, param){
         var param$0 = param;
         for(;;){
          if(! param$0) return 0;
          var
           r = param$0[4],
           d = param$0[3],
           v = param$0[2],
           l = param$0[1],
           _y_ = caml_call2(p, v, d);
          if(_y_)
           var _z_ = _y_;
          else{
           var _A_ = exists(p, l);
           if(! _A_){param$0 = r; continue;}
           var _z_ = _A_;
          }
          return _z_;
         }
        }
        function add_min_binding(k, x, param){
         if(! param) return singleton(k, x);
         var r = param[4], d = param[3], v = param[2], l = param[1];
         return bal(add_min_binding(k, x, l), v, d, r);
        }
        function add_max_binding(k, x, param){
         if(! param) return singleton(k, x);
         var r = param[4], d = param[3], v = param[2], l = param[1];
         return bal(l, v, d, add_max_binding(k, x, r));
        }
        function join(l, v, d, r){
         if(! l) return add_min_binding(v, d, r);
         if(! r) return add_max_binding(v, d, l);
         var
          rh = r[5],
          rr = r[4],
          rd = r[3],
          rv = r[2],
          rl = r[1],
          lh = l[5],
          lr = l[4],
          ld = l[3],
          lv = l[2],
          ll = l[1];
         return (rh + 2 | 0) < lh
                 ? bal(ll, lv, ld, join(lr, v, d, r))
                 : (lh
                   + 2
                   | 0)
                   < rh
                   ? bal(join(l, v, d, rl), rv, rd, rr)
                   : create(l, v, d, r);
        }
        function concat(t1, t2){
         if(! t1) return t2;
         if(! t2) return t1;
         var match = min_binding(t2), d = match[2], x = match[1];
         return join(t1, x, d, remove_min_binding(t2));
        }
        function concat_or_join(t1, v, d, t2){
         if(! d) return concat(t1, t2);
         var d$0 = d[1];
         return join(t1, v, d$0, t2);
        }
        function split(x, param){
         if(! param) return _a_;
         var
          r = param[4],
          d = param[3],
          v = param[2],
          l = param[1],
          c = caml_call2(Ord[1], x, v);
         if(0 === c) return [0, l, [0, d], r];
         if(0 <= c){
          var
           match = split(x, r),
           rr = match[3],
           pres = match[2],
           lr = match[1];
          return [0, join(l, v, d, lr), pres, rr];
         }
         var
          match$0 = split(x, l),
          rl = match$0[3],
          pres$0 = match$0[2],
          ll = match$0[1];
         return [0, ll, pres$0, join(rl, v, d, r)];
        }
        function merge(f, s1, s2){
         if(s1){
          var h1 = s1[5], r1 = s1[4], d1 = s1[3], v1 = s1[2], l1 = s1[1];
          if(height(s2) <= h1){
           var
            match = split(v1, s2),
            r2 = match[3],
            d2 = match[2],
            l2 = match[1],
            _u_ = merge(f, r1, r2),
            _v_ = caml_call3(f, v1, [0, d1], d2);
           return concat_or_join(merge(f, l1, l2), v1, _v_, _u_);
          }
         }
         else if(! s2) return 0;
         if(! s2)
          throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
         var
          r2$0 = s2[4],
          d2$0 = s2[3],
          v2 = s2[2],
          l2$0 = s2[1],
          match$0 = split(v2, s1),
          r1$0 = match$0[3],
          d1$0 = match$0[2],
          l1$0 = match$0[1],
          _w_ = merge(f, r1$0, r2$0),
          _x_ = caml_call3(f, v2, d1$0, [0, d2$0]);
         return concat_or_join(merge(f, l1$0, l2$0), v2, _x_, _w_);
        }
        function union(f, s1, s2){
         if(s1){
          if(s2){
           var
            h2 = s2[5],
            r2 = s2[4],
            d2 = s2[3],
            v2 = s2[2],
            l2 = s2[1],
            h1 = s1[5],
            r1 = s1[4],
            d1 = s1[3],
            v1 = s1[2],
            l1 = s1[1];
           if(h2 <= h1){
            var
             match = split(v1, s2),
             r2$0 = match[3],
             d2$0 = match[2],
             l2$0 = match[1],
             l = union(f, l1, l2$0),
             r = union(f, r1, r2$0);
            if(! d2$0) return join(l, v1, d1, r);
            var d2$1 = d2$0[1];
            return concat_or_join(l, v1, caml_call3(f, v1, d1, d2$1), r);
           }
           var
            match$0 = split(v2, s1),
            r1$0 = match$0[3],
            d1$0 = match$0[2],
            l1$0 = match$0[1],
            l$0 = union(f, l1$0, l2),
            r$0 = union(f, r1$0, r2);
           if(! d1$0) return join(l$0, v2, d2, r$0);
           var d1$1 = d1$0[1];
           return concat_or_join(l$0, v2, caml_call3(f, v2, d1$1, d2), r$0);
          }
          var s = s1;
         }
         else
          var s = s2;
         return s;
        }
        function filter(p, m){
         if(! m) return 0;
         var
          r = m[4],
          d = m[3],
          v = m[2],
          l = m[1],
          l$0 = filter(p, l),
          pvd = caml_call2(p, v, d),
          r$0 = filter(p, r);
         if(! pvd) return concat(l$0, r$0);
         if(l === l$0 && r === r$0) return m;
         return join(l$0, v, d, r$0);
        }
        function filter_map(f, param){
         if(! param) return 0;
         var
          r = param[4],
          d = param[3],
          v = param[2],
          l = param[1],
          l$0 = filter_map(f, l),
          fvd = caml_call2(f, v, d),
          r$0 = filter_map(f, r);
         if(! fvd) return concat(l$0, r$0);
         var d$0 = fvd[1];
         return join(l$0, v, d$0, r$0);
        }
        function partition(p, param){
         if(! param) return _c_;
         var
          r = param[4],
          d = param[3],
          v = param[2],
          l = param[1],
          match = partition(p, l),
          lf = match[2],
          lt = match[1],
          pvd = caml_call2(p, v, d),
          match$0 = partition(p, r),
          rf = match$0[2],
          rt = match$0[1];
         if(pvd){
          var _s_ = concat(lf, rf);
          return [0, join(lt, v, d, rt), _s_];
         }
         var _t_ = join(lf, v, d, rf);
         return [0, concat(lt, rt), _t_];
        }
        function cons_enum(m, e){
         var m$0 = m, e$0 = e;
         for(;;){
          if(! m$0) return e$0;
          var
           r = m$0[4],
           d = m$0[3],
           v = m$0[2],
           l = m$0[1],
           e$1 = [0, v, d, r, e$0];
          m$0 = l;
          e$0 = e$1;
         }
        }
        function compare(cmp, m1, m2){
         var
          e2$2 = cons_enum(m2, 0),
          e1$2 = cons_enum(m1, 0),
          e1 = e1$2,
          e2 = e2$2;
         for(;;){
          if(! e1) return e2 ? -1 : 0;
          if(! e2) return 1;
          var
           e2$0 = e2[4],
           r2 = e2[3],
           d2 = e2[2],
           v2 = e2[1],
           e1$0 = e1[4],
           r1 = e1[3],
           d1 = e1[2],
           v1 = e1[1],
           c = caml_call2(Ord[1], v1, v2);
          if(0 !== c) return c;
          var c$0 = caml_call2(cmp, d1, d2);
          if(0 !== c$0) return c$0;
          var e2$1 = cons_enum(r2, e2$0), e1$1 = cons_enum(r1, e1$0);
          e1 = e1$1;
          e2 = e2$1;
         }
        }
        function equal(cmp, m1, m2){
         var
          e2$2 = cons_enum(m2, 0),
          e1$2 = cons_enum(m1, 0),
          e1 = e1$2,
          e2 = e2$2;
         for(;;){
          if(! e1) return e2 ? 0 : 1;
          if(! e2) return 0;
          var
           e2$0 = e2[4],
           r2 = e2[3],
           d2 = e2[2],
           v2 = e2[1],
           e1$0 = e1[4],
           r1 = e1[3],
           d1 = e1[2],
           v1 = e1[1],
           _p_ = 0 === caml_call2(Ord[1], v1, v2) ? 1 : 0;
          if(_p_){
           var _q_ = caml_call2(cmp, d1, d2);
           if(_q_){
            var e2$1 = cons_enum(r2, e2$0), e1$1 = cons_enum(r1, e1$0);
            e1 = e1$1;
            e2 = e2$1;
            continue;
           }
           var _r_ = _q_;
          }
          else
           var _r_ = _p_;
          return _r_;
         }
        }
        function cardinal(param){
         if(! param) return 0;
         var r = param[4], l = param[1], _o_ = cardinal(r);
         return (cardinal(l) + 1 | 0) + _o_ | 0;
        }
        function bindings_aux(accu, param){
         var accu$0 = accu, param$0 = param;
         for(;;){
          if(! param$0) return accu$0;
          var
           r = param$0[4],
           d = param$0[3],
           v = param$0[2],
           l = param$0[1],
           accu$1 = [0, [0, v, d], bindings_aux(accu$0, r)];
          accu$0 = accu$1;
          param$0 = l;
         }
        }
        function bindings(s){return bindings_aux(0, s);}
        function add_seq(i, m){
         return caml_call3
                 (Stdlib_Seq[5],
                  function(m, param){
                   var v = param[2], k = param[1];
                   return add(k, v, m);
                  },
                  m,
                  i);
        }
        function of_seq(i){return add_seq(i, empty);}
        function seq_of_enum(c, param){
         if(! c) return 0;
         var
          rest = c[4],
          t = c[3],
          v = c[2],
          k = c[1],
          _m_ = cons_enum(t, rest);
         return [0, [0, k, v], function(_n_){return seq_of_enum(_m_, _n_);}];
        }
        function to_seq(m){
         var _k_ = cons_enum(m, 0);
         return function(_l_){return seq_of_enum(_k_, _l_);};
        }
        function snoc_enum(s, e){
         var s$0 = s, e$0 = e;
         for(;;){
          if(! s$0) return e$0;
          var
           r = s$0[4],
           d = s$0[3],
           v = s$0[2],
           l = s$0[1],
           e$1 = [0, v, d, l, e$0];
          s$0 = r;
          e$0 = e$1;
         }
        }
        function rev_seq_of_enum(c, param){
         if(! c) return 0;
         var
          rest = c[4],
          t = c[3],
          v = c[2],
          k = c[1],
          _i_ = snoc_enum(t, rest);
         return [0,
                 [0, k, v],
                 function(_j_){return rev_seq_of_enum(_i_, _j_);}];
        }
        function to_rev_seq(c){
         var _g_ = snoc_enum(c, 0);
         return function(_h_){return rev_seq_of_enum(_g_, _h_);};
        }
        function to_seq_from(low, m){
         a:
         {
          b:
          {
           var m$0 = m, c = 0;
           for(;;){
            if(! m$0) break;
            var
             r = m$0[4],
             d = m$0[3],
             v = m$0[2],
             l = m$0[1],
             n = caml_call2(Ord[1], v, low);
            if(0 === n) break b;
            if(0 <= n){
             var c$0 = [0, v, d, r, c];
             m$0 = l;
             c = c$0;
            }
            else
             m$0 = r;
           }
           var _e_ = c;
           break a;
          }
          var _e_ = [0, v, d, r, c];
         }
         return function(_f_){return seq_of_enum(_e_, _f_);};
        }
        return [0,
                empty,
                is_empty,
                mem,
                add,
                update,
                singleton,
                remove,
                merge,
                union,
                compare,
                equal,
                iter,
                fold,
                for_all,
                exists,
                filter,
                filter_map,
                partition,
                cardinal,
                bindings,
                min_binding,
                min_binding_opt,
                max_binding,
                max_binding_opt,
                min_binding,
                min_binding_opt,
                split,
                find,
                find_opt,
                find_first,
                find_first_opt,
                find_last,
                find_last_opt,
                map,
                mapi,
                to_seq,
                to_rev_seq,
                to_seq_from,
                add_seq,
                of_seq];
       }];
   runtime.caml_register_global(11, Stdlib_Map, "Stdlib__Map");
   return;
  }
  (globalThis));

//# 10064 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_buffer_ml = "buffer.ml",
    caml_blit_string = runtime.caml_blit_string,
    caml_bswap16 = runtime.caml_bswap16,
    caml_bytes_unsafe_get = runtime.caml_bytes_unsafe_get,
    caml_bytes_unsafe_set = runtime.caml_bytes_unsafe_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_int32_bswap = runtime.caml_int32_bswap,
    caml_int64_bswap = runtime.caml_int64_bswap,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib = global_data.Stdlib,
    Stdlib_String = global_data.Stdlib__String,
    Assert_failure = global_data.Assert_failure,
    cst_Buffer_sub = "Buffer.sub",
    cst_Buffer_blit = "Buffer.blit",
    cst_Buffer_nth = "Buffer.nth",
    _a_ = [0, cst_buffer_ml, 94, 2],
    _b_ = [0, cst_buffer_ml, 93, 2],
    cst_Buffer_add_cannot_grow_buf = "Buffer.add: cannot grow buffer";
   function create(n){
    var
     n$0 = 1 <= n ? n : 1,
     n$1 = Stdlib_Sys[12] < n$0 ? Stdlib_Sys[12] : n$0,
     s = caml_create_bytes(n$1);
    return [0, s, 0, n$1, s];
   }
   function contents(b){return caml_call3(Stdlib_Bytes[8], b[1], 0, b[2]);}
   function to_bytes(b){return caml_call3(Stdlib_Bytes[7], b[1], 0, b[2]);}
   function sub(b, ofs, len){
    if(0 <= ofs && 0 <= len && (b[2] - len | 0) >= ofs)
     return caml_call3(Stdlib_Bytes[8], b[1], ofs, len);
    return caml_call1(Stdlib[1], cst_Buffer_sub);
   }
   function blit(src, srcoff, dst, dstoff, len){
    if
     (0 <= len
      &&
       0 <= srcoff
       &&
        (src[2] - len | 0) >= srcoff
        && 0 <= dstoff && (caml_ml_bytes_length(dst) - len | 0) >= dstoff)
     return runtime.caml_blit_bytes(src[1], srcoff, dst, dstoff, len);
    return caml_call1(Stdlib[1], cst_Buffer_blit);
   }
   function nth(b, ofs){
    if(0 <= ofs && b[2] > ofs) return caml_bytes_unsafe_get(b[1], ofs);
    return caml_call1(Stdlib[1], cst_Buffer_nth);
   }
   function length(b){return b[2];}
   function clear(b){b[2] = 0; return 0;}
   function reset(b){
    b[2] = 0;
    b[1] = b[4];
    b[3] = caml_ml_bytes_length(b[1]);
    return 0;
   }
   function resize(b, more){
    var old_pos = b[2], old_len = b[3], new_len = [0, old_len];
    for(;;){
     if(new_len[1] >= (old_pos + more | 0)) break;
     new_len[1] = 2 * new_len[1] | 0;
    }
    if(Stdlib_Sys[12] < new_len[1])
     if((old_pos + more | 0) <= Stdlib_Sys[12])
      new_len[1] = Stdlib_Sys[12];
     else
      caml_call1(Stdlib[2], cst_Buffer_add_cannot_grow_buf);
    var new_buffer = caml_create_bytes(new_len[1]);
    caml_call5(Stdlib_Bytes[11], b[1], 0, new_buffer, 0, b[2]);
    b[1] = new_buffer;
    b[3] = new_len[1];
    if((b[2] + more | 0) > b[3])
     throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
    if((old_pos + more | 0) <= b[3]) return;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
   }
   function add_char(b, c){
    var pos = b[2];
    if(b[3] <= pos) resize(b, 1);
    caml_bytes_unsafe_set(b[1], pos, c);
    b[2] = pos + 1 | 0;
    return 0;
   }
   var
    uchar_utf_8_byte_length_max = 4,
    uchar_utf_16_byte_length_max = 4,
    cst_Buffer_add_substring_add_s = "Buffer.add_substring/add_subbytes",
    _c_ = [0, cst_buffer_ml, 212, 2],
    cst_Buffer_add_channel = "Buffer.add_channel",
    _d_ = [0, cst_buffer_ml, 231, 9],
    cst_Buffer_truncate = "Buffer.truncate";
   function add_utf_8_uchar(b, u){
    for(;;){
     var pos = b[2];
     if(b[3] <= pos) resize(b, uchar_utf_8_byte_length_max);
     var n = caml_call3(Stdlib_Bytes[55], b[1], pos, u);
     if(0 !== n){b[2] = pos + n | 0; return 0;}
     resize(b, uchar_utf_8_byte_length_max);
    }
   }
   function add_utf_16be_uchar(b, u){
    for(;;){
     var pos = b[2];
     if(b[3] <= pos) resize(b, uchar_utf_16_byte_length_max);
     var n = caml_call3(Stdlib_Bytes[58], b[1], pos, u);
     if(0 !== n){b[2] = pos + n | 0; return 0;}
     resize(b, uchar_utf_16_byte_length_max);
    }
   }
   function add_utf_16le_uchar(b, u){
    for(;;){
     var pos = b[2];
     if(b[3] <= pos) resize(b, uchar_utf_16_byte_length_max);
     var n = caml_call3(Stdlib_Bytes[61], b[1], pos, u);
     if(0 !== n){b[2] = pos + n | 0; return 0;}
     resize(b, uchar_utf_16_byte_length_max);
    }
   }
   function add_substring(b, s, offset, len){
    var _t_ = offset < 0 ? 1 : 0;
    if(_t_)
     var _u_ = _t_;
    else
     var
      _v_ = len < 0 ? 1 : 0,
      _u_ = _v_ || ((caml_ml_string_length(s) - len | 0) < offset ? 1 : 0);
    if(_u_) caml_call1(Stdlib[1], cst_Buffer_add_substring_add_s);
    var new_position = b[2] + len | 0;
    if(b[3] < new_position) resize(b, len);
    caml_blit_string(s, offset, b[1], b[2], len);
    b[2] = new_position;
    return 0;
   }
   function add_subbytes(b, s, offset, len){
    return add_substring(b, caml_call1(Stdlib_Bytes[48], s), offset, len);
   }
   function add_string(b, s){
    var len = caml_ml_string_length(s), new_position = b[2] + len | 0;
    if(b[3] < new_position) resize(b, len);
    caml_blit_string(s, 0, b[1], b[2], len);
    b[2] = new_position;
    return 0;
   }
   function add_bytes(b, s){
    return add_string(b, caml_call1(Stdlib_Bytes[48], s));
   }
   function add_buffer(b, bs){return add_subbytes(b, bs[1], 0, bs[2]);}
   function add_channel(b, ic, to_read$1){
    var
     _r_ = to_read$1 < 0 ? 1 : 0,
     _s_ = _r_ || (Stdlib_Sys[12] < to_read$1 ? 1 : 0);
    if(_s_) caml_call1(Stdlib[1], cst_Buffer_add_channel);
    if(b[3] < (b[2] + to_read$1 | 0)) resize(b, to_read$1);
    var
     ofs$1 = b[2],
     buf = b[1],
     already_read = 0,
     ofs = ofs$1,
     to_read = to_read$1;
    for(;;){
     if(0 !== to_read){
      var r = caml_call4(Stdlib[84], ic, buf, ofs, to_read);
      if(0 !== r){
       var
        already_read$0 = already_read + r | 0,
        ofs$0 = ofs + r | 0,
        to_read$0 = to_read - r | 0;
       already_read = already_read$0;
       ofs = ofs$0;
       to_read = to_read$0;
       continue;
      }
     }
     if((b[2] + already_read | 0) > b[3])
      throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
     b[2] = b[2] + already_read | 0;
     if(already_read < to_read$1)
      throw caml_maybe_attach_backtrace(Stdlib[12], 1);
     return 0;
    }
   }
   function output_buffer(oc, b){
    return caml_call4(Stdlib[68], oc, b[1], 0, b[2]);
   }
   function add_substitute(b, f, s){
    var lim$1 = caml_ml_string_length(s), previous = 32, i$4 = 0;
    for(;;){
     if(i$4 >= lim$1){
      var _q_ = 92 === previous ? 1 : 0;
      return _q_ ? add_char(b, previous) : _q_;
     }
     var previous$0 = caml_string_get(s, i$4);
     if(36 === previous$0)
      if(92 === previous){
       add_char(b, previous$0);
       var i$5 = i$4 + 1 | 0;
       previous = 32;
       i$4 = i$5;
      }
      else{
       var start$0 = i$4 + 1 | 0;
       if(lim$1 <= start$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
       var opening = caml_string_get(s, start$0);
       a:
       {
        if(40 !== opening && 123 !== opening){
         var start = start$0 + 1 | 0, lim$0 = caml_ml_string_length(s);
         b:
         {
          c:
          {
           d:
           {
            var i$2 = start;
            for(;;){
             if(lim$0 <= i$2) break c;
             var match = caml_string_get(s, i$2);
             if(91 <= match){
              if(97 <= match){
               if(123 <= match) break d;
              }
              else if(95 !== match) break d;
             }
             else
              if(58 <= match){
               if(65 > match) break;
              }
              else if(48 > match) break d;
             var i$3 = i$2 + 1 | 0;
             i$2 = i$3;
            }
           }
           var stop$0 = i$2;
           break b;
          }
          var stop$0 = lim$0;
         }
         var
          match$0 =
            [0,
             caml_call3(Stdlib_String[15], s, start$0, stop$0 - start$0 | 0),
             stop$0];
         break a;
        }
        var new_start = start$0 + 1 | 0, k$2 = 0;
        if(40 === opening)
         var closing = 41;
        else{
         if(123 !== opening)
          throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
         var closing = 125;
        }
        var lim = caml_ml_string_length(s), k = k$2, stop = new_start;
        for(;;){
         if(lim <= stop) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
         if(caml_string_get(s, stop) === opening){
          var i = stop + 1 | 0, k$0 = k + 1 | 0;
          k = k$0;
          stop = i;
         }
         else if(caml_string_get(s, stop) === closing){
          if(0 === k) break;
          var i$0 = stop + 1 | 0, k$1 = k - 1 | 0;
          k = k$1;
          stop = i$0;
         }
         else{var i$1 = stop + 1 | 0; stop = i$1;}
        }
        var
         match$0 =
           [0,
            caml_call3
             (Stdlib_String[15], s, new_start, (stop - start$0 | 0) - 1 | 0),
            stop + 1 | 0];
       }
       var next_i = match$0[2], ident = match$0[1];
       add_string(b, caml_call1(f, ident));
       previous = 32;
       i$4 = next_i;
      }
     else if(92 === previous){
      add_char(b, 92);
      add_char(b, previous$0);
      var i$6 = i$4 + 1 | 0;
      previous = 32;
      i$4 = i$6;
     }
     else if(92 === previous$0){
      var i$7 = i$4 + 1 | 0;
      previous = previous$0;
      i$4 = i$7;
     }
     else{
      add_char(b, previous$0);
      var i$8 = i$4 + 1 | 0;
      previous = previous$0;
      i$4 = i$8;
     }
    }
   }
   function truncate(b, len){
    if(0 <= len && b[2] >= len){b[2] = len; return 0;}
    return caml_call1(Stdlib[1], cst_Buffer_truncate);
   }
   function to_seq(b){
    function aux(i, param){
     if(b[2] <= i) return 0;
     var x = caml_bytes_unsafe_get(b[1], i), _o_ = i + 1 | 0;
     return [0, x, function(_p_){return aux(_o_, _p_);}];
    }
    var _m_ = 0;
    return function(_n_){return aux(_m_, _n_);};
   }
   function to_seqi(b){
    function aux(i, param){
     if(b[2] <= i) return 0;
     var x = caml_bytes_unsafe_get(b[1], i), _k_ = i + 1 | 0;
     return [0, [0, i, x], function(_l_){return aux(_k_, _l_);}];
    }
    var _i_ = 0;
    return function(_j_){return aux(_i_, _j_);};
   }
   function add_seq(b, seq){
    return caml_call2
            (Stdlib_Seq[4], function(_h_){return add_char(b, _h_);}, seq);
   }
   function of_seq(i){var b = create(32); add_seq(b, i); return b;}
   function add_int8(b, x){
    var new_position = b[2] + 1 | 0;
    if(b[3] < new_position) resize(b, 1);
    caml_bytes_unsafe_set(b[1], b[2], x);
    b[2] = new_position;
    return 0;
   }
   function add_int16_ne(b, x){
    var new_position = b[2] + 2 | 0;
    if(b[3] < new_position) resize(b, 2);
    runtime.caml_bytes_set16(b[1], b[2], x);
    b[2] = new_position;
    return 0;
   }
   function add_int32_ne(b, x){
    var new_position = b[2] + 4 | 0;
    if(b[3] < new_position) resize(b, 4);
    runtime.caml_bytes_set32(b[1], b[2], x);
    b[2] = new_position;
    return 0;
   }
   function add_int64_ne(b, x){
    var new_position = b[2] + 8 | 0;
    if(b[3] < new_position) resize(b, 8);
    runtime.caml_bytes_set64(b[1], b[2], x);
    b[2] = new_position;
    return 0;
   }
   function add_int16_le(b, x){
    var _g_ = Stdlib_Sys[11] ? caml_bswap16(x) : x;
    return add_int16_ne(b, _g_);
   }
   function add_int16_be(b, x){
    var x$0 = Stdlib_Sys[11] ? x : caml_bswap16(x);
    return add_int16_ne(b, x$0);
   }
   function add_int32_le(b, x){
    var _f_ = Stdlib_Sys[11] ? caml_int32_bswap(x) : x;
    return add_int32_ne(b, _f_);
   }
   function add_int32_be(b, x){
    var x$0 = Stdlib_Sys[11] ? x : caml_int32_bswap(x);
    return add_int32_ne(b, x$0);
   }
   function add_int64_le(b, x){
    var _e_ = Stdlib_Sys[11] ? caml_int64_bswap(x) : x;
    return add_int64_ne(b, _e_);
   }
   function add_int64_be(b, x){
    var x$0 = Stdlib_Sys[11] ? x : caml_int64_bswap(x);
    return add_int64_ne(b, x$0);
   }
   var
    Stdlib_Buffer =
      [0,
       create,
       contents,
       to_bytes,
       sub,
       blit,
       nth,
       length,
       clear,
       reset,
       output_buffer,
       truncate,
       add_char,
       add_utf_8_uchar,
       add_utf_16le_uchar,
       add_utf_16be_uchar,
       add_string,
       add_bytes,
       add_substring,
       add_subbytes,
       add_substitute,
       add_buffer,
       add_channel,
       to_seq,
       to_seqi,
       add_seq,
       of_seq,
       add_int8,
       add_int8,
       add_int16_ne,
       add_int16_be,
       add_int16_le,
       add_int16_ne,
       add_int16_be,
       add_int16_le,
       add_int32_ne,
       add_int32_be,
       add_int32_le,
       add_int64_ne,
       add_int64_be,
       add_int64_le];
   runtime.caml_register_global(17, Stdlib_Buffer, "Stdlib__Buffer");
   return;
  }
  (globalThis));

//# 10531 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$43 = "",
    cst_and = " and ",
    cst_Li$3 = "%Li",
    cst_i$3 = "%i",
    cst_li$3 = "%li",
    cst_ni$3 = "%ni",
    cst_u$0 = "%u",
    cst$42 = "' '",
    cst$41 = "'#'",
    cst$39 = "'*'",
    cst$40 = "'+'",
    cst$44 = ", ",
    cst_0$3 = "0",
    cst_at_character_number = ": at character number ",
    cst$38 = "@[",
    cst$37 = "@{",
    cst_bad_input_format_type_mism =
      "bad input: format type mismatch between ",
    cst_bad_input_format_type_mism$0 =
      "bad input: format type mismatch between %S and %S",
    cst_camlinternalFormat_ml = "camlinternalFormat.ml",
    cst_invalid_format = "invalid format ",
    cst_precision$3 = "precision",
    caml_blit_string = runtime.caml_blit_string,
    caml_bytes_set = runtime.caml_bytes_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_format_float = runtime.caml_format_float,
    caml_format_int = runtime.caml_format_int,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_notequal = runtime.caml_notequal,
    caml_string_get = runtime.caml_string_get,
    caml_string_unsafe_get = runtime.caml_string_unsafe_get,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst$9 = "%{",
    cst$10 = "%}",
    cst$11 = "%(",
    cst$12 = "%)",
    cst$13 = "%?",
    cst$18 = cst$37,
    cst$19 = cst$38,
    cst$20 = cst$37,
    cst$21 = cst$38,
    cst$22 = cst$37,
    cst$23 = cst$38,
    cst$26 = cst$39,
    cst$24 = "'-'",
    cst$25 = cst$39,
    cst$27 = cst$40,
    cst$28 = cst$41,
    cst$29 = cst$42,
    cst$30 = cst$40,
    cst$31 = "'_'",
    sub_format = [0, 0, cst$43],
    formatting_lit = [0, "@;", 1, 0],
    cst$35 = cst$41,
    cst$32 = cst$40,
    cst$33 = cst$40,
    cst$34 = cst$42,
    cst$36 = cst$40,
    cst_unexpected_end_of_format = "unexpected end of format",
    cst$17 = ".",
    cst$14 = "%!",
    cst$15 = cst$37,
    cst$16 = cst$38,
    cst$8 = "%%",
    cst$0 = "@]",
    cst$1 = "@}",
    cst$2 = "@?",
    cst$3 = "@\n",
    cst$4 = "@.",
    cst$5 = "@@",
    cst$6 = "@%",
    cst$7 = "@",
    cst = ".*",
    Assert_failure = global_data.Assert_failure,
    CamlinternalFormatBasics = global_data.CamlinternalFormatBasics,
    Stdlib = global_data.Stdlib,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Char = global_data.Stdlib__Char,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_Int = global_data.Stdlib__Int,
    _a_ = [0, 0, 0],
    cst_c = "%c",
    cst_s = "%s",
    cst_i = cst_i$3,
    cst_li = cst_li$3,
    cst_ni = cst_ni$3,
    cst_Li = cst_Li$3,
    cst_f = "%f",
    cst_B = "%B",
    cst_a = "%a",
    cst_t = "%t",
    cst_r = "%r",
    cst_r$0 = "%_r",
    cst_0c = "0c",
    _b_ = [0, cst_camlinternalFormat_ml, 850, 23],
    _c_ = [0, cst_camlinternalFormat_ml, 837, 26],
    _d_ = [0, cst_camlinternalFormat_ml, 847, 28],
    _e_ = [0, cst_camlinternalFormat_ml, 815, 21],
    _f_ = [0, cst_camlinternalFormat_ml, 819, 21],
    _g_ = [0, cst_camlinternalFormat_ml, 823, 19],
    _h_ = [0, cst_camlinternalFormat_ml, 827, 22],
    _i_ = [0, cst_camlinternalFormat_ml, 832, 30],
    _j_ = [0, cst_camlinternalFormat_ml, 851, 23],
    _k_ = [0, cst_camlinternalFormat_ml, 836, 26],
    _l_ = [0, cst_camlinternalFormat_ml, 846, 28],
    _m_ = [0, cst_camlinternalFormat_ml, 814, 21],
    _n_ = [0, cst_camlinternalFormat_ml, 818, 21],
    _o_ = [0, cst_camlinternalFormat_ml, 822, 19],
    _p_ = [0, cst_camlinternalFormat_ml, 826, 22],
    _q_ = [0, cst_camlinternalFormat_ml, 831, 30];
   function create_char_set(param){return caml_call2(Stdlib_Bytes[1], 32, 0);}
   function add_in_char_set(char_set, c){
    var
     str_ind = c >>> 3 | 0,
     mask = 1 << (c & 7),
     _cU_ = runtime.caml_bytes_get(char_set, str_ind) | mask;
    return caml_bytes_set(char_set, str_ind, caml_call1(Stdlib[29], _cU_));
   }
   function freeze_char_set(char_set){
    return caml_call1(Stdlib_Bytes[6], char_set);
   }
   function rev_char_set(char_set){
    var char_set$0 = create_char_set(0), i = 0;
    for(;;){
     var _cS_ = caml_string_get(char_set, i) ^ 255;
     caml_bytes_set(char_set$0, i, caml_call1(Stdlib[29], _cS_));
     var _cT_ = i + 1 | 0;
     if(31 === i) return caml_call1(Stdlib_Bytes[48], char_set$0);
     i = _cT_;
    }
   }
   function is_in_char_set(char_set, c){
    var str_ind = c >>> 3 | 0, mask = 1 << (c & 7);
    return 0 !== (caml_string_get(char_set, str_ind) & mask) ? 1 : 0;
   }
   function pad_of_pad_opt(pad_opt){
    if(! pad_opt) return 0;
    var width = pad_opt[1];
    return [0, 1, width];
   }
   function param_format_of_ignored_format(ign, fmt){
    if(typeof ign === "number")
     switch(ign){
       case 0:
        return [0, [0, fmt]];
       case 1:
        return [0, [1, fmt]];
       case 2:
        return [0, [19, fmt]];
       default: return [0, [22, fmt]];
     }
    switch(ign[0]){
      case 0:
       var pad_opt = ign[1]; return [0, [2, pad_of_pad_opt(pad_opt), fmt]];
      case 1:
       var pad_opt$0 = ign[1];
       return [0, [3, pad_of_pad_opt(pad_opt$0), fmt]];
      case 2:
       var pad_opt$1 = ign[2], iconv = ign[1];
       return [0, [4, iconv, pad_of_pad_opt(pad_opt$1), 0, fmt]];
      case 3:
       var pad_opt$2 = ign[2], iconv$0 = ign[1];
       return [0, [5, iconv$0, pad_of_pad_opt(pad_opt$2), 0, fmt]];
      case 4:
       var pad_opt$3 = ign[2], iconv$1 = ign[1];
       return [0, [6, iconv$1, pad_of_pad_opt(pad_opt$3), 0, fmt]];
      case 5:
       var pad_opt$4 = ign[2], iconv$2 = ign[1];
       return [0, [7, iconv$2, pad_of_pad_opt(pad_opt$4), 0, fmt]];
      case 6:
       var prec_opt = ign[2], pad_opt$5 = ign[1];
       if(prec_opt)
        var ndec = prec_opt[1], _cR_ = [0, ndec];
       else
        var _cR_ = 0;
       return [0, [8, _a_, pad_of_pad_opt(pad_opt$5), _cR_, fmt]];
      case 7:
       var pad_opt$6 = ign[1];
       return [0, [9, pad_of_pad_opt(pad_opt$6), fmt]];
      case 8:
       var fmtty = ign[2], pad_opt$7 = ign[1];
       return [0, [13, pad_opt$7, fmtty, fmt]];
      case 9:
       var fmtty$0 = ign[2], pad_opt$8 = ign[1];
       return [0, [14, pad_opt$8, fmtty$0, fmt]];
      case 10:
       var char_set = ign[2], width_opt = ign[1];
       return [0, [20, width_opt, char_set, fmt]];
      default: var counter = ign[1]; return [0, [21, counter, fmt]];
    }
   }
   function default_float_precision(fconv){return 5 === fconv[2] ? 12 : -6;}
   function buffer_create(init_size){
    return [0, 0, caml_create_bytes(init_size)];
   }
   function buffer_check_size(buf, overhead){
    var
     len = runtime.caml_ml_bytes_length(buf[2]),
     min_len = buf[1] + overhead | 0;
    if(len < min_len){
     var
      new_len = caml_call2(Stdlib_Int[11], len * 2 | 0, min_len),
      new_str = caml_create_bytes(new_len);
     caml_call5(Stdlib_Bytes[11], buf[2], 0, new_str, 0, len);
     buf[2] = new_str;
    }
    return;
   }
   function buffer_add_char(buf, c){
    buffer_check_size(buf, 1);
    caml_bytes_set(buf[2], buf[1], c);
    buf[1] = buf[1] + 1 | 0;
    return;
   }
   function buffer_add_string(buf, s){
    var str_len = caml_ml_string_length(s);
    buffer_check_size(buf, str_len);
    caml_call5(Stdlib_String[48], s, 0, buf[2], buf[1], str_len);
    buf[1] = buf[1] + str_len | 0;
    return;
   }
   function buffer_contents(buf){
    return caml_call3(Stdlib_Bytes[8], buf[2], 0, buf[1]);
   }
   function char_of_iconv(iconv){
    switch(iconv){
      case 6:
      case 7:
       return 120;
      case 8:
      case 9:
       return 88;
      case 10:
      case 11:
       return 111;
      case 12:
      case 15:
       return 117;
      case 0:
      case 1:
      case 2:
      case 13:
       return 100;
      default: return 105;
    }
   }
   function char_of_fconv(opt, fconv){
    if(opt) var sth = opt[1], cF = sth; else var cF = 70;
    switch(fconv[2]){
      case 0:
       return 102;
      case 1:
       return 101;
      case 2:
       return 69;
      case 3:
       return 103;
      case 4:
       return 71;
      case 5:
       return cF;
      case 6:
       return 104;
      case 7:
       return 72;
      default: return 70;
    }
   }
   function bprint_padty(buf, padty){
    switch(padty){
      case 0:
       return buffer_add_char(buf, 45);
      case 1:
       return;
      default: return buffer_add_char(buf, 48);
    }
   }
   function bprint_ignored_flag(buf, ign_flag){
    return ign_flag ? buffer_add_char(buf, 95) : ign_flag;
   }
   function bprint_pad_opt(buf, pad_opt){
    if(! pad_opt) return;
    var width = pad_opt[1];
    return buffer_add_string(buf, caml_call1(Stdlib_Int[12], width));
   }
   function bprint_padding(buf, pad){
    if(typeof pad === "number") return;
    if(0 === pad[0]){
     var n = pad[2], padty = pad[1];
     bprint_padty(buf, padty);
     return buffer_add_string(buf, caml_call1(Stdlib_Int[12], n));
    }
    var padty$0 = pad[1];
    bprint_padty(buf, padty$0);
    return buffer_add_char(buf, 42);
   }
   function bprint_precision(buf, prec){
    if(typeof prec !== "number"){
     var n = prec[1];
     buffer_add_char(buf, 46);
     return buffer_add_string(buf, caml_call1(Stdlib_Int[12], n));
    }
    if(prec) return buffer_add_string(buf, cst);
    return;
   }
   function bprint_iconv_flag(buf, iconv){
    switch(iconv){
      case 1:
      case 4:
       return buffer_add_char(buf, 43);
      case 2:
      case 5:
       return buffer_add_char(buf, 32);
      case 7:
      case 9:
      case 11:
      case 13:
      case 14:
      case 15:
       return buffer_add_char(buf, 35);
      default: return;
    }
   }
   function bprint_altint_fmt(buf, ign_flag, iconv, pad, prec, c){
    buffer_add_char(buf, 37);
    bprint_ignored_flag(buf, ign_flag);
    bprint_iconv_flag(buf, iconv);
    bprint_padding(buf, pad);
    bprint_precision(buf, prec);
    buffer_add_char(buf, c);
    return buffer_add_char(buf, char_of_iconv(iconv));
   }
   function bprint_fconv_flag(buf, fconv){
    switch(fconv[1]){
      case 0: break;
      case 1:
       buffer_add_char(buf, 43); break;
      default: buffer_add_char(buf, 32);
    }
    if(8 <= fconv[2]) return buffer_add_char(buf, 35);
    return;
   }
   function string_of_formatting_lit(formatting_lit){
    if(typeof formatting_lit === "number")
     switch(formatting_lit){
       case 0:
        return cst$0;
       case 1:
        return cst$1;
       case 2:
        return cst$2;
       case 3:
        return cst$3;
       case 4:
        return cst$4;
       case 5:
        return cst$5;
       default: return cst$6;
     }
    switch(formatting_lit[0]){
      case 0:
       var str = formatting_lit[1]; return str;
      case 1:
       var str$0 = formatting_lit[1]; return str$0;
      default:
       var c = formatting_lit[1], _cQ_ = caml_call2(Stdlib_String[1], 1, c);
       return caml_call2(Stdlib[28], cst$7, _cQ_);
    }
   }
   function bprint_char_literal(buf, chr){
    return 37 === chr
            ? buffer_add_string(buf, cst$8)
            : buffer_add_char(buf, chr);
   }
   function bprint_string_literal(buf, str){
    var _cO_ = caml_ml_string_length(str) - 1 | 0, _cN_ = 0;
    if(_cO_ >= 0){
     var i = _cN_;
     for(;;){
      bprint_char_literal(buf, caml_string_get(str, i));
      var _cP_ = i + 1 | 0;
      if(_cO_ === i) break;
      i = _cP_;
     }
    }
    return;
   }
   function bprint_fmtty(buf, fmtty){
    var fmtty$0 = fmtty;
    for(;;){
     if(typeof fmtty$0 === "number") return;
     switch(fmtty$0[0]){
       case 0:
        var fmtty$1 = fmtty$0[1];
        buffer_add_string(buf, cst_c);
        fmtty$0 = fmtty$1;
        break;
       case 1:
        var fmtty$2 = fmtty$0[1];
        buffer_add_string(buf, cst_s);
        fmtty$0 = fmtty$2;
        break;
       case 2:
        var fmtty$3 = fmtty$0[1];
        buffer_add_string(buf, cst_i);
        fmtty$0 = fmtty$3;
        break;
       case 3:
        var fmtty$4 = fmtty$0[1];
        buffer_add_string(buf, cst_li);
        fmtty$0 = fmtty$4;
        break;
       case 4:
        var fmtty$5 = fmtty$0[1];
        buffer_add_string(buf, cst_ni);
        fmtty$0 = fmtty$5;
        break;
       case 5:
        var fmtty$6 = fmtty$0[1];
        buffer_add_string(buf, cst_Li);
        fmtty$0 = fmtty$6;
        break;
       case 6:
        var fmtty$7 = fmtty$0[1];
        buffer_add_string(buf, cst_f);
        fmtty$0 = fmtty$7;
        break;
       case 7:
        var fmtty$8 = fmtty$0[1];
        buffer_add_string(buf, cst_B);
        fmtty$0 = fmtty$8;
        break;
       case 8:
        var fmtty$9 = fmtty$0[2], sub_fmtty = fmtty$0[1];
        buffer_add_string(buf, cst$9);
        bprint_fmtty(buf, sub_fmtty);
        buffer_add_string(buf, cst$10);
        fmtty$0 = fmtty$9;
        break;
       case 9:
        var fmtty$10 = fmtty$0[3], sub_fmtty$0 = fmtty$0[1];
        buffer_add_string(buf, cst$11);
        bprint_fmtty(buf, sub_fmtty$0);
        buffer_add_string(buf, cst$12);
        fmtty$0 = fmtty$10;
        break;
       case 10:
        var fmtty$11 = fmtty$0[1];
        buffer_add_string(buf, cst_a);
        fmtty$0 = fmtty$11;
        break;
       case 11:
        var fmtty$12 = fmtty$0[1];
        buffer_add_string(buf, cst_t);
        fmtty$0 = fmtty$12;
        break;
       case 12:
        var fmtty$13 = fmtty$0[1];
        buffer_add_string(buf, cst$13);
        fmtty$0 = fmtty$13;
        break;
       case 13:
        var fmtty$14 = fmtty$0[1];
        buffer_add_string(buf, cst_r);
        fmtty$0 = fmtty$14;
        break;
       default:
        var fmtty$15 = fmtty$0[1];
        buffer_add_string(buf, cst_r$0);
        fmtty$0 = fmtty$15;
     }
    }
   }
   function int_of_custom_arity(param){
    if(! param) return 0;
    var x = param[1];
    return 1 + int_of_custom_arity(x) | 0;
   }
   function string_of_fmt(fmt){
    var buf = buffer_create(16);
    function fmtiter(fmt, ign_flag){
     var fmt$0 = fmt, ign_flag$0 = ign_flag;
     for(;;){
      if(typeof fmt$0 === "number") return;
      switch(fmt$0[0]){
        case 0:
         var rest = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         buffer_add_char(buf, 99);
         fmt$0 = rest;
         ign_flag$0 = 0;
         break;
        case 1:
         var rest$0 = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         buffer_add_char(buf, 67);
         fmt$0 = rest$0;
         ign_flag$0 = 0;
         break;
        case 2:
         var rest$1 = fmt$0[2], pad = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         bprint_padding(buf, pad);
         buffer_add_char(buf, 115);
         fmt$0 = rest$1;
         ign_flag$0 = 0;
         break;
        case 3:
         var rest$2 = fmt$0[2], pad$0 = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         bprint_padding(buf, pad$0);
         buffer_add_char(buf, 83);
         fmt$0 = rest$2;
         ign_flag$0 = 0;
         break;
        case 4:
         var
          rest$3 = fmt$0[4],
          prec = fmt$0[3],
          pad$1 = fmt$0[2],
          iconv = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         bprint_iconv_flag(buf, iconv);
         bprint_padding(buf, pad$1);
         bprint_precision(buf, prec);
         buffer_add_char(buf, char_of_iconv(iconv));
         fmt$0 = rest$3;
         ign_flag$0 = 0;
         break;
        case 5:
         var
          rest$4 = fmt$0[4],
          prec$0 = fmt$0[3],
          pad$2 = fmt$0[2],
          iconv$0 = fmt$0[1];
         bprint_altint_fmt(buf, ign_flag$0, iconv$0, pad$2, prec$0, 108);
         fmt$0 = rest$4;
         ign_flag$0 = 0;
         break;
        case 6:
         var
          rest$5 = fmt$0[4],
          prec$1 = fmt$0[3],
          pad$3 = fmt$0[2],
          iconv$1 = fmt$0[1];
         bprint_altint_fmt(buf, ign_flag$0, iconv$1, pad$3, prec$1, 110);
         fmt$0 = rest$5;
         ign_flag$0 = 0;
         break;
        case 7:
         var
          rest$6 = fmt$0[4],
          prec$2 = fmt$0[3],
          pad$4 = fmt$0[2],
          iconv$2 = fmt$0[1];
         bprint_altint_fmt(buf, ign_flag$0, iconv$2, pad$4, prec$2, 76);
         fmt$0 = rest$6;
         ign_flag$0 = 0;
         break;
        case 8:
         var
          rest$7 = fmt$0[4],
          prec$3 = fmt$0[3],
          pad$5 = fmt$0[2],
          fconv = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         bprint_fconv_flag(buf, fconv);
         bprint_padding(buf, pad$5);
         bprint_precision(buf, prec$3);
         buffer_add_char(buf, char_of_fconv(0, fconv));
         fmt$0 = rest$7;
         ign_flag$0 = 0;
         break;
        case 9:
         var rest$8 = fmt$0[2], pad$6 = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         bprint_padding(buf, pad$6);
         buffer_add_char(buf, 66);
         fmt$0 = rest$8;
         ign_flag$0 = 0;
         break;
        case 10:
         var rest$9 = fmt$0[1];
         buffer_add_string(buf, cst$14);
         fmt$0 = rest$9;
         break;
        case 11:
         var rest$10 = fmt$0[2], str = fmt$0[1];
         bprint_string_literal(buf, str);
         fmt$0 = rest$10;
         break;
        case 12:
         var rest$11 = fmt$0[2], chr = fmt$0[1];
         bprint_char_literal(buf, chr);
         fmt$0 = rest$11;
         break;
        case 13:
         var rest$12 = fmt$0[3], fmtty = fmt$0[2], pad_opt = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         bprint_pad_opt(buf, pad_opt);
         buffer_add_char(buf, 123);
         bprint_fmtty(buf, fmtty);
         buffer_add_char(buf, 37);
         buffer_add_char(buf, 125);
         fmt$0 = rest$12;
         ign_flag$0 = 0;
         break;
        case 14:
         var rest$13 = fmt$0[3], fmtty$0 = fmt$0[2], pad_opt$0 = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         bprint_pad_opt(buf, pad_opt$0);
         buffer_add_char(buf, 40);
         bprint_fmtty(buf, fmtty$0);
         buffer_add_char(buf, 37);
         buffer_add_char(buf, 41);
         fmt$0 = rest$13;
         ign_flag$0 = 0;
         break;
        case 15:
         var rest$14 = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         buffer_add_char(buf, 97);
         fmt$0 = rest$14;
         ign_flag$0 = 0;
         break;
        case 16:
         var rest$15 = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         buffer_add_char(buf, 116);
         fmt$0 = rest$15;
         ign_flag$0 = 0;
         break;
        case 17:
         var rest$16 = fmt$0[2], fmting_lit = fmt$0[1];
         bprint_string_literal(buf, string_of_formatting_lit(fmting_lit));
         fmt$0 = rest$16;
         break;
        case 18:
         var rest$17 = fmt$0[2], fmting_gen = fmt$0[1];
         if(0 === fmting_gen[0]){
          var str$0 = fmting_gen[1][2];
          buffer_add_string(buf, cst$15);
          buffer_add_string(buf, str$0);
         }
         else{
          var str$1 = fmting_gen[1][2];
          buffer_add_string(buf, cst$16);
          buffer_add_string(buf, str$1);
         }
         fmt$0 = rest$17;
         break;
        case 19:
         var rest$18 = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         buffer_add_char(buf, 114);
         fmt$0 = rest$18;
         ign_flag$0 = 0;
         break;
        case 20:
         var rest$19 = fmt$0[3], char_set = fmt$0[2], width_opt = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         bprint_pad_opt(buf, width_opt);
         var
          print_char =
            function(buf, i){
             var c = caml_call1(Stdlib[29], i);
             return 37 === c
                     ? (buffer_add_char(buf, 37), buffer_add_char(buf, 37))
                     : 64
                       === c
                       ? (buffer_add_char(buf, 37), buffer_add_char(buf, 64))
                       : buffer_add_char(buf, c);
            };
         buffer_add_char(buf, 91);
         var
          set =
            is_in_char_set(char_set, 0)
             ? (buffer_add_char(buf, 94), rev_char_set(char_set))
             : char_set;
         let set$0 = set;
         var
          is_alone =
            function(c){
             var
              after = caml_call1(Stdlib_Char[1], c + 1 | 0),
              before = caml_call1(Stdlib_Char[1], c - 1 | 0),
              _cJ_ = is_in_char_set(set$0, c);
             if(_cJ_)
              var
               _cK_ = is_in_char_set(set$0, before),
               _cL_ = _cK_ ? is_in_char_set(set$0, after) : _cK_,
               _cM_ = 1 - _cL_;
             else
              var _cM_ = _cJ_;
             return _cM_;
            };
         if(is_alone(93)) buffer_add_char(buf, 93);
         a:
         b:
         {
          c:
          {
           d:
           {
            var i = 1;
            for(;;){
             if(i >= 256) break;
             if(is_in_char_set(set, caml_call1(Stdlib[29], i))){
              var switcher = caml_call1(Stdlib[29], i) - 45 | 0;
              if(48 < switcher >>> 0){
               if(210 <= switcher) break d;
              }
              else if(46 < switcher - 1 >>> 0){
               var i$2 = i + 1 | 0;
               i = i$2;
               continue;
              }
              var i$1 = i + 1 | 0;
              if(is_in_char_set(set, caml_call1(Stdlib[29], i$1))){
               var switcher$0 = caml_call1(Stdlib[29], i$1) - 45 | 0;
               if(48 < switcher$0 >>> 0){
                if(210 <= switcher$0) break c;
               }
               else if
                (46 < switcher$0 - 1 >>> 0
                 && ! is_in_char_set(set, caml_call1(Stdlib[29], i$1 + 1 | 0))){
                print_char(buf, i$1 - 1 | 0);
                var i$5 = i$1 + 1 | 0;
                i = i$5;
                continue;
               }
               if(is_in_char_set(set, caml_call1(Stdlib[29], i$1 + 1 | 0))){
                var j = i$1 + 2 | 0, i$3 = i$1 - 1 | 0, j$0 = j;
                for(;;){
                 if(256 === j$0) break;
                 if(! is_in_char_set(set, caml_call1(Stdlib[29], j$0))) break;
                 var j$1 = j$0 + 1 | 0;
                 j$0 = j$1;
                }
                print_char(buf, i$3);
                print_char(buf, 45);
                print_char(buf, j$0 - 1 | 0);
                if(j$0 >= 256) break b;
                var i$7 = j$0 + 1 | 0;
                i = i$7;
               }
               else{
                print_char(buf, i$1 - 1 | 0);
                print_char(buf, i$1);
                var i$4 = i$1 + 2 | 0;
                i = i$4;
               }
              }
              else{
               print_char(buf, i$1 - 1 | 0);
               var i$6 = i$1 + 1 | 0;
               i = i$6;
              }
             }
             else{var i$0 = i + 1 | 0; i = i$0;}
            }
            break a;
           }
           print_char(buf, 255);
           break a;
          }
          print_char(buf, 254);
          print_char(buf, 255);
          break a;
         }
         if(is_alone(45)) buffer_add_char(buf, 45);
         buffer_add_char(buf, 93);
         fmt$0 = rest$19;
         ign_flag$0 = 0;
         break;
        case 21:
         var rest$20 = fmt$0[2], counter = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         switch(counter){
           case 0:
            var _cF_ = 108; break;
           case 1:
            var _cF_ = 110; break;
           default: var _cF_ = 78;
         }
         buffer_add_char(buf, _cF_);
         fmt$0 = rest$20;
         ign_flag$0 = 0;
         break;
        case 22:
         var rest$21 = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         bprint_string_literal(buf, cst_0c);
         fmt$0 = rest$21;
         ign_flag$0 = 0;
         break;
        case 23:
         var
          rest$22 = fmt$0[2],
          ign = fmt$0[1],
          fmt$1 = param_format_of_ignored_format(ign, rest$22)[1];
         fmt$0 = fmt$1;
         ign_flag$0 = 1;
         break;
        default:
         var
          rest$23 = fmt$0[3],
          arity = fmt$0[1],
          _cH_ = int_of_custom_arity(arity),
          _cG_ = 1;
         if(_cH_ >= 1){
          var i$8 = _cG_;
          for(;;){
           buffer_add_char(buf, 37);
           bprint_ignored_flag(buf, ign_flag$0);
           buffer_add_char(buf, 63);
           var _cI_ = i$8 + 1 | 0;
           if(_cH_ === i$8) break;
           i$8 = _cI_;
          }
         }
         fmt$0 = rest$23;
         ign_flag$0 = 0;
      }
     }
    }
    fmtiter(fmt, 0);
    return buffer_contents(buf);
   }
   function symm(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var rest = param[1]; return [0, symm(rest)];
      case 1:
       var rest$0 = param[1]; return [1, symm(rest$0)];
      case 2:
       var rest$1 = param[1]; return [2, symm(rest$1)];
      case 3:
       var rest$2 = param[1]; return [3, symm(rest$2)];
      case 4:
       var rest$3 = param[1]; return [4, symm(rest$3)];
      case 5:
       var rest$4 = param[1]; return [5, symm(rest$4)];
      case 6:
       var rest$5 = param[1]; return [6, symm(rest$5)];
      case 7:
       var rest$6 = param[1]; return [7, symm(rest$6)];
      case 8:
       var rest$7 = param[2], ty = param[1]; return [8, ty, symm(rest$7)];
      case 9:
       var rest$8 = param[3], ty2 = param[2], ty1 = param[1];
       return [9, ty2, ty1, symm(rest$8)];
      case 10:
       var rest$9 = param[1]; return [10, symm(rest$9)];
      case 11:
       var rest$10 = param[1]; return [11, symm(rest$10)];
      case 12:
       var rest$11 = param[1]; return [12, symm(rest$11)];
      case 13:
       var rest$12 = param[1]; return [13, symm(rest$12)];
      default: var rest$13 = param[1]; return [14, symm(rest$13)];
    }
   }
   function fmtty_rel_det(param){
    if(typeof param === "number")
     return [0,
             function(param){return;},
             function(param){return;},
             function(param){return;},
             function(param){return;}];
    switch(param[0]){
      case 0:
       var
        rest = param[1],
        match = fmtty_rel_det(rest),
        de = match[4],
        ed = match[3],
        af = match[2],
        fa = match[1];
       return [0,
               function(param){fa(0); return;},
               function(param){af(0); return;},
               ed,
               de];
      case 1:
       var
        rest$0 = param[1],
        match$0 = fmtty_rel_det(rest$0),
        de$0 = match$0[4],
        ed$0 = match$0[3],
        af$0 = match$0[2],
        fa$0 = match$0[1];
       return [0,
               function(param){fa$0(0); return;},
               function(param){af$0(0); return;},
               ed$0,
               de$0];
      case 2:
       var
        rest$1 = param[1],
        match$1 = fmtty_rel_det(rest$1),
        de$1 = match$1[4],
        ed$1 = match$1[3],
        af$1 = match$1[2],
        fa$1 = match$1[1];
       return [0,
               function(param){fa$1(0); return;},
               function(param){af$1(0); return;},
               ed$1,
               de$1];
      case 3:
       var
        rest$2 = param[1],
        match$2 = fmtty_rel_det(rest$2),
        de$2 = match$2[4],
        ed$2 = match$2[3],
        af$2 = match$2[2],
        fa$2 = match$2[1];
       return [0,
               function(param){fa$2(0); return;},
               function(param){af$2(0); return;},
               ed$2,
               de$2];
      case 4:
       var
        rest$3 = param[1],
        match$3 = fmtty_rel_det(rest$3),
        de$3 = match$3[4],
        ed$3 = match$3[3],
        af$3 = match$3[2],
        fa$3 = match$3[1];
       return [0,
               function(param){fa$3(0); return;},
               function(param){af$3(0); return;},
               ed$3,
               de$3];
      case 5:
       var
        rest$4 = param[1],
        match$4 = fmtty_rel_det(rest$4),
        de$4 = match$4[4],
        ed$4 = match$4[3],
        af$4 = match$4[2],
        fa$4 = match$4[1];
       return [0,
               function(param){fa$4(0); return;},
               function(param){af$4(0); return;},
               ed$4,
               de$4];
      case 6:
       var
        rest$5 = param[1],
        match$5 = fmtty_rel_det(rest$5),
        de$5 = match$5[4],
        ed$5 = match$5[3],
        af$5 = match$5[2],
        fa$5 = match$5[1];
       return [0,
               function(param){fa$5(0); return;},
               function(param){af$5(0); return;},
               ed$5,
               de$5];
      case 7:
       var
        rest$6 = param[1],
        match$6 = fmtty_rel_det(rest$6),
        de$6 = match$6[4],
        ed$6 = match$6[3],
        af$6 = match$6[2],
        fa$6 = match$6[1];
       return [0,
               function(param){fa$6(0); return;},
               function(param){af$6(0); return;},
               ed$6,
               de$6];
      case 8:
       var
        rest$7 = param[2],
        match$7 = fmtty_rel_det(rest$7),
        de$7 = match$7[4],
        ed$7 = match$7[3],
        af$7 = match$7[2],
        fa$7 = match$7[1];
       return [0,
               function(param){fa$7(0); return;},
               function(param){af$7(0); return;},
               ed$7,
               de$7];
      case 9:
       var
        rest$8 = param[3],
        ty2 = param[2],
        ty1 = param[1],
        match$8 = fmtty_rel_det(rest$8),
        de$8 = match$8[4],
        ed$8 = match$8[3],
        af$8 = match$8[2],
        fa$8 = match$8[1],
        ty = trans(symm(ty1), ty2),
        match$9 = fmtty_rel_det(ty),
        jd = match$9[4],
        dj = match$9[3],
        ga = match$9[2],
        ag = match$9[1];
       return [0,
               function(param){fa$8(0); ag(0); return;},
               function(param){ga(0); af$8(0); return;},
               function(param){ed$8(0); dj(0); return;},
               function(param){jd(0); de$8(0); return;}];
      case 10:
       var
        rest$9 = param[1],
        match$10 = fmtty_rel_det(rest$9),
        de$9 = match$10[4],
        ed$9 = match$10[3],
        af$9 = match$10[2],
        fa$9 = match$10[1];
       return [0,
               function(param){fa$9(0); return;},
               function(param){af$9(0); return;},
               ed$9,
               de$9];
      case 11:
       var
        rest$10 = param[1],
        match$11 = fmtty_rel_det(rest$10),
        de$10 = match$11[4],
        ed$10 = match$11[3],
        af$10 = match$11[2],
        fa$10 = match$11[1];
       return [0,
               function(param){fa$10(0); return;},
               function(param){af$10(0); return;},
               ed$10,
               de$10];
      case 12:
       var
        rest$11 = param[1],
        match$12 = fmtty_rel_det(rest$11),
        de$11 = match$12[4],
        ed$11 = match$12[3],
        af$11 = match$12[2],
        fa$11 = match$12[1];
       return [0,
               function(param){fa$11(0); return;},
               function(param){af$11(0); return;},
               ed$11,
               de$11];
      case 13:
       var
        rest$12 = param[1],
        match$13 = fmtty_rel_det(rest$12),
        de$12 = match$13[4],
        ed$12 = match$13[3],
        af$12 = match$13[2],
        fa$12 = match$13[1];
       return [0,
               function(param){fa$12(0); return;},
               function(param){af$12(0); return;},
               function(param){ed$12(0); return;},
               function(param){de$12(0); return;}];
      default:
       var
        rest$13 = param[1],
        match$14 = fmtty_rel_det(rest$13),
        de$13 = match$14[4],
        ed$13 = match$14[3],
        af$13 = match$14[2],
        fa$13 = match$14[1];
       return [0,
               function(param){fa$13(0); return;},
               function(param){af$13(0); return;},
               function(param){ed$13(0); return;},
               function(param){de$13(0); return;}];
    }
   }
   function trans(ty1, ty2){
    a:
    {
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           if(typeof ty1 !== "number"){
            switch(ty1[0]){
              case 0:
               var rest1 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 0:
                   var rest2 = ty2[1]; return [0, trans(rest1, rest2)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 1:
               var rest1$0 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 1:
                   var rest2$0 = ty2[1]; return [1, trans(rest1$0, rest2$0)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 2:
               var rest1$1 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 2:
                   var rest2$1 = ty2[1]; return [2, trans(rest1$1, rest2$1)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 3:
               var rest1$2 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 3:
                   var rest2$2 = ty2[1]; return [3, trans(rest1$2, rest2$2)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 4:
               var rest1$3 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 4:
                   var rest2$3 = ty2[1]; return [4, trans(rest1$3, rest2$3)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 5:
               var rest1$4 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 5:
                   var rest2$4 = ty2[1]; return [5, trans(rest1$4, rest2$4)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 6:
               var rest1$5 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 6:
                   var rest2$5 = ty2[1]; return [6, trans(rest1$5, rest2$5)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 7:
               var rest1$6 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 7:
                   var rest2$6 = ty2[1]; return [7, trans(rest1$6, rest2$6)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 8:
               var rest1$7 = ty1[2], ty1$0 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 8:
                   var
                    rest2$7 = ty2[2],
                    ty2$0 = ty2[1],
                    _cE_ = trans(rest1$7, rest2$7);
                   return [8, trans(ty1$0, ty2$0), _cE_];
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _k_], 1);
              case 9:
               var rest1$8 = ty1[3], ty12 = ty1[2], ty11 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 8:
                   break f;
                  case 9:
                   var
                    rest2$8 = ty2[3],
                    ty22 = ty2[2],
                    ty21 = ty2[1],
                    ty = trans(symm(ty12), ty21),
                    match = fmtty_rel_det(ty),
                    f4 = match[4],
                    f2 = match[2];
                   f2(0);
                   f4(0);
                   return [9, ty11, ty22, trans(rest1$8, rest2$8)];
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _l_], 1);
              case 10:
               var rest1$9 = ty1[1];
               if(typeof ty2 !== "number" && 10 === ty2[0]){
                var rest2$9 = ty2[1];
                return [10, trans(rest1$9, rest2$9)];
               }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _m_], 1);
              case 11:
               var rest1$10 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 10:
                   break a;
                  case 11:
                   var rest2$10 = ty2[1];
                   return [11, trans(rest1$10, rest2$10)];
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _n_], 1);
              case 12:
               var rest1$11 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   var rest2$11 = ty2[1];
                   return [12, trans(rest1$11, rest2$11)];
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _o_], 1);
              case 13:
               var rest1$12 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   var rest2$12 = ty2[1];
                   return [13, trans(rest1$12, rest2$12)];
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _p_], 1);
              default:
               var rest1$13 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   var rest2$13 = ty2[1];
                   return [14, trans(rest1$13, rest2$13)];
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _q_], 1);
            }
            throw caml_maybe_attach_backtrace([0, Assert_failure, _j_], 1);
           }
           if(typeof ty2 === "number") return 0;
           switch(ty2[0]){
             case 10:
              break a;
             case 11:
              break b;
             case 12:
              break c;
             case 13:
              break d;
             case 14:
              break e;
             case 8:
              break f;
             case 9: break;
             default:
              throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
           }
          }
          throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
         }
         throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
        }
        throw caml_maybe_attach_backtrace([0, Assert_failure, _i_], 1);
       }
       throw caml_maybe_attach_backtrace([0, Assert_failure, _h_], 1);
      }
      throw caml_maybe_attach_backtrace([0, Assert_failure, _g_], 1);
     }
     throw caml_maybe_attach_backtrace([0, Assert_failure, _f_], 1);
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
   }
   function fmtty_of_fmt(fmtty){
    var fmtty$0 = fmtty;
    for(;;){
     if(typeof fmtty$0 === "number") return 0;
     switch(fmtty$0[0]){
       case 0:
        var rest = fmtty$0[1]; return [0, fmtty_of_fmt(rest)];
       case 1:
        var rest$0 = fmtty$0[1]; return [0, fmtty_of_fmt(rest$0)];
       case 2:
        var rest$1 = fmtty$0[2], pad = fmtty$0[1];
        return fmtty_of_padding_fmtty(pad, [1, fmtty_of_fmt(rest$1)]);
       case 3:
        var rest$2 = fmtty$0[2], pad$0 = fmtty$0[1];
        return fmtty_of_padding_fmtty(pad$0, [1, fmtty_of_fmt(rest$2)]);
       case 4:
        var
         rest$3 = fmtty$0[4],
         prec = fmtty$0[3],
         pad$1 = fmtty$0[2],
         ty_rest = fmtty_of_fmt(rest$3),
         prec_ty = fmtty_of_precision_fmtty(prec, [2, ty_rest]);
        return fmtty_of_padding_fmtty(pad$1, prec_ty);
       case 5:
        var
         rest$4 = fmtty$0[4],
         prec$0 = fmtty$0[3],
         pad$2 = fmtty$0[2],
         ty_rest$0 = fmtty_of_fmt(rest$4),
         prec_ty$0 = fmtty_of_precision_fmtty(prec$0, [3, ty_rest$0]);
        return fmtty_of_padding_fmtty(pad$2, prec_ty$0);
       case 6:
        var
         rest$5 = fmtty$0[4],
         prec$1 = fmtty$0[3],
         pad$3 = fmtty$0[2],
         ty_rest$1 = fmtty_of_fmt(rest$5),
         prec_ty$1 = fmtty_of_precision_fmtty(prec$1, [4, ty_rest$1]);
        return fmtty_of_padding_fmtty(pad$3, prec_ty$1);
       case 7:
        var
         rest$6 = fmtty$0[4],
         prec$2 = fmtty$0[3],
         pad$4 = fmtty$0[2],
         ty_rest$2 = fmtty_of_fmt(rest$6),
         prec_ty$2 = fmtty_of_precision_fmtty(prec$2, [5, ty_rest$2]);
        return fmtty_of_padding_fmtty(pad$4, prec_ty$2);
       case 8:
        var
         rest$7 = fmtty$0[4],
         prec$3 = fmtty$0[3],
         pad$5 = fmtty$0[2],
         ty_rest$3 = fmtty_of_fmt(rest$7),
         prec_ty$3 = fmtty_of_precision_fmtty(prec$3, [6, ty_rest$3]);
        return fmtty_of_padding_fmtty(pad$5, prec_ty$3);
       case 9:
        var rest$8 = fmtty$0[2], pad$6 = fmtty$0[1];
        return fmtty_of_padding_fmtty(pad$6, [7, fmtty_of_fmt(rest$8)]);
       case 10:
        var fmtty$1 = fmtty$0[1]; fmtty$0 = fmtty$1; break;
       case 11:
        var fmtty$2 = fmtty$0[2]; fmtty$0 = fmtty$2; break;
       case 12:
        var fmtty$3 = fmtty$0[2]; fmtty$0 = fmtty$3; break;
       case 13:
        var rest$9 = fmtty$0[3], ty = fmtty$0[2];
        return [8, ty, fmtty_of_fmt(rest$9)];
       case 14:
        var rest$10 = fmtty$0[3], ty$0 = fmtty$0[2];
        return [9, ty$0, ty$0, fmtty_of_fmt(rest$10)];
       case 15:
        var rest$11 = fmtty$0[1]; return [10, fmtty_of_fmt(rest$11)];
       case 16:
        var rest$12 = fmtty$0[1]; return [11, fmtty_of_fmt(rest$12)];
       case 17:
        var fmtty$4 = fmtty$0[2]; fmtty$0 = fmtty$4; break;
       case 18:
        var
         rest$13 = fmtty$0[2],
         formatting_gen = fmtty$0[1],
         _cB_ = fmtty_of_fmt(rest$13);
        if(0 === formatting_gen[0])
         var fmt = formatting_gen[1][1], _cC_ = fmtty_of_fmt(fmt);
        else
         var fmt$0 = formatting_gen[1][1], _cC_ = fmtty_of_fmt(fmt$0);
        return caml_call2(CamlinternalFormatBasics[1], _cC_, _cB_);
       case 19:
        var rest$14 = fmtty$0[1]; return [13, fmtty_of_fmt(rest$14)];
       case 20:
        var rest$15 = fmtty$0[3]; return [1, fmtty_of_fmt(rest$15)];
       case 21:
        var rest$16 = fmtty$0[2]; return [2, fmtty_of_fmt(rest$16)];
       case 22:
        var rest$17 = fmtty$0[1]; return [0, fmtty_of_fmt(rest$17)];
       case 23:
        var fmtty$5 = fmtty$0[2], ign = fmtty$0[1];
        if(typeof ign === "number")
         switch(ign){
           case 0:
            fmtty$0 = fmtty$5; break;
           case 1:
            fmtty$0 = fmtty$5; break;
           case 2:
            return [14, fmtty_of_fmt(fmtty$5)];
           default: fmtty$0 = fmtty$5;
         }
        else
         switch(ign[0]){
           case 0:
            fmtty$0 = fmtty$5; break;
           case 1:
            fmtty$0 = fmtty$5; break;
           case 2:
            fmtty$0 = fmtty$5; break;
           case 3:
            fmtty$0 = fmtty$5; break;
           case 4:
            fmtty$0 = fmtty$5; break;
           case 5:
            fmtty$0 = fmtty$5; break;
           case 6:
            fmtty$0 = fmtty$5; break;
           case 7:
            fmtty$0 = fmtty$5; break;
           case 8:
            fmtty$0 = fmtty$5; break;
           case 9:
            var fmtty$6 = ign[2], _cD_ = fmtty_of_fmt(fmtty$5);
            return caml_call2(CamlinternalFormatBasics[1], fmtty$6, _cD_);
           case 10:
            fmtty$0 = fmtty$5; break;
           default: fmtty$0 = fmtty$5;
         }
        break;
       default:
        var rest$18 = fmtty$0[3], arity = fmtty$0[1];
        return fmtty_of_custom(arity, fmtty_of_fmt(rest$18));
     }
    }
   }
   function fmtty_of_custom(arity, fmtty){
    if(! arity) return fmtty;
    var arity$0 = arity[1];
    return [12, fmtty_of_custom(arity$0, fmtty)];
   }
   function fmtty_of_padding_fmtty(pad, fmtty){
    return typeof pad === "number" ? fmtty : 0 === pad[0] ? fmtty : [2, fmtty];
   }
   function fmtty_of_precision_fmtty(prec, fmtty){
    return typeof prec === "number" ? prec ? [2, fmtty] : fmtty : fmtty;
   }
   var
    Type_mismatch =
      [248, "CamlinternalFormat.Type_mismatch", runtime.caml_fresh_oo_id(0)],
    cst_d = "%d",
    cst_d$0 = "%+d",
    cst_d$1 = "% d",
    cst_i$0 = cst_i$3,
    cst_i$1 = "%+i",
    cst_i$2 = "% i",
    cst_x = "%x",
    cst_x$0 = "%#x",
    cst_X = "%X",
    cst_X$0 = "%#X",
    cst_o = "%o",
    cst_o$0 = "%#o",
    cst_u = cst_u$0,
    cst_Ld = "%Ld",
    cst_Ld$0 = "%+Ld",
    cst_Ld$1 = "% Ld",
    cst_Li$0 = cst_Li$3,
    cst_Li$1 = "%+Li",
    cst_Li$2 = "% Li",
    cst_Lx = "%Lx",
    cst_Lx$0 = "%#Lx",
    cst_LX = "%LX",
    cst_LX$0 = "%#LX",
    cst_Lo = "%Lo",
    cst_Lo$0 = "%#Lo",
    cst_Lu = "%Lu",
    cst_ld = "%ld",
    cst_ld$0 = "%+ld",
    cst_ld$1 = "% ld",
    cst_li$0 = cst_li$3,
    cst_li$1 = "%+li",
    cst_li$2 = "% li",
    cst_lx = "%lx",
    cst_lx$0 = "%#lx",
    cst_lX = "%lX",
    cst_lX$0 = "%#lX",
    cst_lo = "%lo",
    cst_lo$0 = "%#lo",
    cst_lu = "%lu",
    cst_nd = "%nd",
    cst_nd$0 = "%+nd",
    cst_nd$1 = "% nd",
    cst_ni$0 = cst_ni$3,
    cst_ni$1 = "%+ni",
    cst_ni$2 = "% ni",
    cst_nx = "%nx",
    cst_nx$0 = "%#nx",
    cst_nX = "%nX",
    cst_nX$0 = "%#nX",
    cst_no = "%no",
    cst_no$0 = "%#no",
    cst_nu = "%nu",
    _r_ = [0, 103],
    cst_neg_infinity = "neg_infinity",
    cst_infinity = "infinity",
    cst_nan = "nan",
    _s_ = [0, cst_camlinternalFormat_ml, 1558, 4],
    cst_Printf_bad_conversion = "Printf: bad conversion %[",
    _t_ = [0, cst_camlinternalFormat_ml, 1626, 39],
    _u_ = [0, cst_camlinternalFormat_ml, 1649, 31],
    _v_ = [0, cst_camlinternalFormat_ml, 1650, 31],
    cst_Printf_bad_conversion$0 = "Printf: bad conversion %_",
    _w_ = [0, cst_camlinternalFormat_ml, 1830, 8],
    _x_ = [0, 0, 4],
    _y_ =
      [0,
       [11, "invalid box description ", [3, 0, 0]],
       "invalid box description %S"],
    _z_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11, cst_at_character_number, [4, 0, 0, 0, [11, cst$44, [2, 0, 0]]]]]],
       "invalid format %S: at character number %d, %s"],
    cst_non_zero_widths_are_unsupp =
      "non-zero widths are unsupported for %c conversions",
    _A_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          cst_at_character_number,
          [4, 0, 0, 0, [11, ", '", [0, [11, "' without ", [2, 0, 0]]]]]]]],
       "invalid format %S: at character number %d, '%c' without %s"],
    _B_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          cst_at_character_number,
          [4, 0, 0, 0, [11, cst$44, [2, 0, [11, " expected, read ", [1, 0]]]]]]]],
       "invalid format %S: at character number %d, %s expected, read %C"],
    _C_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          cst_at_character_number,
          [4, 0, 0, 0, [11, ", duplicate flag ", [1, 0]]]]]],
       "invalid format %S: at character number %d, duplicate flag %C"],
    cst_padding = "padding",
    _D_ = [0, 1, 0],
    cst_0 = cst_0$3,
    _E_ = [0, 0],
    cst_precision = cst_precision$3,
    _F_ = [1, 0],
    _G_ = [1, 1],
    cst_precision$0 = cst_precision$3,
    _H_ = [1, 1],
    cst_precision$1 = cst_precision$3,
    cst_0$0 = cst_0$3,
    _I_ = [1, 1],
    cst_0$1 = cst_0$3,
    cst_0$2 = "'0'",
    _J_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          cst_at_character_number,
          [4,
           0,
           0,
           0,
           [11, ', invalid conversion "', [12, 37, [0, [12, 34, 0]]]]]]]],
       'invalid format %S: at character number %d, invalid conversion "%%%c"'],
    _K_ = [0, 0],
    cst_padding$0 = "`padding'",
    _L_ = [0, 0],
    cst_precision$2 = "`precision'",
    _M_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          cst_at_character_number,
          [4,
           0,
           0,
           0,
           [11,
            ", flag ",
            [1,
             [11,
              " is only allowed after the '",
              [12, 37, [11, "', before padding and precision", 0]]]]]]]]],
       "invalid format %S: at character number %d, flag %C is only allowed after the '%%', before padding and precision"],
    _N_ = [0, [12, 64, 0]],
    _O_ = [0, "@ ", 1, 0],
    _P_ = [0, "@,", 0, 0],
    _Q_ = [2, 60],
    _R_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          ": '",
          [12,
           37,
           [11,
            "' alone is not accepted in character sets, use ",
            [12,
             37,
             [12,
              37,
              [11, " instead at position ", [4, 0, 0, 0, [12, 46, 0]]]]]]]]]],
       "invalid format %S: '%%' alone is not accepted in character sets, use %%%% instead at position %d."],
    _S_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          ": integer ",
          [4, 0, 0, 0, [11, " is greater than the limit ", [4, 0, 0, 0, 0]]]]]],
       "invalid format %S: integer %d is greater than the limit %d"],
    _T_ = [0, cst_camlinternalFormat_ml, 2837, 11],
    cst_digit = "digit",
    _U_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          ': unclosed sub-format, expected "',
          [12, 37, [0, [11, '" at character number ', [4, 0, 0, 0, 0]]]]]]],
       'invalid format %S: unclosed sub-format, expected "%%%c" at character number %d'],
    cst_character = "character ')'",
    cst_character$0 = "character '}'",
    _V_ = [0, cst_camlinternalFormat_ml, 2899, 34],
    _W_ = [0, cst_camlinternalFormat_ml, 2935, 28],
    _X_ = [0, cst_camlinternalFormat_ml, 2957, 11],
    _Y_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          cst_at_character_number,
          [4,
           0,
           0,
           0,
           [11,
            cst$44,
            [2,
             0,
             [11,
              " is incompatible with '",
              [0, [11, "' in sub-format ", [3, 0, 0]]]]]]]]]],
       "invalid format %S: at character number %d, %s is incompatible with '%c' in sub-format %S"],
    _Z_ =
      [0,
       [11, cst_bad_input_format_type_mism, [3, 0, [11, cst_and, [3, 0, 0]]]],
       cst_bad_input_format_type_mism$0],
    ___ =
      [0,
       [11, cst_bad_input_format_type_mism, [3, 0, [11, cst_and, [3, 0, 0]]]],
       cst_bad_input_format_type_mism$0];
   function type_padding(pad, fmtty){
    if(typeof pad === "number") return [0, 0, fmtty];
    if(0 === pad[0]){
     var w = pad[2], padty = pad[1];
     return [0, [0, padty, w], fmtty];
    }
    if(typeof fmtty !== "number" && 2 === fmtty[0]){
     var rest = fmtty[1], padty$0 = pad[1];
     return [0, [1, padty$0], rest];
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function type_padprec(pad, prec, fmtty){
    var match = type_padding(pad, fmtty);
    if(typeof prec !== "number"){
     var rest$1 = match[2], pad$2 = match[1], p = prec[1];
     return [0, pad$2, [0, p], rest$1];
    }
    if(! prec){
     var rest$0 = match[2], pad$1 = match[1];
     return [0, pad$1, 0, rest$0];
    }
    var match$0 = match[2];
    if(typeof match$0 !== "number" && 2 === match$0[0]){
     var rest = match$0[1], pad$0 = match[1];
     return [0, pad$0, 1, rest];
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function type_format(fmt, fmtty){
    var _cA_ = type_format_gen(fmt, fmtty);
    if(typeof _cA_[2] !== "number")
     throw caml_maybe_attach_backtrace(Type_mismatch, 1);
    var fmt$0 = _cA_[1];
    return fmt$0;
   }
   function type_format_gen(fmt, fmtty0){
    if(typeof fmt === "number") return [0, 0, fmtty0];
    switch(fmt[0]){
      case 0:
       if(typeof fmtty0 !== "number" && 0 === fmtty0[0]){
        var
         fmtty_rest = fmtty0[1],
         fmt_rest = fmt[1],
         match = type_format_gen(fmt_rest, fmtty_rest),
         fmtty = match[2],
         fmt$0 = match[1];
        return [0, [0, fmt$0], fmtty];
       }
       break;
      case 1:
       if(typeof fmtty0 !== "number" && 0 === fmtty0[0]){
        var
         fmtty_rest$0 = fmtty0[1],
         fmt_rest$0 = fmt[1],
         match$0 = type_format_gen(fmt_rest$0, fmtty_rest$0),
         fmtty$0 = match$0[2],
         fmt$1 = match$0[1];
        return [0, [1, fmt$1], fmtty$0];
       }
       break;
      case 2:
       var
        fmt_rest$1 = fmt[2],
        pad = fmt[1],
        match$1 = type_padding(pad, fmtty0),
        pad$0 = match$1[1],
        match$2 = match$1[2];
       if(typeof match$2 !== "number" && 1 === match$2[0]){
        var
         fmtty_rest$1 = match$2[1],
         match$3 = type_format_gen(fmt_rest$1, fmtty_rest$1),
         fmtty$1 = match$3[2],
         fmt$2 = match$3[1];
        return [0, [2, pad$0, fmt$2], fmtty$1];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 3:
       var
        fmt_rest$2 = fmt[2],
        pad$1 = fmt[1],
        match$4 = type_padding(pad$1, fmtty0),
        pad$2 = match$4[1],
        match$5 = match$4[2];
       if(typeof match$5 !== "number" && 1 === match$5[0]){
        var
         fmtty_rest$2 = match$5[1],
         match$6 = type_format_gen(fmt_rest$2, fmtty_rest$2),
         fmtty$2 = match$6[2],
         fmt$3 = match$6[1];
        return [0, [3, pad$2, fmt$3], fmtty$2];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 4:
       var
        fmt_rest$3 = fmt[4],
        prec = fmt[3],
        pad$3 = fmt[2],
        iconv = fmt[1],
        match$7 = type_padprec(pad$3, prec, fmtty0),
        pad$4 = match$7[1],
        match$8 = match$7[3];
       if(typeof match$8 !== "number" && 2 === match$8[0]){
        var
         fmtty_rest$3 = match$8[1],
         prec$0 = match$7[2],
         match$9 = type_format_gen(fmt_rest$3, fmtty_rest$3),
         fmtty$3 = match$9[2],
         fmt$4 = match$9[1];
        return [0, [4, iconv, pad$4, prec$0, fmt$4], fmtty$3];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 5:
       var
        fmt_rest$4 = fmt[4],
        prec$1 = fmt[3],
        pad$5 = fmt[2],
        iconv$0 = fmt[1],
        match$10 = type_padprec(pad$5, prec$1, fmtty0),
        pad$6 = match$10[1],
        match$11 = match$10[3];
       if(typeof match$11 !== "number" && 3 === match$11[0]){
        var
         fmtty_rest$4 = match$11[1],
         prec$2 = match$10[2],
         match$12 = type_format_gen(fmt_rest$4, fmtty_rest$4),
         fmtty$4 = match$12[2],
         fmt$5 = match$12[1];
        return [0, [5, iconv$0, pad$6, prec$2, fmt$5], fmtty$4];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 6:
       var
        fmt_rest$5 = fmt[4],
        prec$3 = fmt[3],
        pad$7 = fmt[2],
        iconv$1 = fmt[1],
        match$13 = type_padprec(pad$7, prec$3, fmtty0),
        pad$8 = match$13[1],
        match$14 = match$13[3];
       if(typeof match$14 !== "number" && 4 === match$14[0]){
        var
         fmtty_rest$5 = match$14[1],
         prec$4 = match$13[2],
         match$15 = type_format_gen(fmt_rest$5, fmtty_rest$5),
         fmtty$5 = match$15[2],
         fmt$6 = match$15[1];
        return [0, [6, iconv$1, pad$8, prec$4, fmt$6], fmtty$5];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 7:
       var
        fmt_rest$6 = fmt[4],
        prec$5 = fmt[3],
        pad$9 = fmt[2],
        iconv$2 = fmt[1],
        match$16 = type_padprec(pad$9, prec$5, fmtty0),
        pad$10 = match$16[1],
        match$17 = match$16[3];
       if(typeof match$17 !== "number" && 5 === match$17[0]){
        var
         fmtty_rest$6 = match$17[1],
         prec$6 = match$16[2],
         match$18 = type_format_gen(fmt_rest$6, fmtty_rest$6),
         fmtty$6 = match$18[2],
         fmt$7 = match$18[1];
        return [0, [7, iconv$2, pad$10, prec$6, fmt$7], fmtty$6];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 8:
       var
        fmt_rest$7 = fmt[4],
        prec$7 = fmt[3],
        pad$11 = fmt[2],
        fconv = fmt[1],
        match$19 = type_padprec(pad$11, prec$7, fmtty0),
        pad$12 = match$19[1],
        match$20 = match$19[3];
       if(typeof match$20 !== "number" && 6 === match$20[0]){
        var
         fmtty_rest$7 = match$20[1],
         prec$8 = match$19[2],
         match$21 = type_format_gen(fmt_rest$7, fmtty_rest$7),
         fmtty$7 = match$21[2],
         fmt$8 = match$21[1];
        return [0, [8, fconv, pad$12, prec$8, fmt$8], fmtty$7];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 9:
       var
        fmt_rest$8 = fmt[2],
        pad$13 = fmt[1],
        match$22 = type_padding(pad$13, fmtty0),
        pad$14 = match$22[1],
        match$23 = match$22[2];
       if(typeof match$23 !== "number" && 7 === match$23[0]){
        var
         fmtty_rest$8 = match$23[1],
         match$24 = type_format_gen(fmt_rest$8, fmtty_rest$8),
         fmtty$8 = match$24[2],
         fmt$9 = match$24[1];
        return [0, [9, pad$14, fmt$9], fmtty$8];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 10:
       var
        fmt_rest$9 = fmt[1],
        match$25 = type_format_gen(fmt_rest$9, fmtty0),
        fmtty$9 = match$25[2],
        fmt$10 = match$25[1];
       return [0, [10, fmt$10], fmtty$9];
      case 11:
       var
        fmt_rest$10 = fmt[2],
        str = fmt[1],
        match$26 = type_format_gen(fmt_rest$10, fmtty0),
        fmtty$10 = match$26[2],
        fmt$11 = match$26[1];
       return [0, [11, str, fmt$11], fmtty$10];
      case 12:
       var
        fmt_rest$11 = fmt[2],
        chr = fmt[1],
        match$27 = type_format_gen(fmt_rest$11, fmtty0),
        fmtty$11 = match$27[2],
        fmt$12 = match$27[1];
       return [0, [12, chr, fmt$12], fmtty$11];
      case 13:
       if(typeof fmtty0 !== "number" && 8 === fmtty0[0]){
        var
         fmtty_rest$9 = fmtty0[2],
         sub_fmtty = fmtty0[1],
         fmt_rest$12 = fmt[3],
         sub_fmtty$0 = fmt[2],
         pad_opt = fmt[1];
        if(caml_notequal([0, sub_fmtty$0], [0, sub_fmtty]))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         match$28 = type_format_gen(fmt_rest$12, fmtty_rest$9),
         fmtty$12 = match$28[2],
         fmt$13 = match$28[1];
        return [0, [13, pad_opt, sub_fmtty, fmt$13], fmtty$12];
       }
       break;
      case 14:
       if(typeof fmtty0 !== "number" && 9 === fmtty0[0]){
        var
         fmtty_rest$10 = fmtty0[3],
         sub_fmtty1 = fmtty0[1],
         fmt_rest$13 = fmt[3],
         sub_fmtty$1 = fmt[2],
         pad_opt$0 = fmt[1],
         _cy_ = [0, caml_call1(CamlinternalFormatBasics[2], sub_fmtty1)];
        if
         (caml_notequal
           ([0, caml_call1(CamlinternalFormatBasics[2], sub_fmtty$1)], _cy_))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         match$29 =
           type_format_gen
            (fmt_rest$13,
             caml_call1(CamlinternalFormatBasics[2], fmtty_rest$10)),
         fmtty$13 = match$29[2],
         fmt$14 = match$29[1];
        return [0, [14, pad_opt$0, sub_fmtty1, fmt$14], fmtty$13];
       }
       break;
      case 15:
       if(typeof fmtty0 !== "number" && 10 === fmtty0[0]){
        var
         fmtty_rest$11 = fmtty0[1],
         fmt_rest$14 = fmt[1],
         match$30 = type_format_gen(fmt_rest$14, fmtty_rest$11),
         fmtty$14 = match$30[2],
         fmt$15 = match$30[1];
        return [0, [15, fmt$15], fmtty$14];
       }
       break;
      case 16:
       if(typeof fmtty0 !== "number" && 11 === fmtty0[0]){
        var
         fmtty_rest$12 = fmtty0[1],
         fmt_rest$15 = fmt[1],
         match$31 = type_format_gen(fmt_rest$15, fmtty_rest$12),
         fmtty$15 = match$31[2],
         fmt$16 = match$31[1];
        return [0, [16, fmt$16], fmtty$15];
       }
       break;
      case 17:
       var
        fmt_rest$16 = fmt[2],
        formatting_lit = fmt[1],
        match$32 = type_format_gen(fmt_rest$16, fmtty0),
        fmtty$16 = match$32[2],
        fmt$17 = match$32[1];
       return [0, [17, formatting_lit, fmt$17], fmtty$16];
      case 18:
       var fmt_rest$17 = fmt[2], formatting_gen = fmt[1];
       if(0 === formatting_gen[0]){
        var
         match$36 = formatting_gen[1],
         str$0 = match$36[2],
         fmt1 = match$36[1],
         match$37 = type_format_gen(fmt1, fmtty0),
         fmtty2 = match$37[2],
         fmt2 = match$37[1],
         match$38 = type_format_gen(fmt_rest$17, fmtty2),
         fmtty3 = match$38[2],
         fmt3 = match$38[1];
        return [0, [18, [0, [0, fmt2, str$0]], fmt3], fmtty3];
       }
       var
        match$39 = formatting_gen[1],
        str$1 = match$39[2],
        fmt1$0 = match$39[1],
        match$40 = type_format_gen(fmt1$0, fmtty0),
        fmtty2$0 = match$40[2],
        fmt2$0 = match$40[1],
        match$41 = type_format_gen(fmt_rest$17, fmtty2$0),
        fmtty3$0 = match$41[2],
        fmt3$0 = match$41[1];
       return [0, [18, [1, [0, fmt2$0, str$1]], fmt3$0], fmtty3$0];
      case 19:
       if(typeof fmtty0 !== "number" && 13 === fmtty0[0]){
        var
         fmtty_rest$13 = fmtty0[1],
         fmt_rest$18 = fmt[1],
         match$33 = type_format_gen(fmt_rest$18, fmtty_rest$13),
         fmtty$17 = match$33[2],
         fmt$18 = match$33[1];
        return [0, [19, fmt$18], fmtty$17];
       }
       break;
      case 20:
       if(typeof fmtty0 !== "number" && 1 === fmtty0[0]){
        var
         fmtty_rest$14 = fmtty0[1],
         fmt_rest$19 = fmt[3],
         char_set = fmt[2],
         width_opt = fmt[1],
         match$34 = type_format_gen(fmt_rest$19, fmtty_rest$14),
         fmtty$18 = match$34[2],
         fmt$19 = match$34[1];
        return [0, [20, width_opt, char_set, fmt$19], fmtty$18];
       }
       break;
      case 21:
       if(typeof fmtty0 !== "number" && 2 === fmtty0[0]){
        var
         fmtty_rest$15 = fmtty0[1],
         fmt_rest$20 = fmt[2],
         counter = fmt[1],
         match$35 = type_format_gen(fmt_rest$20, fmtty_rest$15),
         fmtty$19 = match$35[2],
         fmt$20 = match$35[1];
        return [0, [21, counter, fmt$20], fmtty$19];
       }
       break;
      case 23:
       var rest = fmt[2], ign = fmt[1];
       if(typeof ign !== "number")
        switch(ign[0]){
          case 0:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 1:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 2:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 3:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 4:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 5:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 6:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 7:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 8:
           var sub_fmtty$2 = ign[2], pad_opt$1 = ign[1];
           return type_ignored_param_one
                   ([8, pad_opt$1, sub_fmtty$2], rest, fmtty0);
          case 9:
           var
            sub_fmtty$3 = ign[2],
            pad_opt$2 = ign[1],
            _cz_ = type_ignored_format_substituti(sub_fmtty$3, rest, fmtty0),
            match$43 = _cz_[2],
            fmtty$21 = match$43[2],
            fmt$22 = match$43[1],
            sub_fmtty$4 = _cz_[1];
           return [0, [23, [9, pad_opt$2, sub_fmtty$4], fmt$22], fmtty$21];
          case 10:
           return type_ignored_param_one(ign, rest, fmtty0);
          default: return type_ignored_param_one(ign, rest, fmtty0);
        }
       switch(ign){
         case 0:
          return type_ignored_param_one(ign, rest, fmtty0);
         case 1:
          return type_ignored_param_one(ign, rest, fmtty0);
         case 2:
          if(typeof fmtty0 !== "number" && 14 === fmtty0[0]){
           var
            fmtty_rest$16 = fmtty0[1],
            match$42 = type_format_gen(rest, fmtty_rest$16),
            fmtty$20 = match$42[2],
            fmt$21 = match$42[1];
           return [0, [23, 2, fmt$21], fmtty$20];
          }
          throw caml_maybe_attach_backtrace(Type_mismatch, 1);
         default: return type_ignored_param_one(ign, rest, fmtty0);
       }
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function type_ignored_param_one(ign, fmt, fmtty){
    var
     match = type_format_gen(fmt, fmtty),
     fmtty$0 = match[2],
     fmt$0 = match[1];
    return [0, [23, ign, fmt$0], fmtty$0];
   }
   function type_ignored_format_substituti(sub_fmtty, fmt, fmtty){
    if(typeof sub_fmtty === "number")
     return [0, 0, type_format_gen(fmt, fmtty)];
    switch(sub_fmtty[0]){
      case 0:
       if(typeof fmtty !== "number" && 0 === fmtty[0]){
        var
         fmtty_rest = fmtty[1],
         sub_fmtty_rest = sub_fmtty[1],
         match =
           type_ignored_format_substituti(sub_fmtty_rest, fmt, fmtty_rest),
         fmt$0 = match[2],
         sub_fmtty_rest$0 = match[1];
        return [0, [0, sub_fmtty_rest$0], fmt$0];
       }
       break;
      case 1:
       if(typeof fmtty !== "number" && 1 === fmtty[0]){
        var
         fmtty_rest$0 = fmtty[1],
         sub_fmtty_rest$1 = sub_fmtty[1],
         match$0 =
           type_ignored_format_substituti(sub_fmtty_rest$1, fmt, fmtty_rest$0),
         fmt$1 = match$0[2],
         sub_fmtty_rest$2 = match$0[1];
        return [0, [1, sub_fmtty_rest$2], fmt$1];
       }
       break;
      case 2:
       if(typeof fmtty !== "number" && 2 === fmtty[0]){
        var
         fmtty_rest$1 = fmtty[1],
         sub_fmtty_rest$3 = sub_fmtty[1],
         match$1 =
           type_ignored_format_substituti(sub_fmtty_rest$3, fmt, fmtty_rest$1),
         fmt$2 = match$1[2],
         sub_fmtty_rest$4 = match$1[1];
        return [0, [2, sub_fmtty_rest$4], fmt$2];
       }
       break;
      case 3:
       if(typeof fmtty !== "number" && 3 === fmtty[0]){
        var
         fmtty_rest$2 = fmtty[1],
         sub_fmtty_rest$5 = sub_fmtty[1],
         match$2 =
           type_ignored_format_substituti(sub_fmtty_rest$5, fmt, fmtty_rest$2),
         fmt$3 = match$2[2],
         sub_fmtty_rest$6 = match$2[1];
        return [0, [3, sub_fmtty_rest$6], fmt$3];
       }
       break;
      case 4:
       if(typeof fmtty !== "number" && 4 === fmtty[0]){
        var
         fmtty_rest$3 = fmtty[1],
         sub_fmtty_rest$7 = sub_fmtty[1],
         match$3 =
           type_ignored_format_substituti(sub_fmtty_rest$7, fmt, fmtty_rest$3),
         fmt$4 = match$3[2],
         sub_fmtty_rest$8 = match$3[1];
        return [0, [4, sub_fmtty_rest$8], fmt$4];
       }
       break;
      case 5:
       if(typeof fmtty !== "number" && 5 === fmtty[0]){
        var
         fmtty_rest$4 = fmtty[1],
         sub_fmtty_rest$9 = sub_fmtty[1],
         match$4 =
           type_ignored_format_substituti(sub_fmtty_rest$9, fmt, fmtty_rest$4),
         fmt$5 = match$4[2],
         sub_fmtty_rest$10 = match$4[1];
        return [0, [5, sub_fmtty_rest$10], fmt$5];
       }
       break;
      case 6:
       if(typeof fmtty !== "number" && 6 === fmtty[0]){
        var
         fmtty_rest$5 = fmtty[1],
         sub_fmtty_rest$11 = sub_fmtty[1],
         match$5 =
           type_ignored_format_substituti
            (sub_fmtty_rest$11, fmt, fmtty_rest$5),
         fmt$6 = match$5[2],
         sub_fmtty_rest$12 = match$5[1];
        return [0, [6, sub_fmtty_rest$12], fmt$6];
       }
       break;
      case 7:
       if(typeof fmtty !== "number" && 7 === fmtty[0]){
        var
         fmtty_rest$6 = fmtty[1],
         sub_fmtty_rest$13 = sub_fmtty[1],
         match$6 =
           type_ignored_format_substituti
            (sub_fmtty_rest$13, fmt, fmtty_rest$6),
         fmt$7 = match$6[2],
         sub_fmtty_rest$14 = match$6[1];
        return [0, [7, sub_fmtty_rest$14], fmt$7];
       }
       break;
      case 8:
       if(typeof fmtty !== "number" && 8 === fmtty[0]){
        var
         fmtty_rest$7 = fmtty[2],
         sub2_fmtty = fmtty[1],
         sub_fmtty_rest$15 = sub_fmtty[2],
         sub2_fmtty$0 = sub_fmtty[1];
        if(caml_notequal([0, sub2_fmtty$0], [0, sub2_fmtty]))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         match$7 =
           type_ignored_format_substituti
            (sub_fmtty_rest$15, fmt, fmtty_rest$7),
         fmt$8 = match$7[2],
         sub_fmtty_rest$16 = match$7[1];
        return [0, [8, sub2_fmtty, sub_fmtty_rest$16], fmt$8];
       }
       break;
      case 9:
       if(typeof fmtty !== "number" && 9 === fmtty[0]){
        var
         fmtty_rest$8 = fmtty[3],
         sub2_fmtty$1 = fmtty[2],
         sub1_fmtty = fmtty[1],
         sub_fmtty_rest$17 = sub_fmtty[3],
         sub2_fmtty$2 = sub_fmtty[2],
         sub1_fmtty$0 = sub_fmtty[1],
         _cw_ = [0, caml_call1(CamlinternalFormatBasics[2], sub1_fmtty)];
        if
         (caml_notequal
           ([0, caml_call1(CamlinternalFormatBasics[2], sub1_fmtty$0)], _cw_))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var _cx_ = [0, caml_call1(CamlinternalFormatBasics[2], sub2_fmtty$1)];
        if
         (caml_notequal
           ([0, caml_call1(CamlinternalFormatBasics[2], sub2_fmtty$2)], _cx_))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         sub_fmtty$0 = trans(symm(sub1_fmtty), sub2_fmtty$1),
         match$8 = fmtty_rel_det(sub_fmtty$0),
         f4 = match$8[4],
         f2 = match$8[2];
        f2(0);
        f4(0);
        var
         match$9 =
           type_ignored_format_substituti
            (caml_call1(CamlinternalFormatBasics[2], sub_fmtty_rest$17),
             fmt,
             fmtty_rest$8),
         fmt$9 = match$9[2],
         sub_fmtty_rest$18 = match$9[1];
        return [0,
                [9, sub1_fmtty, sub2_fmtty$1, symm(sub_fmtty_rest$18)],
                fmt$9];
       }
       break;
      case 10:
       if(typeof fmtty !== "number" && 10 === fmtty[0]){
        var
         fmtty_rest$9 = fmtty[1],
         sub_fmtty_rest$19 = sub_fmtty[1],
         match$10 =
           type_ignored_format_substituti
            (sub_fmtty_rest$19, fmt, fmtty_rest$9),
         fmt$10 = match$10[2],
         sub_fmtty_rest$20 = match$10[1];
        return [0, [10, sub_fmtty_rest$20], fmt$10];
       }
       break;
      case 11:
       if(typeof fmtty !== "number" && 11 === fmtty[0]){
        var
         fmtty_rest$10 = fmtty[1],
         sub_fmtty_rest$21 = sub_fmtty[1],
         match$11 =
           type_ignored_format_substituti
            (sub_fmtty_rest$21, fmt, fmtty_rest$10),
         fmt$11 = match$11[2],
         sub_fmtty_rest$22 = match$11[1];
        return [0, [11, sub_fmtty_rest$22], fmt$11];
       }
       break;
      case 13:
       if(typeof fmtty !== "number" && 13 === fmtty[0]){
        var
         fmtty_rest$11 = fmtty[1],
         sub_fmtty_rest$23 = sub_fmtty[1],
         match$12 =
           type_ignored_format_substituti
            (sub_fmtty_rest$23, fmt, fmtty_rest$11),
         fmt$12 = match$12[2],
         sub_fmtty_rest$24 = match$12[1];
        return [0, [13, sub_fmtty_rest$24], fmt$12];
       }
       break;
      case 14:
       if(typeof fmtty !== "number" && 14 === fmtty[0]){
        var
         fmtty_rest$12 = fmtty[1],
         sub_fmtty_rest$25 = sub_fmtty[1],
         match$13 =
           type_ignored_format_substituti
            (sub_fmtty_rest$25, fmt, fmtty_rest$12),
         fmt$13 = match$13[2],
         sub_fmtty_rest$26 = match$13[1];
        return [0, [14, sub_fmtty_rest$26], fmt$13];
       }
       break;
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function recast(fmt, fmtty){
    var _cv_ = symm(fmtty);
    return type_format(fmt, caml_call1(CamlinternalFormatBasics[2], _cv_));
   }
   function fix_padding(padty, width, str){
    var
     len = caml_ml_string_length(str),
     padty$0 = 0 <= width ? padty : 0,
     width$0 = caml_call1(Stdlib[18], width);
    if(width$0 <= len) return str;
    var
     _cu_ = 2 === padty$0 ? 48 : 32,
     res = caml_call2(Stdlib_Bytes[1], width$0, _cu_);
    switch(padty$0){
      case 0:
       caml_call5(Stdlib_String[48], str, 0, res, 0, len); break;
      case 1:
       caml_call5(Stdlib_String[48], str, 0, res, width$0 - len | 0, len);
       break;
      default:
       a:
       if(0 < len){
        if
         (43 !== caml_string_get(str, 0)
          && 45 !== caml_string_get(str, 0) && 32 !== caml_string_get(str, 0))
         break a;
        caml_bytes_set(res, 0, caml_string_get(str, 0));
        caml_call5
         (Stdlib_String[48],
          str,
          1,
          res,
          (width$0 - len | 0) + 1 | 0,
          len - 1 | 0);
        break;
       }
       a:
       if(1 < len && 48 === caml_string_get(str, 0)){
        if(120 !== caml_string_get(str, 1) && 88 !== caml_string_get(str, 1))
         break a;
        caml_bytes_set(res, 1, caml_string_get(str, 1));
        caml_call5
         (Stdlib_String[48],
          str,
          2,
          res,
          (width$0 - len | 0) + 2 | 0,
          len - 2 | 0);
        break;
       }
       caml_call5(Stdlib_String[48], str, 0, res, width$0 - len | 0, len);
    }
    return caml_call1(Stdlib_Bytes[48], res);
   }
   function fix_int_precision(prec, str){
    var
     prec$0 = caml_call1(Stdlib[18], prec),
     len = caml_ml_string_length(str),
     c = caml_string_get(str, 0);
    a:
    {
     b:
     {
      if(58 > c){
       if(32 !== c){
        if(43 > c) break a;
        switch(c - 43 | 0){
          case 5:
           c:
           if(len < (prec$0 + 2 | 0) && 1 < len){
            if
             (120 !== caml_string_get(str, 1)
              && 88 !== caml_string_get(str, 1))
             break c;
            var res$1 = caml_call2(Stdlib_Bytes[1], prec$0 + 2 | 0, 48);
            caml_bytes_set(res$1, 1, caml_string_get(str, 1));
            caml_call5
             (Stdlib_String[48],
              str,
              2,
              res$1,
              (prec$0 - len | 0) + 4 | 0,
              len - 2 | 0);
            return caml_call1(Stdlib_Bytes[48], res$1);
           }
           break b;
          case 0:
          case 2: break;
          case 1:
          case 3:
          case 4:
           break a;
          default: break b;
        }
       }
       if(len >= (prec$0 + 1 | 0)) break a;
       var res$0 = caml_call2(Stdlib_Bytes[1], prec$0 + 1 | 0, 48);
       caml_bytes_set(res$0, 0, c);
       caml_call5
        (Stdlib_String[48],
         str,
         1,
         res$0,
         (prec$0 - len | 0) + 2 | 0,
         len - 1 | 0);
       return caml_call1(Stdlib_Bytes[48], res$0);
      }
      if(71 <= c){if(5 < c - 97 >>> 0) break a;} else if(65 > c) break a;
     }
     if(len < prec$0){
      var res = caml_call2(Stdlib_Bytes[1], prec$0, 48);
      caml_call5(Stdlib_String[48], str, 0, res, prec$0 - len | 0, len);
      return caml_call1(Stdlib_Bytes[48], res);
     }
    }
    return str;
   }
   function string_to_caml_string(str){
    var
     str$0 = caml_call1(Stdlib_String[24], str),
     l = caml_ml_string_length(str$0),
     res = caml_call2(Stdlib_Bytes[1], l + 2 | 0, 34);
    caml_blit_string(str$0, 0, res, 1, l);
    return caml_call1(Stdlib_Bytes[48], res);
   }
   function format_of_fconv(fconv, prec){
    var
     prec$0 = caml_call1(Stdlib[18], prec),
     symb = char_of_fconv(_r_, fconv),
     buf = buffer_create(16);
    buffer_add_char(buf, 37);
    bprint_fconv_flag(buf, fconv);
    buffer_add_char(buf, 46);
    buffer_add_string(buf, caml_call1(Stdlib_Int[12], prec$0));
    buffer_add_char(buf, symb);
    return buffer_contents(buf);
   }
   function transform_int_alt(iconv, s){
    if(13 > iconv) return s;
    var n = [0, 0], _cp_ = caml_ml_string_length(s) - 1 | 0, _co_ = 0;
    if(_cp_ >= 0){
     var i$0 = _co_;
     for(;;){
      if(9 >= caml_string_unsafe_get(s, i$0) - 48 >>> 0) n[1]++;
      var _ct_ = i$0 + 1 | 0;
      if(_cp_ === i$0) break;
      i$0 = _ct_;
     }
    }
    var
     digits = n[1],
     buf =
       caml_create_bytes
        (caml_ml_string_length(s) + ((digits - 1 | 0) / 3 | 0) | 0),
     pos = [0, 0];
    function put(c){caml_bytes_set(buf, pos[1], c); pos[1]++; return;}
    var
     left = [0, ((digits - 1 | 0) % 3 | 0) + 1 | 0],
     _cr_ = caml_ml_string_length(s) - 1 | 0,
     _cq_ = 0;
    if(_cr_ >= 0){
     var i = _cq_;
     for(;;){
      var c = caml_string_unsafe_get(s, i);
      if(9 < c - 48 >>> 0)
       put(c);
      else{if(0 === left[1]){put(95); left[1] = 3;} left[1]--; put(c);}
      var _cs_ = i + 1 | 0;
      if(_cr_ === i) break;
      i = _cs_;
     }
    }
    return caml_call1(Stdlib_Bytes[48], buf);
   }
   function convert_int(iconv, n){
    switch(iconv){
      case 1:
       var _cn_ = cst_d$0; break;
      case 2:
       var _cn_ = cst_d$1; break;
      case 4:
       var _cn_ = cst_i$1; break;
      case 5:
       var _cn_ = cst_i$2; break;
      case 6:
       var _cn_ = cst_x; break;
      case 7:
       var _cn_ = cst_x$0; break;
      case 8:
       var _cn_ = cst_X; break;
      case 9:
       var _cn_ = cst_X$0; break;
      case 10:
       var _cn_ = cst_o; break;
      case 11:
       var _cn_ = cst_o$0; break;
      case 0:
      case 13:
       var _cn_ = cst_d; break;
      case 3:
      case 14:
       var _cn_ = cst_i$0; break;
      default: var _cn_ = cst_u;
    }
    return transform_int_alt(iconv, caml_format_int(_cn_, n));
   }
   function convert_int32(iconv, n){
    switch(iconv){
      case 1:
       var _cm_ = cst_ld$0; break;
      case 2:
       var _cm_ = cst_ld$1; break;
      case 4:
       var _cm_ = cst_li$1; break;
      case 5:
       var _cm_ = cst_li$2; break;
      case 6:
       var _cm_ = cst_lx; break;
      case 7:
       var _cm_ = cst_lx$0; break;
      case 8:
       var _cm_ = cst_lX; break;
      case 9:
       var _cm_ = cst_lX$0; break;
      case 10:
       var _cm_ = cst_lo; break;
      case 11:
       var _cm_ = cst_lo$0; break;
      case 0:
      case 13:
       var _cm_ = cst_ld; break;
      case 3:
      case 14:
       var _cm_ = cst_li$0; break;
      default: var _cm_ = cst_lu;
    }
    return transform_int_alt(iconv, caml_format_int(_cm_, n));
   }
   function convert_nativeint(iconv, n){
    switch(iconv){
      case 1:
       var _cl_ = cst_nd$0; break;
      case 2:
       var _cl_ = cst_nd$1; break;
      case 4:
       var _cl_ = cst_ni$1; break;
      case 5:
       var _cl_ = cst_ni$2; break;
      case 6:
       var _cl_ = cst_nx; break;
      case 7:
       var _cl_ = cst_nx$0; break;
      case 8:
       var _cl_ = cst_nX; break;
      case 9:
       var _cl_ = cst_nX$0; break;
      case 10:
       var _cl_ = cst_no; break;
      case 11:
       var _cl_ = cst_no$0; break;
      case 0:
      case 13:
       var _cl_ = cst_nd; break;
      case 3:
      case 14:
       var _cl_ = cst_ni$0; break;
      default: var _cl_ = cst_nu;
    }
    return transform_int_alt(iconv, caml_format_int(_cl_, n));
   }
   function convert_int64(iconv, n){
    switch(iconv){
      case 1:
       var _ck_ = cst_Ld$0; break;
      case 2:
       var _ck_ = cst_Ld$1; break;
      case 4:
       var _ck_ = cst_Li$1; break;
      case 5:
       var _ck_ = cst_Li$2; break;
      case 6:
       var _ck_ = cst_Lx; break;
      case 7:
       var _ck_ = cst_Lx$0; break;
      case 8:
       var _ck_ = cst_LX; break;
      case 9:
       var _ck_ = cst_LX$0; break;
      case 10:
       var _ck_ = cst_Lo; break;
      case 11:
       var _ck_ = cst_Lo$0; break;
      case 0:
      case 13:
       var _ck_ = cst_Ld; break;
      case 3:
      case 14:
       var _ck_ = cst_Li$0; break;
      default: var _ck_ = cst_Lu;
    }
    return transform_int_alt(iconv, runtime.caml_int64_format(_ck_, n));
   }
   function convert_float(fconv, prec, x){
    function hex(param){
     switch(fconv[1]){
       case 0:
        var sign = 45; break;
       case 1:
        var sign = 43; break;
       default: var sign = 32;
     }
     return runtime.caml_hexstring_of_float(x, prec, sign);
    }
    function caml_special_val(str){
     var match = runtime.caml_classify_float(x);
     return 3 === match
             ? x < 0. ? cst_neg_infinity : cst_infinity
             : 4 <= match ? cst_nan : str;
    }
    switch(fconv[2]){
      case 5:
       var
        str = caml_format_float(format_of_fconv(fconv, prec), x),
        len = caml_ml_string_length(str),
        i = 0;
       for(;;){
        if(i === len)
         var _ch_ = 0;
        else{
         var _cg_ = caml_string_get(str, i) - 46 | 0;
         a:
         {
          if(23 < _cg_ >>> 0){
           if(55 === _cg_) break a;
          }
          else if(21 < _cg_ - 1 >>> 0) break a;
          var i$0 = i + 1 | 0;
          i = i$0;
          continue;
         }
         var _ch_ = 1;
        }
        var _ci_ = _ch_ ? str : caml_call2(Stdlib[28], str, cst$17);
        return caml_special_val(_ci_);
       }
      case 6:
       return hex(0);
      case 7:
       var _cj_ = hex(0); return caml_call1(Stdlib_String[25], _cj_);
      case 8:
       return caml_special_val(hex(0));
      default: return caml_format_float(format_of_fconv(fconv, prec), x);
    }
   }
   function string_of_fmtty(fmtty){
    var buf = buffer_create(16);
    bprint_fmtty(buf, fmtty);
    return buffer_contents(buf);
   }
   function make_printf$0(counter, k, acc, fmt){
    var k$0 = k, acc$0 = acc, fmt$0 = fmt;
    for(;;){
     if(typeof fmt$0 === "number") return caml_call1(k$0, acc$0);
     switch(fmt$0[0]){
       case 0:
        var rest = fmt$0[1];
        return function(c){
         var new_acc = [5, acc$0, c];
         return make_printf(k$0, new_acc, rest);};
       case 1:
        var rest$0 = fmt$0[1];
        return function(c){
         var
          str = caml_call1(Stdlib_Char[2], c),
          l = caml_ml_string_length(str),
          res = caml_call2(Stdlib_Bytes[1], l + 2 | 0, 39);
         caml_blit_string(str, 0, res, 1, l);
         var new_acc = [4, acc$0, caml_call1(Stdlib_Bytes[48], res)];
         return make_printf(k$0, new_acc, rest$0);};
       case 2:
        var rest$1 = fmt$0[2], pad = fmt$0[1];
        return make_padding
                (k$0, acc$0, rest$1, pad, function(str){return str;});
       case 3:
        var rest$2 = fmt$0[2], pad$0 = fmt$0[1];
        return make_padding(k$0, acc$0, rest$2, pad$0, string_to_caml_string);
       case 4:
        var
         rest$3 = fmt$0[4],
         prec = fmt$0[3],
         pad$1 = fmt$0[2],
         iconv = fmt$0[1];
        return make_int_padding_precision
                (k$0, acc$0, rest$3, pad$1, prec, convert_int, iconv);
       case 5:
        var
         rest$4 = fmt$0[4],
         prec$0 = fmt$0[3],
         pad$2 = fmt$0[2],
         iconv$0 = fmt$0[1];
        return make_int_padding_precision
                (k$0, acc$0, rest$4, pad$2, prec$0, convert_int32, iconv$0);
       case 6:
        var
         rest$5 = fmt$0[4],
         prec$1 = fmt$0[3],
         pad$3 = fmt$0[2],
         iconv$1 = fmt$0[1];
        return make_int_padding_precision
                (k$0,
                 acc$0,
                 rest$5,
                 pad$3,
                 prec$1,
                 convert_nativeint,
                 iconv$1);
       case 7:
        var
         rest$6 = fmt$0[4],
         prec$2 = fmt$0[3],
         pad$4 = fmt$0[2],
         iconv$2 = fmt$0[1];
        return make_int_padding_precision
                (k$0, acc$0, rest$6, pad$4, prec$2, convert_int64, iconv$2);
       case 8:
        var
         rest$7 = fmt$0[4],
         prec$3 = fmt$0[3],
         pad$5 = fmt$0[2],
         fconv = fmt$0[1];
        if(typeof pad$5 === "number"){
         if(typeof prec$3 === "number")
          return prec$3
                  ? function
                   (p, x){
                    var str = convert_float(fconv, p, x);
                    return make_printf(k$0, [4, acc$0, str], rest$7);
                   }
                  : function
                   (x){
                    var
                     str =
                       convert_float(fconv, default_float_precision(fconv), x);
                    return make_printf(k$0, [4, acc$0, str], rest$7);
                   };
         var p = prec$3[1];
         return function(x){
          var str = convert_float(fconv, p, x);
          return make_printf(k$0, [4, acc$0, str], rest$7);};
        }
        if(0 === pad$5[0]){
         var w = pad$5[2], padty = pad$5[1];
         if(typeof prec$3 === "number")
          return prec$3
                  ? function
                   (p, x){
                    var str = fix_padding(padty, w, convert_float(fconv, p, x));
                    return make_printf(k$0, [4, acc$0, str], rest$7);
                   }
                  : function
                   (x){
                    var
                     str =
                       convert_float(fconv, default_float_precision(fconv), x),
                     str$0 = fix_padding(padty, w, str);
                    return make_printf(k$0, [4, acc$0, str$0], rest$7);
                   };
         var p$0 = prec$3[1];
         return function(x){
          var str = fix_padding(padty, w, convert_float(fconv, p$0, x));
          return make_printf(k$0, [4, acc$0, str], rest$7);};
        }
        var padty$0 = pad$5[1];
        if(typeof prec$3 === "number")
         return prec$3
                 ? function
                  (w, p, x){
                   var
                    str = fix_padding(padty$0, w, convert_float(fconv, p, x));
                   return make_printf(k$0, [4, acc$0, str], rest$7);
                  }
                 : function
                  (w, x){
                   var
                    str =
                      convert_float(fconv, default_float_precision(fconv), x),
                    str$0 = fix_padding(padty$0, w, str);
                   return make_printf(k$0, [4, acc$0, str$0], rest$7);
                  };
        var p$1 = prec$3[1];
        return function(w, x){
         var str = fix_padding(padty$0, w, convert_float(fconv, p$1, x));
         return make_printf(k$0, [4, acc$0, str], rest$7);};
       case 9:
        var rest$8 = fmt$0[2], pad$6 = fmt$0[1];
        return make_padding(k$0, acc$0, rest$8, pad$6, Stdlib[30]);
       case 10:
        var rest$9 = fmt$0[1], acc$1 = [7, acc$0];
        acc$0 = acc$1;
        fmt$0 = rest$9;
        break;
       case 11:
        var rest$10 = fmt$0[2], str = fmt$0[1], acc$2 = [2, acc$0, str];
        acc$0 = acc$2;
        fmt$0 = rest$10;
        break;
       case 12:
        var rest$11 = fmt$0[2], chr = fmt$0[1], acc$3 = [3, acc$0, chr];
        acc$0 = acc$3;
        fmt$0 = rest$11;
        break;
       case 13:
        var
         rest$12 = fmt$0[3],
         sub_fmtty = fmt$0[2],
         ty = string_of_fmtty(sub_fmtty);
        return function(str){
         return make_printf(k$0, [4, acc$0, ty], rest$12);};
       case 14:
        var rest$13 = fmt$0[3], fmtty = fmt$0[2];
        return function(param){
         var fmt = param[1], _cf_ = recast(fmt, fmtty);
         return make_printf
                 (k$0,
                  acc$0,
                  caml_call2(CamlinternalFormatBasics[3], _cf_, rest$13));};
       case 15:
        var rest$14 = fmt$0[1];
        return function(f, x){
         return make_printf
                 (k$0,
                  [6, acc$0, function(o){return caml_call2(f, o, x);}],
                  rest$14);};
       case 16:
        var rest$15 = fmt$0[1];
        return function(f){return make_printf(k$0, [6, acc$0, f], rest$15);};
       case 17:
        var
         rest$16 = fmt$0[2],
         fmting_lit = fmt$0[1],
         acc$4 = [0, acc$0, fmting_lit];
        acc$0 = acc$4;
        fmt$0 = rest$16;
        break;
       case 18:
        var _cd_ = fmt$0[1];
        if(0 === _cd_[0]){
         var rest$17 = fmt$0[2], fmt$1 = _cd_[1][1];
         let acc = acc$0, k = k$0, rest = rest$17;
         var
          k$1 =
            function(kacc){return make_printf(k, [1, acc, [0, kacc]], rest);};
         k$0 = k$1;
         acc$0 = 0;
         fmt$0 = fmt$1;
        }
        else{
         var rest$18 = fmt$0[2], fmt$2 = _cd_[1][1];
         let acc = acc$0, k = k$0, rest = rest$18;
         var
          k$2 =
            function(kacc){return make_printf(k, [1, acc, [1, kacc]], rest);};
         k$0 = k$2;
         acc$0 = 0;
         fmt$0 = fmt$2;
        }
        break;
       case 19:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _s_], 1);
       case 20:
        var
         rest$19 = fmt$0[3],
         new_acc = [8, acc$0, cst_Printf_bad_conversion];
        return function(param){return make_printf(k$0, new_acc, rest$19);};
       case 21:
        var rest$20 = fmt$0[2];
        return function(n){
         var new_acc = [4, acc$0, caml_format_int(cst_u$0, n)];
         return make_printf(k$0, new_acc, rest$20);};
       case 22:
        var rest$21 = fmt$0[1];
        return function(c){
         var new_acc = [5, acc$0, c];
         return make_printf(k$0, new_acc, rest$21);};
       case 23:
        var rest$22 = fmt$0[2], ign = fmt$0[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (make_ignored_param$0, [0, k$0, acc$0, ign, rest$22]);
        var counter$1 = counter + 1 | 0;
        return make_ignored_param$0(counter$1, k$0, acc$0, ign, rest$22);
       default:
        var
         rest$23 = fmt$0[3],
         f = fmt$0[2],
         arity = fmt$0[1],
         _ce_ = caml_call1(f, 0);
        if(counter >= 50)
         return caml_trampoline_return
                 (make_custom$0, [0, k$0, acc$0, rest$23, arity, _ce_]);
        var counter$0 = counter + 1 | 0;
        return make_custom$0(counter$0, k$0, acc$0, rest$23, arity, _ce_);
     }
    }
   }
   function make_printf(k, acc, fmt){
    return caml_trampoline(make_printf$0(0, k, acc, fmt));
   }
   function make_ignored_param$0(counter, k, acc, ign, fmt){
    if(typeof ign === "number")
     switch(ign){
       case 0:
        if(counter >= 50)
         return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
        var counter$0 = counter + 1 | 0;
        return make_invalid_arg(counter$0, k, acc, fmt);
       case 1:
        if(counter >= 50)
         return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
        var counter$1 = counter + 1 | 0;
        return make_invalid_arg(counter$1, k, acc, fmt);
       case 2:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _t_], 1);
       default:
        if(counter >= 50)
         return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
        var counter$2 = counter + 1 | 0;
        return make_invalid_arg(counter$2, k, acc, fmt);
     }
    switch(ign[0]){
      case 0:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$3 = counter + 1 | 0;
       return make_invalid_arg(counter$3, k, acc, fmt);
      case 1:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$4 = counter + 1 | 0;
       return make_invalid_arg(counter$4, k, acc, fmt);
      case 2:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$5 = counter + 1 | 0;
       return make_invalid_arg(counter$5, k, acc, fmt);
      case 3:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$6 = counter + 1 | 0;
       return make_invalid_arg(counter$6, k, acc, fmt);
      case 4:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$7 = counter + 1 | 0;
       return make_invalid_arg(counter$7, k, acc, fmt);
      case 5:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$8 = counter + 1 | 0;
       return make_invalid_arg(counter$8, k, acc, fmt);
      case 6:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$9 = counter + 1 | 0;
       return make_invalid_arg(counter$9, k, acc, fmt);
      case 7:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$10 = counter + 1 | 0;
       return make_invalid_arg(counter$10, k, acc, fmt);
      case 8:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$11 = counter + 1 | 0;
       return make_invalid_arg(counter$11, k, acc, fmt);
      case 9:
       var fmtty = ign[2];
       if(counter >= 50)
        return caml_trampoline_return
                (make_from_fmtty$0, [0, k, acc, fmtty, fmt]);
       var counter$14 = counter + 1 | 0;
       return make_from_fmtty$0(counter$14, k, acc, fmtty, fmt);
      case 10:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$12 = counter + 1 | 0;
       return make_invalid_arg(counter$12, k, acc, fmt);
      default:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$13 = counter + 1 | 0;
       return make_invalid_arg(counter$13, k, acc, fmt);
    }
   }
   function make_ignored_param(k, acc, ign, fmt){
    return caml_trampoline(make_ignored_param$0(0, k, acc, ign, fmt));
   }
   function make_from_fmtty$0(counter, k, acc, fmtty, fmt){
    if(typeof fmtty !== "number")
     switch(fmtty[0]){
       case 0:
        var rest = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest, fmt);};
       case 1:
        var rest$0 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$0, fmt);};
       case 2:
        var rest$1 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$1, fmt);};
       case 3:
        var rest$2 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$2, fmt);};
       case 4:
        var rest$3 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$3, fmt);};
       case 5:
        var rest$4 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$4, fmt);};
       case 6:
        var rest$5 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$5, fmt);};
       case 7:
        var rest$6 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$6, fmt);};
       case 8:
        var rest$7 = fmtty[2];
        return function(param){return make_from_fmtty(k, acc, rest$7, fmt);};
       case 9:
        var
         rest$8 = fmtty[3],
         ty2 = fmtty[2],
         ty1 = fmtty[1],
         ty = trans(symm(ty1), ty2);
        return function(param){
         return make_from_fmtty
                 (k,
                  acc,
                  caml_call2(CamlinternalFormatBasics[1], ty, rest$8),
                  fmt);};
       case 10:
        var rest$9 = fmtty[1];
        return function(param, _cc_){
         return make_from_fmtty(k, acc, rest$9, fmt);};
       case 11:
        var rest$10 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$10, fmt);};
       case 12:
        var rest$11 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$11, fmt);};
       case 13:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _u_], 1);
       default:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _v_], 1);
     }
    if(counter >= 50)
     return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
    var counter$0 = counter + 1 | 0;
    return make_invalid_arg(counter$0, k, acc, fmt);
   }
   function make_from_fmtty(k, acc, fmtty, fmt){
    return caml_trampoline(make_from_fmtty$0(0, k, acc, fmtty, fmt));
   }
   function make_invalid_arg(counter, k, acc, fmt){
    var _cb_ = [8, acc, cst_Printf_bad_conversion$0];
    if(counter >= 50)
     return caml_trampoline_return(make_printf$0, [0, k, _cb_, fmt]);
    var counter$0 = counter + 1 | 0;
    return make_printf$0(counter$0, k, _cb_, fmt);
   }
   function make_padding(k, acc, fmt, pad, trans){
    if(typeof pad === "number")
     return function(x){
      var new_acc = [4, acc, caml_call1(trans, x)];
      return make_printf(k, new_acc, fmt);};
    if(0 === pad[0]){
     var width = pad[2], padty = pad[1];
     return function(x){
      var new_acc = [4, acc, fix_padding(padty, width, caml_call1(trans, x))];
      return make_printf(k, new_acc, fmt);};
    }
    var padty$0 = pad[1];
    return function(w, x){
     var new_acc = [4, acc, fix_padding(padty$0, w, caml_call1(trans, x))];
     return make_printf(k, new_acc, fmt);};
   }
   function make_int_padding_precision(k, acc, fmt, pad, prec, trans, iconv){
    if(typeof pad === "number"){
     if(typeof prec === "number")
      return prec
              ? function
               (p, x){
                var str = fix_int_precision(p, caml_call2(trans, iconv, x));
                return make_printf(k, [4, acc, str], fmt);
               }
              : function
               (x){
                var str = caml_call2(trans, iconv, x);
                return make_printf(k, [4, acc, str], fmt);
               };
     var p = prec[1];
     return function(x){
      var str = fix_int_precision(p, caml_call2(trans, iconv, x));
      return make_printf(k, [4, acc, str], fmt);};
    }
    if(0 === pad[0]){
     var w = pad[2], padty = pad[1];
     if(typeof prec === "number")
      return prec
              ? function
               (p, x){
                var
                 str =
                   fix_padding
                    (padty,
                     w,
                     fix_int_precision(p, caml_call2(trans, iconv, x)));
                return make_printf(k, [4, acc, str], fmt);
               }
              : function
               (x){
                var str = fix_padding(padty, w, caml_call2(trans, iconv, x));
                return make_printf(k, [4, acc, str], fmt);
               };
     var p$0 = prec[1];
     return function(x){
      var
       str =
         fix_padding
          (padty, w, fix_int_precision(p$0, caml_call2(trans, iconv, x)));
      return make_printf(k, [4, acc, str], fmt);};
    }
    var padty$0 = pad[1];
    if(typeof prec === "number")
     return prec
             ? function
              (w, p, x){
               var
                str =
                  fix_padding
                   (padty$0,
                    w,
                    fix_int_precision(p, caml_call2(trans, iconv, x)));
               return make_printf(k, [4, acc, str], fmt);
              }
             : function
              (w, x){
               var str = fix_padding(padty$0, w, caml_call2(trans, iconv, x));
               return make_printf(k, [4, acc, str], fmt);
              };
    var p$1 = prec[1];
    return function(w, x){
     var
      str =
        fix_padding
         (padty$0, w, fix_int_precision(p$1, caml_call2(trans, iconv, x)));
     return make_printf(k, [4, acc, str], fmt);};
   }
   function make_custom$0(counter, k, acc, rest, arity, f){
    if(arity){
     var arity$0 = arity[1];
     return function(x){
      return make_custom(k, acc, rest, arity$0, caml_call1(f, x));};
    }
    var _ca_ = [4, acc, f];
    if(counter >= 50)
     return caml_trampoline_return(make_printf$0, [0, k, _ca_, rest]);
    var counter$0 = counter + 1 | 0;
    return make_printf$0(counter$0, k, _ca_, rest);
   }
   function make_custom(k, acc, rest, arity, f){
    return caml_trampoline(make_custom$0(0, k, acc, rest, arity, f));
   }
   function make_iprintf$0(counter, k, o, fmt){
    var k$0 = k, fmt$0 = fmt;
    for(;;){
     if(typeof fmt$0 === "number") return caml_call1(k$0, o);
     switch(fmt$0[0]){
       case 0:
        var rest = fmt$0[1], x = make_iprintf(k$0, o, rest);
        return function(_b$_){return x;};
       case 1:
        var rest$0 = fmt$0[1], x$0 = make_iprintf(k$0, o, rest$0);
        return function(_b__){return x$0;};
       case 2:
        var _bM_ = fmt$0[1];
        if(typeof _bM_ === "number"){
         var rest$1 = fmt$0[2], x$1 = make_iprintf(k$0, o, rest$1);
         return function(_b9_){return x$1;};
        }
        if(0 === _bM_[0]){
         var rest$2 = fmt$0[2], x$2 = make_iprintf(k$0, o, rest$2);
         return function(_b8_){return x$2;};
        }
        var
         rest$3 = fmt$0[2],
         x$3 = make_iprintf(k$0, o, rest$3),
         x$4 = function(_b7_){return x$3;};
        return function(_b6_){return x$4;};
       case 3:
        var _bN_ = fmt$0[1];
        if(typeof _bN_ === "number"){
         var rest$4 = fmt$0[2], x$5 = make_iprintf(k$0, o, rest$4);
         return function(_b5_){return x$5;};
        }
        if(0 === _bN_[0]){
         var rest$5 = fmt$0[2], x$6 = make_iprintf(k$0, o, rest$5);
         return function(_b4_){return x$6;};
        }
        var
         rest$6 = fmt$0[2],
         x$7 = make_iprintf(k$0, o, rest$6),
         x$8 = function(_b3_){return x$7;};
        return function(_b2_){return x$8;};
       case 4:
        var rest$7 = fmt$0[4], prec = fmt$0[3], pad = fmt$0[2];
        return fn_of_padding_precision(k$0, o, rest$7, pad, prec);
       case 5:
        var rest$8 = fmt$0[4], prec$0 = fmt$0[3], pad$0 = fmt$0[2];
        return fn_of_padding_precision(k$0, o, rest$8, pad$0, prec$0);
       case 6:
        var rest$9 = fmt$0[4], prec$1 = fmt$0[3], pad$1 = fmt$0[2];
        return fn_of_padding_precision(k$0, o, rest$9, pad$1, prec$1);
       case 7:
        var rest$10 = fmt$0[4], prec$2 = fmt$0[3], pad$2 = fmt$0[2];
        return fn_of_padding_precision(k$0, o, rest$10, pad$2, prec$2);
       case 8:
        var rest$11 = fmt$0[4], prec$3 = fmt$0[3], pad$3 = fmt$0[2];
        return fn_of_padding_precision(k$0, o, rest$11, pad$3, prec$3);
       case 9:
        var _bO_ = fmt$0[1];
        if(typeof _bO_ === "number"){
         var rest$12 = fmt$0[2], x$9 = make_iprintf(k$0, o, rest$12);
         return function(_b1_){return x$9;};
        }
        if(0 === _bO_[0]){
         var rest$13 = fmt$0[2], x$10 = make_iprintf(k$0, o, rest$13);
         return function(_b0_){return x$10;};
        }
        var
         rest$14 = fmt$0[2],
         x$11 = make_iprintf(k$0, o, rest$14),
         x$12 = function(_bZ_){return x$11;};
        return function(_bY_){return x$12;};
       case 10:
        var rest$15 = fmt$0[1]; fmt$0 = rest$15; break;
       case 11:
        var rest$16 = fmt$0[2]; fmt$0 = rest$16; break;
       case 12:
        var rest$17 = fmt$0[2]; fmt$0 = rest$17; break;
       case 13:
        var rest$18 = fmt$0[3], x$13 = make_iprintf(k$0, o, rest$18);
        return function(_bX_){return x$13;};
       case 14:
        var rest$19 = fmt$0[3], fmtty = fmt$0[2];
        return function(param){
         var fmt = param[1], _bW_ = recast(fmt, fmtty);
         return make_iprintf
                 (k$0,
                  o,
                  caml_call2(CamlinternalFormatBasics[3], _bW_, rest$19));};
       case 15:
        var
         rest$20 = fmt$0[1],
         x$14 = make_iprintf(k$0, o, rest$20),
         x$15 = function(_bV_){return x$14;};
        return function(_bU_){return x$15;};
       case 16:
        var rest$21 = fmt$0[1], x$16 = make_iprintf(k$0, o, rest$21);
        return function(_bT_){return x$16;};
       case 17:
        var rest$22 = fmt$0[2]; fmt$0 = rest$22; break;
       case 18:
        var _bP_ = fmt$0[1];
        if(0 === _bP_[0]){
         var rest$23 = fmt$0[2], fmt$1 = _bP_[1][1];
         let k = k$0, rest = rest$23;
         var k$1 = function(koc){return make_iprintf(k, koc, rest);};
         k$0 = k$1;
         fmt$0 = fmt$1;
        }
        else{
         var rest$24 = fmt$0[2], fmt$2 = _bP_[1][1];
         let k = k$0, rest = rest$24;
         var k$2 = function(koc){return make_iprintf(k, koc, rest);};
         k$0 = k$2;
         fmt$0 = fmt$2;
        }
        break;
       case 19:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _w_], 1);
       case 20:
        var rest$25 = fmt$0[3], x$17 = make_iprintf(k$0, o, rest$25);
        return function(_bS_){return x$17;};
       case 21:
        var rest$26 = fmt$0[2], x$18 = make_iprintf(k$0, o, rest$26);
        return function(_bR_){return x$18;};
       case 22:
        var rest$27 = fmt$0[1], x$19 = make_iprintf(k$0, o, rest$27);
        return function(_bQ_){return x$19;};
       case 23:
        var rest$28 = fmt$0[2], ign = fmt$0[1];
        return make_ignored_param
                (function(param){return caml_call1(k$0, o);}, 0, ign, rest$28);
       default:
        var rest$29 = fmt$0[3], arity = fmt$0[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (fn_of_custom_arity$0, [0, k$0, o, rest$29, arity]);
        var counter$0 = counter + 1 | 0;
        return fn_of_custom_arity$0(counter$0, k$0, o, rest$29, arity);
     }
    }
   }
   function make_iprintf(k, o, fmt){
    return caml_trampoline(make_iprintf$0(0, k, o, fmt));
   }
   function fn_of_padding_precision(k, o, fmt, pad, prec){
    if(typeof pad === "number"){
     if(typeof prec !== "number"){
      var x$2 = make_iprintf(k, o, fmt);
      return function(_bL_){return x$2;};
     }
     if(prec){
      var x = make_iprintf(k, o, fmt), x$0 = function(_bK_){return x;};
      return function(_bJ_){return x$0;};
     }
     var x$1 = make_iprintf(k, o, fmt);
     return function(_bI_){return x$1;};
    }
    if(0 === pad[0]){
     if(typeof prec !== "number"){
      var x$6 = make_iprintf(k, o, fmt);
      return function(_bH_){return x$6;};
     }
     if(prec){
      var x$3 = make_iprintf(k, o, fmt), x$4 = function(_bG_){return x$3;};
      return function(_bF_){return x$4;};
     }
     var x$5 = make_iprintf(k, o, fmt);
     return function(_bE_){return x$5;};
    }
    if(typeof prec !== "number"){
     var x$12 = make_iprintf(k, o, fmt), x$13 = function(_bD_){return x$12;};
     return function(_bC_){return x$13;};
    }
    if(prec){
     var
      x$7 = make_iprintf(k, o, fmt),
      x$8 = function(_bB_){return x$7;},
      x$9 = function(_bA_){return x$8;};
     return function(_bz_){return x$9;};
    }
    var x$10 = make_iprintf(k, o, fmt);
    function x$11(_by_){return x$10;}
    return function(_bx_){return x$11;};
   }
   function fn_of_custom_arity$0(counter, k, o, fmt, param){
    if(param){
     var arity = param[1], x = fn_of_custom_arity(k, o, fmt, arity);
     return function(_bw_){return x;};
    }
    if(counter >= 50)
     return caml_trampoline_return(make_iprintf$0, [0, k, o, fmt]);
    var counter$0 = counter + 1 | 0;
    return make_iprintf$0(counter$0, k, o, fmt);
   }
   function fn_of_custom_arity(k, o, fmt, param){
    return caml_trampoline(fn_of_custom_arity$0(0, k, o, fmt, param));
   }
   function output_acc(o, acc){
    var acc$0 = acc;
    for(;;){
     if(typeof acc$0 === "number") return 0;
     switch(acc$0[0]){
       case 0:
        var
         fmting_lit = acc$0[2],
         p = acc$0[1],
         s = string_of_formatting_lit(fmting_lit);
        output_acc(o, p);
        return caml_call2(Stdlib[66], o, s);
       case 1:
        var match = acc$0[2], p$0 = acc$0[1];
        if(0 === match[0]){
         var acc$1 = match[1];
         output_acc(o, p$0);
         caml_call2(Stdlib[66], o, cst$18);
         acc$0 = acc$1;
        }
        else{
         var acc$2 = match[1];
         output_acc(o, p$0);
         caml_call2(Stdlib[66], o, cst$19);
         acc$0 = acc$2;
        }
        break;
       case 6:
        var f = acc$0[2], p$3 = acc$0[1];
        output_acc(o, p$3);
        return caml_call1(f, o);
       case 7:
        var p$4 = acc$0[1];
        output_acc(o, p$4);
        return caml_call1(Stdlib[63], o);
       case 8:
        var msg = acc$0[2], p$5 = acc$0[1];
        output_acc(o, p$5);
        return caml_call1(Stdlib[1], msg);
       case 2:
       case 4:
        var s$0 = acc$0[2], p$1 = acc$0[1];
        output_acc(o, p$1);
        return caml_call2(Stdlib[66], o, s$0);
       default:
        var c = acc$0[2], p$2 = acc$0[1];
        output_acc(o, p$2);
        return caml_call2(Stdlib[65], o, c);
     }
    }
   }
   function bufput_acc(b, acc){
    var acc$0 = acc;
    for(;;){
     if(typeof acc$0 === "number") return 0;
     switch(acc$0[0]){
       case 0:
        var
         fmting_lit = acc$0[2],
         p = acc$0[1],
         s = string_of_formatting_lit(fmting_lit);
        bufput_acc(b, p);
        return caml_call2(Stdlib_Buffer[16], b, s);
       case 1:
        var match = acc$0[2], p$0 = acc$0[1];
        if(0 === match[0]){
         var acc$1 = match[1];
         bufput_acc(b, p$0);
         caml_call2(Stdlib_Buffer[16], b, cst$20);
         acc$0 = acc$1;
        }
        else{
         var acc$2 = match[1];
         bufput_acc(b, p$0);
         caml_call2(Stdlib_Buffer[16], b, cst$21);
         acc$0 = acc$2;
        }
        break;
       case 6:
        var f = acc$0[2], p$3 = acc$0[1];
        bufput_acc(b, p$3);
        return caml_call1(f, b);
       case 7:
        var acc$3 = acc$0[1]; acc$0 = acc$3; break;
       case 8:
        var msg = acc$0[2], p$4 = acc$0[1];
        bufput_acc(b, p$4);
        return caml_call1(Stdlib[1], msg);
       case 2:
       case 4:
        var s$0 = acc$0[2], p$1 = acc$0[1];
        bufput_acc(b, p$1);
        return caml_call2(Stdlib_Buffer[16], b, s$0);
       default:
        var c = acc$0[2], p$2 = acc$0[1];
        bufput_acc(b, p$2);
        return caml_call2(Stdlib_Buffer[12], b, c);
     }
    }
   }
   function strput_acc(b, acc){
    var acc$0 = acc;
    for(;;){
     if(typeof acc$0 === "number") return 0;
     switch(acc$0[0]){
       case 0:
        var
         fmting_lit = acc$0[2],
         p = acc$0[1],
         s = string_of_formatting_lit(fmting_lit);
        strput_acc(b, p);
        return caml_call2(Stdlib_Buffer[16], b, s);
       case 1:
        var match = acc$0[2], p$0 = acc$0[1];
        if(0 === match[0]){
         var acc$1 = match[1];
         strput_acc(b, p$0);
         caml_call2(Stdlib_Buffer[16], b, cst$22);
         acc$0 = acc$1;
        }
        else{
         var acc$2 = match[1];
         strput_acc(b, p$0);
         caml_call2(Stdlib_Buffer[16], b, cst$23);
         acc$0 = acc$2;
        }
        break;
       case 6:
        var f = acc$0[2], p$3 = acc$0[1];
        strput_acc(b, p$3);
        var _bv_ = caml_call1(f, 0);
        return caml_call2(Stdlib_Buffer[16], b, _bv_);
       case 7:
        var acc$3 = acc$0[1]; acc$0 = acc$3; break;
       case 8:
        var msg = acc$0[2], p$4 = acc$0[1];
        strput_acc(b, p$4);
        return caml_call1(Stdlib[1], msg);
       case 2:
       case 4:
        var s$0 = acc$0[2], p$1 = acc$0[1];
        strput_acc(b, p$1);
        return caml_call2(Stdlib_Buffer[16], b, s$0);
       default:
        var c = acc$0[2], p$2 = acc$0[1];
        strput_acc(b, p$2);
        return caml_call2(Stdlib_Buffer[12], b, c);
     }
    }
   }
   function failwith_message(param){
    var fmt = param[1], buf = caml_call1(Stdlib_Buffer[1], 256);
    function k(acc){
     strput_acc(buf, acc);
     var _bu_ = caml_call1(Stdlib_Buffer[2], buf);
     return caml_call1(Stdlib[2], _bu_);
    }
    return make_printf(k, 0, fmt);
   }
   function open_box_of_string(str){
    if(str == cst$43) return _x_;
    var len = caml_ml_string_length(str);
    function invalid_box(param){
     return caml_call1(failwith_message(_y_), str);
    }
    function parse_spaces(i){
     var i$0 = i;
     for(;;){
      if(i$0 === len) return i$0;
      var match = caml_string_get(str, i$0);
      if(9 !== match && 32 !== match) return i$0;
      var i$1 = i$0 + 1 | 0;
      i$0 = i$1;
     }
    }
    var wstart = parse_spaces(0);
    a:
    b:
    {
     var wend = wstart;
     for(;;){
      if(wend === len) break b;
      if(25 < caml_string_get(str, wend) - 97 >>> 0) break;
      var j = wend + 1 | 0;
      wend = j;
     }
     break a;
    }
    var
     box_name = caml_call3(Stdlib_String[15], str, wstart, wend - wstart | 0),
     nstart = parse_spaces(wend);
    a:
    b:
    {
     var nend = nstart;
     for(;;){
      if(nend === len) break b;
      var match = caml_string_get(str, nend);
      if(48 <= match){if(58 <= match) break;} else if(45 !== match) break;
      var j$0 = nend + 1 | 0;
      nend = j$0;
     }
     break a;
    }
    if(nstart === nend)
     var indent = 0;
    else
     try{
      var
       _bs_ =
         runtime.caml_int_of_string
          (caml_call3(Stdlib_String[15], str, nstart, nend - nstart | 0)),
       indent = _bs_;
     }
     catch(_bt_){
      var _br_ = caml_wrap_exception(_bt_);
      if(_br_[1] !== Stdlib[7]) throw caml_maybe_attach_backtrace(_br_, 0);
      var indent = invalid_box(0);
     }
    var exp_end = parse_spaces(nend);
    if(exp_end !== len) invalid_box(0);
    a:
    {
     if(box_name !== cst$43 && box_name !== "b"){
      if(box_name === "h"){var box_type = 0; break a;}
      if(box_name === "hov"){var box_type = 3; break a;}
      if(box_name === "hv"){var box_type = 2; break a;}
      if(box_name !== "v"){var box_type = invalid_box(0); break a;}
      var box_type = 1;
      break a;
     }
     var box_type = 4;
    }
    return [0, indent, box_type];
   }
   function make_padding_fmt_ebb(pad, fmt){
    if(typeof pad === "number") return [0, 0, fmt];
    if(0 === pad[0]){var w = pad[2], s = pad[1]; return [0, [0, s, w], fmt];}
    var s$0 = pad[1];
    return [0, [1, s$0], fmt];
   }
   function make_padprec_fmt_ebb(pad, prec, fmt){
    if(typeof prec === "number")
     var match = prec ? [0, 1] : [0, 0];
    else
     var p = prec[1], match = [0, [0, p]];
    var prec$0 = match[1];
    if(typeof pad === "number") return [0, 0, prec$0, fmt];
    if(0 === pad[0]){
     var w = pad[2], s = pad[1];
     return [0, [0, s, w], prec$0, fmt];
    }
    var s$0 = pad[1];
    return [0, [1, s$0], prec$0, fmt];
   }
   function fmt_ebb_of_string(legacy_behavior, str){
    if(legacy_behavior)
     var flag = legacy_behavior[1], legacy_behavior$0 = flag;
    else
     var legacy_behavior$0 = 1;
    function invalid_format_message(str_ind, msg){
     return caml_call3(failwith_message(_z_), str, str_ind, msg);
    }
    function invalid_format_without(str_ind, c, s){
     return caml_call4(failwith_message(_A_), str, str_ind, c, s);
    }
    function expected_character(str_ind, expected, read){
     return caml_call4(failwith_message(_B_), str, str_ind, expected, read);
    }
    function parse(lit_start, end_ind){
     a:
     {
      var str_ind = lit_start;
      for(;;){
       if(str_ind === end_ind) return add_literal(lit_start, str_ind, 0);
       var match = caml_string_get(str, str_ind);
       if(37 === match) break;
       if(64 === match) break a;
       var str_ind$1 = str_ind + 1 | 0;
       str_ind = str_ind$1;
      }
      var str_ind$2 = str_ind + 1 | 0;
      if(str_ind$2 === end_ind)
       invalid_format_message(end_ind, cst_unexpected_end_of_format);
      var
       match$1 =
         95 === caml_string_get(str, str_ind$2)
          ? parse_flags(str_ind, str_ind$2 + 1 | 0, end_ind, 1)
          : parse_flags(str_ind, str_ind$2, end_ind, 0),
       fmt_rest = match$1[1];
      return add_literal(lit_start, str_ind, fmt_rest);
     }
     var str_ind$0 = str_ind + 1 | 0;
     a:
     if(str_ind$0 === end_ind)
      var match$0 = _N_;
     else{
      var c = caml_string_get(str, str_ind$0);
      if(65 <= c){
       if(94 <= c){
        var switcher = c - 123 | 0;
        if(2 >= switcher >>> 0)
         switch(switcher){
           case 0:
            var match$0 = parse_tag(1, str_ind$0 + 1 | 0, end_ind); break a;
           case 1: break;
           default:
            var
             fmt_rest$2 = parse(str_ind$0 + 1 | 0, end_ind)[1],
             match$0 = [0, [17, 1, fmt_rest$2]];
            break a;
         }
       }
       else if(91 <= c)
        switch(c - 91 | 0){
          case 0:
           var match$0 = parse_tag(0, str_ind$0 + 1 | 0, end_ind); break a;
          case 1: break;
          default:
           var
            fmt_rest$3 = parse(str_ind$0 + 1 | 0, end_ind)[1],
            match$0 = [0, [17, 0, fmt_rest$3]];
           break a;
        }
      }
      else{
       if(10 === c){
        var
         fmt_rest$4 = parse(str_ind$0 + 1 | 0, end_ind)[1],
         match$0 = [0, [17, 3, fmt_rest$4]];
        break a;
       }
       if(32 <= c)
        switch(c - 32 | 0){
          case 0:
           var
            fmt_rest$5 = parse(str_ind$0 + 1 | 0, end_ind)[1],
            match$0 = [0, [17, _O_, fmt_rest$5]];
           break a;
          case 5:
           if
            ((str_ind$0 + 1 | 0) < end_ind
             && 37 === caml_string_get(str, str_ind$0 + 1 | 0)){
            var
             fmt_rest$6 = parse(str_ind$0 + 2 | 0, end_ind)[1],
             match$0 = [0, [17, 6, fmt_rest$6]];
            break a;
           }
           var
            fmt_rest$7 = parse(str_ind$0, end_ind)[1],
            match$0 = [0, [12, 64, fmt_rest$7]];
           break a;
          case 12:
           var
            fmt_rest$8 = parse(str_ind$0 + 1 | 0, end_ind)[1],
            match$0 = [0, [17, _P_, fmt_rest$8]];
           break a;
          case 14:
           var
            fmt_rest$9 = parse(str_ind$0 + 1 | 0, end_ind)[1],
            match$0 = [0, [17, 4, fmt_rest$9]];
           break a;
          case 27:
           var str_ind$3 = str_ind$0 + 1 | 0;
           b:
           try{
            var
             _bg_ = str_ind$3 === end_ind ? 1 : 0,
             _bh_ = _bg_ || (60 !== caml_string_get(str, str_ind$3) ? 1 : 0);
            if(_bh_) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
            var
             str_ind_1 = parse_spaces(str_ind$3 + 1 | 0, end_ind),
             match$2 = caml_string_get(str, str_ind_1);
            c:
            {
             if(48 <= match$2){
              if(58 > match$2) break c;
             }
             else if(45 === match$2) break c;
             throw caml_maybe_attach_backtrace(Stdlib[8], 1);
            }
            var
             match$3 = parse_integer(str_ind_1, end_ind),
             width = match$3[2],
             str_ind_2 = match$3[1],
             str_ind_3 = parse_spaces(str_ind_2, end_ind),
             switcher$0 = caml_string_get(str, str_ind_3) - 45 | 0;
            if(12 < switcher$0 >>> 0){
             if(17 === switcher$0){
              var
               s =
                 caml_call3
                  (Stdlib_String[15],
                   str,
                   str_ind$3 - 2 | 0,
                   (str_ind_3 - str_ind$3 | 0) + 3 | 0),
               _bi_ = [0, s, width, 0],
               _bj_ = str_ind_3 + 1 | 0,
               formatting_lit$0 = _bi_,
               next_ind = _bj_;
              break b;
             }
            }
            else if(1 < switcher$0 - 1 >>> 0){
             var
              match$4 = parse_integer(str_ind_3, end_ind),
              offset = match$4[2],
              str_ind_4 = match$4[1],
              str_ind_5 = parse_spaces(str_ind_4, end_ind);
             if(62 !== caml_string_get(str, str_ind_5))
              throw caml_maybe_attach_backtrace(Stdlib[8], 1);
             var
              s$0 =
                caml_call3
                 (Stdlib_String[15],
                  str,
                  str_ind$3 - 2 | 0,
                  (str_ind_5 - str_ind$3 | 0) + 3 | 0),
              _bk_ = [0, s$0, width, offset],
              _bl_ = str_ind_5 + 1 | 0,
              formatting_lit$0 = _bk_,
              next_ind = _bl_;
             break b;
            }
            throw caml_maybe_attach_backtrace(Stdlib[8], 1);
           }
           catch(_bq_){
            var _bf_ = caml_wrap_exception(_bq_);
            if(_bf_ !== Stdlib[8] && _bf_[1] !== Stdlib[7])
             throw caml_maybe_attach_backtrace(_bf_, 0);
            var formatting_lit$0 = formatting_lit, next_ind = str_ind$3;
           }
           var
            fmt_rest$12 = parse(next_ind, end_ind)[1],
            match$0 = [0, [17, formatting_lit$0, fmt_rest$12]];
           break a;
          case 28:
           var str_ind$4 = str_ind$0 + 1 | 0;
           try{
            var
             str_ind_1$0 = parse_spaces(str_ind$4, end_ind),
             match$6 = caml_string_get(str, str_ind_1$0);
            b:
            {
             c:
             {
              if(48 <= match$6){
               if(58 > match$6) break c;
              }
              else if(45 === match$6) break c;
              var _bo_ = 0;
              break b;
             }
             var
              match$7 = parse_integer(str_ind_1$0, end_ind),
              size = match$7[2],
              str_ind_2$0 = match$7[1],
              str_ind_3$0 = parse_spaces(str_ind_2$0, end_ind);
             if(62 !== caml_string_get(str, str_ind_3$0))
              throw caml_maybe_attach_backtrace(Stdlib[8], 1);
             var
              s$1 =
                caml_call3
                 (Stdlib_String[15],
                  str,
                  str_ind$4 - 2 | 0,
                  (str_ind_3$0 - str_ind$4 | 0) + 3 | 0),
              _bo_ = [0, [0, str_ind_3$0 + 1 | 0, [1, s$1, size]]];
            }
            var _bn_ = _bo_;
           }
           catch(_bp_){
            var _bm_ = caml_wrap_exception(_bp_);
            if(_bm_ !== Stdlib[8] && _bm_[1] !== Stdlib[7])
             throw caml_maybe_attach_backtrace(_bm_, 0);
            var _bn_ = 0;
           }
           if(_bn_)
            var
             match$5 = _bn_[1],
             formatting_lit$1 = match$5[2],
             next_ind$0 = match$5[1],
             fmt_rest$13 = parse(next_ind$0, end_ind)[1],
             _be_ = [0, [17, formatting_lit$1, fmt_rest$13]];
           else
            var
             fmt_rest$14 = parse(str_ind$4, end_ind)[1],
             _be_ = [0, [17, _Q_, fmt_rest$14]];
           var match$0 = _be_;
           break a;
          case 31:
           var
            fmt_rest$10 = parse(str_ind$0 + 1 | 0, end_ind)[1],
            match$0 = [0, [17, 2, fmt_rest$10]];
           break a;
          case 32:
           var
            fmt_rest$11 = parse(str_ind$0 + 1 | 0, end_ind)[1],
            match$0 = [0, [17, 5, fmt_rest$11]];
           break a;
        }
      }
      var
       fmt_rest$1 = parse(str_ind$0 + 1 | 0, end_ind)[1],
       match$0 = [0, [17, [2, c], fmt_rest$1]];
     }
     var fmt_rest$0 = match$0[1];
     return add_literal(lit_start, str_ind, fmt_rest$0);
    }
    function parse_flags(pct_ind, str_ind, end_ind, ign){
     var
      zero = [0, 0],
      minus = [0, 0],
      plus = [0, 0],
      space = [0, 0],
      hash = [0, 0];
     function set_flag(str_ind, flag){
      var _bb_ = flag[1], _bc_ = _bb_ ? 1 - legacy_behavior$0 : _bb_;
      if(_bc_){
       var _bd_ = caml_string_get(str, str_ind);
       caml_call3(failwith_message(_C_), str, str_ind, _bd_);
      }
      flag[1] = 1;
      return;
     }
     a:
     b:
     {
      var str_ind$0 = str_ind;
      c:
      for(;;){
       if(str_ind$0 === end_ind)
        invalid_format_message(end_ind, cst_unexpected_end_of_format);
       var switcher = caml_string_get(str, str_ind$0) - 32 | 0;
       if(16 < switcher >>> 0) break b;
       switch(switcher){
         case 0:
          set_flag(str_ind$0, space);
          var str_ind$1 = str_ind$0 + 1 | 0;
          str_ind$0 = str_ind$1;
          break;
         case 3:
          set_flag(str_ind$0, hash);
          var str_ind$2 = str_ind$0 + 1 | 0;
          str_ind$0 = str_ind$2;
          break;
         case 11:
          set_flag(str_ind$0, plus);
          var str_ind$3 = str_ind$0 + 1 | 0;
          str_ind$0 = str_ind$3;
          break;
         case 13:
          set_flag(str_ind$0, minus);
          var str_ind$4 = str_ind$0 + 1 | 0;
          str_ind$0 = str_ind$4;
          break;
         case 16:
          set_flag(str_ind$0, zero);
          var str_ind$5 = str_ind$0 + 1 | 0;
          str_ind$0 = str_ind$5;
          break;
         default: break c;
       }
      }
      break a;
     }
     var
      space$0 = space[1],
      hash$0 = hash[1],
      plus$0 = plus[1],
      minus$0 = minus[1],
      zero$0 = zero[1];
     if(str_ind$0 === end_ind)
      invalid_format_message(end_ind, cst_unexpected_end_of_format);
     var
      padty =
        zero$0
         ? minus$0
           ? legacy_behavior$0
             ? 0
             : incompatible_flag(pct_ind, str_ind$0, 45, cst_0)
           : 2
         : minus$0 ? 0 : 1,
      match = caml_string_get(str, str_ind$0);
     if(48 <= match){
      if(58 > match){
       var
        match$0 = parse_positive(str_ind$0, end_ind, 0),
        width = match$0[2],
        new_ind = match$0[1];
       return parse_after_padding
               (pct_ind,
                new_ind,
                end_ind,
                minus$0,
                plus$0,
                hash$0,
                space$0,
                ign,
                [0, padty, width]);
      }
     }
     else if(42 === match)
      return parse_after_padding
              (pct_ind,
               str_ind$0 + 1 | 0,
               end_ind,
               minus$0,
               plus$0,
               hash$0,
               space$0,
               ign,
               [1, padty]);
     switch(padty){
       case 0:
        if(1 - legacy_behavior$0)
         invalid_format_without(str_ind$0 - 1 | 0, 45, cst_padding);
        return parse_after_padding
                (pct_ind,
                 str_ind$0,
                 end_ind,
                 minus$0,
                 plus$0,
                 hash$0,
                 space$0,
                 ign,
                 0);
       case 1:
        return parse_after_padding
                (pct_ind,
                 str_ind$0,
                 end_ind,
                 minus$0,
                 plus$0,
                 hash$0,
                 space$0,
                 ign,
                 0);
       default:
        return parse_after_padding
                (pct_ind,
                 str_ind$0,
                 end_ind,
                 minus$0,
                 plus$0,
                 hash$0,
                 space$0,
                 ign,
                 _D_);
     }
    }
    function parse_after_padding
    (pct_ind, str_ind, end_ind, minus, plus, hash, space, ign, pad){
     if(str_ind === end_ind)
      invalid_format_message(end_ind, cst_unexpected_end_of_format);
     var symb = caml_string_get(str, str_ind);
     if(46 !== symb)
      return parse_conversion
              (pct_ind,
               str_ind + 1 | 0,
               end_ind,
               plus,
               hash,
               space,
               ign,
               pad,
               0,
               pad,
               symb);
     var str_ind$0 = str_ind + 1 | 0;
     if(str_ind$0 === end_ind)
      invalid_format_message(end_ind, cst_unexpected_end_of_format);
     function parse_literal(minus, str_ind){
      var
       match = parse_positive(str_ind, end_ind, 0),
       prec = match[2],
       new_ind = match[1];
      return parse_after_precision
              (pct_ind,
               new_ind,
               end_ind,
               minus,
               plus,
               hash,
               space,
               ign,
               pad,
               [0, prec]);
     }
     var symb$0 = caml_string_get(str, str_ind$0);
     if(48 <= symb$0){
      if(58 > symb$0) return parse_literal(minus, str_ind$0);
     }
     else if(42 <= symb$0)
      switch(symb$0 - 42 | 0){
        case 0:
         return parse_after_precision
                 (pct_ind,
                  str_ind$0 + 1 | 0,
                  end_ind,
                  minus,
                  plus,
                  hash,
                  space,
                  ign,
                  pad,
                  1);
        case 1:
        case 3:
         if(legacy_behavior$0){
          var
           _ba_ = str_ind$0 + 1 | 0,
           minus$0 = minus || (45 === symb$0 ? 1 : 0);
          return parse_literal(minus$0, _ba_);
         }
         break;
      }
     return legacy_behavior$0
             ? parse_after_precision
               (pct_ind,
                str_ind$0,
                end_ind,
                minus,
                plus,
                hash,
                space,
                ign,
                pad,
                _E_)
             : invalid_format_without(str_ind$0 - 1 | 0, 46, cst_precision);
    }
    function parse_after_precision
    (pct_ind, str_ind, end_ind, minus, plus, hash, space, ign, pad, prec){
     if(str_ind === end_ind)
      invalid_format_message(end_ind, cst_unexpected_end_of_format);
     function parse_conv(padprec){
      return parse_conversion
              (pct_ind,
               str_ind + 1 | 0,
               end_ind,
               plus,
               hash,
               space,
               ign,
               pad,
               prec,
               padprec,
               caml_string_get(str, str_ind));
     }
     if(typeof pad !== "number") return parse_conv(pad);
     if(typeof prec === "number" && ! prec) return parse_conv(0);
     if(minus){
      if(typeof prec === "number") return parse_conv(_F_);
      var n = prec[1];
      return parse_conv([0, 0, n]);
     }
     if(typeof prec === "number") return parse_conv(_G_);
     var n$0 = prec[1];
     return parse_conv([0, 1, n$0]);
    }
    function parse_conversion
    (pct_ind,
     str_ind,
     end_ind,
     plus,
     hash,
     space,
     ign,
     pad,
     prec,
     padprec,
     symb){
     var
      plus_used = [0, 0],
      hash_used = [0, 0],
      space_used = [0, 0],
      ign_used = [0, 0],
      pad_used = [0, 0],
      prec_used = [0, 0];
     function get_plus(param){plus_used[1] = 1; return plus;}
     function get_hash(param){hash_used[1] = 1; return hash;}
     function get_space(param){space_used[1] = 1; return space;}
     function get_ign(param){ign_used[1] = 1; return ign;}
     function get_pad(param){pad_used[1] = 1; return pad;}
     function get_prec(param){prec_used[1] = 1; return prec;}
     function get_padprec(param){pad_used[1] = 1; return padprec;}
     function get_int_pad(param){
      var pad = get_pad(0), match = get_prec(0);
      if(typeof match === "number" && ! match) return pad;
      if(typeof pad === "number") return 0;
      if(0 !== pad[0])
       return 2 <= pad[1]
               ? legacy_behavior$0
                 ? _H_
                 : incompatible_flag(pct_ind, str_ind, 48, cst_precision$1)
               : pad;
      if(2 > pad[1]) return pad;
      var n = pad[2];
      return legacy_behavior$0
              ? [0, 1, n]
              : incompatible_flag(pct_ind, str_ind, 48, cst_precision$0);
     }
     function check_no_0(symb, pad){
      if(typeof pad === "number") return pad;
      if(0 !== pad[0])
       return 2 <= pad[1]
               ? legacy_behavior$0
                 ? _I_
                 : incompatible_flag(pct_ind, str_ind, symb, cst_0$1)
               : pad;
      if(2 > pad[1]) return pad;
      var width = pad[2];
      return legacy_behavior$0
              ? [0, 1, width]
              : incompatible_flag(pct_ind, str_ind, symb, cst_0$0);
     }
     function opt_of_pad(c, pad){
      if(typeof pad === "number") return 0;
      if(0 === pad[0])
       switch(pad[1]){
         case 0:
          var width = pad[2];
          return legacy_behavior$0
                  ? [0, width]
                  : incompatible_flag(pct_ind, str_ind, c, cst$24);
         case 1:
          var width$0 = pad[2]; return [0, width$0];
         default:
          var width$1 = pad[2];
          return legacy_behavior$0
                  ? [0, width$1]
                  : incompatible_flag(pct_ind, str_ind, c, cst_0$2);
       }
      return incompatible_flag(pct_ind, str_ind, c, cst$25);
     }
     function get_pad_opt(c){return opt_of_pad(c, get_pad(0));}
     function get_padprec_opt(c){return opt_of_pad(c, get_padprec(0));}
     a:
     {
      if(124 > symb)
       switch(symb){
         case 33:
          var
           fmt_rest$5 = parse(str_ind, end_ind)[1],
           fmt_result = [0, [10, fmt_rest$5]];
          break a;
         case 40:
          var
           sub_end = search_subformat_end(str_ind, end_ind, 41),
           fmt_rest$7 = parse(sub_end + 2 | 0, end_ind)[1],
           sub_fmt = parse(str_ind, sub_end)[1],
           sub_fmtty = fmtty_of_fmt(sub_fmt);
          if(get_ign(0))
           var
            ignored$2 = [9, get_pad_opt(95), sub_fmtty],
            _aJ_ = [0, [23, ignored$2, fmt_rest$7]];
          else
           var _aJ_ = [0, [14, get_pad_opt(40), sub_fmtty, fmt_rest$7]];
          var fmt_result = _aJ_;
          break a;
         case 44:
          var fmt_result = parse(str_ind, end_ind); break a;
         case 67:
          var
           fmt_rest$10 = parse(str_ind, end_ind)[1],
           _aL_ =
             get_ign(0) ? [0, [23, 1, fmt_rest$10]] : [0, [1, fmt_rest$10]],
           fmt_result = _aL_;
          break a;
         case 78:
          var fmt_rest$14 = parse(str_ind, end_ind)[1], counter$0 = 2;
          if(get_ign(0))
           var
            ignored$6 = [11, counter$0],
            _aR_ = [0, [23, ignored$6, fmt_rest$14]];
          else
           var _aR_ = [0, [21, counter$0, fmt_rest$14]];
          var fmt_result = _aR_;
          break a;
         case 83:
          var
           pad$6 = check_no_0(symb, get_padprec(0)),
           fmt_rest$15 = parse(str_ind, end_ind)[1];
          if(get_ign(0))
           var
            ignored$7 = [1, get_padprec_opt(95)],
            _aS_ = [0, [23, ignored$7, fmt_rest$15]];
          else
           var
            match$5 = make_padding_fmt_ebb(pad$6, fmt_rest$15),
            fmt_rest$16 = match$5[2],
            pad$7 = match$5[1],
            _aS_ = [0, [3, pad$7, fmt_rest$16]];
          var fmt_result = _aS_;
          break a;
         case 91:
          if(str_ind === end_ind)
           invalid_format_message(end_ind, cst_unexpected_end_of_format);
          var
           char_set = create_char_set(0),
           add_range =
             function(c$0, c){
              if(c >= c$0){
               var i = c$0;
               for(;;){
                add_in_char_set(char_set, caml_call1(Stdlib[29], i));
                var _a$_ = i + 1 | 0;
                if(c === i) break;
                i = _a$_;
               }
              }
              return;
             },
           fail_single_percent =
             function(str_ind){
              return caml_call2(failwith_message(_R_), str, str_ind);
             },
           parse_char_set_content =
             function(counter, str_ind, end_ind){
              var str_ind$0 = str_ind;
              for(;;){
               if(str_ind$0 === end_ind)
                invalid_format_message(end_ind, cst_unexpected_end_of_format);
               var c = caml_string_get(str, str_ind$0);
               if(45 !== c){
                if(93 === c) return str_ind$0 + 1 | 0;
                var _a__ = str_ind$0 + 1 | 0;
                if(counter >= 50)
                 return caml_trampoline_return
                         (parse_char_set_after_char$0, [0, _a__, end_ind, c]);
                var counter$0 = counter + 1 | 0;
                return parse_char_set_after_char$0
                        (counter$0, _a__, end_ind, c);
               }
               add_in_char_set(char_set, 45);
               var str_ind$1 = str_ind$0 + 1 | 0;
               str_ind$0 = str_ind$1;
              }
             },
           parse_char_set_after_char$0 =
             function(counter, str_ind, end_ind, c){
              var str_ind$0 = str_ind, c$0 = c;
              for(;;){
               if(str_ind$0 === end_ind)
                invalid_format_message(end_ind, cst_unexpected_end_of_format);
               var c$1 = caml_string_get(str, str_ind$0);
               a:
               {
                if(46 <= c$1){
                 if(64 !== c$1){
                  if(93 !== c$1) break a;
                  add_in_char_set(char_set, c$0);
                  return str_ind$0 + 1 | 0;
                 }
                }
                else if(37 !== c$1){
                 if(45 > c$1) break a;
                 var str_ind$2 = str_ind$0 + 1 | 0;
                 if(str_ind$2 === end_ind)
                  invalid_format_message
                   (end_ind, cst_unexpected_end_of_format);
                 var c$2 = caml_string_get(str, str_ind$2);
                 if(37 === c$2){
                  if((str_ind$2 + 1 | 0) === end_ind)
                   invalid_format_message
                    (end_ind, cst_unexpected_end_of_format);
                  var c$3 = caml_string_get(str, str_ind$2 + 1 | 0);
                  if(37 !== c$3 && 64 !== c$3)
                   return fail_single_percent(str_ind$2);
                  add_range(c$0, c$3);
                  var _a8_ = str_ind$2 + 2 | 0;
                  if(counter >= 50)
                   return caml_trampoline_return
                           (parse_char_set_content, [0, _a8_, end_ind]);
                  var counter$1 = counter + 1 | 0;
                  return parse_char_set_content(counter$1, _a8_, end_ind);
                 }
                 if(93 === c$2){
                  add_in_char_set(char_set, c$0);
                  add_in_char_set(char_set, 45);
                  return str_ind$2 + 1 | 0;
                 }
                 add_range(c$0, c$2);
                 var _a9_ = str_ind$2 + 1 | 0;
                 if(counter >= 50)
                  return caml_trampoline_return
                          (parse_char_set_content, [0, _a9_, end_ind]);
                 var counter$0 = counter + 1 | 0;
                 return parse_char_set_content(counter$0, _a9_, end_ind);
                }
                if(37 === c$0){
                 add_in_char_set(char_set, c$1);
                 var _a7_ = str_ind$0 + 1 | 0;
                 if(counter >= 50)
                  return caml_trampoline_return
                          (parse_char_set_content, [0, _a7_, end_ind]);
                 var counter$2 = counter + 1 | 0;
                 return parse_char_set_content(counter$2, _a7_, end_ind);
                }
               }
               if(37 === c$0) fail_single_percent(str_ind$0);
               add_in_char_set(char_set, c$0);
               var str_ind$1 = str_ind$0 + 1 | 0;
               str_ind$0 = str_ind$1;
               c$0 = c$1;
              }
             },
           parse_char_set_after_char =
             function(str_ind, end_ind, c){
              return caml_trampoline
                      (parse_char_set_after_char$0(0, str_ind, end_ind, c));
             };
          if(str_ind === end_ind)
           invalid_format_message(end_ind, cst_unexpected_end_of_format);
          if(94 === caml_string_get(str, str_ind))
           var
            str_ind$0 = str_ind + 1 | 0,
            reverse = 1,
            str_ind$1 = str_ind$0;
          else
           var reverse = 0, str_ind$1 = str_ind;
          if(str_ind$1 === end_ind)
           invalid_format_message(end_ind, cst_unexpected_end_of_format);
          var
           c = caml_string_get(str, str_ind$1),
           next_ind = parse_char_set_after_char(str_ind$1 + 1 | 0, end_ind, c),
           char_set$0 = freeze_char_set(char_set),
           char_set$1 = reverse ? rev_char_set(char_set$0) : char_set$0,
           fmt_rest$19 = parse(next_ind, end_ind)[1];
          if(get_ign(0))
           var
            ignored$9 = [10, get_pad_opt(95), char_set$1],
            _aX_ = [0, [23, ignored$9, fmt_rest$19]];
          else
           var _aX_ = [0, [20, get_pad_opt(91), char_set$1, fmt_rest$19]];
          var fmt_result = _aX_;
          break a;
         case 97:
          var
           fmt_rest$20 = parse(str_ind, end_ind)[1],
           fmt_result = [0, [15, fmt_rest$20]];
          break a;
         case 99:
          var
           char_format =
             function(fmt_rest){
              return get_ign(0) ? [0, [23, 0, fmt_rest]] : [0, [0, fmt_rest]];
             },
           fmt_rest$21 = parse(str_ind, end_ind)[1],
           match$7 = get_pad_opt(99);
          if(match$7){
           if(0 === match$7[1])
            var
             _aY_ =
               get_ign(0) ? [0, [23, 3, fmt_rest$21]] : [0, [22, fmt_rest$21]],
             _aZ_ = _aY_;
           else
            var
             _aZ_ =
               legacy_behavior$0
                ? char_format(fmt_rest$21)
                : invalid_format_message
                  (str_ind, cst_non_zero_widths_are_unsupp);
           var _a0_ = _aZ_;
          }
          else
           var _a0_ = char_format(fmt_rest$21);
          var fmt_result = _a0_;
          break a;
         case 114:
          var
           fmt_rest$22 = parse(str_ind, end_ind)[1],
           _a1_ =
             get_ign(0) ? [0, [23, 2, fmt_rest$22]] : [0, [19, fmt_rest$22]],
           fmt_result = _a1_;
          break a;
         case 115:
          var
           pad$9 = check_no_0(symb, get_padprec(0)),
           fmt_rest$23 = parse(str_ind, end_ind)[1];
          if(get_ign(0))
           var
            ignored$10 = [0, get_padprec_opt(95)],
            _a2_ = [0, [23, ignored$10, fmt_rest$23]];
          else
           var
            match$8 = make_padding_fmt_ebb(pad$9, fmt_rest$23),
            fmt_rest$24 = match$8[2],
            pad$10 = match$8[1],
            _a2_ = [0, [2, pad$10, fmt_rest$24]];
          var fmt_result = _a2_;
          break a;
         case 116:
          var
           fmt_rest$25 = parse(str_ind, end_ind)[1],
           fmt_result = [0, [16, fmt_rest$25]];
          break a;
         case 123:
          var
           sub_end$0 = search_subformat_end(str_ind, end_ind, 125),
           sub_fmt$0 = parse(str_ind, sub_end$0)[1],
           fmt_rest$26 = parse(sub_end$0 + 2 | 0, end_ind)[1],
           sub_fmtty$0 = fmtty_of_fmt(sub_fmt$0);
          if(get_ign(0))
           var
            ignored$11 = [8, get_pad_opt(95), sub_fmtty$0],
            _a3_ = [0, [23, ignored$11, fmt_rest$26]];
          else
           var _a3_ = [0, [13, get_pad_opt(123), sub_fmtty$0, fmt_rest$26]];
          var fmt_result = _a3_;
          break a;
         case 66:
         case 98:
          var
           pad$3 = check_no_0(symb, get_padprec(0)),
           fmt_rest$8 = parse(str_ind, end_ind)[1];
          if(get_ign(0))
           var
            ignored$3 = [7, get_padprec_opt(95)],
            _aK_ = [0, [23, ignored$3, fmt_rest$8]];
          else
           var
            match$3 = make_padding_fmt_ebb(pad$3, fmt_rest$8),
            fmt_rest$9 = match$3[2],
            pad$4 = match$3[1],
            _aK_ = [0, [9, pad$4, fmt_rest$9]];
          var fmt_result = _aK_;
          break a;
         case 37:
         case 64:
          var
           fmt_rest$6 = parse(str_ind, end_ind)[1],
           fmt_result = [0, [12, symb, fmt_rest$6]];
          break a;
         case 76:
         case 108:
         case 110:
          if(str_ind !== end_ind){
           var symb$0 = caml_string_get(str, str_ind), _a4_ = symb$0 - 88 | 0;
           b:
           {
            if(32 >= _a4_ >>> 0)
             switch(_a4_){
               case 0:
               case 12:
               case 17:
               case 23:
               case 29:
               case 32:
                var _aQ_ = 1; break b;
             }
            var _aQ_ = 0;
           }
           if(_aQ_) break;
          }
          var fmt_rest$13 = parse(str_ind, end_ind)[1];
          b:
          {
           if(108 <= symb){
            if(111 > symb)
             switch(symb - 108 | 0){
               case 0:
                var counter = 0; break b;
               case 1: break;
               default: var counter = 1; break b;
             }
           }
           else if(76 === symb){var counter = 2; break b;}
           throw caml_maybe_attach_backtrace([0, Assert_failure, _V_], 1);
          }
          if(get_ign(0))
           var
            ignored$5 = [11, counter],
            _aP_ = [0, [23, ignored$5, fmt_rest$13]];
          else
           var _aP_ = [0, [21, counter, fmt_rest$13]];
          var fmt_result = _aP_;
          break a;
         case 32:
         case 35:
         case 43:
         case 45:
         case 95:
          var
           fmt_result = caml_call3(failwith_message(_M_), str, pct_ind, symb);
          break a;
         case 88:
         case 100:
         case 105:
         case 111:
         case 117:
         case 120:
          var
           _aT_ = get_space(0),
           _aU_ = get_hash(0),
           iconv$2 =
             compute_int_conv(pct_ind, str_ind, get_plus(0), _aU_, _aT_, symb),
           fmt_rest$17 = parse(str_ind, end_ind)[1];
          if(get_ign(0))
           var
            ignored$8 = [2, iconv$2, get_pad_opt(95)],
            _aV_ = [0, [23, ignored$8, fmt_rest$17]];
          else
           var
            _aW_ = get_prec(0),
            match$6 = make_padprec_fmt_ebb(get_int_pad(0), _aW_, fmt_rest$17),
            fmt_rest$18 = match$6[3],
            prec$4 = match$6[2],
            pad$8 = match$6[1],
            _aV_ = [0, [4, iconv$2, pad$8, prec$4, fmt_rest$18]];
          var fmt_result = _aV_;
          break a;
         case 69:
         case 70:
         case 71:
         case 72:
         case 101:
         case 102:
         case 103:
         case 104:
          var
           space$1 = get_space(0),
           hash$1 = get_hash(0),
           plus$2 = get_plus(0),
           flag =
             plus$2
              ? space$1
                ? legacy_behavior$0
                  ? 1
                  : incompatible_flag(pct_ind, str_ind, 32, cst$36)
                : 1
              : space$1 ? 2 : 0;
          b:
          {
           c:
           if(73 <= symb){
            var switcher = symb - 101 | 0;
            if(3 >= switcher >>> 0){
             switch(switcher){
               case 0:
                var _a5_ = 1; break;
               case 1:
                var _a5_ = 0; break;
               case 2:
                var _a5_ = 3; break;
               default: var _a5_ = 6;
             }
             var kind = _a5_;
             break b;
            }
           }
           else if(69 <= symb){
            switch(symb - 69 | 0){
              case 0:
               var _a6_ = 2; break;
              case 1:
               break c;
              case 2:
               var _a6_ = 4; break;
              default: var _a6_ = 7;
            }
            var kind = _a6_;
            break b;
           }
           if(hash$1){
            if(70 === symb){var kind = 8; break b;}
           }
           else if(70 === symb){var kind = 5; break b;}
           throw caml_maybe_attach_backtrace([0, Assert_failure, _X_], 1);
          }
          var
           fconv = [0, flag, kind],
           fmt_rest$11 = parse(str_ind, end_ind)[1];
          if(get_ign(0)){
           var match = get_prec(0);
           if(typeof match === "number")
            var
             _aM_ =
               match ? incompatible_flag(pct_ind, str_ind, 95, cst$26) : 0;
           else
            var ndec = match[1], _aM_ = [0, ndec];
           var
            ignored$4 = [6, get_pad_opt(95), _aM_],
            _aN_ = [0, [23, ignored$4, fmt_rest$11]];
          }
          else
           var
            _aO_ = get_prec(0),
            match$4 = make_padprec_fmt_ebb(get_pad(0), _aO_, fmt_rest$11),
            fmt_rest$12 = match$4[3],
            prec$3 = match$4[2],
            pad$5 = match$4[1],
            _aN_ = [0, [8, fconv, pad$5, prec$3, fmt_rest$12]];
          var fmt_result = _aN_;
          break a;
       }
      b:
      if(108 <= symb){
       if(111 > symb){
        switch(symb - 108 | 0){
          case 0:
           var
            _at_ = caml_string_get(str, str_ind),
            _au_ = get_space(0),
            _av_ = get_hash(0),
            iconv =
              compute_int_conv
               (pct_ind, str_ind + 1 | 0, get_plus(0), _av_, _au_, _at_),
            fmt_rest = parse(str_ind + 1 | 0, end_ind)[1];
           if(get_ign(0))
            var
             ignored = [3, iconv, get_pad_opt(95)],
             _aw_ = [0, [23, ignored, fmt_rest]];
           else
            var
             _ay_ = get_prec(0),
             match$0 = make_padprec_fmt_ebb(get_int_pad(0), _ay_, fmt_rest),
             fmt_rest$0 = match$0[3],
             prec$0 = match$0[2],
             pad$0 = match$0[1],
             _aw_ = [0, [5, iconv, pad$0, prec$0, fmt_rest$0]];
           var _ax_ = _aw_;
           break;
          case 1:
           break b;
          default:
           var
            _az_ = caml_string_get(str, str_ind),
            _aA_ = get_space(0),
            _aB_ = get_hash(0),
            iconv$0 =
              compute_int_conv
               (pct_ind, str_ind + 1 | 0, get_plus(0), _aB_, _aA_, _az_),
            fmt_rest$1 = parse(str_ind + 1 | 0, end_ind)[1];
           if(get_ign(0))
            var
             ignored$0 = [4, iconv$0, get_pad_opt(95)],
             _aC_ = [0, [23, ignored$0, fmt_rest$1]];
           else
            var
             _aD_ = get_prec(0),
             match$1 = make_padprec_fmt_ebb(get_int_pad(0), _aD_, fmt_rest$1),
             fmt_rest$2 = match$1[3],
             prec$1 = match$1[2],
             pad$1 = match$1[1],
             _aC_ = [0, [6, iconv$0, pad$1, prec$1, fmt_rest$2]];
           var _ax_ = _aC_;
        }
        var fmt_result = _ax_;
        break a;
       }
      }
      else if(76 === symb){
       var
        _aE_ = caml_string_get(str, str_ind),
        _aF_ = get_space(0),
        _aG_ = get_hash(0),
        iconv$1 =
          compute_int_conv
           (pct_ind, str_ind + 1 | 0, get_plus(0), _aG_, _aF_, _aE_),
        fmt_rest$3 = parse(str_ind + 1 | 0, end_ind)[1];
       if(get_ign(0))
        var
         ignored$1 = [5, iconv$1, get_pad_opt(95)],
         _aH_ = [0, [23, ignored$1, fmt_rest$3]];
       else
        var
         _aI_ = get_prec(0),
         match$2 = make_padprec_fmt_ebb(get_int_pad(0), _aI_, fmt_rest$3),
         fmt_rest$4 = match$2[3],
         prec$2 = match$2[2],
         pad$2 = match$2[1],
         _aH_ = [0, [7, iconv$1, pad$2, prec$2, fmt_rest$4]];
       var fmt_result = _aH_;
       break a;
      }
      var
       fmt_result =
         caml_call3(failwith_message(_J_), str, str_ind - 1 | 0, symb);
     }
     if(1 - legacy_behavior$0){
      var _ak_ = 1 - plus_used[1], plus$0 = _ak_ ? plus : _ak_;
      if(plus$0) incompatible_flag(pct_ind, str_ind, symb, cst$27);
      var _al_ = 1 - hash_used[1], hash$0 = _al_ ? hash : _al_;
      if(hash$0) incompatible_flag(pct_ind, str_ind, symb, cst$28);
      var _am_ = 1 - space_used[1], space$0 = _am_ ? space : _am_;
      if(space$0) incompatible_flag(pct_ind, str_ind, symb, cst$29);
      var
       _an_ = 1 - pad_used[1],
       _ao_ = _an_ ? caml_notequal([0, pad], _K_) : _an_;
      if(_ao_) incompatible_flag(pct_ind, str_ind, symb, cst_padding$0);
      var
       _ap_ = 1 - prec_used[1],
       _aq_ = _ap_ ? caml_notequal([0, prec], _L_) : _ap_;
      if(_aq_){
       var _ar_ = ign ? 95 : symb;
       incompatible_flag(pct_ind, str_ind, _ar_, cst_precision$2);
      }
      var plus$1 = ign ? plus : ign;
      if(plus$1) incompatible_flag(pct_ind, str_ind, 95, cst$30);
     }
     var _as_ = 1 - ign_used[1], ign$0 = _as_ ? ign : _as_;
     a:
     if(ign$0){
      b:
      {
       if(38 <= symb){
        if(44 !== symb && 64 !== symb) break b;
       }
       else if(33 !== symb && 37 > symb) break b;
       if(legacy_behavior$0) break a;
      }
      incompatible_flag(pct_ind, str_ind, symb, cst$31);
     }
     return fmt_result;
    }
    function parse_tag(is_open_tag, str_ind, end_ind){
     try{
      if(str_ind === end_ind) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
      if(60 !== caml_string_get(str, str_ind))
       throw caml_maybe_attach_backtrace(Stdlib[8], 1);
      var ind = caml_call3(Stdlib_String[31], str, str_ind + 1 | 0, 62);
      if(end_ind <= ind) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
      var
       sub_str =
         caml_call3
          (Stdlib_String[15], str, str_ind, (ind - str_ind | 0) + 1 | 0),
       fmt_rest$0 = parse(ind + 1 | 0, end_ind)[1],
       sub_fmt = parse(str_ind, ind + 1 | 0)[1],
       sub_format$0 = [0, sub_fmt, sub_str],
       formatting$0 = is_open_tag ? [0, sub_format$0] : [1, sub_format$0],
       _ai_ = [0, [18, formatting$0, fmt_rest$0]];
      return _ai_;
     }
     catch(_aj_){
      var _ah_ = caml_wrap_exception(_aj_);
      if(_ah_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_ah_, 0);
      var
       fmt_rest = parse(str_ind, end_ind)[1],
       formatting = is_open_tag ? [0, sub_format] : [1, sub_format];
      return [0, [18, formatting, fmt_rest]];
     }
    }
    function parse_spaces(str_ind, end_ind){
     var str_ind$0 = str_ind;
     for(;;){
      if(str_ind$0 === end_ind)
       invalid_format_message(end_ind, cst_unexpected_end_of_format);
      if(32 !== caml_string_get(str, str_ind$0)) return str_ind$0;
      var str_ind$1 = str_ind$0 + 1 | 0;
      str_ind$0 = str_ind$1;
     }
    }
    function parse_positive(str_ind, end_ind, acc){
     var str_ind$0 = str_ind, acc$0 = acc;
     for(;;){
      if(str_ind$0 === end_ind)
       invalid_format_message(end_ind, cst_unexpected_end_of_format);
      var c = caml_string_get(str, str_ind$0);
      if(9 < c - 48 >>> 0) return [0, str_ind$0, acc$0];
      var new_acc = (acc$0 * 10 | 0) + (c - 48 | 0) | 0;
      if(Stdlib_Sys[12] < new_acc){
       var _ag_ = Stdlib_Sys[12];
       return caml_call3(failwith_message(_S_), str, new_acc, _ag_);
      }
      var str_ind$1 = str_ind$0 + 1 | 0;
      str_ind$0 = str_ind$1;
      acc$0 = new_acc;
     }
    }
    function parse_integer(str_ind, end_ind){
     if(str_ind === end_ind)
      invalid_format_message(end_ind, cst_unexpected_end_of_format);
     var match = caml_string_get(str, str_ind);
     if(48 <= match){
      if(58 > match) return parse_positive(str_ind, end_ind, 0);
     }
     else if(45 === match){
      if((str_ind + 1 | 0) === end_ind)
       invalid_format_message(end_ind, cst_unexpected_end_of_format);
      var c = caml_string_get(str, str_ind + 1 | 0);
      if(9 < c - 48 >>> 0)
       return expected_character(str_ind + 1 | 0, cst_digit, c);
      var
       match$0 = parse_positive(str_ind + 1 | 0, end_ind, 0),
       n = match$0[2],
       next_ind = match$0[1];
      return [0, next_ind, - n | 0];
     }
     throw caml_maybe_attach_backtrace([0, Assert_failure, _T_], 1);
    }
    function add_literal(lit_start, str_ind, fmt){
     var size = str_ind - lit_start | 0;
     return 0 === size
             ? [0, fmt]
             : 1
               === size
               ? [0, [12, caml_string_get(str, lit_start), fmt]]
               : [0,
                 [11,
                  caml_call3(Stdlib_String[15], str, lit_start, size),
                  fmt]];
    }
    function search_subformat_end(str_ind, end_ind, c){
     var str_ind$0 = str_ind;
     for(;;){
      if(str_ind$0 === end_ind)
       caml_call3(failwith_message(_U_), str, c, end_ind);
      if(37 === caml_string_get(str, str_ind$0)){
       if((str_ind$0 + 1 | 0) === end_ind)
        invalid_format_message(end_ind, cst_unexpected_end_of_format);
       if(caml_string_get(str, str_ind$0 + 1 | 0) === c) return str_ind$0;
       var match = caml_string_get(str, str_ind$0 + 1 | 0);
       if(95 <= match){
        if(123 <= match){
         if(126 > match)
          switch(match - 123 | 0){
            case 0:
             var
              sub_end = search_subformat_end(str_ind$0 + 2 | 0, end_ind, 125),
              str_ind$2 = sub_end + 2 | 0;
             str_ind$0 = str_ind$2;
             continue;
            case 1: break;
            default:
             return expected_character(str_ind$0 + 1 | 0, cst_character, 125);
          }
        }
        else if(96 > match){
         if((str_ind$0 + 2 | 0) === end_ind)
          invalid_format_message(end_ind, cst_unexpected_end_of_format);
         var match$0 = caml_string_get(str, str_ind$0 + 2 | 0);
         if(40 === match$0){
          var
           sub_end$0 = search_subformat_end(str_ind$0 + 3 | 0, end_ind, 41),
           str_ind$3 = sub_end$0 + 2 | 0;
          str_ind$0 = str_ind$3;
          continue;
         }
         if(123 === match$0){
          var
           sub_end$1 = search_subformat_end(str_ind$0 + 3 | 0, end_ind, 125),
           str_ind$4 = sub_end$1 + 2 | 0;
          str_ind$0 = str_ind$4;
          continue;
         }
         var str_ind$5 = str_ind$0 + 3 | 0;
         str_ind$0 = str_ind$5;
         continue;
        }
       }
       else{
        if(40 === match){
         var
          sub_end$2 = search_subformat_end(str_ind$0 + 2 | 0, end_ind, 41),
          str_ind$6 = sub_end$2 + 2 | 0;
         str_ind$0 = str_ind$6;
         continue;
        }
        if(41 === match)
         return expected_character(str_ind$0 + 1 | 0, cst_character$0, 41);
       }
       var str_ind$1 = str_ind$0 + 2 | 0;
       str_ind$0 = str_ind$1;
      }
      else{var str_ind$7 = str_ind$0 + 1 | 0; str_ind$0 = str_ind$7;}
     }
    }
    function compute_int_conv(pct_ind, str_ind, plus, hash, space, symb){
     var plus$0 = plus, hash$0 = hash, space$0 = space;
     for(;;){
      a:
      {
       if(plus$0){
        if(! hash$0){
         if(space$0) break a;
         if(100 === symb) return 1;
         if(105 === symb) return 4;
         break a;
        }
       }
       else{
        if(! hash$0){
         if(space$0){
          if(100 === symb) return 2;
          if(105 === symb) return 5;
          break a;
         }
         var switcher$1 = symb - 88 | 0;
         if(32 < switcher$1 >>> 0) break a;
         switch(switcher$1){
           case 0:
            return 8;
           case 12:
            return 0;
           case 17:
            return 3;
           case 23:
            return 10;
           case 29:
            return 12;
           case 32:
            return 6;
           default: break a;
         }
        }
        if(! space$0){
         var switcher$0 = symb - 88 | 0;
         if(32 >= switcher$0 >>> 0)
          switch(switcher$0){
            case 0:
             return 9;
            case 12:
             return 13;
            case 17:
             return 14;
            case 23:
             return 11;
            case 29:
             return 15;
            case 32:
             return 7;
          }
        }
       }
       var switcher = symb - 88 | 0;
       if(32 >= switcher >>> 0)
        switch(switcher){
          case 0:
           if(legacy_behavior$0) return 9; break;
          case 23:
           if(legacy_behavior$0) return 11; break;
          case 32:
           if(legacy_behavior$0) return 7; break;
          case 12:
          case 17:
          case 29:
           if(! legacy_behavior$0)
            return incompatible_flag(pct_ind, str_ind, symb, cst$35);
           hash$0 = 0;
           continue;
        }
      }
      if(plus$0)
       if(space$0){
        if(! legacy_behavior$0)
         return incompatible_flag(pct_ind, str_ind, 32, cst$32);
        space$0 = 0;
       }
       else{
        if(! legacy_behavior$0)
         return incompatible_flag(pct_ind, str_ind, symb, cst$33);
        plus$0 = 0;
       }
      else{
       if(! space$0)
        throw caml_maybe_attach_backtrace([0, Assert_failure, _W_], 1);
       if(! legacy_behavior$0)
        return incompatible_flag(pct_ind, str_ind, symb, cst$34);
       space$0 = 0;
      }
     }
    }
    function incompatible_flag(pct_ind, str_ind, symb, option){
     var
      subfmt =
        caml_call3(Stdlib_String[15], str, pct_ind, str_ind - pct_ind | 0);
     return caml_call5
             (failwith_message(_Y_), str, pct_ind, option, symb, subfmt);
    }
    return parse(0, caml_ml_string_length(str));
   }
   function format_of_string_fmtty(str, fmtty){
    var fmt = fmt_ebb_of_string(0, str)[1];
    try{var _ae_ = [0, type_format(fmt, fmtty), str]; return _ae_;}
    catch(_af_){
     var _ac_ = caml_wrap_exception(_af_);
     if(_ac_ !== Type_mismatch) throw caml_maybe_attach_backtrace(_ac_, 0);
     var _ad_ = string_of_fmtty(fmtty);
     return caml_call2(failwith_message(_Z_), str, _ad_);
    }
   }
   function format_of_string_format(str, param){
    var
     str$0 = param[2],
     fmt = param[1],
     fmt$0 = fmt_ebb_of_string(0, str)[1];
    try{
     var _aa_ = [0, type_format(fmt$0, fmtty_of_fmt(fmt)), str];
     return _aa_;
    }
    catch(_ab_){
     var _$_ = caml_wrap_exception(_ab_);
     if(_$_ === Type_mismatch)
      return caml_call2(failwith_message(___), str, str$0);
     throw caml_maybe_attach_backtrace(_$_, 0);
    }
   }
   var
    CamlinternalFormat =
      [0,
       is_in_char_set,
       rev_char_set,
       create_char_set,
       add_in_char_set,
       freeze_char_set,
       param_format_of_ignored_format,
       make_printf,
       make_iprintf,
       output_acc,
       bufput_acc,
       strput_acc,
       type_format,
       fmt_ebb_of_string,
       format_of_string_fmtty,
       format_of_string_format,
       char_of_iconv,
       string_of_formatting_lit,
       string_of_fmtty,
       string_of_fmt,
       open_box_of_string,
       symm,
       trans,
       recast];
   runtime.caml_register_global(197, CamlinternalFormat, "CamlinternalFormat");
   return;
  }
  (globalThis));

//# 15834 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    CamlinternalFormat = global_data.CamlinternalFormat,
    Stdlib = global_data.Stdlib;
   function kfprintf(k, o, param){
    var fmt = param[1];
    return caml_call3
            (CamlinternalFormat[7],
             function(acc){
              caml_call2(CamlinternalFormat[9], o, acc);
              return caml_call1(k, o);
             },
             0,
             fmt);
   }
   function kbprintf(k, b, param){
    var fmt = param[1];
    return caml_call3
            (CamlinternalFormat[7],
             function(acc){
              caml_call2(CamlinternalFormat[10], b, acc);
              return caml_call1(k, b);
             },
             0,
             fmt);
   }
   function ikfprintf(k, oc, param){
    var fmt = param[1];
    return caml_call3(CamlinternalFormat[8], k, oc, fmt);
   }
   function fprintf(oc, fmt){
    return kfprintf(function(_d_){return 0;}, oc, fmt);
   }
   function bprintf(b, fmt){
    return kbprintf(function(_c_){return 0;}, b, fmt);
   }
   function ifprintf(oc, fmt){
    return ikfprintf(function(_b_){return 0;}, oc, fmt);
   }
   function ibprintf(b, fmt){
    return ikfprintf(function(_a_){return 0;}, b, fmt);
   }
   function printf(fmt){return fprintf(Stdlib[39], fmt);}
   function eprintf(fmt){return fprintf(Stdlib[40], fmt);}
   function ksprintf(k, param){
    var fmt = param[1];
    function k$0(acc){
     var buf = caml_call1(Stdlib_Buffer[1], 64);
     caml_call2(CamlinternalFormat[11], buf, acc);
     return caml_call1(k, caml_call1(Stdlib_Buffer[2], buf));
    }
    return caml_call3(CamlinternalFormat[7], k$0, 0, fmt);
   }
   function sprintf(fmt){return ksprintf(function(s){return s;}, fmt);}
   var
    Stdlib_Printf =
      [0,
       fprintf,
       printf,
       eprintf,
       sprintf,
       bprintf,
       ifprintf,
       ibprintf,
       kfprintf,
       ikfprintf,
       ksprintf,
       kbprintf,
       ikfprintf,
       ksprintf];
   runtime.caml_register_global(3, Stdlib_Printf, "Stdlib__Printf");
   return;
  }
  (globalThis));

//# 16644 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    CamlinternalAtomic = global_data.CamlinternalAtomic,
    make = CamlinternalAtomic[1],
    get = CamlinternalAtomic[2],
    set = CamlinternalAtomic[3],
    exchange = CamlinternalAtomic[4],
    compare_and_set = CamlinternalAtomic[5],
    fetch_and_add = CamlinternalAtomic[6],
    incr = CamlinternalAtomic[7],
    decr = CamlinternalAtomic[8],
    Stdlib_Atomic =
      [0,
       make,
       get,
       set,
       exchange,
       compare_and_set,
       fetch_and_add,
       incr,
       decr];
   runtime.caml_register_global(1, Stdlib_Atomic, "Stdlib__Atomic");
   return;
  }
  (globalThis));

//# 16676 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$4 = "",
    cst_s = "%s\n",
    cst_Program_not_linked_with_g_$0 =
      "(Program not linked with -g, cannot print stack backtrace)\n",
    cst_characters = ", characters ",
    cst_Fatal_error_exception = "Fatal error: exception ",
    cst_Fatal_error_exception_s = "Fatal error: exception %s\n",
    cst_Uncaught_exception = "Uncaught exception: ",
    cst_Uncaught_exception_s = "Uncaught exception: %s\n",
    caml_check_bound = runtime.caml_check_bound,
    caml_get_exception_raw_backtra = runtime.caml_get_exception_raw_backtrace,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$4,
    cst$3 = cst$4,
    partial = [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, 0]]],
    cst$1 = cst$4,
    cst$2 = cst$4,
    cst = "_",
    locfmt =
      [0,
       [11,
        'File "',
        [2,
         0,
         [11,
          '", line ',
          [4,
           0,
           0,
           0,
           [11,
            cst_characters,
            [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, [11, ": ", [2, 0, 0]]]]]]]]]],
       'File "%s", line %d, characters %d-%d: %s'],
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Atomic = global_data.Stdlib__Atomic,
    Stdlib = global_data.Stdlib,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_Obj = global_data.Stdlib__Obj,
    printers = caml_call1(Stdlib_Atomic[1], 0),
    _a_ = [0, [3, 0, 0], "%S"],
    _b_ = [0, [4, 0, 0, 0, 0], "%d"],
    _c_ = [0, [11, ", ", [2, 0, [2, 0, 0]]], ", %s%s"],
    _d_ = [0, [12, 40, [2, 0, [2, 0, [12, 41, 0]]]], "(%s%s)"],
    _e_ = [0, [12, 40, [2, 0, [12, 41, 0]]], "(%s)"],
    cst_Out_of_memory = "Out of memory",
    cst_Stack_overflow = "Stack overflow",
    cst_Pattern_matching_failed = "Pattern matching failed",
    cst_Assertion_failed = "Assertion failed",
    cst_Undefined_recursive_module = "Undefined recursive module",
    _f_ =
      [0,
       [11, cst_Uncaught_exception, [2, 0, [12, 10, 0]]],
       cst_Uncaught_exception_s],
    _g_ =
      [0,
       [11, cst_Uncaught_exception, [2, 0, [12, 10, 0]]],
       cst_Uncaught_exception_s],
    cst_Raised_at = "Raised at",
    cst_Re_raised_at = "Re-raised at",
    cst_Raised_by_primitive_operat = "Raised by primitive operation at",
    cst_Called_from = "Called from",
    cst_inlined = " (inlined)",
    _h_ =
      [0,
       [2,
        0,
        [12,
         32,
         [2,
          0,
          [11,
           ' in file "',
           [2,
            0,
            [12,
             34,
             [2,
              0,
              [11, ", line ", [4, 0, 0, 0, [11, cst_characters, partial]]]]]]]]]],
       '%s %s in file "%s"%s, line %d, characters %d-%d'],
    _i_ = [0, [2, 0, [11, " unknown location", 0]], "%s unknown location"],
    _j_ = [0, [2, 0, [12, 10, 0]], cst_s],
    _k_ =
      [0,
       [11, cst_Program_not_linked_with_g_$0, 0],
       cst_Program_not_linked_with_g_$0],
    _l_ = [0, [2, 0, [12, 10, 0]], cst_s],
    cst_Program_not_linked_with_g_ = cst_Program_not_linked_with_g_$0;
   function field(x, i){
    var f = x[1 + i];
    if(! caml_call1(Stdlib_Obj[1], f))
     return caml_call2(Stdlib_Printf[4], _b_, f);
    var _ag_ = Stdlib_Obj[13];
    if(caml_obj_tag(f) === _ag_) return caml_call2(Stdlib_Printf[4], _a_, f);
    var _ah_ = Stdlib_Obj[14];
    return caml_obj_tag(f) === _ah_ ? caml_call1(Stdlib[35], f) : cst;
   }
   function other_fields(x, i){
    if(x.length - 1 <= i) return cst$0;
    var _ae_ = other_fields(x, i + 1 | 0), _af_ = field(x, i);
    return caml_call3(Stdlib_Printf[4], _c_, _af_, _ae_);
   }
   function use_printers(x){
    var param = caml_call1(Stdlib_Atomic[2], printers);
    for(;;){
     if(! param) return 0;
     var tl = param[2], hd = param[1];
     a:
     {
      try{var val = caml_call1(hd, x);}catch(_ad_){break a;}
      if(val){var s = val[1]; return [0, s];}
     }
     param = tl;
    }
   }
   function to_string_default(x){
    if(x === Stdlib[9]) return cst_Out_of_memory;
    if(x === Stdlib[10]) return cst_Stack_overflow;
    if(x[1] === Stdlib[4]){
     var
      match$0 = x[2],
      char$0 = match$0[3],
      line = match$0[2],
      file = match$0[1];
     return caml_call6
             (Stdlib_Printf[4],
              locfmt,
              file,
              line,
              char$0,
              char$0 + 5 | 0,
              cst_Pattern_matching_failed);
    }
    if(x[1] === Stdlib[5]){
     var
      match$1 = x[2],
      char$1 = match$1[3],
      line$0 = match$1[2],
      file$0 = match$1[1];
     return caml_call6
             (Stdlib_Printf[4],
              locfmt,
              file$0,
              line$0,
              char$1,
              char$1 + 6 | 0,
              cst_Assertion_failed);
    }
    if(x[1] === Stdlib[15]){
     var
      match$2 = x[2],
      char$2 = match$2[3],
      line$1 = match$2[2],
      file$1 = match$2[1];
     return caml_call6
             (Stdlib_Printf[4],
              locfmt,
              file$1,
              line$1,
              char$2,
              char$2 + 6 | 0,
              cst_Undefined_recursive_module);
    }
    if(0 !== caml_obj_tag(x)) return x[1];
    var constructor = x[1][1], match = x.length - 1;
    if(2 < match >>> 0)
     var
      _$_ = other_fields(x, 2),
      _aa_ = field(x, 1),
      _ac_ = caml_call3(Stdlib_Printf[4], _d_, _aa_, _$_);
    else
     switch(match){
       case 0:
        var _ac_ = cst$1; break;
       case 1:
        var _ac_ = cst$2; break;
       default:
        var
         _ab_ = field(x, 1),
         _ac_ = caml_call2(Stdlib_Printf[4], _e_, _ab_);
     }
    return caml_call2(Stdlib[28], constructor, _ac_);
   }
   function to_string(e){
    var match = use_printers(e);
    if(! match) return to_string_default(e);
    var s = match[1];
    return s;
   }
   function print(fct, arg){
    try{var ___ = caml_call1(fct, arg); return ___;}
    catch(x$0){
     var x = caml_wrap_exception(x$0), _Z_ = to_string(x);
     caml_call2(Stdlib_Printf[3], _f_, _Z_);
     caml_call1(Stdlib[63], Stdlib[40]);
     throw caml_maybe_attach_backtrace(x, 0);
    }
   }
   function catch$0(fct, arg){
    try{var _Y_ = caml_call1(fct, arg); return _Y_;}
    catch(x$0){
     var x = caml_wrap_exception(x$0);
     caml_call1(Stdlib[63], Stdlib[39]);
     var _X_ = to_string(x);
     caml_call2(Stdlib_Printf[3], _g_, _X_);
     return caml_call1(Stdlib[99], 2);
    }
   }
   function raw_backtrace_entries(bt){return bt;}
   function convert_raw_backtrace(bt){
    return [0, runtime.caml_convert_raw_backtrace(bt)];
   }
   function format_backtrace_slot(pos, slot){
    function info(is_raise){
     return is_raise
             ? 0 === pos ? cst_Raised_at : cst_Re_raised_at
             : 0 === pos ? cst_Raised_by_primitive_operat : cst_Called_from;
    }
    if(0 === slot[0]){
     var
      _P_ = slot[5],
      _Q_ = slot[4],
      _R_ = slot[3],
      _S_ = slot[6] ? cst_inlined : cst$3,
      _T_ = slot[2],
      _U_ = slot[7],
      _V_ = info(slot[1]);
     return [0,
             caml_call8
              (Stdlib_Printf[4], _h_, _V_, _U_, _T_, _S_, _R_, _Q_, _P_)];
    }
    if(slot[1]) return 0;
    var _W_ = info(0);
    return [0, caml_call2(Stdlib_Printf[4], _i_, _W_)];
   }
   function print_raw_backtrace(outchan, raw_backtrace){
    var backtrace = convert_raw_backtrace(raw_backtrace);
    if(! backtrace) return caml_call2(Stdlib_Printf[1], outchan, _k_);
    var a = backtrace[1], _N_ = a.length - 2 | 0, _M_ = 0;
    if(_N_ >= 0){
     var i = _M_;
     for(;;){
      var match = format_backtrace_slot(i, caml_check_bound(a, i)[1 + i]);
      if(match){
       var str = match[1];
       caml_call3(Stdlib_Printf[1], outchan, _j_, str);
      }
      var _O_ = i + 1 | 0;
      if(_N_ === i) break;
      i = _O_;
     }
    }
    return 0;
   }
   function print_backtrace(outchan){
    return print_raw_backtrace(outchan, caml_get_exception_raw_backtra(0));
   }
   function raw_backtrace_to_string(raw_backtrace){
    var backtrace = convert_raw_backtrace(raw_backtrace);
    if(! backtrace) return cst_Program_not_linked_with_g_;
    var
     a = backtrace[1],
     b = caml_call1(Stdlib_Buffer[1], 1024),
     _K_ = a.length - 2 | 0,
     _J_ = 0;
    if(_K_ >= 0){
     var i = _J_;
     for(;;){
      var match = format_backtrace_slot(i, caml_check_bound(a, i)[1 + i]);
      if(match){
       var str = match[1];
       caml_call3(Stdlib_Printf[5], b, _l_, str);
      }
      var _L_ = i + 1 | 0;
      if(_K_ === i) break;
      i = _L_;
     }
    }
    return caml_call1(Stdlib_Buffer[2], b);
   }
   function backtrace_slot_is_raise(param){
    return 0 === param[0] ? param[1] : param[1];
   }
   function backtrace_slot_is_inline(param){return 0 === param[0] ? param[6] : 0;
   }
   function backtrace_slot_location(param){
    return 0 === param[0]
            ? [0, [0, param[2], param[3], param[4], param[5]]]
            : 0;
   }
   function backtrace_slot_defname(param){
    if(0 === param[0] && param[7] !== cst$4) return [0, param[7]];
    return 0;
   }
   function backtrace_slots(raw_backtrace){
    var match = convert_raw_backtrace(raw_backtrace);
    if(! match) return 0;
    var backtrace = match[1], i$1 = backtrace.length - 2 | 0, i = i$1;
    for(;;){
     if(-1 === i)
      var _I_ = 0;
     else{
      var _H_ = 0 === caml_check_bound(backtrace, i)[1 + i][0] ? 1 : 0;
      if(! _H_){var i$0 = i - 1 | 0; i = i$0; continue;}
      var _I_ = _H_;
     }
     return _I_ ? [0, backtrace] : 0;
    }
   }
   function backtrace_slots_of_raw_entry(entry){return backtrace_slots([0, entry]);
   }
   function raw_backtrace_length(bt){return bt.length - 1;}
   function get_backtrace(param){
    return raw_backtrace_to_string(caml_get_exception_raw_backtra(0));
   }
   function register_printer(fn){
    for(;;){
     var
      old_printers = caml_call1(Stdlib_Atomic[2], printers),
      new_printers = [0, fn, old_printers],
      success =
        caml_call3(Stdlib_Atomic[5], printers, old_printers, new_printers),
      _G_ = 1 - success;
     if(! _G_) return _G_;
    }
   }
   function exn_slot(x){return 0 === caml_obj_tag(x) ? x[1] : x;}
   function exn_slot_id(x){var slot = exn_slot(x); return slot[2];}
   function exn_slot_name(x){var slot = exn_slot(x); return slot[1];}
   var
    errors =
      [0,
        cst$4,
        "(Cannot print locations:\n bytecode executable program file not found)",
        "(Cannot print locations:\n bytecode executable program file appears to be corrupt)",
        "(Cannot print locations:\n bytecode executable program file has wrong magic number)",
        "(Cannot print locations:\n bytecode executable program file cannot be opened;\n -- too many open files. Try running with OCAMLRUNPARAM=b=2)"].slice
       (),
    _m_ =
      [0,
       [11, cst_Fatal_error_exception, [2, 0, [12, 10, 0]]],
       cst_Fatal_error_exception_s];
   function default_uncaught_exception_han(exn, raw_backtrace){
    var _D_ = to_string(exn);
    caml_call2(Stdlib_Printf[3], _m_, _D_);
    print_raw_backtrace(Stdlib[40], raw_backtrace);
    var status = runtime.caml_ml_debug_info_status(0);
    if(status < 0){
     var
      _E_ = caml_call1(Stdlib[18], status),
      _F_ = caml_check_bound(errors, _E_)[1 + _E_];
     caml_call1(Stdlib[53], _F_);
    }
    return caml_call1(Stdlib[63], Stdlib[40]);
   }
   var uncaught_exception_handler = [0, default_uncaught_exception_han];
   function set_uncaught_exception_handler(fn){
    uncaught_exception_handler[1] = fn;
    return 0;
   }
   var
    empty_backtrace = [0],
    cst_Fatal_error_out_of_memory_ =
      "Fatal error: out of memory in uncaught exception handler",
    _n_ =
      [0,
       [11, cst_Fatal_error_exception, [2, 0, [12, 10, 0]]],
       cst_Fatal_error_exception_s],
    _o_ =
      [0,
       [11,
        "Fatal error in uncaught exception handler: exception ",
        [2, 0, [12, 10, 0]]],
       "Fatal error in uncaught exception handler: exception %s\n"];
   function handle_uncaught_exception(exn$0, debugger_in_use){
    try{
     try{
      var
       raw_backtrace =
         debugger_in_use ? empty_backtrace : caml_get_exception_raw_backtra(0);
      try{caml_call1(Stdlib[103], 0);}catch(_C_){}
      try{
       var
        _y_ = caml_call2(uncaught_exception_handler[1], exn$0, raw_backtrace),
        _x_ = _y_;
      }
      catch(exn$1){
       var
        exn = caml_wrap_exception(exn$1),
        raw_backtrace$0 = caml_get_exception_raw_backtra(0),
        _v_ = to_string(exn$0);
       caml_call2(Stdlib_Printf[3], _n_, _v_);
       print_raw_backtrace(Stdlib[40], raw_backtrace);
       var _w_ = to_string(exn);
       caml_call2(Stdlib_Printf[3], _o_, _w_);
       print_raw_backtrace(Stdlib[40], raw_backtrace$0);
       var _x_ = caml_call1(Stdlib[63], Stdlib[40]);
      }
      var _z_ = _x_;
     }
     catch(_B_){
      var _u_ = caml_wrap_exception(_B_);
      if(_u_ !== Stdlib[9]) throw caml_maybe_attach_backtrace(_u_, 0);
      var _z_ = caml_call1(Stdlib[53], cst_Fatal_error_out_of_memory_);
     }
     return _z_;
    }
    catch(_A_){return 0;}
   }
   runtime.caml_register_named_value
    ("Printexc.handle_uncaught_exception", handle_uncaught_exception);
   var
    Stdlib_Printexc =
      [0,
       to_string,
       to_string_default,
       print,
       catch$0,
       print_backtrace,
       get_backtrace,
       runtime.caml_record_backtrace,
       runtime.caml_backtrace_status,
       register_printer,
       use_printers,
       raw_backtrace_entries,
       function(_t_){return caml_get_exception_raw_backtra(_t_);},
       print_raw_backtrace,
       raw_backtrace_to_string,
       default_uncaught_exception_han,
       set_uncaught_exception_handler,
       backtrace_slots,
       backtrace_slots_of_raw_entry,
       [0,
        backtrace_slot_is_raise,
        backtrace_slot_is_inline,
        backtrace_slot_location,
        backtrace_slot_defname,
        format_backtrace_slot],
       raw_backtrace_length,
       function(_s_, _r_){return runtime.caml_raw_backtrace_slot(_s_, _r_);},
       function(_q_){return runtime.caml_convert_raw_backtrace_slot(_q_);},
       function(_p_){return runtime.caml_raw_backtrace_next_slot(_p_);},
       exn_slot_id,
       exn_slot_name];
   runtime.caml_register_global(42, Stdlib_Printexc, "Stdlib__Printexc");
   return;
  }
  (globalThis));

//# 17162 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_restore_raw_backtrace = runtime.caml_restore_raw_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Stdlib = global_data.Stdlib;
   function const$0(c, param){return c;}
   function flip(f, x, y){return caml_call2(f, y, x);}
   function negate(p, v){return 1 - caml_call1(p, v);}
   var
    Finally_raised =
      [248, "Stdlib.Fun.Finally_raised", runtime.caml_fresh_oo_id(0)],
    cst_Fun_Finally_raised = "Fun.Finally_raised: ";
   caml_call1
    (Stdlib_Printexc[9],
     function(param){
      if(param[1] !== Finally_raised) return 0;
      var exn = param[2], _a_ = caml_call1(Stdlib_Printexc[1], exn);
      return [0, caml_call2(Stdlib[28], cst_Fun_Finally_raised, _a_)];
     });
   function protect(finally$0, work){
    function finally_no_exn(param){
     try{caml_call1(finally$0, 0); return;}
     catch(e$0){
      var
       e = caml_wrap_exception(e$0),
       bt = caml_call1(Stdlib_Printexc[12], 0),
       exn = [0, Finally_raised, e];
      caml_restore_raw_backtrace(exn, bt);
      throw caml_maybe_attach_backtrace(exn, 0);
     }
    }
    try{var result = caml_call1(work, 0);}
    catch(work_exn$0){
     var
      work_exn = caml_wrap_exception(work_exn$0),
      work_bt = caml_call1(Stdlib_Printexc[12], 0);
     finally_no_exn(0);
     caml_restore_raw_backtrace(work_exn, work_bt);
     throw caml_maybe_attach_backtrace(work_exn, 0);
    }
    finally_no_exn(0);
    return result;
   }
   var Stdlib_Fun = [0, const$0, flip, negate, protect, Finally_raised];
   runtime.caml_register_global(4, Stdlib_Fun, "Stdlib__Fun");
   return;
  }
  (globalThis));

//# 17394 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Digest_from_hex$1 = "Digest.from_hex",
    caml_bytes_unsafe_set = runtime.caml_bytes_unsafe_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_md5_string = runtime.caml_md5_string,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Char = global_data.Stdlib__Char,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_String = global_data.Stdlib__String,
    compare = Stdlib_String[9],
    equal = Stdlib_String[8],
    cst_Digest_substring = "Digest.substring",
    cst_Digest_to_hex = "Digest.to_hex",
    cst_Digest_from_hex = cst_Digest_from_hex$1,
    cst_Digest_from_hex$0 = cst_Digest_from_hex$1;
   function string(str){
    return caml_md5_string(str, 0, caml_ml_string_length(str));
   }
   function bytes(b){return string(caml_call1(Stdlib_Bytes[48], b));}
   function substring(str, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_string_length(str) - len | 0) >= ofs)
     return caml_md5_string(str, ofs, len);
    return caml_call1(Stdlib[1], cst_Digest_substring);
   }
   function subbytes(b, ofs, len){
    return substring(caml_call1(Stdlib_Bytes[48], b), ofs, len);
   }
   function file(filename){
    var ic = caml_call1(Stdlib[80], filename);
    try{var d = runtime.caml_md5_chan(ic, -1);}
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     caml_call1(Stdlib[93], ic);
     throw caml_maybe_attach_backtrace(e, 0);
    }
    caml_call1(Stdlib[93], ic);
    return d;
   }
   function output(chan, digest){return caml_call2(Stdlib[66], chan, digest);}
   function input(chan){return caml_call2(Stdlib[86], chan, 16);}
   function char_hex(n){var _e_ = 10 <= n ? 87 : 48; return n + _e_ | 0;}
   function to_hex(d){
    if(16 !== caml_ml_string_length(d))
     caml_call1(Stdlib[1], cst_Digest_to_hex);
    var result = caml_create_bytes(32), i = 0;
    for(;;){
     var x = caml_string_get(d, i);
     caml_bytes_unsafe_set(result, i * 2 | 0, char_hex(x >>> 4 | 0));
     caml_bytes_unsafe_set(result, (i * 2 | 0) + 1 | 0, char_hex(x & 15));
     var _d_ = i + 1 | 0;
     if(15 === i) return caml_call1(Stdlib_Bytes[48], result);
     i = _d_;
    }
   }
   function from_hex(s){
    if(32 !== caml_ml_string_length(s))
     caml_call1(Stdlib[1], cst_Digest_from_hex);
    function digit(c){
     if(65 <= c){
      if(97 <= c){
       if(103 > c) return (c - 97 | 0) + 10 | 0;
      }
      else if(71 > c) return (c - 65 | 0) + 10 | 0;
     }
     else if(9 >= c - 48 >>> 0) return c - 48 | 0;
     throw caml_maybe_attach_backtrace
            ([0, Stdlib[6], cst_Digest_from_hex$0], 1);
    }
    var result = caml_create_bytes(16), i = 0;
    for(;;){
     var
      i$0 = 2 * i | 0,
      _a_ = digit(caml_string_get(s, i$0 + 1 | 0)),
      _b_ = (digit(caml_string_get(s, i$0)) << 4) + _a_ | 0;
     runtime.caml_bytes_set(result, i, caml_call1(Stdlib_Char[1], _b_));
     var _c_ = i + 1 | 0;
     if(15 === i) return caml_call1(Stdlib_Bytes[48], result);
     i = _c_;
    }
   }
   var
    Stdlib_Digest =
      [0,
       compare,
       equal,
       string,
       bytes,
       substring,
       subbytes,
       file,
       output,
       input,
       to_hex,
       from_hex];
   runtime.caml_register_global(8, Stdlib_Digest, "Stdlib__Digest");
   return;
  }
  (globalThis));

//# 17515 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_check_bound = runtime.caml_check_bound,
    caml_greaterthan = runtime.caml_greaterthan,
    caml_int64_of_int32 = runtime.caml_int64_of_int32,
    caml_int64_or = runtime.caml_int64_or,
    caml_int64_shift_left = runtime.caml_int64_shift_left,
    caml_int64_shift_right_unsigne = runtime.caml_int64_shift_right_unsigned,
    caml_int64_sub = runtime.caml_int64_sub,
    caml_int64_to_int32 = runtime.caml_int64_to_int32,
    caml_lessequal = runtime.caml_lessequal,
    caml_mod = runtime.caml_mod,
    caml_string_get = runtime.caml_string_get,
    caml_sys_random_seed = runtime.caml_sys_random_seed;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Int32 = global_data.Stdlib__Int32,
    Stdlib_Int64 = global_data.Stdlib__Int64,
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_Digest = global_data.Stdlib__Digest,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Nativeint = global_data.Stdlib__Nativeint,
    cst_x = "x",
    cst_Random_int = "Random.int",
    cst_Random_full_int = "Random.full_int",
    cst_Random_int32 = "Random.int32",
    _a_ = runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
    _b_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    cst_Random_int64 = "Random.int64";
   function new_state(param){return [0, runtime.caml_make_vect(55, 0), 0];}
   function assign(st1, st2){
    caml_call5(Stdlib_Array[10], st2[1], 0, st1[1], 0, 55);
    st1[2] = st2[2];
    return 0;
   }
   function full_init(s, seed){
    var
     seed$0 = 0 === seed.length - 1 ? [0, 0] : seed,
     l = seed$0.length - 1,
     i$0 = 0;
    for(;;){
     caml_check_bound(s[1], i$0)[1 + i$0] = i$0;
     var _q_ = i$0 + 1 | 0;
     if(54 === i$0) break;
     i$0 = _q_;
    }
    var
     accu = [0, cst_x],
     _n_ = 54 + caml_call2(Stdlib_Int[11], 55, l) | 0,
     _m_ = 0;
    if(_n_ >= 0){
     var i = _m_;
     for(;;){
      var
       j = i % 55 | 0,
       k = caml_mod(i, l),
       x = caml_check_bound(seed$0, k)[1 + k],
       accu$0 = accu[1],
       _g_ = caml_call1(Stdlib_Int[12], x),
       _h_ = caml_call2(Stdlib[28], accu$0, _g_);
      accu[1] = caml_call1(Stdlib_Digest[3], _h_);
      var
       d = accu[1],
       _i_ = caml_string_get(d, 3) << 24,
       _j_ = caml_string_get(d, 2) << 16,
       _k_ = caml_string_get(d, 1) << 8,
       _l_ = ((caml_string_get(d, 0) + _k_ | 0) + _j_ | 0) + _i_ | 0,
       _o_ = (caml_check_bound(s[1], j)[1 + j] ^ _l_) & 1073741823;
      caml_check_bound(s[1], j)[1 + j] = _o_;
      var _p_ = i + 1 | 0;
      if(_n_ === i) break;
      i = _p_;
     }
    }
    s[2] = 0;
    return 0;
   }
   function make(seed){
    var result = new_state(0);
    full_init(result, seed);
    return result;
   }
   function make_self_init(param){return make(caml_sys_random_seed(0));}
   function copy(s){
    var result = new_state(0);
    assign(result, s);
    return result;
   }
   function bits(s){
    s[2] = (s[2] + 1 | 0) % 55 | 0;
    var
     _d_ = s[2],
     curval = caml_check_bound(s[1], _d_)[1 + _d_],
     _e_ = (s[2] + 24 | 0) % 55 | 0,
     newval =
       caml_check_bound(s[1], _e_)[1 + _e_]
       + (curval ^ (curval >>> 25 | 0) & 31)
       | 0,
     newval30 = newval & 1073741823,
     _f_ = s[2];
    caml_check_bound(s[1], _f_)[1 + _f_] = newval30;
    return newval30;
   }
   function intaux(s, n){
    for(;;){
     var r = bits(s), v = caml_mod(r, n);
     if(((1073741823 - n | 0) + 1 | 0) >= (r - v | 0)) return v;
    }
   }
   function int$0(s, bound){
    if(1073741823 >= bound && 0 < bound) return intaux(s, bound);
    return caml_call1(Stdlib[1], cst_Random_int);
   }
   function full_int(s, bound){
    if(0 >= bound) return caml_call1(Stdlib[1], cst_Random_full_int);
    if(1073741823 >= bound) return intaux(s, bound);
    for(;;){
     var b1 = bits(s), b2 = bits(s), max_int_32 = 2147483647;
     if(bound <= 2147483647)
      var
       bpos = (b2 & 1073725440) << 1 | b1 >>> 15 | 0,
       max_int = max_int_32,
       r = bpos;
     else
      var
       b3 = bits(s),
       r$0 = ((b3 & 1073741312) << 12 | b2 >>> 9 | 0) << 20 | b1 >>> 10 | 0,
       max_int$0 = Stdlib[19],
       max_int = max_int$0,
       r = r$0;
     var v = caml_mod(r, bound);
     if(((max_int - bound | 0) + 1 | 0) >= (r - v | 0)) return v;
    }
   }
   function int32(s, bound){
    if(caml_lessequal(bound, 0))
     return caml_call1(Stdlib[1], cst_Random_int32);
    for(;;){
     var
      b1 = bits(s),
      b2 = (bits(s) & 1) << 30,
      r = b1 | b2,
      v = caml_mod(r, bound);
     if(! caml_greaterthan(r - v | 0, (Stdlib_Int32[9] - bound | 0) + 1 | 0))
      return v;
    }
   }
   function int64(s, bound){
    if(caml_lessequal(bound, _b_))
     return caml_call1(Stdlib[1], cst_Random_int64);
    for(;;){
     var
      b1 = caml_int64_of_int32(bits(s)),
      b2 = caml_int64_shift_left(caml_int64_of_int32(bits(s)), 30),
      b3 = caml_int64_shift_left(caml_int64_of_int32(bits(s) & 7), 60),
      r = caml_int64_or(b1, caml_int64_or(b2, b3)),
      v = runtime.caml_int64_mod(r, bound);
     if
      (!
       caml_greaterthan
        (caml_int64_sub(r, v),
         runtime.caml_int64_add(caml_int64_sub(Stdlib_Int64[9], bound), _a_)))
      return v;
    }
   }
   var
    _c_ =
      [0,
       987910699,
       495797812,
       364182224,
       414272206,
       318284740,
       990407751,
       383018966,
       270373319,
       840823159,
       24560019,
       536292337,
       512266505,
       189156120,
       730249596,
       143776328,
       51606627,
       140166561,
       366354223,
       1003410265,
       700563762,
       981890670,
       913149062,
       526082594,
       1021425055,
       784300257,
       667753350,
       630144451,
       949649812,
       48546892,
       415514493,
       258888527,
       511570777,
       89983870,
       283659902,
       308386020,
       242688715,
       482270760,
       865188196,
       1027664170,
       207196989,
       193777847,
       619708188,
       671350186,
       149669678,
       257044018,
       87658204,
       558145612,
       183450813,
       28133145,
       901332182,
       710253903,
       510646120,
       652377910,
       409934019,
       801085050],
    nativeint =
      32 === Stdlib_Nativeint[9]
       ? function(s, bound){return int32(s, bound);}
       : function
        (s, bound){
         return caml_int64_to_int32(int64(s, caml_int64_of_int32(bound)));
        };
   function float$0(s, bound){
    var r1 = bits(s), r2 = bits(s);
    return (r1 / 1073741824. + r2) / 1073741824. * bound;
   }
   function bool(s){return 0 === (bits(s) & 1) ? 1 : 0;}
   function bits32(s){
    var b1 = bits(s) >>> 14 | 0, b2 = bits(s) >>> 14 | 0;
    return b1 | b2 << 16;
   }
   function bits64(s){
    var
     b1 = caml_int64_shift_right_unsigne(caml_int64_of_int32(bits(s)), 9),
     b2 = caml_int64_shift_right_unsigne(caml_int64_of_int32(bits(s)), 9),
     b3 = caml_int64_shift_right_unsigne(caml_int64_of_int32(bits(s)), 8);
    return caml_int64_or
            (b1,
             caml_int64_or
              (caml_int64_shift_left(b2, 21), caml_int64_shift_left(b3, 42)));
   }
   var
    nativebits =
      32 === Stdlib_Nativeint[9]
       ? function(s){return bits32(s);}
       : function(s){return caml_int64_to_int32(bits64(s));},
    default$0 = [0, _c_.slice(), 0];
   function bits$0(param){return bits(default$0);}
   function int$1(bound){return int$0(default$0, bound);}
   function full_int$0(bound){return full_int(default$0, bound);}
   function int32$0(bound){return int32(default$0, bound);}
   function nativeint$0(bound){return nativeint(default$0, bound);}
   function int64$0(bound){return int64(default$0, bound);}
   function float$1(scale){return float$0(default$0, scale);}
   function bool$0(param){return bool(default$0);}
   function bits32$0(param){return bits32(default$0);}
   function bits64$0(param){return bits64(default$0);}
   function nativebits$0(param){return nativebits(default$0);}
   function full_init$0(seed){return full_init(default$0, seed);}
   function init(seed){return full_init(default$0, [0, seed]);}
   function self_init(param){
    var seed = caml_sys_random_seed(0);
    return full_init(default$0, seed);
   }
   function get_state(param){return copy(default$0);}
   function set_state(s){return assign(default$0, s);}
   var
    Stdlib_Random =
      [0,
       init,
       full_init$0,
       self_init,
       bits$0,
       int$1,
       full_int$0,
       int32$0,
       nativeint$0,
       int64$0,
       float$1,
       bool$0,
       bits32$0,
       bits64$0,
       nativebits$0,
       [0,
        make,
        make_self_init,
        copy,
        bits,
        int$0,
        full_int,
        int32,
        nativeint,
        int64,
        float$0,
        bool,
        bits32,
        bits64,
        nativebits],
       get_state,
       set_state];
   runtime.caml_register_global(18, Stdlib_Random, "Stdlib__Random");
   return;
  }
  (globalThis));

//# 17849 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_check_bound = runtime.caml_check_bound,
    caml_compare = runtime.caml_compare,
    caml_hash = runtime.caml_hash,
    caml_make_vect = runtime.caml_make_vect,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_sys_getenv = runtime.caml_sys_getenv,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    _d_ = [0, 0],
    cst = "",
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib = global_data.Stdlib,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Stdlib_Random = global_data.Stdlib__Random,
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_Array = global_data.Stdlib__Array;
   global_data.Assert_failure;
   var Stdlib_String = global_data.Stdlib__String;
   function ongoing_traversal(h){
    var _aq_ = h.length - 1 < 4 ? 1 : 0, _ar_ = _aq_ || (h[4] < 0 ? 1 : 0);
    return _ar_;
   }
   function flip_ongoing_traversal(h){h[4] = - h[4] | 0; return 0;}
   var
    cst_Hashtbl_unsupported_hash_t = "Hashtbl: unsupported hash table format";
   try{var _f_ = caml_sys_getenv("OCAMLRUNPARAM"), params = _f_;}
   catch(_ao_){
    var _a_ = caml_wrap_exception(_ao_);
    if(_a_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_a_, 0);
    try{var _e_ = caml_sys_getenv("CAMLRUNPARAM"), _c_ = _e_;}
    catch(_ap_){
     var _b_ = caml_wrap_exception(_ap_);
     if(_b_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_b_, 0);
     var _c_ = cst;
    }
    var params = _c_;
   }
   var
    randomized_default = caml_call2(Stdlib_String[14], params, 82),
    randomized = [0, randomized_default];
   function randomize(param){randomized[1] = 1; return 0;}
   function is_randomized(param){return randomized[1];}
   var
    prng = [246, function(_an_){return caml_call1(Stdlib_Random[15][2], 0);}];
   function power_2_above(x, n){
    var x$0 = x;
    for(;;){
     if(n <= x$0) return x$0;
     if(Stdlib_Sys[13] < (x$0 * 2 | 0)) return x$0;
     var x$1 = x$0 * 2 | 0;
     x$0 = x$1;
    }
   }
   function create(opt, initial_size){
    if(opt) var sth = opt[1], random = sth; else var random = randomized[1];
    var s = power_2_above(16, initial_size);
    if(random)
     var
      _al_ = caml_obj_tag(prng),
      _am_ =
        250 === _al_
         ? prng[1]
         : 246 === _al_ ? caml_call1(CamlinternalLazy[2], prng) : prng,
      seed = caml_call1(Stdlib_Random[15][4], _am_);
    else
     var seed = 0;
    return [0, 0, caml_make_vect(s, 0), seed, s];
   }
   function clear(h){
    var _ak_ = 0 < h[1] ? 1 : 0;
    return _ak_
            ? (h
               [1]
              = 0,
              caml_call4(Stdlib_Array[9], h[2], 0, h[2].length - 1, 0))
            : _ak_;
   }
   function reset(h){
    var len = h[2].length - 1;
    if(4 <= h.length - 1 && len !== caml_call1(Stdlib[18], h[4])){
     h[1] = 0;
     h[2] = caml_make_vect(caml_call1(Stdlib[18], h[4]), 0);
     return 0;
    }
    return clear(h);
   }
   function copy_bucketlist(param){
    if(! param) return 0;
    var
     key = param[1],
     data = param[2],
     next = param[3],
     prec$1 = [0, key, data, next],
     prec = prec$1,
     param$0 = next;
    for(;;){
     if(! param$0) return prec$1;
     var
      key$0 = param$0[1],
      data$0 = param$0[2],
      next$0 = param$0[3],
      prec$0 = [0, key$0, data$0, next$0];
     prec[3] = prec$0;
     prec = prec$0;
     param$0 = next$0;
    }
   }
   function copy(h){
    var
     _ah_ = h[4],
     _ai_ = h[3],
     _aj_ = caml_call2(Stdlib_Array[15], copy_bucketlist, h[2]);
    return [0, h[1], _aj_, _ai_, _ah_];
   }
   function length(h){return h[1];}
   function insert_all_buckets(indexfun, inplace, odata, ndata){
    var
     nsize = ndata.length - 1,
     ndata_tail = caml_make_vect(nsize, 0),
     _ab_ = odata.length - 2 | 0,
     _aa_ = 0;
    if(_ab_ >= 0){
     var i$0 = _aa_;
     for(;;){
      var cell$1 = caml_check_bound(odata, i$0)[1 + i$0], cell = cell$1;
      for(;;){
       if(! cell) break;
       var
        key = cell[1],
        data = cell[2],
        next = cell[3],
        cell$0 = inplace ? cell : [0, key, data, 0],
        nidx = caml_call1(indexfun, key),
        match = caml_check_bound(ndata_tail, nidx)[1 + nidx];
       if(match)
        match[3] = cell$0;
       else
        caml_check_bound(ndata, nidx)[1 + nidx] = cell$0;
       caml_check_bound(ndata_tail, nidx)[1 + nidx] = cell$0;
       cell = next;
      }
      var _ag_ = i$0 + 1 | 0;
      if(_ab_ === i$0) break;
      i$0 = _ag_;
     }
    }
    if(inplace){
     var _ad_ = nsize - 1 | 0, _ac_ = 0;
     if(_ad_ >= 0){
      var i = _ac_;
      for(;;){
       var match$0 = caml_check_bound(ndata_tail, i)[1 + i];
       if(match$0) match$0[3] = 0;
       var _af_ = i + 1 | 0;
       if(_ad_ === i) break;
       i = _af_;
      }
     }
     var _ae_ = 0;
    }
    else
     var _ae_ = inplace;
    return _ae_;
   }
   function resize(indexfun, h){
    var
     odata = h[2],
     osize = odata.length - 1,
     nsize = osize * 2 | 0,
     _$_ = nsize < Stdlib_Sys[13] ? 1 : 0;
    if(! _$_) return _$_;
    var ndata = caml_make_vect(nsize, 0), inplace = 1 - ongoing_traversal(h);
    h[2] = ndata;
    return insert_all_buckets(caml_call1(indexfun, h), inplace, odata, ndata);
   }
   function iter(f, h){
    var old_trav = ongoing_traversal(h);
    if(1 - old_trav) flip_ongoing_traversal(h);
    try{
     var d = h[2], _X_ = d.length - 2 | 0, _W_ = 0;
     if(_X_ >= 0){
      var i = _W_;
      for(;;){
       var param = caml_check_bound(d, i)[1 + i];
       for(;;){
        if(! param) break;
        var key = param[1], data = param[2], next = param[3];
        caml_call2(f, key, data);
        param = next;
       }
       var ___ = i + 1 | 0;
       if(_X_ === i) break;
       i = ___;
      }
     }
     var _Y_ = 1 - old_trav, _Z_ = _Y_ ? flip_ongoing_traversal(h) : _Y_;
     return _Z_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(old_trav) throw caml_maybe_attach_backtrace(exn, 0);
     flip_ongoing_traversal(h);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function filter_map_inplace(f, h){
    var d = h[2], old_trav = ongoing_traversal(h);
    if(1 - old_trav) flip_ongoing_traversal(h);
    try{
     var _S_ = d.length - 2 | 0, _R_ = 0;
     if(_S_ >= 0){
      var i = _R_;
      for(;;){
       var slot$0 = caml_check_bound(h[2], i)[1 + i], prec = 0, slot = slot$0;
       for(;;){
        if(! slot) break;
        var
         key = slot[1],
         data = slot[2],
         next = slot[3],
         match = caml_call2(f, key, data);
        if(match){
         var data$0 = match[1];
         if(prec)
          prec[3] = slot;
         else
          caml_check_bound(h[2], i)[1 + i] = slot;
         slot[2] = data$0;
         prec = slot;
         slot = next;
        }
        else{h[1] = h[1] - 1 | 0; slot = next;}
       }
       if(prec) prec[3] = 0; else caml_check_bound(h[2], i)[1 + i] = 0;
       var _V_ = i + 1 | 0;
       if(_S_ === i) break;
       i = _V_;
      }
     }
     var _T_ = 1 - old_trav, _U_ = _T_ ? flip_ongoing_traversal(h) : _T_;
     return _U_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(old_trav) throw caml_maybe_attach_backtrace(exn, 0);
     flip_ongoing_traversal(h);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function fold(f, h, init){
    var old_trav = ongoing_traversal(h);
    if(1 - old_trav) flip_ongoing_traversal(h);
    try{
     var d = h[2], accu$1 = [0, init], _O_ = d.length - 2 | 0, _N_ = 0;
     if(_O_ >= 0){
      var i = _N_;
      for(;;){
       var
        accu$2 = accu$1[1],
        b$0 = caml_check_bound(d, i)[1 + i],
        b = b$0,
        accu = accu$2;
       for(;;){
        if(! b) break;
        var
         key = b[1],
         data = b[2],
         next = b[3],
         accu$0 = caml_call3(f, key, data, accu);
        b = next;
        accu = accu$0;
       }
       accu$1[1] = accu;
       var _Q_ = i + 1 | 0;
       if(_O_ === i) break;
       i = _Q_;
      }
     }
     if(1 - old_trav) flip_ongoing_traversal(h);
     var _P_ = accu$1[1];
     return _P_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(old_trav) throw caml_maybe_attach_backtrace(exn, 0);
     flip_ongoing_traversal(h);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function bucket_length(accu, param){
    var accu$0 = accu, param$0 = param;
    for(;;){
     if(! param$0) return accu$0;
     var next = param$0[3], accu$1 = accu$0 + 1 | 0;
     accu$0 = accu$1;
     param$0 = next;
    }
   }
   function stats(h){
    var
     mbl =
       caml_call3
        (Stdlib_Array[17],
         function(m, b){
          var _M_ = bucket_length(0, b);
          return caml_call2(Stdlib_Int[11], m, _M_);
         },
         0,
         h[2]),
     histo = caml_make_vect(mbl + 1 | 0, 0);
    caml_call2
     (Stdlib_Array[13],
      function(b){
       var l = bucket_length(0, b);
       histo[1 + l] = caml_check_bound(histo, l)[1 + l] + 1 | 0;
       return 0;
      },
      h[2]);
    return [0, h[1], h[2].length - 1, mbl, histo];
   }
   function to_seq(tbl){
    var tbl_data = tbl[2];
    function aux(i, buck, param){
     var i$0 = i, buck$0 = buck;
     for(;;){
      if(buck$0){
       var key = buck$0[1], data = buck$0[2], next = buck$0[3];
       return [0, [0, key, data], function(_L_){return aux(i$0, next, _L_);}];
      }
      if(i$0 === tbl_data.length - 1) return 0;
      var
       buck$1 = caml_check_bound(tbl_data, i$0)[1 + i$0],
       i$1 = i$0 + 1 | 0;
      i$0 = i$1;
      buck$0 = buck$1;
     }
    }
    var _I_ = 0, _J_ = 0;
    return function(_K_){return aux(_J_, _I_, _K_);};
   }
   function to_seq_keys(m){
    var _G_ = to_seq(m);
    return caml_call2(Stdlib_Seq[27], function(_H_){return _H_[1];}, _G_);
   }
   function to_seq_values(m){
    var _E_ = to_seq(m);
    return caml_call2(Stdlib_Seq[27], function(_F_){return _F_[2];}, _E_);
   }
   function MakeSeeded(H){
    function key_index(h, key){
     var _D_ = h[2].length - 2 | 0;
     return caml_call2(H[2], h[3], key) & _D_;
    }
    function add(h, key, data){
     var
      i = key_index(h, key),
      bucket = [0, key, data, caml_check_bound(h[2], i)[1 + i]];
     caml_check_bound(h[2], i)[1 + i] = bucket;
     h[1] = h[1] + 1 | 0;
     var _C_ = h[2].length - 1 << 1 < h[1] ? 1 : 0;
     return _C_ ? resize(key_index, h) : _C_;
    }
    function remove(h, key){
     var
      i = key_index(h, key),
      c = caml_check_bound(h[2], i)[1 + i],
      prec$0 = 0,
      prec = c;
     for(;;){
      if(! prec) return 0;
      var k = prec[1], next = prec[3];
      if(caml_call2(H[1], k, key)){
       h[1] = h[1] - 1 | 0;
       return prec$0
               ? (prec$0[3] = next, 0)
               : (caml_check_bound(h[2], i)[1 + i] = next, 0);
      }
      prec$0 = prec;
      prec = next;
     }
    }
    function find(h, key){
     var
      _B_ = key_index(h, key),
      match = caml_check_bound(h[2], _B_)[1 + _B_];
     if(! match) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var k1 = match[1], d1 = match[2], next1 = match[3];
     if(caml_call2(H[1], key, k1)) return d1;
     if(! next1) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var k2 = next1[1], d2 = next1[2], next2 = next1[3];
     if(caml_call2(H[1], key, k2)) return d2;
     if(! next2) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var k3 = next2[1], d3 = next2[2], next3 = next2[3];
     if(caml_call2(H[1], key, k3)) return d3;
     var param = next3;
     for(;;){
      if(! param) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
      var k = param[1], data = param[2], next = param[3];
      if(caml_call2(H[1], key, k)) return data;
      param = next;
     }
    }
    function find_opt(h, key){
     var
      _A_ = key_index(h, key),
      match = caml_check_bound(h[2], _A_)[1 + _A_];
     if(! match) return 0;
     var k1 = match[1], d1 = match[2], next1 = match[3];
     if(caml_call2(H[1], key, k1)) return [0, d1];
     if(! next1) return 0;
     var k2 = next1[1], d2 = next1[2], next2 = next1[3];
     if(caml_call2(H[1], key, k2)) return [0, d2];
     if(! next2) return 0;
     var k3 = next2[1], d3 = next2[2], next3 = next2[3];
     if(caml_call2(H[1], key, k3)) return [0, d3];
     var param = next3;
     for(;;){
      if(! param) return 0;
      var k = param[1], data = param[2], next = param[3];
      if(caml_call2(H[1], key, k)) return [0, data];
      param = next;
     }
    }
    function find_all(h, key){
     function find_in_bucket(param){
      var param$0 = param;
      for(;;){
       if(! param$0) return 0;
       var k = param$0[1], d = param$0[2], next = param$0[3];
       if(caml_call2(H[1], k, key)) return [0, d, find_in_bucket(next)];
       param$0 = next;
      }
     }
     var _z_ = key_index(h, key);
     return find_in_bucket(caml_check_bound(h[2], _z_)[1 + _z_]);
    }
    function replace(h, key, data){
     var
      i = key_index(h, key),
      l = caml_check_bound(h[2], i)[1 + i],
      slot = l;
     for(;;){
      if(slot){
       var k = slot[1], next = slot[3];
       if(! caml_call2(H[1], k, key)){slot = next; continue;}
       slot[1] = key;
       slot[2] = data;
       var _w_ = 0;
      }
      else
       var _w_ = 1;
      if(_w_){
       caml_check_bound(h[2], i)[1 + i] = [0, key, data, l];
       h[1] = h[1] + 1 | 0;
       var _x_ = h[2].length - 1 << 1 < h[1] ? 1 : 0;
       if(_x_) return resize(key_index, h);
       var _y_ = _x_;
      }
      else
       var _y_ = _w_;
      return _y_;
     }
    }
    function mem(h, key){
     var
      _v_ = key_index(h, key),
      param = caml_check_bound(h[2], _v_)[1 + _v_];
     for(;;){
      if(! param) return 0;
      var k = param[1], next = param[3], _u_ = caml_call2(H[1], k, key);
      if(_u_) return _u_;
      param = next;
     }
    }
    function add_seq(tbl, i){
     return caml_call2
             (Stdlib_Seq[4],
              function(param){
               var v = param[2], k = param[1];
               return add(tbl, k, v);
              },
              i);
    }
    function replace_seq(tbl, i){
     return caml_call2
             (Stdlib_Seq[4],
              function(param){
               var v = param[2], k = param[1];
               return replace(tbl, k, v);
              },
              i);
    }
    function of_seq(i){
     var tbl = create(0, 16);
     replace_seq(tbl, i);
     return tbl;
    }
    return [0,
            create,
            clear,
            reset,
            copy,
            add,
            remove,
            find,
            find_opt,
            find_all,
            replace,
            mem,
            iter,
            filter_map_inplace,
            fold,
            length,
            stats,
            to_seq,
            to_seq_keys,
            to_seq_values,
            add_seq,
            replace_seq,
            of_seq];
   }
   function Make(H){
    var equal = H[1];
    function hash(seed, x){return caml_call1(H[2], x);}
    var
     include = MakeSeeded([0, equal, hash]),
     _t_ = include[1],
     clear = include[2],
     reset = include[3],
     copy = include[4],
     add = include[5],
     remove = include[6],
     find = include[7],
     find_opt = include[8],
     find_all = include[9],
     replace = include[10],
     mem = include[11],
     iter = include[12],
     filter_map_inplace = include[13],
     fold = include[14],
     length = include[15],
     stats = include[16],
     to_seq = include[17],
     to_seq_keys = include[18],
     to_seq_values = include[19],
     add_seq = include[20],
     replace_seq = include[21];
    function create(sz){return caml_call2(_t_, _d_, sz);}
    function of_seq(i){
     var tbl = caml_call2(_t_, _d_, 16);
     caml_call2(replace_seq, tbl, i);
     return tbl;
    }
    return [0,
            create,
            clear,
            reset,
            copy,
            add,
            remove,
            find,
            find_opt,
            find_all,
            replace,
            mem,
            iter,
            filter_map_inplace,
            fold,
            length,
            stats,
            to_seq,
            to_seq_keys,
            to_seq_values,
            add_seq,
            replace_seq,
            of_seq];
   }
   function hash(x){return caml_hash(10, 100, 0, x);}
   function hash_param(n1, n2, x){return caml_hash(n1, n2, 0, x);}
   function seeded_hash(seed, x){return caml_hash(10, 100, seed, x);}
   function key_index(h, key){
    return 4 <= h.length - 1
            ? caml_hash(10, 100, h[3], key) & (h[2].length - 2 | 0)
            : caml_call1(Stdlib[1], cst_Hashtbl_unsupported_hash_t);
   }
   function add(h, key, data){
    var
     i = key_index(h, key),
     bucket = [0, key, data, caml_check_bound(h[2], i)[1 + i]];
    caml_check_bound(h[2], i)[1 + i] = bucket;
    h[1] = h[1] + 1 | 0;
    var _s_ = h[2].length - 1 << 1 < h[1] ? 1 : 0;
    return _s_ ? resize(key_index, h) : _s_;
   }
   function remove(h, key){
    var
     i = key_index(h, key),
     c = caml_check_bound(h[2], i)[1 + i],
     prec$0 = 0,
     prec = c;
    for(;;){
     if(! prec) return 0;
     var k = prec[1], next = prec[3];
     if(0 === caml_compare(k, key)){
      h[1] = h[1] - 1 | 0;
      return prec$0
              ? (prec$0[3] = next, 0)
              : (caml_check_bound(h[2], i)[1 + i] = next, 0);
     }
     prec$0 = prec;
     prec = next;
    }
   }
   function find(h, key){
    var _r_ = key_index(h, key), match = caml_check_bound(h[2], _r_)[1 + _r_];
    if(! match) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    var k1 = match[1], d1 = match[2], next1 = match[3];
    if(0 === caml_compare(key, k1)) return d1;
    if(! next1) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    var k2 = next1[1], d2 = next1[2], next2 = next1[3];
    if(0 === caml_compare(key, k2)) return d2;
    if(! next2) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    var k3 = next2[1], d3 = next2[2], next3 = next2[3];
    if(0 === caml_compare(key, k3)) return d3;
    var param = next3;
    for(;;){
     if(! param) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var k = param[1], data = param[2], next = param[3];
     if(0 === caml_compare(key, k)) return data;
     param = next;
    }
   }
   function find_opt(h, key){
    var _q_ = key_index(h, key), match = caml_check_bound(h[2], _q_)[1 + _q_];
    if(! match) return 0;
    var k1 = match[1], d1 = match[2], next1 = match[3];
    if(0 === caml_compare(key, k1)) return [0, d1];
    if(! next1) return 0;
    var k2 = next1[1], d2 = next1[2], next2 = next1[3];
    if(0 === caml_compare(key, k2)) return [0, d2];
    if(! next2) return 0;
    var k3 = next2[1], d3 = next2[2], next3 = next2[3];
    if(0 === caml_compare(key, k3)) return [0, d3];
    var param = next3;
    for(;;){
     if(! param) return 0;
     var k = param[1], data = param[2], next = param[3];
     if(0 === caml_compare(key, k)) return [0, data];
     param = next;
    }
   }
   function find_all(h, key){
    function find_in_bucket(param){
     var param$0 = param;
     for(;;){
      if(! param$0) return 0;
      var k = param$0[1], data = param$0[2], next = param$0[3];
      if(0 === caml_compare(k, key)) return [0, data, find_in_bucket(next)];
      param$0 = next;
     }
    }
    var _p_ = key_index(h, key);
    return find_in_bucket(caml_check_bound(h[2], _p_)[1 + _p_]);
   }
   function replace(h, key, data){
    var i = key_index(h, key), l = caml_check_bound(h[2], i)[1 + i], slot = l;
    for(;;){
     if(slot){
      var k = slot[1], next = slot[3];
      if(0 !== caml_compare(k, key)){slot = next; continue;}
      slot[1] = key;
      slot[2] = data;
      var _m_ = 0;
     }
     else
      var _m_ = 1;
     if(_m_){
      caml_check_bound(h[2], i)[1 + i] = [0, key, data, l];
      h[1] = h[1] + 1 | 0;
      var _n_ = h[2].length - 1 << 1 < h[1] ? 1 : 0;
      if(_n_) return resize(key_index, h);
      var _o_ = _n_;
     }
     else
      var _o_ = _m_;
     return _o_;
    }
   }
   function mem(h, key){
    var _l_ = key_index(h, key), param = caml_check_bound(h[2], _l_)[1 + _l_];
    for(;;){
     if(! param) return 0;
     var
      k = param[1],
      next = param[3],
      _k_ = 0 === caml_compare(k, key) ? 1 : 0;
     if(_k_) return _k_;
     param = next;
    }
   }
   function add_seq(tbl, i){
    return caml_call2
            (Stdlib_Seq[4],
             function(param){
              var v = param[2], k = param[1];
              return add(tbl, k, v);
             },
             i);
   }
   function replace_seq(tbl, i){
    return caml_call2
            (Stdlib_Seq[4],
             function(param){
              var v = param[2], k = param[1];
              return replace(tbl, k, v);
             },
             i);
   }
   function of_seq(i){
    var tbl = create(0, 16);
    replace_seq(tbl, i);
    return tbl;
   }
   function rebuild(opt, h){
    if(opt) var sth = opt[1], random = sth; else var random = randomized[1];
    var s = power_2_above(16, h[2].length - 1);
    if(random)
     var
      _g_ = caml_obj_tag(prng),
      _h_ =
        250 === _g_
         ? prng[1]
         : 246 === _g_ ? caml_call1(CamlinternalLazy[2], prng) : prng,
      seed = caml_call1(Stdlib_Random[15][4], _h_);
    else
     var seed = 4 <= h.length - 1 ? h[3] : 0;
    var
     _i_ = 4 <= h.length - 1 ? h[4] : s,
     h$0 = [0, h[1], caml_make_vect(s, 0), seed, _i_];
    insert_all_buckets
     (function(_j_){return key_index(h$0, _j_);}, 0, h[2], h$0[2]);
    return h$0;
   }
   var
    Stdlib_Hashtbl =
      [0,
       create,
       clear,
       reset,
       copy,
       add,
       find,
       find_opt,
       find_all,
       mem,
       remove,
       replace,
       iter,
       filter_map_inplace,
       fold,
       length,
       randomize,
       is_randomized,
       rebuild,
       stats,
       to_seq,
       to_seq_keys,
       to_seq_values,
       add_seq,
       replace_seq,
       of_seq,
       Make,
       MakeSeeded,
       hash,
       seeded_hash,
       hash_param,
       caml_hash];
   runtime.caml_register_global(15, Stdlib_Hashtbl, "Stdlib__Hashtbl");
   return;
  }
  (globalThis));

//# 18661 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_check_bound = runtime.caml_check_bound,
    caml_make_vect = runtime.caml_make_vect,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_mod = runtime.caml_mod;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Obj = global_data.Stdlib__Obj,
    cst_Weak_create = "Weak.create",
    cst_Weak_set = "Weak.set",
    cst_Weak_get = "Weak.get",
    cst_Weak_get_copy = "Weak.get_copy",
    cst_Weak_check = "Weak.check",
    cst_Weak_blit = "Weak.blit",
    cst_Weak_fill = "Weak.fill",
    cst_Weak_Make_hash_bucket_cann = "Weak.Make: hash bucket cannot grow more";
   function create(l){
    var
     _J_ = 0 <= l ? 1 : 0,
     _K_ = _J_ ? l <= Stdlib_Obj[26][15] ? 1 : 0 : _J_;
    if(1 - _K_) caml_call1(Stdlib[1], cst_Weak_create);
    return runtime.caml_weak_create(l);
   }
   function length(x){return x.length - 3 | 0;}
   function raise_if_invalid_offset(e, o, msg){
    var
     _G_ = 0 <= o ? 1 : 0,
     _H_ = _G_ ? o < length(e) ? 1 : 0 : _G_,
     _I_ = 1 - _H_;
    return _I_ ? caml_call1(Stdlib[1], msg) : _I_;
   }
   function set(e, o, x){
    raise_if_invalid_offset(e, o, cst_Weak_set);
    if(! x) return runtime.caml_ephe_unset_key(e, o);
    var x$0 = x[1];
    return runtime.caml_ephe_set_key(e, o, x$0);
   }
   function get(e, o){
    raise_if_invalid_offset(e, o, cst_Weak_get);
    return runtime.caml_ephe_get_key(e, o);
   }
   function get_copy(e, o){
    raise_if_invalid_offset(e, o, cst_Weak_get_copy);
    return runtime.caml_ephe_get_key_copy(e, o);
   }
   function check(e, o){
    raise_if_invalid_offset(e, o, cst_Weak_check);
    return runtime.caml_ephe_check_key(e, o);
   }
   function blit(e1, o1, e2, o2, l){
    if
     (0 <= l
      &&
       0 <= o1
       && (length(e1) - l | 0) >= o1 && 0 <= o2 && (length(e2) - l | 0) >= o2){
     var
      _E_ = 0 !== l ? 1 : 0,
      _F_ = _E_ ? runtime.caml_ephe_blit_key(e1, o1, e2, o2, l) : _E_;
     return _F_;
    }
    return caml_call1(Stdlib[1], cst_Weak_blit);
   }
   function fill(ar, ofs, len, x){
    if(0 <= ofs && 0 <= len && (length(ar) - len | 0) >= ofs){
     var _C_ = (ofs + len | 0) - 1 | 0;
     if(_C_ >= ofs){
      var i = ofs;
      for(;;){
       set(ar, i, x);
       var _D_ = i + 1 | 0;
       if(_C_ === i) break;
       i = _D_;
      }
     }
     return 0;
    }
    throw caml_maybe_attach_backtrace([0, Stdlib[6], cst_Weak_fill], 1);
   }
   function Make(H){
    var emptybucket = create(0);
    function get_index(t, h){
     return caml_mod(h & Stdlib[19], t[1].length - 1);
    }
    var limit = 7;
    function create$0(sz){
     var
      sz$0 = 7 <= sz ? sz : 7,
      sz$1 = Stdlib_Sys[13] < sz$0 ? Stdlib_Sys[13] : sz$0;
     return [0,
             caml_make_vect(sz$1, emptybucket),
             caml_make_vect(sz$1, [0]),
             limit,
             0,
             0];
    }
    function clear(t){
     var _A_ = t[1].length - 2 | 0, _z_ = 0;
     if(_A_ >= 0){
      var i = _z_;
      for(;;){
       caml_check_bound(t[1], i)[1 + i] = emptybucket;
       caml_check_bound(t[2], i)[1 + i] = [0];
       var _B_ = i + 1 | 0;
       if(_A_ === i) break;
       i = _B_;
      }
     }
     t[3] = limit;
     t[4] = 0;
     return 0;
    }
    function fold(f, t, init){
     var i = 0;
     return caml_call3
             (Stdlib_Array[19],
              function(b, accu$1){
               var i$0 = i, accu = accu$1;
               for(;;){
                if(length(b) <= i$0) return accu;
                var match = get(b, i$0);
                if(match){
                 var
                  v = match[1],
                  accu$0 = caml_call2(f, v, accu),
                  i$1 = i$0 + 1 | 0;
                 i$0 = i$1;
                 accu = accu$0;
                }
                else{var i$2 = i$0 + 1 | 0; i$0 = i$2;}
               }
              },
              t[1],
              init);
    }
    function iter(f, t){
     var i = 0;
     return caml_call2
             (Stdlib_Array[13],
              function(b){
               var i$0 = i;
               for(;;){
                if(length(b) <= i$0) return 0;
                var match = get(b, i$0);
                if(match){
                 var v = match[1];
                 caml_call1(f, v);
                 var i$1 = i$0 + 1 | 0;
                 i$0 = i$1;
                }
                else{var i$2 = i$0 + 1 | 0; i$0 = i$2;}
               }
              },
              t[1]);
    }
    function count_bucket(i, b, accu){
     var i$0 = i, accu$0 = accu;
     for(;;){
      if(length(b) <= i$0) return accu$0;
      var
       _y_ = check(b, i$0) ? 1 : 0,
       accu$1 = accu$0 + _y_ | 0,
       i$1 = i$0 + 1 | 0;
      i$0 = i$1;
      accu$0 = accu$1;
     }
    }
    function count(t){
     var _v_ = 0;
     return caml_call3
             (Stdlib_Array[19],
              function(_w_, _x_){return count_bucket(_v_, _w_, _x_);},
              t[1],
              0);
    }
    function add_aux(t, setter, d, h, index){
     var
      bucket$0 = caml_check_bound(t[1], index)[1 + index],
      hashes = caml_check_bound(t[2], index)[1 + index],
      sz = length(bucket$0),
      i$3 = 0;
     for(;;){
      if(sz <= i$3) break;
      if(! check(bucket$0, i$3)){
       caml_call3(setter, bucket$0, i$3, d);
       caml_check_bound(hashes, i$3)[1 + i$3] = h;
       return 0;
      }
      var i$5 = i$3 + 1 | 0;
      i$3 = i$5;
     }
     var
      newsz =
        caml_call2
         (Stdlib_Int[10],
          ((3 * sz | 0) / 2 | 0) + 3 | 0,
          Stdlib_Sys[13] - 2 | 0);
     if(newsz <= sz) caml_call1(Stdlib[2], cst_Weak_Make_hash_bucket_cann);
     var newbucket$0 = create(newsz), newhashes = caml_make_vect(newsz, 0);
     blit(bucket$0, 0, newbucket$0, 0, sz);
     caml_call5(Stdlib_Array[10], hashes, 0, newhashes, 0, sz);
     caml_call3(setter, newbucket$0, sz, d);
     caml_check_bound(newhashes, sz)[1 + sz] = h;
     caml_check_bound(t[1], index)[1 + index] = newbucket$0;
     caml_check_bound(t[2], index)[1 + index] = newhashes;
     var _r_ = sz <= t[3] ? 1 : 0, _s_ = _r_ ? t[3] < newsz ? 1 : 0 : _r_;
     if(_s_){
      t[4] = t[4] + 1 | 0;
      var i$4 = 0;
      for(;;){
       var
        _h_ = t[5],
        bucket = caml_check_bound(t[1], _h_)[1 + _h_],
        _i_ = t[5],
        hbucket = caml_check_bound(t[2], _i_)[1 + _i_],
        len = length(bucket),
        prev_len = (((len - 3 | 0) * 2 | 0) + 2 | 0) / 3 | 0,
        live = count_bucket(0, bucket, 0);
       if(live <= prev_len){
        var j$2 = length(bucket) - 1 | 0, i$0 = 0, j = j$2;
        for(;;){
         if(prev_len > j) break;
         if(check(bucket, i$0)){
          var i$1 = i$0 + 1 | 0;
          i$0 = i$1;
         }
         else if(check(bucket, j)){
          blit(bucket, j, bucket, i$0, 1);
          var _j_ = caml_check_bound(hbucket, j)[1 + j];
          caml_check_bound(hbucket, i$0)[1 + i$0] = _j_;
          var j$0 = j - 1 | 0, i$2 = i$0 + 1 | 0;
          i$0 = i$2;
          j = j$0;
         }
         else{var j$1 = j - 1 | 0; j = j$1;}
        }
        if(0 === prev_len){
         var _k_ = t[5];
         caml_check_bound(t[1], _k_)[1 + _k_] = emptybucket;
         var _l_ = t[5];
         caml_check_bound(t[2], _l_)[1 + _l_] = [0];
        }
        else{
         var newbucket = create(prev_len);
         blit(bucket, 0, newbucket, 0, prev_len);
         var _o_ = t[5];
         caml_check_bound(t[1], _o_)[1 + _o_] = newbucket;
         var
          _p_ = caml_call3(Stdlib_Array[7], hbucket, 0, prev_len),
          _q_ = t[5];
         caml_check_bound(t[2], _q_)[1 + _q_] = _p_;
        }
        var
         _m_ = t[3] < len ? 1 : 0,
         _n_ = _m_ ? prev_len <= t[3] ? 1 : 0 : _m_;
        if(_n_) t[4] = t[4] - 1 | 0;
       }
       t[5] = caml_mod(t[5] + 1 | 0, t[1].length - 1);
       var _u_ = i$4 + 1 | 0;
       if(2 === i$4) break;
       i$4 = _u_;
      }
     }
     var _t_ = ((t[1].length - 1) / 2 | 0) < t[4] ? 1 : 0;
     if(! _t_) return _t_;
     var
      oldlen = t[1].length - 1,
      newlen =
        caml_call2
         (Stdlib_Int[10], ((3 * oldlen | 0) / 2 | 0) + 3 | 0, Stdlib_Sys[13]);
     if(oldlen < newlen){
      var newt = create$0(newlen), i = 0;
      caml_call2
       (Stdlib_Array[14],
        function(j, ob){
         var oi = i;
         for(;;){
          if(length(ob) <= oi) return 0;
          if(check(ob, oi)){
           var oh = caml_check_bound(t[2], j)[1 + j];
           let oi$0 = oi;
           var
            setter =
              function(nb, ni, param){return blit(ob, oi$0, nb, ni, 1);},
            h = caml_check_bound(oh, oi)[1 + oi];
           add_aux(newt, setter, 0, h, get_index(newt, h));
           var i$0 = oi + 1 | 0;
           oi = i$0;
          }
          else{var i$1 = oi + 1 | 0; oi = i$1;}
         }
        },
        t[1]);
      t[1] = newt[1];
      t[2] = newt[2];
      t[3] = newt[3];
      t[4] = newt[4];
      t[5] = caml_mod(t[5], newt[1].length - 1);
      return 0;
     }
     t[3] = Stdlib[19];
     t[4] = 0;
     return 0;
    }
    function add(t, d){
     var h = caml_call1(H[2], d);
     return add_aux(t, set, [0, d], h, get_index(t, h));
    }
    function find_or(t, d, ifnotfound){
     var
      h = caml_call1(H[2], d),
      index = get_index(t, h),
      bucket = caml_check_bound(t[1], index)[1 + index],
      hashes = caml_check_bound(t[2], index)[1 + index],
      sz = length(bucket),
      i = 0;
     for(;;){
      if(sz <= i) return caml_call2(ifnotfound, h, index);
      if(h === caml_check_bound(hashes, i)[1 + i]){
       var match = get_copy(bucket, i);
       if(match){
        var v = match[1];
        if(caml_call2(H[1], v, d)){
         var match$0 = get(bucket, i);
         if(match$0){var v$0 = match$0[1]; return v$0;}
         var i$0 = i + 1 | 0;
         i = i$0;
         continue;
        }
       }
       var i$1 = i + 1 | 0;
       i = i$1;
      }
      else{var i$2 = i + 1 | 0; i = i$2;}
     }
    }
    function merge(t, d){
     return find_or
             (t,
              d,
              function(h, index){add_aux(t, set, [0, d], h, index); return d;});
    }
    function find(t, d){
     return find_or
             (t,
              d,
              function(h, index){
               throw caml_maybe_attach_backtrace(Stdlib[8], 1);
              });
    }
    function find_opt(t, d){
     var
      h = caml_call1(H[2], d),
      index = get_index(t, h),
      bucket = caml_check_bound(t[1], index)[1 + index],
      hashes = caml_check_bound(t[2], index)[1 + index],
      sz = length(bucket),
      i = 0;
     for(;;){
      if(sz <= i) return 0;
      if(h === caml_check_bound(hashes, i)[1 + i]){
       var match = get_copy(bucket, i);
       if(match){
        var v = match[1];
        if(caml_call2(H[1], v, d)){
         var v$0 = get(bucket, i);
         if(v$0) return v$0;
         var i$0 = i + 1 | 0;
         i = i$0;
         continue;
        }
       }
       var i$1 = i + 1 | 0;
       i = i$1;
      }
      else{var i$2 = i + 1 | 0; i = i$2;}
     }
    }
    function find_shadow(t, d, iffound, ifnotfound){
     var
      h = caml_call1(H[2], d),
      index = get_index(t, h),
      bucket = caml_check_bound(t[1], index)[1 + index],
      hashes = caml_check_bound(t[2], index)[1 + index],
      sz = length(bucket),
      i = 0;
     for(;;){
      if(sz <= i) return ifnotfound;
      if(h === caml_check_bound(hashes, i)[1 + i]){
       var match = get_copy(bucket, i);
       if(match){
        var v = match[1];
        if(caml_call2(H[1], v, d)) return caml_call2(iffound, bucket, i);
       }
       var i$0 = i + 1 | 0;
       i = i$0;
      }
      else{var i$1 = i + 1 | 0; i = i$1;}
     }
    }
    function remove(t, d){
     return find_shadow(t, d, function(w, i){return set(w, i, 0);}, 0);
    }
    function mem(t, d){
     return find_shadow(t, d, function(w, i){return 1;}, 0);
    }
    function find_all(t, d){
     var
      h = caml_call1(H[2], d),
      index = get_index(t, h),
      bucket = caml_check_bound(t[1], index)[1 + index],
      hashes = caml_check_bound(t[2], index)[1 + index],
      sz = length(bucket),
      i = 0,
      accu = 0;
     for(;;){
      if(sz <= i) return accu;
      if(h === caml_check_bound(hashes, i)[1 + i]){
       var match = get_copy(bucket, i);
       if(match){
        var v = match[1];
        if(caml_call2(H[1], v, d)){
         var match$0 = get(bucket, i);
         if(match$0){
          var v$0 = match$0[1], accu$0 = [0, v$0, accu], i$0 = i + 1 | 0;
          i = i$0;
          accu = accu$0;
          continue;
         }
         var i$1 = i + 1 | 0;
         i = i$1;
         continue;
        }
       }
       var i$2 = i + 1 | 0;
       i = i$2;
      }
      else{var i$3 = i + 1 | 0; i = i$3;}
     }
    }
    function stats(t){
     var
      len = t[1].length - 1,
      lens = caml_call2(Stdlib_Array[15], length, t[1]);
     caml_call2(Stdlib_Array[32], runtime.caml_int_compare, lens);
     var
      totlen =
        caml_call3
         (Stdlib_Array[17],
          function(_g_, _f_){return _g_ + _f_ | 0;},
          0,
          lens),
      _a_ = len - 1 | 0,
      _c_ = len / 2 | 0,
      _b_ = caml_check_bound(lens, _a_)[1 + _a_],
      _d_ = caml_check_bound(lens, _c_)[1 + _c_],
      _e_ = caml_check_bound(lens, 0)[1];
     return [0, len, count(t), totlen, _e_, _d_, _b_];
    }
    return [0,
            create$0,
            clear,
            merge,
            add,
            remove,
            find,
            find_opt,
            find_all,
            mem,
            iter,
            fold,
            count,
            stats];
   }
   var
    Stdlib_Weak =
      [0, create, length, set, get, get_copy, check, fill, blit, Make];
   runtime.caml_register_global(13, Stdlib_Weak, "Stdlib__Weak");
   return;
  }
  (globalThis));

//# 22408 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_register_named_value = runtime.caml_register_named_value,
    global_data = runtime.caml_get_global_data(),
    Stdlib_Obj = global_data.Stdlib__Obj,
    register = caml_register_named_value;
   function register_exception(name, exn){
    var
     _a_ = Stdlib_Obj[8],
     slot = runtime.caml_obj_tag(exn) === _a_ ? exn : exn[1];
    return caml_register_named_value(name, slot);
   }
   var Stdlib_Callback = [0, register, register_exception];
   runtime.caml_register_global(1, Stdlib_Callback, "Stdlib__Callback");
   return;
  }
  (globalThis));

//# 26624 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bigarray_Array3_of_array_n$1 =
      "Bigarray.Array3.of_array: non-cubic data",
    caml_ba_change_layout = runtime.caml_ba_change_layout,
    caml_ba_create = runtime.caml_ba_create,
    caml_ba_dim_1 = runtime.caml_ba_dim_1,
    caml_ba_dim_2 = runtime.caml_ba_dim_2,
    caml_ba_kind = runtime.caml_ba_kind,
    caml_ba_num_dims = runtime.caml_ba_num_dims,
    caml_ba_reshape = runtime.caml_ba_reshape,
    caml_ba_set_1 = runtime.caml_ba_set_1,
    caml_ba_set_2 = runtime.caml_ba_set_2,
    caml_ba_set_3 = runtime.caml_ba_set_3,
    caml_ba_set_generic = runtime.caml_ba_set_generic,
    caml_ba_slice = runtime.caml_ba_slice,
    caml_check_bound = runtime.caml_check_bound,
    caml_make_vect = runtime.caml_make_vect,
    caml_mul = runtime.caml_mul;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Sys = global_data.Stdlib__Sys;
   function kind_size_in_bytes(param){
    switch(param){
      case 0:
       return 4;
      case 1:
       return 8;
      case 2:
       return 1;
      case 3:
       return 1;
      case 4:
       return 2;
      case 5:
       return 2;
      case 6:
       return 4;
      case 7:
       return 8;
      case 8:
       return Stdlib_Sys[9] / 8 | 0;
      case 9:
       return Stdlib_Sys[9] / 8 | 0;
      case 10:
       return 8;
      case 11:
       return 16;
      default: return 1;
    }
   }
   var
    cst_Bigarray_Array2_of_array_n =
      "Bigarray.Array2.of_array: non-rectangular data",
    cst_Bigarray_Array3_of_array_n = cst_Bigarray_Array3_of_array_n$1,
    cst_Bigarray_Array3_of_array_n$0 = cst_Bigarray_Array3_of_array_n$1,
    cst_Bigarray_array0_of_genarra = "Bigarray.array0_of_genarray",
    cst_Bigarray_array1_of_genarra = "Bigarray.array1_of_genarray",
    cst_Bigarray_array2_of_genarra = "Bigarray.array2_of_genarray",
    cst_Bigarray_array3_of_genarra = "Bigarray.array3_of_genarray";
   function cloop(arr, idx, f, col, max){
    if(col === idx.length - 1){
     caml_ba_set_generic(arr, idx, caml_call1(f, idx));
     return;
    }
    var _am_ = caml_check_bound(max, col)[1 + col] - 1 | 0, _al_ = 0;
    if(_am_ >= 0){
     var j = _al_;
     for(;;){
      caml_check_bound(idx, col)[1 + col] = j;
      cloop(arr, idx, f, col + 1 | 0, max);
      var _an_ = j + 1 | 0;
      if(_am_ === j) break;
      j = _an_;
     }
    }
    return;
   }
   function floop(arr, idx, f, col, max){
    if(0 > col){caml_ba_set_generic(arr, idx, caml_call1(f, idx)); return;}
    var _aj_ = caml_check_bound(max, col)[1 + col], _ai_ = 1;
    if(_aj_ >= 1){
     var j = _ai_;
     for(;;){
      caml_check_bound(idx, col)[1 + col] = j;
      floop(arr, idx, f, col - 1 | 0, max);
      var _ak_ = j + 1 | 0;
      if(_aj_ === j) break;
      j = _ak_;
     }
    }
    return;
   }
   function init(kind, layout, dims, f){
    var arr = caml_ba_create(kind, layout, dims), match = dims.length - 1;
    return 0 === match
            ? arr
            : layout
              ? (floop
                 (arr, caml_make_vect(match, 1), f, match - 1 | 0, dims),
                arr)
              : (cloop(arr, caml_make_vect(match, 0), f, 0, dims), arr);
   }
   function dims(a){
    var
     n = caml_ba_num_dims(a),
     d = caml_make_vect(n, 0),
     _af_ = n - 1 | 0,
     _ae_ = 0;
    if(_af_ >= 0){
     var i = _ae_;
     for(;;){
      var _ag_ = runtime.caml_ba_dim(a, i);
      caml_check_bound(d, i)[1 + i] = _ag_;
      var _ah_ = i + 1 | 0;
      if(_af_ === i) break;
      i = _ah_;
     }
    }
    return d;
   }
   function size_in_bytes(arr){
    var
     _ac_ = dims(arr),
     _ad_ = caml_call3(Stdlib_Array[17], caml_mul, 1, _ac_);
    return caml_mul(kind_size_in_bytes(caml_ba_kind(arr)), _ad_);
   }
   function create(kind, layout){return caml_ba_create(kind, layout, [0]);}
   function get(arr){return runtime.caml_ba_get_generic(arr, [0]);}
   function set(arr){
    var _aa_ = [0];
    return function(_ab_){return caml_ba_set_generic(arr, _aa_, _ab_);};
   }
   function size_in_bytes$0(arr){
    return kind_size_in_bytes(caml_ba_kind(arr));
   }
   function of_value(kind, layout, v){
    var a = create(kind, layout);
    set(a)(v);
    return a;
   }
   function create$0(kind, layout, dim){
    return caml_ba_create(kind, layout, [0, dim]);
   }
   function size_in_bytes$1(arr){
    var _$_ = caml_ba_dim_1(arr);
    return caml_mul(kind_size_in_bytes(caml_ba_kind(arr)), _$_);
   }
   function slice(a, n){
    return runtime.caml_ba_layout(a)
            ? caml_ba_slice(a, [0, n])
            : caml_ba_slice(a, [0, n]);
   }
   function init$0(kind, layout, dim, f){
    var arr = create$0(kind, layout, dim);
    if(layout){
     var _Z_ = 1;
     if(dim >= 1){
      var i$0 = _Z_;
      for(;;){
       caml_ba_set_1(arr, i$0, caml_call1(f, i$0));
       var ___ = i$0 + 1 | 0;
       if(dim === i$0) break;
       i$0 = ___;
      }
     }
     return arr;
    }
    var _X_ = dim - 1 | 0, _W_ = 0;
    if(_X_ >= 0){
     var i = _W_;
     for(;;){
      caml_ba_set_1(arr, i, caml_call1(f, i));
      var _Y_ = i + 1 | 0;
      if(_X_ === i) break;
      i = _Y_;
     }
    }
    return arr;
   }
   function of_array(kind, layout, data){
    var
     ba = create$0(kind, layout, data.length - 1),
     ofs = layout ? 1 : 0,
     _U_ = data.length - 2 | 0,
     _T_ = 0;
    if(_U_ >= 0){
     var i = _T_;
     for(;;){
      caml_ba_set_1(ba, i + ofs | 0, caml_check_bound(data, i)[1 + i]);
      var _V_ = i + 1 | 0;
      if(_U_ === i) break;
      i = _V_;
     }
    }
    return ba;
   }
   function create$1(kind, layout, dim1, dim2){
    return caml_ba_create(kind, layout, [0, dim1, dim2]);
   }
   function size_in_bytes$2(arr){
    var _R_ = caml_ba_dim_2(arr), _S_ = caml_ba_dim_1(arr);
    return caml_mul(caml_mul(kind_size_in_bytes(caml_ba_kind(arr)), _S_), _R_);
   }
   function slice_left(a, n){return caml_ba_slice(a, [0, n]);}
   function slice_right(a, n){return caml_ba_slice(a, [0, n]);}
   function init$1(kind, layout, dim1, dim2, f){
    var arr = create$1(kind, layout, dim1, dim2);
    if(layout){
     var _N_ = 1;
     if(dim2 >= 1){
      var j$0 = _N_;
      for(;;){
       var _O_ = 1;
       if(dim1 >= 1){
        var i$0 = _O_;
        for(;;){
         caml_ba_set_2(arr, i$0, j$0, caml_call2(f, i$0, j$0));
         var _Q_ = i$0 + 1 | 0;
         if(dim1 === i$0) break;
         i$0 = _Q_;
        }
       }
       var _P_ = j$0 + 1 | 0;
       if(dim2 === j$0) break;
       j$0 = _P_;
      }
     }
     return arr;
    }
    var _I_ = dim1 - 1 | 0, _H_ = 0;
    if(_I_ >= 0){
     var i = _H_;
     for(;;){
      var _K_ = dim2 - 1 | 0, _J_ = 0;
      if(_K_ >= 0){
       var j = _J_;
       for(;;){
        caml_ba_set_2(arr, i, j, caml_call2(f, i, j));
        var _M_ = j + 1 | 0;
        if(_K_ === j) break;
        j = _M_;
       }
      }
      var _L_ = i + 1 | 0;
      if(_I_ === i) break;
      i = _L_;
     }
    }
    return arr;
   }
   function of_array$0(kind, layout, data){
    var
     dim1 = data.length - 1,
     dim2 = 0 === dim1 ? 0 : caml_check_bound(data, 0)[1].length - 1,
     ba = create$1(kind, layout, dim1, dim2),
     ofs = layout ? 1 : 0,
     _C_ = dim1 - 1 | 0,
     _B_ = 0;
    if(_C_ >= 0){
     var i = _B_;
     for(;;){
      var row = caml_check_bound(data, i)[1 + i];
      if(row.length - 1 !== dim2)
       caml_call1(Stdlib[1], cst_Bigarray_Array2_of_array_n);
      var _E_ = dim2 - 1 | 0, _D_ = 0;
      if(_E_ >= 0){
       var j = _D_;
       for(;;){
        caml_ba_set_2
         (ba, i + ofs | 0, j + ofs | 0, caml_check_bound(row, j)[1 + j]);
        var _G_ = j + 1 | 0;
        if(_E_ === j) break;
        j = _G_;
       }
      }
      var _F_ = i + 1 | 0;
      if(_C_ === i) break;
      i = _F_;
     }
    }
    return ba;
   }
   function create$2(kind, layout, dim1, dim2, dim3){
    return caml_ba_create(kind, layout, [0, dim1, dim2, dim3]);
   }
   function size_in_bytes$3(arr){
    var
     _y_ = runtime.caml_ba_dim_3(arr),
     _z_ = caml_ba_dim_2(arr),
     _A_ = caml_ba_dim_1(arr);
    return caml_mul
            (caml_mul
              (caml_mul(kind_size_in_bytes(caml_ba_kind(arr)), _A_), _z_),
             _y_);
   }
   function slice_left_1(a, n, m){return caml_ba_slice(a, [0, n, m]);}
   function slice_right_1(a, n, m){return caml_ba_slice(a, [0, n, m]);}
   function slice_left_2(a, n){return caml_ba_slice(a, [0, n]);}
   function slice_right_2(a, n){return caml_ba_slice(a, [0, n]);}
   function init$2(kind, layout, dim1, dim2, dim3, f){
    var arr = create$2(kind, layout, dim1, dim2, dim3);
    if(layout){
     var _s_ = 1;
     if(dim3 >= 1){
      var k$0 = _s_;
      for(;;){
       var _t_ = 1;
       if(dim2 >= 1){
        var j$0 = _t_;
        for(;;){
         var _v_ = 1;
         if(dim1 >= 1){
          var i$0 = _v_;
          for(;;){
           caml_ba_set_3(arr, i$0, j$0, k$0, caml_call3(f, i$0, j$0, k$0));
           var _x_ = i$0 + 1 | 0;
           if(dim1 === i$0) break;
           i$0 = _x_;
          }
         }
         var _w_ = j$0 + 1 | 0;
         if(dim2 === j$0) break;
         j$0 = _w_;
        }
       }
       var _u_ = k$0 + 1 | 0;
       if(dim3 === k$0) break;
       k$0 = _u_;
      }
     }
     return arr;
    }
    var _k_ = dim1 - 1 | 0, _j_ = 0;
    if(_k_ >= 0){
     var i = _j_;
     for(;;){
      var _m_ = dim2 - 1 | 0, _l_ = 0;
      if(_m_ >= 0){
       var j = _l_;
       for(;;){
        var _p_ = dim3 - 1 | 0, _o_ = 0;
        if(_p_ >= 0){
         var k = _o_;
         for(;;){
          caml_ba_set_3(arr, i, j, k, caml_call3(f, i, j, k));
          var _r_ = k + 1 | 0;
          if(_p_ === k) break;
          k = _r_;
         }
        }
        var _q_ = j + 1 | 0;
        if(_m_ === j) break;
        j = _q_;
       }
      }
      var _n_ = i + 1 | 0;
      if(_k_ === i) break;
      i = _n_;
     }
    }
    return arr;
   }
   function of_array$1(kind, layout, data){
    var
     dim1 = data.length - 1,
     dim2 = 0 === dim1 ? 0 : caml_check_bound(data, 0)[1].length - 1,
     dim3 =
       0 === dim2
        ? 0
        : caml_check_bound(caml_check_bound(data, 0)[1], 0)[1].length - 1,
     ba = create$2(kind, layout, dim1, dim2, dim3),
     ofs = layout ? 1 : 0,
     _b_ = dim1 - 1 | 0,
     _a_ = 0;
    if(_b_ >= 0){
     var i = _a_;
     for(;;){
      var row = caml_check_bound(data, i)[1 + i];
      if(row.length - 1 !== dim2)
       caml_call1(Stdlib[1], cst_Bigarray_Array3_of_array_n);
      var _d_ = dim2 - 1 | 0, _c_ = 0;
      if(_d_ >= 0){
       var j = _c_;
       for(;;){
        var col = caml_check_bound(row, j)[1 + j];
        if(col.length - 1 !== dim3)
         caml_call1(Stdlib[1], cst_Bigarray_Array3_of_array_n$0);
        var _g_ = dim3 - 1 | 0, _f_ = 0;
        if(_g_ >= 0){
         var k = _f_;
         for(;;){
          caml_ba_set_3
           (ba,
            i + ofs | 0,
            j + ofs | 0,
            k + ofs | 0,
            caml_check_bound(col, k)[1 + k]);
          var _i_ = k + 1 | 0;
          if(_g_ === k) break;
          k = _i_;
         }
        }
        var _h_ = j + 1 | 0;
        if(_d_ === j) break;
        j = _h_;
       }
      }
      var _e_ = i + 1 | 0;
      if(_b_ === i) break;
      i = _e_;
     }
    }
    return ba;
   }
   function array0_of_genarray(a){
    return 0 === caml_ba_num_dims(a)
            ? a
            : caml_call1(Stdlib[1], cst_Bigarray_array0_of_genarra);
   }
   function array1_of_genarray(a){
    return 1 === caml_ba_num_dims(a)
            ? a
            : caml_call1(Stdlib[1], cst_Bigarray_array1_of_genarra);
   }
   function array2_of_genarray(a){
    return 2 === caml_ba_num_dims(a)
            ? a
            : caml_call1(Stdlib[1], cst_Bigarray_array2_of_genarra);
   }
   function array3_of_genarray(a){
    return 3 === caml_ba_num_dims(a)
            ? a
            : caml_call1(Stdlib[1], cst_Bigarray_array3_of_genarra);
   }
   function reshape_0(a){return caml_ba_reshape(a, [0]);}
   function reshape_1(a, dim1){return caml_ba_reshape(a, [0, dim1]);}
   function reshape_2(a, dim1, dim2){
    return caml_ba_reshape(a, [0, dim1, dim2]);
   }
   function reshape_3(a, dim1, dim2, dim3){
    return caml_ba_reshape(a, [0, dim1, dim2, dim3]);
   }
   var
    Stdlib_Bigarray =
      [0,
       0,
       1,
       10,
       11,
       2,
       3,
       4,
       5,
       8,
       6,
       7,
       9,
       12,
       kind_size_in_bytes,
       0,
       1,
       [0, init, dims, size_in_bytes],
       [0,
        create,
        of_value,
        caml_ba_change_layout,
        size_in_bytes$0,
        get,
        set,
        of_value],
       [0,
        create$0,
        init$0,
        caml_ba_change_layout,
        size_in_bytes$1,
        slice,
        of_array],
       [0,
        create$1,
        init$1,
        caml_ba_change_layout,
        size_in_bytes$2,
        slice_left,
        slice_right,
        of_array$0],
       [0,
        create$2,
        init$2,
        caml_ba_change_layout,
        size_in_bytes$3,
        slice_left_1,
        slice_right_1,
        slice_left_2,
        slice_right_2,
        of_array$1],
       array0_of_genarray,
       array1_of_genarray,
       array2_of_genarray,
       array3_of_genarray,
       caml_ba_reshape,
       reshape_0,
       reshape_1,
       reshape_2,
       reshape_3];
   runtime.caml_register_global(10, Stdlib_Bigarray, "Stdlib__Bigarray");
   return;
  }
  (globalThis));


//# 1 "../.js/default/unix/unix.cma.js"
// Generated by js_of_ocaml
//# 3 "../.js/default/unix/unix.cma.js"

//# 7 "../.js/default/unix/unix.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$6 = "",
    cst$7 = ", ",
    cst_c$1 = "-c",
    cst_bin_sh = "/bin/sh",
    cst_0_0_0_0$0 = "0.0.0.0",
    cst_127_0_0_1$0 = "127.0.0.1",
    cst_Unix_Unix_error = "Unix.Unix_error",
    cst_tcp$2 = "tcp",
    cst_udp$2 = "udp",
    caml_channel_descriptor = runtime.caml_channel_descriptor,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_unix_inet_addr_of_string = runtime.caml_unix_inet_addr_of_string,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$5 = cst$6,
    cst$4 = cst$6,
    cst$1 = ': "',
    cst$2 = '"',
    cst$3 = ": ",
    shell = cst_bin_sh,
    cst = cst$6,
    cst$0 = cst$6,
    Stdlib = global_data.Stdlib,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Fun = global_data.Stdlib__Fun,
    Stdlib_Int = global_data.Stdlib__Int;
   global_data.Stdlib__Array;
   var
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Callback = global_data.Stdlib__Callback,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Unix_error = [248, cst_Unix_Unix_error, runtime.caml_fresh_oo_id(0)];
   caml_call2
    (Stdlib_Callback[2], cst_Unix_Unix_error, [0, Unix_error, 0, cst$0, cst]);
   var
    cst_E2BIG = "E2BIG",
    _a_ =
      [0,
       [11,
        "Unix.Unix_error(Unix.",
        [2, 0, [11, cst$7, [3, 0, [11, cst$7, [3, 0, [12, 41, 0]]]]]]],
       "Unix.Unix_error(Unix.%s, %S, %S)"],
    cst_EACCES = "EACCES",
    cst_EAGAIN = "EAGAIN",
    cst_EBADF = "EBADF",
    cst_EBUSY = "EBUSY",
    cst_ECHILD = "ECHILD",
    cst_EDEADLK = "EDEADLK",
    cst_EDOM = "EDOM",
    cst_EEXIST = "EEXIST",
    cst_EFAULT = "EFAULT",
    cst_EFBIG = "EFBIG",
    cst_EINTR = "EINTR",
    cst_EINVAL = "EINVAL",
    cst_EIO = "EIO",
    cst_EISDIR = "EISDIR",
    cst_EMFILE = "EMFILE",
    cst_EMLINK = "EMLINK",
    cst_ENAMETOOLONG = "ENAMETOOLONG",
    cst_ENFILE = "ENFILE",
    cst_ENODEV = "ENODEV",
    cst_ENOENT = "ENOENT",
    cst_ENOEXEC = "ENOEXEC",
    cst_ENOLCK = "ENOLCK",
    cst_ENOMEM = "ENOMEM",
    cst_ENOSPC = "ENOSPC",
    cst_ENOSYS = "ENOSYS",
    cst_ENOTDIR = "ENOTDIR",
    cst_ENOTEMPTY = "ENOTEMPTY",
    cst_ENOTTY = "ENOTTY",
    cst_ENXIO = "ENXIO",
    cst_EPERM = "EPERM",
    cst_EPIPE = "EPIPE",
    cst_ERANGE = "ERANGE",
    cst_EROFS = "EROFS",
    cst_ESPIPE = "ESPIPE",
    cst_ESRCH = "ESRCH",
    cst_EXDEV = "EXDEV",
    cst_EWOULDBLOCK = "EWOULDBLOCK",
    cst_EINPROGRESS = "EINPROGRESS",
    cst_EALREADY = "EALREADY",
    cst_ENOTSOCK = "ENOTSOCK",
    cst_EDESTADDRREQ = "EDESTADDRREQ",
    cst_EMSGSIZE = "EMSGSIZE",
    cst_EPROTOTYPE = "EPROTOTYPE",
    cst_ENOPROTOOPT = "ENOPROTOOPT",
    cst_EPROTONOSUPPORT = "EPROTONOSUPPORT",
    cst_ESOCKTNOSUPPORT = "ESOCKTNOSUPPORT",
    cst_EOPNOTSUPP = "EOPNOTSUPP",
    cst_EPFNOSUPPORT = "EPFNOSUPPORT",
    cst_EAFNOSUPPORT = "EAFNOSUPPORT",
    cst_EADDRINUSE = "EADDRINUSE",
    cst_EADDRNOTAVAIL = "EADDRNOTAVAIL",
    cst_ENETDOWN = "ENETDOWN",
    cst_ENETUNREACH = "ENETUNREACH",
    cst_ENETRESET = "ENETRESET",
    cst_ECONNABORTED = "ECONNABORTED",
    cst_ECONNRESET = "ECONNRESET",
    cst_ENOBUFS = "ENOBUFS",
    cst_EISCONN = "EISCONN",
    cst_ENOTCONN = "ENOTCONN",
    cst_ESHUTDOWN = "ESHUTDOWN",
    cst_ETOOMANYREFS = "ETOOMANYREFS",
    cst_ETIMEDOUT = "ETIMEDOUT",
    cst_ECONNREFUSED = "ECONNREFUSED",
    cst_EHOSTDOWN = "EHOSTDOWN",
    cst_EHOSTUNREACH = "EHOSTUNREACH",
    cst_ELOOP = "ELOOP",
    cst_EOVERFLOW = "EOVERFLOW",
    _b_ = [0, [11, "EUNKNOWNERR ", [4, 0, 0, 0, 0]], "EUNKNOWNERR %d"];
   caml_call1
    (Stdlib_Printexc[9],
     function(param){
      if(param[1] !== Unix_error) return 0;
      var s = param[4], s$0 = param[3], e = param[2];
      if(typeof e === "number"){
       var _cS_ = e;
       if(34 <= _cS_)
        switch(_cS_){
          case 34:
           var msg = cst_ESPIPE; break;
          case 35:
           var msg = cst_ESRCH; break;
          case 36:
           var msg = cst_EXDEV; break;
          case 37:
           var msg = cst_EWOULDBLOCK; break;
          case 38:
           var msg = cst_EINPROGRESS; break;
          case 39:
           var msg = cst_EALREADY; break;
          case 40:
           var msg = cst_ENOTSOCK; break;
          case 41:
           var msg = cst_EDESTADDRREQ; break;
          case 42:
           var msg = cst_EMSGSIZE; break;
          case 43:
           var msg = cst_EPROTOTYPE; break;
          case 44:
           var msg = cst_ENOPROTOOPT; break;
          case 45:
           var msg = cst_EPROTONOSUPPORT; break;
          case 46:
           var msg = cst_ESOCKTNOSUPPORT; break;
          case 47:
           var msg = cst_EOPNOTSUPP; break;
          case 48:
           var msg = cst_EPFNOSUPPORT; break;
          case 49:
           var msg = cst_EAFNOSUPPORT; break;
          case 50:
           var msg = cst_EADDRINUSE; break;
          case 51:
           var msg = cst_EADDRNOTAVAIL; break;
          case 52:
           var msg = cst_ENETDOWN; break;
          case 53:
           var msg = cst_ENETUNREACH; break;
          case 54:
           var msg = cst_ENETRESET; break;
          case 55:
           var msg = cst_ECONNABORTED; break;
          case 56:
           var msg = cst_ECONNRESET; break;
          case 57:
           var msg = cst_ENOBUFS; break;
          case 58:
           var msg = cst_EISCONN; break;
          case 59:
           var msg = cst_ENOTCONN; break;
          case 60:
           var msg = cst_ESHUTDOWN; break;
          case 61:
           var msg = cst_ETOOMANYREFS; break;
          case 62:
           var msg = cst_ETIMEDOUT; break;
          case 63:
           var msg = cst_ECONNREFUSED; break;
          case 64:
           var msg = cst_EHOSTDOWN; break;
          case 65:
           var msg = cst_EHOSTUNREACH; break;
          case 66:
           var msg = cst_ELOOP; break;
          default: var msg = cst_EOVERFLOW;
        }
       else
        switch(_cS_){
          case 0:
           var msg = cst_E2BIG; break;
          case 1:
           var msg = cst_EACCES; break;
          case 2:
           var msg = cst_EAGAIN; break;
          case 3:
           var msg = cst_EBADF; break;
          case 4:
           var msg = cst_EBUSY; break;
          case 5:
           var msg = cst_ECHILD; break;
          case 6:
           var msg = cst_EDEADLK; break;
          case 7:
           var msg = cst_EDOM; break;
          case 8:
           var msg = cst_EEXIST; break;
          case 9:
           var msg = cst_EFAULT; break;
          case 10:
           var msg = cst_EFBIG; break;
          case 11:
           var msg = cst_EINTR; break;
          case 12:
           var msg = cst_EINVAL; break;
          case 13:
           var msg = cst_EIO; break;
          case 14:
           var msg = cst_EISDIR; break;
          case 15:
           var msg = cst_EMFILE; break;
          case 16:
           var msg = cst_EMLINK; break;
          case 17:
           var msg = cst_ENAMETOOLONG; break;
          case 18:
           var msg = cst_ENFILE; break;
          case 19:
           var msg = cst_ENODEV; break;
          case 20:
           var msg = cst_ENOENT; break;
          case 21:
           var msg = cst_ENOEXEC; break;
          case 22:
           var msg = cst_ENOLCK; break;
          case 23:
           var msg = cst_ENOMEM; break;
          case 24:
           var msg = cst_ENOSPC; break;
          case 25:
           var msg = cst_ENOSYS; break;
          case 26:
           var msg = cst_ENOTDIR; break;
          case 27:
           var msg = cst_ENOTEMPTY; break;
          case 28:
           var msg = cst_ENOTTY; break;
          case 29:
           var msg = cst_ENXIO; break;
          case 30:
           var msg = cst_EPERM; break;
          case 31:
           var msg = cst_EPIPE; break;
          case 32:
           var msg = cst_ERANGE; break;
          default: var msg = cst_EROFS;
        }
      }
      else
       var x = e[1], msg = caml_call2(Stdlib_Printf[4], _b_, x);
      return [0, caml_call4(Stdlib_Printf[4], _a_, msg, s$0, s)];
     });
   var cst_failed = '" failed', cst_on = ' on "';
   function handle_unix_error(f, arg){
    try{var _cR_ = caml_call1(f, arg); return _cR_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Unix_error) throw caml_maybe_attach_backtrace(exn, 0);
     var
      arg$0 = exn[4],
      fun_name = exn[3],
      err = exn[2],
      _cP_ = runtime.caml_check_bound(runtime.caml_sys_argv(0), 0)[1];
     caml_call1(Stdlib[49], _cP_);
     caml_call1(Stdlib[49], cst$1);
     caml_call1(Stdlib[49], fun_name);
     caml_call1(Stdlib[49], cst_failed);
     if(0 < caml_ml_string_length(arg$0)){
      caml_call1(Stdlib[49], cst_on);
      caml_call1(Stdlib[49], arg$0);
      caml_call1(Stdlib[49], cst$2);
     }
     caml_call1(Stdlib[49], cst$3);
     var _cQ_ = runtime.unix_error_message(err);
     caml_call1(Stdlib[53], _cQ_);
     return caml_call1(Stdlib[99], 2);
    }
   }
   var
    stdin = 0,
    stdout = 1,
    stderr = 2,
    cst_Unix_read = "Unix.read",
    cst_Unix_write = "Unix.write",
    cst_Unix_single_write = "Unix.single_write",
    _c_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0);
   function read(fd, buf, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(buf) - len | 0) >= ofs)
     return runtime.unix_read(fd, buf, ofs, len);
    return caml_call1(Stdlib[1], cst_Unix_read);
   }
   function write(fd, buf, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(buf) - len | 0) >= ofs)
     return runtime.unix_write(fd, buf, ofs, len);
    return caml_call1(Stdlib[1], cst_Unix_write);
   }
   function single_write(fd, buf, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(buf) - len | 0) >= ofs)
     return runtime.unix_single_write(fd, buf, ofs, len);
    return caml_call1(Stdlib[1], cst_Unix_single_write);
   }
   function write_substring(fd, buf, ofs, len){
    return write(fd, caml_call1(Stdlib_Bytes[49], buf), ofs, len);
   }
   function single_write_substring(fd, buf, ofs, len){
    return single_write(fd, caml_call1(Stdlib_Bytes[49], buf), ofs, len);
   }
   function map_file(fd, opt, kind, layout, shared, dims){
    if(opt) var sth = opt[1], pos = sth; else var pos = _c_;
    return runtime.caml_unix_map_file_bytecode
            (fd, kind, layout, shared, dims, pos);
   }
   function pause(param){
    var sigs = runtime.unix_sigprocmask(1, 0);
    return runtime.unix_sigsuspend(sigs);
   }
   function sleep(duration){return runtime.unix_sleep(duration);}
   function is_inet6_addr(s){return 16 === caml_ml_string_length(s) ? 1 : 0;}
   var
    inet_addr_any = caml_unix_inet_addr_of_string(cst_0_0_0_0$0),
    inet_addr_loopback = caml_unix_inet_addr_of_string(cst_127_0_0_1$0),
    inet6_addr_any = caml_unix_inet_addr_of_string("::"),
    inet6_addr_loopback = caml_unix_inet_addr_of_string("::1"),
    cst_Unix_recv = "Unix.recv",
    cst_Unix_recvfrom = "Unix.recvfrom",
    cst_Unix_send = "Unix.send",
    cst_Unix_sendto = "Unix.sendto",
    cst_udp = cst_udp$2,
    cst_0_0_0_0 = cst_0_0_0_0$0,
    cst_127_0_0_1 = cst_127_0_0_1$0,
    cst_tcp = cst_tcp$2,
    cst_udp$0 = cst_udp$2,
    cst_tcp$0 = cst_tcp$2,
    cst_udp$1 = cst_udp$2,
    cst_tcp$1 = cst_tcp$2,
    cst_c = cst_c$1,
    _d_ = [0, 1];
   function domain_of_sockaddr(param){
    if(0 === param[0]) return 0;
    var a = param[1];
    return is_inet6_addr(a) ? 2 : 1;
   }
   function recv(fd, buf, ofs, len, flags){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(buf) - len | 0) >= ofs)
     return runtime.unix_recv(fd, buf, ofs, len, flags);
    return caml_call1(Stdlib[1], cst_Unix_recv);
   }
   function recvfrom(fd, buf, ofs, len, flags){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(buf) - len | 0) >= ofs)
     return runtime.unix_recvfrom(fd, buf, ofs, len, flags);
    return caml_call1(Stdlib[1], cst_Unix_recvfrom);
   }
   function send(fd, buf, ofs, len, flags){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(buf) - len | 0) >= ofs)
     return runtime.unix_send(fd, buf, ofs, len, flags);
    return caml_call1(Stdlib[1], cst_Unix_send);
   }
   function sendto(fd, buf, ofs, len, flags, addr){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(buf) - len | 0) >= ofs)
     return runtime.unix_sendto(fd, buf, ofs, len, flags, addr);
    return caml_call1(Stdlib[1], cst_Unix_sendto);
   }
   function send_substring(fd, buf, ofs, len, flags){
    return send(fd, caml_call1(Stdlib_Bytes[49], buf), ofs, len, flags);
   }
   function sendto_substring(fd, buf, ofs, len, flags, addr){
    return sendto
            (fd, caml_call1(Stdlib_Bytes[49], buf), ofs, len, flags, addr);
   }
   function getsockopt(fd, opt){return runtime.unix_getsockopt(0, fd, opt);}
   function setsockopt(fd, opt, v){
    return runtime.unix_setsockopt(0, fd, opt, v);
   }
   function getsockopt_int(fd, opt){
    return runtime.unix_getsockopt(1, fd, opt);
   }
   function setsockopt_int(fd, opt, v){
    return runtime.unix_setsockopt(1, fd, opt, v);
   }
   function getsockopt_optint(fd, opt){
    return runtime.unix_getsockopt(2, fd, opt);
   }
   function setsockopt_optint(fd, opt, v){
    return runtime.unix_setsockopt(2, fd, opt, v);
   }
   function getsockopt_float(fd, opt){
    return runtime.unix_getsockopt(3, fd, opt);
   }
   function setsockopt_float(fd, opt, v){
    return runtime.unix_setsockopt(3, fd, opt, v);
   }
   function getsockopt_error(fd){return runtime.unix_getsockopt(4, fd, 0);}
   function getaddrinfo(node, service, opts){
    try{
     var
      _cG_ = runtime.unix_getaddrinfo(node, service, opts),
      _cH_ = caml_call1(Stdlib_List[9], _cG_);
     return _cH_;
    }
    catch(_cI_){
     var _cF_ = caml_wrap_exception(_cI_);
     if(_cF_[1] !== Stdlib[6]) throw caml_maybe_attach_backtrace(_cF_, 0);
     var opt_socktype = [0, 0], opt_protocol = [0, 0];
     caml_call2
      (Stdlib_List[17],
       function(param){
        if(typeof param === "number"){if(2 === param) return 0;}
        else
         switch(param[0]){
           case 1:
            var s = param[1]; opt_socktype[1] = [0, s]; return 0;
           case 2:
            var p = param[1]; opt_protocol[1] = p; return 0;
         }
        return 0;
       },
       opts);
     var
      get_port =
        function(ty, kind){
         if(service == cst$6) return [0, [0, ty, 0], 0];
         try{
          var _cM_ = [0, [0, ty, runtime.caml_int_of_string(service)], 0];
          return _cM_;
         }
         catch(_cN_){
          var _cJ_ = caml_wrap_exception(_cN_);
          if(_cJ_[1] !== Stdlib[7])
           throw caml_maybe_attach_backtrace(_cJ_, 0);
          try{
           var
            _cL_ =
              [0, [0, ty, runtime.unix_getservbyname(service, kind)[3]], 0];
           return _cL_;
          }
          catch(_cO_){
           var _cK_ = caml_wrap_exception(_cO_);
           if(_cK_ === Stdlib[8]) return 0;
           throw caml_maybe_attach_backtrace(_cK_, 0);
          }
         }
        },
      _cA_ = opt_socktype[1];
     if(_cA_)
      var
       ty = _cA_[1],
       _cB_ =
         1 === ty
          ? get_port(1, cst_udp)
          : ty
            ? service == cst$6 ? [0, [0, ty, 0], 0] : 0
            : get_port(0, cst_tcp),
       ports = _cB_;
     else
      var
       _cD_ = get_port(1, cst_udp$0),
       _cE_ = get_port(0, cst_tcp$0),
       ports = caml_call2(Stdlib[37], _cE_, _cD_);
     var
      addresses =
        node == cst$6
         ? caml_call2
            (Stdlib_List[36], 2, opts)
           ? [0, [0, inet_addr_any, cst_0_0_0_0], 0]
           : [0, [0, inet_addr_loopback, cst_127_0_0_1], 0]
         : [0, [0, caml_unix_inet_addr_of_string(node), node], 0],
      _cC_ =
        caml_call2
         (Stdlib_List[19],
          function(param){
           var port = param[2], ty = param[1];
           return caml_call2
                   (Stdlib_List[19],
                    function(param){
                     var name = param[2], addr = param[1];
                     return [0, 1, ty, opt_protocol[1], [1, addr, port], name];
                    },
                    addresses);
          },
          ports);
     return caml_call1(Stdlib_List[14], _cC_);
    }
   }
   function getnameinfo(addr, opts){
    try{var _cw_ = runtime.unix_getnameinfo(addr, opts); return _cw_;}
    catch(_cx_){
     var _cv_ = caml_wrap_exception(_cx_);
     if(_cv_[1] !== Stdlib[6]) throw caml_maybe_attach_backtrace(_cv_, 0);
     if(0 === addr[0]){var f = addr[1]; return [0, cst$4, f];}
     var p = addr[2], a = addr[1];
     try{
      if(caml_call2(Stdlib_List[36], 1, opts))
       throw caml_maybe_attach_backtrace(Stdlib[8], 1);
      var _cu_ = runtime.unix_gethostbyaddr(a)[1], hostname = _cu_;
     }
     catch(_cz_){
      var _cr_ = caml_wrap_exception(_cz_);
      if(_cr_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_cr_, 0);
      if(caml_call2(Stdlib_List[36], 2, opts))
       throw caml_maybe_attach_backtrace(Stdlib[8], 1);
      var hostname = runtime.unix_string_of_inet_addr(a);
     }
     try{
      if(caml_call2(Stdlib_List[36], 3, opts))
       throw caml_maybe_attach_backtrace(Stdlib[8], 1);
      var
       kind = caml_call2(Stdlib_List[36], 4, opts) ? cst_udp$1 : cst_tcp$1,
       _ct_ = runtime.unix_getservbyport(p, kind)[1],
       service = _ct_;
     }
     catch(_cy_){
      var _cs_ = caml_wrap_exception(_cy_);
      if(_cs_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_cs_, 0);
      var service = caml_call1(Stdlib_Int[12], p);
     }
     return [0, hostname, service];
    }
   }
   function waitpid_non_intr(pid){
    for(;;)
     try{var _cp_ = runtime.unix_waitpid(0, pid); return _cp_;}
     catch(_cq_){
      var _cn_ = caml_wrap_exception(_cq_);
      if(_cn_[1] === Unix_error){
       var _co_ = _cn_[2];
       if(typeof _co_ === "number" && 11 === _co_) continue;
      }
      throw caml_maybe_attach_backtrace(_cn_, 0);
     }
   }
   function system(cmd){
    var
     pid =
       runtime.unix_spawn
        (cst_bin_sh, [0, shell, cst_c, cmd], 0, 0, [0, 0, 1, 2]);
    return waitpid_non_intr(pid)[2];
   }
   function create_process_gen
   (cmd, args, optenv, new_stdin, new_stdout, new_stderr){
    var toclose = [0, 0];
    function close_after(param){
     return caml_call2
             (Stdlib_List[17],
              function(fd){
               try{var _cl_ = runtime.unix_close(fd); return _cl_;}
               catch(_cm_){
                var _ck_ = caml_wrap_exception(_cm_);
                if(_ck_[1] === Unix_error) return 0;
                throw caml_maybe_attach_backtrace(_ck_, 0);
               }
              },
              toclose[1]);
    }
    function file_descr_not_standard(fd){
     var fd$0 = fd;
     for(;;){
      if(3 <= fd$0) return fd$0;
      var fd$1 = runtime.unix_dup(_d_, fd$0);
      toclose[1] = [0, fd$1, toclose[1]];
      fd$0 = fd$1;
     }
    }
    var
     _ch_ = 2 === new_stderr ? 2 : file_descr_not_standard(new_stderr),
     _ci_ = 1 === new_stdout ? 1 : file_descr_not_standard(new_stdout),
     _cj_ = 0 === new_stdin ? 0 : file_descr_not_standard(new_stdin),
     redirections = [0, _cj_, _ci_, _ch_];
    return caml_call2
            (Stdlib_Fun[4],
             close_after,
             function(param){
              return runtime.unix_spawn(cmd, args, optenv, 1, redirections);
             });
   }
   function create_process(cmd, args, new_stdin, new_stdout, new_stderr){
    return create_process_gen(cmd, args, 0, new_stdin, new_stdout, new_stderr);
   }
   function create_process_env
   (cmd, args, env, new_stdin, new_stdout, new_stderr){
    return create_process_gen
            (cmd, args, [0, env], new_stdin, new_stdout, new_stderr);
   }
   var
    popen_processes = caml_call2(Stdlib_Hashtbl[1], 0, 7),
    _e_ = [0, 1],
    _f_ = [0, 1],
    _g_ = [0, 1],
    _h_ = [0, 1],
    _i_ = [0, 1],
    _j_ = [0, 1],
    _k_ = [0, 1],
    cst_c$0 = cst_c$1,
    cst_process_in_pid = "process_in_pid",
    cst_process_out_pid = "process_out_pid",
    cst_process_pid = "process_pid",
    cst_process_full_pid = "process_full_pid",
    cst_close_process_in = "close_process_in",
    cst_close_process_out = "close_process_out",
    cst_close_process = "close_process",
    cst_close_process_full = "close_process_full",
    _l_ = [0, 1],
    _m_ = [0, 1],
    _n_ = [0, 1];
   function open_proc(prog, args, envopt, proc, input, output, error){
    var pid = create_process_gen(prog, args, envopt, input, output, error);
    return caml_call3(Stdlib_Hashtbl[5], popen_processes, proc, pid);
   }
   function open_process_args_in(prog, args){
    var
     match = runtime.unix_pipe(_e_, 0),
     in_write = match[2],
     in_read = match[1],
     inchan = runtime.unix_inchannel_of_filedescr(in_read);
    try{open_proc(prog, args, 0, [1, inchan], stdin, in_write, stderr);}
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     caml_call1(Stdlib[93], inchan);
     runtime.unix_close(in_write);
     throw caml_maybe_attach_backtrace(e, 0);
    }
    runtime.unix_close(in_write);
    return inchan;
   }
   function open_process_args_out(prog, args){
    var
     match = runtime.unix_pipe(_f_, 0),
     out_write = match[2],
     out_read = match[1],
     outchan = runtime.unix_outchannel_of_filedescr(out_write);
    try{open_proc(prog, args, 0, [2, outchan], out_read, stdout, stderr);}
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     caml_call1(Stdlib[76], outchan);
     runtime.unix_close(out_read);
     throw caml_maybe_attach_backtrace(e, 0);
    }
    runtime.unix_close(out_read);
    return outchan;
   }
   function open_process_args(prog, args){
    var
     match = runtime.unix_pipe(_g_, 0),
     in_write = match[2],
     in_read = match[1];
    try{var match$0 = runtime.unix_pipe(_h_, 0);}
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     runtime.unix_close(in_read);
     runtime.unix_close(in_write);
     throw caml_maybe_attach_backtrace(e, 0);
    }
    var
     out_write = match$0[2],
     out_read = match$0[1],
     inchan = runtime.unix_inchannel_of_filedescr(in_read),
     outchan = runtime.unix_outchannel_of_filedescr(out_write);
    try{
     open_proc
      (prog, args, 0, [0, inchan, outchan], out_read, in_write, stderr);
    }
    catch(e){
     var e$0 = caml_wrap_exception(e);
     runtime.unix_close(out_read);
     runtime.unix_close(out_write);
     runtime.unix_close(in_read);
     runtime.unix_close(in_write);
     throw caml_maybe_attach_backtrace(e$0, 0);
    }
    runtime.unix_close(out_read);
    runtime.unix_close(in_write);
    return [0, inchan, outchan];
   }
   function open_process_args_full(prog, args, env){
    var
     match = runtime.unix_pipe(_i_, 0),
     in_write = match[2],
     in_read = match[1];
    try{var match$0 = runtime.unix_pipe(_j_, 0);}
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     runtime.unix_close(in_read);
     runtime.unix_close(in_write);
     throw caml_maybe_attach_backtrace(e, 0);
    }
    var out_write = match$0[2], out_read = match$0[1];
    try{var match$1 = runtime.unix_pipe(_k_, 0);}
    catch(e){
     var e$0 = caml_wrap_exception(e);
     runtime.unix_close(in_read);
     runtime.unix_close(in_write);
     runtime.unix_close(out_read);
     runtime.unix_close(out_write);
     throw caml_maybe_attach_backtrace(e$0, 0);
    }
    var
     err_write = match$1[2],
     err_read = match$1[1],
     inchan = runtime.unix_inchannel_of_filedescr(in_read),
     outchan = runtime.unix_outchannel_of_filedescr(out_write),
     errchan = runtime.unix_inchannel_of_filedescr(err_read);
    try{
     open_proc
      (prog,
       args,
       [0, env],
       [3, inchan, outchan, errchan],
       out_read,
       in_write,
       err_write);
    }
    catch(e){
     var e$1 = caml_wrap_exception(e);
     runtime.unix_close(out_read);
     runtime.unix_close(out_write);
     runtime.unix_close(in_read);
     runtime.unix_close(in_write);
     runtime.unix_close(err_read);
     runtime.unix_close(err_write);
     throw caml_maybe_attach_backtrace(e$1, 0);
    }
    runtime.unix_close(out_read);
    runtime.unix_close(in_write);
    runtime.unix_close(err_write);
    return [0, inchan, outchan, errchan];
   }
   function open_process_shell(fn, cmd){
    return caml_call2(fn, shell, [0, shell, cst_c$0, cmd]);
   }
   function open_process_in(cmd){
    return open_process_shell(open_process_args_in, cmd);
   }
   function open_process_out(cmd){
    return open_process_shell(open_process_args_out, cmd);
   }
   function open_process(cmd){
    return open_process_shell(open_process_args, cmd);
   }
   function open_process_full(cmd){
    return open_process_shell(open_process_args_full, cmd);
   }
   function find_proc_id(fun_name, proc){
    try{
     var _cf_ = caml_call2(Stdlib_Hashtbl[6], popen_processes, proc);
     return _cf_;
    }
    catch(_cg_){
     var _ce_ = caml_wrap_exception(_cg_);
     if(_ce_ === Stdlib[8])
      throw caml_maybe_attach_backtrace
             ([0, Unix_error, 3, fun_name, cst$5], 1);
     throw caml_maybe_attach_backtrace(_ce_, 0);
    }
   }
   function remove_proc_id(proc){
    return caml_call2(Stdlib_Hashtbl[10], popen_processes, proc);
   }
   function process_in_pid(inchan){
    return find_proc_id(cst_process_in_pid, [1, inchan]);
   }
   function process_out_pid(outchan){
    return find_proc_id(cst_process_out_pid, [2, outchan]);
   }
   function process_pid(param){
    var outchan = param[2], inchan = param[1];
    return find_proc_id(cst_process_pid, [0, inchan, outchan]);
   }
   function process_full_pid(param){
    var errchan = param[3], outchan = param[2], inchan = param[1];
    return find_proc_id(cst_process_full_pid, [3, inchan, outchan, errchan]);
   }
   function close_process_in(inchan){
    var proc = [1, inchan], pid = find_proc_id(cst_close_process_in, proc);
    remove_proc_id(proc);
    caml_call1(Stdlib[93], inchan);
    return waitpid_non_intr(pid)[2];
   }
   function close_process_out(outchan){
    var proc = [2, outchan], pid = find_proc_id(cst_close_process_out, proc);
    remove_proc_id(proc);
    try{caml_call1(Stdlib[76], outchan);}
    catch(_cd_){
     var _cc_ = caml_wrap_exception(_cd_);
     if(_cc_[1] !== Stdlib[11]) throw caml_maybe_attach_backtrace(_cc_, 0);
    }
    return waitpid_non_intr(pid)[2];
   }
   function close_process(param){
    var
     outchan = param[2],
     inchan = param[1],
     proc = [0, inchan, outchan],
     pid = find_proc_id(cst_close_process, proc);
    remove_proc_id(proc);
    caml_call1(Stdlib[93], inchan);
    try{caml_call1(Stdlib[76], outchan);}
    catch(_cb_){
     var _ca_ = caml_wrap_exception(_cb_);
     if(_ca_[1] !== Stdlib[11]) throw caml_maybe_attach_backtrace(_ca_, 0);
    }
    return waitpid_non_intr(pid)[2];
   }
   function close_process_full(param){
    var
     errchan = param[3],
     outchan = param[2],
     inchan = param[1],
     proc = [3, inchan, outchan, errchan],
     pid = find_proc_id(cst_close_process_full, proc);
    remove_proc_id(proc);
    caml_call1(Stdlib[93], inchan);
    try{caml_call1(Stdlib[76], outchan);}
    catch(_b$_){
     var _b__ = caml_wrap_exception(_b$_);
     if(_b__[1] !== Stdlib[11]) throw caml_maybe_attach_backtrace(_b__, 0);
    }
    caml_call1(Stdlib[93], errchan);
    return waitpid_non_intr(pid)[2];
   }
   function open_connection(sockaddr){
    var sock = runtime.unix_socket(_l_, domain_of_sockaddr(sockaddr), 0, 0);
    try{
     runtime.unix_connect(sock, sockaddr);
     var
      _b8_ = runtime.unix_outchannel_of_filedescr(sock),
      _b9_ = [0, runtime.unix_inchannel_of_filedescr(sock), _b8_];
     return _b9_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     runtime.unix_close(sock);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function shutdown_connection(inchan){
    return runtime.unix_shutdown(caml_channel_descriptor(inchan), 1);
   }
   function establish_server(server_fun, sockaddr){
    var sock = runtime.unix_socket(_n_, domain_of_sockaddr(sockaddr), 0, 0);
    runtime.unix_setsockopt(0, sock, 2, 1);
    runtime.unix_bind(sock, sockaddr);
    runtime.unix_listen(sock, 5);
    for(;;){
     for(;;)
      try{var match = runtime.unix_accept(_m_, sock); break;}
      catch(_b7_){
       var _b5_ = caml_wrap_exception(_b7_);
       if(_b5_[1] === Unix_error){
        var _b6_ = _b5_[2];
        if(typeof _b6_ === "number" && 11 === _b6_) continue;
       }
       throw caml_maybe_attach_backtrace(_b5_, 0);
      }
     var s = match[1], id = runtime.unix_fork(0);
     if(0 === id){
      if(0 !== runtime.unix_fork(0)) runtime.unix_exit(0);
      runtime.unix_close(sock);
      var
       inchan = runtime.unix_inchannel_of_filedescr(s),
       outchan = runtime.unix_outchannel_of_filedescr(s);
      caml_call2(server_fun, inchan, outchan);
      caml_call1(Stdlib[99], 0);
     }
     else{runtime.unix_close(s); waitpid_non_intr(id);}
    }
   }
   var
    Unix =
      [0,
       Unix_error,
       function(_b4_){return runtime.unix_error_message(_b4_);},
       handle_unix_error,
       function(_b3_){return runtime.unix_environment(_b3_);},
       function(_b2_){return runtime.unix_environment_unsafe(_b2_);},
       runtime.caml_sys_getenv,
       runtime.caml_sys_unsafe_getenv,
       function(_b1_, _b0_){return runtime.unix_putenv(_b1_, _b0_);},
       function(_bZ_, _bY_){return runtime.unix_execv(_bZ_, _bY_);},
       function(_bX_, _bW_, _bV_){
        return runtime.unix_execve(_bX_, _bW_, _bV_);
       },
       function(_bU_, _bT_){return runtime.unix_execvp(_bU_, _bT_);},
       function(_bS_, _bR_, _bQ_){
        return runtime.unix_execvpe(_bS_, _bR_, _bQ_);
       },
       function(_bP_){return runtime.unix_fork(_bP_);},
       function(_bO_){return runtime.unix_wait(_bO_);},
       function(_bN_, _bM_){return runtime.unix_waitpid(_bN_, _bM_);},
       system,
       function(_bL_){return runtime.unix_exit(_bL_);},
       function(_bK_){return runtime.unix_getpid(_bK_);},
       function(_bJ_){return runtime.unix_getppid(_bJ_);},
       function(_bI_){return runtime.unix_nice(_bI_);},
       stdin,
       stdout,
       stderr,
       function(_bH_, _bG_, _bF_){return runtime.unix_open(_bH_, _bG_, _bF_);},
       function(_bE_){return runtime.unix_close(_bE_);},
       function(_bD_){return runtime.unix_fsync(_bD_);},
       read,
       write,
       single_write,
       write_substring,
       single_write_substring,
       function(_bC_){return runtime.unix_inchannel_of_filedescr(_bC_);},
       function(_bB_){return runtime.unix_outchannel_of_filedescr(_bB_);},
       caml_channel_descriptor,
       caml_channel_descriptor,
       function(_bA_, _bz_, _by_){
        return runtime.unix_lseek(_bA_, _bz_, _by_);
       },
       function(_bx_, _bw_){return runtime.unix_truncate(_bx_, _bw_);},
       function(_bv_, _bu_){return runtime.unix_ftruncate(_bv_, _bu_);},
       runtime.caml_unix_stat,
       runtime.caml_unix_lstat,
       function(_bt_){return runtime.unix_fstat(_bt_);},
       runtime.caml_unix_isatty,
       [0,
        function(_bs_, _br_, _bq_){
         return runtime.unix_lseek_64(_bs_, _br_, _bq_);
        },
        function(_bp_, _bo_){return runtime.unix_truncate_64(_bp_, _bo_);},
        function(_bn_, _bm_){return runtime.unix_ftruncate_64(_bn_, _bm_);},
        runtime.caml_unix_stat_64,
        runtime.caml_unix_lstat_64,
        function(_bl_){return runtime.unix_fstat_64(_bl_);}],
       map_file,
       runtime.caml_unix_unlink,
       function(_bk_, _bj_){return runtime.unix_rename(_bk_, _bj_);},
       function(_bi_, _bh_, _bg_){return runtime.unix_link(_bi_, _bh_, _bg_);},
       function(_bf_){return runtime.unix_realpath(_bf_);},
       function(_be_, _bd_){return runtime.unix_chmod(_be_, _bd_);},
       function(_bc_, _bb_){return runtime.unix_fchmod(_bc_, _bb_);},
       function(_ba_, _a$_, _a__){
        return runtime.unix_chown(_ba_, _a$_, _a__);
       },
       function(_a9_, _a8_, _a7_){
        return runtime.unix_fchown(_a9_, _a8_, _a7_);
       },
       function(_a6_){return runtime.unix_umask(_a6_);},
       function(_a5_, _a4_){return runtime.unix_access(_a5_, _a4_);},
       function(_a3_, _a2_){return runtime.unix_dup(_a3_, _a2_);},
       function(_a1_, _a0_, _aZ_){return runtime.unix_dup2(_a1_, _a0_, _aZ_);},
       function(_aY_){return runtime.unix_set_nonblock(_aY_);},
       function(_aX_){return runtime.unix_clear_nonblock(_aX_);},
       function(_aW_){return runtime.unix_set_close_on_exec(_aW_);},
       function(_aV_){return runtime.unix_clear_close_on_exec(_aV_);},
       runtime.caml_unix_mkdir,
       runtime.caml_unix_rmdir,
       function(_aU_){return runtime.unix_chdir(_aU_);},
       function(_aT_){return runtime.unix_getcwd(_aT_);},
       function(_aS_){return runtime.unix_chroot(_aS_);},
       runtime.caml_unix_opendir,
       runtime.caml_unix_readdir,
       runtime.caml_unix_rewinddir,
       runtime.caml_unix_closedir,
       function(_aR_, _aQ_){return runtime.unix_pipe(_aR_, _aQ_);},
       function(_aP_, _aO_){return runtime.unix_mkfifo(_aP_, _aO_);},
       create_process,
       create_process_env,
       open_process_in,
       open_process_out,
       open_process,
       open_process_full,
       open_process_args_in,
       open_process_args_out,
       open_process_args,
       open_process_args_full,
       process_in_pid,
       process_out_pid,
       process_pid,
       process_full_pid,
       close_process_in,
       close_process_out,
       close_process,
       close_process_full,
       runtime.caml_unix_symlink,
       runtime.caml_unix_has_symlink,
       runtime.caml_unix_readlink,
       function(_aN_, _aM_, _aL_, _aK_){
        return runtime.unix_select(_aN_, _aM_, _aL_, _aK_);
       },
       function(_aJ_, _aI_, _aH_){
        return runtime.unix_lockf(_aJ_, _aI_, _aH_);
       },
       function(_aG_, _aF_){return runtime.unix_kill(_aG_, _aF_);},
       function(_aE_, _aD_){return runtime.unix_sigprocmask(_aE_, _aD_);},
       function(_aC_){return runtime.unix_sigpending(_aC_);},
       function(_aB_){return runtime.unix_sigsuspend(_aB_);},
       pause,
       function(_aA_){return runtime.caml_unix_time(_aA_);},
       function(_az_){return runtime.caml_unix_gettimeofday(_az_);},
       runtime.caml_unix_gmtime,
       runtime.caml_unix_localtime,
       runtime.caml_unix_mktime,
       function(_ay_){return runtime.unix_alarm(_ay_);},
       sleep,
       function(_ax_){return runtime.unix_sleep(_ax_);},
       function(_aw_){return runtime.unix_times(_aw_);},
       function(_av_, _au_, _at_){
        return runtime.unix_utimes(_av_, _au_, _at_);
       },
       function(_as_){return runtime.unix_getitimer(_as_);},
       function(_ar_, _aq_){return runtime.unix_setitimer(_ar_, _aq_);},
       runtime.caml_unix_getuid,
       function(_ap_){return runtime.unix_geteuid(_ap_);},
       function(_ao_){return runtime.unix_setuid(_ao_);},
       function(_an_){return runtime.unix_getgid(_an_);},
       function(_am_){return runtime.unix_getegid(_am_);},
       function(_al_){return runtime.unix_setgid(_al_);},
       function(_ak_){return runtime.unix_getgroups(_ak_);},
       function(_aj_){return runtime.unix_setgroups(_aj_);},
       function(_ai_, _ah_){return runtime.unix_initgroups(_ai_, _ah_);},
       function(_ag_){return runtime.unix_getlogin(_ag_);},
       function(_af_){return runtime.unix_getpwnam(_af_);},
       function(_ae_){return runtime.unix_getgrnam(_ae_);},
       runtime.caml_unix_getpwuid,
       function(_ad_){return runtime.unix_getgrgid(_ad_);},
       function(_ac_){return caml_unix_inet_addr_of_string(_ac_);},
       function(_ab_){return runtime.unix_string_of_inet_addr(_ab_);},
       inet_addr_any,
       inet_addr_loopback,
       inet6_addr_any,
       inet6_addr_loopback,
       is_inet6_addr,
       function(_aa_, _$_, ___, _Z_){
        return runtime.unix_socket(_aa_, _$_, ___, _Z_);
       },
       domain_of_sockaddr,
       function(_Y_, _X_, _W_, _V_){
        return runtime.unix_socketpair(_Y_, _X_, _W_, _V_);
       },
       function(_U_, _T_){return runtime.unix_accept(_U_, _T_);},
       function(_S_, _R_){return runtime.unix_bind(_S_, _R_);},
       function(_Q_, _P_){return runtime.unix_connect(_Q_, _P_);},
       function(_O_, _N_){return runtime.unix_listen(_O_, _N_);},
       function(_M_, _L_){return runtime.unix_shutdown(_M_, _L_);},
       function(_K_){return runtime.unix_getsockname(_K_);},
       function(_J_){return runtime.unix_getpeername(_J_);},
       recv,
       recvfrom,
       send,
       send_substring,
       sendto,
       sendto_substring,
       getsockopt,
       setsockopt,
       getsockopt_int,
       setsockopt_int,
       getsockopt_optint,
       setsockopt_optint,
       getsockopt_float,
       setsockopt_float,
       getsockopt_error,
       open_connection,
       shutdown_connection,
       establish_server,
       function(_I_){return runtime.unix_gethostname(_I_);},
       function(_H_){return runtime.unix_gethostbyname(_H_);},
       function(_G_){return runtime.unix_gethostbyaddr(_G_);},
       function(_F_){return runtime.unix_getprotobyname(_F_);},
       function(_E_){return runtime.unix_getprotobynumber(_E_);},
       function(_D_, _C_){return runtime.unix_getservbyname(_D_, _C_);},
       function(_B_, _A_){return runtime.unix_getservbyport(_B_, _A_);},
       getaddrinfo,
       getnameinfo,
       function(_z_){return runtime.unix_tcgetattr(_z_);},
       function(_y_, _x_, _w_){return runtime.unix_tcsetattr(_y_, _x_, _w_);},
       function(_v_, _u_){return runtime.unix_tcsendbreak(_v_, _u_);},
       function(_t_){return runtime.unix_tcdrain(_t_);},
       function(_s_, _r_){return runtime.unix_tcflush(_s_, _r_);},
       function(_q_, _p_){return runtime.unix_tcflow(_q_, _p_);},
       function(_o_){return runtime.unix_setsid(_o_);}];
   runtime.caml_register_global(136, Unix, "Unix");
   return;
  }
  (globalThis));

//# 1127 "../.js/default/unix/unix.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Unix = global_data.Unix,
    Unix_error = Unix[1],
    error_message = Unix[2],
    handle_unix_error = Unix[3],
    environment = Unix[4],
    unsafe_environment = Unix[5],
    getenv = Unix[6],
    unsafe_getenv = Unix[7],
    putenv = Unix[8],
    execv = Unix[9],
    execve = Unix[10],
    execvp = Unix[11],
    execvpe = Unix[12],
    fork = Unix[13],
    wait = Unix[14],
    waitpid = Unix[15],
    system = Unix[16],
    exit = Unix[17],
    getpid = Unix[18],
    getppid = Unix[19],
    nice = Unix[20],
    stdin = Unix[21],
    stdout = Unix[22],
    stderr = Unix[23],
    openfile = Unix[24],
    close = Unix[25],
    fsync = Unix[26],
    read = Unix[27],
    write = Unix[28],
    single_write = Unix[29],
    write_substring = Unix[30],
    single_write_substring = Unix[31],
    in_channel_of_descr = Unix[32],
    out_channel_of_descr = Unix[33],
    descr_of_in_channel = Unix[34],
    descr_of_out_channel = Unix[35],
    lseek = Unix[36],
    truncate = Unix[37],
    ftruncate = Unix[38],
    stat = Unix[39],
    lstat = Unix[40],
    fstat = Unix[41],
    isatty = Unix[42],
    LargeFile = Unix[43],
    map_file = Unix[44],
    unlink = Unix[45],
    rename = Unix[46],
    link = Unix[47],
    realpath = Unix[48],
    chmod = Unix[49],
    fchmod = Unix[50],
    chown = Unix[51],
    fchown = Unix[52],
    umask = Unix[53],
    access = Unix[54],
    dup = Unix[55],
    dup2 = Unix[56],
    set_nonblock = Unix[57],
    clear_nonblock = Unix[58],
    set_close_on_exec = Unix[59],
    clear_close_on_exec = Unix[60],
    mkdir = Unix[61],
    rmdir = Unix[62],
    chdir = Unix[63],
    getcwd = Unix[64],
    chroot = Unix[65],
    opendir = Unix[66],
    readdir = Unix[67],
    rewinddir = Unix[68],
    closedir = Unix[69],
    pipe = Unix[70],
    mkfifo = Unix[71],
    create_process = Unix[72],
    create_process_env = Unix[73],
    open_process_in = Unix[74],
    open_process_out = Unix[75],
    open_process = Unix[76],
    open_process_full = Unix[77],
    open_process_args_in = Unix[78],
    open_process_args_out = Unix[79],
    open_process_args = Unix[80],
    open_process_args_full = Unix[81],
    process_in_pid = Unix[82],
    process_out_pid = Unix[83],
    process_pid = Unix[84],
    process_full_pid = Unix[85],
    close_process_in = Unix[86],
    close_process_out = Unix[87],
    close_process = Unix[88],
    close_process_full = Unix[89],
    symlink = Unix[90],
    has_symlink = Unix[91],
    readlink = Unix[92],
    select = Unix[93],
    lockf = Unix[94],
    kill = Unix[95],
    sigprocmask = Unix[96],
    sigpending = Unix[97],
    sigsuspend = Unix[98],
    pause = Unix[99],
    time = Unix[100],
    gettimeofday = Unix[101],
    gmtime = Unix[102],
    localtime = Unix[103],
    mktime = Unix[104],
    alarm = Unix[105],
    sleep = Unix[106],
    sleepf = Unix[107],
    times = Unix[108],
    utimes = Unix[109],
    getitimer = Unix[110],
    setitimer = Unix[111],
    getuid = Unix[112],
    geteuid = Unix[113],
    setuid = Unix[114],
    getgid = Unix[115],
    getegid = Unix[116],
    setgid = Unix[117],
    getgroups = Unix[118],
    setgroups = Unix[119],
    initgroups = Unix[120],
    getlogin = Unix[121],
    getpwnam = Unix[122],
    getgrnam = Unix[123],
    getpwuid = Unix[124],
    getgrgid = Unix[125],
    inet_addr_of_string = Unix[126],
    string_of_inet_addr = Unix[127],
    inet_addr_any = Unix[128],
    inet_addr_loopback = Unix[129],
    inet6_addr_any = Unix[130],
    inet6_addr_loopback = Unix[131],
    is_inet6_addr = Unix[132],
    socket = Unix[133],
    domain_of_sockaddr = Unix[134],
    socketpair = Unix[135],
    accept = Unix[136],
    bind = Unix[137],
    connect = Unix[138],
    listen = Unix[139],
    shutdown = Unix[140],
    getsockname = Unix[141],
    getpeername = Unix[142],
    recv = Unix[143],
    recvfrom = Unix[144],
    send = Unix[145],
    send_substring = Unix[146],
    sendto = Unix[147],
    sendto_substring = Unix[148],
    getsockopt = Unix[149],
    setsockopt = Unix[150],
    getsockopt_int = Unix[151],
    setsockopt_int = Unix[152],
    getsockopt_optint = Unix[153],
    setsockopt_optint = Unix[154],
    getsockopt_float = Unix[155],
    setsockopt_float = Unix[156],
    getsockopt_error = Unix[157],
    open_connection = Unix[158],
    shutdown_connection = Unix[159],
    establish_server = Unix[160],
    gethostname = Unix[161],
    gethostbyname = Unix[162],
    gethostbyaddr = Unix[163],
    getprotobyname = Unix[164],
    getprotobynumber = Unix[165],
    getservbyname = Unix[166],
    getservbyport = Unix[167],
    getaddrinfo = Unix[168],
    getnameinfo = Unix[169],
    tcgetattr = Unix[170],
    tcsetattr = Unix[171],
    tcsendbreak = Unix[172],
    tcdrain = Unix[173],
    tcflush = Unix[174],
    tcflow = Unix[175],
    setsid = Unix[176],
    UnixLabels =
      [0,
       Unix_error,
       error_message,
       handle_unix_error,
       environment,
       unsafe_environment,
       getenv,
       unsafe_getenv,
       putenv,
       execv,
       execve,
       execvp,
       execvpe,
       fork,
       wait,
       waitpid,
       system,
       exit,
       getpid,
       getppid,
       nice,
       stdin,
       stdout,
       stderr,
       openfile,
       close,
       fsync,
       read,
       write,
       single_write,
       write_substring,
       single_write_substring,
       in_channel_of_descr,
       out_channel_of_descr,
       descr_of_in_channel,
       descr_of_out_channel,
       lseek,
       truncate,
       ftruncate,
       stat,
       lstat,
       fstat,
       isatty,
       LargeFile,
       map_file,
       unlink,
       rename,
       link,
       realpath,
       chmod,
       fchmod,
       chown,
       fchown,
       umask,
       access,
       dup,
       dup2,
       set_nonblock,
       clear_nonblock,
       set_close_on_exec,
       clear_close_on_exec,
       mkdir,
       rmdir,
       chdir,
       getcwd,
       chroot,
       opendir,
       readdir,
       rewinddir,
       closedir,
       pipe,
       mkfifo,
       create_process,
       create_process_env,
       open_process_in,
       open_process_out,
       open_process,
       open_process_full,
       open_process_args_in,
       open_process_args_out,
       open_process_args,
       open_process_args_full,
       process_in_pid,
       process_out_pid,
       process_pid,
       process_full_pid,
       close_process_in,
       close_process_out,
       close_process,
       close_process_full,
       symlink,
       has_symlink,
       readlink,
       select,
       lockf,
       kill,
       sigprocmask,
       sigpending,
       sigsuspend,
       pause,
       time,
       gettimeofday,
       gmtime,
       localtime,
       mktime,
       alarm,
       sleep,
       sleepf,
       times,
       utimes,
       getitimer,
       setitimer,
       getuid,
       geteuid,
       setuid,
       getgid,
       getegid,
       setgid,
       getgroups,
       setgroups,
       initgroups,
       getlogin,
       getpwnam,
       getgrnam,
       getpwuid,
       getgrgid,
       inet_addr_of_string,
       string_of_inet_addr,
       inet_addr_any,
       inet_addr_loopback,
       inet6_addr_any,
       inet6_addr_loopback,
       is_inet6_addr,
       socket,
       domain_of_sockaddr,
       socketpair,
       accept,
       bind,
       connect,
       listen,
       shutdown,
       getsockname,
       getpeername,
       recv,
       recvfrom,
       send,
       send_substring,
       sendto,
       sendto_substring,
       getsockopt,
       setsockopt,
       getsockopt_int,
       setsockopt_int,
       getsockopt_optint,
       setsockopt_optint,
       getsockopt_float,
       setsockopt_float,
       getsockopt_error,
       open_connection,
       shutdown_connection,
       establish_server,
       gethostname,
       gethostbyname,
       gethostbyaddr,
       getprotobyname,
       getprotobynumber,
       getservbyname,
       getservbyport,
       getaddrinfo,
       getnameinfo,
       tcgetattr,
       tcsetattr,
       tcsendbreak,
       tcdrain,
       tcflush,
       tcflow,
       setsid];
   runtime.caml_register_global(1, UnixLabels, "UnixLabels");
   return;
  }
  (globalThis));


//# 1 "../.js/default/bigarray/bigarray.cma.js"
// Generated by js_of_ocaml
//# 3 "../.js/default/bigarray/bigarray.cma.js"

//# 7 "../.js/default/bigarray/bigarray.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Stdlib_Bigarray = global_data.Stdlib__Bigarray,
    float32 = Stdlib_Bigarray[1],
    float64 = Stdlib_Bigarray[2],
    complex32 = Stdlib_Bigarray[3],
    complex64 = Stdlib_Bigarray[4],
    int8_signed = Stdlib_Bigarray[5],
    int8_unsigned = Stdlib_Bigarray[6],
    int16_signed = Stdlib_Bigarray[7],
    int16_unsigned = Stdlib_Bigarray[8],
    int$0 = Stdlib_Bigarray[9],
    int32 = Stdlib_Bigarray[10],
    int64 = Stdlib_Bigarray[11],
    nativeint = Stdlib_Bigarray[12],
    char$0 = Stdlib_Bigarray[13],
    kind_size_in_bytes = Stdlib_Bigarray[14],
    c_layout = Stdlib_Bigarray[15],
    fortran_layout = Stdlib_Bigarray[16],
    array0_of_genarray = Stdlib_Bigarray[22],
    array1_of_genarray = Stdlib_Bigarray[23],
    array2_of_genarray = Stdlib_Bigarray[24],
    array3_of_genarray = Stdlib_Bigarray[25],
    reshape = Stdlib_Bigarray[26],
    reshape_0 = Stdlib_Bigarray[27],
    reshape_1 = Stdlib_Bigarray[28],
    reshape_2 = Stdlib_Bigarray[29],
    reshape_3 = Stdlib_Bigarray[30],
    Bigarray =
      [0,
       float32,
       float64,
       complex32,
       complex64,
       int8_signed,
       int8_unsigned,
       int16_signed,
       int16_unsigned,
       int$0,
       int32,
       int64,
       nativeint,
       char$0,
       kind_size_in_bytes,
       c_layout,
       fortran_layout,
       array0_of_genarray,
       array1_of_genarray,
       array2_of_genarray,
       array3_of_genarray,
       reshape,
       reshape_0,
       reshape_1,
       reshape_2,
       reshape_3];
   runtime.caml_register_global(1, Bigarray, "Bigarray");
   return;
  }
  (globalThis));


//# 1 "../.js/default/react/react.cma.js"
// Generated by js_of_ocaml
//# 3 "../.js/default/react/react.cma.js"

//# 6 "../.js/default/react/react.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_src_react_ml = "src/react.ml",
    caml_equal = runtime.caml_equal,
    caml_int_compare = runtime.caml_int_compare,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    err_max_rank = "maximal rank exceeded",
    err_sig_undef = "signal value undefined yet",
    err_fix = "trying to fix a delayed value",
    err_retain_never = "E.never cannot retain a closure",
    err_retain_cst_sig = "constant signals cannot retain a closure",
    err_step_executed = "step already executed",
    err_event_scheduled = "event already scheduled on a step",
    err_signal_scheduled = "signal already scheduled on a step",
    one = [0, 1],
    zero = [0, 0],
    zero$0 = [0, 0],
    one$0 = [0, 1],
    minus_one = [0, -1],
    zero$1 = [0, 0.],
    one$1 = [0, 1.],
    minus_one$0 = [0, -1.],
    none = [0, 0],
    Assert_failure = global_data.Assert_failure,
    Stdlib = global_data.Stdlib,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Weak = global_data.Stdlib__Weak;
   function create(size){return [0, caml_call1(Stdlib_Weak[1], size), 0];}
   function clear(a){
    a[1] = caml_call1(Stdlib_Weak[1], 0);
    a[2] = 0;
    return 0;
   }
   function get(a, i){return caml_call2(Stdlib_Weak[4], a[1], i);}
   function swap(a, i$0, i){
    var v = caml_call2(Stdlib_Weak[4], a[1], i);
    caml_call5(Stdlib_Weak[8], a[1], i$0, a[1], i, 1);
    return caml_call3(Stdlib_Weak[3], a[1], i$0, v);
   }
   function add(a, v){
    var _cy_ = caml_call1(Stdlib_Weak[2], a[1]);
    if(a[2] === _cy_){
     var arr = caml_call1(Stdlib_Weak[1], 2 * (a[2] + 1 | 0) | 0);
     caml_call5(Stdlib_Weak[8], a[1], 0, arr, 0, a[2]);
     a[1] = arr;
    }
    caml_call3(Stdlib_Weak[3], a[1], a[2], [0, v]);
    a[2] = a[2] + 1 | 0;
    return 0;
   }
   function rem_last(a){
    var l = a[2] - 1 | 0;
    a[2] = l;
    return caml_call3(Stdlib_Weak[3], a[1], l, 0);
   }
   function fold(f, acc, a){
    var acc$0 = [0, acc], _cw_ = a[2] - 1 | 0, _cv_ = 0;
    if(_cw_ >= 0){
     var i = _cv_;
     for(;;){
      var match = caml_call2(Stdlib_Weak[4], a[1], i);
      if(match){var v = match[1]; acc$0[1] = caml_call2(f, acc$0[1], v);}
      var _cx_ = i + 1 | 0;
      if(_cw_ === i) break;
      i = _cx_;
     }
    }
    return acc$0[1];
   }
   function compare_down(h, i$0, i){
    var match = get(h, i$0), match$0 = get(h, i);
    if(! match) return match$0 ? -1 : 0;
    var n = match[1];
    if(! match$0) return 1;
    var n$0 = match$0[1];
    return caml_int_compare(n[1], n$0[1]);
   }
   function down(h, i){
    var i$0 = i;
    for(;;){
     var
      last = h[2] - 1 | 0,
      start = 2 * i$0 | 0,
      l = start + 1 | 0,
      r = start + 2 | 0;
     if(last < l) return 0;
     var
      child = last < r ? l : 0 <= compare_down(h, l, r) ? r : l,
      _cu_ = 0 < compare_down(h, i$0, child) ? 1 : 0;
     if(! _cu_) return _cu_;
     swap(h, i$0, child);
     i$0 = child;
    }
   }
   var delayed_rank = Stdlib[19], nil = [0, 1, create(0), 0, 0];
   function create$0(param){var h = create(11); return [0, 0, h, 0, 0];}
   function add$0(c, n$1){
    if(n$1[2] === c) return 0;
    n$1[2] = c;
    var h = c[2];
    add(h, n$1);
    var i$0 = h[2] - 1 | 0, i = i$0, last_none = 0;
    for(;;){
     if(0 === i) return last_none ? down(h, 0) : last_none;
     var p = (i - 1 | 0) / 2 | 0, match = get(h, i), match$0 = get(h, p);
     if(! match) return 0;
     var n = match[1];
     if(match$0){
      var n$0 = match$0[1];
      if(0 <= caml_int_compare(n[1], n$0[1]))
       return last_none ? down(h, i) : last_none;
      swap(h, i, p);
      i = p;
      last_none = 0;
     }
     else{swap(h, i, p); i = p; last_none = 1;}
    }
   }
   function add_deps(c, n){
    var a = n[6], _cs_ = a[2] - 1 | 0, _cr_ = 0;
    if(_cs_ >= 0){
     var i = _cr_;
     for(;;){
      var match = caml_call2(Stdlib_Weak[4], a[1], i);
      if(match){var v = match[1]; add$0(c, v);}
      var _ct_ = i + 1 | 0;
      if(_cs_ === i) break;
      i = _ct_;
     }
    }
    return 0;
   }
   function add_eop(c, op){c[3] = [0, op, c[3]]; return 0;}
   function allow_reschedule(n){n[2] = nil; return;}
   function rebuild(c){
    var h = c[2], _cp_ = (h[2] - 2 | 0) / 2 | 0;
    if(_cp_ >= 0){
     var i = _cp_;
     for(;;){down(h, i); var _cq_ = i - 1 | 0; if(0 === i) break; i = _cq_;}
    }
    return 0;
   }
   function execute(c$1){
    if(c$1[1]) return caml_call1(Stdlib[1], err_step_executed);
    var c = c$1;
    for(;;){
     var
      eops =
        function(c){
         caml_call2
          (Stdlib_List[17], function(op){return caml_call1(op, 0);}, c[3]);
         c[3] = 0;
         return;
        },
      cops =
        function(c){
         caml_call2
          (Stdlib_List[17], function(op){return caml_call1(op, 0);}, c[4]);
         c[4] = 0;
         return;
        },
      finish = function(c){c[1] = 1; c[2] = create(0); return 0;};
     for(;;){
      var a = c[2];
      a:
      {
       b:
       {
        for(;;){
         var s = a[2];
         if(0 === s) break b;
         var v = get(a, 0);
         if(1 < s){
          var _cn_ = get(a, s - 1 | 0);
          caml_call1(caml_call2(Stdlib_Weak[3], a[1], 0), _cn_);
          rem_last(a);
          down(a, 0);
         }
         else
          rem_last(a);
         if(v) break;
        }
        var match = v;
        break a;
       }
       var match = 0;
      }
      if(! match){eops(c); cops(c); return finish(c);}
      var n = match[1];
      if(n[1] === delayed_rank) break;
      caml_call1(n[5], c);
     }
     var c$0 = create$0(0);
     eops(c);
     var h = c[2];
     let c$1 = c$0;
     var _co_ = [0, n, fold(function(acc, e){return [0, e, acc];}, 0, h)];
     caml_call2
      (Stdlib_List[17], function(n){return caml_call1(n[5], c$1);}, _co_);
     cops(c);
     finish(c);
     c = c$0;
    }
   }
   function find_unfinished(nl){
    var next = 0, param = [0, nl, 0];
    for(;;)
     if(param){
      var nl$0 = param[1];
      if(nl$0){
       var todo = param[2], next$0 = next, param$0 = nl$0;
       for(;;){
        if(! param$0) break;
        var nl$1 = param$0[2], n = param$0[1];
        if(! n[2][1]) return n[2];
        var next$1 = [0, caml_call1(n[4], 0), next$0];
        next$0 = next$1;
        param$0 = nl$1;
       }
       next = next$0;
       param = todo;
      }
      else{var todo$0 = param[2]; param = todo$0;}
     }
     else{if(0 === next) return nil; param = next; next = 0;}
   }
   var min_rank = Stdlib[20], max_rank = delayed_rank - 1 | 0;
   function nop(param){return 0;}
   function no_producers(param){return 0;}
   function create$1(r){
    return [0, r, nil, nop, no_producers, nop, create(0)];
   }
   function rem_dep(n$0, n){
    var a = n$0[6];
    try{
     var _ck_ = a[2] - 1 | 0, _cj_ = 0;
     if(_ck_ >= 0){
      var i = _cj_;
      for(;;){
       var match = caml_call2(Stdlib_Weak[4], a[1], i);
       if(match){
        var v = match[1];
        if(n === v){
         caml_call3(Stdlib_Weak[3], a[1], i, 0);
         throw caml_maybe_attach_backtrace(Stdlib[3], 1);
        }
       }
       var _cl_ = i + 1 | 0;
       if(_ck_ === i) break;
       i = _cl_;
      }
     }
     return;
    }
    catch(_cm_){
     var _ci_ = caml_wrap_exception(_cm_);
     if(_ci_ === Stdlib[3]) return;
     throw caml_maybe_attach_backtrace(_ci_, 0);
    }
   }
   function add_dep(n$0, n){
    var a = n$0[6];
    try{
     var _ce_ = a[2] - 1 | 0, _cd_ = 0;
     if(_ce_ >= 0){
      var i = _cd_;
      for(;;){
       if(! caml_call2(Stdlib_Weak[4], a[1], i)){
        caml_call3(Stdlib_Weak[3], a[1], i, [0, n]);
        throw caml_maybe_attach_backtrace(Stdlib[3], 1);
       }
       var _cg_ = i + 1 | 0;
       if(_ce_ === i) break;
       i = _cg_;
      }
     }
     var _cf_ = add(a, n);
     return _cf_;
    }
    catch(_ch_){
     var _cc_ = caml_wrap_exception(_ch_);
     if(_cc_ === Stdlib[3]) return 0;
     throw caml_maybe_attach_backtrace(_cc_, 0);
    }
   }
   function deps(n){
    return fold(function(acc, d){return [0, d, acc];}, 0, n[6]);
   }
   function bind(n, p, u){n[4] = p; n[5] = u; return 0;}
   function stop(opt, to_rem){
    if(opt) var sth = opt[1], strong = sth; else var strong = 0;
    if(! strong){
     to_rem[4] = no_producers;
     to_rem[5] = nop;
     return clear(to_rem[6]);
    }
    var producers = caml_call1(to_rem[4], 0);
    to_rem[4] = no_producers;
    to_rem[5] = nop;
    clear(to_rem[6]);
    var next = 0, to_rem$0 = to_rem, param = producers;
    for(;;)
     if(param){
      var todo = param[2], n = param[1];
      rem_dep(n, to_rem$0);
      if(n[1] !== min_rank){
       var a = n[6];
       try{
        var _b9_ = a[2] - 1 | 0, _b8_ = 0;
        if(_b9_ >= 0){
         var i = _b8_;
         for(;;){
          if(caml_call2(Stdlib_Weak[6], a[1], i))
           throw caml_maybe_attach_backtrace(Stdlib[3], 1);
          var _b$_ = i + 1 | 0;
          if(_b9_ === i) break;
          i = _b$_;
         }
        }
        var _b__ = 1, _ca_ = _b__;
       }
       catch(_cb_){
        var _b7_ = caml_wrap_exception(_cb_);
        if(_b7_ !== Stdlib[3]) throw caml_maybe_attach_backtrace(_b7_, 0);
        var _ca_ = 0;
       }
       if(! (1 - _ca_)){
        var prods = caml_call1(n[4], 0);
        n[4] = no_producers;
        n[5] = nop;
        clear(n[6]);
        var next$0 = [0, [0, n, prods], next];
        next = next$0;
        param = todo;
        continue;
       }
      }
      param = todo;
     }
     else{
      if(! next) return 0;
      var
       next$1 = next[2],
       match = next[1],
       prods$0 = match[2],
       to_rem$1 = match[1];
      next = next$1;
      to_rem$0 = to_rem$1;
      param = prods$0;
     }
   }
   var
    rmin = create$1(min_rank),
    _a_ = [0, cst_src_react_ml, 410, 54],
    _b_ = [0, cst_src_react_ml, 421, 51];
   function rmax(n$0, n){return n[1] < n$0[1] ? n$0 : n;}
   function rsucc(n){
    return n[1] === delayed_rank
            ? min_rank
            : n
               [1]
              < max_rank
              ? n[1] + 1 | 0
              : caml_call1(Stdlib[1], err_max_rank);
   }
   function rsucc2(n$0, n){
    var r = rsucc(n$0), r$0 = rsucc(n);
    return r$0 < r ? r : r$0;
   }
   function update_rank(n, r){
    if(n[1] >= r) return 0;
    n[1] = r;
    var param = [0, n, 0];
    for(;;){
     if(! param) return 1;
     var todo = param[2], n$0 = param[1];
     let n = n$0;
     var
      update =
        function(todo, d){
         if(n[1] >= d[1] && n[1] !== delayed_rank){d[1] = rsucc(n); return [0, d, todo];}
         return todo;
        };
     param = fold(update, todo, n$0[6]);
    }
   }
   function eval$0(m){
    var match = m[1][1];
    if(! match)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
    var v = match[1];
    return v;
   }
   function emut(rank){return [0, [0, 0], create$1(rank)];}
   function event(m, p, u){bind(m[2], p, u); return [0, m];}
   function eupdate(v, m, c){
    m[1][1] = [0, v];
    var v$0 = m[1];
    function op(_b6_){v$0[1] = 0; return 0;}
    c[4] = [0, op, c[4]];
    return add_deps(c, m[2]);
   }
   function sval(m){
    var match = m[1];
    if(! match)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
    var v = match[1];
    return v;
   }
   function smut(rank, eq){return [0, 0, eq, create$1(rank)];}
   function signal(i, m, p, u){
    bind(m[3], p, u);
    if(i) m[1] = i;
    var c = find_unfinished(caml_call1(m[3][4], 0));
    if(c === nil) caml_call1(m[3][5], nil); else add$0(c, m[3]);
    return [1, m];
   }
   function supdate(v, m, c){
    var match = m[1];
    if(! match){m[1] = [0, v]; return 0;}
    var v$0 = match[1];
    if(caml_call2(m[2], v, v$0)) return 0;
    m[1] = [0, v];
    var _b5_ = c !== nil ? 1 : 0;
    return _b5_ ? add_deps(c, m[3]) : _b5_;
   }
   function add_dep$0(m, n){
    add_dep(m[2], n);
    var _b4_ = 0 !== m[1][1] ? 1 : 0;
    return _b4_ ? add$0(m[2][2], n) : _b4_;
   }
   var
    _c_ = [0, 1],
    _d_ = [0, cst_src_react_ml, 701, 19],
    _e_ = [0, cst_src_react_ml, 731, 53],
    _f_ = [0, cst_src_react_ml, 760, 45];
   function create$2(param){
    var m = emut(min_rank);
    return [0,
            [0, m],
            function(step, v){
             if(! step){
              var c$0 = create$0(0);
              m[2][2] = c$0;
              eupdate(v, m, c$0);
              return execute(c$0);
             }
             var c = step[1];
             if(c[1])
              caml_call1(Stdlib[1], err_step_executed);
             else if(m[2][2][1])
              m[2][2] = c;
             else
              caml_call1(Stdlib[1], err_event_scheduled);
             return eupdate(v, m, c);
            }];
   }
   function retain(e, c){
    if(! e) return caml_call1(Stdlib[1], err_retain_never);
    var m = e[1], c$0 = m[2][3];
    m[2][3] = c;
    return [0, 82, c$0];
   }
   function stop$0(strong, param){
    if(! param) return 0;
    var m = param[1];
    return stop(strong, m[2]);
   }
   function equal(e$0, e){
    if(e$0){
     if(e){var m = e[1], m$0 = e$0[1]; return m$0 === m ? 1 : 0;}
    }
    else if(! e) return 1;
    return 0;
   }
   function trace(opt, t, e){
    if(opt) var sth = opt[1], iff = sth; else var iff = _c_;
    if(0 === iff[0]){
     if(! iff[1]) return e;
     if(! e) return e;
     var
      m = e[1],
      m$0 = emut(rsucc(m[2])),
      p = function(param){return [0, m[2], 0];},
      u =
        function(c){
         var v = eval$0(m);
         caml_call1(t, v);
         return eupdate(v, m$0, c);
        };
     add_dep$0(m, m$0[2]);
     return event(m$0, p, u);
    }
    var mc = iff[1];
    if(! e) return 0;
    var m$1 = e[1], m$2 = emut(rsucc2(mc[3], m$1[2]));
    function p$0(param){return [0, mc[3], [0, m$1[2], 0]];}
    function u$0(c){
     var match = m$1[1][1];
     if(! match) return 0;
     var v = match[1];
     if(sval(mc)) caml_call1(t, v);
     return eupdate(v, m$2, c);
    }
    add_dep(mc[3], m$2[2]);
    add_dep$0(m$1, m$2[2]);
    return event(m$2, p$0, u$0);
   }
   function once(param){
    if(! param) return 0;
    var m = param[1], m$0 = emut(rsucc(m[2]));
    function p(param){return [0, m[2], 0];}
    function u(c){
     rem_dep(m[2], m$0[2]);
     eupdate(eval$0(m), m$0, c);
     return stop(0, m$0[2]);
    }
    add_dep$0(m, m$0[2]);
    return event(m$0, p, u);
   }
   function drop_once(param){
    if(! param) return 0;
    var m = param[1], m$0 = emut(rsucc(m[2]));
    function p(param){return [0, m[2], 0];}
    function u(c){
     function u(c){return eupdate(eval$0(m), m$0, c);}
     return bind(m$0[2], p, u);
    }
    add_dep$0(m, m$0[2]);
    return event(m$0, p, u);
   }
   function app(ef, param){
    if(! param) return 0;
    var m = param[1];
    if(! ef) return 0;
    var mf = ef[1], m$0 = emut(rsucc2(m[2], mf[2]));
    function p(param){return [0, m[2], [0, mf[2], 0]];}
    function u(c){
     var _b3_ = mf[1][1], match = m[1][1];
     if(_b3_ && match){
      var v = match[1], f = _b3_[1];
      return eupdate(caml_call1(f, v), m$0, c);
     }
     return 0;
    }
    add_dep$0(m, m$0[2]);
    add_dep$0(mf, m$0[2]);
    return event(m$0, p, u);
   }
   function map(f, param){
    if(! param) return 0;
    var m = param[1], m$0 = emut(rsucc(m[2]));
    function p(param){return [0, m[2], 0];}
    function u(c){return eupdate(caml_call1(f, eval$0(m)), m$0, c);}
    add_dep$0(m, m$0[2]);
    return event(m$0, p, u);
   }
   function stamp(e, v){
    if(! e) return 0;
    var m = e[1], m$0 = emut(rsucc(m[2]));
    function p(param){return [0, m[2], 0];}
    function u(c){return eupdate(v, m$0, c);}
    add_dep$0(m, m$0[2]);
    return event(m$0, p, u);
   }
   function filter(pred, param){
    if(! param) return 0;
    var m = param[1], m$0 = emut(rsucc(m[2]));
    function p(param){return [0, m[2], 0];}
    function u(c){
     var v = eval$0(m);
     return caml_call1(pred, v) ? eupdate(v, m$0, c) : 0;
    }
    add_dep$0(m, m$0[2]);
    return event(m$0, p, u);
   }
   function fmap(fm, param){
    if(! param) return 0;
    var m = param[1], m$0 = emut(rsucc(m[2]));
    function p(param){return [0, m[2], 0];}
    function u(c){
     var match = caml_call1(fm, eval$0(m));
     if(! match) return 0;
     var v = match[1];
     return eupdate(v, m$0, c);
    }
    add_dep$0(m, m$0[2]);
    return event(m$0, p, u);
   }
   function diff(d, param){
    if(! param) return 0;
    var m = param[1], m$0 = emut(rsucc(m[2])), last = [0, 0];
    function p(param){return [0, m[2], 0];}
    function u(c){
     var v = eval$0(m), match = last[1];
     if(match){
      var v$0 = match[1];
      last[1] = [0, v];
      return eupdate(caml_call2(d, v, v$0), m$0, c);
     }
     last[1] = [0, v];
     return 0;
    }
    add_dep$0(m, m$0[2]);
    return event(m$0, p, u);
   }
   function changes(opt, param){
    if(opt) var sth = opt[1], eq = sth; else var eq = caml_equal;
    if(! param) return 0;
    var m = param[1], m$0 = emut(rsucc(m[2])), last = [0, 0];
    function p(param){return [0, m[2], 0];}
    function u(c){
     var v = eval$0(m), match = last[1];
     if(match){
      var v$0 = match[1];
      last[1] = [0, v];
      return caml_call2(eq, v, v$0) ? 0 : eupdate(v, m$0, c);
     }
     last[1] = [0, v];
     return eupdate(v, m$0, c);
    }
    add_dep$0(m, m$0[2]);
    return event(m$0, p, u);
   }
   function on(c, e){
    if(! e) return 0;
    var m = e[1];
    if(0 === c[0]) return c[1] ? e : 0;
    var mc = c[1], m$0 = emut(rsucc2(m[2], mc[3]));
    function p(param){return [0, m[2], [0, mc[3], 0]];}
    function u(c){
     return m[1][1] ? sval(mc) ? eupdate(eval$0(m), m$0, c) : 0 : 0;
    }
    add_dep$0(m, m$0[2]);
    add_dep(mc[3], m$0[2]);
    return event(m$0, p, u);
   }
   function dismiss(c, e){
    if(! e) return 0;
    var m = e[1];
    if(! c) return e;
    var mc = c[1], m$0 = emut(rsucc2(mc[2], m[2]));
    function p(param){return [0, mc[2], [0, m[2], 0]];}
    function u(c){return mc[1][1] ? 0 : eupdate(eval$0(m), m$0, c);}
    add_dep$0(mc, m$0[2]);
    add_dep$0(m, m$0[2]);
    return event(m$0, p, u);
   }
   function until(c, e){
    if(! e) return 0;
    var m = e[1];
    if(! c) return e;
    var mc = c[1], m$0 = emut(rsucc2(m[2], mc[2]));
    function p(param){return [0, m[2], [0, mc[2], 0]];}
    function u(c){
     return mc[1][1]
             ? (rem_dep
                (m[2], m$0[2]),
               rem_dep(mc[2], m$0[2]),
               stop(0, m$0[2]))
             : eupdate(eval$0(m), m$0, c);
    }
    add_dep$0(m, m$0[2]);
    add_dep$0(mc, m$0[2]);
    return event(m$0, p, u);
   }
   function accum(ef, i){
    if(! ef) return 0;
    var m = ef[1], m$0 = emut(rsucc(m[2])), acc = [0, i];
    function p(param){return [0, m[2], 0];}
    function u(c){
     var _b2_ = acc[1];
     acc[1] = caml_call1(eval$0(m), _b2_);
     return eupdate(acc[1], m$0, c);
    }
    add_dep$0(m, m$0[2]);
    return event(m$0, p, u);
   }
   function fold$0(f, i, param){
    if(! param) return 0;
    var m = param[1], m$0 = emut(rsucc(m[2])), acc = [0, i];
    function p(param){return [0, m[2], 0];}
    function u(c){
     var _b1_ = eval$0(m);
     acc[1] = caml_call2(f, acc[1], _b1_);
     return eupdate(acc[1], m$0, c);
    }
    add_dep$0(m, m$0[2]);
    return event(m$0, p, u);
   }
   function occurs(m){return 0 !== m[1][1] ? 1 : 0;}
   function find_muts_and_next_rank(el){
    var acc = 0, max = rmin, param = el;
    for(;;){
     if(! param){
      var _b0_ = rsucc(max);
      return [0, caml_call1(Stdlib_List[9], acc), _b0_];
     }
     var match = param[1];
     if(match){
      var
       l = param[2],
       m = match[1],
       max$0 = rmax(max, m[2]),
       acc$0 = [0, m, acc];
      acc = acc$0;
      max = max$0;
      param = l;
     }
     else{var l$0 = param[2]; param = l$0;}
    }
   }
   function select(el){
    var
     match = find_muts_and_next_rank(el),
     r = match[2],
     emuts = match[1],
     m = emut(r);
    function p(param){
     return caml_call2(Stdlib_List[21], function(m){return m[2];}, emuts);
    }
    function u(c){
     try{
      var
       _bY_ =
         eupdate(eval$0(caml_call2(Stdlib_List[38], occurs, emuts)), m, c);
      return _bY_;
     }
     catch(_bZ_){
      var _bX_ = caml_wrap_exception(_bZ_);
      if(_bX_ === Stdlib[8])
       throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
      throw caml_maybe_attach_backtrace(_bX_, 0);
     }
    }
    caml_call2
     (Stdlib_List[17], function(m$0){return add_dep$0(m$0, m[2]);}, emuts);
    return event(m, p, u);
   }
   function merge(f, acc, el){
    var
     match = find_muts_and_next_rank(el),
     r = match[2],
     emuts = match[1],
     m = emut(r);
    function p(param){
     return caml_call2(Stdlib_List[21], function(m){return m[2];}, emuts);
    }
    function u(c){
     var acc$0 = acc, param = emuts;
     for(;;){
      if(! param) return eupdate(acc$0, m, c);
      var m$0 = param[1], l = param[2];
      if(occurs(m$0)){
       var acc$1 = caml_call2(f, acc$0, eval$0(m$0));
       acc$0 = acc$1;
       param = l;
      }
      else{var l$0 = param[2]; param = l$0;}
     }
    }
    caml_call2
     (Stdlib_List[17], function(m$0){return add_dep$0(m$0, m[2]);}, emuts);
    return event(m, p, u);
   }
   function switch$0(e, param){
    if(! param) return e;
    var ms = param[1];
    if(e) var m = e[1], r = rsucc2(m[2], ms[2]); else var r = rsucc(ms[2]);
    var m$0 = emut(r), src = [0, e];
    function p(param){
     var match = src[1];
     if(! match) return [0, ms[2], 0];
     var m = match[1];
     return [0, m[2], [0, ms[2], 0]];
    }
    function u(c){
     var match = ms[1][1];
     if(! match){
      var match$2 = src[1];
      if(! match$2)
       throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
      var m$2 = match$2[1];
      return eupdate(eval$0(m$2), m$0, c);
     }
     var e = match[1], match$0 = src[1];
     if(match$0){var m = match$0[1]; rem_dep(m[2], m$0[2]);}
     src[1] = e;
     if(! e){var _bW_ = rsucc(ms[2]); update_rank(m$0[2], _bW_); return 0;}
     var m$1 = e[1];
     add_dep(m$1[2], m$0[2]);
     var _bV_ = rsucc2(m$1[2], ms[2]);
     if(update_rank(m$0[2], _bV_)){
      allow_reschedule(m$0[2]);
      return rebuild(c);
     }
     var match$1 = m$1[1][1];
     if(! match$1) return 0;
     var v = match$1[1];
     return eupdate(v, m$0, c);
    }
    if(e){var m$1 = e[1]; add_dep$0(m$1, m$0[2]);}
    add_dep$0(ms, m$0[2]);
    return event(m$0, p, u);
   }
   function fix(f){
    var
     m = emut(delayed_rank),
     e =
       event
        (m,
         function(param){return 0;},
         function(param){
          throw caml_maybe_attach_backtrace([0, Assert_failure, _f_], 1);
         }),
     _bS_ = caml_call1(f, e),
     match = _bS_[1];
    if(! match){var r$0 = _bS_[2]; return r$0;}
    var r = _bS_[2], m$0 = match[1];
    if(m$0[2][1] === delayed_rank) caml_call1(Stdlib[1], err_fix);
    function p(param){return 0;}
    function u(c){
     var _bT_ = [0, eval$0(m$0)];
     m[1][1] = _bT_;
     var v = m[1];
     add_eop(c, function(_bU_){v[1] = 0; return 0;});
     return add_deps(c, m[2]);
    }
    bind(m[2], p, u);
    add_dep$0(m$0, m[2]);
    return r;
   }
   function l2(f, e0, e1){
    if(! e0) return 0;
    if(! e1) return 0;
    var m1 = e1[1], m0 = e0[1], r = rsucc2(m0[2], m1[2]), m = emut(r);
    function p(param){return [0, m0[2], [0, m1[2], 0]];}
    function u(c){
     var _bR_ = m0[1][1], match = m1[1][1];
     if(_bR_ && match){
      var v1 = match[1], v0 = _bR_[1];
      return eupdate(caml_call2(f, v0, v1), m, c);
     }
     return 0;
    }
    add_dep$0(m0, m[2]);
    add_dep$0(m1, m[2]);
    return event(m, p, u);
   }
   function l3(f, e0, e1, e2){
    if(! e0) return 0;
    if(! e1) return 0;
    if(! e2) return 0;
    var
     m2 = e2[1],
     m1 = e1[1],
     m0 = e0[1],
     _bO_ = m2[2],
     r = rsucc(rmax(rmax(m0[2], m1[2]), _bO_)),
     m = emut(r);
    function p(param){return [0, m0[2], [0, m1[2], [0, m2[2], 0]]];}
    function u(c){
     var _bP_ = m0[1][1], _bQ_ = m1[1][1], match = m2[1][1];
     if(_bP_ && _bQ_ && match){
      var v2 = match[1], v1 = _bQ_[1], v0 = _bP_[1];
      return eupdate(caml_call3(f, v0, v1, v2), m, c);
     }
     return 0;
    }
    add_dep$0(m0, m[2]);
    add_dep$0(m1, m[2]);
    add_dep$0(m2, m[2]);
    return event(m, p, u);
   }
   function l4(f, e0, e1, e2, e3){
    if(! e0) return 0;
    if(! e1) return 0;
    if(! e2) return 0;
    if(! e3) return 0;
    var
     m3 = e3[1],
     m2 = e2[1],
     m1 = e1[1],
     m0 = e0[1],
     _bK_ = rmax(m2[2], m3[2]),
     r = rsucc(rmax(rmax(m0[2], m1[2]), _bK_)),
     m = emut(r);
    function p(param){
     return [0, m0[2], [0, m1[2], [0, m2[2], [0, m3[2], 0]]]];
    }
    function u(c){
     var _bL_ = m0[1][1], _bM_ = m1[1][1], _bN_ = m2[1][1], match = m3[1][1];
     if(_bL_ && _bM_ && _bN_ && match){
      var v3 = match[1], v2 = _bN_[1], v1 = _bM_[1], v0 = _bL_[1];
      return eupdate(caml_call4(f, v0, v1, v2, v3), m, c);
     }
     return 0;
    }
    add_dep$0(m0, m[2]);
    add_dep$0(m1, m[2]);
    add_dep$0(m2, m[2]);
    add_dep$0(m3, m[2]);
    return event(m, p, u);
   }
   function l5(f, e0, e1, e2, e3, e4){
    if(! e0) return 0;
    if(! e1) return 0;
    if(! e2) return 0;
    if(! e3) return 0;
    if(! e4) return 0;
    var
     m4 = e4[1],
     m3 = e3[1],
     m2 = e2[1],
     m1 = e1[1],
     m0 = e0[1],
     _bE_ = m4[2],
     _bF_ = rmax(m2[2], m3[2]),
     r = rsucc(rmax(rmax(rmax(m0[2], m1[2]), _bF_), _bE_)),
     m = emut(r);
    function p(param){
     return [0, m0[2], [0, m1[2], [0, m2[2], [0, m3[2], [0, m4[2], 0]]]]];
    }
    function u(c){
     var
      _bG_ = m0[1][1],
      _bH_ = m1[1][1],
      _bI_ = m2[1][1],
      _bJ_ = m3[1][1],
      match = m4[1][1];
     if(_bG_ && _bH_ && _bI_ && _bJ_ && match){
      var
       v4 = match[1],
       v3 = _bJ_[1],
       v2 = _bI_[1],
       v1 = _bH_[1],
       v0 = _bG_[1];
      return eupdate(caml_call5(f, v0, v1, v2, v3, v4), m, c);
     }
     return 0;
    }
    add_dep$0(m0, m[2]);
    add_dep$0(m1, m[2]);
    add_dep$0(m2, m[2]);
    add_dep$0(m3, m[2]);
    add_dep$0(m4, m[2]);
    return event(m, p, u);
   }
   function l6(f, e0, e1, e2, e3, e4, e5){
    if(! e0) return 0;
    if(! e1) return 0;
    if(! e2) return 0;
    if(! e3) return 0;
    if(! e4) return 0;
    if(! e5) return 0;
    var
     m5 = e5[1],
     m4 = e4[1],
     m3 = e3[1],
     m2 = e2[1],
     m1 = e1[1],
     m0 = e0[1],
     _bx_ = rmax(m4[2], m5[2]),
     _by_ = rmax(m2[2], m3[2]),
     r = rsucc(rmax(rmax(rmax(m0[2], m1[2]), _by_), _bx_)),
     m = emut(r);
    function p(param){
     return [0,
             m0[2],
             [0, m1[2], [0, m2[2], [0, m3[2], [0, m4[2], [0, m5[2], 0]]]]]];
    }
    function u(c){
     var
      _bz_ = m0[1][1],
      _bA_ = m1[1][1],
      _bB_ = m2[1][1],
      _bC_ = m3[1][1],
      _bD_ = m4[1][1],
      match = m5[1][1];
     if(_bz_ && _bA_ && _bB_ && _bC_ && _bD_ && match){
      var
       v5 = match[1],
       v4 = _bD_[1],
       v3 = _bC_[1],
       v2 = _bB_[1],
       v1 = _bA_[1],
       v0 = _bz_[1];
      return eupdate(caml_call6(f, v0, v1, v2, v3, v4, v5), m, c);
     }
     return 0;
    }
    add_dep$0(m0, m[2]);
    add_dep$0(m1, m[2]);
    add_dep$0(m2, m[2]);
    add_dep$0(m3, m[2]);
    add_dep$0(m4, m[2]);
    add_dep$0(m5, m[2]);
    return event(m, p, u);
   }
   function some(e){return map(function(v){return [0, v];}, e);}
   function value(default$0, e){
    if(! default$0) return fmap(function(v){return v;}, e);
    var match = default$0[1];
    if(0 === match[0]){
     var dv = match[1];
     return map
             (function(param){
               if(! param) return dv;
               var v = param[1];
               return v;
              },
              e);
    }
    var ms = match[1];
    if(! e) return 0;
    var m = e[1], m$0 = emut(rsucc2(m[2], ms[3]));
    function p(param){return [0, m[2], [0, ms[3], 0]];}
    function u(c){
     var _bw_ = m[1][1];
     if(! _bw_) return 0;
     var match = _bw_[1];
     if(! match) return eupdate(sval(ms), m$0, c);
     var v = match[1];
     return eupdate(v, m$0, c);
    }
    add_dep$0(m, m$0[2]);
    add_dep(ms[3], m$0[2]);
    return event(m$0, p, u);
   }
   var
    Option = [0, some, value],
    _g_ = [0, cst_src_react_ml, 994, 36],
    _h_ = [0, cst_src_react_ml, 1112, 18];
   function end_of_step_add_dep(opt, stop_if_stopped, m$0, m){
    if(opt)
     var sth = opt[1], post_add_op = sth;
    else
     var post_add_op = function(param){return 0;};
    var c = find_unfinished(caml_call1(m$0[3][4], 0));
    if(c === nil){add_dep(m$0[3], m[2]); return caml_call1(post_add_op, 0);}
    function add_dep$0(param){
     if(m$0[3][5] === nop)
      return stop_if_stopped ? stop(0, m[2]) : stop_if_stopped;
     var _bv_ = rsucc(m$0[3]);
     update_rank(m[2], _bv_);
     add_dep(m$0[3], m[2]);
     return caml_call1(post_add_op, 0);
    }
    return add_eop(c, add_dep$0);
   }
   function const$0(v){return [0, v];}
   function create$3(opt, v){
    if(opt) var sth = opt[1], eq = sth; else var eq = caml_equal;
    var m = smut(min_rank, eq);
    m[1] = [0, v];
    return [0,
            [1, m],
            function(step, v){
             var _bu_ = sval(m);
             if(caml_call2(m[2], _bu_, v)) return 0;
             if(! step){
              var c$0 = create$0(0);
              m[3][2] = c$0;
              m[1] = [0, v];
              add_deps(c$0, m[3]);
              return execute(c$0);
             }
             var c = step[1];
             if(c[1])
              caml_call1(Stdlib[1], err_step_executed);
             else if(m[3][2][1])
              m[3][2] = c;
             else
              caml_call1(Stdlib[1], err_signal_scheduled);
             m[1] = [0, v];
             return add_deps(c, m[3]);
            }];
   }
   function retain$0(s, c){
    if(0 === s[0]) return caml_call1(Stdlib[1], err_retain_cst_sig);
    var m = s[1], c$0 = m[3][3];
    m[3][3] = c;
    return [0, 82, c$0];
   }
   function eq_fun(param){
    if(0 === param[0]) return 0;
    var m = param[1];
    return [0, m[2]];
   }
   function value$0(param){
    if(0 === param[0])
     var v = param[1];
    else{
     var _bt_ = param[1][1];
     if(! _bt_) return caml_call1(Stdlib[2], err_sig_undef);
     var v = _bt_[1];
    }
    return v;
   }
   function stop$1(strong, param){
    if(0 === param[0]) return 0;
    var m = param[1];
    if(m[1]) return stop(strong, m[3]);
    var c = find_unfinished(caml_call1(m[3][4], 0));
    if(c === nil)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _g_], 1);
    function stop$0(param){return stop(strong, m[3]);}
    return add_eop(c, stop$0);
   }
   function equal$0(opt, s$0, s){
    if(opt) var sth = opt[1], eq = sth; else var eq = caml_equal;
    if(0 === s$0[0]){
     var v = s$0[1];
     if(0 === s[0]){var v$0 = s[1]; return caml_call2(eq, v, v$0);}
    }
    else{
     var m = s$0[1];
     if(0 !== s[0]){var m$0 = s[1]; return m === m$0 ? 1 : 0;}
    }
    return 0;
   }
   function trace$0(opt, t, s){
    if(opt) var sth = opt[1], iff = sth; else var iff = [0, 1];
    if(0 === iff[0]){
     if(! iff[1]) return s;
     if(0 === s[0]){var v = s[1]; caml_call1(t, v); return s;}
     var
      m = s[1],
      _br_ = m[2],
      m$0 = smut(rsucc(m[3]), _br_),
      p = function(param){return [0, m[3], 0];},
      u =
        function(c){
         var v = sval(m);
         caml_call1(t, v);
         return supdate(v, m$0, c);
        };
     add_dep(m[3], m$0[3]);
     return signal(0, m$0, p, u);
    }
    var mc = iff[1];
    if(0 === s[0]){
     var
      v$0 = s[1],
      m$1 = smut(rsucc(mc[3]), caml_equal),
      p$0 = function(param){return [0, mc[3], 0];},
      u$0 =
        function(c){
         if(sval(mc)) caml_call1(t, v$0);
         rem_dep(mc[3], m$1[3]);
         return stop(0, m$1[3]);
        };
     add_dep(mc[3], m$1[3]);
     return signal([0, v$0], m$1, p$0, u$0);
    }
    var m$2 = s[1], _bs_ = m$2[2], m$3 = smut(rsucc2(mc[3], m$2[3]), _bs_);
    function p$1(param){return [0, mc[3], [0, m$2[3], 0]];}
    function u$1(c){
     var v = sval(m$2), match = m$3[1];
     if(match){var v$0 = match[1]; if(caml_call2(m$3[2], v, v$0)) return 0;}
     if(sval(mc)) caml_call1(t, v);
     return supdate(v, m$3, c);
    }
    add_dep(mc[3], m$3[3]);
    add_dep(m$2[3], m$3[3]);
    return signal(0, m$3, p$1, u$1);
   }
   function hold(opt, i, param){
    if(opt) var sth = opt[1], eq = sth; else var eq = caml_equal;
    if(! param) return [0, i];
    var m = param[1], m$0 = smut(rsucc(m[2]), eq);
    function p(param){return [0, m[2], 0];}
    function u(c){
     var match = m[1][1];
     if(! match) return 0;
     var v = match[1];
     return supdate(v, m$0, c);
    }
    add_dep$0(m, m$0[3]);
    return signal([0, i], m$0, p, u);
   }
   function map$0(opt, f, param){
    if(opt) var sth = opt[1], eq = sth; else var eq = caml_equal;
    if(0 === param[0]){var v = param[1]; return [0, caml_call1(f, v)];}
    var m = param[1], m$0 = smut(rsucc(m[3]), eq);
    function p(param){return [0, m[3], 0];}
    function u(c){return supdate(caml_call1(f, sval(m)), m$0, c);}
    add_dep(m[3], m$0[3]);
    return signal(0, m$0, p, u);
   }
   function app$0(opt, sf, sv){
    if(opt) var sth = opt[1], eq = sth; else var eq = caml_equal;
    if(0 === sf[0]){
     var f = sf[1];
     if(0 !== sv[0]) return map$0([0, eq], f, sv);
     var v = sv[1];
     return [0, caml_call1(f, v)];
    }
    var mf = sf[1];
    if(0 === sv[0]){
     var
      v$0 = sv[1],
      m = smut(rsucc(mf[3]), eq),
      p = function(param){return [0, mf[3], 0];},
      u = function(c){return supdate(caml_call1(sval(mf), v$0), m, c);};
     add_dep(mf[3], m[3]);
     return signal(0, m, p, u);
    }
    var mv = sv[1], m$0 = smut(rsucc2(mf[3], mv[3]), eq);
    function p$0(param){return [0, mf[3], [0, mv[3], 0]];}
    function u$0(c){
     var _bq_ = sval(mv);
     return supdate(caml_call1(sval(mf), _bq_), m$0, c);
    }
    add_dep(mf[3], m$0[3]);
    add_dep(mv[3], m$0[3]);
    return signal(0, m$0, p$0, u$0);
   }
   function filter$0(opt, pred, i, s){
    if(opt) var sth = opt[1], eq = sth; else var eq = caml_equal;
    if(0 === s[0]){var v = s[1]; return caml_call1(pred, v) ? s : [0, i];}
    var m = s[1], m$0 = smut(rsucc(m[3]), eq);
    function p(param){return [0, m[3], 0];}
    function u(c){
     var v = sval(m);
     return caml_call1(pred, v) ? supdate(v, m$0, c) : 0;
    }
    add_dep(m[3], m$0[3]);
    return signal([0, i], m$0, p, u);
   }
   function fmap$0(opt, fm, i, param){
    if(opt) var sth = opt[1], eq = sth; else var eq = caml_equal;
    if(0 !== param[0]){
     var
      m = param[1],
      m$0 = smut(rsucc(m[3]), eq),
      p = function(param){return [0, m[3], 0];},
      u =
        function(c){
         var match = caml_call1(fm, sval(m));
         if(! match) return 0;
         var v = match[1];
         return supdate(v, m$0, c);
        };
     add_dep(m[3], m$0[3]);
     return signal([0, i], m$0, p, u);
    }
    var v = param[1], match = caml_call1(fm, v);
    if(! match) return [0, i];
    var v$0 = match[1];
    return [0, v$0];
   }
   function diff$0(d, param){
    if(0 === param[0]) return 0;
    var m = param[1], m$0 = emut(rsucc(m[3])), last = [0, 0];
    function p(param){return [0, m[3], 0];}
    function u(c){
     var v = sval(m), match = last[1];
     if(! match)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _h_], 1);
     var v$0 = match[1];
     last[1] = [0, v];
     return eupdate(caml_call2(d, v, v$0), m$0, c);
    }
    function post_add_op(param){last[1] = [0, sval(m)]; return 0;}
    end_of_step_add_dep([0, post_add_op], 1, m, m$0);
    return event(m$0, p, u);
   }
   function changes$0(param){
    if(0 === param[0]) return 0;
    var m = param[1], m$0 = emut(rsucc(m[3]));
    function p(param){return [0, m[3], 0];}
    function u(c){return eupdate(sval(m), m$0, c);}
    end_of_step_add_dep(0, 1, m, m$0);
    return event(m$0, p, u);
   }
   function sample(f, e, param){
    if(0 === param[0]){
     var v = param[1];
     return map(function(ev){return caml_call2(f, ev, v);}, e);
    }
    var ms = param[1];
    if(! e) return 0;
    var me = e[1], m = emut(rsucc2(me[2], ms[3]));
    function p(param){return [0, me[2], [0, ms[3], 0]];}
    function u(c){
     var match = me[1][1];
     if(! match) return 0;
     var v = match[1];
     return eupdate(caml_call2(f, v, sval(ms)), m, c);
    }
    add_dep$0(me, m[2]);
    add_dep(ms[3], m[2]);
    return event(m, p, u);
   }
   function on$0(opt, c, i, s){
    if(opt) var sth = opt[1], eq = sth; else var eq = caml_equal;
    if(0 === c[0]) return c[1] ? s : [0, i];
    var mc = c[1];
    if(0 === s[0]){
     var
      v = s[1],
      m = smut(rsucc(mc[3]), eq),
      p = function(param){return [0, mc[3], 0];},
      u = function(c){return sval(mc) ? supdate(v, m, c) : 0;};
     add_dep(mc[3], m[3]);
     return signal([0, i], m, p, u);
    }
    var ms = s[1], m$0 = smut(rsucc2(mc[3], ms[3]), eq);
    function p$0(param){return [0, mc[3], [0, ms[3], 0]];}
    function u$0(c){return sval(mc) ? supdate(sval(ms), m$0, c) : 0;}
    add_dep(mc[3], m$0[3]);
    add_dep(ms[3], m$0[3]);
    return signal([0, i], m$0, p$0, u$0);
   }
   function dismiss$0(opt, c, i, s){
    if(opt) var sth = opt[1], eq = sth; else var eq = caml_equal;
    if(! c) return s;
    var mc = c[1];
    if(0 === s[0]){
     var
      v = s[1],
      m = smut(rsucc(mc[2]), eq),
      p = function(param){return [0, mc[2], 0];},
      u = function(c){return mc[1][1] ? 0 : supdate(v, m, c);};
     add_dep(mc[2], m[3]);
     return signal([0, i], m, p, u);
    }
    var ms = s[1], m$0 = smut(rsucc2(mc[2], ms[3]), eq);
    function p$0(param){return [0, mc[2], [0, ms[3], 0]];}
    function u$0(c){return mc[1][1] ? 0 : supdate(sval(ms), m$0, c);}
    add_dep(mc[2], m$0[3]);
    add_dep(ms[3], m$0[3]);
    return signal([0, i], m$0, p$0, u$0);
   }
   function accum$0(opt, ef, i){
    if(opt) var sth = opt[1], eq = sth; else var eq = caml_equal;
    if(! ef) return [0, i];
    var m = ef[1], m$0 = smut(rsucc(m[2]), eq);
    function p(param){return [0, m[2], 0];}
    function u(c){
     var match = m[1][1];
     if(! match) return 0;
     var v = match[1];
     return supdate(caml_call1(v, sval(m$0)), m$0, c);
    }
    add_dep$0(m, m$0[3]);
    return signal([0, i], m$0, p, u);
   }
   function fold$1(opt, f, i, param){
    if(opt) var sth = opt[1], eq = sth; else var eq = caml_equal;
    if(! param) return [0, i];
    var m = param[1], m$0 = smut(rsucc(m[2]), eq);
    function p(param){return [0, m[2], 0];}
    function u(c){
     var match = m[1][1];
     if(! match) return 0;
     var v = match[1];
     return supdate(caml_call2(f, sval(m$0), v), m$0, c);
    }
    add_dep$0(m, m$0[3]);
    return signal([0, i], m$0, p, u);
   }
   function merge$0(opt, f, a, sl){
    if(opt) var sth = opt[1], eq = sth; else var eq = caml_equal;
    function rmax$0(acc, param){
     if(0 === param[0]) return acc;
     var m = param[1];
     return rmax(acc, m[3]);
    }
    function nodes(acc, param){
     if(0 === param[0]) return acc;
     var m = param[1];
     return [0, m[3], acc];
    }
    var m = smut(rsucc(caml_call3(Stdlib_List[25], rmax$0, rmin, sl)), eq);
    function p(param){return caml_call3(Stdlib_List[25], nodes, 0, sl);}
    function u(c){
     return supdate
             (caml_call3
               (Stdlib_List[25],
                function(a, param){
                 if(0 === param[0]){
                  var v = param[1];
                  return caml_call2(f, a, v);
                 }
                 var m = param[1];
                 return caml_call2(f, a, sval(m));
                },
                a,
                sl),
              m,
              c);
    }
    function dep(param){
     if(0 === param[0]) return 0;
     var m$0 = param[1];
     return add_dep(m$0[3], m[3]);
    }
    caml_call2(Stdlib_List[17], dep, sl);
    return signal(0, m, p, u);
   }
   function switch$1(opt, param){
    if(opt) var sth = opt[1], eq = sth; else var eq = caml_equal;
    if(0 === param[0]){var s = param[1]; return s;}
    var
     mss = param[1],
     dummy = smut(min_rank, eq),
     src = [0, [1, dummy]],
     m = smut(rsucc(mss[3]), eq);
    function p(param){
     var match = src[1];
     if(0 === match[0]) return [0, mss[3], 0];
     var m = match[1];
     return [0, mss[3], [0, m[3], 0]];
    }
    function u(c){
     var _bm_ = src[1];
     if(sval(mss) === _bm_){
      var match = src[1];
      if(0 === match[0]) return 0;
      var m$0 = match[1];
      return supdate(sval(m$0), m, c);
     }
     var match$0 = src[1];
     if(0 !== match$0[0]){var m$2 = match$0[1]; rem_dep(m$2[3], m[3]);}
     var new_src = sval(mss);
     src[1] = new_src;
     if(0 === new_src[0]){
      var v = new_src[1], _bn_ = rsucc(mss[3]);
      update_rank(m[3], _bn_);
      return supdate(v, m, c);
     }
     var m$1 = new_src[1];
     add_dep(m$1[3], m[3]);
     if(c === nil){
      var _bo_ = rsucc2(m$1[3], mss[3]);
      update_rank(m[3], _bo_);
      var c$0 = find_unfinished([0, m$1[3], 0]);
      return c$0 === nil ? supdate(sval(m$1), m, c$0) : add$0(c$0, m[3]);
     }
     var _bp_ = rsucc2(m$1[3], mss[3]);
     return update_rank(m[3], _bp_)
             ? (allow_reschedule(m[3]), rebuild(c), add$0(c, m[3]))
             : supdate(sval(m$1), m, c);
    }
    add_dep(mss[3], m[3]);
    add_dep(dummy[3], m[3]);
    return signal(0, m, p, u);
   }
   function bind$0(eq, s, sf){
    return switch$1
            (eq,
             map$0
              ([0, function(_bl_, _bk_){return _bl_ === _bk_ ? 1 : 0;}],
               sf,
               s));
   }
   function fix$0(opt, i, f){
    if(opt) var sth = opt[1], eq = sth; else var eq = caml_equal;
    function update_delayed(n, p, u, nl){
     bind(n, p, u);
     var c = find_unfinished(nl);
     if(c !== nil) return add$0(c, n);
     var c$0 = create$0(0);
     caml_call1(n[5], c$0);
     return execute(c$0);
    }
    var
     m = smut(delayed_rank, eq),
     s =
       signal
        ([0, i], m, function(param){return 0;}, function(param){return 0;}),
     _bh_ = caml_call1(f, s),
     match = _bh_[1];
    if(0 === match[0]){
     var
      r = _bh_[2],
      v = match[1],
      p = function(param){return 0;},
      u = function(c){return supdate(v, m, c);},
      _bi_ = deps(m[3]);
     update_delayed(m[3], p, u, _bi_);
     return r;
    }
    var r$0 = _bh_[2], m$0 = match[1];
    if(m$0[3][1] === delayed_rank) caml_call1(Stdlib[1], err_fix);
    function p$0(param){return 0;}
    function u$0(c){return supdate(sval(m$0), m, c);}
    add_dep(m$0[3], m[3]);
    var _bj_ = deps(m[3]);
    update_delayed(m[3], p$0, u$0, [0, m$0[3], _bj_]);
    return r$0;
   }
   function l2$0(opt, f, s$0, s){
    if(opt) var sth = opt[1], eq = sth; else var eq = caml_equal;
    if(0 === s$0[0]){
     var v = s$0[1];
     if(0 === s[0]){var v$0 = s[1]; return [0, caml_call2(f, v, v$0)];}
     var
      m = s[1],
      m$0 = smut(rsucc(m[3]), eq),
      p = function(param){return [0, m[3], 0];},
      u = function(c){return supdate(caml_call2(f, v, sval(m)), m$0, c);};
     add_dep(m[3], m$0[3]);
     return signal(0, m$0, p, u);
    }
    var m0 = s$0[1];
    if(0 === s[0]){
     var
      v$1 = s[1],
      m$1 = smut(rsucc(m0[3]), eq),
      p$0 = function(param){return [0, m0[3], 0];},
      u$0 = function(c){return supdate(caml_call2(f, sval(m0), v$1), m$1, c);};
     add_dep(m0[3], m$1[3]);
     return signal(0, m$1, p$0, u$0);
    }
    var m1 = s[1], m$2 = smut(rsucc2(m0[3], m1[3]), eq);
    function p$1(param){return [0, m0[3], [0, m1[3], 0]];}
    function u$1(c){
     var _bg_ = sval(m1);
     return supdate(caml_call2(f, sval(m0), _bg_), m$2, c);
    }
    add_dep(m0[3], m$2[3]);
    add_dep(m1[3], m$2[3]);
    return signal(0, m$2, p$1, u$1);
   }
   function l3$0(opt, f, s0, s1, s2){
    if(opt) var sth = opt[1], eq = sth; else var eq = caml_equal;
    if(0 === s0[0]){
     var v0 = s0[1];
     if(0 === s1[0]){
      var v1 = s1[1];
      if(0 === s2[0]){var v2 = s2[1]; return [0, caml_call3(f, v0, v1, v2)];}
     }
    }
    else{
     var m0 = s0[1];
     if(0 !== s1[0]){
      var m1 = s1[1];
      if(0 !== s2[0]){
       var
        m2 = s2[1],
        _bb_ = m2[3],
        r = rsucc(rmax(rmax(m0[3], m1[3]), _bb_)),
        m = smut(r, eq),
        p = function(param){return [0, m0[3], [0, m1[3], [0, m2[3], 0]]];},
        u =
          function(c){
           var _be_ = sval(m2), _bf_ = sval(m1);
           return supdate(caml_call3(f, sval(m0), _bf_, _be_), m, c);
          };
       add_dep(m0[3], m[3]);
       add_dep(m1[3], m[3]);
       add_dep(m2[3], m[3]);
       return signal(0, m, p, u);
      }
     }
    }
    return app$0
            ([0, eq],
             l2$0
              ([0, function(_bd_, _bc_){return _bd_ === _bc_ ? 1 : 0;}],
               f,
               s0,
               s1),
             s2);
   }
   function l4$0(opt, f, s0, s1, s2, s3){
    if(opt) var sth = opt[1], eq = sth; else var eq = caml_equal;
    if(0 === s0[0]){
     var v0 = s0[1];
     if(0 === s1[0]){
      var v1 = s1[1];
      if(0 === s2[0]){
       var v2 = s2[1];
       if(0 === s3[0]){
        var v3 = s3[1];
        return [0, caml_call4(f, v0, v1, v2, v3)];
       }
      }
     }
    }
    else{
     var m0 = s0[1];
     if(0 !== s1[0]){
      var m1 = s1[1];
      if(0 !== s2[0]){
       var m2 = s2[1];
       if(0 !== s3[0]){
        var
         m3 = s3[1],
         _a7_ = rmax(m2[3], m3[3]),
         r = rsucc(rmax(rmax(m0[3], m1[3]), _a7_)),
         m = smut(r, eq),
         p =
           function(param){
            return [0, m0[3], [0, m1[3], [0, m2[3], [0, m3[3], 0]]]];
           },
         u =
           function(c){
            var _a__ = sval(m3), _a$_ = sval(m2), _ba_ = sval(m1);
            return supdate(caml_call4(f, sval(m0), _ba_, _a$_, _a__), m, c);
           };
        add_dep(m0[3], m[3]);
        add_dep(m1[3], m[3]);
        add_dep(m2[3], m[3]);
        add_dep(m3[3], m[3]);
        return signal(0, m, p, u);
       }
      }
     }
    }
    return app$0
            ([0, eq],
             l3$0
              ([0, function(_a9_, _a8_){return _a9_ === _a8_ ? 1 : 0;}],
               f,
               s0,
               s1,
               s2),
             s3);
   }
   function l5$0(opt, f, s0, s1, s2, s3, s4){
    if(opt) var sth = opt[1], eq = sth; else var eq = caml_equal;
    if(0 === s0[0]){
     var v0 = s0[1];
     if(0 === s1[0]){
      var v1 = s1[1];
      if(0 === s2[0]){
       var v2 = s2[1];
       if(0 === s3[0]){
        var v3 = s3[1];
        if(0 === s4[0]){
         var v4 = s4[1];
         return [0, caml_call5(f, v0, v1, v2, v3, v4)];
        }
       }
      }
     }
    }
    else{
     var m0 = s0[1];
     if(0 !== s1[0]){
      var m1 = s1[1];
      if(0 !== s2[0]){
       var m2 = s2[1];
       if(0 !== s3[0]){
        var m3 = s3[1];
        if(0 !== s4[0]){
         var
          m4 = s4[1],
          _aZ_ = rmax(m3[3], m4[3]),
          _a0_ = rmax(m2[3], _aZ_),
          r = rsucc(rmax(rmax(m0[3], m1[3]), _a0_)),
          m = smut(r, eq),
          p =
            function(param){
             return [0,
                     m0[3],
                     [0, m1[3], [0, m2[3], [0, m3[3], [0, m4[3], 0]]]]];
            },
          u =
            function(c){
             var
              _a3_ = sval(m4),
              _a4_ = sval(m3),
              _a5_ = sval(m2),
              _a6_ = sval(m1),
              v = caml_call5(f, sval(m0), _a6_, _a5_, _a4_, _a3_);
             return supdate(v, m, c);
            };
         add_dep(m0[3], m[3]);
         add_dep(m1[3], m[3]);
         add_dep(m2[3], m[3]);
         add_dep(m3[3], m[3]);
         add_dep(m4[3], m[3]);
         return signal(0, m, p, u);
        }
       }
      }
     }
    }
    return app$0
            ([0, eq],
             l4$0
              ([0, function(_a2_, _a1_){return _a2_ === _a1_ ? 1 : 0;}],
               f,
               s0,
               s1,
               s2,
               s3),
             s4);
   }
   function l6$0(opt, f, s0, s1, s2, s3, s4, s5){
    if(opt) var sth = opt[1], eq = sth; else var eq = caml_equal;
    if(0 === s0[0]){
     var v0 = s0[1];
     if(0 === s1[0]){
      var v1 = s1[1];
      if(0 === s2[0]){
       var v2 = s2[1];
       if(0 === s3[0]){
        var v3 = s3[1];
        if(0 === s4[0]){
         var v4 = s4[1];
         if(0 === s5[0]){
          var v5 = s5[1];
          return [0, caml_call6(f, v0, v1, v2, v3, v4, v5)];
         }
        }
       }
      }
     }
    }
    else{
     var m0 = s0[1];
     if(0 !== s1[0]){
      var m1 = s1[1];
      if(0 !== s2[0]){
       var m2 = s2[1];
       if(0 !== s3[0]){
        var m3 = s3[1];
        if(0 !== s4[0]){
         var m4 = s4[1];
         if(0 !== s5[0]){
          var
           m5 = s5[1],
           _aP_ = rmax(m4[3], m5[3]),
           _aQ_ = rmax(m3[3], _aP_),
           _aR_ = rmax(m1[3], m2[3]),
           m = rmax(rmax(m0[3], _aR_), _aQ_),
           m$0 = smut(rsucc(m), eq),
           p =
             function(param){
              return [0,
                      m0[3],
                      [0,
                       m1[3],
                       [0, m2[3], [0, m3[3], [0, m4[3], [0, m5[3], 0]]]]]];
             },
           u =
             function(c){
              var
               _aU_ = sval(m5),
               _aV_ = sval(m4),
               _aW_ = sval(m3),
               _aX_ = sval(m2),
               _aY_ = sval(m1),
               v = caml_call6(f, sval(m0), _aY_, _aX_, _aW_, _aV_, _aU_);
              return supdate(v, m$0, c);
             };
          add_dep(m0[3], m$0[3]);
          add_dep(m1[3], m$0[3]);
          add_dep(m2[3], m$0[3]);
          add_dep(m3[3], m$0[3]);
          add_dep(m4[3], m$0[3]);
          add_dep(m5[3], m$0[3]);
          return signal(0, m$0, p, u);
         }
        }
       }
      }
     }
    }
    return app$0
            ([0, eq],
             l5$0
              ([0, function(_aT_, _aS_){return _aT_ === _aS_ ? 1 : 0;}],
               f,
               s0,
               s1,
               s2,
               s3,
               s4),
             s5);
   }
   function stdlib_not(_aO_){return 1 - _aO_;}
   function equal$1(_aN_, _aM_){return _aN_ === _aM_ ? 1 : 0;}
   function not(s){return map$0([0, equal$1], stdlib_not, s);}
   function symbol(s$0, s){
    return l2$0
            ([0, equal$1],
             function(_aK_, _aJ_){var _aL_ = _aK_ ? _aJ_ : _aK_; return _aL_;},
             s$0,
             s);
   }
   function symbol$0(s$0, s){
    return l2$0
            ([0, equal$1],
             function(_aH_, _aG_){var _aI_ = _aH_ || _aG_; return _aI_;},
             s$0,
             s);
   }
   function edge(s){return changes$0(s);}
   function edge_detect(edge, param){
    if(0 === param[0]) return 0;
    var m = param[1], m$0 = emut(rsucc(m[3]));
    function p(param){return [0, m[3], 0];}
    function u(c){
     var _aF_ = caml_equal(sval(m), edge);
     return _aF_ ? eupdate(0, m$0, c) : _aF_;
    }
    end_of_step_add_dep(0, 1, m, m$0);
    return event(m$0, p, u);
   }
   function rise(s){return edge_detect(1, s);}
   function fall(s){return edge_detect(0, s);}
   function flip(b, param){
    if(! param) return [0, b];
    var
     m = param[1],
     m$0 =
       smut(rsucc(m[2]), function(_aE_, _aD_){return _aE_ === _aD_ ? 1 : 0;});
    function p(param){return [0, m[2], 0];}
    function u(c){return m[1][1] ? supdate(1 - sval(m$0), m$0, c) : 0;}
    add_dep$0(m, m$0[3]);
    return signal([0, b], m$0, p, u);
   }
   function equal$2(_aC_, _aB_){return _aC_ === _aB_ ? 1 : 0;}
   function symbol$1(s){
    return map$0([0, equal$2], function(_aA_){return - _aA_ | 0;}, s);
   }
   function succ(s){
    return map$0([0, equal$2], function(_az_){return _az_ + 1 | 0;}, s);
   }
   function pred(s){
    return map$0([0, equal$2], function(_ay_){return _ay_ - 1 | 0;}, s);
   }
   function symbol$2(s$0, s){
    return l2$0
            ([0, equal$2],
             function(_ax_, _aw_){return _ax_ + _aw_ | 0;},
             s$0,
             s);
   }
   function symbol$3(s$0, s){
    return l2$0
            ([0, equal$2],
             function(_av_, _au_){return _av_ - _au_ | 0;},
             s$0,
             s);
   }
   function symbol$4(s$0, s){
    return l2$0([0, equal$2], runtime.caml_mul, s$0, s);
   }
   function mod(s$0, s){return l2$0([0, equal$2], runtime.caml_mod, s$0, s);}
   function abs(s){return map$0([0, equal$2], Stdlib[18], s);}
   var v = Stdlib[19], max_int = [0, v], v$0 = Stdlib[20], min_int = [0, v$0];
   function land(s$0, s){
    return l2$0
            ([0, equal$2], function(_at_, _as_){return _at_ & _as_;}, s$0, s);
   }
   function lor(s$0, s){
    return l2$0
            ([0, equal$2], function(_ar_, _aq_){return _ar_ | _aq_;}, s$0, s);
   }
   function lxor(s$0, s){
    return l2$0
            ([0, equal$2], function(_ap_, _ao_){return _ap_ ^ _ao_;}, s$0, s);
   }
   function lnot(s){return map$0([0, equal$2], Stdlib[21], s);}
   function lsl(s$0, s){
    return l2$0
            ([0, equal$2], function(_an_, _am_){return _an_ << _am_;}, s$0, s);
   }
   function lsr(s$0, s){
    return l2$0
            ([0, equal$2],
             function(_al_, _ak_){return _al_ >>> _ak_ | 0;},
             s$0,
             s);
   }
   function asr(s$0, s){
    return l2$0
            ([0, equal$2], function(_aj_, _ai_){return _aj_ >> _ai_;}, s$0, s);
   }
   function equal$3(_ah_, _ag_){return _ah_ == _ag_ ? 1 : 0;}
   function symbol$5(s){
    return map$0([0, equal$3], function(_af_){return - _af_;}, s);
   }
   function symbol$6(s$0, s){
    return l2$0
            ([0, equal$3], function(_ae_, _ad_){return _ae_ + _ad_;}, s$0, s);
   }
   function symbol$7(s$0, s){
    return l2$0
            ([0, equal$3], function(_ac_, _ab_){return _ac_ - _ab_;}, s$0, s);
   }
   function symbol$8(s$0, s){
    return l2$0([0, equal$3], function(_aa_, _$_){return _aa_ * _$_;}, s$0, s);
   }
   function symbol$9(s$0, s){
    return l2$0([0, equal$3], function(___, _Z_){return ___ / _Z_;}, s$0, s);
   }
   function symbol$10(s$0, s){
    return l2$0
            ([0, equal$3],
             function(_Y_, _X_){return Math.pow(_Y_, _X_);},
             s$0,
             s);
   }
   function sqrt(s){
    return map$0([0, equal$3], function(_W_){return Math.sqrt(_W_);}, s);
   }
   function exp(s){
    return map$0([0, equal$3], function(_V_){return Math.exp(_V_);}, s);
   }
   function log(s){
    return map$0([0, equal$3], function(_U_){return Math.log(_U_);}, s);
   }
   function log10(s){return map$0([0, equal$3], runtime.caml_log10_float, s);}
   function cos(s){
    return map$0([0, equal$3], function(_T_){return Math.cos(_T_);}, s);
   }
   function sin(s){
    return map$0([0, equal$3], function(_S_){return Math.sin(_S_);}, s);
   }
   function tan(s){
    return map$0([0, equal$3], function(_R_){return Math.tan(_R_);}, s);
   }
   function acos(s){
    return map$0([0, equal$3], function(_Q_){return Math.acos(_Q_);}, s);
   }
   function asin(s){
    return map$0([0, equal$3], function(_P_){return Math.asin(_P_);}, s);
   }
   function atan(s){
    return map$0([0, equal$3], function(_O_){return Math.atan(_O_);}, s);
   }
   function atan2(s$0, s){
    return l2$0
            ([0, equal$3],
             function(_N_, _M_){return Math.atan2(_N_, _M_);},
             s$0,
             s);
   }
   function cosh(s){return map$0([0, equal$3], runtime.caml_cosh_float, s);}
   function sinh(s){return map$0([0, equal$3], runtime.caml_sinh_float, s);}
   function tanh(s){return map$0([0, equal$3], runtime.caml_tanh_float, s);}
   function ceil(s){
    return map$0([0, equal$3], function(_L_){return Math.ceil(_L_);}, s);
   }
   function floor(s){
    return map$0([0, equal$3], function(_K_){return Math.floor(_K_);}, s);
   }
   function abs_float(s){
    return map$0([0, equal$3], function(_J_){return Math.abs(_J_);}, s);
   }
   function mod_float(s$0, s){
    return l2$0([0, equal$3], function(_I_, _H_){return _I_ % _H_;}, s$0, s);
   }
   function frexp(s){
    return map$0([0, caml_equal], runtime.caml_frexp_float, s);
   }
   function ldexp(s$0, s){
    return l2$0([0, equal$3], runtime.caml_ldexp_float, s$0, s);
   }
   function modf(s){
    return map$0([0, caml_equal], runtime.caml_modf_float, s);
   }
   function float$0(s){
    return map$0([0, equal$3], function(_G_){return _G_;}, s);
   }
   function float_of_int(s){
    return map$0([0, equal$3], function(_F_){return _F_;}, s);
   }
   function truncate(s){
    return map$0([0, equal$2], function(_E_){return _E_ | 0;}, s);
   }
   function int_of_float(s){
    return map$0([0, equal$2], function(_D_){return _D_ | 0;}, s);
   }
   var
    v$1 = Stdlib[22],
    infinity = [0, v$1],
    v$2 = Stdlib[23],
    neg_infinity = [0, v$2],
    v$3 = Stdlib[24],
    nan = [0, v$3],
    v$4 = Stdlib[25],
    max_float = [0, v$4],
    v$5 = Stdlib[26],
    min_float = [0, v$5],
    v$6 = Stdlib[27],
    epsilon_float = [0, v$6];
   function classify_float(s){
    return map$0
            ([0, function(_C_, _B_){return _C_ === _B_ ? 1 : 0;}],
             runtime.caml_classify_float,
             s);
   }
   function pair(eq, s$0, s){
    return l2$0(eq, function(x, y){return [0, x, y];}, s$0, s);
   }
   function fst(eq, s){return map$0(eq, function(_A_){return _A_[1];}, s);}
   function snd(eq, s){return map$0(eq, function(_z_){return _z_[2];}, s);}
   var Pair = [0, pair, fst, snd], _i_ = [0, cst_src_react_ml, 1526, 17];
   function some$0(s){
    var match = eq_fun(s);
    if(match)
     var
      eq = match[1],
      eq$0 =
        function(v$0, v){
         if(v$0 && v){
          var v$1 = v[1], v$2 = v$0[1];
          return caml_call2(eq, v$2, v$1);
         }
         throw caml_maybe_attach_backtrace([0, Assert_failure, _i_], 1);
        },
      eq$1 = [0, eq$0];
    else
     var eq$1 = 0;
    return map$0(eq$1, function(v){return [0, v];}, s);
   }
   function value$1(opt, default$0, s){
    if(opt) var sth = opt[1], eq = sth; else var eq = caml_equal;
    if(0 === s[0]){
     var match = s[1];
     if(match){var v = match[1]; return [0, v];}
     if(815032112 > default$0[1]){var d$1 = default$0[2]; return d$1;}
     var d = default$0[2];
     if(0 === d[0]){var d$0 = d[1]; return [0, d$0];}
     var md = d[1], c = find_unfinished([0, md[3], 0]);
     if(c === nil) return [0, sval(md)];
     var
      m = smut(rsucc(md[3]), eq),
      p = function(param){return [0, md[3], 0];},
      u =
        function(c){
         rem_dep(md[3], m[3]);
         supdate(sval(md), m, c);
         return stop(0, m[3]);
        };
     add_dep(md[3], m[3]);
     return signal(0, m, p, u);
    }
    var m$0 = s[1];
    if(815032112 <= default$0[1]){
     var match$0 = default$0[2];
     if(0 === match$0[0]){
      var d$2 = match$0[1];
      return fmap$0([0, eq], function(v){return v;}, d$2, s);
     }
     var md$0 = match$0[1], c$0 = find_unfinished([0, md$0[3], 0]);
     if(c$0 === nil){
      var
       m$1 = smut(rsucc(m$0[3]), eq),
       p$0 = function(param){return [0, m$0[3], 0];},
       u$0 =
         function(c){
          var match = sval(m$0);
          if(! match) return 0;
          var v = match[1];
          return supdate(v, m$1, c);
         };
      add_dep(m$0[3], m$1[3]);
      return signal([0, sval(md$0)], m$1, p$0, u$0);
     }
     var
      m$2 = smut(rsucc2(m$0[3], md$0[3]), eq),
      p$1 = function(param){return [0, m$0[3], 0];},
      u$1 =
        function(c){
         var match = sval(m$0);
         if(! match) return 0;
         var v = match[1];
         return supdate(v, m$2, c);
        },
      p_first = function(param){return [0, m$0[3], [0, md$0[3], 0]];},
      u_first =
        function(c){
         rem_dep(md$0[3], m$2[3]);
         var match = sval(m$0);
         if(match){
          var v = match[1];
          supdate(v, m$2, c);
         }
         else
          supdate(sval(md$0), m$2, c);
         return bind(m$2[3], p$1, u$1);
        };
     add_dep(m$0[3], m$2[3]);
     add_dep(md$0[3], m$2[3]);
     return signal(0, m$2, p_first, u_first);
    }
    var match$1 = default$0[2];
    if(0 === match$1[0]){
     var d$3 = match$1[1];
     return map$0
             ([0, eq],
              function(param){
               if(! param) return d$3;
               var v = param[1];
               return v;
              },
              s);
    }
    var md$1 = match$1[1], m$3 = smut(rsucc2(m$0[3], md$1[3]), eq);
    function p$2(param){return [0, m$0[3], [0, md$1[3], 0]];}
    function u$2(c){
     var match = sval(m$0);
     if(! match) return supdate(sval(md$1), m$3, c);
     var v = match[1];
     return supdate(v, m$3, c);
    }
    add_dep(m$0[3], m$3[3]);
    add_dep(md$1[3], m$3[3]);
    return signal(0, m$3, p$2, u$2);
   }
   var Option$0 = [0, none, some$0, value$1];
   function symbol$11(s$0, s){return l2$0([0, equal$1], caml_equal, s$0, s);}
   function symbol$12(s$0, s){
    return l2$0([0, equal$1], runtime.caml_notequal, s$0, s);
   }
   function symbol$13(s$0, s){
    return l2$0([0, equal$1], runtime.caml_lessthan, s$0, s);
   }
   function symbol$14(s$0, s){
    return l2$0([0, equal$1], runtime.caml_greaterthan, s$0, s);
   }
   function symbol$15(s$0, s){
    return l2$0([0, equal$1], runtime.caml_lessequal, s$0, s);
   }
   function symbol$16(s$0, s){
    return l2$0([0, equal$1], runtime.caml_greaterequal, s$0, s);
   }
   function compare(s$0, s){
    return l2$0([0, equal$2], runtime.caml_compare, s$0, s);
   }
   function symbol$17(s$0, s){
    return l2$0
            ([0, equal$1],
             function(_y_, _x_){return _y_ === _x_ ? 1 : 0;},
             s$0,
             s);
   }
   function symbol$18(s$0, s){
    return l2$0
            ([0, equal$1],
             function(_w_, _v_){return _w_ !== _v_ ? 1 : 0;},
             s$0,
             s);
   }
   function Make(Eq){
    var eq = Eq[1];
    function create(v){return create$3([0, eq], v);}
    function equal(s$0, s){return equal$0([0, eq], s$0, s);}
    function hold$0(v, e){return hold([0, eq], v, e);}
    function app(sf, sv){return app$0([0, eq], sf, sv);}
    function map(f, s){return map$0([0, eq], f, s);}
    function filter(pred, i){
     var _t_ = [0, eq];
     return function(_u_){return filter$0(_t_, pred, i, _u_);};
    }
    function fmap(fm, i){
     var _r_ = [0, eq];
     return function(_s_){return fmap$0(_r_, fm, i, _s_);};
    }
    function when(c, i, s){return on$0([0, eq], c, i, s);}
    function dismiss(c, s){
     var _p_ = [0, eq];
     return function(_q_){return dismiss$0(_p_, c, s, _q_);};
    }
    function accum(ef, i){return accum$0([0, eq], ef, i);}
    function fold(f, i){
     var _n_ = [0, eq];
     return function(_o_){return fold$1(_n_, f, i, _o_);};
    }
    function merge(f, a, sl){return merge$0([0, eq], f, a, sl);}
    function switch$0(s){return switch$1([0, eq], s);}
    function bind(s, sf){return bind$0([0, eq], s, sf);}
    function fix(f){
     var _l_ = [0, eq];
     return function(_m_){return fix$0(_l_, f, _m_);};
    }
    function l2(f, s$0, s){return l2$0([0, eq], f, s$0, s);}
    function l3(f, s0, s1, s2){return l3$0([0, eq], f, s0, s1, s2);}
    function l4(f, s0, s1, s2, s3){return l4$0([0, eq], f, s0, s1, s2, s3);}
    function l5(f, s0, s1, s2, s3, s4){
     return l5$0([0, eq], f, s0, s1, s2, s3, s4);
    }
    function l6(f, s0, s1, s2, s3, s4, s5){
     return l6$0([0, eq], f, s0, s1, s2, s3, s4, s5);
    }
    return [0,
            ,
            create,
            equal,
            hold$0,
            app,
            map,
            filter,
            fmap,
            when,
            dismiss,
            accum,
            fold,
            merge,
            switch$0,
            bind,
            fix,
            map,
            l2,
            l3,
            l4,
            l5,
            l6];
   }
   var
    Sb = Make([0, equal$1]),
    Si = Make([0, equal$2]),
    Sf = Make([0, equal$3]),
    React =
      [0,
       [0,
        0,
        create$2,
        retain,
        stop$0,
        equal,
        trace,
        once,
        drop_once,
        app,
        map,
        stamp,
        filter,
        fmap,
        diff,
        changes,
        on,
        on,
        dismiss,
        until,
        accum,
        fold$0,
        select,
        merge,
        switch$0,
        fix,
        map,
        l2,
        l3,
        l4,
        l5,
        l6,
        Option],
       [0,
        const$0,
        create$3,
        value$0,
        retain$0,
        eq_fun,
        stop$1,
        equal$0,
        trace$0,
        hold,
        app$0,
        map$0,
        filter$0,
        fmap$0,
        diff$0,
        changes$0,
        sample,
        on$0,
        on$0,
        dismiss$0,
        accum$0,
        fold$1,
        merge$0,
        switch$1,
        bind$0,
        fix$0,
        map$0,
        l2$0,
        l3$0,
        l4$0,
        l5$0,
        l6$0,
        [0, zero, one, not, symbol, symbol$0, edge, rise, fall, flip],
        [0,
         zero$0,
         one$0,
         minus_one,
         symbol$1,
         succ,
         pred,
         symbol$2,
         symbol$3,
         symbol$4,
         mod,
         abs,
         max_int,
         min_int,
         land,
         lor,
         lxor,
         lnot,
         lsl,
         lsr,
         asr],
        [0,
         zero$1,
         one$1,
         minus_one$0,
         symbol$5,
         symbol$6,
         symbol$7,
         symbol$8,
         symbol$9,
         symbol$10,
         sqrt,
         exp,
         log,
         log10,
         cos,
         sin,
         tan,
         acos,
         asin,
         atan,
         atan2,
         cosh,
         sinh,
         tanh,
         ceil,
         floor,
         abs_float,
         mod_float,
         frexp,
         ldexp,
         modf,
         float$0,
         float_of_int,
         truncate,
         int_of_float,
         infinity,
         neg_infinity,
         nan,
         max_float,
         min_float,
         epsilon_float,
         classify_float],
        Pair,
        Option$0,
        [0,
         symbol$11,
         symbol$12,
         symbol$13,
         symbol$14,
         symbol$15,
         symbol$16,
         compare,
         symbol$17,
         symbol$18],
        function(_j_){
         var _k_ = Make(_j_);
         return [0,
                 _k_[2],
                 _k_[3],
                 _k_[4],
                 _k_[5],
                 _k_[6],
                 _k_[7],
                 _k_[8],
                 _k_[9],
                 _k_[10],
                 _k_[11],
                 _k_[12],
                 _k_[13],
                 _k_[14],
                 _k_[15],
                 _k_[16],
                 _k_[17],
                 _k_[18],
                 _k_[19],
                 _k_[20],
                 _k_[21],
                 _k_[22]];
        },
        [0,
         [0,
          Sb[2],
          Sb[3],
          Sb[4],
          Sb[5],
          Sb[6],
          Sb[7],
          Sb[8],
          Sb[9],
          Sb[10],
          Sb[11],
          Sb[12],
          Sb[13],
          Sb[14],
          Sb[15],
          Sb[16],
          Sb[17],
          Sb[18],
          Sb[19],
          Sb[20],
          Sb[21],
          Sb[22]],
         [0,
          Si[2],
          Si[3],
          Si[4],
          Si[5],
          Si[6],
          Si[7],
          Si[8],
          Si[9],
          Si[10],
          Si[11],
          Si[12],
          Si[13],
          Si[14],
          Si[15],
          Si[16],
          Si[17],
          Si[18],
          Si[19],
          Si[20],
          Si[21],
          Si[22]],
         [0,
          Sf[2],
          Sf[3],
          Sf[4],
          Sf[5],
          Sf[6],
          Sf[7],
          Sf[8],
          Sf[9],
          Sf[10],
          Sf[11],
          Sf[12],
          Sf[13],
          Sf[14],
          Sf[15],
          Sf[16],
          Sf[17],
          Sf[18],
          Sf[19],
          Sf[20],
          Sf[21],
          Sf[22]]]],
       [0, create$0, execute]];
   runtime.caml_register_global(30, React, "React");
   return;
  }
  (globalThis));


//# 1 "../src/.ocaml_canvas.objs/jsoo/default/ocaml_canvas.cma.js"
// Generated by js_of_ocaml
//# 3 "../src/.ocaml_canvas.objs/jsoo/default/ocaml_canvas.cma.js"

//# 6 "../src/.ocaml_canvas.objs/jsoo/default/ocaml_canvas.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$2 = "",
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$2,
    cst$0 = cst$2,
    cst$1 = cst$2,
    zero = [0, 0., 0.],
    unit = [0, 1., 1.],
    id = [254, 1., 0., 0., 1., 0., 0.],
    React = global_data.React,
    Stdlib = global_data.Stdlib,
    Stdlib_Bigarray = global_data.Stdlib__Bigarray,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Callback = global_data.Stdlib__Callback,
    Stdlib_Map = global_data.Stdlib__Map,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl;
   function valid_canvas_size(param){
    var height = param[2], width = param[1], _dI_ = 0 < width ? 1 : 0;
    if(_dI_){
     var _dJ_ = width <= 32767 ? 1 : 0;
     if(_dJ_)
      var
       _dK_ = 0 < height ? 1 : 0,
       _dL_ = _dK_ ? height <= 32767 ? 1 : 0 : _dK_;
     else
      var _dL_ = _dJ_;
    }
    else
     var _dL_ = _dI_;
    return _dL_;
   }
   var
    Not_initialized =
      [248, "OcamlCanvas.V1.Exception.Not_initialized", caml_fresh_oo_id(0)],
    File_not_found =
      [248, "OcamlCanvas.V1.Exception.File_not_found", caml_fresh_oo_id(0)],
    Read_png_failed =
      [248, "OcamlCanvas.V1.Exception.Read_png_failed", caml_fresh_oo_id(0)],
    Write_png_failed =
      [248, "OcamlCanvas.V1.Exception.Write_png_failed", caml_fresh_oo_id(0)];
   caml_call2(Stdlib_Callback[2], "Not_initialized", Not_initialized);
   caml_call2(Stdlib_Callback[2], "File_not_found", [0, File_not_found, cst]);
   caml_call2
    (Stdlib_Callback[2], "Read_png_failed", [0, Read_png_failed, cst$0]);
   caml_call2
    (Stdlib_Callback[2], "Write_png_failed", [0, Write_png_failed, cst$1]);
   var
    Exception =
      [0, Not_initialized, File_not_found, Read_png_failed, Write_png_failed],
    Const =
      [0,
       3.141592653589793,
       1.5707963267948966,
       0.7853981633974483,
       0.39269908169872414,
       0.3183098861837907,
       0.6366197723675814,
       1.2732395447351628,
       2.5464790894703255,
       2.718281828459045,
       0.36787944117144233,
       1.4426950408889634,
       0.4342944819032518,
       0.6931471805599453,
       2.302585092994046];
   function add(param, _dH_){
    var y2 = _dH_[2], x2 = _dH_[1], y1 = param[2], x1 = param[1];
    return [0, x1 + x2, y1 + y2];
   }
   function sub(param, _dG_){
    var y2 = _dG_[2], x2 = _dG_[1], y1 = param[2], x1 = param[1];
    return [0, x1 - x2, y1 - y2];
   }
   function mul(param, k){
    var y = param[2], x = param[1];
    return [0, x * k, y * k];
   }
   function dot(param, _dF_){
    var y2 = _dF_[2], x2 = _dF_[1], y1 = param[2], x1 = param[1];
    return x1 * x2 + y1 * y2;
   }
   function norm(param){
    var y = param[2], x = param[1];
    return Math.sqrt(x * x + y * y);
   }
   var
    Vector = [0, zero, unit, add, sub, mul, dot, norm],
    cst_Transform_inverse_the_matr =
      "Transform.inverse: the matrix is not inversible";
   function create(param){
    var
     f = param[6],
     e = param[5],
     d = param[4],
     c = param[3],
     b = param[2],
     a = param[1];
    return [254, a, b, c, d, e, f];
   }
   function mul$0(t1, t2){
    return [254,
            t1[1] * t2[1] + t1[3] * t2[2],
            t1[2] * t2[1] + t1[4] * t2[2],
            t1[1] * t2[3] + t1[3] * t2[4],
            t1[2] * t2[3] + t1[4] * t2[4],
            t1[5] + t1[1] * t2[5] + t1[3] * t2[6],
            t1[6] + t1[2] * t2[5] + t1[4] * t2[6]];
   }
   function translate(t, param){
    var y = param[2], x = param[1];
    return [254,
            t[1],
            t[2],
            t[3],
            t[4],
            x * t[1] + y * t[3],
            x * t[2] + y * t[4]];
   }
   function scale(t, param){
    var y = param[2], x = param[1];
    return [254, t[1] * x, t[2] * x, t[3] * y, t[4] * y, t[5], t[6]];
   }
   function shear(t, param){
    var y = param[2], x = param[1];
    return [254,
            t[1] + t[3] * y,
            t[2] + t[4] * y,
            t[3] + t[1] * x,
            t[4] + t[2] * x,
            t[5],
            t[6]];
   }
   function rotate(t, a){
    var cos_a = Math.cos(- a), sin_a = Math.sin(- a);
    return [254,
            t[1] * cos_a - t[3] * sin_a,
            t[2] * cos_a - t[4] * sin_a,
            t[3] * cos_a + t[1] * sin_a,
            t[4] * cos_a + t[2] * sin_a,
            t[5],
            t[6]];
   }
   function inverse(t){
    var det = t[1] * t[4] - t[2] * t[3];
    if(det == 0.) caml_call1(Stdlib[1], cst_Transform_inverse_the_matr);
    var invdet = 1. / det;
    return [254,
            t[4] * invdet,
            - t[2] * invdet,
            - t[3] * invdet,
            t[1] * invdet,
            (t[3] * t[6] - t[4] * t[5]) * invdet,
            (t[2] * t[5] - t[1] * t[6]) * invdet];
   }
   var
    Transform =
      [0, id, create, mul$0, translate, scale, shear, rotate, inverse],
    cst_Point_barycenter_a_b_must_ = "Point.barycenter: a + b must be non-nul";
   function of_ints(param){var y = param[2], x = param[1]; return [0, x, y];}
   function sub$0(param, _dE_){
    var y2 = _dE_[2], x2 = _dE_[1], y1 = param[2], x1 = param[1];
    return [0, x1 - x2, y1 - y2];
   }
   function translate$0(param, _dD_){
    var b = _dD_[2], a = _dD_[1], y = param[2], x = param[1];
    return [0, x + a, y + b];
   }
   function rotate$0(param, _dC_, theta){
    var cy = _dC_[2], cx = _dC_[1], y = param[2], x = param[1];
    return [0,
            (x - cx) * Math.cos(- theta) + (y - cy) * Math.sin(- theta) + cx,
            (y - cy) * Math.cos(- theta) - (x - cx) * Math.sin(- theta) + cy];
   }
   function transform(param, t){
    var y = param[2], x = param[1];
    return [0, x * t[1] + y * t[3] + t[5], x * t[2] + y * t[4] + t[6]];
   }
   function barycenter(a, param, b, _dB_){
    var
     y2 = _dB_[2],
     x2 = _dB_[1],
     y1 = param[2],
     x1 = param[1],
     sum_ab = a + b;
    if(sum_ab == 0.) caml_call1(Stdlib[1], cst_Point_barycenter_a_b_must_);
    return [0, (a * x1 + b * x2) / sum_ab, (a * y1 + b * y2) / sum_ab];
   }
   function distance(param, _dA_){
    var y2 = _dA_[2], x2 = _dA_[1], y1 = param[2], x1 = param[1];
    return Math.sqrt(Math.pow(x2 - x1, 2.) + Math.pow(y2 - y1, 2.));
   }
   var
    Point =
      [0,
       of_ints,
       sub$0,
       translate$0,
       rotate$0,
       transform,
       barycenter,
       distance];
   function clip_8(i){return 0 <= i ? 255 < i ? 255 : i : 0;}
   function of_rgb(r, g, b){
    var _dy_ = clip_8(b), _dz_ = clip_8(g) << 8;
    return (((clip_8(r) << 16) + _dz_ | 0) + _dy_ | 0) - 16777216 | 0;
   }
   function to_rgb(c){
    return [0, (c >>> 16 | 0) & 255, (c >>> 8 | 0) & 255, c & 255];
   }
   function of_argb(a, r, g, b){
    var
     _dv_ = clip_8(b),
     _dw_ = clip_8(g) << 8,
     _dx_ = ((clip_8(r) << 16) + _dw_ | 0) + _dv_ | 0;
    return (clip_8(a) << 24) + _dx_ | 0;
   }
   function to_argb(c){
    return [0,
            c >>> 24 | 0,
            (c >>> 16 | 0) & 255,
            (c >>> 8 | 0) & 255,
            c & 255];
   }
   function of_int(i){
    return 0 <= i ? 16777215 < i ? -1 : i - 16777216 | 0 : 0;
   }
   function to_int(c){return c & 16777215;}
   function of_int32(i){return i;}
   function to_int32(c){return c;}
   var
    StringMap = caml_call1(Stdlib_Map[1], [0, Stdlib_String[9]]),
    colors = [0, StringMap[1]];
   function define_color(name, c){
    var _dt_ = colors[1], _du_ = caml_call1(Stdlib_String[26], name);
    colors[1] = caml_call3(StringMap[4], _du_, c, _dt_);
    return c;
   }
   var
    transpBlack = define_color("transparent_black", 0),
    transpWhite = define_color("transparent_white", 16777215),
    black = define_color("black", -16777216),
    white = define_color("white", -1),
    blue = define_color("blue", -16776961),
    cyan = define_color("cyan", -16711681),
    green = define_color("green", -16744448),
    lime = define_color("lime", -16711936),
    orange = define_color("orange", -23296),
    pink = define_color("pink", -16181),
    red = define_color("red", -65536),
    cst_0x = "0x";
   function of_string(s){
    if(1 > caml_ml_string_length(s)) return black;
    if(35 === runtime.caml_string_get(s, 0)){
     var
      _dn_ =
        caml_call3(Stdlib_String[15], s, 1, caml_ml_string_length(s) - 1 | 0),
      s$0 = caml_call2(Stdlib[28], cst_0x, _dn_);
     return of_int(runtime.caml_int_of_string(s$0));
    }
    try{
     var
      _dp_ = colors[1],
      _dq_ = caml_call1(Stdlib_String[26], s),
      _dr_ = caml_call2(StringMap[28], _dq_, _dp_);
     return _dr_;
    }
    catch(_ds_){
     var _do_ = caml_wrap_exception(_ds_);
     if(_do_ === Stdlib[8]) return black;
     throw caml_maybe_attach_backtrace(_do_, 0);
    }
   }
   var
    Font = [0, 100, 200, 300, 400, 500, 600, 700, 800, 900],
    list = [0, 0],
    cst_ImageData_create_invalid_i =
      "ImageData.create: invalid image dimensions",
    cst_ImageData_of_bigarray_inva =
      "ImageData.of_bigarray: invalid image dimensions",
    cst_ImageData_of_bigarray_thir =
      "ImageData.of_bigarray: third dimension must be 4";
   function add_image_data(event, send_event, c){
    list[1] = [0, [0, event, send_event, c], list[1]];
    return 0;
   }
   function add_canvas(event, send_event, c){
    list[1] = [0, [1, event, send_event, c], list[1]];
    return 0;
   }
   function create$0(param){
    var height = param[2], width = param[1];
    if(1 - valid_canvas_size([0, width, height]))
     caml_call1(Stdlib[1], cst_ImageData_create_invalid_i);
    var
     a =
       caml_call5
        (Stdlib_Bigarray[21][1],
         Stdlib_Bigarray[6],
         Stdlib_Bigarray[15],
         height,
         width,
         4);
    runtime.caml_ba_fill(a, 0);
    return a;
   }
   function createFromPNG(filename){
    var
     match = caml_call1(React[1][2], 0),
     send_event = match[2],
     event = match[1];
    runtime.ml_canvas_image_data_create_from_png
     (filename, function(id){return add_image_data(event, send_event, id);});
    return event;
   }
   function importPNG(id, pos, filename){
    var
     match = caml_call1(React[1][2], 0),
     send_event = match[2],
     event = match[1];
    runtime.ml_canvas_image_data_import_png
     (id,
      pos,
      filename,
      function(id){return add_image_data(event, send_event, id);});
    return event;
   }
   function of_bigarray(ba){
    var _dm_ = runtime.caml_ba_dim_1(ba);
    if(1 - valid_canvas_size([0, runtime.caml_ba_dim_2(ba), _dm_]))
     caml_call1(Stdlib[1], cst_ImageData_of_bigarray_inva);
    if(4 !== runtime.caml_ba_dim_3(ba))
     caml_call1(Stdlib[1], cst_ImageData_of_bigarray_thir);
    return ba;
   }
   var Join = [0], Cap = [0], Style = [0], CompositeOp = [0];
   caml_call2(Stdlib_Callback[1], "Hashtbl.hash", Stdlib_Hashtbl[28]);
   function createOffscreenFromPNG(filename){
    var
     match = caml_call1(React[1][2], 0),
     send_event = match[2],
     event = match[1];
    runtime.ml_canvas_create_offscreen_from_png
     (filename, function(c){return add_canvas(event, send_event, c);});
    return event;
   }
   function importPNG$0(c, pos, filename){
    var
     match = caml_call1(React[1][2], 0),
     send_event = match[2],
     event = match[1];
    runtime.ml_canvas_import_png
     (c, pos, filename, function(c){return add_canvas(event, send_event, c);});
    return event;
   }
   var
    match = caml_call1(React[1][2], 0),
    send_frame = match[2],
    frame = match[1],
    match$0 = caml_call1(React[1][2], 0),
    send_focus_in = match$0[2],
    focus_in = match$0[1],
    match$1 = caml_call1(React[1][2], 0),
    send_focus_out = match$1[2],
    focus_out = match$1[1],
    match$2 = caml_call1(React[1][2], 0),
    send_resize = match$2[2],
    resize = match$2[1],
    match$3 = caml_call1(React[1][2], 0),
    send_move = match$3[2],
    move = match$3[1],
    match$4 = caml_call1(React[1][2], 0),
    send_close = match$4[2],
    close = match$4[1],
    match$5 = caml_call1(React[1][2], 0),
    send_key_down = match$5[2],
    key_down = match$5[1],
    match$6 = caml_call1(React[1][2], 0),
    send_key_up = match$6[2],
    key_up = match$6[1],
    match$7 = caml_call1(React[1][2], 0),
    send_button_down = match$7[2],
    button_down = match$7[1],
    match$8 = caml_call1(React[1][2], 0),
    send_button_up = match$8[2],
    button_up = match$8[1],
    match$9 = caml_call1(React[1][2], 0),
    send_mouse_move = match$9[2],
    mouse_move = match$9[1],
    match$10 =
      caml_call2(React[2][2], 0, runtime.caml_int64_create_lo_mi_hi(0, 0, 0)),
    set_event_timestamp = match$10[2],
    event_timestamp = match$10[1];
   function run(k){
    function h(e){
     switch(e[0]){
       case 0: break;
       case 1:
        var
         match = e[1],
         timestamp = match[2],
         canvas = match[1],
         e$0 = [0, canvas, timestamp, 0];
        caml_call2(set_event_timestamp, 0, e$0[2]);
        caml_call2(send_frame, 0, e$0);
        break;
       case 2:
        var _dj_ = e[1], timestamp$0 = _dj_[2], canvas$0 = _dj_[1];
        if(_dj_[3]){
         var e$1 = [0, canvas$0, timestamp$0, 0];
         caml_call2(set_event_timestamp, 0, e$1[2]);
         caml_call2(send_focus_in, 0, e$1);
        }
        else{
         var e$2 = [0, canvas$0, timestamp$0, 0];
         caml_call2(set_event_timestamp, 0, e$2[2]);
         caml_call2(send_focus_out, 0, e$2);
        }
        break;
       case 3:
        var
         match$0 = e[1],
         size = match$0[3],
         timestamp$1 = match$0[2],
         canvas$1 = match$0[1],
         e$3 = [0, canvas$1, timestamp$1, size];
        caml_call2(set_event_timestamp, 0, e$3[2]);
        caml_call2(send_resize, 0, e$3);
        break;
       case 4:
        var
         match$1 = e[1],
         position = match$1[3],
         timestamp$2 = match$1[2],
         canvas$2 = match$1[1],
         e$4 = [0, canvas$2, timestamp$2, position];
        caml_call2(set_event_timestamp, 0, e$4[2]);
        caml_call2(send_move, 0, e$4);
        break;
       case 5:
        var
         match$2 = e[1],
         timestamp$3 = match$2[2],
         canvas$3 = match$2[1],
         e$5 = [0, canvas$3, timestamp$3, 0];
        caml_call2(set_event_timestamp, 0, e$5[2]);
        caml_call2(send_close, 0, e$5);
        break;
       case 6:
        var
         _dk_ = e[1],
         flags = _dk_[5],
         char$0 = _dk_[4],
         key = _dk_[3],
         timestamp$4 = _dk_[2],
         canvas$4 = _dk_[1];
        if(_dk_[6]){
         var e$6 = [0, canvas$4, timestamp$4, [0, key, char$0, flags]];
         caml_call2(set_event_timestamp, 0, e$6[2]);
         caml_call2(send_key_down, 0, e$6);
        }
        else{
         var e$7 = [0, canvas$4, timestamp$4, [0, key, char$0, flags]];
         caml_call2(set_event_timestamp, 0, e$7[2]);
         caml_call2(send_key_up, 0, e$7);
        }
        break;
       case 7:
        var
         _dl_ = e[1],
         button = _dl_[4],
         position$0 = _dl_[3],
         timestamp$5 = _dl_[2],
         canvas$5 = _dl_[1];
        if(_dl_[5]){
         var e$8 = [0, canvas$5, timestamp$5, [0, position$0, button]];
         caml_call2(set_event_timestamp, 0, e$8[2]);
         caml_call2(send_button_down, 0, e$8);
        }
        else{
         var e$9 = [0, canvas$5, timestamp$5, [0, position$0, button]];
         caml_call2(set_event_timestamp, 0, e$9[2]);
         caml_call2(send_button_up, 0, e$9);
        }
        break;
       default:
        var
         match$3 = e[1],
         position$1 = match$3[3],
         timestamp$6 = match$3[2],
         canvas$6 = match$3[1],
         e$10 = [0, canvas$6, timestamp$6, position$1];
        caml_call2(set_event_timestamp, 0, e$10[2]);
        caml_call2(send_mouse_move, 0, e$10);
     }
     var l = list[1];
     if(! l) return 0;
     list[1] = 0;
     var _di_ = caml_call1(Stdlib_List[9], l);
     return caml_call2
             (Stdlib_List[17],
              function(param){
               if(0 === param[0]){
                var id = param[3], send_event = param[2], event = param[1];
                caml_call2(send_event, 0, id);
                return caml_call2(React[1][4], 0, event);
               }
               var c = param[3], send_event$0 = param[2], event$0 = param[1];
               caml_call2(send_event$0, 0, c);
               return caml_call2(React[1][4], 0, event$0);
              },
              _di_);
    }
    return runtime.ml_canvas_run(h, k);
   }
   var
    OcamlCanvas =
      [0,
       [0,
        Exception,
        Const,
        Vector,
        Transform,
        Point,
        [0,
         of_rgb,
         to_rgb,
         of_argb,
         to_argb,
         of_int,
         to_int,
         of_int32,
         to_int32,
         transpBlack,
         transpWhite,
         black,
         white,
         blue,
         cyan,
         green,
         lime,
         orange,
         pink,
         red,
         of_string,
         define_color],
        Font,
        [0,
         create$0,
         createFromPNG,
         function(_dh_){return runtime.ml_canvas_image_data_get_size(_dh_);},
         function(_dg_, _df_){
          return runtime.ml_canvas_image_data_fill(_dg_, _df_);
         },
         function(_de_, _dd_, _dc_){
          return runtime.ml_canvas_image_data_sub(_de_, _dd_, _dc_);
         },
         function(_db_, _da_, _c$_, _c__, _c9_){
          return runtime.ml_canvas_image_data_blit
                  (_db_, _da_, _c$_, _c__, _c9_);
         },
         function(_c8_, _c7_){
          return runtime.ml_canvas_image_data_get_pixel(_c8_, _c7_);
         },
         function(_c6_, _c5_, _c4_){
          return runtime.ml_canvas_image_data_put_pixel(_c6_, _c5_, _c4_);
         },
         importPNG,
         function(_c3_, _c2_){
          return runtime.ml_canvas_image_data_export_png(_c3_, _c2_);
         },
         of_bigarray,
         function(_c1_){return _c1_;}],
        [0,
         function(_c0_, _cZ_){
          return runtime.ml_canvas_gradient_create_linear(_c0_, _cZ_);
         },
         function(_cY_, _cX_, _cW_, _cV_){
          return runtime.ml_canvas_gradient_create_radial
                  (_cY_, _cX_, _cW_, _cV_);
         },
         function(_cU_, _cT_){
          return runtime.ml_canvas_gradient_create_conic(_cU_, _cT_);
         },
         function(_cS_, _cR_, _cQ_){
          return runtime.ml_canvas_gradient_add_color_stop(_cS_, _cR_, _cQ_);
         }],
        [0,
         function(_cP_, _cO_){
          return runtime.ml_canvas_pattern_create(_cP_, _cO_);
         }],
        [0,
         function(_cN_){return runtime.ml_canvas_path_create(_cN_);},
         function(_cM_, _cL_){
          return runtime.ml_canvas_path_move_to(_cM_, _cL_);
         },
         function(_cK_){return runtime.ml_canvas_path_close(_cK_);},
         function(_cJ_, _cI_){
          return runtime.ml_canvas_path_line_to(_cJ_, _cI_);
         },
         function(_cH_, _cG_, _cF_, _cE_, _cD_, _cC_){
          return runtime.ml_canvas_path_arc
                  (_cH_, _cG_, _cF_, _cE_, _cD_, _cC_);
         },
         function(_cB_, _cA_, _cz_, _cy_){
          return runtime.ml_canvas_path_arc_to(_cB_, _cA_, _cz_, _cy_);
         },
         function(_cx_, _cw_, _cv_){
          return runtime.ml_canvas_path_quadratic_curve_to(_cx_, _cw_, _cv_);
         },
         function(_cu_, _ct_, _cs_, _cr_){
          return runtime.ml_canvas_path_bezier_curve_to
                  (_cu_, _ct_, _cs_, _cr_);
         },
         function(_cq_, _cp_, _co_){
          return runtime.ml_canvas_path_rect(_cq_, _cp_, _co_);
         },
         function(_cn_, _cm_, _cl_, _ck_, _cj_, _ci_, _ch_){
          return runtime.ml_canvas_path_ellipse
                  (_cn_, _cm_, _cl_, _ck_, _cj_, _ci_, _ch_);
         },
         function(_cg_, _cf_){return runtime.ml_canvas_path_add(_cg_, _cf_);},
         function(_ce_, _cd_, _cc_){
          return runtime.ml_canvas_path_add_transformed(_ce_, _cd_, _cc_);
         }],
        Join,
        Cap,
        Style,
        CompositeOp,
        [0,
         function(_cb_, _ca_){return runtime.ml_canvas_compare(_cb_, _ca_);},
         function(_b$_){return runtime.ml_canvas_hash(_b$_);},
         function
         (_b__, _b9_, _b8_, _b7_, _b6_, _b5_, _b4_, _b3_, _b2_, _b1_, _b0_){
          return runtime.ml_canvas_create_onscreen
                  (_b__,
                   _b9_,
                   _b8_,
                   _b7_,
                   _b6_,
                   _b5_,
                   _b4_,
                   _b3_,
                   _b2_,
                   _b1_,
                   _b0_);
         },
         function(_bZ_, _bY_){
          return runtime.ml_canvas_create_offscreen(_bZ_, _bY_);
         },
         function(_bX_){
          return runtime.ml_canvas_create_offscreen_from_image_data(_bX_);
         },
         createOffscreenFromPNG,
         function(_bW_){return runtime.ml_canvas_show(_bW_);},
         function(_bV_){return runtime.ml_canvas_hide(_bV_);},
         function(_bU_){return runtime.ml_canvas_close(_bU_);},
         function(_bT_){return runtime.ml_canvas_commit(_bT_);},
         function(_bS_){return runtime.ml_canvas_get_id(_bS_);},
         function(_bR_){return runtime.ml_canvas_get_size(_bR_);},
         function(_bQ_, _bP_){return runtime.ml_canvas_set_size(_bQ_, _bP_);},
         function(_bO_){return runtime.ml_canvas_get_position(_bO_);},
         function(_bN_, _bM_){
          return runtime.ml_canvas_set_position(_bN_, _bM_);
         },
         function(_bL_){return runtime.ml_canvas_save(_bL_);},
         function(_bK_){return runtime.ml_canvas_restore(_bK_);},
         function(_bJ_, _bI_){
          return runtime.ml_canvas_set_transform(_bJ_, _bI_);
         },
         function(_bH_, _bG_){return runtime.ml_canvas_transform(_bH_, _bG_);},
         function(_bF_, _bE_){return runtime.ml_canvas_translate(_bF_, _bE_);},
         function(_bD_, _bC_){return runtime.ml_canvas_scale(_bD_, _bC_);},
         function(_bB_, _bA_){return runtime.ml_canvas_shear(_bB_, _bA_);},
         function(_bz_, _by_){return runtime.ml_canvas_rotate(_bz_, _by_);},
         function(_bx_){return runtime.ml_canvas_get_line_width(_bx_);},
         function(_bw_, _bv_){
          return runtime.ml_canvas_set_line_width(_bw_, _bv_);
         },
         function(_bu_){return runtime.ml_canvas_get_line_join(_bu_);},
         function(_bt_, _bs_){
          return runtime.ml_canvas_set_line_join(_bt_, _bs_);
         },
         function(_br_){return runtime.ml_canvas_get_line_cap(_br_);},
         function(_bq_, _bp_){
          return runtime.ml_canvas_set_line_cap(_bq_, _bp_);
         },
         function(_bo_){return runtime.ml_canvas_get_miter_limit(_bo_);},
         function(_bn_, _bm_){
          return runtime.ml_canvas_set_miter_limit(_bn_, _bm_);
         },
         function(_bl_){return runtime.ml_canvas_get_line_dash_offset(_bl_);},
         function(_bk_, _bj_){
          return runtime.ml_canvas_set_line_dash_offset(_bk_, _bj_);
         },
         function(_bi_){return runtime.ml_canvas_get_line_dash(_bi_);},
         function(_bh_, _bg_){
          return runtime.ml_canvas_set_line_dash(_bh_, _bg_);
         },
         function(_bf_){return runtime.ml_canvas_get_stroke_color(_bf_);},
         function(_be_, _bd_){
          return runtime.ml_canvas_set_stroke_color(_be_, _bd_);
         },
         function(_bc_, _bb_){
          return runtime.ml_canvas_set_stroke_gradient(_bc_, _bb_);
         },
         function(_ba_, _a$_){
          return runtime.ml_canvas_set_stroke_pattern(_ba_, _a$_);
         },
         function(_a__){return runtime.ml_canvas_get_stroke_style(_a__);},
         function(_a9_, _a8_){
          return runtime.ml_canvas_set_stroke_style(_a9_, _a8_);
         },
         function(_a7_){return runtime.ml_canvas_get_fill_color(_a7_);},
         function(_a6_, _a5_){
          return runtime.ml_canvas_set_fill_color(_a6_, _a5_);
         },
         function(_a4_, _a3_){
          return runtime.ml_canvas_set_fill_gradient(_a4_, _a3_);
         },
         function(_a2_, _a1_){
          return runtime.ml_canvas_set_fill_pattern(_a2_, _a1_);
         },
         function(_a0_){return runtime.ml_canvas_get_fill_style(_a0_);},
         function(_aZ_, _aY_){
          return runtime.ml_canvas_set_fill_style(_aZ_, _aY_);
         },
         function(_aX_){return runtime.ml_canvas_get_global_alpha(_aX_);},
         function(_aW_, _aV_){
          return runtime.ml_canvas_set_global_alpha(_aW_, _aV_);
         },
         function(_aU_){
          return runtime.ml_canvas_get_global_composite_operation(_aU_);
         },
         function(_aT_, _aS_){
          return runtime.ml_canvas_set_global_composite_operation(_aT_, _aS_);
         },
         function(_aR_){return runtime.ml_canvas_get_shadow_color(_aR_);},
         function(_aQ_, _aP_){
          return runtime.ml_canvas_set_shadow_color(_aQ_, _aP_);
         },
         function(_aO_){return runtime.ml_canvas_get_shadow_blur(_aO_);},
         function(_aN_, _aM_){
          return runtime.ml_canvas_set_shadow_blur(_aN_, _aM_);
         },
         function(_aL_){return runtime.ml_canvas_get_shadow_offset(_aL_);},
         function(_aK_, _aJ_){
          return runtime.ml_canvas_set_shadow_offset(_aK_, _aJ_);
         },
         function(_aI_, _aH_, _aG_, _aF_, _aE_){
          return runtime.ml_canvas_set_font(_aI_, _aH_, _aG_, _aF_, _aE_);
         },
         function(_aD_){return runtime.ml_canvas_clear_path(_aD_);},
         function(_aC_){return runtime.ml_canvas_close_path(_aC_);},
         function(_aB_, _aA_){return runtime.ml_canvas_move_to(_aB_, _aA_);},
         function(_az_, _ay_){return runtime.ml_canvas_line_to(_az_, _ay_);},
         function(_ax_, _aw_, _av_, _au_, _at_, _as_){
          return runtime.ml_canvas_arc(_ax_, _aw_, _av_, _au_, _at_, _as_);
         },
         function(_ar_, _aq_, _ap_, _ao_){
          return runtime.ml_canvas_arc_to(_ar_, _aq_, _ap_, _ao_);
         },
         function(_an_, _am_, _al_){
          return runtime.ml_canvas_quadratic_curve_to(_an_, _am_, _al_);
         },
         function(_ak_, _aj_, _ai_, _ah_){
          return runtime.ml_canvas_bezier_curve_to(_ak_, _aj_, _ai_, _ah_);
         },
         function(_ag_, _af_, _ae_){
          return runtime.ml_canvas_rect(_ag_, _af_, _ae_);
         },
         function(_ad_, _ac_, _ab_, _aa_, _$_, ___, _Z_){
          return runtime.ml_canvas_ellipse
                  (_ad_, _ac_, _ab_, _aa_, _$_, ___, _Z_);
         },
         function(_Y_, _X_){return runtime.ml_canvas_fill(_Y_, _X_);},
         function(_W_, _V_, _U_){
          return runtime.ml_canvas_fill_path(_W_, _V_, _U_);
         },
         function(_T_){return runtime.ml_canvas_stroke(_T_);},
         function(_S_, _R_){return runtime.ml_canvas_stroke_path(_S_, _R_);},
         function(_Q_, _P_){return runtime.ml_canvas_clip(_Q_, _P_);},
         function(_O_, _N_, _M_){
          return runtime.ml_canvas_clip_path(_O_, _N_, _M_);
         },
         function(_L_, _K_, _J_){
          return runtime.ml_canvas_fill_rect(_L_, _K_, _J_);
         },
         function(_I_, _H_, _G_){
          return runtime.ml_canvas_stroke_rect(_I_, _H_, _G_);
         },
         function(_F_, _E_, _D_){
          return runtime.ml_canvas_fill_text(_F_, _E_, _D_);
         },
         function(_C_, _B_, _A_){
          return runtime.ml_canvas_stroke_text(_C_, _B_, _A_);
         },
         function(_z_, _y_, _x_, _w_, _v_){
          return runtime.ml_canvas_blit(_z_, _y_, _x_, _w_, _v_);
         },
         function(_u_, _t_){return runtime.ml_canvas_get_pixel(_u_, _t_);},
         function(_s_, _r_, _q_){
          return runtime.ml_canvas_put_pixel(_s_, _r_, _q_);
         },
         function(_p_, _o_, _n_){
          return runtime.ml_canvas_get_image_data(_p_, _o_, _n_);
         },
         function(_m_, _l_, _k_, _j_, _i_){
          return runtime.ml_canvas_put_image_data(_m_, _l_, _k_, _j_, _i_);
         },
         importPNG$0,
         function(_h_, _g_){return runtime.ml_canvas_export_png(_h_, _g_);}],
        [0,
         frame,
         focus_in,
         focus_out,
         resize,
         move,
         close,
         key_down,
         key_up,
         button_down,
         button_up,
         mouse_move,
         event_timestamp,
         function(_f_){return runtime.ml_canvas_int_of_key(_f_);},
         function(_e_){return runtime.ml_canvas_key_of_int(_e_);}],
        [0,
         function(_d_){return runtime.ml_canvas_init(_d_);},
         run,
         function(_c_){return runtime.ml_canvas_stop(_c_);},
         function(_b_){return runtime.ml_canvas_get_canvas(_b_);},
         function(_a_){return runtime.ml_canvas_get_current_timestamp(_a_);}]]];
   runtime.caml_register_global(82, OcamlCanvas, "OcamlCanvas");
   return;
  }
  (globalThis));


//# 1 ".ball.eobjs/jsoo/dune__exe__Ball.cmo.js"
// Generated by js_of_ocaml
//# 3 ".ball.eobjs/jsoo/dune__exe__Ball.cmo.js"

//# 6 ".ball.eobjs/jsoo/dune__exe__Ball.cmo.js"
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst_Goodbye = "Goodbye !\n";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call11(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10){
    return (f.l >= 0 ? f.l : f.l = f.length) == 11
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Printf = global_data.Stdlib__Printf,
    OcamlCanvas = global_data.OcamlCanvas,
    Stdlib = global_data.Stdlib,
    React = global_data.React,
    events = [0, 0];
   function retain_event(e){events[1] = [0, e, events[1]]; return 0;}
   function clear_events(param){events[1] = 0; return 0;}
   var state = [0, [0, 260., 100.], [0, 0., 0.], [0, 0., 0.], 0];
   caml_call1(OcamlCanvas[1][18][1], 0);
   var
    c =
      caml_call11
       (OcamlCanvas[1][16][3],
        0,
        0,
        0,
        0,
        0,
        0,
        [0, "Ball"],
        0,
        [0, [0, 300, 200]],
        [0, 520, 200],
        0);
   caml_call2(OcamlCanvas[1][16][61], c, [0, 0., 0.]);
   caml_call2(OcamlCanvas[1][16][62], c, [0, 520., 0.]);
   caml_call2(OcamlCanvas[1][16][62], c, [0, 520., 200.]);
   caml_call2(OcamlCanvas[1][16][62], c, [0, 0., 200.]);
   caml_call1(OcamlCanvas[1][16][60], c);
   caml_call2(OcamlCanvas[1][16][25], c, 10.);
   caml_call1(OcamlCanvas[1][16][71], c);
   caml_call1(OcamlCanvas[1][16][7], c);
   retain_event
    (caml_call2
      (React[1][10],
       function(param){return caml_call1(OcamlCanvas[1][18][3], 0);},
       OcamlCanvas[1][17][6]));
   retain_event
    (caml_call2
      (React[1][10],
       function(param){
        var key = param[3][1], _k_ = 0 === key ? 1 : 0;
        return _k_ ? caml_call1(OcamlCanvas[1][18][3], 0) : _k_;
       },
       OcamlCanvas[1][17][7]));
   retain_event
    (caml_call2
      (React[1][10],
       function(param){
        var position = param[3];
        state[3] = caml_call1(OcamlCanvas[1][5][1], position);
        return 0;
       },
       OcamlCanvas[1][17][11]));
   retain_event
    (caml_call2
      (React[1][10],
       function(param){state[4] = 1; return 0;},
       OcamlCanvas[1][17][9]));
   retain_event
    (caml_call2
      (React[1][10],
       function(param){state[4] = 0; return 0;},
       OcamlCanvas[1][17][10]));
   var
    _a_ = [0, 0., 109.8],
    _b_ = [0, 0., 0.],
    _c_ = [0, 510., 190.],
    _d_ = [0, 5., 5.],
    _e_ = [0, 0., 0.];
   retain_event
    (caml_call2
      (React[1][10],
       function(param){
        var
         dt = 0.033,
         dir = caml_call2(OcamlCanvas[1][5][2], state[3], state[1]),
         r = 30.,
         damp = 0.99,
         force = state[4] ? caml_call2(OcamlCanvas[1][3][5], dir, 4.) : _e_,
         accel = caml_call2(OcamlCanvas[1][3][3], force, _a_),
         vec = caml_call2(OcamlCanvas[1][3][5], state[2], damp),
         _g_ = caml_call2(OcamlCanvas[1][3][5], accel, dt),
         vec$0 = caml_call2(OcamlCanvas[1][3][3], vec, _g_),
         vy = vec$0[2],
         vx = vec$0[1],
         _h_ = caml_call2(OcamlCanvas[1][3][5], vec$0, dt),
         match = caml_call2(OcamlCanvas[1][5][3], state[1], _h_),
         y = match[2],
         x = match[1];
        if(490. < x)
         var
          vx$0 = caml_call2(Stdlib[16], 0. - vx, 0.),
          vx$1 = vx$0,
          x$0 = 490.;
        else if(x < 30.)
         var
          vx$2 = caml_call2(Stdlib[17], 0. - vx, 0.),
          vx$1 = vx$2,
          x$0 = 30.;
        else
         var vx$1 = vx, x$0 = x;
        if(170. < y)
         var
          vy$0 = caml_call2(Stdlib[16], 0. - vy, 0.),
          vy$1 = vy$0,
          y$0 = 170.;
        else if(y < 30.)
         var
          vy$2 = caml_call2(Stdlib[17], 0. - vy, 0.),
          vy$1 = vy$2,
          y$0 = 30.;
        else
         var vy$1 = vy, y$0 = y;
        var
         pos = [0, x$0, y$0],
         vec$1 = [0, vx$1, vy$1],
         mv = caml_call2(OcamlCanvas[1][5][2], pos, state[1]);
        caml_call2(OcamlCanvas[1][16][55], c, 0.);
        caml_call2(OcamlCanvas[1][16][53], c, OcamlCanvas[1][6][9]);
        caml_call2(OcamlCanvas[1][16][57], c, _b_);
        caml_call2(OcamlCanvas[1][16][43], c, OcamlCanvas[1][6][12]);
        caml_call3(OcamlCanvas[1][16][75], c, _d_, _c_);
        caml_call2(OcamlCanvas[1][16][43], c, OcamlCanvas[1][6][11]);
        caml_call1(OcamlCanvas[1][16][59], c);
        var
         speed = caml_call1(OcamlCanvas[1][3][7], mv),
         blur =
           10. * (Math.exp(speed / 15.) / (1. + Math.exp(speed / 15.))) - 5.;
        caml_call2(OcamlCanvas[1][16][55], c, blur);
        var _i_ = caml_call4(OcamlCanvas[1][6][3], 64, 0, 0, 0);
        caml_call2(OcamlCanvas[1][16][53], c, _i_);
        var _j_ = caml_call2(OcamlCanvas[1][3][5], mv, -10. * blur / speed);
        caml_call2(OcamlCanvas[1][16][57], c, _j_);
        caml_call6
         (OcamlCanvas[1][16][63], c, pos, r, 0., 2. * OcamlCanvas[1][2][1], 0);
        caml_call2(OcamlCanvas[1][16][69], c, 1);
        state[1] = pos;
        state[2] = vec$1;
        return 0;
       },
       OcamlCanvas[1][17][1]));
   var _f_ = [0, [11, cst_Goodbye, 0], cst_Goodbye];
   caml_call1
    (OcamlCanvas[1][18][2],
     function(param){
      clear_events(0);
      return caml_call1(Stdlib_Printf[2], _f_);
     });
   var Dune_exe_Ball = [0, events, retain_event, clear_events, state];
   runtime.caml_register_global(45, Dune_exe_Ball, "Dune__exe__Ball");
   return;
  }
  (globalThis));


//# 1 "../.js/default/stdlib/std_exit.cmo.js"
// Generated by js_of_ocaml
//# 3 "../.js/default/stdlib/std_exit.cmo.js"

//# 6 "../.js/default/stdlib/std_exit.cmo.js"
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib;
   caml_call1(Stdlib[103], 0);
   var Std_exit = [0];
   runtime.caml_register_global(1, Std_exit, "Std_exit");
   return;
  }
  (globalThis));


//# sourceMappingURL=data:application/json;base64,
